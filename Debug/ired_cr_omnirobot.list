
ired_cr_omnirobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d10  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  08008ee0  08008ee0  00018ee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009320  08009320  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009320  08009320  00019320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009328  08009328  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009328  08009328  00019328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800932c  0800932c  0001932c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200001d4  08009504  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  08009504  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001085d  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000225f  00000000  00000000  00030aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  00032d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc3  00000000  00000000  00033d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022838  00000000  00000000  000349eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013949  00000000  00000000  00057223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d536e  00000000  00000000  0006ab6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a30  00000000  00000000  0013fedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0014590c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008ec8 	.word	0x08008ec8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	08008ec8 	.word	0x08008ec8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001034:	f000 ff10 	bl	8001e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001038:	f000 f814 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103c:	f000 fafc 	bl	8001638 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001040:	f000 f8b0 	bl	80011a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001044:	f000 f906 	bl	8001254 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001048:	f000 f9d2 	bl	80013f0 <MX_TIM4_Init>
  MX_TIM3_Init();
 800104c:	f000 f97c 	bl	8001348 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001050:	f000 f87a 	bl	8001148 <MX_I2C1_Init>
  MX_TIM5_Init();
 8001054:	f000 fa1a 	bl	800148c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001058:	f000 fa6c 	bl	8001534 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800105c:	f000 fac2 	bl	80015e4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001060:	e7fe      	b.n	8001060 <main+0x30>
	...

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2234      	movs	r2, #52	; 0x34
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f004 faed 	bl	8005652 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <SystemClock_Config+0xdc>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a2b      	ldr	r2, [pc, #172]	; (8001140 <SystemClock_Config+0xdc>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b29      	ldr	r3, [pc, #164]	; (8001140 <SystemClock_Config+0xdc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <SystemClock_Config+0xe0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a25      	ldr	r2, [pc, #148]	; (8001144 <SystemClock_Config+0xe0>)
 80010ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b23      	ldr	r3, [pc, #140]	; (8001144 <SystemClock_Config+0xe0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 80010d4:	230f      	movs	r3, #15
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010d8:	23d8      	movs	r3, #216	; 0xd8
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fe3d 	bl	8002d6c <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010f8:	f000 fb14 	bl	8001724 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010fc:	f001 fb22 	bl	8002744 <HAL_PWREx_EnableOverDrive>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001106:	f000 fb0d 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110e:	2302      	movs	r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001116:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800111a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800111c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001120:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001122:	f107 0308 	add.w	r3, r7, #8
 8001126:	2105      	movs	r1, #5
 8001128:	4618      	mov	r0, r3
 800112a:	f001 fb5b 	bl	80027e4 <HAL_RCC_ClockConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001134:	f000 faf6 	bl	8001724 <Error_Handler>
  }
}
 8001138:	bf00      	nop
 800113a:	3750      	adds	r7, #80	; 0x50
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <MX_I2C1_Init+0x50>)
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <MX_I2C1_Init+0x54>)
 8001150:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001152:	4b11      	ldr	r3, [pc, #68]	; (8001198 <MX_I2C1_Init+0x50>)
 8001154:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <MX_I2C1_Init+0x58>)
 8001156:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <MX_I2C1_Init+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_I2C1_Init+0x50>)
 8001160:	2200      	movs	r2, #0
 8001162:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <MX_I2C1_Init+0x50>)
 8001166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001178:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_I2C1_Init+0x50>)
 8001186:	f001 f999 	bl	80024bc <HAL_I2C_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001190:	f000 fac8 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	200001f0 	.word	0x200001f0
 800119c:	40005400 	.word	0x40005400
 80011a0:	000186a0 	.word	0x000186a0

080011a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08c      	sub	sp, #48	; 0x30
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	2224      	movs	r2, #36	; 0x24
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 fa4d 	bl	8005652 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <MX_TIM1_Init+0xa8>)
 80011c2:	4a23      	ldr	r2, [pc, #140]	; (8001250 <MX_TIM1_Init+0xac>)
 80011c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <MX_TIM1_Init+0xa8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_TIM1_Init+0xa8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_TIM1_Init+0xa8>)
 80011d4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80011d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_TIM1_Init+0xa8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_TIM1_Init+0xa8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_TIM1_Init+0xa8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ec:	2303      	movs	r3, #3
 80011ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011f4:	2301      	movs	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001204:	2301      	movs	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_TIM1_Init+0xa8>)
 8001218:	f002 f8e4 	bl	80033e4 <HAL_TIM_Encoder_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001222:	f000 fa7f 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_TIM1_Init+0xa8>)
 8001234:	f002 ff1e 	bl	8004074 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800123e:	f000 fa71 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000244 	.word	0x20000244
 8001250:	40010000 	.word	0x40010000

08001254 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	f107 0320 	add.w	r3, r7, #32
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]
 8001272:	615a      	str	r2, [r3, #20]
 8001274:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001278:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800127c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45-1;
 800127e:	4b31      	ldr	r3, [pc, #196]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001280:	222c      	movs	r2, #44	; 0x2c
 8001282:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800128a:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <MX_TIM2_Init+0xf0>)
 800128c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001290:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b2c      	ldr	r3, [pc, #176]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001298:	4b2a      	ldr	r3, [pc, #168]	; (8001344 <MX_TIM2_Init+0xf0>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800129e:	4829      	ldr	r0, [pc, #164]	; (8001344 <MX_TIM2_Init+0xf0>)
 80012a0:	f002 f851 	bl	8003346 <HAL_TIM_PWM_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80012aa:	f000 fa3b 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	4619      	mov	r1, r3
 80012bc:	4821      	ldr	r0, [pc, #132]	; (8001344 <MX_TIM2_Init+0xf0>)
 80012be:	f002 fed9 	bl	8004074 <HAL_TIMEx_MasterConfigSynchronization>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80012c8:	f000 fa2c 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012cc:	2360      	movs	r3, #96	; 0x60
 80012ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	4619      	mov	r1, r3
 80012e2:	4818      	ldr	r0, [pc, #96]	; (8001344 <MX_TIM2_Init+0xf0>)
 80012e4:	f002 fa14 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80012ee:	f000 fa19 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2204      	movs	r2, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4812      	ldr	r0, [pc, #72]	; (8001344 <MX_TIM2_Init+0xf0>)
 80012fa:	f002 fa09 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001304:	f000 fa0e 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2208      	movs	r2, #8
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001310:	f002 f9fe 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 800131a:	f000 fa03 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	220c      	movs	r2, #12
 8001322:	4619      	mov	r1, r3
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001326:	f002 f9f3 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001330:	f000 f9f8 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <MX_TIM2_Init+0xf0>)
 8001336:	f000 fb99 	bl	8001a6c <HAL_TIM_MspPostInit>

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000028c 	.word	0x2000028c

08001348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08c      	sub	sp, #48	; 0x30
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800134e:	f107 030c 	add.w	r3, r7, #12
 8001352:	2224      	movs	r2, #36	; 0x24
 8001354:	2100      	movs	r1, #0
 8001356:	4618      	mov	r0, r3
 8001358:	f004 f97b 	bl	8005652 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <MX_TIM3_Init+0xa0>)
 8001366:	4a21      	ldr	r2, [pc, #132]	; (80013ec <MX_TIM3_Init+0xa4>)
 8001368:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <MX_TIM3_Init+0xa0>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_TIM3_Init+0xa0>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8001376:	4b1c      	ldr	r3, [pc, #112]	; (80013e8 <MX_TIM3_Init+0xa0>)
 8001378:	f64e 2260 	movw	r2, #60000	; 0xea60
 800137c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_TIM3_Init+0xa0>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_TIM3_Init+0xa0>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800138a:	2303      	movs	r3, #3
 800138c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a2:	2301      	movs	r3, #1
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <MX_TIM3_Init+0xa0>)
 80013b6:	f002 f815 	bl	80033e4 <HAL_TIM_Encoder_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013c0:	f000 f9b0 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_TIM3_Init+0xa0>)
 80013d2:	f002 fe4f 	bl	8004074 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013dc:	f000 f9a2 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3730      	adds	r7, #48	; 0x30
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200002d4 	.word	0x200002d4
 80013ec:	40000400 	.word	0x40000400

080013f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f6:	f107 0308 	add.w	r3, r7, #8
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	463b      	mov	r3, r7
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_TIM4_Init+0x94>)
 800140e:	4a1e      	ldr	r2, [pc, #120]	; (8001488 <MX_TIM4_Init+0x98>)
 8001410:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 900-1;
 8001412:	4b1c      	ldr	r3, [pc, #112]	; (8001484 <MX_TIM4_Init+0x94>)
 8001414:	f240 3283 	movw	r2, #899	; 0x383
 8001418:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_TIM4_Init+0x94>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_TIM4_Init+0x94>)
 8001422:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001426:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <MX_TIM4_Init+0x94>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <MX_TIM4_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <MX_TIM4_Init+0x94>)
 8001436:	f001 ff37 	bl	80032a8 <HAL_TIM_Base_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001440:	f000 f970 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <MX_TIM4_Init+0x94>)
 8001452:	f002 fa1f 	bl	8003894 <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800145c:	f000 f962 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001468:	463b      	mov	r3, r7
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_TIM4_Init+0x94>)
 800146e:	f002 fe01 	bl	8004074 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001478:	f000 f954 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000031c 	.word	0x2000031c
 8001488:	40000800 	.word	0x40000800

0800148c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	; 0x30
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001492:	f107 030c 	add.w	r3, r7, #12
 8001496:	2224      	movs	r2, #36	; 0x24
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f004 f8d9 	bl	8005652 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014a8:	4b20      	ldr	r3, [pc, #128]	; (800152c <MX_TIM5_Init+0xa0>)
 80014aa:	4a21      	ldr	r2, [pc, #132]	; (8001530 <MX_TIM5_Init+0xa4>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_TIM5_Init+0xa0>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <MX_TIM5_Init+0xa0>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_TIM5_Init+0xa0>)
 80014bc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80014c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_TIM5_Init+0xa0>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_TIM5_Init+0xa0>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ce:	2303      	movs	r3, #3
 80014d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014d2:	2300      	movs	r3, #0
 80014d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e6:	2301      	movs	r3, #1
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_TIM5_Init+0xa0>)
 80014fa:	f001 ff73 	bl	80033e4 <HAL_TIM_Encoder_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001504:	f000 f90e 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_TIM5_Init+0xa0>)
 8001516:	f002 fdad 	bl	8004074 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001520:	f000 f900 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	20000364 	.word	0x20000364
 8001530:	40000c00 	.word	0x40000c00

08001534 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08c      	sub	sp, #48	; 0x30
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	2224      	movs	r2, #36	; 0x24
 8001540:	2100      	movs	r1, #0
 8001542:	4618      	mov	r0, r3
 8001544:	f004 f885 	bl	8005652 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001548:	1d3b      	adds	r3, r7, #4
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <MX_TIM8_Init+0xa8>)
 8001552:	4a23      	ldr	r2, [pc, #140]	; (80015e0 <MX_TIM8_Init+0xac>)
 8001554:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001556:	4b21      	ldr	r3, [pc, #132]	; (80015dc <MX_TIM8_Init+0xa8>)
 8001558:	2200      	movs	r2, #0
 800155a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800155c:	4b1f      	ldr	r3, [pc, #124]	; (80015dc <MX_TIM8_Init+0xa8>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 60000;
 8001562:	4b1e      	ldr	r3, [pc, #120]	; (80015dc <MX_TIM8_Init+0xa8>)
 8001564:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001568:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_TIM8_Init+0xa8>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_TIM8_Init+0xa8>)
 8001572:	2200      	movs	r2, #0
 8001574:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM8_Init+0xa8>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800157c:	2303      	movs	r3, #3
 800157e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001580:	2300      	movs	r3, #0
 8001582:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001584:	2301      	movs	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001594:	2301      	movs	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <MX_TIM8_Init+0xa8>)
 80015a8:	f001 ff1c 	bl	80033e4 <HAL_TIM_Encoder_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80015b2:	f000 f8b7 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_TIM8_Init+0xa8>)
 80015c4:	f002 fd56 	bl	8004074 <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80015ce:	f000 f8a9 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3730      	adds	r7, #48	; 0x30
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200003ac 	.word	0x200003ac
 80015e0:	40010400 	.word	0x40010400

080015e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	; (8001634 <MX_USART1_UART_Init+0x50>)
 80015ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 800160a:	220c      	movs	r2, #12
 800160c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 8001610:	2200      	movs	r2, #0
 8001612:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 8001616:	2200      	movs	r2, #0
 8001618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	; (8001630 <MX_USART1_UART_Init+0x4c>)
 800161c:	f002 fdba 	bl	8004194 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001626:	f000 f87d 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200003f4 	.word	0x200003f4
 8001634:	40011000 	.word	0x40011000

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <MX_GPIO_Init+0xe0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a30      	ldr	r2, [pc, #192]	; (8001718 <MX_GPIO_Init+0xe0>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <MX_GPIO_Init+0xe0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <MX_GPIO_Init+0xe0>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a29      	ldr	r2, [pc, #164]	; (8001718 <MX_GPIO_Init+0xe0>)
 8001674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b27      	ldr	r3, [pc, #156]	; (8001718 <MX_GPIO_Init+0xe0>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <MX_GPIO_Init+0xe0>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a22      	ldr	r2, [pc, #136]	; (8001718 <MX_GPIO_Init+0xe0>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <MX_GPIO_Init+0xe0>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_GPIO_Init+0xe0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <MX_GPIO_Init+0xe0>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_GPIO_Init+0xe0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_INA_Pin|M2_INA_Pin|M3_INA_Pin|M4_INA_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	210f      	movs	r1, #15
 80016c2:	4816      	ldr	r0, [pc, #88]	; (800171c <MX_GPIO_Init+0xe4>)
 80016c4:	f000 fee0 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80016c8:	2200      	movs	r2, #0
 80016ca:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80016ce:	4814      	ldr	r0, [pc, #80]	; (8001720 <MX_GPIO_Init+0xe8>)
 80016d0:	f000 feda 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_INA_Pin M2_INA_Pin M3_INA_Pin M4_INA_Pin */
  GPIO_InitStruct.Pin = M1_INA_Pin|M2_INA_Pin|M3_INA_Pin|M4_INA_Pin;
 80016d4:	230f      	movs	r3, #15
 80016d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	480c      	ldr	r0, [pc, #48]	; (800171c <MX_GPIO_Init+0xe4>)
 80016ec:	f000 fd38 	bl	8002160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80016f0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4619      	mov	r1, r3
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_GPIO_Init+0xe8>)
 800170a:	f000 fd29 	bl	8002160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40020800 	.word	0x40020800
 8001720:	40020400 	.word	0x40020400

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	e7fe      	b.n	800172c <Error_Handler+0x8>
	...

08001730 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_MspInit+0x4c>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a0f      	ldr	r2, [pc, #60]	; (800177c <HAL_MspInit+0x4c>)
 8001740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <HAL_MspInit+0x4c>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_MspInit+0x4c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_MspInit+0x4c>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_MspInit+0x4c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_I2C_MspInit+0x84>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d12c      	bne.n	80017fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b18      	ldr	r3, [pc, #96]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b15      	ldr	r3, [pc, #84]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = SDA_Pin|SCL_Pin;
 80017be:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c4:	2312      	movs	r3, #18
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d0:	2304      	movs	r3, #4
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	480c      	ldr	r0, [pc, #48]	; (800180c <HAL_I2C_MspInit+0x8c>)
 80017dc:	f000 fcc0 	bl	8002160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017ee:	6413      	str	r3, [r2, #64]	; 0x40
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_I2C_MspInit+0x88>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017fc:	bf00      	nop
 80017fe:	3728      	adds	r7, #40	; 0x28
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40005400 	.word	0x40005400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020400 	.word	0x40020400

08001810 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b090      	sub	sp, #64	; 0x40
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a64      	ldr	r2, [pc, #400]	; (80019c0 <HAL_TIM_Encoder_MspInit+0x1b0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12d      	bne.n	800188e <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
 8001836:	4b63      	ldr	r3, [pc, #396]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	4a62      	ldr	r2, [pc, #392]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6453      	str	r3, [r2, #68]	; 0x44
 8001842:	4b60      	ldr	r3, [pc, #384]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	; 0x28
 800184c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a5b      	ldr	r2, [pc, #364]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_M1_A_Pin|Encoder_M1_B_Pin;
 800186a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001870:	2302      	movs	r3, #2
 8001872:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800187c:	2301      	movs	r3, #1
 800187e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001884:	4619      	mov	r1, r3
 8001886:	4850      	ldr	r0, [pc, #320]	; (80019c8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001888:	f000 fc6a 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800188c:	e094      	b.n	80019b8 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a4e      	ldr	r2, [pc, #312]	; (80019cc <HAL_TIM_Encoder_MspInit+0x1bc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d12c      	bne.n	80018f2 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
 800189c:	4b49      	ldr	r3, [pc, #292]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4a48      	ldr	r2, [pc, #288]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80018a2:	f043 0302 	orr.w	r3, r3, #2
 80018a6:	6413      	str	r3, [r2, #64]	; 0x40
 80018a8:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
 80018b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
 80018b8:	4b42      	ldr	r3, [pc, #264]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a41      	ldr	r2, [pc, #260]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b3f      	ldr	r3, [pc, #252]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Encoder_M2_A_Pin|Encoder_M2_B_Pin;
 80018d0:	23c0      	movs	r3, #192	; 0xc0
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e0:	2302      	movs	r3, #2
 80018e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e8:	4619      	mov	r1, r3
 80018ea:	4837      	ldr	r0, [pc, #220]	; (80019c8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 80018ec:	f000 fc38 	bl	8002160 <HAL_GPIO_Init>
}
 80018f0:	e062      	b.n	80019b8 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a36      	ldr	r2, [pc, #216]	; (80019d0 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d12c      	bne.n	8001956 <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001906:	f043 0308 	orr.w	r3, r3, #8
 800190a:	6413      	str	r3, [r2, #64]	; 0x40
 800190c:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	4a28      	ldr	r2, [pc, #160]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6313      	str	r3, [r2, #48]	; 0x30
 8001928:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_M3_A_Pin|Encoder_M3_B_Pin;
 8001934:	2303      	movs	r3, #3
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2300      	movs	r3, #0
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001944:	2302      	movs	r3, #2
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194c:	4619      	mov	r1, r3
 800194e:	481e      	ldr	r0, [pc, #120]	; (80019c8 <HAL_TIM_Encoder_MspInit+0x1b8>)
 8001950:	f000 fc06 	bl	8002160 <HAL_GPIO_Init>
}
 8001954:	e030      	b.n	80019b8 <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1e      	ldr	r2, [pc, #120]	; (80019d4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d12b      	bne.n	80019b8 <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001960:	2300      	movs	r3, #0
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001968:	4a16      	ldr	r2, [pc, #88]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800196a:	f043 0302 	orr.w	r3, r3, #2
 800196e:	6453      	str	r3, [r2, #68]	; 0x44
 8001970:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8001986:	f043 0304 	orr.w	r3, r3, #4
 800198a:	6313      	str	r3, [r2, #48]	; 0x30
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_M4_A_Pin|Encoder_M4_B_Pin;
 8001998:	23c0      	movs	r3, #192	; 0xc0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80019a8:	2303      	movs	r3, #3
 80019aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b0:	4619      	mov	r1, r3
 80019b2:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80019b4:	f000 fbd4 	bl	8002160 <HAL_GPIO_Init>
}
 80019b8:	bf00      	nop
 80019ba:	3740      	adds	r7, #64	; 0x40
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000
 80019cc:	40000400 	.word	0x40000400
 80019d0:	40000c00 	.word	0x40000c00
 80019d4:	40010400 	.word	0x40010400
 80019d8:	40020800 	.word	0x40020800

080019dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ec:	d10d      	bne.n	8001a0a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_TIM_PWM_MspInit+0x3c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	4a08      	ldr	r2, [pc, #32]	; (8001a18 <HAL_TIM_PWM_MspInit+0x3c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	6413      	str	r3, [r2, #64]	; 0x40
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0e      	ldr	r2, [pc, #56]	; (8001a64 <HAL_TIM_Base_MspInit+0x48>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d115      	bne.n	8001a5a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <HAL_TIM_Base_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <HAL_TIM_Base_MspInit+0x4c>)
 8001a38:	f043 0304 	orr.w	r3, r3, #4
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_TIM_Base_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	201e      	movs	r0, #30
 8001a50:	f000 fb4f 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a54:	201e      	movs	r0, #30
 8001a56:	f000 fb68 	bl	800212a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40000800 	.word	0x40000800
 8001a68:	40023800 	.word	0x40023800

08001a6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a8c:	d13c      	bne.n	8001b08 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_TIM_MspPostInit+0xa4>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a1e      	ldr	r2, [pc, #120]	; (8001b10 <HAL_TIM_MspPostInit+0xa4>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_TIM_MspPostInit+0xa4>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_TIM_MspPostInit+0xa4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_TIM_MspPostInit+0xa4>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_TIM_MspPostInit+0xa4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_M3_Pin|PWM_M4_Pin|PWM_M1_Pin;
 8001ac6:	232c      	movs	r3, #44	; 0x2c
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <HAL_TIM_MspPostInit+0xa8>)
 8001ae2:	f000 fb3d 	bl	8002160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_M2_Pin;
 8001ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001af8:	2301      	movs	r3, #1
 8001afa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M2_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	4619      	mov	r1, r3
 8001b02:	4805      	ldr	r0, [pc, #20]	; (8001b18 <HAL_TIM_MspPostInit+0xac>)
 8001b04:	f000 fb2c 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b08:	bf00      	nop
 8001b0a:	3728      	adds	r7, #40	; 0x28
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020000 	.word	0x40020000
 8001b18:	40020400 	.word	0x40020400

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a28      	ldr	r2, [pc, #160]	; (8001bdc <HAL_UART_MspInit+0xc0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d14a      	bne.n	8001bd4 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b27      	ldr	r3, [pc, #156]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b46:	4a26      	ldr	r2, [pc, #152]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b48:	f043 0310 	orr.w	r3, r3, #16
 8001b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4e:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f003 0310 	and.w	r3, r3, #16
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a1f      	ldr	r2, [pc, #124]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	4b19      	ldr	r3, [pc, #100]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b16      	ldr	r3, [pc, #88]	; (8001be0 <HAL_UART_MspInit+0xc4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <HAL_UART_MspInit+0xc8>)
 8001bb0:	f000 fad6 	bl	8002160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bb4:	2340      	movs	r3, #64	; 0x40
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	; (8001be8 <HAL_UART_MspInit+0xcc>)
 8001bd0:	f000 fac6 	bl	8002160 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bd4:	bf00      	nop
 8001bd6:	3728      	adds	r7, #40	; 0x28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40011000 	.word	0x40011000
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40020000 	.word	0x40020000
 8001be8:	40020400 	.word	0x40020400

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f000 f960 	bl	8001efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c44:	4802      	ldr	r0, [pc, #8]	; (8001c50 <TIM4_IRQHandler+0x10>)
 8001c46:	f001 fc73 	bl	8003530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	2000031c 	.word	0x2000031c

08001c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return 1;
 8001c58:	2301      	movs	r3, #1
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_kill>:

int _kill(int pid, int sig)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c6e:	f003 fd43 	bl	80056f8 <__errno>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2216      	movs	r2, #22
 8001c76:	601a      	str	r2, [r3, #0]
  return -1;
 8001c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_exit>:

void _exit (int status)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ffe7 	bl	8001c64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c96:	e7fe      	b.n	8001c96 <_exit+0x12>

08001c98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	e00a      	b.n	8001cc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001caa:	f3af 8000 	nop.w
 8001cae:	4601      	mov	r1, r0
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	60ba      	str	r2, [r7, #8]
 8001cb6:	b2ca      	uxtb	r2, r1
 8001cb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dbf0      	blt.n	8001caa <_read+0x12>
  }

  return len;
 8001cc8:	687b      	ldr	r3, [r7, #4]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b086      	sub	sp, #24
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	60f8      	str	r0, [r7, #12]
 8001cda:	60b9      	str	r1, [r7, #8]
 8001cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e009      	b.n	8001cf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	1c5a      	adds	r2, r3, #1
 8001ce8:	60ba      	str	r2, [r7, #8]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	dbf1      	blt.n	8001ce4 <_write+0x12>
  }
  return len;
 8001d00:	687b      	ldr	r3, [r7, #4]
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <_close>:

int _close(int file)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d32:	605a      	str	r2, [r3, #4]
  return 0;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <_isatty>:

int _isatty(int file)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d4a:	2301      	movs	r3, #1
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d7c:	4a14      	ldr	r2, [pc, #80]	; (8001dd0 <_sbrk+0x5c>)
 8001d7e:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <_sbrk+0x60>)
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <_sbrk+0x64>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <_sbrk+0x64>)
 8001d92:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <_sbrk+0x68>)
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <_sbrk+0x64>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d207      	bcs.n	8001db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da4:	f003 fca8 	bl	80056f8 <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20020000 	.word	0x20020000
 8001dd4:	00000400 	.word	0x00000400
 8001dd8:	2000043c 	.word	0x2000043c
 8001ddc:	20000590 	.word	0x20000590

08001de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x20>)
 8001de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dea:	4a05      	ldr	r2, [pc, #20]	; (8001e00 <SystemInit+0x20>)
 8001dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e08:	f7ff ffea 	bl	8001de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e0e:	490d      	ldr	r1, [pc, #52]	; (8001e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e14:	e002      	b.n	8001e1c <LoopCopyDataInit>

08001e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e1a:	3304      	adds	r3, #4

08001e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e20:	d3f9      	bcc.n	8001e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e22:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e24:	4c0a      	ldr	r4, [pc, #40]	; (8001e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e28:	e001      	b.n	8001e2e <LoopFillZerobss>

08001e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e2c:	3204      	adds	r2, #4

08001e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e30:	d3fb      	bcc.n	8001e2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e32:	f003 fc67 	bl	8005704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e36:	f7ff f8fb 	bl	8001030 <main>
  bx  lr    
 8001e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e44:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e48:	08009330 	.word	0x08009330
  ldr r2, =_sbss
 8001e4c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e50:	20000590 	.word	0x20000590

08001e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e54:	e7fe      	b.n	8001e54 <ADC_IRQHandler>
	...

08001e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_Init+0x40>)
 8001e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <HAL_Init+0x40>)
 8001e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e74:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_Init+0x40>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <HAL_Init+0x40>)
 8001e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e80:	2003      	movs	r0, #3
 8001e82:	f000 f92b 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e86:	200f      	movs	r0, #15
 8001e88:	f000 f808 	bl	8001e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e8c:	f7ff fc50 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023c00 	.word	0x40023c00

08001e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x54>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x58>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	4619      	mov	r1, r3
 8001eae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f943 	bl	8002146 <HAL_SYSTICK_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e00e      	b.n	8001ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d80a      	bhi.n	8001ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f000 f90b 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001edc:	4a06      	ldr	r2, [pc, #24]	; (8001ef8 <HAL_InitTick+0x5c>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	20000008 	.word	0x20000008
 8001ef8:	20000004 	.word	0x20000004

08001efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x20>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x24>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <HAL_IncTick+0x24>)
 8001f0e:	6013      	str	r3, [r2, #0]
}
 8001f10:	bf00      	nop
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000440 	.word	0x20000440

08001f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  return uwTick;
 8001f28:	4b03      	ldr	r3, [pc, #12]	; (8001f38 <HAL_GetTick+0x14>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000440 	.word	0x20000440

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	; (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	; (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	; (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	; 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	; 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff3e 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff31 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	; 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
 800217a:	e165      	b.n	8002448 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	429a      	cmp	r2, r3
 8002196:	f040 8154 	bne.w	8002442 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d005      	beq.n	80021b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d130      	bne.n	8002214 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	2203      	movs	r2, #3
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68da      	ldr	r2, [r3, #12]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	091b      	lsrs	r3, r3, #4
 80021fe:	f003 0201 	and.w	r2, r3, #1
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b03      	cmp	r3, #3
 800221e:	d017      	beq.n	8002250 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	2203      	movs	r2, #3
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d123      	bne.n	80022a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	08da      	lsrs	r2, r3, #3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3208      	adds	r2, #8
 8002264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f003 0307 	and.w	r3, r3, #7
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	220f      	movs	r2, #15
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	08da      	lsrs	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3208      	adds	r2, #8
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0203 	and.w	r2, r3, #3
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	fa02 f303 	lsl.w	r3, r2, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 80ae 	beq.w	8002442 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b5d      	ldr	r3, [pc, #372]	; (8002460 <HAL_GPIO_Init+0x300>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	4a5c      	ldr	r2, [pc, #368]	; (8002460 <HAL_GPIO_Init+0x300>)
 80022f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f4:	6453      	str	r3, [r2, #68]	; 0x44
 80022f6:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <HAL_GPIO_Init+0x300>)
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002302:	4a58      	ldr	r2, [pc, #352]	; (8002464 <HAL_GPIO_Init+0x304>)
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	089b      	lsrs	r3, r3, #2
 8002308:	3302      	adds	r3, #2
 800230a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	220f      	movs	r2, #15
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4f      	ldr	r2, [pc, #316]	; (8002468 <HAL_GPIO_Init+0x308>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d025      	beq.n	800237a <HAL_GPIO_Init+0x21a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a4e      	ldr	r2, [pc, #312]	; (800246c <HAL_GPIO_Init+0x30c>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d01f      	beq.n	8002376 <HAL_GPIO_Init+0x216>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4d      	ldr	r2, [pc, #308]	; (8002470 <HAL_GPIO_Init+0x310>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d019      	beq.n	8002372 <HAL_GPIO_Init+0x212>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4c      	ldr	r2, [pc, #304]	; (8002474 <HAL_GPIO_Init+0x314>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <HAL_GPIO_Init+0x20e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4b      	ldr	r2, [pc, #300]	; (8002478 <HAL_GPIO_Init+0x318>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00d      	beq.n	800236a <HAL_GPIO_Init+0x20a>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4a      	ldr	r2, [pc, #296]	; (800247c <HAL_GPIO_Init+0x31c>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d007      	beq.n	8002366 <HAL_GPIO_Init+0x206>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a49      	ldr	r2, [pc, #292]	; (8002480 <HAL_GPIO_Init+0x320>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_GPIO_Init+0x202>
 800235e:	2306      	movs	r3, #6
 8002360:	e00c      	b.n	800237c <HAL_GPIO_Init+0x21c>
 8002362:	2307      	movs	r3, #7
 8002364:	e00a      	b.n	800237c <HAL_GPIO_Init+0x21c>
 8002366:	2305      	movs	r3, #5
 8002368:	e008      	b.n	800237c <HAL_GPIO_Init+0x21c>
 800236a:	2304      	movs	r3, #4
 800236c:	e006      	b.n	800237c <HAL_GPIO_Init+0x21c>
 800236e:	2303      	movs	r3, #3
 8002370:	e004      	b.n	800237c <HAL_GPIO_Init+0x21c>
 8002372:	2302      	movs	r3, #2
 8002374:	e002      	b.n	800237c <HAL_GPIO_Init+0x21c>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_GPIO_Init+0x21c>
 800237a:	2300      	movs	r3, #0
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f002 0203 	and.w	r2, r2, #3
 8002382:	0092      	lsls	r2, r2, #2
 8002384:	4093      	lsls	r3, r2
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	4313      	orrs	r3, r2
 800238a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800238c:	4935      	ldr	r1, [pc, #212]	; (8002464 <HAL_GPIO_Init+0x304>)
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	089b      	lsrs	r3, r3, #2
 8002392:	3302      	adds	r3, #2
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_GPIO_Init+0x324>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023be:	4a31      	ldr	r2, [pc, #196]	; (8002484 <HAL_GPIO_Init+0x324>)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023c4:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_GPIO_Init+0x324>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d003      	beq.n	80023e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e8:	4a26      	ldr	r2, [pc, #152]	; (8002484 <HAL_GPIO_Init+0x324>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ee:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_GPIO_Init+0x324>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	43db      	mvns	r3, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4013      	ands	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002412:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <HAL_GPIO_Init+0x324>)
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_GPIO_Init+0x324>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800243c:	4a11      	ldr	r2, [pc, #68]	; (8002484 <HAL_GPIO_Init+0x324>)
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3301      	adds	r3, #1
 8002446:	61fb      	str	r3, [r7, #28]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	2b0f      	cmp	r3, #15
 800244c:	f67f ae96 	bls.w	800217c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800
 8002464:	40013800 	.word	0x40013800
 8002468:	40020000 	.word	0x40020000
 800246c:	40020400 	.word	0x40020400
 8002470:	40020800 	.word	0x40020800
 8002474:	40020c00 	.word	0x40020c00
 8002478:	40021000 	.word	0x40021000
 800247c:	40021400 	.word	0x40021400
 8002480:	40021800 	.word	0x40021800
 8002484:	40013c00 	.word	0x40013c00

08002488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
 8002494:	4613      	mov	r3, r2
 8002496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a4:	e003      	b.n	80024ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e12b      	b.n	8002726 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff f94c 	bl	8001780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	; 0x24
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800250e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800251e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002520:	f000 fa52 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 8002524:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a81      	ldr	r2, [pc, #516]	; (8002730 <HAL_I2C_Init+0x274>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d807      	bhi.n	8002540 <HAL_I2C_Init+0x84>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4a80      	ldr	r2, [pc, #512]	; (8002734 <HAL_I2C_Init+0x278>)
 8002534:	4293      	cmp	r3, r2
 8002536:	bf94      	ite	ls
 8002538:	2301      	movls	r3, #1
 800253a:	2300      	movhi	r3, #0
 800253c:	b2db      	uxtb	r3, r3
 800253e:	e006      	b.n	800254e <HAL_I2C_Init+0x92>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4a7d      	ldr	r2, [pc, #500]	; (8002738 <HAL_I2C_Init+0x27c>)
 8002544:	4293      	cmp	r3, r2
 8002546:	bf94      	ite	ls
 8002548:	2301      	movls	r3, #1
 800254a:	2300      	movhi	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e0e7      	b.n	8002726 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4a78      	ldr	r2, [pc, #480]	; (800273c <HAL_I2C_Init+0x280>)
 800255a:	fba2 2303 	umull	r2, r3, r2, r3
 800255e:	0c9b      	lsrs	r3, r3, #18
 8002560:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	430a      	orrs	r2, r1
 8002574:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <HAL_I2C_Init+0x274>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d802      	bhi.n	8002590 <HAL_I2C_Init+0xd4>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	3301      	adds	r3, #1
 800258e:	e009      	b.n	80025a4 <HAL_I2C_Init+0xe8>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	4a69      	ldr	r2, [pc, #420]	; (8002740 <HAL_I2C_Init+0x284>)
 800259c:	fba2 2303 	umull	r2, r3, r2, r3
 80025a0:	099b      	lsrs	r3, r3, #6
 80025a2:	3301      	adds	r3, #1
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	495c      	ldr	r1, [pc, #368]	; (8002730 <HAL_I2C_Init+0x274>)
 80025c0:	428b      	cmp	r3, r1
 80025c2:	d819      	bhi.n	80025f8 <HAL_I2C_Init+0x13c>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1e59      	subs	r1, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d2:	1c59      	adds	r1, r3, #1
 80025d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025d8:	400b      	ands	r3, r1
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_I2C_Init+0x138>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	1e59      	subs	r1, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ec:	3301      	adds	r3, #1
 80025ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f2:	e051      	b.n	8002698 <HAL_I2C_Init+0x1dc>
 80025f4:	2304      	movs	r3, #4
 80025f6:	e04f      	b.n	8002698 <HAL_I2C_Init+0x1dc>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d111      	bne.n	8002624 <HAL_I2C_Init+0x168>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	440b      	add	r3, r1
 800260e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002612:	3301      	adds	r3, #1
 8002614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e012      	b.n	800264a <HAL_I2C_Init+0x18e>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e58      	subs	r0, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	0099      	lsls	r1, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_I2C_Init+0x196>
 800264e:	2301      	movs	r3, #1
 8002650:	e022      	b.n	8002698 <HAL_I2C_Init+0x1dc>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10e      	bne.n	8002678 <HAL_I2C_Init+0x1bc>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	1e58      	subs	r0, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6859      	ldr	r1, [r3, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	440b      	add	r3, r1
 8002668:	fbb0 f3f3 	udiv	r3, r0, r3
 800266c:	3301      	adds	r3, #1
 800266e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002676:	e00f      	b.n	8002698 <HAL_I2C_Init+0x1dc>
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1e58      	subs	r0, r3, #1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6859      	ldr	r1, [r3, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	0099      	lsls	r1, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	fbb0 f3f3 	udiv	r3, r0, r3
 800268e:	3301      	adds	r3, #1
 8002690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002694:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	6809      	ldr	r1, [r1, #0]
 800269c:	4313      	orrs	r3, r2
 800269e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69da      	ldr	r2, [r3, #28]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6911      	ldr	r1, [r2, #16]
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	68d2      	ldr	r2, [r2, #12]
 80026d2:	4311      	orrs	r1, r2
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f042 0201 	orr.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	000186a0 	.word	0x000186a0
 8002734:	001e847f 	.word	0x001e847f
 8002738:	003d08ff 	.word	0x003d08ff
 800273c:	431bde83 	.word	0x431bde83
 8002740:	10624dd3 	.word	0x10624dd3

08002744 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	603b      	str	r3, [r7, #0]
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002770:	f7ff fbd8 	bl	8001f24 <HAL_GetTick>
 8002774:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002776:	e009      	b.n	800278c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002778:	f7ff fbd4 	bl	8001f24 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002786:	d901      	bls.n	800278c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e01f      	b.n	80027cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800278c:	4b13      	ldr	r3, [pc, #76]	; (80027dc <HAL_PWREx_EnableOverDrive+0x98>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002798:	d1ee      	bne.n	8002778 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800279c:	2201      	movs	r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80027a0:	f7ff fbc0 	bl	8001f24 <HAL_GetTick>
 80027a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027a6:	e009      	b.n	80027bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80027a8:	f7ff fbbc 	bl	8001f24 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b6:	d901      	bls.n	80027bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e007      	b.n	80027cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <HAL_PWREx_EnableOverDrive+0x98>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80027c8:	d1ee      	bne.n	80027a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40023800 	.word	0x40023800
 80027d8:	420e0040 	.word	0x420e0040
 80027dc:	40007000 	.word	0x40007000
 80027e0:	420e0044 	.word	0x420e0044

080027e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e0cc      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b68      	ldr	r3, [pc, #416]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d90c      	bls.n	8002820 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b65      	ldr	r3, [pc, #404]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b63      	ldr	r3, [pc, #396]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e0b8      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d020      	beq.n	800286e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d005      	beq.n	8002844 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a58      	ldr	r2, [pc, #352]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002842:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d005      	beq.n	800285c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002850:	4b53      	ldr	r3, [pc, #332]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a52      	ldr	r2, [pc, #328]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800285a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b50      	ldr	r3, [pc, #320]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	494d      	ldr	r1, [pc, #308]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d044      	beq.n	8002904 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	4b47      	ldr	r3, [pc, #284]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d119      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e07f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d003      	beq.n	80028a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	2b03      	cmp	r3, #3
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a2:	4b3f      	ldr	r3, [pc, #252]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e067      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4934      	ldr	r1, [pc, #208]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d4:	f7ff fb26 	bl	8001f24 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7ff fb22 	bl	8001f24 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e04f      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002904:	4b25      	ldr	r3, [pc, #148]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 030f 	and.w	r3, r3, #15
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d20c      	bcs.n	800292c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002912:	4b22      	ldr	r3, [pc, #136]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_RCC_ClockConfig+0x1b8>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e032      	b.n	8002992 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002938:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	4916      	ldr	r1, [pc, #88]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d009      	beq.n	800296a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	490e      	ldr	r1, [pc, #56]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800296a:	f000 f855 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 800296e:	4602      	mov	r2, r0
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	091b      	lsrs	r3, r3, #4
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	490a      	ldr	r1, [pc, #40]	; (80029a4 <HAL_RCC_ClockConfig+0x1c0>)
 800297c:	5ccb      	ldrb	r3, [r1, r3]
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff fa86 	bl	8001e9c <HAL_InitTick>

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00
 80029a0:	40023800 	.word	0x40023800
 80029a4:	08008ee0 	.word	0x08008ee0
 80029a8:	20000000 	.word	0x20000000
 80029ac:	20000004 	.word	0x20000004

080029b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b4:	4b03      	ldr	r3, [pc, #12]	; (80029c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000000 	.word	0x20000000

080029c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80029cc:	f7ff fff0 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	0a9b      	lsrs	r3, r3, #10
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40023800 	.word	0x40023800
 80029ec:	08008ef0 	.word	0x08008ef0

080029f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029f4:	f7ff ffdc 	bl	80029b0 <HAL_RCC_GetHCLKFreq>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	0b5b      	lsrs	r3, r3, #13
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	4903      	ldr	r1, [pc, #12]	; (8002a14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a06:	5ccb      	ldrb	r3, [r1, r3]
 8002a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	08008ef0 	.word	0x08008ef0

08002a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b0a6      	sub	sp, #152	; 0x98
 8002a1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a3e:	4bc8      	ldr	r3, [pc, #800]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	f200 817e 	bhi.w	8002d48 <HAL_RCC_GetSysClockFreq+0x330>
 8002a4c:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a52:	bf00      	nop
 8002a54:	08002a89 	.word	0x08002a89
 8002a58:	08002d49 	.word	0x08002d49
 8002a5c:	08002d49 	.word	0x08002d49
 8002a60:	08002d49 	.word	0x08002d49
 8002a64:	08002a91 	.word	0x08002a91
 8002a68:	08002d49 	.word	0x08002d49
 8002a6c:	08002d49 	.word	0x08002d49
 8002a70:	08002d49 	.word	0x08002d49
 8002a74:	08002a99 	.word	0x08002a99
 8002a78:	08002d49 	.word	0x08002d49
 8002a7c:	08002d49 	.word	0x08002d49
 8002a80:	08002d49 	.word	0x08002d49
 8002a84:	08002c03 	.word	0x08002c03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4bb6      	ldr	r3, [pc, #728]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002a8e:	e15f      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a90:	4bb5      	ldr	r3, [pc, #724]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002a92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a96:	e15b      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a98:	4bb1      	ldr	r3, [pc, #708]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa4:	4bae      	ldr	r3, [pc, #696]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d031      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab0:	4bab      	ldr	r3, [pc, #684]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	099b      	lsrs	r3, r3, #6
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002aba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac2:	663b      	str	r3, [r7, #96]	; 0x60
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ac8:	4ba7      	ldr	r3, [pc, #668]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002aca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002ace:	462a      	mov	r2, r5
 8002ad0:	fb03 f202 	mul.w	r2, r3, r2
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	4621      	mov	r1, r4
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	4aa2      	ldr	r2, [pc, #648]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	fba1 1202 	umull	r1, r2, r1, r2
 8002ae6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002ae8:	460a      	mov	r2, r1
 8002aea:	67ba      	str	r2, [r7, #120]	; 0x78
 8002aec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002aee:	4413      	add	r3, r2
 8002af0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002af6:	2200      	movs	r2, #0
 8002af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8002afa:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002afc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b00:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002b04:	f7fe f8e0 	bl	8000cc8 <__aeabi_uldivmod>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b12:	e064      	b.n	8002bde <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b14:	4b92      	ldr	r3, [pc, #584]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	099b      	lsrs	r3, r3, #6
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	653b      	str	r3, [r7, #80]	; 0x50
 8002b1e:	657a      	str	r2, [r7, #84]	; 0x54
 8002b20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b28:	2300      	movs	r3, #0
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002b30:	4622      	mov	r2, r4
 8002b32:	462b      	mov	r3, r5
 8002b34:	f04f 0000 	mov.w	r0, #0
 8002b38:	f04f 0100 	mov.w	r1, #0
 8002b3c:	0159      	lsls	r1, r3, #5
 8002b3e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b42:	0150      	lsls	r0, r2, #5
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4621      	mov	r1, r4
 8002b4a:	1a51      	subs	r1, r2, r1
 8002b4c:	6139      	str	r1, [r7, #16]
 8002b4e:	4629      	mov	r1, r5
 8002b50:	eb63 0301 	sbc.w	r3, r3, r1
 8002b54:	617b      	str	r3, [r7, #20]
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b62:	4659      	mov	r1, fp
 8002b64:	018b      	lsls	r3, r1, #6
 8002b66:	4651      	mov	r1, sl
 8002b68:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b6c:	4651      	mov	r1, sl
 8002b6e:	018a      	lsls	r2, r1, #6
 8002b70:	4651      	mov	r1, sl
 8002b72:	ebb2 0801 	subs.w	r8, r2, r1
 8002b76:	4659      	mov	r1, fp
 8002b78:	eb63 0901 	sbc.w	r9, r3, r1
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	f04f 0300 	mov.w	r3, #0
 8002b84:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b88:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b8c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b90:	4690      	mov	r8, r2
 8002b92:	4699      	mov	r9, r3
 8002b94:	4623      	mov	r3, r4
 8002b96:	eb18 0303 	adds.w	r3, r8, r3
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	462b      	mov	r3, r5
 8002b9e:	eb49 0303 	adc.w	r3, r9, r3
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	028b      	lsls	r3, r1, #10
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bba:	4621      	mov	r1, r4
 8002bbc:	028a      	lsls	r2, r1, #10
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8002bca:	647a      	str	r2, [r7, #68]	; 0x44
 8002bcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bd0:	f7fe f87a 	bl	8000cc8 <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bde:	4b60      	ldr	r3, [pc, #384]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0c1b      	lsrs	r3, r3, #16
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	3301      	adds	r3, #1
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002bf0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002c00:	e0a6      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c02:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0e:	4b54      	ldr	r3, [pc, #336]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d02a      	beq.n	8002c70 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c1a:	4b51      	ldr	r3, [pc, #324]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	099b      	lsrs	r3, r3, #6
 8002c20:	2200      	movs	r2, #0
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c30:	fb03 f201 	mul.w	r2, r3, r1
 8002c34:	2300      	movs	r3, #0
 8002c36:	fb00 f303 	mul.w	r3, r0, r3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	4a4a      	ldr	r2, [pc, #296]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x350>)
 8002c3e:	fba0 1202 	umull	r1, r2, r0, r2
 8002c42:	677a      	str	r2, [r7, #116]	; 0x74
 8002c44:	460a      	mov	r2, r1
 8002c46:	673a      	str	r2, [r7, #112]	; 0x70
 8002c48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c4a:	4413      	add	r3, r2
 8002c4c:	677b      	str	r3, [r7, #116]	; 0x74
 8002c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c52:	2200      	movs	r2, #0
 8002c54:	633b      	str	r3, [r7, #48]	; 0x30
 8002c56:	637a      	str	r2, [r7, #52]	; 0x34
 8002c58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c5c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002c60:	f7fe f832 	bl	8000cc8 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c6e:	e05b      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	2200      	movs	r2, #0
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c82:	623b      	str	r3, [r7, #32]
 8002c84:	2300      	movs	r3, #0
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
 8002c88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c8c:	4642      	mov	r2, r8
 8002c8e:	464b      	mov	r3, r9
 8002c90:	f04f 0000 	mov.w	r0, #0
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	0159      	lsls	r1, r3, #5
 8002c9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9e:	0150      	lsls	r0, r2, #5
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002caa:	4649      	mov	r1, r9
 8002cac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002ccc:	f04f 0200 	mov.w	r2, #0
 8002cd0:	f04f 0300 	mov.w	r3, #0
 8002cd4:	00eb      	lsls	r3, r5, #3
 8002cd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cda:	00e2      	lsls	r2, r4, #3
 8002cdc:	4614      	mov	r4, r2
 8002cde:	461d      	mov	r5, r3
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	18e3      	adds	r3, r4, r3
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	eb45 0303 	adc.w	r3, r5, r3
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cfa:	4629      	mov	r1, r5
 8002cfc:	028b      	lsls	r3, r1, #10
 8002cfe:	4621      	mov	r1, r4
 8002d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d04:	4621      	mov	r1, r4
 8002d06:	028a      	lsls	r2, r1, #10
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d10:	2200      	movs	r2, #0
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	61fa      	str	r2, [r7, #28]
 8002d16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1a:	f7fd ffd5 	bl	8000cc8 <__aeabi_uldivmod>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4613      	mov	r3, r2
 8002d24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	0f1b      	lsrs	r3, r3, #28
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d46:	e003      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002d4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002d4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3798      	adds	r7, #152	; 0x98
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	00f42400 	.word	0x00f42400
 8002d68:	017d7840 	.word	0x017d7840

08002d6c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e28d      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0301 	and.w	r3, r3, #1
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8083 	beq.w	8002e92 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002d8c:	4b94      	ldr	r3, [pc, #592]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f003 030c 	and.w	r3, r3, #12
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d019      	beq.n	8002dcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002d98:	4b91      	ldr	r3, [pc, #580]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002da4:	4b8e      	ldr	r3, [pc, #568]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002db0:	d00c      	beq.n	8002dcc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002db2:	4b8b      	ldr	r3, [pc, #556]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002dba:	2b0c      	cmp	r3, #12
 8002dbc:	d112      	bne.n	8002de4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dbe:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dca:	d10b      	bne.n	8002de4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dcc:	4b84      	ldr	r3, [pc, #528]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d05b      	beq.n	8002e90 <HAL_RCC_OscConfig+0x124>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d157      	bne.n	8002e90 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e25a      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dec:	d106      	bne.n	8002dfc <HAL_RCC_OscConfig+0x90>
 8002dee:	4b7c      	ldr	r3, [pc, #496]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7b      	ldr	r2, [pc, #492]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	e01d      	b.n	8002e38 <HAL_RCC_OscConfig+0xcc>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCC_OscConfig+0xb4>
 8002e06:	4b76      	ldr	r3, [pc, #472]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a75      	ldr	r2, [pc, #468]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b73      	ldr	r3, [pc, #460]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a72      	ldr	r2, [pc, #456]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1c:	6013      	str	r3, [r2, #0]
 8002e1e:	e00b      	b.n	8002e38 <HAL_RCC_OscConfig+0xcc>
 8002e20:	4b6f      	ldr	r3, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a6e      	ldr	r2, [pc, #440]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b6c      	ldr	r3, [pc, #432]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a6b      	ldr	r2, [pc, #428]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d013      	beq.n	8002e68 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7ff f870 	bl	8001f24 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e48:	f7ff f86c 	bl	8001f24 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e21f      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5a:	4b61      	ldr	r3, [pc, #388]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0xdc>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7ff f85c 	bl	8001f24 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e70:	f7ff f858 	bl	8001f24 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	; 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e20b      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	4b57      	ldr	r3, [pc, #348]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x104>
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d06f      	beq.n	8002f7e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002e9e:	4b50      	ldr	r3, [pc, #320]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 030c 	and.w	r3, r3, #12
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d017      	beq.n	8002eda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eaa:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d105      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eb6:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002eca:	2b0c      	cmp	r3, #12
 8002ecc:	d11c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ece:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x186>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e1d3      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4937      	ldr	r1, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	e03a      	b.n	8002f7e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCC_OscConfig+0x278>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7ff f805 	bl	8001f24 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7ff f801 	bl	8001f24 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1b4      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f30:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3c:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4925      	ldr	r1, [pc, #148]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_OscConfig+0x278>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe ffe4 	bl	8001f24 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f60:	f7fe ffe0 	bl	8001f24 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e193      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d036      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe ffc4 	bl	8001f24 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fe ffc0 	bl	8001f24 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e173      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_OscConfig+0x274>)
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x234>
 8002fbe:	e01b      	b.n	8002ff8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RCC_OscConfig+0x27c>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc6:	f7fe ffad 	bl	8001f24 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	e00e      	b.n	8002fec <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fe ffa9 	bl	8001f24 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d907      	bls.n	8002fec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e15c      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	42470000 	.word	0x42470000
 8002fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	4b8a      	ldr	r3, [pc, #552]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ea      	bne.n	8002fce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8097 	beq.w	8003134 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300a:	4b83      	ldr	r3, [pc, #524]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	4b7f      	ldr	r3, [pc, #508]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a7e      	ldr	r2, [pc, #504]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b7c      	ldr	r3, [pc, #496]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003032:	2301      	movs	r3, #1
 8003034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003036:	4b79      	ldr	r3, [pc, #484]	; (800321c <HAL_RCC_OscConfig+0x4b0>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003042:	4b76      	ldr	r3, [pc, #472]	; (800321c <HAL_RCC_OscConfig+0x4b0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a75      	ldr	r2, [pc, #468]	; (800321c <HAL_RCC_OscConfig+0x4b0>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304e:	f7fe ff69 	bl	8001f24 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003056:	f7fe ff65 	bl	8001f24 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e118      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	4b6c      	ldr	r3, [pc, #432]	; (800321c <HAL_RCC_OscConfig+0x4b0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x31e>
 800307c:	4b66      	ldr	r3, [pc, #408]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a65      	ldr	r2, [pc, #404]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	e01c      	b.n	80030c4 <HAL_RCC_OscConfig+0x358>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b05      	cmp	r3, #5
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x340>
 8003092:	4b61      	ldr	r3, [pc, #388]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a60      	ldr	r2, [pc, #384]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	4b5e      	ldr	r3, [pc, #376]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a5d      	ldr	r2, [pc, #372]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
 80030aa:	e00b      	b.n	80030c4 <HAL_RCC_OscConfig+0x358>
 80030ac:	4b5a      	ldr	r3, [pc, #360]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a59      	ldr	r2, [pc, #356]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
 80030b8:	4b57      	ldr	r3, [pc, #348]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a56      	ldr	r2, [pc, #344]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 80030be:	f023 0304 	bic.w	r3, r3, #4
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe ff2a 	bl	8001f24 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fe ff26 	bl	8001f24 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e0d7      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	4b4b      	ldr	r3, [pc, #300]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ee      	beq.n	80030d4 <HAL_RCC_OscConfig+0x368>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fe ff14 	bl	8001f24 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fe ff10 	bl	8001f24 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e0c1      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003116:	4b40      	ldr	r3, [pc, #256]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ee      	bne.n	8003100 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003122:	7dfb      	ldrb	r3, [r7, #23]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	4a3a      	ldr	r2, [pc, #232]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003132:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80ad 	beq.w	8003298 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b08      	cmp	r3, #8
 8003148:	d060      	beq.n	800320c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d145      	bne.n	80031de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b33      	ldr	r3, [pc, #204]	; (8003220 <HAL_RCC_OscConfig+0x4b4>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003158:	f7fe fee4 	bl	8001f24 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe fee0 	bl	8001f24 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e093      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b29      	ldr	r3, [pc, #164]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	3b01      	subs	r3, #1
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	071b      	lsls	r3, r3, #28
 80031aa:	491b      	ldr	r1, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b0:	4b1b      	ldr	r3, [pc, #108]	; (8003220 <HAL_RCC_OscConfig+0x4b4>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe feb5 	bl	8001f24 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031be:	f7fe feb1 	bl	8001f24 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e064      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031d0:	4b11      	ldr	r3, [pc, #68]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x452>
 80031dc:	e05c      	b.n	8003298 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031de:	4b10      	ldr	r3, [pc, #64]	; (8003220 <HAL_RCC_OscConfig+0x4b4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fe9e 	bl	8001f24 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ec:	f7fe fe9a 	bl	8001f24 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e04d      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fe:	4b06      	ldr	r3, [pc, #24]	; (8003218 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x480>
 800320a:	e045      	b.n	8003298 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d107      	bne.n	8003224 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e040      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
 8003218:	40023800 	.word	0x40023800
 800321c:	40007000 	.word	0x40007000
 8003220:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003224:	4b1f      	ldr	r3, [pc, #124]	; (80032a4 <HAL_RCC_OscConfig+0x538>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d030      	beq.n	8003294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323c:	429a      	cmp	r2, r3
 800323e:	d129      	bne.n	8003294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d122      	bne.n	8003294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003254:	4013      	ands	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800325a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800325c:	4293      	cmp	r3, r2
 800325e:	d119      	bne.n	8003294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	085b      	lsrs	r3, r3, #1
 800326c:	3b01      	subs	r3, #1
 800326e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d10f      	bne.n	8003294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e041      	b.n	800333e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe fba4 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3304      	adds	r3, #4
 80032e4:	4619      	mov	r1, r3
 80032e6:	4610      	mov	r0, r2
 80032e8:	f000 fbce 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d101      	bne.n	8003358 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e041      	b.n	80033dc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7fe fb35 	bl	80019dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	4619      	mov	r1, r3
 8003384:	4610      	mov	r0, r2
 8003386:	f000 fb7f 	bl	8003a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e097      	b.n	8003528 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d106      	bne.n	8003412 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7fe f9ff 	bl	8001810 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2202      	movs	r2, #2
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003428:	f023 0307 	bic.w	r3, r3, #7
 800342c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3304      	adds	r3, #4
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f000 fb25 	bl	8003a88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	021b      	lsls	r3, r3, #8
 8003476:	4313      	orrs	r3, r2
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003484:	f023 030c 	bic.w	r3, r3, #12
 8003488:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003490:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003494:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	021b      	lsls	r3, r3, #8
 80034a0:	4313      	orrs	r3, r2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691b      	ldr	r3, [r3, #16]
 80034ac:	011a      	lsls	r2, r3, #4
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	031b      	lsls	r3, r3, #12
 80034b4:	4313      	orrs	r3, r2
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80034c2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80034ca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	4313      	orrs	r3, r2
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d020      	beq.n	8003594 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d01b      	beq.n	8003594 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f06f 0202 	mvn.w	r2, #2
 8003564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa65 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 8003580:	e005      	b.n	800358e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa57 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 fa68 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d020      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01b      	beq.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0204 	mvn.w	r2, #4
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 fa3f 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fa31 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 fa42 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d020      	beq.n	800362c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01b      	beq.n	800362c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0208 	mvn.w	r2, #8
 80035fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2204      	movs	r2, #4
 8003602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fa19 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 8003618:	e005      	b.n	8003626 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 fa0b 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fa1c 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 0310 	and.w	r3, r3, #16
 8003632:	2b00      	cmp	r3, #0
 8003634:	d020      	beq.n	8003678 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f003 0310 	and.w	r3, r3, #16
 800363c:	2b00      	cmp	r3, #0
 800363e:	d01b      	beq.n	8003678 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f06f 0210 	mvn.w	r2, #16
 8003648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2208      	movs	r2, #8
 800364e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	69db      	ldr	r3, [r3, #28]
 8003656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f9f3 	bl	8003a4a <HAL_TIM_IC_CaptureCallback>
 8003664:	e005      	b.n	8003672 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f000 f9e5 	bl	8003a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f9f6 	bl	8003a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00c      	beq.n	800369c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f06f 0201 	mvn.w	r2, #1
 8003694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f9c3 	bl	8003a22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00c      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fd60 	bl	8004180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9c7 	bl	8003a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0220 	mvn.w	r2, #32
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 fd32 	bl	800416c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003708:	bf00      	nop
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800372a:	2302      	movs	r3, #2
 800372c:	e0ae      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	f200 809f 	bhi.w	800387c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003779 	.word	0x08003779
 8003748:	0800387d 	.word	0x0800387d
 800374c:	0800387d 	.word	0x0800387d
 8003750:	0800387d 	.word	0x0800387d
 8003754:	080037b9 	.word	0x080037b9
 8003758:	0800387d 	.word	0x0800387d
 800375c:	0800387d 	.word	0x0800387d
 8003760:	0800387d 	.word	0x0800387d
 8003764:	080037fb 	.word	0x080037fb
 8003768:	0800387d 	.word	0x0800387d
 800376c:	0800387d 	.word	0x0800387d
 8003770:	0800387d 	.word	0x0800387d
 8003774:	0800383b 	.word	0x0800383b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fa2e 	bl	8003be0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0208 	orr.w	r2, r2, #8
 8003792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	619a      	str	r2, [r3, #24]
      break;
 80037b6:	e064      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fa7e 	bl	8003cc0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
      break;
 80037f8:	e043      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 fad3 	bl	8003dac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0208 	orr.w	r2, r2, #8
 8003814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0204 	bic.w	r2, r2, #4
 8003824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	61da      	str	r2, [r3, #28]
      break;
 8003838:	e023      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fb27 	bl	8003e94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	021a      	lsls	r2, r3, #8
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	61da      	str	r2, [r3, #28]
      break;
 800387a:	e002      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
      break;
 8003880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_TIM_ConfigClockSource+0x1c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e0b4      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x186>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e8:	d03e      	beq.n	8003968 <HAL_TIM_ConfigClockSource+0xd4>
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	f200 8087 	bhi.w	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	f000 8086 	beq.w	8003a06 <HAL_TIM_ConfigClockSource+0x172>
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d87f      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b70      	cmp	r3, #112	; 0x70
 8003902:	d01a      	beq.n	800393a <HAL_TIM_ConfigClockSource+0xa6>
 8003904:	2b70      	cmp	r3, #112	; 0x70
 8003906:	d87b      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b60      	cmp	r3, #96	; 0x60
 800390a:	d050      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x11a>
 800390c:	2b60      	cmp	r3, #96	; 0x60
 800390e:	d877      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b50      	cmp	r3, #80	; 0x50
 8003912:	d03c      	beq.n	800398e <HAL_TIM_ConfigClockSource+0xfa>
 8003914:	2b50      	cmp	r3, #80	; 0x50
 8003916:	d873      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d058      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x13a>
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d86f      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d064      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003924:	2b30      	cmp	r3, #48	; 0x30
 8003926:	d86b      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d060      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 800392c:	2b20      	cmp	r3, #32
 800392e:	d867      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d05c      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003934:	2b10      	cmp	r3, #16
 8003936:	d05a      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	e062      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800394a:	f000 fb73 	bl	8004034 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800395c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	609a      	str	r2, [r3, #8]
      break;
 8003966:	e04f      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003978:	f000 fb5c 	bl	8004034 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398a:	609a      	str	r2, [r3, #8]
      break;
 800398c:	e03c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399a:	461a      	mov	r2, r3
 800399c:	f000 fad0 	bl	8003f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2150      	movs	r1, #80	; 0x50
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fb29 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 80039ac:	e02c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ba:	461a      	mov	r2, r3
 80039bc:	f000 faef 	bl	8003f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2160      	movs	r1, #96	; 0x60
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fb19 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 80039cc:	e01c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	461a      	mov	r2, r3
 80039dc:	f000 fab0 	bl	8003f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2140      	movs	r1, #64	; 0x40
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fb09 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 80039ec:	e00c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f000 fb00 	bl	8003ffe <TIM_ITRx_SetConfig>
      break;
 80039fe:	e003      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      break;
 8003a04:	e000      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a46      	ldr	r2, [pc, #280]	; (8003bb4 <TIM_Base_SetConfig+0x12c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d013      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d00f      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a43      	ldr	r2, [pc, #268]	; (8003bb8 <TIM_Base_SetConfig+0x130>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d00b      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a42      	ldr	r2, [pc, #264]	; (8003bbc <TIM_Base_SetConfig+0x134>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d007      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a41      	ldr	r2, [pc, #260]	; (8003bc0 <TIM_Base_SetConfig+0x138>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a40      	ldr	r2, [pc, #256]	; (8003bc4 <TIM_Base_SetConfig+0x13c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d108      	bne.n	8003ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a35      	ldr	r2, [pc, #212]	; (8003bb4 <TIM_Base_SetConfig+0x12c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d02b      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae8:	d027      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a32      	ldr	r2, [pc, #200]	; (8003bb8 <TIM_Base_SetConfig+0x130>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d023      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a31      	ldr	r2, [pc, #196]	; (8003bbc <TIM_Base_SetConfig+0x134>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01f      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a30      	ldr	r2, [pc, #192]	; (8003bc0 <TIM_Base_SetConfig+0x138>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d01b      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <TIM_Base_SetConfig+0x13c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d017      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	; (8003bc8 <TIM_Base_SetConfig+0x140>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2d      	ldr	r2, [pc, #180]	; (8003bcc <TIM_Base_SetConfig+0x144>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00f      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a2c      	ldr	r2, [pc, #176]	; (8003bd0 <TIM_Base_SetConfig+0x148>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a2b      	ldr	r2, [pc, #172]	; (8003bd4 <TIM_Base_SetConfig+0x14c>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <TIM_Base_SetConfig+0x150>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_Base_SetConfig+0xb2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <TIM_Base_SetConfig+0x154>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d108      	bne.n	8003b4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <TIM_Base_SetConfig+0x12c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0xf8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <TIM_Base_SetConfig+0x13c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d103      	bne.n	8003b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d105      	bne.n	8003ba6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f023 0201 	bic.w	r2, r3, #1
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	611a      	str	r2, [r3, #16]
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40010000 	.word	0x40010000
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40010400 	.word	0x40010400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800
 8003bd4:	40001800 	.word	0x40001800
 8003bd8:	40001c00 	.word	0x40001c00
 8003bdc:	40002000 	.word	0x40002000

08003be0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f023 0201 	bic.w	r2, r3, #1
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f023 0303 	bic.w	r3, r3, #3
 8003c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f023 0302 	bic.w	r3, r3, #2
 8003c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a20      	ldr	r2, [pc, #128]	; (8003cb8 <TIM_OC1_SetConfig+0xd8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC1_SetConfig+0x64>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1f      	ldr	r2, [pc, #124]	; (8003cbc <TIM_OC1_SetConfig+0xdc>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d10c      	bne.n	8003c5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f023 0308 	bic.w	r3, r3, #8
 8003c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 0304 	bic.w	r3, r3, #4
 8003c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <TIM_OC1_SetConfig+0xd8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_OC1_SetConfig+0x8e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a14      	ldr	r2, [pc, #80]	; (8003cbc <TIM_OC1_SetConfig+0xdc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d111      	bne.n	8003c92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40010400 	.word	0x40010400

08003cc0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	f023 0210 	bic.w	r2, r3, #16
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f023 0320 	bic.w	r3, r3, #32
 8003d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a22      	ldr	r2, [pc, #136]	; (8003da4 <TIM_OC2_SetConfig+0xe4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <TIM_OC2_SetConfig+0x68>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a21      	ldr	r2, [pc, #132]	; (8003da8 <TIM_OC2_SetConfig+0xe8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d10d      	bne.n	8003d44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a17      	ldr	r2, [pc, #92]	; (8003da4 <TIM_OC2_SetConfig+0xe4>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_OC2_SetConfig+0x94>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <TIM_OC2_SetConfig+0xe8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d113      	bne.n	8003d7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	621a      	str	r2, [r3, #32]
}
 8003d96:	bf00      	nop
 8003d98:	371c      	adds	r7, #28
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40010000 	.word	0x40010000
 8003da8:	40010400 	.word	0x40010400

08003dac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0303 	bic.w	r3, r3, #3
 8003de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	021b      	lsls	r3, r3, #8
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a21      	ldr	r2, [pc, #132]	; (8003e8c <TIM_OC3_SetConfig+0xe0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d003      	beq.n	8003e12 <TIM_OC3_SetConfig+0x66>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <TIM_OC3_SetConfig+0xe4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10d      	bne.n	8003e2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	021b      	lsls	r3, r3, #8
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a16      	ldr	r2, [pc, #88]	; (8003e8c <TIM_OC3_SetConfig+0xe0>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d003      	beq.n	8003e3e <TIM_OC3_SetConfig+0x92>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <TIM_OC3_SetConfig+0xe4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d113      	bne.n	8003e66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	621a      	str	r2, [r3, #32]
}
 8003e80:	bf00      	nop
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40010400 	.word	0x40010400

08003e94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	031b      	lsls	r3, r3, #12
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <TIM_OC4_SetConfig+0xa4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_OC4_SetConfig+0x68>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <TIM_OC4_SetConfig+0xa8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d109      	bne.n	8003f10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	019b      	lsls	r3, r3, #6
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40010400 	.word	0x40010400

08003f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a1b      	ldr	r3, [r3, #32]
 8003f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	f023 0201 	bic.w	r2, r3, #1
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f023 030a 	bic.w	r3, r3, #10
 8003f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	621a      	str	r2, [r3, #32]
}
 8003f92:	bf00      	nop
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f023 0210 	bic.w	r2, r3, #16
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	031b      	lsls	r3, r3, #12
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	621a      	str	r2, [r3, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b085      	sub	sp, #20
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
 8004006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	f043 0307 	orr.w	r3, r3, #7
 8004020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	609a      	str	r2, [r3, #8]
}
 8004028:	bf00      	nop
 800402a:	3714      	adds	r7, #20
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800404e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	021a      	lsls	r2, r3, #8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	431a      	orrs	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4313      	orrs	r3, r2
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	697a      	ldr	r2, [r7, #20]
 8004066:	609a      	str	r2, [r3, #8]
}
 8004068:	bf00      	nop
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004088:	2302      	movs	r3, #2
 800408a:	e05a      	b.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2202      	movs	r2, #2
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a21      	ldr	r2, [pc, #132]	; (8004150 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d022      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d8:	d01d      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d018      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a1b      	ldr	r2, [pc, #108]	; (8004158 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a1a      	ldr	r2, [pc, #104]	; (800415c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d00e      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a17      	ldr	r2, [pc, #92]	; (8004164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a15      	ldr	r2, [pc, #84]	; (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10c      	bne.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	68ba      	ldr	r2, [r7, #8]
 8004124:	4313      	orrs	r3, r2
 8004126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40010000 	.word	0x40010000
 8004154:	40000400 	.word	0x40000400
 8004158:	40000800 	.word	0x40000800
 800415c:	40000c00 	.word	0x40000c00
 8004160:	40010400 	.word	0x40010400
 8004164:	40014000 	.word	0x40014000
 8004168:	40001800 	.word	0x40001800

0800416c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e042      	b.n	800422c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fd fcae 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f82b 	bl	8004234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691a      	ldr	r2, [r3, #16]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68da      	ldr	r2, [r3, #12]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004238:	b0c0      	sub	sp, #256	; 0x100
 800423a:	af00      	add	r7, sp, #0
 800423c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004250:	68d9      	ldr	r1, [r3, #12]
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	ea40 0301 	orr.w	r3, r0, r1
 800425c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	431a      	orrs	r2, r3
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	431a      	orrs	r2, r3
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800428c:	f021 010c 	bic.w	r1, r1, #12
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800429a:	430b      	orrs	r3, r1
 800429c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	6999      	ldr	r1, [r3, #24]
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	ea40 0301 	orr.w	r3, r0, r1
 80042ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b8f      	ldr	r3, [pc, #572]	; (8004500 <UART_SetConfig+0x2cc>)
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d005      	beq.n	80042d4 <UART_SetConfig+0xa0>
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b8d      	ldr	r3, [pc, #564]	; (8004504 <UART_SetConfig+0x2d0>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d104      	bne.n	80042de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042d4:	f7fe fb8c 	bl	80029f0 <HAL_RCC_GetPCLK2Freq>
 80042d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042dc:	e003      	b.n	80042e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042de:	f7fe fb73 	bl	80029c8 <HAL_RCC_GetPCLK1Freq>
 80042e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f0:	f040 810c 	bne.w	800450c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004306:	4622      	mov	r2, r4
 8004308:	462b      	mov	r3, r5
 800430a:	1891      	adds	r1, r2, r2
 800430c:	65b9      	str	r1, [r7, #88]	; 0x58
 800430e:	415b      	adcs	r3, r3
 8004310:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004316:	4621      	mov	r1, r4
 8004318:	eb12 0801 	adds.w	r8, r2, r1
 800431c:	4629      	mov	r1, r5
 800431e:	eb43 0901 	adc.w	r9, r3, r1
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800432e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004336:	4690      	mov	r8, r2
 8004338:	4699      	mov	r9, r3
 800433a:	4623      	mov	r3, r4
 800433c:	eb18 0303 	adds.w	r3, r8, r3
 8004340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004344:	462b      	mov	r3, r5
 8004346:	eb49 0303 	adc.w	r3, r9, r3
 800434a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800435a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800435e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004362:	460b      	mov	r3, r1
 8004364:	18db      	adds	r3, r3, r3
 8004366:	653b      	str	r3, [r7, #80]	; 0x50
 8004368:	4613      	mov	r3, r2
 800436a:	eb42 0303 	adc.w	r3, r2, r3
 800436e:	657b      	str	r3, [r7, #84]	; 0x54
 8004370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004378:	f7fc fca6 	bl	8000cc8 <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4b61      	ldr	r3, [pc, #388]	; (8004508 <UART_SetConfig+0x2d4>)
 8004382:	fba3 2302 	umull	r2, r3, r3, r2
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	011c      	lsls	r4, r3, #4
 800438a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004394:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80043a4:	415b      	adcs	r3, r3
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043ac:	4641      	mov	r1, r8
 80043ae:	eb12 0a01 	adds.w	sl, r2, r1
 80043b2:	4649      	mov	r1, r9
 80043b4:	eb43 0b01 	adc.w	fp, r3, r1
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043cc:	4692      	mov	sl, r2
 80043ce:	469b      	mov	fp, r3
 80043d0:	4643      	mov	r3, r8
 80043d2:	eb1a 0303 	adds.w	r3, sl, r3
 80043d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043da:	464b      	mov	r3, r9
 80043dc:	eb4b 0303 	adc.w	r3, fp, r3
 80043e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80043f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043f8:	460b      	mov	r3, r1
 80043fa:	18db      	adds	r3, r3, r3
 80043fc:	643b      	str	r3, [r7, #64]	; 0x40
 80043fe:	4613      	mov	r3, r2
 8004400:	eb42 0303 	adc.w	r3, r2, r3
 8004404:	647b      	str	r3, [r7, #68]	; 0x44
 8004406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800440a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800440e:	f7fc fc5b 	bl	8000cc8 <__aeabi_uldivmod>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4611      	mov	r1, r2
 8004418:	4b3b      	ldr	r3, [pc, #236]	; (8004508 <UART_SetConfig+0x2d4>)
 800441a:	fba3 2301 	umull	r2, r3, r3, r1
 800441e:	095b      	lsrs	r3, r3, #5
 8004420:	2264      	movs	r2, #100	; 0x64
 8004422:	fb02 f303 	mul.w	r3, r2, r3
 8004426:	1acb      	subs	r3, r1, r3
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800442e:	4b36      	ldr	r3, [pc, #216]	; (8004508 <UART_SetConfig+0x2d4>)
 8004430:	fba3 2302 	umull	r2, r3, r3, r2
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800443c:	441c      	add	r4, r3
 800443e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004442:	2200      	movs	r2, #0
 8004444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004448:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800444c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	1891      	adds	r1, r2, r2
 8004456:	63b9      	str	r1, [r7, #56]	; 0x38
 8004458:	415b      	adcs	r3, r3
 800445a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004460:	4641      	mov	r1, r8
 8004462:	1851      	adds	r1, r2, r1
 8004464:	6339      	str	r1, [r7, #48]	; 0x30
 8004466:	4649      	mov	r1, r9
 8004468:	414b      	adcs	r3, r1
 800446a:	637b      	str	r3, [r7, #52]	; 0x34
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004478:	4659      	mov	r1, fp
 800447a:	00cb      	lsls	r3, r1, #3
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004482:	4651      	mov	r1, sl
 8004484:	00ca      	lsls	r2, r1, #3
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	4603      	mov	r3, r0
 800448c:	4642      	mov	r2, r8
 800448e:	189b      	adds	r3, r3, r2
 8004490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004494:	464b      	mov	r3, r9
 8004496:	460a      	mov	r2, r1
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044b4:	460b      	mov	r3, r1
 80044b6:	18db      	adds	r3, r3, r3
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ba:	4613      	mov	r3, r2
 80044bc:	eb42 0303 	adc.w	r3, r2, r3
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044ca:	f7fc fbfd 	bl	8000cc8 <__aeabi_uldivmod>
 80044ce:	4602      	mov	r2, r0
 80044d0:	460b      	mov	r3, r1
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <UART_SetConfig+0x2d4>)
 80044d4:	fba3 1302 	umull	r1, r3, r3, r2
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	2164      	movs	r1, #100	; 0x64
 80044dc:	fb01 f303 	mul.w	r3, r1, r3
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	3332      	adds	r3, #50	; 0x32
 80044e6:	4a08      	ldr	r2, [pc, #32]	; (8004508 <UART_SetConfig+0x2d4>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	f003 0207 	and.w	r2, r3, #7
 80044f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4422      	add	r2, r4
 80044fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044fc:	e106      	b.n	800470c <UART_SetConfig+0x4d8>
 80044fe:	bf00      	nop
 8004500:	40011000 	.word	0x40011000
 8004504:	40011400 	.word	0x40011400
 8004508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800450c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004510:	2200      	movs	r2, #0
 8004512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004516:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800451a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800451e:	4642      	mov	r2, r8
 8004520:	464b      	mov	r3, r9
 8004522:	1891      	adds	r1, r2, r2
 8004524:	6239      	str	r1, [r7, #32]
 8004526:	415b      	adcs	r3, r3
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
 800452a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800452e:	4641      	mov	r1, r8
 8004530:	1854      	adds	r4, r2, r1
 8004532:	4649      	mov	r1, r9
 8004534:	eb43 0501 	adc.w	r5, r3, r1
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	00eb      	lsls	r3, r5, #3
 8004542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004546:	00e2      	lsls	r2, r4, #3
 8004548:	4614      	mov	r4, r2
 800454a:	461d      	mov	r5, r3
 800454c:	4643      	mov	r3, r8
 800454e:	18e3      	adds	r3, r4, r3
 8004550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004554:	464b      	mov	r3, r9
 8004556:	eb45 0303 	adc.w	r3, r5, r3
 800455a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800456a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800457a:	4629      	mov	r1, r5
 800457c:	008b      	lsls	r3, r1, #2
 800457e:	4621      	mov	r1, r4
 8004580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004584:	4621      	mov	r1, r4
 8004586:	008a      	lsls	r2, r1, #2
 8004588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800458c:	f7fc fb9c 	bl	8000cc8 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4b60      	ldr	r3, [pc, #384]	; (8004718 <UART_SetConfig+0x4e4>)
 8004596:	fba3 2302 	umull	r2, r3, r3, r2
 800459a:	095b      	lsrs	r3, r3, #5
 800459c:	011c      	lsls	r4, r3, #4
 800459e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045b0:	4642      	mov	r2, r8
 80045b2:	464b      	mov	r3, r9
 80045b4:	1891      	adds	r1, r2, r2
 80045b6:	61b9      	str	r1, [r7, #24]
 80045b8:	415b      	adcs	r3, r3
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045c0:	4641      	mov	r1, r8
 80045c2:	1851      	adds	r1, r2, r1
 80045c4:	6139      	str	r1, [r7, #16]
 80045c6:	4649      	mov	r1, r9
 80045c8:	414b      	adcs	r3, r1
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	f04f 0200 	mov.w	r2, #0
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045d8:	4659      	mov	r1, fp
 80045da:	00cb      	lsls	r3, r1, #3
 80045dc:	4651      	mov	r1, sl
 80045de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e2:	4651      	mov	r1, sl
 80045e4:	00ca      	lsls	r2, r1, #3
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	4603      	mov	r3, r0
 80045ec:	4642      	mov	r2, r8
 80045ee:	189b      	adds	r3, r3, r2
 80045f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80045f4:	464b      	mov	r3, r9
 80045f6:	460a      	mov	r2, r1
 80045f8:	eb42 0303 	adc.w	r3, r2, r3
 80045fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	67bb      	str	r3, [r7, #120]	; 0x78
 800460a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800460c:	f04f 0200 	mov.w	r2, #0
 8004610:	f04f 0300 	mov.w	r3, #0
 8004614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004618:	4649      	mov	r1, r9
 800461a:	008b      	lsls	r3, r1, #2
 800461c:	4641      	mov	r1, r8
 800461e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004622:	4641      	mov	r1, r8
 8004624:	008a      	lsls	r2, r1, #2
 8004626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800462a:	f7fc fb4d 	bl	8000cc8 <__aeabi_uldivmod>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4611      	mov	r1, r2
 8004634:	4b38      	ldr	r3, [pc, #224]	; (8004718 <UART_SetConfig+0x4e4>)
 8004636:	fba3 2301 	umull	r2, r3, r3, r1
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2264      	movs	r2, #100	; 0x64
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	1acb      	subs	r3, r1, r3
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	3332      	adds	r3, #50	; 0x32
 8004648:	4a33      	ldr	r2, [pc, #204]	; (8004718 <UART_SetConfig+0x4e4>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004654:	441c      	add	r4, r3
 8004656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800465a:	2200      	movs	r2, #0
 800465c:	673b      	str	r3, [r7, #112]	; 0x70
 800465e:	677a      	str	r2, [r7, #116]	; 0x74
 8004660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004664:	4642      	mov	r2, r8
 8004666:	464b      	mov	r3, r9
 8004668:	1891      	adds	r1, r2, r2
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	415b      	adcs	r3, r3
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004674:	4641      	mov	r1, r8
 8004676:	1851      	adds	r1, r2, r1
 8004678:	6039      	str	r1, [r7, #0]
 800467a:	4649      	mov	r1, r9
 800467c:	414b      	adcs	r3, r1
 800467e:	607b      	str	r3, [r7, #4]
 8004680:	f04f 0200 	mov.w	r2, #0
 8004684:	f04f 0300 	mov.w	r3, #0
 8004688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800468c:	4659      	mov	r1, fp
 800468e:	00cb      	lsls	r3, r1, #3
 8004690:	4651      	mov	r1, sl
 8004692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004696:	4651      	mov	r1, sl
 8004698:	00ca      	lsls	r2, r1, #3
 800469a:	4610      	mov	r0, r2
 800469c:	4619      	mov	r1, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	4642      	mov	r2, r8
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80046a6:	464b      	mov	r3, r9
 80046a8:	460a      	mov	r2, r1
 80046aa:	eb42 0303 	adc.w	r3, r2, r3
 80046ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	663b      	str	r3, [r7, #96]	; 0x60
 80046ba:	667a      	str	r2, [r7, #100]	; 0x64
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046c8:	4649      	mov	r1, r9
 80046ca:	008b      	lsls	r3, r1, #2
 80046cc:	4641      	mov	r1, r8
 80046ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046d2:	4641      	mov	r1, r8
 80046d4:	008a      	lsls	r2, r1, #2
 80046d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046da:	f7fc faf5 	bl	8000cc8 <__aeabi_uldivmod>
 80046de:	4602      	mov	r2, r0
 80046e0:	460b      	mov	r3, r1
 80046e2:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <UART_SetConfig+0x4e4>)
 80046e4:	fba3 1302 	umull	r1, r3, r3, r2
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	2164      	movs	r1, #100	; 0x64
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	3332      	adds	r3, #50	; 0x32
 80046f6:	4a08      	ldr	r2, [pc, #32]	; (8004718 <UART_SetConfig+0x4e4>)
 80046f8:	fba2 2303 	umull	r2, r3, r2, r3
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	f003 020f 	and.w	r2, r3, #15
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4422      	add	r2, r4
 800470a:	609a      	str	r2, [r3, #8]
}
 800470c:	bf00      	nop
 800470e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004712:	46bd      	mov	sp, r7
 8004714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004718:	51eb851f 	.word	0x51eb851f

0800471c <__cvt>:
 800471c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004720:	ec55 4b10 	vmov	r4, r5, d0
 8004724:	2d00      	cmp	r5, #0
 8004726:	460e      	mov	r6, r1
 8004728:	4619      	mov	r1, r3
 800472a:	462b      	mov	r3, r5
 800472c:	bfbb      	ittet	lt
 800472e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004732:	461d      	movlt	r5, r3
 8004734:	2300      	movge	r3, #0
 8004736:	232d      	movlt	r3, #45	; 0x2d
 8004738:	700b      	strb	r3, [r1, #0]
 800473a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800473c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004740:	4691      	mov	r9, r2
 8004742:	f023 0820 	bic.w	r8, r3, #32
 8004746:	bfbc      	itt	lt
 8004748:	4622      	movlt	r2, r4
 800474a:	4614      	movlt	r4, r2
 800474c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004750:	d005      	beq.n	800475e <__cvt+0x42>
 8004752:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004756:	d100      	bne.n	800475a <__cvt+0x3e>
 8004758:	3601      	adds	r6, #1
 800475a:	2102      	movs	r1, #2
 800475c:	e000      	b.n	8004760 <__cvt+0x44>
 800475e:	2103      	movs	r1, #3
 8004760:	ab03      	add	r3, sp, #12
 8004762:	9301      	str	r3, [sp, #4]
 8004764:	ab02      	add	r3, sp, #8
 8004766:	9300      	str	r3, [sp, #0]
 8004768:	ec45 4b10 	vmov	d0, r4, r5
 800476c:	4653      	mov	r3, sl
 800476e:	4632      	mov	r2, r6
 8004770:	f001 f87e 	bl	8005870 <_dtoa_r>
 8004774:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004778:	4607      	mov	r7, r0
 800477a:	d102      	bne.n	8004782 <__cvt+0x66>
 800477c:	f019 0f01 	tst.w	r9, #1
 8004780:	d022      	beq.n	80047c8 <__cvt+0xac>
 8004782:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004786:	eb07 0906 	add.w	r9, r7, r6
 800478a:	d110      	bne.n	80047ae <__cvt+0x92>
 800478c:	783b      	ldrb	r3, [r7, #0]
 800478e:	2b30      	cmp	r3, #48	; 0x30
 8004790:	d10a      	bne.n	80047a8 <__cvt+0x8c>
 8004792:	2200      	movs	r2, #0
 8004794:	2300      	movs	r3, #0
 8004796:	4620      	mov	r0, r4
 8004798:	4629      	mov	r1, r5
 800479a:	f7fc f9b5 	bl	8000b08 <__aeabi_dcmpeq>
 800479e:	b918      	cbnz	r0, 80047a8 <__cvt+0x8c>
 80047a0:	f1c6 0601 	rsb	r6, r6, #1
 80047a4:	f8ca 6000 	str.w	r6, [sl]
 80047a8:	f8da 3000 	ldr.w	r3, [sl]
 80047ac:	4499      	add	r9, r3
 80047ae:	2200      	movs	r2, #0
 80047b0:	2300      	movs	r3, #0
 80047b2:	4620      	mov	r0, r4
 80047b4:	4629      	mov	r1, r5
 80047b6:	f7fc f9a7 	bl	8000b08 <__aeabi_dcmpeq>
 80047ba:	b108      	cbz	r0, 80047c0 <__cvt+0xa4>
 80047bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80047c0:	2230      	movs	r2, #48	; 0x30
 80047c2:	9b03      	ldr	r3, [sp, #12]
 80047c4:	454b      	cmp	r3, r9
 80047c6:	d307      	bcc.n	80047d8 <__cvt+0xbc>
 80047c8:	9b03      	ldr	r3, [sp, #12]
 80047ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047cc:	1bdb      	subs	r3, r3, r7
 80047ce:	4638      	mov	r0, r7
 80047d0:	6013      	str	r3, [r2, #0]
 80047d2:	b004      	add	sp, #16
 80047d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d8:	1c59      	adds	r1, r3, #1
 80047da:	9103      	str	r1, [sp, #12]
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e7f0      	b.n	80047c2 <__cvt+0xa6>

080047e0 <__exponent>:
 80047e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047e2:	4603      	mov	r3, r0
 80047e4:	2900      	cmp	r1, #0
 80047e6:	bfb8      	it	lt
 80047e8:	4249      	neglt	r1, r1
 80047ea:	f803 2b02 	strb.w	r2, [r3], #2
 80047ee:	bfb4      	ite	lt
 80047f0:	222d      	movlt	r2, #45	; 0x2d
 80047f2:	222b      	movge	r2, #43	; 0x2b
 80047f4:	2909      	cmp	r1, #9
 80047f6:	7042      	strb	r2, [r0, #1]
 80047f8:	dd2a      	ble.n	8004850 <__exponent+0x70>
 80047fa:	f10d 0207 	add.w	r2, sp, #7
 80047fe:	4617      	mov	r7, r2
 8004800:	260a      	movs	r6, #10
 8004802:	4694      	mov	ip, r2
 8004804:	fb91 f5f6 	sdiv	r5, r1, r6
 8004808:	fb06 1415 	mls	r4, r6, r5, r1
 800480c:	3430      	adds	r4, #48	; 0x30
 800480e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004812:	460c      	mov	r4, r1
 8004814:	2c63      	cmp	r4, #99	; 0x63
 8004816:	f102 32ff 	add.w	r2, r2, #4294967295
 800481a:	4629      	mov	r1, r5
 800481c:	dcf1      	bgt.n	8004802 <__exponent+0x22>
 800481e:	3130      	adds	r1, #48	; 0x30
 8004820:	f1ac 0402 	sub.w	r4, ip, #2
 8004824:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004828:	1c41      	adds	r1, r0, #1
 800482a:	4622      	mov	r2, r4
 800482c:	42ba      	cmp	r2, r7
 800482e:	d30a      	bcc.n	8004846 <__exponent+0x66>
 8004830:	f10d 0209 	add.w	r2, sp, #9
 8004834:	eba2 020c 	sub.w	r2, r2, ip
 8004838:	42bc      	cmp	r4, r7
 800483a:	bf88      	it	hi
 800483c:	2200      	movhi	r2, #0
 800483e:	4413      	add	r3, r2
 8004840:	1a18      	subs	r0, r3, r0
 8004842:	b003      	add	sp, #12
 8004844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004846:	f812 5b01 	ldrb.w	r5, [r2], #1
 800484a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800484e:	e7ed      	b.n	800482c <__exponent+0x4c>
 8004850:	2330      	movs	r3, #48	; 0x30
 8004852:	3130      	adds	r1, #48	; 0x30
 8004854:	7083      	strb	r3, [r0, #2]
 8004856:	70c1      	strb	r1, [r0, #3]
 8004858:	1d03      	adds	r3, r0, #4
 800485a:	e7f1      	b.n	8004840 <__exponent+0x60>

0800485c <_printf_float>:
 800485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	ed2d 8b02 	vpush	{d8}
 8004864:	b08d      	sub	sp, #52	; 0x34
 8004866:	460c      	mov	r4, r1
 8004868:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800486c:	4616      	mov	r6, r2
 800486e:	461f      	mov	r7, r3
 8004870:	4605      	mov	r5, r0
 8004872:	f000 fef7 	bl	8005664 <_localeconv_r>
 8004876:	f8d0 a000 	ldr.w	sl, [r0]
 800487a:	4650      	mov	r0, sl
 800487c:	f7fb fd18 	bl	80002b0 <strlen>
 8004880:	2300      	movs	r3, #0
 8004882:	930a      	str	r3, [sp, #40]	; 0x28
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	9305      	str	r3, [sp, #20]
 8004888:	f8d8 3000 	ldr.w	r3, [r8]
 800488c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004890:	3307      	adds	r3, #7
 8004892:	f023 0307 	bic.w	r3, r3, #7
 8004896:	f103 0208 	add.w	r2, r3, #8
 800489a:	f8c8 2000 	str.w	r2, [r8]
 800489e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048a6:	9307      	str	r3, [sp, #28]
 80048a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80048ac:	ee08 0a10 	vmov	s16, r0
 80048b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80048b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048b8:	4b9e      	ldr	r3, [pc, #632]	; (8004b34 <_printf_float+0x2d8>)
 80048ba:	f04f 32ff 	mov.w	r2, #4294967295
 80048be:	f7fc f955 	bl	8000b6c <__aeabi_dcmpun>
 80048c2:	bb88      	cbnz	r0, 8004928 <_printf_float+0xcc>
 80048c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048c8:	4b9a      	ldr	r3, [pc, #616]	; (8004b34 <_printf_float+0x2d8>)
 80048ca:	f04f 32ff 	mov.w	r2, #4294967295
 80048ce:	f7fc f92f 	bl	8000b30 <__aeabi_dcmple>
 80048d2:	bb48      	cbnz	r0, 8004928 <_printf_float+0xcc>
 80048d4:	2200      	movs	r2, #0
 80048d6:	2300      	movs	r3, #0
 80048d8:	4640      	mov	r0, r8
 80048da:	4649      	mov	r1, r9
 80048dc:	f7fc f91e 	bl	8000b1c <__aeabi_dcmplt>
 80048e0:	b110      	cbz	r0, 80048e8 <_printf_float+0x8c>
 80048e2:	232d      	movs	r3, #45	; 0x2d
 80048e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e8:	4a93      	ldr	r2, [pc, #588]	; (8004b38 <_printf_float+0x2dc>)
 80048ea:	4b94      	ldr	r3, [pc, #592]	; (8004b3c <_printf_float+0x2e0>)
 80048ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80048f0:	bf94      	ite	ls
 80048f2:	4690      	movls	r8, r2
 80048f4:	4698      	movhi	r8, r3
 80048f6:	2303      	movs	r3, #3
 80048f8:	6123      	str	r3, [r4, #16]
 80048fa:	9b05      	ldr	r3, [sp, #20]
 80048fc:	f023 0304 	bic.w	r3, r3, #4
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	f04f 0900 	mov.w	r9, #0
 8004906:	9700      	str	r7, [sp, #0]
 8004908:	4633      	mov	r3, r6
 800490a:	aa0b      	add	r2, sp, #44	; 0x2c
 800490c:	4621      	mov	r1, r4
 800490e:	4628      	mov	r0, r5
 8004910:	f000 f9da 	bl	8004cc8 <_printf_common>
 8004914:	3001      	adds	r0, #1
 8004916:	f040 8090 	bne.w	8004a3a <_printf_float+0x1de>
 800491a:	f04f 30ff 	mov.w	r0, #4294967295
 800491e:	b00d      	add	sp, #52	; 0x34
 8004920:	ecbd 8b02 	vpop	{d8}
 8004924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004928:	4642      	mov	r2, r8
 800492a:	464b      	mov	r3, r9
 800492c:	4640      	mov	r0, r8
 800492e:	4649      	mov	r1, r9
 8004930:	f7fc f91c 	bl	8000b6c <__aeabi_dcmpun>
 8004934:	b140      	cbz	r0, 8004948 <_printf_float+0xec>
 8004936:	464b      	mov	r3, r9
 8004938:	2b00      	cmp	r3, #0
 800493a:	bfbc      	itt	lt
 800493c:	232d      	movlt	r3, #45	; 0x2d
 800493e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004942:	4a7f      	ldr	r2, [pc, #508]	; (8004b40 <_printf_float+0x2e4>)
 8004944:	4b7f      	ldr	r3, [pc, #508]	; (8004b44 <_printf_float+0x2e8>)
 8004946:	e7d1      	b.n	80048ec <_printf_float+0x90>
 8004948:	6863      	ldr	r3, [r4, #4]
 800494a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800494e:	9206      	str	r2, [sp, #24]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	d13f      	bne.n	80049d4 <_printf_float+0x178>
 8004954:	2306      	movs	r3, #6
 8004956:	6063      	str	r3, [r4, #4]
 8004958:	9b05      	ldr	r3, [sp, #20]
 800495a:	6861      	ldr	r1, [r4, #4]
 800495c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004960:	2300      	movs	r3, #0
 8004962:	9303      	str	r3, [sp, #12]
 8004964:	ab0a      	add	r3, sp, #40	; 0x28
 8004966:	e9cd b301 	strd	fp, r3, [sp, #4]
 800496a:	ab09      	add	r3, sp, #36	; 0x24
 800496c:	ec49 8b10 	vmov	d0, r8, r9
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	6022      	str	r2, [r4, #0]
 8004974:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004978:	4628      	mov	r0, r5
 800497a:	f7ff fecf 	bl	800471c <__cvt>
 800497e:	9b06      	ldr	r3, [sp, #24]
 8004980:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004982:	2b47      	cmp	r3, #71	; 0x47
 8004984:	4680      	mov	r8, r0
 8004986:	d108      	bne.n	800499a <_printf_float+0x13e>
 8004988:	1cc8      	adds	r0, r1, #3
 800498a:	db02      	blt.n	8004992 <_printf_float+0x136>
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	4299      	cmp	r1, r3
 8004990:	dd41      	ble.n	8004a16 <_printf_float+0x1ba>
 8004992:	f1ab 0302 	sub.w	r3, fp, #2
 8004996:	fa5f fb83 	uxtb.w	fp, r3
 800499a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800499e:	d820      	bhi.n	80049e2 <_printf_float+0x186>
 80049a0:	3901      	subs	r1, #1
 80049a2:	465a      	mov	r2, fp
 80049a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049a8:	9109      	str	r1, [sp, #36]	; 0x24
 80049aa:	f7ff ff19 	bl	80047e0 <__exponent>
 80049ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049b0:	1813      	adds	r3, r2, r0
 80049b2:	2a01      	cmp	r2, #1
 80049b4:	4681      	mov	r9, r0
 80049b6:	6123      	str	r3, [r4, #16]
 80049b8:	dc02      	bgt.n	80049c0 <_printf_float+0x164>
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	07d2      	lsls	r2, r2, #31
 80049be:	d501      	bpl.n	80049c4 <_printf_float+0x168>
 80049c0:	3301      	adds	r3, #1
 80049c2:	6123      	str	r3, [r4, #16]
 80049c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d09c      	beq.n	8004906 <_printf_float+0xaa>
 80049cc:	232d      	movs	r3, #45	; 0x2d
 80049ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d2:	e798      	b.n	8004906 <_printf_float+0xaa>
 80049d4:	9a06      	ldr	r2, [sp, #24]
 80049d6:	2a47      	cmp	r2, #71	; 0x47
 80049d8:	d1be      	bne.n	8004958 <_printf_float+0xfc>
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1bc      	bne.n	8004958 <_printf_float+0xfc>
 80049de:	2301      	movs	r3, #1
 80049e0:	e7b9      	b.n	8004956 <_printf_float+0xfa>
 80049e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049e6:	d118      	bne.n	8004a1a <_printf_float+0x1be>
 80049e8:	2900      	cmp	r1, #0
 80049ea:	6863      	ldr	r3, [r4, #4]
 80049ec:	dd0b      	ble.n	8004a06 <_printf_float+0x1aa>
 80049ee:	6121      	str	r1, [r4, #16]
 80049f0:	b913      	cbnz	r3, 80049f8 <_printf_float+0x19c>
 80049f2:	6822      	ldr	r2, [r4, #0]
 80049f4:	07d0      	lsls	r0, r2, #31
 80049f6:	d502      	bpl.n	80049fe <_printf_float+0x1a2>
 80049f8:	3301      	adds	r3, #1
 80049fa:	440b      	add	r3, r1
 80049fc:	6123      	str	r3, [r4, #16]
 80049fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a00:	f04f 0900 	mov.w	r9, #0
 8004a04:	e7de      	b.n	80049c4 <_printf_float+0x168>
 8004a06:	b913      	cbnz	r3, 8004a0e <_printf_float+0x1b2>
 8004a08:	6822      	ldr	r2, [r4, #0]
 8004a0a:	07d2      	lsls	r2, r2, #31
 8004a0c:	d501      	bpl.n	8004a12 <_printf_float+0x1b6>
 8004a0e:	3302      	adds	r3, #2
 8004a10:	e7f4      	b.n	80049fc <_printf_float+0x1a0>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e7f2      	b.n	80049fc <_printf_float+0x1a0>
 8004a16:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a1c:	4299      	cmp	r1, r3
 8004a1e:	db05      	blt.n	8004a2c <_printf_float+0x1d0>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	6121      	str	r1, [r4, #16]
 8004a24:	07d8      	lsls	r0, r3, #31
 8004a26:	d5ea      	bpl.n	80049fe <_printf_float+0x1a2>
 8004a28:	1c4b      	adds	r3, r1, #1
 8004a2a:	e7e7      	b.n	80049fc <_printf_float+0x1a0>
 8004a2c:	2900      	cmp	r1, #0
 8004a2e:	bfd4      	ite	le
 8004a30:	f1c1 0202 	rsble	r2, r1, #2
 8004a34:	2201      	movgt	r2, #1
 8004a36:	4413      	add	r3, r2
 8004a38:	e7e0      	b.n	80049fc <_printf_float+0x1a0>
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	055a      	lsls	r2, r3, #21
 8004a3e:	d407      	bmi.n	8004a50 <_printf_float+0x1f4>
 8004a40:	6923      	ldr	r3, [r4, #16]
 8004a42:	4642      	mov	r2, r8
 8004a44:	4631      	mov	r1, r6
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b8      	blx	r7
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	d12c      	bne.n	8004aa8 <_printf_float+0x24c>
 8004a4e:	e764      	b.n	800491a <_printf_float+0xbe>
 8004a50:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a54:	f240 80e0 	bls.w	8004c18 <_printf_float+0x3bc>
 8004a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f7fc f852 	bl	8000b08 <__aeabi_dcmpeq>
 8004a64:	2800      	cmp	r0, #0
 8004a66:	d034      	beq.n	8004ad2 <_printf_float+0x276>
 8004a68:	4a37      	ldr	r2, [pc, #220]	; (8004b48 <_printf_float+0x2ec>)
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	4631      	mov	r1, r6
 8004a6e:	4628      	mov	r0, r5
 8004a70:	47b8      	blx	r7
 8004a72:	3001      	adds	r0, #1
 8004a74:	f43f af51 	beq.w	800491a <_printf_float+0xbe>
 8004a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	db02      	blt.n	8004a86 <_printf_float+0x22a>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	07d8      	lsls	r0, r3, #31
 8004a84:	d510      	bpl.n	8004aa8 <_printf_float+0x24c>
 8004a86:	ee18 3a10 	vmov	r3, s16
 8004a8a:	4652      	mov	r2, sl
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b8      	blx	r7
 8004a92:	3001      	adds	r0, #1
 8004a94:	f43f af41 	beq.w	800491a <_printf_float+0xbe>
 8004a98:	f04f 0800 	mov.w	r8, #0
 8004a9c:	f104 091a 	add.w	r9, r4, #26
 8004aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	4543      	cmp	r3, r8
 8004aa6:	dc09      	bgt.n	8004abc <_printf_float+0x260>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	079b      	lsls	r3, r3, #30
 8004aac:	f100 8107 	bmi.w	8004cbe <_printf_float+0x462>
 8004ab0:	68e0      	ldr	r0, [r4, #12]
 8004ab2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ab4:	4298      	cmp	r0, r3
 8004ab6:	bfb8      	it	lt
 8004ab8:	4618      	movlt	r0, r3
 8004aba:	e730      	b.n	800491e <_printf_float+0xc2>
 8004abc:	2301      	movs	r3, #1
 8004abe:	464a      	mov	r2, r9
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	47b8      	blx	r7
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	f43f af27 	beq.w	800491a <_printf_float+0xbe>
 8004acc:	f108 0801 	add.w	r8, r8, #1
 8004ad0:	e7e6      	b.n	8004aa0 <_printf_float+0x244>
 8004ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	dc39      	bgt.n	8004b4c <_printf_float+0x2f0>
 8004ad8:	4a1b      	ldr	r2, [pc, #108]	; (8004b48 <_printf_float+0x2ec>)
 8004ada:	2301      	movs	r3, #1
 8004adc:	4631      	mov	r1, r6
 8004ade:	4628      	mov	r0, r5
 8004ae0:	47b8      	blx	r7
 8004ae2:	3001      	adds	r0, #1
 8004ae4:	f43f af19 	beq.w	800491a <_printf_float+0xbe>
 8004ae8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004aec:	4313      	orrs	r3, r2
 8004aee:	d102      	bne.n	8004af6 <_printf_float+0x29a>
 8004af0:	6823      	ldr	r3, [r4, #0]
 8004af2:	07d9      	lsls	r1, r3, #31
 8004af4:	d5d8      	bpl.n	8004aa8 <_printf_float+0x24c>
 8004af6:	ee18 3a10 	vmov	r3, s16
 8004afa:	4652      	mov	r2, sl
 8004afc:	4631      	mov	r1, r6
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	f43f af09 	beq.w	800491a <_printf_float+0xbe>
 8004b08:	f04f 0900 	mov.w	r9, #0
 8004b0c:	f104 0a1a 	add.w	sl, r4, #26
 8004b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b12:	425b      	negs	r3, r3
 8004b14:	454b      	cmp	r3, r9
 8004b16:	dc01      	bgt.n	8004b1c <_printf_float+0x2c0>
 8004b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b1a:	e792      	b.n	8004a42 <_printf_float+0x1e6>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	4652      	mov	r2, sl
 8004b20:	4631      	mov	r1, r6
 8004b22:	4628      	mov	r0, r5
 8004b24:	47b8      	blx	r7
 8004b26:	3001      	adds	r0, #1
 8004b28:	f43f aef7 	beq.w	800491a <_printf_float+0xbe>
 8004b2c:	f109 0901 	add.w	r9, r9, #1
 8004b30:	e7ee      	b.n	8004b10 <_printf_float+0x2b4>
 8004b32:	bf00      	nop
 8004b34:	7fefffff 	.word	0x7fefffff
 8004b38:	08008ef8 	.word	0x08008ef8
 8004b3c:	08008efc 	.word	0x08008efc
 8004b40:	08008f00 	.word	0x08008f00
 8004b44:	08008f04 	.word	0x08008f04
 8004b48:	08008f08 	.word	0x08008f08
 8004b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b50:	429a      	cmp	r2, r3
 8004b52:	bfa8      	it	ge
 8004b54:	461a      	movge	r2, r3
 8004b56:	2a00      	cmp	r2, #0
 8004b58:	4691      	mov	r9, r2
 8004b5a:	dc37      	bgt.n	8004bcc <_printf_float+0x370>
 8004b5c:	f04f 0b00 	mov.w	fp, #0
 8004b60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b64:	f104 021a 	add.w	r2, r4, #26
 8004b68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b6a:	9305      	str	r3, [sp, #20]
 8004b6c:	eba3 0309 	sub.w	r3, r3, r9
 8004b70:	455b      	cmp	r3, fp
 8004b72:	dc33      	bgt.n	8004bdc <_printf_float+0x380>
 8004b74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	db3b      	blt.n	8004bf4 <_printf_float+0x398>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	07da      	lsls	r2, r3, #31
 8004b80:	d438      	bmi.n	8004bf4 <_printf_float+0x398>
 8004b82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004b86:	eba2 0903 	sub.w	r9, r2, r3
 8004b8a:	9b05      	ldr	r3, [sp, #20]
 8004b8c:	1ad2      	subs	r2, r2, r3
 8004b8e:	4591      	cmp	r9, r2
 8004b90:	bfa8      	it	ge
 8004b92:	4691      	movge	r9, r2
 8004b94:	f1b9 0f00 	cmp.w	r9, #0
 8004b98:	dc35      	bgt.n	8004c06 <_printf_float+0x3aa>
 8004b9a:	f04f 0800 	mov.w	r8, #0
 8004b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ba2:	f104 0a1a 	add.w	sl, r4, #26
 8004ba6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004baa:	1a9b      	subs	r3, r3, r2
 8004bac:	eba3 0309 	sub.w	r3, r3, r9
 8004bb0:	4543      	cmp	r3, r8
 8004bb2:	f77f af79 	ble.w	8004aa8 <_printf_float+0x24c>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4652      	mov	r2, sl
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	47b8      	blx	r7
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	f43f aeaa 	beq.w	800491a <_printf_float+0xbe>
 8004bc6:	f108 0801 	add.w	r8, r8, #1
 8004bca:	e7ec      	b.n	8004ba6 <_printf_float+0x34a>
 8004bcc:	4613      	mov	r3, r2
 8004bce:	4631      	mov	r1, r6
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	4628      	mov	r0, r5
 8004bd4:	47b8      	blx	r7
 8004bd6:	3001      	adds	r0, #1
 8004bd8:	d1c0      	bne.n	8004b5c <_printf_float+0x300>
 8004bda:	e69e      	b.n	800491a <_printf_float+0xbe>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4631      	mov	r1, r6
 8004be0:	4628      	mov	r0, r5
 8004be2:	9205      	str	r2, [sp, #20]
 8004be4:	47b8      	blx	r7
 8004be6:	3001      	adds	r0, #1
 8004be8:	f43f ae97 	beq.w	800491a <_printf_float+0xbe>
 8004bec:	9a05      	ldr	r2, [sp, #20]
 8004bee:	f10b 0b01 	add.w	fp, fp, #1
 8004bf2:	e7b9      	b.n	8004b68 <_printf_float+0x30c>
 8004bf4:	ee18 3a10 	vmov	r3, s16
 8004bf8:	4652      	mov	r2, sl
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	47b8      	blx	r7
 8004c00:	3001      	adds	r0, #1
 8004c02:	d1be      	bne.n	8004b82 <_printf_float+0x326>
 8004c04:	e689      	b.n	800491a <_printf_float+0xbe>
 8004c06:	9a05      	ldr	r2, [sp, #20]
 8004c08:	464b      	mov	r3, r9
 8004c0a:	4442      	add	r2, r8
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	d1c1      	bne.n	8004b9a <_printf_float+0x33e>
 8004c16:	e680      	b.n	800491a <_printf_float+0xbe>
 8004c18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c1a:	2a01      	cmp	r2, #1
 8004c1c:	dc01      	bgt.n	8004c22 <_printf_float+0x3c6>
 8004c1e:	07db      	lsls	r3, r3, #31
 8004c20:	d53a      	bpl.n	8004c98 <_printf_float+0x43c>
 8004c22:	2301      	movs	r3, #1
 8004c24:	4642      	mov	r2, r8
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	f43f ae74 	beq.w	800491a <_printf_float+0xbe>
 8004c32:	ee18 3a10 	vmov	r3, s16
 8004c36:	4652      	mov	r2, sl
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f43f ae6b 	beq.w	800491a <_printf_float+0xbe>
 8004c44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004c50:	f7fb ff5a 	bl	8000b08 <__aeabi_dcmpeq>
 8004c54:	b9d8      	cbnz	r0, 8004c8e <_printf_float+0x432>
 8004c56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004c5a:	f108 0201 	add.w	r2, r8, #1
 8004c5e:	4631      	mov	r1, r6
 8004c60:	4628      	mov	r0, r5
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	d10e      	bne.n	8004c86 <_printf_float+0x42a>
 8004c68:	e657      	b.n	800491a <_printf_float+0xbe>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f ae50 	beq.w	800491a <_printf_float+0xbe>
 8004c7a:	f108 0801 	add.w	r8, r8, #1
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c80:	3b01      	subs	r3, #1
 8004c82:	4543      	cmp	r3, r8
 8004c84:	dcf1      	bgt.n	8004c6a <_printf_float+0x40e>
 8004c86:	464b      	mov	r3, r9
 8004c88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c8c:	e6da      	b.n	8004a44 <_printf_float+0x1e8>
 8004c8e:	f04f 0800 	mov.w	r8, #0
 8004c92:	f104 0a1a 	add.w	sl, r4, #26
 8004c96:	e7f2      	b.n	8004c7e <_printf_float+0x422>
 8004c98:	2301      	movs	r3, #1
 8004c9a:	4642      	mov	r2, r8
 8004c9c:	e7df      	b.n	8004c5e <_printf_float+0x402>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	464a      	mov	r2, r9
 8004ca2:	4631      	mov	r1, r6
 8004ca4:	4628      	mov	r0, r5
 8004ca6:	47b8      	blx	r7
 8004ca8:	3001      	adds	r0, #1
 8004caa:	f43f ae36 	beq.w	800491a <_printf_float+0xbe>
 8004cae:	f108 0801 	add.w	r8, r8, #1
 8004cb2:	68e3      	ldr	r3, [r4, #12]
 8004cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cb6:	1a5b      	subs	r3, r3, r1
 8004cb8:	4543      	cmp	r3, r8
 8004cba:	dcf0      	bgt.n	8004c9e <_printf_float+0x442>
 8004cbc:	e6f8      	b.n	8004ab0 <_printf_float+0x254>
 8004cbe:	f04f 0800 	mov.w	r8, #0
 8004cc2:	f104 0919 	add.w	r9, r4, #25
 8004cc6:	e7f4      	b.n	8004cb2 <_printf_float+0x456>

08004cc8 <_printf_common>:
 8004cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ccc:	4616      	mov	r6, r2
 8004cce:	4699      	mov	r9, r3
 8004cd0:	688a      	ldr	r2, [r1, #8]
 8004cd2:	690b      	ldr	r3, [r1, #16]
 8004cd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	bfb8      	it	lt
 8004cdc:	4613      	movlt	r3, r2
 8004cde:	6033      	str	r3, [r6, #0]
 8004ce0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ce4:	4607      	mov	r7, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	b10a      	cbz	r2, 8004cee <_printf_common+0x26>
 8004cea:	3301      	adds	r3, #1
 8004cec:	6033      	str	r3, [r6, #0]
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	0699      	lsls	r1, r3, #26
 8004cf2:	bf42      	ittt	mi
 8004cf4:	6833      	ldrmi	r3, [r6, #0]
 8004cf6:	3302      	addmi	r3, #2
 8004cf8:	6033      	strmi	r3, [r6, #0]
 8004cfa:	6825      	ldr	r5, [r4, #0]
 8004cfc:	f015 0506 	ands.w	r5, r5, #6
 8004d00:	d106      	bne.n	8004d10 <_printf_common+0x48>
 8004d02:	f104 0a19 	add.w	sl, r4, #25
 8004d06:	68e3      	ldr	r3, [r4, #12]
 8004d08:	6832      	ldr	r2, [r6, #0]
 8004d0a:	1a9b      	subs	r3, r3, r2
 8004d0c:	42ab      	cmp	r3, r5
 8004d0e:	dc26      	bgt.n	8004d5e <_printf_common+0x96>
 8004d10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d14:	1e13      	subs	r3, r2, #0
 8004d16:	6822      	ldr	r2, [r4, #0]
 8004d18:	bf18      	it	ne
 8004d1a:	2301      	movne	r3, #1
 8004d1c:	0692      	lsls	r2, r2, #26
 8004d1e:	d42b      	bmi.n	8004d78 <_printf_common+0xb0>
 8004d20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d24:	4649      	mov	r1, r9
 8004d26:	4638      	mov	r0, r7
 8004d28:	47c0      	blx	r8
 8004d2a:	3001      	adds	r0, #1
 8004d2c:	d01e      	beq.n	8004d6c <_printf_common+0xa4>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	6922      	ldr	r2, [r4, #16]
 8004d32:	f003 0306 	and.w	r3, r3, #6
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	bf02      	ittt	eq
 8004d3a:	68e5      	ldreq	r5, [r4, #12]
 8004d3c:	6833      	ldreq	r3, [r6, #0]
 8004d3e:	1aed      	subeq	r5, r5, r3
 8004d40:	68a3      	ldr	r3, [r4, #8]
 8004d42:	bf0c      	ite	eq
 8004d44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d48:	2500      	movne	r5, #0
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	bfc4      	itt	gt
 8004d4e:	1a9b      	subgt	r3, r3, r2
 8004d50:	18ed      	addgt	r5, r5, r3
 8004d52:	2600      	movs	r6, #0
 8004d54:	341a      	adds	r4, #26
 8004d56:	42b5      	cmp	r5, r6
 8004d58:	d11a      	bne.n	8004d90 <_printf_common+0xc8>
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	e008      	b.n	8004d70 <_printf_common+0xa8>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	4652      	mov	r2, sl
 8004d62:	4649      	mov	r1, r9
 8004d64:	4638      	mov	r0, r7
 8004d66:	47c0      	blx	r8
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d103      	bne.n	8004d74 <_printf_common+0xac>
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d74:	3501      	adds	r5, #1
 8004d76:	e7c6      	b.n	8004d06 <_printf_common+0x3e>
 8004d78:	18e1      	adds	r1, r4, r3
 8004d7a:	1c5a      	adds	r2, r3, #1
 8004d7c:	2030      	movs	r0, #48	; 0x30
 8004d7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d82:	4422      	add	r2, r4
 8004d84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	e7c7      	b.n	8004d20 <_printf_common+0x58>
 8004d90:	2301      	movs	r3, #1
 8004d92:	4622      	mov	r2, r4
 8004d94:	4649      	mov	r1, r9
 8004d96:	4638      	mov	r0, r7
 8004d98:	47c0      	blx	r8
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	d0e6      	beq.n	8004d6c <_printf_common+0xa4>
 8004d9e:	3601      	adds	r6, #1
 8004da0:	e7d9      	b.n	8004d56 <_printf_common+0x8e>
	...

08004da4 <_printf_i>:
 8004da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004da8:	7e0f      	ldrb	r7, [r1, #24]
 8004daa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dac:	2f78      	cmp	r7, #120	; 0x78
 8004dae:	4691      	mov	r9, r2
 8004db0:	4680      	mov	r8, r0
 8004db2:	460c      	mov	r4, r1
 8004db4:	469a      	mov	sl, r3
 8004db6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004dba:	d807      	bhi.n	8004dcc <_printf_i+0x28>
 8004dbc:	2f62      	cmp	r7, #98	; 0x62
 8004dbe:	d80a      	bhi.n	8004dd6 <_printf_i+0x32>
 8004dc0:	2f00      	cmp	r7, #0
 8004dc2:	f000 80d4 	beq.w	8004f6e <_printf_i+0x1ca>
 8004dc6:	2f58      	cmp	r7, #88	; 0x58
 8004dc8:	f000 80c0 	beq.w	8004f4c <_printf_i+0x1a8>
 8004dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dd4:	e03a      	b.n	8004e4c <_printf_i+0xa8>
 8004dd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dda:	2b15      	cmp	r3, #21
 8004ddc:	d8f6      	bhi.n	8004dcc <_printf_i+0x28>
 8004dde:	a101      	add	r1, pc, #4	; (adr r1, 8004de4 <_printf_i+0x40>)
 8004de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004de4:	08004e3d 	.word	0x08004e3d
 8004de8:	08004e51 	.word	0x08004e51
 8004dec:	08004dcd 	.word	0x08004dcd
 8004df0:	08004dcd 	.word	0x08004dcd
 8004df4:	08004dcd 	.word	0x08004dcd
 8004df8:	08004dcd 	.word	0x08004dcd
 8004dfc:	08004e51 	.word	0x08004e51
 8004e00:	08004dcd 	.word	0x08004dcd
 8004e04:	08004dcd 	.word	0x08004dcd
 8004e08:	08004dcd 	.word	0x08004dcd
 8004e0c:	08004dcd 	.word	0x08004dcd
 8004e10:	08004f55 	.word	0x08004f55
 8004e14:	08004e7d 	.word	0x08004e7d
 8004e18:	08004f0f 	.word	0x08004f0f
 8004e1c:	08004dcd 	.word	0x08004dcd
 8004e20:	08004dcd 	.word	0x08004dcd
 8004e24:	08004f77 	.word	0x08004f77
 8004e28:	08004dcd 	.word	0x08004dcd
 8004e2c:	08004e7d 	.word	0x08004e7d
 8004e30:	08004dcd 	.word	0x08004dcd
 8004e34:	08004dcd 	.word	0x08004dcd
 8004e38:	08004f17 	.word	0x08004f17
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	1d1a      	adds	r2, r3, #4
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	602a      	str	r2, [r5, #0]
 8004e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e09f      	b.n	8004f90 <_printf_i+0x1ec>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	0607      	lsls	r7, r0, #24
 8004e56:	f103 0104 	add.w	r1, r3, #4
 8004e5a:	6029      	str	r1, [r5, #0]
 8004e5c:	d501      	bpl.n	8004e62 <_printf_i+0xbe>
 8004e5e:	681e      	ldr	r6, [r3, #0]
 8004e60:	e003      	b.n	8004e6a <_printf_i+0xc6>
 8004e62:	0646      	lsls	r6, r0, #25
 8004e64:	d5fb      	bpl.n	8004e5e <_printf_i+0xba>
 8004e66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e6a:	2e00      	cmp	r6, #0
 8004e6c:	da03      	bge.n	8004e76 <_printf_i+0xd2>
 8004e6e:	232d      	movs	r3, #45	; 0x2d
 8004e70:	4276      	negs	r6, r6
 8004e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e76:	485a      	ldr	r0, [pc, #360]	; (8004fe0 <_printf_i+0x23c>)
 8004e78:	230a      	movs	r3, #10
 8004e7a:	e012      	b.n	8004ea2 <_printf_i+0xfe>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	6820      	ldr	r0, [r4, #0]
 8004e80:	1d19      	adds	r1, r3, #4
 8004e82:	6029      	str	r1, [r5, #0]
 8004e84:	0605      	lsls	r5, r0, #24
 8004e86:	d501      	bpl.n	8004e8c <_printf_i+0xe8>
 8004e88:	681e      	ldr	r6, [r3, #0]
 8004e8a:	e002      	b.n	8004e92 <_printf_i+0xee>
 8004e8c:	0641      	lsls	r1, r0, #25
 8004e8e:	d5fb      	bpl.n	8004e88 <_printf_i+0xe4>
 8004e90:	881e      	ldrh	r6, [r3, #0]
 8004e92:	4853      	ldr	r0, [pc, #332]	; (8004fe0 <_printf_i+0x23c>)
 8004e94:	2f6f      	cmp	r7, #111	; 0x6f
 8004e96:	bf0c      	ite	eq
 8004e98:	2308      	moveq	r3, #8
 8004e9a:	230a      	movne	r3, #10
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ea2:	6865      	ldr	r5, [r4, #4]
 8004ea4:	60a5      	str	r5, [r4, #8]
 8004ea6:	2d00      	cmp	r5, #0
 8004ea8:	bfa2      	ittt	ge
 8004eaa:	6821      	ldrge	r1, [r4, #0]
 8004eac:	f021 0104 	bicge.w	r1, r1, #4
 8004eb0:	6021      	strge	r1, [r4, #0]
 8004eb2:	b90e      	cbnz	r6, 8004eb8 <_printf_i+0x114>
 8004eb4:	2d00      	cmp	r5, #0
 8004eb6:	d04b      	beq.n	8004f50 <_printf_i+0x1ac>
 8004eb8:	4615      	mov	r5, r2
 8004eba:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ebe:	fb03 6711 	mls	r7, r3, r1, r6
 8004ec2:	5dc7      	ldrb	r7, [r0, r7]
 8004ec4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ec8:	4637      	mov	r7, r6
 8004eca:	42bb      	cmp	r3, r7
 8004ecc:	460e      	mov	r6, r1
 8004ece:	d9f4      	bls.n	8004eba <_printf_i+0x116>
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d10b      	bne.n	8004eec <_printf_i+0x148>
 8004ed4:	6823      	ldr	r3, [r4, #0]
 8004ed6:	07de      	lsls	r6, r3, #31
 8004ed8:	d508      	bpl.n	8004eec <_printf_i+0x148>
 8004eda:	6923      	ldr	r3, [r4, #16]
 8004edc:	6861      	ldr	r1, [r4, #4]
 8004ede:	4299      	cmp	r1, r3
 8004ee0:	bfde      	ittt	le
 8004ee2:	2330      	movle	r3, #48	; 0x30
 8004ee4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ee8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004eec:	1b52      	subs	r2, r2, r5
 8004eee:	6122      	str	r2, [r4, #16]
 8004ef0:	f8cd a000 	str.w	sl, [sp]
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	aa03      	add	r2, sp, #12
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4640      	mov	r0, r8
 8004efc:	f7ff fee4 	bl	8004cc8 <_printf_common>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d14a      	bne.n	8004f9a <_printf_i+0x1f6>
 8004f04:	f04f 30ff 	mov.w	r0, #4294967295
 8004f08:	b004      	add	sp, #16
 8004f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	f043 0320 	orr.w	r3, r3, #32
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	4833      	ldr	r0, [pc, #204]	; (8004fe4 <_printf_i+0x240>)
 8004f18:	2778      	movs	r7, #120	; 0x78
 8004f1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f1e:	6823      	ldr	r3, [r4, #0]
 8004f20:	6829      	ldr	r1, [r5, #0]
 8004f22:	061f      	lsls	r7, r3, #24
 8004f24:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f28:	d402      	bmi.n	8004f30 <_printf_i+0x18c>
 8004f2a:	065f      	lsls	r7, r3, #25
 8004f2c:	bf48      	it	mi
 8004f2e:	b2b6      	uxthmi	r6, r6
 8004f30:	07df      	lsls	r7, r3, #31
 8004f32:	bf48      	it	mi
 8004f34:	f043 0320 	orrmi.w	r3, r3, #32
 8004f38:	6029      	str	r1, [r5, #0]
 8004f3a:	bf48      	it	mi
 8004f3c:	6023      	strmi	r3, [r4, #0]
 8004f3e:	b91e      	cbnz	r6, 8004f48 <_printf_i+0x1a4>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	f023 0320 	bic.w	r3, r3, #32
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	2310      	movs	r3, #16
 8004f4a:	e7a7      	b.n	8004e9c <_printf_i+0xf8>
 8004f4c:	4824      	ldr	r0, [pc, #144]	; (8004fe0 <_printf_i+0x23c>)
 8004f4e:	e7e4      	b.n	8004f1a <_printf_i+0x176>
 8004f50:	4615      	mov	r5, r2
 8004f52:	e7bd      	b.n	8004ed0 <_printf_i+0x12c>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	6826      	ldr	r6, [r4, #0]
 8004f58:	6961      	ldr	r1, [r4, #20]
 8004f5a:	1d18      	adds	r0, r3, #4
 8004f5c:	6028      	str	r0, [r5, #0]
 8004f5e:	0635      	lsls	r5, r6, #24
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	d501      	bpl.n	8004f68 <_printf_i+0x1c4>
 8004f64:	6019      	str	r1, [r3, #0]
 8004f66:	e002      	b.n	8004f6e <_printf_i+0x1ca>
 8004f68:	0670      	lsls	r0, r6, #25
 8004f6a:	d5fb      	bpl.n	8004f64 <_printf_i+0x1c0>
 8004f6c:	8019      	strh	r1, [r3, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	6123      	str	r3, [r4, #16]
 8004f72:	4615      	mov	r5, r2
 8004f74:	e7bc      	b.n	8004ef0 <_printf_i+0x14c>
 8004f76:	682b      	ldr	r3, [r5, #0]
 8004f78:	1d1a      	adds	r2, r3, #4
 8004f7a:	602a      	str	r2, [r5, #0]
 8004f7c:	681d      	ldr	r5, [r3, #0]
 8004f7e:	6862      	ldr	r2, [r4, #4]
 8004f80:	2100      	movs	r1, #0
 8004f82:	4628      	mov	r0, r5
 8004f84:	f7fb f944 	bl	8000210 <memchr>
 8004f88:	b108      	cbz	r0, 8004f8e <_printf_i+0x1ea>
 8004f8a:	1b40      	subs	r0, r0, r5
 8004f8c:	6060      	str	r0, [r4, #4]
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	6123      	str	r3, [r4, #16]
 8004f92:	2300      	movs	r3, #0
 8004f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f98:	e7aa      	b.n	8004ef0 <_printf_i+0x14c>
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	47d0      	blx	sl
 8004fa4:	3001      	adds	r0, #1
 8004fa6:	d0ad      	beq.n	8004f04 <_printf_i+0x160>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	079b      	lsls	r3, r3, #30
 8004fac:	d413      	bmi.n	8004fd6 <_printf_i+0x232>
 8004fae:	68e0      	ldr	r0, [r4, #12]
 8004fb0:	9b03      	ldr	r3, [sp, #12]
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	bfb8      	it	lt
 8004fb6:	4618      	movlt	r0, r3
 8004fb8:	e7a6      	b.n	8004f08 <_printf_i+0x164>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	4632      	mov	r2, r6
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	4640      	mov	r0, r8
 8004fc2:	47d0      	blx	sl
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d09d      	beq.n	8004f04 <_printf_i+0x160>
 8004fc8:	3501      	adds	r5, #1
 8004fca:	68e3      	ldr	r3, [r4, #12]
 8004fcc:	9903      	ldr	r1, [sp, #12]
 8004fce:	1a5b      	subs	r3, r3, r1
 8004fd0:	42ab      	cmp	r3, r5
 8004fd2:	dcf2      	bgt.n	8004fba <_printf_i+0x216>
 8004fd4:	e7eb      	b.n	8004fae <_printf_i+0x20a>
 8004fd6:	2500      	movs	r5, #0
 8004fd8:	f104 0619 	add.w	r6, r4, #25
 8004fdc:	e7f5      	b.n	8004fca <_printf_i+0x226>
 8004fde:	bf00      	nop
 8004fe0:	08008f0a 	.word	0x08008f0a
 8004fe4:	08008f1b 	.word	0x08008f1b

08004fe8 <_scanf_float>:
 8004fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fec:	b087      	sub	sp, #28
 8004fee:	4617      	mov	r7, r2
 8004ff0:	9303      	str	r3, [sp, #12]
 8004ff2:	688b      	ldr	r3, [r1, #8]
 8004ff4:	1e5a      	subs	r2, r3, #1
 8004ff6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004ffa:	bf83      	ittte	hi
 8004ffc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005000:	195b      	addhi	r3, r3, r5
 8005002:	9302      	strhi	r3, [sp, #8]
 8005004:	2300      	movls	r3, #0
 8005006:	bf86      	itte	hi
 8005008:	f240 135d 	movwhi	r3, #349	; 0x15d
 800500c:	608b      	strhi	r3, [r1, #8]
 800500e:	9302      	strls	r3, [sp, #8]
 8005010:	680b      	ldr	r3, [r1, #0]
 8005012:	468b      	mov	fp, r1
 8005014:	2500      	movs	r5, #0
 8005016:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800501a:	f84b 3b1c 	str.w	r3, [fp], #28
 800501e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005022:	4680      	mov	r8, r0
 8005024:	460c      	mov	r4, r1
 8005026:	465e      	mov	r6, fp
 8005028:	46aa      	mov	sl, r5
 800502a:	46a9      	mov	r9, r5
 800502c:	9501      	str	r5, [sp, #4]
 800502e:	68a2      	ldr	r2, [r4, #8]
 8005030:	b152      	cbz	r2, 8005048 <_scanf_float+0x60>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b4e      	cmp	r3, #78	; 0x4e
 8005038:	d864      	bhi.n	8005104 <_scanf_float+0x11c>
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	d83c      	bhi.n	80050b8 <_scanf_float+0xd0>
 800503e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005042:	b2c8      	uxtb	r0, r1
 8005044:	280e      	cmp	r0, #14
 8005046:	d93a      	bls.n	80050be <_scanf_float+0xd6>
 8005048:	f1b9 0f00 	cmp.w	r9, #0
 800504c:	d003      	beq.n	8005056 <_scanf_float+0x6e>
 800504e:	6823      	ldr	r3, [r4, #0]
 8005050:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005054:	6023      	str	r3, [r4, #0]
 8005056:	f10a 3aff 	add.w	sl, sl, #4294967295
 800505a:	f1ba 0f01 	cmp.w	sl, #1
 800505e:	f200 8113 	bhi.w	8005288 <_scanf_float+0x2a0>
 8005062:	455e      	cmp	r6, fp
 8005064:	f200 8105 	bhi.w	8005272 <_scanf_float+0x28a>
 8005068:	2501      	movs	r5, #1
 800506a:	4628      	mov	r0, r5
 800506c:	b007      	add	sp, #28
 800506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005072:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005076:	2a0d      	cmp	r2, #13
 8005078:	d8e6      	bhi.n	8005048 <_scanf_float+0x60>
 800507a:	a101      	add	r1, pc, #4	; (adr r1, 8005080 <_scanf_float+0x98>)
 800507c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005080:	080051bf 	.word	0x080051bf
 8005084:	08005049 	.word	0x08005049
 8005088:	08005049 	.word	0x08005049
 800508c:	08005049 	.word	0x08005049
 8005090:	0800521f 	.word	0x0800521f
 8005094:	080051f7 	.word	0x080051f7
 8005098:	08005049 	.word	0x08005049
 800509c:	08005049 	.word	0x08005049
 80050a0:	080051cd 	.word	0x080051cd
 80050a4:	08005049 	.word	0x08005049
 80050a8:	08005049 	.word	0x08005049
 80050ac:	08005049 	.word	0x08005049
 80050b0:	08005049 	.word	0x08005049
 80050b4:	08005185 	.word	0x08005185
 80050b8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80050bc:	e7db      	b.n	8005076 <_scanf_float+0x8e>
 80050be:	290e      	cmp	r1, #14
 80050c0:	d8c2      	bhi.n	8005048 <_scanf_float+0x60>
 80050c2:	a001      	add	r0, pc, #4	; (adr r0, 80050c8 <_scanf_float+0xe0>)
 80050c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80050c8:	08005177 	.word	0x08005177
 80050cc:	08005049 	.word	0x08005049
 80050d0:	08005177 	.word	0x08005177
 80050d4:	0800520b 	.word	0x0800520b
 80050d8:	08005049 	.word	0x08005049
 80050dc:	08005125 	.word	0x08005125
 80050e0:	08005161 	.word	0x08005161
 80050e4:	08005161 	.word	0x08005161
 80050e8:	08005161 	.word	0x08005161
 80050ec:	08005161 	.word	0x08005161
 80050f0:	08005161 	.word	0x08005161
 80050f4:	08005161 	.word	0x08005161
 80050f8:	08005161 	.word	0x08005161
 80050fc:	08005161 	.word	0x08005161
 8005100:	08005161 	.word	0x08005161
 8005104:	2b6e      	cmp	r3, #110	; 0x6e
 8005106:	d809      	bhi.n	800511c <_scanf_float+0x134>
 8005108:	2b60      	cmp	r3, #96	; 0x60
 800510a:	d8b2      	bhi.n	8005072 <_scanf_float+0x8a>
 800510c:	2b54      	cmp	r3, #84	; 0x54
 800510e:	d077      	beq.n	8005200 <_scanf_float+0x218>
 8005110:	2b59      	cmp	r3, #89	; 0x59
 8005112:	d199      	bne.n	8005048 <_scanf_float+0x60>
 8005114:	2d07      	cmp	r5, #7
 8005116:	d197      	bne.n	8005048 <_scanf_float+0x60>
 8005118:	2508      	movs	r5, #8
 800511a:	e029      	b.n	8005170 <_scanf_float+0x188>
 800511c:	2b74      	cmp	r3, #116	; 0x74
 800511e:	d06f      	beq.n	8005200 <_scanf_float+0x218>
 8005120:	2b79      	cmp	r3, #121	; 0x79
 8005122:	e7f6      	b.n	8005112 <_scanf_float+0x12a>
 8005124:	6821      	ldr	r1, [r4, #0]
 8005126:	05c8      	lsls	r0, r1, #23
 8005128:	d51a      	bpl.n	8005160 <_scanf_float+0x178>
 800512a:	9b02      	ldr	r3, [sp, #8]
 800512c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005130:	6021      	str	r1, [r4, #0]
 8005132:	f109 0901 	add.w	r9, r9, #1
 8005136:	b11b      	cbz	r3, 8005140 <_scanf_float+0x158>
 8005138:	3b01      	subs	r3, #1
 800513a:	3201      	adds	r2, #1
 800513c:	9302      	str	r3, [sp, #8]
 800513e:	60a2      	str	r2, [r4, #8]
 8005140:	68a3      	ldr	r3, [r4, #8]
 8005142:	3b01      	subs	r3, #1
 8005144:	60a3      	str	r3, [r4, #8]
 8005146:	6923      	ldr	r3, [r4, #16]
 8005148:	3301      	adds	r3, #1
 800514a:	6123      	str	r3, [r4, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3b01      	subs	r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	607b      	str	r3, [r7, #4]
 8005154:	f340 8084 	ble.w	8005260 <_scanf_float+0x278>
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	3301      	adds	r3, #1
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	e766      	b.n	800502e <_scanf_float+0x46>
 8005160:	eb1a 0f05 	cmn.w	sl, r5
 8005164:	f47f af70 	bne.w	8005048 <_scanf_float+0x60>
 8005168:	6822      	ldr	r2, [r4, #0]
 800516a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800516e:	6022      	str	r2, [r4, #0]
 8005170:	f806 3b01 	strb.w	r3, [r6], #1
 8005174:	e7e4      	b.n	8005140 <_scanf_float+0x158>
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	0610      	lsls	r0, r2, #24
 800517a:	f57f af65 	bpl.w	8005048 <_scanf_float+0x60>
 800517e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005182:	e7f4      	b.n	800516e <_scanf_float+0x186>
 8005184:	f1ba 0f00 	cmp.w	sl, #0
 8005188:	d10e      	bne.n	80051a8 <_scanf_float+0x1c0>
 800518a:	f1b9 0f00 	cmp.w	r9, #0
 800518e:	d10e      	bne.n	80051ae <_scanf_float+0x1c6>
 8005190:	6822      	ldr	r2, [r4, #0]
 8005192:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005196:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800519a:	d108      	bne.n	80051ae <_scanf_float+0x1c6>
 800519c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051a0:	6022      	str	r2, [r4, #0]
 80051a2:	f04f 0a01 	mov.w	sl, #1
 80051a6:	e7e3      	b.n	8005170 <_scanf_float+0x188>
 80051a8:	f1ba 0f02 	cmp.w	sl, #2
 80051ac:	d055      	beq.n	800525a <_scanf_float+0x272>
 80051ae:	2d01      	cmp	r5, #1
 80051b0:	d002      	beq.n	80051b8 <_scanf_float+0x1d0>
 80051b2:	2d04      	cmp	r5, #4
 80051b4:	f47f af48 	bne.w	8005048 <_scanf_float+0x60>
 80051b8:	3501      	adds	r5, #1
 80051ba:	b2ed      	uxtb	r5, r5
 80051bc:	e7d8      	b.n	8005170 <_scanf_float+0x188>
 80051be:	f1ba 0f01 	cmp.w	sl, #1
 80051c2:	f47f af41 	bne.w	8005048 <_scanf_float+0x60>
 80051c6:	f04f 0a02 	mov.w	sl, #2
 80051ca:	e7d1      	b.n	8005170 <_scanf_float+0x188>
 80051cc:	b97d      	cbnz	r5, 80051ee <_scanf_float+0x206>
 80051ce:	f1b9 0f00 	cmp.w	r9, #0
 80051d2:	f47f af3c 	bne.w	800504e <_scanf_float+0x66>
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80051dc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80051e0:	f47f af39 	bne.w	8005056 <_scanf_float+0x6e>
 80051e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80051e8:	6022      	str	r2, [r4, #0]
 80051ea:	2501      	movs	r5, #1
 80051ec:	e7c0      	b.n	8005170 <_scanf_float+0x188>
 80051ee:	2d03      	cmp	r5, #3
 80051f0:	d0e2      	beq.n	80051b8 <_scanf_float+0x1d0>
 80051f2:	2d05      	cmp	r5, #5
 80051f4:	e7de      	b.n	80051b4 <_scanf_float+0x1cc>
 80051f6:	2d02      	cmp	r5, #2
 80051f8:	f47f af26 	bne.w	8005048 <_scanf_float+0x60>
 80051fc:	2503      	movs	r5, #3
 80051fe:	e7b7      	b.n	8005170 <_scanf_float+0x188>
 8005200:	2d06      	cmp	r5, #6
 8005202:	f47f af21 	bne.w	8005048 <_scanf_float+0x60>
 8005206:	2507      	movs	r5, #7
 8005208:	e7b2      	b.n	8005170 <_scanf_float+0x188>
 800520a:	6822      	ldr	r2, [r4, #0]
 800520c:	0591      	lsls	r1, r2, #22
 800520e:	f57f af1b 	bpl.w	8005048 <_scanf_float+0x60>
 8005212:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005216:	6022      	str	r2, [r4, #0]
 8005218:	f8cd 9004 	str.w	r9, [sp, #4]
 800521c:	e7a8      	b.n	8005170 <_scanf_float+0x188>
 800521e:	6822      	ldr	r2, [r4, #0]
 8005220:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005224:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005228:	d006      	beq.n	8005238 <_scanf_float+0x250>
 800522a:	0550      	lsls	r0, r2, #21
 800522c:	f57f af0c 	bpl.w	8005048 <_scanf_float+0x60>
 8005230:	f1b9 0f00 	cmp.w	r9, #0
 8005234:	f43f af0f 	beq.w	8005056 <_scanf_float+0x6e>
 8005238:	0591      	lsls	r1, r2, #22
 800523a:	bf58      	it	pl
 800523c:	9901      	ldrpl	r1, [sp, #4]
 800523e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005242:	bf58      	it	pl
 8005244:	eba9 0101 	subpl.w	r1, r9, r1
 8005248:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800524c:	bf58      	it	pl
 800524e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005252:	6022      	str	r2, [r4, #0]
 8005254:	f04f 0900 	mov.w	r9, #0
 8005258:	e78a      	b.n	8005170 <_scanf_float+0x188>
 800525a:	f04f 0a03 	mov.w	sl, #3
 800525e:	e787      	b.n	8005170 <_scanf_float+0x188>
 8005260:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005264:	4639      	mov	r1, r7
 8005266:	4640      	mov	r0, r8
 8005268:	4798      	blx	r3
 800526a:	2800      	cmp	r0, #0
 800526c:	f43f aedf 	beq.w	800502e <_scanf_float+0x46>
 8005270:	e6ea      	b.n	8005048 <_scanf_float+0x60>
 8005272:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005276:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800527a:	463a      	mov	r2, r7
 800527c:	4640      	mov	r0, r8
 800527e:	4798      	blx	r3
 8005280:	6923      	ldr	r3, [r4, #16]
 8005282:	3b01      	subs	r3, #1
 8005284:	6123      	str	r3, [r4, #16]
 8005286:	e6ec      	b.n	8005062 <_scanf_float+0x7a>
 8005288:	1e6b      	subs	r3, r5, #1
 800528a:	2b06      	cmp	r3, #6
 800528c:	d825      	bhi.n	80052da <_scanf_float+0x2f2>
 800528e:	2d02      	cmp	r5, #2
 8005290:	d836      	bhi.n	8005300 <_scanf_float+0x318>
 8005292:	455e      	cmp	r6, fp
 8005294:	f67f aee8 	bls.w	8005068 <_scanf_float+0x80>
 8005298:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800529c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052a0:	463a      	mov	r2, r7
 80052a2:	4640      	mov	r0, r8
 80052a4:	4798      	blx	r3
 80052a6:	6923      	ldr	r3, [r4, #16]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	6123      	str	r3, [r4, #16]
 80052ac:	e7f1      	b.n	8005292 <_scanf_float+0x2aa>
 80052ae:	9802      	ldr	r0, [sp, #8]
 80052b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80052b8:	9002      	str	r0, [sp, #8]
 80052ba:	463a      	mov	r2, r7
 80052bc:	4640      	mov	r0, r8
 80052be:	4798      	blx	r3
 80052c0:	6923      	ldr	r3, [r4, #16]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	6123      	str	r3, [r4, #16]
 80052c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80052ca:	fa5f fa8a 	uxtb.w	sl, sl
 80052ce:	f1ba 0f02 	cmp.w	sl, #2
 80052d2:	d1ec      	bne.n	80052ae <_scanf_float+0x2c6>
 80052d4:	3d03      	subs	r5, #3
 80052d6:	b2ed      	uxtb	r5, r5
 80052d8:	1b76      	subs	r6, r6, r5
 80052da:	6823      	ldr	r3, [r4, #0]
 80052dc:	05da      	lsls	r2, r3, #23
 80052de:	d52f      	bpl.n	8005340 <_scanf_float+0x358>
 80052e0:	055b      	lsls	r3, r3, #21
 80052e2:	d510      	bpl.n	8005306 <_scanf_float+0x31e>
 80052e4:	455e      	cmp	r6, fp
 80052e6:	f67f aebf 	bls.w	8005068 <_scanf_float+0x80>
 80052ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80052ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80052f2:	463a      	mov	r2, r7
 80052f4:	4640      	mov	r0, r8
 80052f6:	4798      	blx	r3
 80052f8:	6923      	ldr	r3, [r4, #16]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	6123      	str	r3, [r4, #16]
 80052fe:	e7f1      	b.n	80052e4 <_scanf_float+0x2fc>
 8005300:	46aa      	mov	sl, r5
 8005302:	9602      	str	r6, [sp, #8]
 8005304:	e7df      	b.n	80052c6 <_scanf_float+0x2de>
 8005306:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	2965      	cmp	r1, #101	; 0x65
 800530e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005312:	f106 35ff 	add.w	r5, r6, #4294967295
 8005316:	6123      	str	r3, [r4, #16]
 8005318:	d00c      	beq.n	8005334 <_scanf_float+0x34c>
 800531a:	2945      	cmp	r1, #69	; 0x45
 800531c:	d00a      	beq.n	8005334 <_scanf_float+0x34c>
 800531e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005322:	463a      	mov	r2, r7
 8005324:	4640      	mov	r0, r8
 8005326:	4798      	blx	r3
 8005328:	6923      	ldr	r3, [r4, #16]
 800532a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800532e:	3b01      	subs	r3, #1
 8005330:	1eb5      	subs	r5, r6, #2
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005338:	463a      	mov	r2, r7
 800533a:	4640      	mov	r0, r8
 800533c:	4798      	blx	r3
 800533e:	462e      	mov	r6, r5
 8005340:	6825      	ldr	r5, [r4, #0]
 8005342:	f015 0510 	ands.w	r5, r5, #16
 8005346:	d158      	bne.n	80053fa <_scanf_float+0x412>
 8005348:	7035      	strb	r5, [r6, #0]
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005350:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005354:	d11c      	bne.n	8005390 <_scanf_float+0x3a8>
 8005356:	9b01      	ldr	r3, [sp, #4]
 8005358:	454b      	cmp	r3, r9
 800535a:	eba3 0209 	sub.w	r2, r3, r9
 800535e:	d124      	bne.n	80053aa <_scanf_float+0x3c2>
 8005360:	2200      	movs	r2, #0
 8005362:	4659      	mov	r1, fp
 8005364:	4640      	mov	r0, r8
 8005366:	f002 fc2f 	bl	8007bc8 <_strtod_r>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	6821      	ldr	r1, [r4, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f011 0f02 	tst.w	r1, #2
 8005374:	ec57 6b10 	vmov	r6, r7, d0
 8005378:	f103 0204 	add.w	r2, r3, #4
 800537c:	d020      	beq.n	80053c0 <_scanf_float+0x3d8>
 800537e:	9903      	ldr	r1, [sp, #12]
 8005380:	600a      	str	r2, [r1, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	e9c3 6700 	strd	r6, r7, [r3]
 8005388:	68e3      	ldr	r3, [r4, #12]
 800538a:	3301      	adds	r3, #1
 800538c:	60e3      	str	r3, [r4, #12]
 800538e:	e66c      	b.n	800506a <_scanf_float+0x82>
 8005390:	9b04      	ldr	r3, [sp, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0e4      	beq.n	8005360 <_scanf_float+0x378>
 8005396:	9905      	ldr	r1, [sp, #20]
 8005398:	230a      	movs	r3, #10
 800539a:	462a      	mov	r2, r5
 800539c:	3101      	adds	r1, #1
 800539e:	4640      	mov	r0, r8
 80053a0:	f002 fc9a 	bl	8007cd8 <_strtol_r>
 80053a4:	9b04      	ldr	r3, [sp, #16]
 80053a6:	9e05      	ldr	r6, [sp, #20]
 80053a8:	1ac2      	subs	r2, r0, r3
 80053aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80053ae:	429e      	cmp	r6, r3
 80053b0:	bf28      	it	cs
 80053b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80053b6:	4912      	ldr	r1, [pc, #72]	; (8005400 <_scanf_float+0x418>)
 80053b8:	4630      	mov	r0, r6
 80053ba:	f000 f8e7 	bl	800558c <siprintf>
 80053be:	e7cf      	b.n	8005360 <_scanf_float+0x378>
 80053c0:	f011 0f04 	tst.w	r1, #4
 80053c4:	9903      	ldr	r1, [sp, #12]
 80053c6:	600a      	str	r2, [r1, #0]
 80053c8:	d1db      	bne.n	8005382 <_scanf_float+0x39a>
 80053ca:	f8d3 8000 	ldr.w	r8, [r3]
 80053ce:	ee10 2a10 	vmov	r2, s0
 80053d2:	ee10 0a10 	vmov	r0, s0
 80053d6:	463b      	mov	r3, r7
 80053d8:	4639      	mov	r1, r7
 80053da:	f7fb fbc7 	bl	8000b6c <__aeabi_dcmpun>
 80053de:	b128      	cbz	r0, 80053ec <_scanf_float+0x404>
 80053e0:	4808      	ldr	r0, [pc, #32]	; (8005404 <_scanf_float+0x41c>)
 80053e2:	f000 f9b7 	bl	8005754 <nanf>
 80053e6:	ed88 0a00 	vstr	s0, [r8]
 80053ea:	e7cd      	b.n	8005388 <_scanf_float+0x3a0>
 80053ec:	4630      	mov	r0, r6
 80053ee:	4639      	mov	r1, r7
 80053f0:	f7fb fc1a 	bl	8000c28 <__aeabi_d2f>
 80053f4:	f8c8 0000 	str.w	r0, [r8]
 80053f8:	e7c6      	b.n	8005388 <_scanf_float+0x3a0>
 80053fa:	2500      	movs	r5, #0
 80053fc:	e635      	b.n	800506a <_scanf_float+0x82>
 80053fe:	bf00      	nop
 8005400:	08008f2c 	.word	0x08008f2c
 8005404:	080092bd 	.word	0x080092bd

08005408 <std>:
 8005408:	2300      	movs	r3, #0
 800540a:	b510      	push	{r4, lr}
 800540c:	4604      	mov	r4, r0
 800540e:	e9c0 3300 	strd	r3, r3, [r0]
 8005412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005416:	6083      	str	r3, [r0, #8]
 8005418:	8181      	strh	r1, [r0, #12]
 800541a:	6643      	str	r3, [r0, #100]	; 0x64
 800541c:	81c2      	strh	r2, [r0, #14]
 800541e:	6183      	str	r3, [r0, #24]
 8005420:	4619      	mov	r1, r3
 8005422:	2208      	movs	r2, #8
 8005424:	305c      	adds	r0, #92	; 0x5c
 8005426:	f000 f914 	bl	8005652 <memset>
 800542a:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <std+0x58>)
 800542c:	6263      	str	r3, [r4, #36]	; 0x24
 800542e:	4b0d      	ldr	r3, [pc, #52]	; (8005464 <std+0x5c>)
 8005430:	62a3      	str	r3, [r4, #40]	; 0x28
 8005432:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <std+0x60>)
 8005434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005436:	4b0d      	ldr	r3, [pc, #52]	; (800546c <std+0x64>)
 8005438:	6323      	str	r3, [r4, #48]	; 0x30
 800543a:	4b0d      	ldr	r3, [pc, #52]	; (8005470 <std+0x68>)
 800543c:	6224      	str	r4, [r4, #32]
 800543e:	429c      	cmp	r4, r3
 8005440:	d006      	beq.n	8005450 <std+0x48>
 8005442:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005446:	4294      	cmp	r4, r2
 8005448:	d002      	beq.n	8005450 <std+0x48>
 800544a:	33d0      	adds	r3, #208	; 0xd0
 800544c:	429c      	cmp	r4, r3
 800544e:	d105      	bne.n	800545c <std+0x54>
 8005450:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005458:	f000 b978 	b.w	800574c <__retarget_lock_init_recursive>
 800545c:	bd10      	pop	{r4, pc}
 800545e:	bf00      	nop
 8005460:	080055cd 	.word	0x080055cd
 8005464:	080055ef 	.word	0x080055ef
 8005468:	08005627 	.word	0x08005627
 800546c:	0800564b 	.word	0x0800564b
 8005470:	20000444 	.word	0x20000444

08005474 <stdio_exit_handler>:
 8005474:	4a02      	ldr	r2, [pc, #8]	; (8005480 <stdio_exit_handler+0xc>)
 8005476:	4903      	ldr	r1, [pc, #12]	; (8005484 <stdio_exit_handler+0x10>)
 8005478:	4803      	ldr	r0, [pc, #12]	; (8005488 <stdio_exit_handler+0x14>)
 800547a:	f000 b869 	b.w	8005550 <_fwalk_sglue>
 800547e:	bf00      	nop
 8005480:	2000000c 	.word	0x2000000c
 8005484:	08008099 	.word	0x08008099
 8005488:	20000018 	.word	0x20000018

0800548c <cleanup_stdio>:
 800548c:	6841      	ldr	r1, [r0, #4]
 800548e:	4b0c      	ldr	r3, [pc, #48]	; (80054c0 <cleanup_stdio+0x34>)
 8005490:	4299      	cmp	r1, r3
 8005492:	b510      	push	{r4, lr}
 8005494:	4604      	mov	r4, r0
 8005496:	d001      	beq.n	800549c <cleanup_stdio+0x10>
 8005498:	f002 fdfe 	bl	8008098 <_fflush_r>
 800549c:	68a1      	ldr	r1, [r4, #8]
 800549e:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <cleanup_stdio+0x38>)
 80054a0:	4299      	cmp	r1, r3
 80054a2:	d002      	beq.n	80054aa <cleanup_stdio+0x1e>
 80054a4:	4620      	mov	r0, r4
 80054a6:	f002 fdf7 	bl	8008098 <_fflush_r>
 80054aa:	68e1      	ldr	r1, [r4, #12]
 80054ac:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <cleanup_stdio+0x3c>)
 80054ae:	4299      	cmp	r1, r3
 80054b0:	d004      	beq.n	80054bc <cleanup_stdio+0x30>
 80054b2:	4620      	mov	r0, r4
 80054b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054b8:	f002 bdee 	b.w	8008098 <_fflush_r>
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	bf00      	nop
 80054c0:	20000444 	.word	0x20000444
 80054c4:	200004ac 	.word	0x200004ac
 80054c8:	20000514 	.word	0x20000514

080054cc <global_stdio_init.part.0>:
 80054cc:	b510      	push	{r4, lr}
 80054ce:	4b0b      	ldr	r3, [pc, #44]	; (80054fc <global_stdio_init.part.0+0x30>)
 80054d0:	4c0b      	ldr	r4, [pc, #44]	; (8005500 <global_stdio_init.part.0+0x34>)
 80054d2:	4a0c      	ldr	r2, [pc, #48]	; (8005504 <global_stdio_init.part.0+0x38>)
 80054d4:	601a      	str	r2, [r3, #0]
 80054d6:	4620      	mov	r0, r4
 80054d8:	2200      	movs	r2, #0
 80054da:	2104      	movs	r1, #4
 80054dc:	f7ff ff94 	bl	8005408 <std>
 80054e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80054e4:	2201      	movs	r2, #1
 80054e6:	2109      	movs	r1, #9
 80054e8:	f7ff ff8e 	bl	8005408 <std>
 80054ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80054f0:	2202      	movs	r2, #2
 80054f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054f6:	2112      	movs	r1, #18
 80054f8:	f7ff bf86 	b.w	8005408 <std>
 80054fc:	2000057c 	.word	0x2000057c
 8005500:	20000444 	.word	0x20000444
 8005504:	08005475 	.word	0x08005475

08005508 <__sfp_lock_acquire>:
 8005508:	4801      	ldr	r0, [pc, #4]	; (8005510 <__sfp_lock_acquire+0x8>)
 800550a:	f000 b920 	b.w	800574e <__retarget_lock_acquire_recursive>
 800550e:	bf00      	nop
 8005510:	20000585 	.word	0x20000585

08005514 <__sfp_lock_release>:
 8005514:	4801      	ldr	r0, [pc, #4]	; (800551c <__sfp_lock_release+0x8>)
 8005516:	f000 b91b 	b.w	8005750 <__retarget_lock_release_recursive>
 800551a:	bf00      	nop
 800551c:	20000585 	.word	0x20000585

08005520 <__sinit>:
 8005520:	b510      	push	{r4, lr}
 8005522:	4604      	mov	r4, r0
 8005524:	f7ff fff0 	bl	8005508 <__sfp_lock_acquire>
 8005528:	6a23      	ldr	r3, [r4, #32]
 800552a:	b11b      	cbz	r3, 8005534 <__sinit+0x14>
 800552c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005530:	f7ff bff0 	b.w	8005514 <__sfp_lock_release>
 8005534:	4b04      	ldr	r3, [pc, #16]	; (8005548 <__sinit+0x28>)
 8005536:	6223      	str	r3, [r4, #32]
 8005538:	4b04      	ldr	r3, [pc, #16]	; (800554c <__sinit+0x2c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f5      	bne.n	800552c <__sinit+0xc>
 8005540:	f7ff ffc4 	bl	80054cc <global_stdio_init.part.0>
 8005544:	e7f2      	b.n	800552c <__sinit+0xc>
 8005546:	bf00      	nop
 8005548:	0800548d 	.word	0x0800548d
 800554c:	2000057c 	.word	0x2000057c

08005550 <_fwalk_sglue>:
 8005550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005554:	4607      	mov	r7, r0
 8005556:	4688      	mov	r8, r1
 8005558:	4614      	mov	r4, r2
 800555a:	2600      	movs	r6, #0
 800555c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005560:	f1b9 0901 	subs.w	r9, r9, #1
 8005564:	d505      	bpl.n	8005572 <_fwalk_sglue+0x22>
 8005566:	6824      	ldr	r4, [r4, #0]
 8005568:	2c00      	cmp	r4, #0
 800556a:	d1f7      	bne.n	800555c <_fwalk_sglue+0xc>
 800556c:	4630      	mov	r0, r6
 800556e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005572:	89ab      	ldrh	r3, [r5, #12]
 8005574:	2b01      	cmp	r3, #1
 8005576:	d907      	bls.n	8005588 <_fwalk_sglue+0x38>
 8005578:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800557c:	3301      	adds	r3, #1
 800557e:	d003      	beq.n	8005588 <_fwalk_sglue+0x38>
 8005580:	4629      	mov	r1, r5
 8005582:	4638      	mov	r0, r7
 8005584:	47c0      	blx	r8
 8005586:	4306      	orrs	r6, r0
 8005588:	3568      	adds	r5, #104	; 0x68
 800558a:	e7e9      	b.n	8005560 <_fwalk_sglue+0x10>

0800558c <siprintf>:
 800558c:	b40e      	push	{r1, r2, r3}
 800558e:	b500      	push	{lr}
 8005590:	b09c      	sub	sp, #112	; 0x70
 8005592:	ab1d      	add	r3, sp, #116	; 0x74
 8005594:	9002      	str	r0, [sp, #8]
 8005596:	9006      	str	r0, [sp, #24]
 8005598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800559c:	4809      	ldr	r0, [pc, #36]	; (80055c4 <siprintf+0x38>)
 800559e:	9107      	str	r1, [sp, #28]
 80055a0:	9104      	str	r1, [sp, #16]
 80055a2:	4909      	ldr	r1, [pc, #36]	; (80055c8 <siprintf+0x3c>)
 80055a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a8:	9105      	str	r1, [sp, #20]
 80055aa:	6800      	ldr	r0, [r0, #0]
 80055ac:	9301      	str	r3, [sp, #4]
 80055ae:	a902      	add	r1, sp, #8
 80055b0:	f002 fbee 	bl	8007d90 <_svfiprintf_r>
 80055b4:	9b02      	ldr	r3, [sp, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	b01c      	add	sp, #112	; 0x70
 80055bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c0:	b003      	add	sp, #12
 80055c2:	4770      	bx	lr
 80055c4:	20000064 	.word	0x20000064
 80055c8:	ffff0208 	.word	0xffff0208

080055cc <__sread>:
 80055cc:	b510      	push	{r4, lr}
 80055ce:	460c      	mov	r4, r1
 80055d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d4:	f000 f86c 	bl	80056b0 <_read_r>
 80055d8:	2800      	cmp	r0, #0
 80055da:	bfab      	itete	ge
 80055dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055de:	89a3      	ldrhlt	r3, [r4, #12]
 80055e0:	181b      	addge	r3, r3, r0
 80055e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055e6:	bfac      	ite	ge
 80055e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80055ea:	81a3      	strhlt	r3, [r4, #12]
 80055ec:	bd10      	pop	{r4, pc}

080055ee <__swrite>:
 80055ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f2:	461f      	mov	r7, r3
 80055f4:	898b      	ldrh	r3, [r1, #12]
 80055f6:	05db      	lsls	r3, r3, #23
 80055f8:	4605      	mov	r5, r0
 80055fa:	460c      	mov	r4, r1
 80055fc:	4616      	mov	r6, r2
 80055fe:	d505      	bpl.n	800560c <__swrite+0x1e>
 8005600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005604:	2302      	movs	r3, #2
 8005606:	2200      	movs	r2, #0
 8005608:	f000 f840 	bl	800568c <_lseek_r>
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	4632      	mov	r2, r6
 800561a:	463b      	mov	r3, r7
 800561c:	4628      	mov	r0, r5
 800561e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005622:	f000 b857 	b.w	80056d4 <_write_r>

08005626 <__sseek>:
 8005626:	b510      	push	{r4, lr}
 8005628:	460c      	mov	r4, r1
 800562a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562e:	f000 f82d 	bl	800568c <_lseek_r>
 8005632:	1c43      	adds	r3, r0, #1
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	bf15      	itete	ne
 8005638:	6560      	strne	r0, [r4, #84]	; 0x54
 800563a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800563e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005642:	81a3      	strheq	r3, [r4, #12]
 8005644:	bf18      	it	ne
 8005646:	81a3      	strhne	r3, [r4, #12]
 8005648:	bd10      	pop	{r4, pc}

0800564a <__sclose>:
 800564a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564e:	f000 b80d 	b.w	800566c <_close_r>

08005652 <memset>:
 8005652:	4402      	add	r2, r0
 8005654:	4603      	mov	r3, r0
 8005656:	4293      	cmp	r3, r2
 8005658:	d100      	bne.n	800565c <memset+0xa>
 800565a:	4770      	bx	lr
 800565c:	f803 1b01 	strb.w	r1, [r3], #1
 8005660:	e7f9      	b.n	8005656 <memset+0x4>
	...

08005664 <_localeconv_r>:
 8005664:	4800      	ldr	r0, [pc, #0]	; (8005668 <_localeconv_r+0x4>)
 8005666:	4770      	bx	lr
 8005668:	20000158 	.word	0x20000158

0800566c <_close_r>:
 800566c:	b538      	push	{r3, r4, r5, lr}
 800566e:	4d06      	ldr	r5, [pc, #24]	; (8005688 <_close_r+0x1c>)
 8005670:	2300      	movs	r3, #0
 8005672:	4604      	mov	r4, r0
 8005674:	4608      	mov	r0, r1
 8005676:	602b      	str	r3, [r5, #0]
 8005678:	f7fc fb47 	bl	8001d0a <_close>
 800567c:	1c43      	adds	r3, r0, #1
 800567e:	d102      	bne.n	8005686 <_close_r+0x1a>
 8005680:	682b      	ldr	r3, [r5, #0]
 8005682:	b103      	cbz	r3, 8005686 <_close_r+0x1a>
 8005684:	6023      	str	r3, [r4, #0]
 8005686:	bd38      	pop	{r3, r4, r5, pc}
 8005688:	20000580 	.word	0x20000580

0800568c <_lseek_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d07      	ldr	r5, [pc, #28]	; (80056ac <_lseek_r+0x20>)
 8005690:	4604      	mov	r4, r0
 8005692:	4608      	mov	r0, r1
 8005694:	4611      	mov	r1, r2
 8005696:	2200      	movs	r2, #0
 8005698:	602a      	str	r2, [r5, #0]
 800569a:	461a      	mov	r2, r3
 800569c:	f7fc fb5c 	bl	8001d58 <_lseek>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_lseek_r+0x1e>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_lseek_r+0x1e>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	20000580 	.word	0x20000580

080056b0 <_read_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	4d07      	ldr	r5, [pc, #28]	; (80056d0 <_read_r+0x20>)
 80056b4:	4604      	mov	r4, r0
 80056b6:	4608      	mov	r0, r1
 80056b8:	4611      	mov	r1, r2
 80056ba:	2200      	movs	r2, #0
 80056bc:	602a      	str	r2, [r5, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	f7fc faea 	bl	8001c98 <_read>
 80056c4:	1c43      	adds	r3, r0, #1
 80056c6:	d102      	bne.n	80056ce <_read_r+0x1e>
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	b103      	cbz	r3, 80056ce <_read_r+0x1e>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	bd38      	pop	{r3, r4, r5, pc}
 80056d0:	20000580 	.word	0x20000580

080056d4 <_write_r>:
 80056d4:	b538      	push	{r3, r4, r5, lr}
 80056d6:	4d07      	ldr	r5, [pc, #28]	; (80056f4 <_write_r+0x20>)
 80056d8:	4604      	mov	r4, r0
 80056da:	4608      	mov	r0, r1
 80056dc:	4611      	mov	r1, r2
 80056de:	2200      	movs	r2, #0
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	461a      	mov	r2, r3
 80056e4:	f7fc faf5 	bl	8001cd2 <_write>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d102      	bne.n	80056f2 <_write_r+0x1e>
 80056ec:	682b      	ldr	r3, [r5, #0]
 80056ee:	b103      	cbz	r3, 80056f2 <_write_r+0x1e>
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd38      	pop	{r3, r4, r5, pc}
 80056f4:	20000580 	.word	0x20000580

080056f8 <__errno>:
 80056f8:	4b01      	ldr	r3, [pc, #4]	; (8005700 <__errno+0x8>)
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20000064 	.word	0x20000064

08005704 <__libc_init_array>:
 8005704:	b570      	push	{r4, r5, r6, lr}
 8005706:	4d0d      	ldr	r5, [pc, #52]	; (800573c <__libc_init_array+0x38>)
 8005708:	4c0d      	ldr	r4, [pc, #52]	; (8005740 <__libc_init_array+0x3c>)
 800570a:	1b64      	subs	r4, r4, r5
 800570c:	10a4      	asrs	r4, r4, #2
 800570e:	2600      	movs	r6, #0
 8005710:	42a6      	cmp	r6, r4
 8005712:	d109      	bne.n	8005728 <__libc_init_array+0x24>
 8005714:	4d0b      	ldr	r5, [pc, #44]	; (8005744 <__libc_init_array+0x40>)
 8005716:	4c0c      	ldr	r4, [pc, #48]	; (8005748 <__libc_init_array+0x44>)
 8005718:	f003 fbd6 	bl	8008ec8 <_init>
 800571c:	1b64      	subs	r4, r4, r5
 800571e:	10a4      	asrs	r4, r4, #2
 8005720:	2600      	movs	r6, #0
 8005722:	42a6      	cmp	r6, r4
 8005724:	d105      	bne.n	8005732 <__libc_init_array+0x2e>
 8005726:	bd70      	pop	{r4, r5, r6, pc}
 8005728:	f855 3b04 	ldr.w	r3, [r5], #4
 800572c:	4798      	blx	r3
 800572e:	3601      	adds	r6, #1
 8005730:	e7ee      	b.n	8005710 <__libc_init_array+0xc>
 8005732:	f855 3b04 	ldr.w	r3, [r5], #4
 8005736:	4798      	blx	r3
 8005738:	3601      	adds	r6, #1
 800573a:	e7f2      	b.n	8005722 <__libc_init_array+0x1e>
 800573c:	08009328 	.word	0x08009328
 8005740:	08009328 	.word	0x08009328
 8005744:	08009328 	.word	0x08009328
 8005748:	0800932c 	.word	0x0800932c

0800574c <__retarget_lock_init_recursive>:
 800574c:	4770      	bx	lr

0800574e <__retarget_lock_acquire_recursive>:
 800574e:	4770      	bx	lr

08005750 <__retarget_lock_release_recursive>:
 8005750:	4770      	bx	lr
	...

08005754 <nanf>:
 8005754:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800575c <nanf+0x8>
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	7fc00000 	.word	0x7fc00000

08005760 <quorem>:
 8005760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	6903      	ldr	r3, [r0, #16]
 8005766:	690c      	ldr	r4, [r1, #16]
 8005768:	42a3      	cmp	r3, r4
 800576a:	4607      	mov	r7, r0
 800576c:	db7e      	blt.n	800586c <quorem+0x10c>
 800576e:	3c01      	subs	r4, #1
 8005770:	f101 0814 	add.w	r8, r1, #20
 8005774:	f100 0514 	add.w	r5, r0, #20
 8005778:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005782:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005786:	3301      	adds	r3, #1
 8005788:	429a      	cmp	r2, r3
 800578a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800578e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005792:	fbb2 f6f3 	udiv	r6, r2, r3
 8005796:	d331      	bcc.n	80057fc <quorem+0x9c>
 8005798:	f04f 0e00 	mov.w	lr, #0
 800579c:	4640      	mov	r0, r8
 800579e:	46ac      	mov	ip, r5
 80057a0:	46f2      	mov	sl, lr
 80057a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80057a6:	b293      	uxth	r3, r2
 80057a8:	fb06 e303 	mla	r3, r6, r3, lr
 80057ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057b0:	0c1a      	lsrs	r2, r3, #16
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	ebaa 0303 	sub.w	r3, sl, r3
 80057b8:	f8dc a000 	ldr.w	sl, [ip]
 80057bc:	fa13 f38a 	uxtah	r3, r3, sl
 80057c0:	fb06 220e 	mla	r2, r6, lr, r2
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	9b00      	ldr	r3, [sp, #0]
 80057c8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80057cc:	b292      	uxth	r2, r2
 80057ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80057d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057d6:	f8bd 3000 	ldrh.w	r3, [sp]
 80057da:	4581      	cmp	r9, r0
 80057dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057e0:	f84c 3b04 	str.w	r3, [ip], #4
 80057e4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80057e8:	d2db      	bcs.n	80057a2 <quorem+0x42>
 80057ea:	f855 300b 	ldr.w	r3, [r5, fp]
 80057ee:	b92b      	cbnz	r3, 80057fc <quorem+0x9c>
 80057f0:	9b01      	ldr	r3, [sp, #4]
 80057f2:	3b04      	subs	r3, #4
 80057f4:	429d      	cmp	r5, r3
 80057f6:	461a      	mov	r2, r3
 80057f8:	d32c      	bcc.n	8005854 <quorem+0xf4>
 80057fa:	613c      	str	r4, [r7, #16]
 80057fc:	4638      	mov	r0, r7
 80057fe:	f001 f9ef 	bl	8006be0 <__mcmp>
 8005802:	2800      	cmp	r0, #0
 8005804:	db22      	blt.n	800584c <quorem+0xec>
 8005806:	3601      	adds	r6, #1
 8005808:	4629      	mov	r1, r5
 800580a:	2000      	movs	r0, #0
 800580c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005810:	f8d1 c000 	ldr.w	ip, [r1]
 8005814:	b293      	uxth	r3, r2
 8005816:	1ac3      	subs	r3, r0, r3
 8005818:	0c12      	lsrs	r2, r2, #16
 800581a:	fa13 f38c 	uxtah	r3, r3, ip
 800581e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005822:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005826:	b29b      	uxth	r3, r3
 8005828:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800582c:	45c1      	cmp	r9, r8
 800582e:	f841 3b04 	str.w	r3, [r1], #4
 8005832:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005836:	d2e9      	bcs.n	800580c <quorem+0xac>
 8005838:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800583c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005840:	b922      	cbnz	r2, 800584c <quorem+0xec>
 8005842:	3b04      	subs	r3, #4
 8005844:	429d      	cmp	r5, r3
 8005846:	461a      	mov	r2, r3
 8005848:	d30a      	bcc.n	8005860 <quorem+0x100>
 800584a:	613c      	str	r4, [r7, #16]
 800584c:	4630      	mov	r0, r6
 800584e:	b003      	add	sp, #12
 8005850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005854:	6812      	ldr	r2, [r2, #0]
 8005856:	3b04      	subs	r3, #4
 8005858:	2a00      	cmp	r2, #0
 800585a:	d1ce      	bne.n	80057fa <quorem+0x9a>
 800585c:	3c01      	subs	r4, #1
 800585e:	e7c9      	b.n	80057f4 <quorem+0x94>
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	3b04      	subs	r3, #4
 8005864:	2a00      	cmp	r2, #0
 8005866:	d1f0      	bne.n	800584a <quorem+0xea>
 8005868:	3c01      	subs	r4, #1
 800586a:	e7eb      	b.n	8005844 <quorem+0xe4>
 800586c:	2000      	movs	r0, #0
 800586e:	e7ee      	b.n	800584e <quorem+0xee>

08005870 <_dtoa_r>:
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	ed2d 8b04 	vpush	{d8-d9}
 8005878:	69c5      	ldr	r5, [r0, #28]
 800587a:	b093      	sub	sp, #76	; 0x4c
 800587c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005880:	ec57 6b10 	vmov	r6, r7, d0
 8005884:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005888:	9107      	str	r1, [sp, #28]
 800588a:	4604      	mov	r4, r0
 800588c:	920a      	str	r2, [sp, #40]	; 0x28
 800588e:	930d      	str	r3, [sp, #52]	; 0x34
 8005890:	b975      	cbnz	r5, 80058b0 <_dtoa_r+0x40>
 8005892:	2010      	movs	r0, #16
 8005894:	f000 fe2a 	bl	80064ec <malloc>
 8005898:	4602      	mov	r2, r0
 800589a:	61e0      	str	r0, [r4, #28]
 800589c:	b920      	cbnz	r0, 80058a8 <_dtoa_r+0x38>
 800589e:	4bae      	ldr	r3, [pc, #696]	; (8005b58 <_dtoa_r+0x2e8>)
 80058a0:	21ef      	movs	r1, #239	; 0xef
 80058a2:	48ae      	ldr	r0, [pc, #696]	; (8005b5c <_dtoa_r+0x2ec>)
 80058a4:	f002 fc74 	bl	8008190 <__assert_func>
 80058a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058ac:	6005      	str	r5, [r0, #0]
 80058ae:	60c5      	str	r5, [r0, #12]
 80058b0:	69e3      	ldr	r3, [r4, #28]
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	b151      	cbz	r1, 80058cc <_dtoa_r+0x5c>
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	604a      	str	r2, [r1, #4]
 80058ba:	2301      	movs	r3, #1
 80058bc:	4093      	lsls	r3, r2
 80058be:	608b      	str	r3, [r1, #8]
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 ff07 	bl	80066d4 <_Bfree>
 80058c6:	69e3      	ldr	r3, [r4, #28]
 80058c8:	2200      	movs	r2, #0
 80058ca:	601a      	str	r2, [r3, #0]
 80058cc:	1e3b      	subs	r3, r7, #0
 80058ce:	bfbb      	ittet	lt
 80058d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80058d4:	9303      	strlt	r3, [sp, #12]
 80058d6:	2300      	movge	r3, #0
 80058d8:	2201      	movlt	r2, #1
 80058da:	bfac      	ite	ge
 80058dc:	f8c8 3000 	strge.w	r3, [r8]
 80058e0:	f8c8 2000 	strlt.w	r2, [r8]
 80058e4:	4b9e      	ldr	r3, [pc, #632]	; (8005b60 <_dtoa_r+0x2f0>)
 80058e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80058ea:	ea33 0308 	bics.w	r3, r3, r8
 80058ee:	d11b      	bne.n	8005928 <_dtoa_r+0xb8>
 80058f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80058f2:	f242 730f 	movw	r3, #9999	; 0x270f
 80058f6:	6013      	str	r3, [r2, #0]
 80058f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80058fc:	4333      	orrs	r3, r6
 80058fe:	f000 8593 	beq.w	8006428 <_dtoa_r+0xbb8>
 8005902:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005904:	b963      	cbnz	r3, 8005920 <_dtoa_r+0xb0>
 8005906:	4b97      	ldr	r3, [pc, #604]	; (8005b64 <_dtoa_r+0x2f4>)
 8005908:	e027      	b.n	800595a <_dtoa_r+0xea>
 800590a:	4b97      	ldr	r3, [pc, #604]	; (8005b68 <_dtoa_r+0x2f8>)
 800590c:	9300      	str	r3, [sp, #0]
 800590e:	3308      	adds	r3, #8
 8005910:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	9800      	ldr	r0, [sp, #0]
 8005916:	b013      	add	sp, #76	; 0x4c
 8005918:	ecbd 8b04 	vpop	{d8-d9}
 800591c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005920:	4b90      	ldr	r3, [pc, #576]	; (8005b64 <_dtoa_r+0x2f4>)
 8005922:	9300      	str	r3, [sp, #0]
 8005924:	3303      	adds	r3, #3
 8005926:	e7f3      	b.n	8005910 <_dtoa_r+0xa0>
 8005928:	ed9d 7b02 	vldr	d7, [sp, #8]
 800592c:	2200      	movs	r2, #0
 800592e:	ec51 0b17 	vmov	r0, r1, d7
 8005932:	eeb0 8a47 	vmov.f32	s16, s14
 8005936:	eef0 8a67 	vmov.f32	s17, s15
 800593a:	2300      	movs	r3, #0
 800593c:	f7fb f8e4 	bl	8000b08 <__aeabi_dcmpeq>
 8005940:	4681      	mov	r9, r0
 8005942:	b160      	cbz	r0, 800595e <_dtoa_r+0xee>
 8005944:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005946:	2301      	movs	r3, #1
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8568 	beq.w	8006422 <_dtoa_r+0xbb2>
 8005952:	4b86      	ldr	r3, [pc, #536]	; (8005b6c <_dtoa_r+0x2fc>)
 8005954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005956:	6013      	str	r3, [r2, #0]
 8005958:	3b01      	subs	r3, #1
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	e7da      	b.n	8005914 <_dtoa_r+0xa4>
 800595e:	aa10      	add	r2, sp, #64	; 0x40
 8005960:	a911      	add	r1, sp, #68	; 0x44
 8005962:	4620      	mov	r0, r4
 8005964:	eeb0 0a48 	vmov.f32	s0, s16
 8005968:	eef0 0a68 	vmov.f32	s1, s17
 800596c:	f001 fa4e 	bl	8006e0c <__d2b>
 8005970:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005974:	4682      	mov	sl, r0
 8005976:	2d00      	cmp	r5, #0
 8005978:	d07f      	beq.n	8005a7a <_dtoa_r+0x20a>
 800597a:	ee18 3a90 	vmov	r3, s17
 800597e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005982:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005986:	ec51 0b18 	vmov	r0, r1, d8
 800598a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800598e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005992:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005996:	4619      	mov	r1, r3
 8005998:	2200      	movs	r2, #0
 800599a:	4b75      	ldr	r3, [pc, #468]	; (8005b70 <_dtoa_r+0x300>)
 800599c:	f7fa fc94 	bl	80002c8 <__aeabi_dsub>
 80059a0:	a367      	add	r3, pc, #412	; (adr r3, 8005b40 <_dtoa_r+0x2d0>)
 80059a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a6:	f7fa fe47 	bl	8000638 <__aeabi_dmul>
 80059aa:	a367      	add	r3, pc, #412	; (adr r3, 8005b48 <_dtoa_r+0x2d8>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fc8c 	bl	80002cc <__adddf3>
 80059b4:	4606      	mov	r6, r0
 80059b6:	4628      	mov	r0, r5
 80059b8:	460f      	mov	r7, r1
 80059ba:	f7fa fdd3 	bl	8000564 <__aeabi_i2d>
 80059be:	a364      	add	r3, pc, #400	; (adr r3, 8005b50 <_dtoa_r+0x2e0>)
 80059c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c4:	f7fa fe38 	bl	8000638 <__aeabi_dmul>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4630      	mov	r0, r6
 80059ce:	4639      	mov	r1, r7
 80059d0:	f7fa fc7c 	bl	80002cc <__adddf3>
 80059d4:	4606      	mov	r6, r0
 80059d6:	460f      	mov	r7, r1
 80059d8:	f7fb f8de 	bl	8000b98 <__aeabi_d2iz>
 80059dc:	2200      	movs	r2, #0
 80059de:	4683      	mov	fp, r0
 80059e0:	2300      	movs	r3, #0
 80059e2:	4630      	mov	r0, r6
 80059e4:	4639      	mov	r1, r7
 80059e6:	f7fb f899 	bl	8000b1c <__aeabi_dcmplt>
 80059ea:	b148      	cbz	r0, 8005a00 <_dtoa_r+0x190>
 80059ec:	4658      	mov	r0, fp
 80059ee:	f7fa fdb9 	bl	8000564 <__aeabi_i2d>
 80059f2:	4632      	mov	r2, r6
 80059f4:	463b      	mov	r3, r7
 80059f6:	f7fb f887 	bl	8000b08 <__aeabi_dcmpeq>
 80059fa:	b908      	cbnz	r0, 8005a00 <_dtoa_r+0x190>
 80059fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a00:	f1bb 0f16 	cmp.w	fp, #22
 8005a04:	d857      	bhi.n	8005ab6 <_dtoa_r+0x246>
 8005a06:	4b5b      	ldr	r3, [pc, #364]	; (8005b74 <_dtoa_r+0x304>)
 8005a08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	ec51 0b18 	vmov	r0, r1, d8
 8005a14:	f7fb f882 	bl	8000b1c <__aeabi_dcmplt>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d04e      	beq.n	8005aba <_dtoa_r+0x24a>
 8005a1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a20:	2300      	movs	r3, #0
 8005a22:	930c      	str	r3, [sp, #48]	; 0x30
 8005a24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a26:	1b5b      	subs	r3, r3, r5
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	bf45      	ittet	mi
 8005a2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005a30:	9305      	strmi	r3, [sp, #20]
 8005a32:	2300      	movpl	r3, #0
 8005a34:	2300      	movmi	r3, #0
 8005a36:	9206      	str	r2, [sp, #24]
 8005a38:	bf54      	ite	pl
 8005a3a:	9305      	strpl	r3, [sp, #20]
 8005a3c:	9306      	strmi	r3, [sp, #24]
 8005a3e:	f1bb 0f00 	cmp.w	fp, #0
 8005a42:	db3c      	blt.n	8005abe <_dtoa_r+0x24e>
 8005a44:	9b06      	ldr	r3, [sp, #24]
 8005a46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005a4a:	445b      	add	r3, fp
 8005a4c:	9306      	str	r3, [sp, #24]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	9308      	str	r3, [sp, #32]
 8005a52:	9b07      	ldr	r3, [sp, #28]
 8005a54:	2b09      	cmp	r3, #9
 8005a56:	d868      	bhi.n	8005b2a <_dtoa_r+0x2ba>
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	bfc4      	itt	gt
 8005a5c:	3b04      	subgt	r3, #4
 8005a5e:	9307      	strgt	r3, [sp, #28]
 8005a60:	9b07      	ldr	r3, [sp, #28]
 8005a62:	f1a3 0302 	sub.w	r3, r3, #2
 8005a66:	bfcc      	ite	gt
 8005a68:	2500      	movgt	r5, #0
 8005a6a:	2501      	movle	r5, #1
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	f200 8085 	bhi.w	8005b7c <_dtoa_r+0x30c>
 8005a72:	e8df f003 	tbb	[pc, r3]
 8005a76:	3b2e      	.short	0x3b2e
 8005a78:	5839      	.short	0x5839
 8005a7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005a7e:	441d      	add	r5, r3
 8005a80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	bfc1      	itttt	gt
 8005a88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005a8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005a90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005a94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005a98:	bfd6      	itet	le
 8005a9a:	f1c3 0320 	rsble	r3, r3, #32
 8005a9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005aa2:	fa06 f003 	lslle.w	r0, r6, r3
 8005aa6:	f7fa fd4d 	bl	8000544 <__aeabi_ui2d>
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005ab0:	3d01      	subs	r5, #1
 8005ab2:	920e      	str	r2, [sp, #56]	; 0x38
 8005ab4:	e76f      	b.n	8005996 <_dtoa_r+0x126>
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e7b3      	b.n	8005a22 <_dtoa_r+0x1b2>
 8005aba:	900c      	str	r0, [sp, #48]	; 0x30
 8005abc:	e7b2      	b.n	8005a24 <_dtoa_r+0x1b4>
 8005abe:	9b05      	ldr	r3, [sp, #20]
 8005ac0:	eba3 030b 	sub.w	r3, r3, fp
 8005ac4:	9305      	str	r3, [sp, #20]
 8005ac6:	f1cb 0300 	rsb	r3, fp, #0
 8005aca:	9308      	str	r3, [sp, #32]
 8005acc:	2300      	movs	r3, #0
 8005ace:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ad0:	e7bf      	b.n	8005a52 <_dtoa_r+0x1e2>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	dc52      	bgt.n	8005b82 <_dtoa_r+0x312>
 8005adc:	2301      	movs	r3, #1
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	9304      	str	r3, [sp, #16]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	920a      	str	r2, [sp, #40]	; 0x28
 8005ae6:	e00b      	b.n	8005b00 <_dtoa_r+0x290>
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e7f3      	b.n	8005ad4 <_dtoa_r+0x264>
 8005aec:	2300      	movs	r3, #0
 8005aee:	9309      	str	r3, [sp, #36]	; 0x24
 8005af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005af2:	445b      	add	r3, fp
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	3301      	adds	r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	9304      	str	r3, [sp, #16]
 8005afc:	bfb8      	it	lt
 8005afe:	2301      	movlt	r3, #1
 8005b00:	69e0      	ldr	r0, [r4, #28]
 8005b02:	2100      	movs	r1, #0
 8005b04:	2204      	movs	r2, #4
 8005b06:	f102 0614 	add.w	r6, r2, #20
 8005b0a:	429e      	cmp	r6, r3
 8005b0c:	d93d      	bls.n	8005b8a <_dtoa_r+0x31a>
 8005b0e:	6041      	str	r1, [r0, #4]
 8005b10:	4620      	mov	r0, r4
 8005b12:	f000 fd9f 	bl	8006654 <_Balloc>
 8005b16:	9000      	str	r0, [sp, #0]
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d139      	bne.n	8005b90 <_dtoa_r+0x320>
 8005b1c:	4b16      	ldr	r3, [pc, #88]	; (8005b78 <_dtoa_r+0x308>)
 8005b1e:	4602      	mov	r2, r0
 8005b20:	f240 11af 	movw	r1, #431	; 0x1af
 8005b24:	e6bd      	b.n	80058a2 <_dtoa_r+0x32>
 8005b26:	2301      	movs	r3, #1
 8005b28:	e7e1      	b.n	8005aee <_dtoa_r+0x27e>
 8005b2a:	2501      	movs	r5, #1
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	9307      	str	r3, [sp, #28]
 8005b30:	9509      	str	r5, [sp, #36]	; 0x24
 8005b32:	f04f 33ff 	mov.w	r3, #4294967295
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2312      	movs	r3, #18
 8005b3e:	e7d1      	b.n	8005ae4 <_dtoa_r+0x274>
 8005b40:	636f4361 	.word	0x636f4361
 8005b44:	3fd287a7 	.word	0x3fd287a7
 8005b48:	8b60c8b3 	.word	0x8b60c8b3
 8005b4c:	3fc68a28 	.word	0x3fc68a28
 8005b50:	509f79fb 	.word	0x509f79fb
 8005b54:	3fd34413 	.word	0x3fd34413
 8005b58:	08008f3e 	.word	0x08008f3e
 8005b5c:	08008f55 	.word	0x08008f55
 8005b60:	7ff00000 	.word	0x7ff00000
 8005b64:	08008f3a 	.word	0x08008f3a
 8005b68:	08008f31 	.word	0x08008f31
 8005b6c:	08008f09 	.word	0x08008f09
 8005b70:	3ff80000 	.word	0x3ff80000
 8005b74:	08009040 	.word	0x08009040
 8005b78:	08008fad 	.word	0x08008fad
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b80:	e7d7      	b.n	8005b32 <_dtoa_r+0x2c2>
 8005b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	9304      	str	r3, [sp, #16]
 8005b88:	e7ba      	b.n	8005b00 <_dtoa_r+0x290>
 8005b8a:	3101      	adds	r1, #1
 8005b8c:	0052      	lsls	r2, r2, #1
 8005b8e:	e7ba      	b.n	8005b06 <_dtoa_r+0x296>
 8005b90:	69e3      	ldr	r3, [r4, #28]
 8005b92:	9a00      	ldr	r2, [sp, #0]
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	9b04      	ldr	r3, [sp, #16]
 8005b98:	2b0e      	cmp	r3, #14
 8005b9a:	f200 80a8 	bhi.w	8005cee <_dtoa_r+0x47e>
 8005b9e:	2d00      	cmp	r5, #0
 8005ba0:	f000 80a5 	beq.w	8005cee <_dtoa_r+0x47e>
 8005ba4:	f1bb 0f00 	cmp.w	fp, #0
 8005ba8:	dd38      	ble.n	8005c1c <_dtoa_r+0x3ac>
 8005baa:	4bc0      	ldr	r3, [pc, #768]	; (8005eac <_dtoa_r+0x63c>)
 8005bac:	f00b 020f 	and.w	r2, fp, #15
 8005bb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005bb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005bbc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005bc0:	d019      	beq.n	8005bf6 <_dtoa_r+0x386>
 8005bc2:	4bbb      	ldr	r3, [pc, #748]	; (8005eb0 <_dtoa_r+0x640>)
 8005bc4:	ec51 0b18 	vmov	r0, r1, d8
 8005bc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005bcc:	f7fa fe5e 	bl	800088c <__aeabi_ddiv>
 8005bd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bd4:	f008 080f 	and.w	r8, r8, #15
 8005bd8:	2503      	movs	r5, #3
 8005bda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005eb0 <_dtoa_r+0x640>
 8005bde:	f1b8 0f00 	cmp.w	r8, #0
 8005be2:	d10a      	bne.n	8005bfa <_dtoa_r+0x38a>
 8005be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be8:	4632      	mov	r2, r6
 8005bea:	463b      	mov	r3, r7
 8005bec:	f7fa fe4e 	bl	800088c <__aeabi_ddiv>
 8005bf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bf4:	e02b      	b.n	8005c4e <_dtoa_r+0x3de>
 8005bf6:	2502      	movs	r5, #2
 8005bf8:	e7ef      	b.n	8005bda <_dtoa_r+0x36a>
 8005bfa:	f018 0f01 	tst.w	r8, #1
 8005bfe:	d008      	beq.n	8005c12 <_dtoa_r+0x3a2>
 8005c00:	4630      	mov	r0, r6
 8005c02:	4639      	mov	r1, r7
 8005c04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005c08:	f7fa fd16 	bl	8000638 <__aeabi_dmul>
 8005c0c:	3501      	adds	r5, #1
 8005c0e:	4606      	mov	r6, r0
 8005c10:	460f      	mov	r7, r1
 8005c12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005c16:	f109 0908 	add.w	r9, r9, #8
 8005c1a:	e7e0      	b.n	8005bde <_dtoa_r+0x36e>
 8005c1c:	f000 809f 	beq.w	8005d5e <_dtoa_r+0x4ee>
 8005c20:	f1cb 0600 	rsb	r6, fp, #0
 8005c24:	4ba1      	ldr	r3, [pc, #644]	; (8005eac <_dtoa_r+0x63c>)
 8005c26:	4fa2      	ldr	r7, [pc, #648]	; (8005eb0 <_dtoa_r+0x640>)
 8005c28:	f006 020f 	and.w	r2, r6, #15
 8005c2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	ec51 0b18 	vmov	r0, r1, d8
 8005c38:	f7fa fcfe 	bl	8000638 <__aeabi_dmul>
 8005c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c40:	1136      	asrs	r6, r6, #4
 8005c42:	2300      	movs	r3, #0
 8005c44:	2502      	movs	r5, #2
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	d17e      	bne.n	8005d48 <_dtoa_r+0x4d8>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d1d0      	bne.n	8005bf0 <_dtoa_r+0x380>
 8005c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 8084 	beq.w	8005d62 <_dtoa_r+0x4f2>
 8005c5a:	4b96      	ldr	r3, [pc, #600]	; (8005eb4 <_dtoa_r+0x644>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	4640      	mov	r0, r8
 8005c60:	4649      	mov	r1, r9
 8005c62:	f7fa ff5b 	bl	8000b1c <__aeabi_dcmplt>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d07b      	beq.n	8005d62 <_dtoa_r+0x4f2>
 8005c6a:	9b04      	ldr	r3, [sp, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d078      	beq.n	8005d62 <_dtoa_r+0x4f2>
 8005c70:	9b01      	ldr	r3, [sp, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	dd39      	ble.n	8005cea <_dtoa_r+0x47a>
 8005c76:	4b90      	ldr	r3, [pc, #576]	; (8005eb8 <_dtoa_r+0x648>)
 8005c78:	2200      	movs	r2, #0
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	f7fa fcdb 	bl	8000638 <__aeabi_dmul>
 8005c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c86:	9e01      	ldr	r6, [sp, #4]
 8005c88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005c92:	4628      	mov	r0, r5
 8005c94:	f7fa fc66 	bl	8000564 <__aeabi_i2d>
 8005c98:	4642      	mov	r2, r8
 8005c9a:	464b      	mov	r3, r9
 8005c9c:	f7fa fccc 	bl	8000638 <__aeabi_dmul>
 8005ca0:	4b86      	ldr	r3, [pc, #536]	; (8005ebc <_dtoa_r+0x64c>)
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f7fa fb12 	bl	80002cc <__adddf3>
 8005ca8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb0:	9303      	str	r3, [sp, #12]
 8005cb2:	2e00      	cmp	r6, #0
 8005cb4:	d158      	bne.n	8005d68 <_dtoa_r+0x4f8>
 8005cb6:	4b82      	ldr	r3, [pc, #520]	; (8005ec0 <_dtoa_r+0x650>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4640      	mov	r0, r8
 8005cbc:	4649      	mov	r1, r9
 8005cbe:	f7fa fb03 	bl	80002c8 <__aeabi_dsub>
 8005cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cc6:	4680      	mov	r8, r0
 8005cc8:	4689      	mov	r9, r1
 8005cca:	f7fa ff45 	bl	8000b58 <__aeabi_dcmpgt>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	f040 8296 	bne.w	8006200 <_dtoa_r+0x990>
 8005cd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005cd8:	4640      	mov	r0, r8
 8005cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cde:	4649      	mov	r1, r9
 8005ce0:	f7fa ff1c 	bl	8000b1c <__aeabi_dcmplt>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	f040 8289 	bne.w	80061fc <_dtoa_r+0x98c>
 8005cea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005cee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f2c0 814e 	blt.w	8005f92 <_dtoa_r+0x722>
 8005cf6:	f1bb 0f0e 	cmp.w	fp, #14
 8005cfa:	f300 814a 	bgt.w	8005f92 <_dtoa_r+0x722>
 8005cfe:	4b6b      	ldr	r3, [pc, #428]	; (8005eac <_dtoa_r+0x63c>)
 8005d00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d04:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f280 80dc 	bge.w	8005ec8 <_dtoa_r+0x658>
 8005d10:	9b04      	ldr	r3, [sp, #16]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f300 80d8 	bgt.w	8005ec8 <_dtoa_r+0x658>
 8005d18:	f040 826f 	bne.w	80061fa <_dtoa_r+0x98a>
 8005d1c:	4b68      	ldr	r3, [pc, #416]	; (8005ec0 <_dtoa_r+0x650>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	4640      	mov	r0, r8
 8005d22:	4649      	mov	r1, r9
 8005d24:	f7fa fc88 	bl	8000638 <__aeabi_dmul>
 8005d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d2c:	f7fa ff0a 	bl	8000b44 <__aeabi_dcmpge>
 8005d30:	9e04      	ldr	r6, [sp, #16]
 8005d32:	4637      	mov	r7, r6
 8005d34:	2800      	cmp	r0, #0
 8005d36:	f040 8245 	bne.w	80061c4 <_dtoa_r+0x954>
 8005d3a:	9d00      	ldr	r5, [sp, #0]
 8005d3c:	2331      	movs	r3, #49	; 0x31
 8005d3e:	f805 3b01 	strb.w	r3, [r5], #1
 8005d42:	f10b 0b01 	add.w	fp, fp, #1
 8005d46:	e241      	b.n	80061cc <_dtoa_r+0x95c>
 8005d48:	07f2      	lsls	r2, r6, #31
 8005d4a:	d505      	bpl.n	8005d58 <_dtoa_r+0x4e8>
 8005d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d50:	f7fa fc72 	bl	8000638 <__aeabi_dmul>
 8005d54:	3501      	adds	r5, #1
 8005d56:	2301      	movs	r3, #1
 8005d58:	1076      	asrs	r6, r6, #1
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	e773      	b.n	8005c46 <_dtoa_r+0x3d6>
 8005d5e:	2502      	movs	r5, #2
 8005d60:	e775      	b.n	8005c4e <_dtoa_r+0x3de>
 8005d62:	9e04      	ldr	r6, [sp, #16]
 8005d64:	465f      	mov	r7, fp
 8005d66:	e792      	b.n	8005c8e <_dtoa_r+0x41e>
 8005d68:	9900      	ldr	r1, [sp, #0]
 8005d6a:	4b50      	ldr	r3, [pc, #320]	; (8005eac <_dtoa_r+0x63c>)
 8005d6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005d70:	4431      	add	r1, r6
 8005d72:	9102      	str	r1, [sp, #8]
 8005d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d76:	eeb0 9a47 	vmov.f32	s18, s14
 8005d7a:	eef0 9a67 	vmov.f32	s19, s15
 8005d7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005d82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d86:	2900      	cmp	r1, #0
 8005d88:	d044      	beq.n	8005e14 <_dtoa_r+0x5a4>
 8005d8a:	494e      	ldr	r1, [pc, #312]	; (8005ec4 <_dtoa_r+0x654>)
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	f7fa fd7d 	bl	800088c <__aeabi_ddiv>
 8005d92:	ec53 2b19 	vmov	r2, r3, d9
 8005d96:	f7fa fa97 	bl	80002c8 <__aeabi_dsub>
 8005d9a:	9d00      	ldr	r5, [sp, #0]
 8005d9c:	ec41 0b19 	vmov	d9, r0, r1
 8005da0:	4649      	mov	r1, r9
 8005da2:	4640      	mov	r0, r8
 8005da4:	f7fa fef8 	bl	8000b98 <__aeabi_d2iz>
 8005da8:	4606      	mov	r6, r0
 8005daa:	f7fa fbdb 	bl	8000564 <__aeabi_i2d>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4640      	mov	r0, r8
 8005db4:	4649      	mov	r1, r9
 8005db6:	f7fa fa87 	bl	80002c8 <__aeabi_dsub>
 8005dba:	3630      	adds	r6, #48	; 0x30
 8005dbc:	f805 6b01 	strb.w	r6, [r5], #1
 8005dc0:	ec53 2b19 	vmov	r2, r3, d9
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	4689      	mov	r9, r1
 8005dc8:	f7fa fea8 	bl	8000b1c <__aeabi_dcmplt>
 8005dcc:	2800      	cmp	r0, #0
 8005dce:	d164      	bne.n	8005e9a <_dtoa_r+0x62a>
 8005dd0:	4642      	mov	r2, r8
 8005dd2:	464b      	mov	r3, r9
 8005dd4:	4937      	ldr	r1, [pc, #220]	; (8005eb4 <_dtoa_r+0x644>)
 8005dd6:	2000      	movs	r0, #0
 8005dd8:	f7fa fa76 	bl	80002c8 <__aeabi_dsub>
 8005ddc:	ec53 2b19 	vmov	r2, r3, d9
 8005de0:	f7fa fe9c 	bl	8000b1c <__aeabi_dcmplt>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f040 80b6 	bne.w	8005f56 <_dtoa_r+0x6e6>
 8005dea:	9b02      	ldr	r3, [sp, #8]
 8005dec:	429d      	cmp	r5, r3
 8005dee:	f43f af7c 	beq.w	8005cea <_dtoa_r+0x47a>
 8005df2:	4b31      	ldr	r3, [pc, #196]	; (8005eb8 <_dtoa_r+0x648>)
 8005df4:	ec51 0b19 	vmov	r0, r1, d9
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f7fa fc1d 	bl	8000638 <__aeabi_dmul>
 8005dfe:	4b2e      	ldr	r3, [pc, #184]	; (8005eb8 <_dtoa_r+0x648>)
 8005e00:	ec41 0b19 	vmov	d9, r0, r1
 8005e04:	2200      	movs	r2, #0
 8005e06:	4640      	mov	r0, r8
 8005e08:	4649      	mov	r1, r9
 8005e0a:	f7fa fc15 	bl	8000638 <__aeabi_dmul>
 8005e0e:	4680      	mov	r8, r0
 8005e10:	4689      	mov	r9, r1
 8005e12:	e7c5      	b.n	8005da0 <_dtoa_r+0x530>
 8005e14:	ec51 0b17 	vmov	r0, r1, d7
 8005e18:	f7fa fc0e 	bl	8000638 <__aeabi_dmul>
 8005e1c:	9b02      	ldr	r3, [sp, #8]
 8005e1e:	9d00      	ldr	r5, [sp, #0]
 8005e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e22:	ec41 0b19 	vmov	d9, r0, r1
 8005e26:	4649      	mov	r1, r9
 8005e28:	4640      	mov	r0, r8
 8005e2a:	f7fa feb5 	bl	8000b98 <__aeabi_d2iz>
 8005e2e:	4606      	mov	r6, r0
 8005e30:	f7fa fb98 	bl	8000564 <__aeabi_i2d>
 8005e34:	3630      	adds	r6, #48	; 0x30
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	f7fa fa43 	bl	80002c8 <__aeabi_dsub>
 8005e42:	f805 6b01 	strb.w	r6, [r5], #1
 8005e46:	9b02      	ldr	r3, [sp, #8]
 8005e48:	429d      	cmp	r5, r3
 8005e4a:	4680      	mov	r8, r0
 8005e4c:	4689      	mov	r9, r1
 8005e4e:	f04f 0200 	mov.w	r2, #0
 8005e52:	d124      	bne.n	8005e9e <_dtoa_r+0x62e>
 8005e54:	4b1b      	ldr	r3, [pc, #108]	; (8005ec4 <_dtoa_r+0x654>)
 8005e56:	ec51 0b19 	vmov	r0, r1, d9
 8005e5a:	f7fa fa37 	bl	80002cc <__adddf3>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4640      	mov	r0, r8
 8005e64:	4649      	mov	r1, r9
 8005e66:	f7fa fe77 	bl	8000b58 <__aeabi_dcmpgt>
 8005e6a:	2800      	cmp	r0, #0
 8005e6c:	d173      	bne.n	8005f56 <_dtoa_r+0x6e6>
 8005e6e:	ec53 2b19 	vmov	r2, r3, d9
 8005e72:	4914      	ldr	r1, [pc, #80]	; (8005ec4 <_dtoa_r+0x654>)
 8005e74:	2000      	movs	r0, #0
 8005e76:	f7fa fa27 	bl	80002c8 <__aeabi_dsub>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4640      	mov	r0, r8
 8005e80:	4649      	mov	r1, r9
 8005e82:	f7fa fe4b 	bl	8000b1c <__aeabi_dcmplt>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	f43f af2f 	beq.w	8005cea <_dtoa_r+0x47a>
 8005e8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005e8e:	1e6b      	subs	r3, r5, #1
 8005e90:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e96:	2b30      	cmp	r3, #48	; 0x30
 8005e98:	d0f8      	beq.n	8005e8c <_dtoa_r+0x61c>
 8005e9a:	46bb      	mov	fp, r7
 8005e9c:	e04a      	b.n	8005f34 <_dtoa_r+0x6c4>
 8005e9e:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <_dtoa_r+0x648>)
 8005ea0:	f7fa fbca 	bl	8000638 <__aeabi_dmul>
 8005ea4:	4680      	mov	r8, r0
 8005ea6:	4689      	mov	r9, r1
 8005ea8:	e7bd      	b.n	8005e26 <_dtoa_r+0x5b6>
 8005eaa:	bf00      	nop
 8005eac:	08009040 	.word	0x08009040
 8005eb0:	08009018 	.word	0x08009018
 8005eb4:	3ff00000 	.word	0x3ff00000
 8005eb8:	40240000 	.word	0x40240000
 8005ebc:	401c0000 	.word	0x401c0000
 8005ec0:	40140000 	.word	0x40140000
 8005ec4:	3fe00000 	.word	0x3fe00000
 8005ec8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ecc:	9d00      	ldr	r5, [sp, #0]
 8005ece:	4642      	mov	r2, r8
 8005ed0:	464b      	mov	r3, r9
 8005ed2:	4630      	mov	r0, r6
 8005ed4:	4639      	mov	r1, r7
 8005ed6:	f7fa fcd9 	bl	800088c <__aeabi_ddiv>
 8005eda:	f7fa fe5d 	bl	8000b98 <__aeabi_d2iz>
 8005ede:	9001      	str	r0, [sp, #4]
 8005ee0:	f7fa fb40 	bl	8000564 <__aeabi_i2d>
 8005ee4:	4642      	mov	r2, r8
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	f7fa fba6 	bl	8000638 <__aeabi_dmul>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa f9e8 	bl	80002c8 <__aeabi_dsub>
 8005ef8:	9e01      	ldr	r6, [sp, #4]
 8005efa:	9f04      	ldr	r7, [sp, #16]
 8005efc:	3630      	adds	r6, #48	; 0x30
 8005efe:	f805 6b01 	strb.w	r6, [r5], #1
 8005f02:	9e00      	ldr	r6, [sp, #0]
 8005f04:	1bae      	subs	r6, r5, r6
 8005f06:	42b7      	cmp	r7, r6
 8005f08:	4602      	mov	r2, r0
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	d134      	bne.n	8005f78 <_dtoa_r+0x708>
 8005f0e:	f7fa f9dd 	bl	80002cc <__adddf3>
 8005f12:	4642      	mov	r2, r8
 8005f14:	464b      	mov	r3, r9
 8005f16:	4606      	mov	r6, r0
 8005f18:	460f      	mov	r7, r1
 8005f1a:	f7fa fe1d 	bl	8000b58 <__aeabi_dcmpgt>
 8005f1e:	b9c8      	cbnz	r0, 8005f54 <_dtoa_r+0x6e4>
 8005f20:	4642      	mov	r2, r8
 8005f22:	464b      	mov	r3, r9
 8005f24:	4630      	mov	r0, r6
 8005f26:	4639      	mov	r1, r7
 8005f28:	f7fa fdee 	bl	8000b08 <__aeabi_dcmpeq>
 8005f2c:	b110      	cbz	r0, 8005f34 <_dtoa_r+0x6c4>
 8005f2e:	9b01      	ldr	r3, [sp, #4]
 8005f30:	07db      	lsls	r3, r3, #31
 8005f32:	d40f      	bmi.n	8005f54 <_dtoa_r+0x6e4>
 8005f34:	4651      	mov	r1, sl
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fbcc 	bl	80066d4 <_Bfree>
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005f40:	702b      	strb	r3, [r5, #0]
 8005f42:	f10b 0301 	add.w	r3, fp, #1
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f43f ace2 	beq.w	8005914 <_dtoa_r+0xa4>
 8005f50:	601d      	str	r5, [r3, #0]
 8005f52:	e4df      	b.n	8005914 <_dtoa_r+0xa4>
 8005f54:	465f      	mov	r7, fp
 8005f56:	462b      	mov	r3, r5
 8005f58:	461d      	mov	r5, r3
 8005f5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f5e:	2a39      	cmp	r2, #57	; 0x39
 8005f60:	d106      	bne.n	8005f70 <_dtoa_r+0x700>
 8005f62:	9a00      	ldr	r2, [sp, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d1f7      	bne.n	8005f58 <_dtoa_r+0x6e8>
 8005f68:	9900      	ldr	r1, [sp, #0]
 8005f6a:	2230      	movs	r2, #48	; 0x30
 8005f6c:	3701      	adds	r7, #1
 8005f6e:	700a      	strb	r2, [r1, #0]
 8005f70:	781a      	ldrb	r2, [r3, #0]
 8005f72:	3201      	adds	r2, #1
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	e790      	b.n	8005e9a <_dtoa_r+0x62a>
 8005f78:	4ba3      	ldr	r3, [pc, #652]	; (8006208 <_dtoa_r+0x998>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f7fa fb5c 	bl	8000638 <__aeabi_dmul>
 8005f80:	2200      	movs	r2, #0
 8005f82:	2300      	movs	r3, #0
 8005f84:	4606      	mov	r6, r0
 8005f86:	460f      	mov	r7, r1
 8005f88:	f7fa fdbe 	bl	8000b08 <__aeabi_dcmpeq>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d09e      	beq.n	8005ece <_dtoa_r+0x65e>
 8005f90:	e7d0      	b.n	8005f34 <_dtoa_r+0x6c4>
 8005f92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f94:	2a00      	cmp	r2, #0
 8005f96:	f000 80ca 	beq.w	800612e <_dtoa_r+0x8be>
 8005f9a:	9a07      	ldr	r2, [sp, #28]
 8005f9c:	2a01      	cmp	r2, #1
 8005f9e:	f300 80ad 	bgt.w	80060fc <_dtoa_r+0x88c>
 8005fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	f000 80a5 	beq.w	80060f4 <_dtoa_r+0x884>
 8005faa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005fae:	9e08      	ldr	r6, [sp, #32]
 8005fb0:	9d05      	ldr	r5, [sp, #20]
 8005fb2:	9a05      	ldr	r2, [sp, #20]
 8005fb4:	441a      	add	r2, r3
 8005fb6:	9205      	str	r2, [sp, #20]
 8005fb8:	9a06      	ldr	r2, [sp, #24]
 8005fba:	2101      	movs	r1, #1
 8005fbc:	441a      	add	r2, r3
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	9206      	str	r2, [sp, #24]
 8005fc2:	f000 fc87 	bl	80068d4 <__i2b>
 8005fc6:	4607      	mov	r7, r0
 8005fc8:	b165      	cbz	r5, 8005fe4 <_dtoa_r+0x774>
 8005fca:	9b06      	ldr	r3, [sp, #24]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	dd09      	ble.n	8005fe4 <_dtoa_r+0x774>
 8005fd0:	42ab      	cmp	r3, r5
 8005fd2:	9a05      	ldr	r2, [sp, #20]
 8005fd4:	bfa8      	it	ge
 8005fd6:	462b      	movge	r3, r5
 8005fd8:	1ad2      	subs	r2, r2, r3
 8005fda:	9205      	str	r2, [sp, #20]
 8005fdc:	9a06      	ldr	r2, [sp, #24]
 8005fde:	1aed      	subs	r5, r5, r3
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	9306      	str	r3, [sp, #24]
 8005fe4:	9b08      	ldr	r3, [sp, #32]
 8005fe6:	b1f3      	cbz	r3, 8006026 <_dtoa_r+0x7b6>
 8005fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f000 80a3 	beq.w	8006136 <_dtoa_r+0x8c6>
 8005ff0:	2e00      	cmp	r6, #0
 8005ff2:	dd10      	ble.n	8006016 <_dtoa_r+0x7a6>
 8005ff4:	4639      	mov	r1, r7
 8005ff6:	4632      	mov	r2, r6
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fd2b 	bl	8006a54 <__pow5mult>
 8005ffe:	4652      	mov	r2, sl
 8006000:	4601      	mov	r1, r0
 8006002:	4607      	mov	r7, r0
 8006004:	4620      	mov	r0, r4
 8006006:	f000 fc7b 	bl	8006900 <__multiply>
 800600a:	4651      	mov	r1, sl
 800600c:	4680      	mov	r8, r0
 800600e:	4620      	mov	r0, r4
 8006010:	f000 fb60 	bl	80066d4 <_Bfree>
 8006014:	46c2      	mov	sl, r8
 8006016:	9b08      	ldr	r3, [sp, #32]
 8006018:	1b9a      	subs	r2, r3, r6
 800601a:	d004      	beq.n	8006026 <_dtoa_r+0x7b6>
 800601c:	4651      	mov	r1, sl
 800601e:	4620      	mov	r0, r4
 8006020:	f000 fd18 	bl	8006a54 <__pow5mult>
 8006024:	4682      	mov	sl, r0
 8006026:	2101      	movs	r1, #1
 8006028:	4620      	mov	r0, r4
 800602a:	f000 fc53 	bl	80068d4 <__i2b>
 800602e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006030:	2b00      	cmp	r3, #0
 8006032:	4606      	mov	r6, r0
 8006034:	f340 8081 	ble.w	800613a <_dtoa_r+0x8ca>
 8006038:	461a      	mov	r2, r3
 800603a:	4601      	mov	r1, r0
 800603c:	4620      	mov	r0, r4
 800603e:	f000 fd09 	bl	8006a54 <__pow5mult>
 8006042:	9b07      	ldr	r3, [sp, #28]
 8006044:	2b01      	cmp	r3, #1
 8006046:	4606      	mov	r6, r0
 8006048:	dd7a      	ble.n	8006140 <_dtoa_r+0x8d0>
 800604a:	f04f 0800 	mov.w	r8, #0
 800604e:	6933      	ldr	r3, [r6, #16]
 8006050:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006054:	6918      	ldr	r0, [r3, #16]
 8006056:	f000 fbef 	bl	8006838 <__hi0bits>
 800605a:	f1c0 0020 	rsb	r0, r0, #32
 800605e:	9b06      	ldr	r3, [sp, #24]
 8006060:	4418      	add	r0, r3
 8006062:	f010 001f 	ands.w	r0, r0, #31
 8006066:	f000 8094 	beq.w	8006192 <_dtoa_r+0x922>
 800606a:	f1c0 0320 	rsb	r3, r0, #32
 800606e:	2b04      	cmp	r3, #4
 8006070:	f340 8085 	ble.w	800617e <_dtoa_r+0x90e>
 8006074:	9b05      	ldr	r3, [sp, #20]
 8006076:	f1c0 001c 	rsb	r0, r0, #28
 800607a:	4403      	add	r3, r0
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	9b06      	ldr	r3, [sp, #24]
 8006080:	4403      	add	r3, r0
 8006082:	4405      	add	r5, r0
 8006084:	9306      	str	r3, [sp, #24]
 8006086:	9b05      	ldr	r3, [sp, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	dd05      	ble.n	8006098 <_dtoa_r+0x828>
 800608c:	4651      	mov	r1, sl
 800608e:	461a      	mov	r2, r3
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fd39 	bl	8006b08 <__lshift>
 8006096:	4682      	mov	sl, r0
 8006098:	9b06      	ldr	r3, [sp, #24]
 800609a:	2b00      	cmp	r3, #0
 800609c:	dd05      	ble.n	80060aa <_dtoa_r+0x83a>
 800609e:	4631      	mov	r1, r6
 80060a0:	461a      	mov	r2, r3
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 fd30 	bl	8006b08 <__lshift>
 80060a8:	4606      	mov	r6, r0
 80060aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d072      	beq.n	8006196 <_dtoa_r+0x926>
 80060b0:	4631      	mov	r1, r6
 80060b2:	4650      	mov	r0, sl
 80060b4:	f000 fd94 	bl	8006be0 <__mcmp>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	da6c      	bge.n	8006196 <_dtoa_r+0x926>
 80060bc:	2300      	movs	r3, #0
 80060be:	4651      	mov	r1, sl
 80060c0:	220a      	movs	r2, #10
 80060c2:	4620      	mov	r0, r4
 80060c4:	f000 fb28 	bl	8006718 <__multadd>
 80060c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060ce:	4682      	mov	sl, r0
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 81b0 	beq.w	8006436 <_dtoa_r+0xbc6>
 80060d6:	2300      	movs	r3, #0
 80060d8:	4639      	mov	r1, r7
 80060da:	220a      	movs	r2, #10
 80060dc:	4620      	mov	r0, r4
 80060de:	f000 fb1b 	bl	8006718 <__multadd>
 80060e2:	9b01      	ldr	r3, [sp, #4]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	4607      	mov	r7, r0
 80060e8:	f300 8096 	bgt.w	8006218 <_dtoa_r+0x9a8>
 80060ec:	9b07      	ldr	r3, [sp, #28]
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	dc59      	bgt.n	80061a6 <_dtoa_r+0x936>
 80060f2:	e091      	b.n	8006218 <_dtoa_r+0x9a8>
 80060f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80060f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80060fa:	e758      	b.n	8005fae <_dtoa_r+0x73e>
 80060fc:	9b04      	ldr	r3, [sp, #16]
 80060fe:	1e5e      	subs	r6, r3, #1
 8006100:	9b08      	ldr	r3, [sp, #32]
 8006102:	42b3      	cmp	r3, r6
 8006104:	bfbf      	itttt	lt
 8006106:	9b08      	ldrlt	r3, [sp, #32]
 8006108:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800610a:	9608      	strlt	r6, [sp, #32]
 800610c:	1af3      	sublt	r3, r6, r3
 800610e:	bfb4      	ite	lt
 8006110:	18d2      	addlt	r2, r2, r3
 8006112:	1b9e      	subge	r6, r3, r6
 8006114:	9b04      	ldr	r3, [sp, #16]
 8006116:	bfbc      	itt	lt
 8006118:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800611a:	2600      	movlt	r6, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	bfb7      	itett	lt
 8006120:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006124:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006128:	1a9d      	sublt	r5, r3, r2
 800612a:	2300      	movlt	r3, #0
 800612c:	e741      	b.n	8005fb2 <_dtoa_r+0x742>
 800612e:	9e08      	ldr	r6, [sp, #32]
 8006130:	9d05      	ldr	r5, [sp, #20]
 8006132:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006134:	e748      	b.n	8005fc8 <_dtoa_r+0x758>
 8006136:	9a08      	ldr	r2, [sp, #32]
 8006138:	e770      	b.n	800601c <_dtoa_r+0x7ac>
 800613a:	9b07      	ldr	r3, [sp, #28]
 800613c:	2b01      	cmp	r3, #1
 800613e:	dc19      	bgt.n	8006174 <_dtoa_r+0x904>
 8006140:	9b02      	ldr	r3, [sp, #8]
 8006142:	b9bb      	cbnz	r3, 8006174 <_dtoa_r+0x904>
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800614a:	b99b      	cbnz	r3, 8006174 <_dtoa_r+0x904>
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006152:	0d1b      	lsrs	r3, r3, #20
 8006154:	051b      	lsls	r3, r3, #20
 8006156:	b183      	cbz	r3, 800617a <_dtoa_r+0x90a>
 8006158:	9b05      	ldr	r3, [sp, #20]
 800615a:	3301      	adds	r3, #1
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	9b06      	ldr	r3, [sp, #24]
 8006160:	3301      	adds	r3, #1
 8006162:	9306      	str	r3, [sp, #24]
 8006164:	f04f 0801 	mov.w	r8, #1
 8006168:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	f47f af6f 	bne.w	800604e <_dtoa_r+0x7de>
 8006170:	2001      	movs	r0, #1
 8006172:	e774      	b.n	800605e <_dtoa_r+0x7ee>
 8006174:	f04f 0800 	mov.w	r8, #0
 8006178:	e7f6      	b.n	8006168 <_dtoa_r+0x8f8>
 800617a:	4698      	mov	r8, r3
 800617c:	e7f4      	b.n	8006168 <_dtoa_r+0x8f8>
 800617e:	d082      	beq.n	8006086 <_dtoa_r+0x816>
 8006180:	9a05      	ldr	r2, [sp, #20]
 8006182:	331c      	adds	r3, #28
 8006184:	441a      	add	r2, r3
 8006186:	9205      	str	r2, [sp, #20]
 8006188:	9a06      	ldr	r2, [sp, #24]
 800618a:	441a      	add	r2, r3
 800618c:	441d      	add	r5, r3
 800618e:	9206      	str	r2, [sp, #24]
 8006190:	e779      	b.n	8006086 <_dtoa_r+0x816>
 8006192:	4603      	mov	r3, r0
 8006194:	e7f4      	b.n	8006180 <_dtoa_r+0x910>
 8006196:	9b04      	ldr	r3, [sp, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	dc37      	bgt.n	800620c <_dtoa_r+0x99c>
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	dd34      	ble.n	800620c <_dtoa_r+0x99c>
 80061a2:	9b04      	ldr	r3, [sp, #16]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	9b01      	ldr	r3, [sp, #4]
 80061a8:	b963      	cbnz	r3, 80061c4 <_dtoa_r+0x954>
 80061aa:	4631      	mov	r1, r6
 80061ac:	2205      	movs	r2, #5
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 fab2 	bl	8006718 <__multadd>
 80061b4:	4601      	mov	r1, r0
 80061b6:	4606      	mov	r6, r0
 80061b8:	4650      	mov	r0, sl
 80061ba:	f000 fd11 	bl	8006be0 <__mcmp>
 80061be:	2800      	cmp	r0, #0
 80061c0:	f73f adbb 	bgt.w	8005d3a <_dtoa_r+0x4ca>
 80061c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c6:	9d00      	ldr	r5, [sp, #0]
 80061c8:	ea6f 0b03 	mvn.w	fp, r3
 80061cc:	f04f 0800 	mov.w	r8, #0
 80061d0:	4631      	mov	r1, r6
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 fa7e 	bl	80066d4 <_Bfree>
 80061d8:	2f00      	cmp	r7, #0
 80061da:	f43f aeab 	beq.w	8005f34 <_dtoa_r+0x6c4>
 80061de:	f1b8 0f00 	cmp.w	r8, #0
 80061e2:	d005      	beq.n	80061f0 <_dtoa_r+0x980>
 80061e4:	45b8      	cmp	r8, r7
 80061e6:	d003      	beq.n	80061f0 <_dtoa_r+0x980>
 80061e8:	4641      	mov	r1, r8
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 fa72 	bl	80066d4 <_Bfree>
 80061f0:	4639      	mov	r1, r7
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 fa6e 	bl	80066d4 <_Bfree>
 80061f8:	e69c      	b.n	8005f34 <_dtoa_r+0x6c4>
 80061fa:	2600      	movs	r6, #0
 80061fc:	4637      	mov	r7, r6
 80061fe:	e7e1      	b.n	80061c4 <_dtoa_r+0x954>
 8006200:	46bb      	mov	fp, r7
 8006202:	4637      	mov	r7, r6
 8006204:	e599      	b.n	8005d3a <_dtoa_r+0x4ca>
 8006206:	bf00      	nop
 8006208:	40240000 	.word	0x40240000
 800620c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 80c8 	beq.w	80063a4 <_dtoa_r+0xb34>
 8006214:	9b04      	ldr	r3, [sp, #16]
 8006216:	9301      	str	r3, [sp, #4]
 8006218:	2d00      	cmp	r5, #0
 800621a:	dd05      	ble.n	8006228 <_dtoa_r+0x9b8>
 800621c:	4639      	mov	r1, r7
 800621e:	462a      	mov	r2, r5
 8006220:	4620      	mov	r0, r4
 8006222:	f000 fc71 	bl	8006b08 <__lshift>
 8006226:	4607      	mov	r7, r0
 8006228:	f1b8 0f00 	cmp.w	r8, #0
 800622c:	d05b      	beq.n	80062e6 <_dtoa_r+0xa76>
 800622e:	6879      	ldr	r1, [r7, #4]
 8006230:	4620      	mov	r0, r4
 8006232:	f000 fa0f 	bl	8006654 <_Balloc>
 8006236:	4605      	mov	r5, r0
 8006238:	b928      	cbnz	r0, 8006246 <_dtoa_r+0x9d6>
 800623a:	4b83      	ldr	r3, [pc, #524]	; (8006448 <_dtoa_r+0xbd8>)
 800623c:	4602      	mov	r2, r0
 800623e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006242:	f7ff bb2e 	b.w	80058a2 <_dtoa_r+0x32>
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	3202      	adds	r2, #2
 800624a:	0092      	lsls	r2, r2, #2
 800624c:	f107 010c 	add.w	r1, r7, #12
 8006250:	300c      	adds	r0, #12
 8006252:	f001 ff85 	bl	8008160 <memcpy>
 8006256:	2201      	movs	r2, #1
 8006258:	4629      	mov	r1, r5
 800625a:	4620      	mov	r0, r4
 800625c:	f000 fc54 	bl	8006b08 <__lshift>
 8006260:	9b00      	ldr	r3, [sp, #0]
 8006262:	3301      	adds	r3, #1
 8006264:	9304      	str	r3, [sp, #16]
 8006266:	e9dd 2300 	ldrd	r2, r3, [sp]
 800626a:	4413      	add	r3, r2
 800626c:	9308      	str	r3, [sp, #32]
 800626e:	9b02      	ldr	r3, [sp, #8]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	46b8      	mov	r8, r7
 8006276:	9306      	str	r3, [sp, #24]
 8006278:	4607      	mov	r7, r0
 800627a:	9b04      	ldr	r3, [sp, #16]
 800627c:	4631      	mov	r1, r6
 800627e:	3b01      	subs	r3, #1
 8006280:	4650      	mov	r0, sl
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	f7ff fa6c 	bl	8005760 <quorem>
 8006288:	4641      	mov	r1, r8
 800628a:	9002      	str	r0, [sp, #8]
 800628c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006290:	4650      	mov	r0, sl
 8006292:	f000 fca5 	bl	8006be0 <__mcmp>
 8006296:	463a      	mov	r2, r7
 8006298:	9005      	str	r0, [sp, #20]
 800629a:	4631      	mov	r1, r6
 800629c:	4620      	mov	r0, r4
 800629e:	f000 fcbb 	bl	8006c18 <__mdiff>
 80062a2:	68c2      	ldr	r2, [r0, #12]
 80062a4:	4605      	mov	r5, r0
 80062a6:	bb02      	cbnz	r2, 80062ea <_dtoa_r+0xa7a>
 80062a8:	4601      	mov	r1, r0
 80062aa:	4650      	mov	r0, sl
 80062ac:	f000 fc98 	bl	8006be0 <__mcmp>
 80062b0:	4602      	mov	r2, r0
 80062b2:	4629      	mov	r1, r5
 80062b4:	4620      	mov	r0, r4
 80062b6:	9209      	str	r2, [sp, #36]	; 0x24
 80062b8:	f000 fa0c 	bl	80066d4 <_Bfree>
 80062bc:	9b07      	ldr	r3, [sp, #28]
 80062be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c0:	9d04      	ldr	r5, [sp, #16]
 80062c2:	ea43 0102 	orr.w	r1, r3, r2
 80062c6:	9b06      	ldr	r3, [sp, #24]
 80062c8:	4319      	orrs	r1, r3
 80062ca:	d110      	bne.n	80062ee <_dtoa_r+0xa7e>
 80062cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80062d0:	d029      	beq.n	8006326 <_dtoa_r+0xab6>
 80062d2:	9b05      	ldr	r3, [sp, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dd02      	ble.n	80062de <_dtoa_r+0xa6e>
 80062d8:	9b02      	ldr	r3, [sp, #8]
 80062da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80062de:	9b01      	ldr	r3, [sp, #4]
 80062e0:	f883 9000 	strb.w	r9, [r3]
 80062e4:	e774      	b.n	80061d0 <_dtoa_r+0x960>
 80062e6:	4638      	mov	r0, r7
 80062e8:	e7ba      	b.n	8006260 <_dtoa_r+0x9f0>
 80062ea:	2201      	movs	r2, #1
 80062ec:	e7e1      	b.n	80062b2 <_dtoa_r+0xa42>
 80062ee:	9b05      	ldr	r3, [sp, #20]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	db04      	blt.n	80062fe <_dtoa_r+0xa8e>
 80062f4:	9907      	ldr	r1, [sp, #28]
 80062f6:	430b      	orrs	r3, r1
 80062f8:	9906      	ldr	r1, [sp, #24]
 80062fa:	430b      	orrs	r3, r1
 80062fc:	d120      	bne.n	8006340 <_dtoa_r+0xad0>
 80062fe:	2a00      	cmp	r2, #0
 8006300:	dded      	ble.n	80062de <_dtoa_r+0xa6e>
 8006302:	4651      	mov	r1, sl
 8006304:	2201      	movs	r2, #1
 8006306:	4620      	mov	r0, r4
 8006308:	f000 fbfe 	bl	8006b08 <__lshift>
 800630c:	4631      	mov	r1, r6
 800630e:	4682      	mov	sl, r0
 8006310:	f000 fc66 	bl	8006be0 <__mcmp>
 8006314:	2800      	cmp	r0, #0
 8006316:	dc03      	bgt.n	8006320 <_dtoa_r+0xab0>
 8006318:	d1e1      	bne.n	80062de <_dtoa_r+0xa6e>
 800631a:	f019 0f01 	tst.w	r9, #1
 800631e:	d0de      	beq.n	80062de <_dtoa_r+0xa6e>
 8006320:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006324:	d1d8      	bne.n	80062d8 <_dtoa_r+0xa68>
 8006326:	9a01      	ldr	r2, [sp, #4]
 8006328:	2339      	movs	r3, #57	; 0x39
 800632a:	7013      	strb	r3, [r2, #0]
 800632c:	462b      	mov	r3, r5
 800632e:	461d      	mov	r5, r3
 8006330:	3b01      	subs	r3, #1
 8006332:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006336:	2a39      	cmp	r2, #57	; 0x39
 8006338:	d06c      	beq.n	8006414 <_dtoa_r+0xba4>
 800633a:	3201      	adds	r2, #1
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	e747      	b.n	80061d0 <_dtoa_r+0x960>
 8006340:	2a00      	cmp	r2, #0
 8006342:	dd07      	ble.n	8006354 <_dtoa_r+0xae4>
 8006344:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006348:	d0ed      	beq.n	8006326 <_dtoa_r+0xab6>
 800634a:	9a01      	ldr	r2, [sp, #4]
 800634c:	f109 0301 	add.w	r3, r9, #1
 8006350:	7013      	strb	r3, [r2, #0]
 8006352:	e73d      	b.n	80061d0 <_dtoa_r+0x960>
 8006354:	9b04      	ldr	r3, [sp, #16]
 8006356:	9a08      	ldr	r2, [sp, #32]
 8006358:	f803 9c01 	strb.w	r9, [r3, #-1]
 800635c:	4293      	cmp	r3, r2
 800635e:	d043      	beq.n	80063e8 <_dtoa_r+0xb78>
 8006360:	4651      	mov	r1, sl
 8006362:	2300      	movs	r3, #0
 8006364:	220a      	movs	r2, #10
 8006366:	4620      	mov	r0, r4
 8006368:	f000 f9d6 	bl	8006718 <__multadd>
 800636c:	45b8      	cmp	r8, r7
 800636e:	4682      	mov	sl, r0
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	f04f 020a 	mov.w	r2, #10
 8006378:	4641      	mov	r1, r8
 800637a:	4620      	mov	r0, r4
 800637c:	d107      	bne.n	800638e <_dtoa_r+0xb1e>
 800637e:	f000 f9cb 	bl	8006718 <__multadd>
 8006382:	4680      	mov	r8, r0
 8006384:	4607      	mov	r7, r0
 8006386:	9b04      	ldr	r3, [sp, #16]
 8006388:	3301      	adds	r3, #1
 800638a:	9304      	str	r3, [sp, #16]
 800638c:	e775      	b.n	800627a <_dtoa_r+0xa0a>
 800638e:	f000 f9c3 	bl	8006718 <__multadd>
 8006392:	4639      	mov	r1, r7
 8006394:	4680      	mov	r8, r0
 8006396:	2300      	movs	r3, #0
 8006398:	220a      	movs	r2, #10
 800639a:	4620      	mov	r0, r4
 800639c:	f000 f9bc 	bl	8006718 <__multadd>
 80063a0:	4607      	mov	r7, r0
 80063a2:	e7f0      	b.n	8006386 <_dtoa_r+0xb16>
 80063a4:	9b04      	ldr	r3, [sp, #16]
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	9d00      	ldr	r5, [sp, #0]
 80063aa:	4631      	mov	r1, r6
 80063ac:	4650      	mov	r0, sl
 80063ae:	f7ff f9d7 	bl	8005760 <quorem>
 80063b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80063b6:	9b00      	ldr	r3, [sp, #0]
 80063b8:	f805 9b01 	strb.w	r9, [r5], #1
 80063bc:	1aea      	subs	r2, r5, r3
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	dd07      	ble.n	80063d4 <_dtoa_r+0xb64>
 80063c4:	4651      	mov	r1, sl
 80063c6:	2300      	movs	r3, #0
 80063c8:	220a      	movs	r2, #10
 80063ca:	4620      	mov	r0, r4
 80063cc:	f000 f9a4 	bl	8006718 <__multadd>
 80063d0:	4682      	mov	sl, r0
 80063d2:	e7ea      	b.n	80063aa <_dtoa_r+0xb3a>
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	bfc8      	it	gt
 80063da:	461d      	movgt	r5, r3
 80063dc:	9b00      	ldr	r3, [sp, #0]
 80063de:	bfd8      	it	le
 80063e0:	2501      	movle	r5, #1
 80063e2:	441d      	add	r5, r3
 80063e4:	f04f 0800 	mov.w	r8, #0
 80063e8:	4651      	mov	r1, sl
 80063ea:	2201      	movs	r2, #1
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 fb8b 	bl	8006b08 <__lshift>
 80063f2:	4631      	mov	r1, r6
 80063f4:	4682      	mov	sl, r0
 80063f6:	f000 fbf3 	bl	8006be0 <__mcmp>
 80063fa:	2800      	cmp	r0, #0
 80063fc:	dc96      	bgt.n	800632c <_dtoa_r+0xabc>
 80063fe:	d102      	bne.n	8006406 <_dtoa_r+0xb96>
 8006400:	f019 0f01 	tst.w	r9, #1
 8006404:	d192      	bne.n	800632c <_dtoa_r+0xabc>
 8006406:	462b      	mov	r3, r5
 8006408:	461d      	mov	r5, r3
 800640a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800640e:	2a30      	cmp	r2, #48	; 0x30
 8006410:	d0fa      	beq.n	8006408 <_dtoa_r+0xb98>
 8006412:	e6dd      	b.n	80061d0 <_dtoa_r+0x960>
 8006414:	9a00      	ldr	r2, [sp, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d189      	bne.n	800632e <_dtoa_r+0xabe>
 800641a:	f10b 0b01 	add.w	fp, fp, #1
 800641e:	2331      	movs	r3, #49	; 0x31
 8006420:	e796      	b.n	8006350 <_dtoa_r+0xae0>
 8006422:	4b0a      	ldr	r3, [pc, #40]	; (800644c <_dtoa_r+0xbdc>)
 8006424:	f7ff ba99 	b.w	800595a <_dtoa_r+0xea>
 8006428:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800642a:	2b00      	cmp	r3, #0
 800642c:	f47f aa6d 	bne.w	800590a <_dtoa_r+0x9a>
 8006430:	4b07      	ldr	r3, [pc, #28]	; (8006450 <_dtoa_r+0xbe0>)
 8006432:	f7ff ba92 	b.w	800595a <_dtoa_r+0xea>
 8006436:	9b01      	ldr	r3, [sp, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	dcb5      	bgt.n	80063a8 <_dtoa_r+0xb38>
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	2b02      	cmp	r3, #2
 8006440:	f73f aeb1 	bgt.w	80061a6 <_dtoa_r+0x936>
 8006444:	e7b0      	b.n	80063a8 <_dtoa_r+0xb38>
 8006446:	bf00      	nop
 8006448:	08008fad 	.word	0x08008fad
 800644c:	08008f08 	.word	0x08008f08
 8006450:	08008f31 	.word	0x08008f31

08006454 <_free_r>:
 8006454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006456:	2900      	cmp	r1, #0
 8006458:	d044      	beq.n	80064e4 <_free_r+0x90>
 800645a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800645e:	9001      	str	r0, [sp, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f1a1 0404 	sub.w	r4, r1, #4
 8006466:	bfb8      	it	lt
 8006468:	18e4      	addlt	r4, r4, r3
 800646a:	f000 f8e7 	bl	800663c <__malloc_lock>
 800646e:	4a1e      	ldr	r2, [pc, #120]	; (80064e8 <_free_r+0x94>)
 8006470:	9801      	ldr	r0, [sp, #4]
 8006472:	6813      	ldr	r3, [r2, #0]
 8006474:	b933      	cbnz	r3, 8006484 <_free_r+0x30>
 8006476:	6063      	str	r3, [r4, #4]
 8006478:	6014      	str	r4, [r2, #0]
 800647a:	b003      	add	sp, #12
 800647c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006480:	f000 b8e2 	b.w	8006648 <__malloc_unlock>
 8006484:	42a3      	cmp	r3, r4
 8006486:	d908      	bls.n	800649a <_free_r+0x46>
 8006488:	6825      	ldr	r5, [r4, #0]
 800648a:	1961      	adds	r1, r4, r5
 800648c:	428b      	cmp	r3, r1
 800648e:	bf01      	itttt	eq
 8006490:	6819      	ldreq	r1, [r3, #0]
 8006492:	685b      	ldreq	r3, [r3, #4]
 8006494:	1949      	addeq	r1, r1, r5
 8006496:	6021      	streq	r1, [r4, #0]
 8006498:	e7ed      	b.n	8006476 <_free_r+0x22>
 800649a:	461a      	mov	r2, r3
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	b10b      	cbz	r3, 80064a4 <_free_r+0x50>
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d9fa      	bls.n	800649a <_free_r+0x46>
 80064a4:	6811      	ldr	r1, [r2, #0]
 80064a6:	1855      	adds	r5, r2, r1
 80064a8:	42a5      	cmp	r5, r4
 80064aa:	d10b      	bne.n	80064c4 <_free_r+0x70>
 80064ac:	6824      	ldr	r4, [r4, #0]
 80064ae:	4421      	add	r1, r4
 80064b0:	1854      	adds	r4, r2, r1
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	6011      	str	r1, [r2, #0]
 80064b6:	d1e0      	bne.n	800647a <_free_r+0x26>
 80064b8:	681c      	ldr	r4, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	6053      	str	r3, [r2, #4]
 80064be:	440c      	add	r4, r1
 80064c0:	6014      	str	r4, [r2, #0]
 80064c2:	e7da      	b.n	800647a <_free_r+0x26>
 80064c4:	d902      	bls.n	80064cc <_free_r+0x78>
 80064c6:	230c      	movs	r3, #12
 80064c8:	6003      	str	r3, [r0, #0]
 80064ca:	e7d6      	b.n	800647a <_free_r+0x26>
 80064cc:	6825      	ldr	r5, [r4, #0]
 80064ce:	1961      	adds	r1, r4, r5
 80064d0:	428b      	cmp	r3, r1
 80064d2:	bf04      	itt	eq
 80064d4:	6819      	ldreq	r1, [r3, #0]
 80064d6:	685b      	ldreq	r3, [r3, #4]
 80064d8:	6063      	str	r3, [r4, #4]
 80064da:	bf04      	itt	eq
 80064dc:	1949      	addeq	r1, r1, r5
 80064de:	6021      	streq	r1, [r4, #0]
 80064e0:	6054      	str	r4, [r2, #4]
 80064e2:	e7ca      	b.n	800647a <_free_r+0x26>
 80064e4:	b003      	add	sp, #12
 80064e6:	bd30      	pop	{r4, r5, pc}
 80064e8:	20000588 	.word	0x20000588

080064ec <malloc>:
 80064ec:	4b02      	ldr	r3, [pc, #8]	; (80064f8 <malloc+0xc>)
 80064ee:	4601      	mov	r1, r0
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	f000 b823 	b.w	800653c <_malloc_r>
 80064f6:	bf00      	nop
 80064f8:	20000064 	.word	0x20000064

080064fc <sbrk_aligned>:
 80064fc:	b570      	push	{r4, r5, r6, lr}
 80064fe:	4e0e      	ldr	r6, [pc, #56]	; (8006538 <sbrk_aligned+0x3c>)
 8006500:	460c      	mov	r4, r1
 8006502:	6831      	ldr	r1, [r6, #0]
 8006504:	4605      	mov	r5, r0
 8006506:	b911      	cbnz	r1, 800650e <sbrk_aligned+0x12>
 8006508:	f001 fe1a 	bl	8008140 <_sbrk_r>
 800650c:	6030      	str	r0, [r6, #0]
 800650e:	4621      	mov	r1, r4
 8006510:	4628      	mov	r0, r5
 8006512:	f001 fe15 	bl	8008140 <_sbrk_r>
 8006516:	1c43      	adds	r3, r0, #1
 8006518:	d00a      	beq.n	8006530 <sbrk_aligned+0x34>
 800651a:	1cc4      	adds	r4, r0, #3
 800651c:	f024 0403 	bic.w	r4, r4, #3
 8006520:	42a0      	cmp	r0, r4
 8006522:	d007      	beq.n	8006534 <sbrk_aligned+0x38>
 8006524:	1a21      	subs	r1, r4, r0
 8006526:	4628      	mov	r0, r5
 8006528:	f001 fe0a 	bl	8008140 <_sbrk_r>
 800652c:	3001      	adds	r0, #1
 800652e:	d101      	bne.n	8006534 <sbrk_aligned+0x38>
 8006530:	f04f 34ff 	mov.w	r4, #4294967295
 8006534:	4620      	mov	r0, r4
 8006536:	bd70      	pop	{r4, r5, r6, pc}
 8006538:	2000058c 	.word	0x2000058c

0800653c <_malloc_r>:
 800653c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006540:	1ccd      	adds	r5, r1, #3
 8006542:	f025 0503 	bic.w	r5, r5, #3
 8006546:	3508      	adds	r5, #8
 8006548:	2d0c      	cmp	r5, #12
 800654a:	bf38      	it	cc
 800654c:	250c      	movcc	r5, #12
 800654e:	2d00      	cmp	r5, #0
 8006550:	4607      	mov	r7, r0
 8006552:	db01      	blt.n	8006558 <_malloc_r+0x1c>
 8006554:	42a9      	cmp	r1, r5
 8006556:	d905      	bls.n	8006564 <_malloc_r+0x28>
 8006558:	230c      	movs	r3, #12
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	2600      	movs	r6, #0
 800655e:	4630      	mov	r0, r6
 8006560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006564:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006638 <_malloc_r+0xfc>
 8006568:	f000 f868 	bl	800663c <__malloc_lock>
 800656c:	f8d8 3000 	ldr.w	r3, [r8]
 8006570:	461c      	mov	r4, r3
 8006572:	bb5c      	cbnz	r4, 80065cc <_malloc_r+0x90>
 8006574:	4629      	mov	r1, r5
 8006576:	4638      	mov	r0, r7
 8006578:	f7ff ffc0 	bl	80064fc <sbrk_aligned>
 800657c:	1c43      	adds	r3, r0, #1
 800657e:	4604      	mov	r4, r0
 8006580:	d155      	bne.n	800662e <_malloc_r+0xf2>
 8006582:	f8d8 4000 	ldr.w	r4, [r8]
 8006586:	4626      	mov	r6, r4
 8006588:	2e00      	cmp	r6, #0
 800658a:	d145      	bne.n	8006618 <_malloc_r+0xdc>
 800658c:	2c00      	cmp	r4, #0
 800658e:	d048      	beq.n	8006622 <_malloc_r+0xe6>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	4631      	mov	r1, r6
 8006594:	4638      	mov	r0, r7
 8006596:	eb04 0903 	add.w	r9, r4, r3
 800659a:	f001 fdd1 	bl	8008140 <_sbrk_r>
 800659e:	4581      	cmp	r9, r0
 80065a0:	d13f      	bne.n	8006622 <_malloc_r+0xe6>
 80065a2:	6821      	ldr	r1, [r4, #0]
 80065a4:	1a6d      	subs	r5, r5, r1
 80065a6:	4629      	mov	r1, r5
 80065a8:	4638      	mov	r0, r7
 80065aa:	f7ff ffa7 	bl	80064fc <sbrk_aligned>
 80065ae:	3001      	adds	r0, #1
 80065b0:	d037      	beq.n	8006622 <_malloc_r+0xe6>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	442b      	add	r3, r5
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	f8d8 3000 	ldr.w	r3, [r8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d038      	beq.n	8006632 <_malloc_r+0xf6>
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	42a2      	cmp	r2, r4
 80065c4:	d12b      	bne.n	800661e <_malloc_r+0xe2>
 80065c6:	2200      	movs	r2, #0
 80065c8:	605a      	str	r2, [r3, #4]
 80065ca:	e00f      	b.n	80065ec <_malloc_r+0xb0>
 80065cc:	6822      	ldr	r2, [r4, #0]
 80065ce:	1b52      	subs	r2, r2, r5
 80065d0:	d41f      	bmi.n	8006612 <_malloc_r+0xd6>
 80065d2:	2a0b      	cmp	r2, #11
 80065d4:	d917      	bls.n	8006606 <_malloc_r+0xca>
 80065d6:	1961      	adds	r1, r4, r5
 80065d8:	42a3      	cmp	r3, r4
 80065da:	6025      	str	r5, [r4, #0]
 80065dc:	bf18      	it	ne
 80065de:	6059      	strne	r1, [r3, #4]
 80065e0:	6863      	ldr	r3, [r4, #4]
 80065e2:	bf08      	it	eq
 80065e4:	f8c8 1000 	streq.w	r1, [r8]
 80065e8:	5162      	str	r2, [r4, r5]
 80065ea:	604b      	str	r3, [r1, #4]
 80065ec:	4638      	mov	r0, r7
 80065ee:	f104 060b 	add.w	r6, r4, #11
 80065f2:	f000 f829 	bl	8006648 <__malloc_unlock>
 80065f6:	f026 0607 	bic.w	r6, r6, #7
 80065fa:	1d23      	adds	r3, r4, #4
 80065fc:	1af2      	subs	r2, r6, r3
 80065fe:	d0ae      	beq.n	800655e <_malloc_r+0x22>
 8006600:	1b9b      	subs	r3, r3, r6
 8006602:	50a3      	str	r3, [r4, r2]
 8006604:	e7ab      	b.n	800655e <_malloc_r+0x22>
 8006606:	42a3      	cmp	r3, r4
 8006608:	6862      	ldr	r2, [r4, #4]
 800660a:	d1dd      	bne.n	80065c8 <_malloc_r+0x8c>
 800660c:	f8c8 2000 	str.w	r2, [r8]
 8006610:	e7ec      	b.n	80065ec <_malloc_r+0xb0>
 8006612:	4623      	mov	r3, r4
 8006614:	6864      	ldr	r4, [r4, #4]
 8006616:	e7ac      	b.n	8006572 <_malloc_r+0x36>
 8006618:	4634      	mov	r4, r6
 800661a:	6876      	ldr	r6, [r6, #4]
 800661c:	e7b4      	b.n	8006588 <_malloc_r+0x4c>
 800661e:	4613      	mov	r3, r2
 8006620:	e7cc      	b.n	80065bc <_malloc_r+0x80>
 8006622:	230c      	movs	r3, #12
 8006624:	603b      	str	r3, [r7, #0]
 8006626:	4638      	mov	r0, r7
 8006628:	f000 f80e 	bl	8006648 <__malloc_unlock>
 800662c:	e797      	b.n	800655e <_malloc_r+0x22>
 800662e:	6025      	str	r5, [r4, #0]
 8006630:	e7dc      	b.n	80065ec <_malloc_r+0xb0>
 8006632:	605b      	str	r3, [r3, #4]
 8006634:	deff      	udf	#255	; 0xff
 8006636:	bf00      	nop
 8006638:	20000588 	.word	0x20000588

0800663c <__malloc_lock>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__malloc_lock+0x8>)
 800663e:	f7ff b886 	b.w	800574e <__retarget_lock_acquire_recursive>
 8006642:	bf00      	nop
 8006644:	20000584 	.word	0x20000584

08006648 <__malloc_unlock>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__malloc_unlock+0x8>)
 800664a:	f7ff b881 	b.w	8005750 <__retarget_lock_release_recursive>
 800664e:	bf00      	nop
 8006650:	20000584 	.word	0x20000584

08006654 <_Balloc>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	69c6      	ldr	r6, [r0, #28]
 8006658:	4604      	mov	r4, r0
 800665a:	460d      	mov	r5, r1
 800665c:	b976      	cbnz	r6, 800667c <_Balloc+0x28>
 800665e:	2010      	movs	r0, #16
 8006660:	f7ff ff44 	bl	80064ec <malloc>
 8006664:	4602      	mov	r2, r0
 8006666:	61e0      	str	r0, [r4, #28]
 8006668:	b920      	cbnz	r0, 8006674 <_Balloc+0x20>
 800666a:	4b18      	ldr	r3, [pc, #96]	; (80066cc <_Balloc+0x78>)
 800666c:	4818      	ldr	r0, [pc, #96]	; (80066d0 <_Balloc+0x7c>)
 800666e:	216b      	movs	r1, #107	; 0x6b
 8006670:	f001 fd8e 	bl	8008190 <__assert_func>
 8006674:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006678:	6006      	str	r6, [r0, #0]
 800667a:	60c6      	str	r6, [r0, #12]
 800667c:	69e6      	ldr	r6, [r4, #28]
 800667e:	68f3      	ldr	r3, [r6, #12]
 8006680:	b183      	cbz	r3, 80066a4 <_Balloc+0x50>
 8006682:	69e3      	ldr	r3, [r4, #28]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800668a:	b9b8      	cbnz	r0, 80066bc <_Balloc+0x68>
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f605 	lsl.w	r6, r1, r5
 8006692:	1d72      	adds	r2, r6, #5
 8006694:	0092      	lsls	r2, r2, #2
 8006696:	4620      	mov	r0, r4
 8006698:	f001 fd98 	bl	80081cc <_calloc_r>
 800669c:	b160      	cbz	r0, 80066b8 <_Balloc+0x64>
 800669e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80066a2:	e00e      	b.n	80066c2 <_Balloc+0x6e>
 80066a4:	2221      	movs	r2, #33	; 0x21
 80066a6:	2104      	movs	r1, #4
 80066a8:	4620      	mov	r0, r4
 80066aa:	f001 fd8f 	bl	80081cc <_calloc_r>
 80066ae:	69e3      	ldr	r3, [r4, #28]
 80066b0:	60f0      	str	r0, [r6, #12]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e4      	bne.n	8006682 <_Balloc+0x2e>
 80066b8:	2000      	movs	r0, #0
 80066ba:	bd70      	pop	{r4, r5, r6, pc}
 80066bc:	6802      	ldr	r2, [r0, #0]
 80066be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80066c2:	2300      	movs	r3, #0
 80066c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80066c8:	e7f7      	b.n	80066ba <_Balloc+0x66>
 80066ca:	bf00      	nop
 80066cc:	08008f3e 	.word	0x08008f3e
 80066d0:	08008fbe 	.word	0x08008fbe

080066d4 <_Bfree>:
 80066d4:	b570      	push	{r4, r5, r6, lr}
 80066d6:	69c6      	ldr	r6, [r0, #28]
 80066d8:	4605      	mov	r5, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	b976      	cbnz	r6, 80066fc <_Bfree+0x28>
 80066de:	2010      	movs	r0, #16
 80066e0:	f7ff ff04 	bl	80064ec <malloc>
 80066e4:	4602      	mov	r2, r0
 80066e6:	61e8      	str	r0, [r5, #28]
 80066e8:	b920      	cbnz	r0, 80066f4 <_Bfree+0x20>
 80066ea:	4b09      	ldr	r3, [pc, #36]	; (8006710 <_Bfree+0x3c>)
 80066ec:	4809      	ldr	r0, [pc, #36]	; (8006714 <_Bfree+0x40>)
 80066ee:	218f      	movs	r1, #143	; 0x8f
 80066f0:	f001 fd4e 	bl	8008190 <__assert_func>
 80066f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066f8:	6006      	str	r6, [r0, #0]
 80066fa:	60c6      	str	r6, [r0, #12]
 80066fc:	b13c      	cbz	r4, 800670e <_Bfree+0x3a>
 80066fe:	69eb      	ldr	r3, [r5, #28]
 8006700:	6862      	ldr	r2, [r4, #4]
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006708:	6021      	str	r1, [r4, #0]
 800670a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800670e:	bd70      	pop	{r4, r5, r6, pc}
 8006710:	08008f3e 	.word	0x08008f3e
 8006714:	08008fbe 	.word	0x08008fbe

08006718 <__multadd>:
 8006718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800671c:	690d      	ldr	r5, [r1, #16]
 800671e:	4607      	mov	r7, r0
 8006720:	460c      	mov	r4, r1
 8006722:	461e      	mov	r6, r3
 8006724:	f101 0c14 	add.w	ip, r1, #20
 8006728:	2000      	movs	r0, #0
 800672a:	f8dc 3000 	ldr.w	r3, [ip]
 800672e:	b299      	uxth	r1, r3
 8006730:	fb02 6101 	mla	r1, r2, r1, r6
 8006734:	0c1e      	lsrs	r6, r3, #16
 8006736:	0c0b      	lsrs	r3, r1, #16
 8006738:	fb02 3306 	mla	r3, r2, r6, r3
 800673c:	b289      	uxth	r1, r1
 800673e:	3001      	adds	r0, #1
 8006740:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006744:	4285      	cmp	r5, r0
 8006746:	f84c 1b04 	str.w	r1, [ip], #4
 800674a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800674e:	dcec      	bgt.n	800672a <__multadd+0x12>
 8006750:	b30e      	cbz	r6, 8006796 <__multadd+0x7e>
 8006752:	68a3      	ldr	r3, [r4, #8]
 8006754:	42ab      	cmp	r3, r5
 8006756:	dc19      	bgt.n	800678c <__multadd+0x74>
 8006758:	6861      	ldr	r1, [r4, #4]
 800675a:	4638      	mov	r0, r7
 800675c:	3101      	adds	r1, #1
 800675e:	f7ff ff79 	bl	8006654 <_Balloc>
 8006762:	4680      	mov	r8, r0
 8006764:	b928      	cbnz	r0, 8006772 <__multadd+0x5a>
 8006766:	4602      	mov	r2, r0
 8006768:	4b0c      	ldr	r3, [pc, #48]	; (800679c <__multadd+0x84>)
 800676a:	480d      	ldr	r0, [pc, #52]	; (80067a0 <__multadd+0x88>)
 800676c:	21ba      	movs	r1, #186	; 0xba
 800676e:	f001 fd0f 	bl	8008190 <__assert_func>
 8006772:	6922      	ldr	r2, [r4, #16]
 8006774:	3202      	adds	r2, #2
 8006776:	f104 010c 	add.w	r1, r4, #12
 800677a:	0092      	lsls	r2, r2, #2
 800677c:	300c      	adds	r0, #12
 800677e:	f001 fcef 	bl	8008160 <memcpy>
 8006782:	4621      	mov	r1, r4
 8006784:	4638      	mov	r0, r7
 8006786:	f7ff ffa5 	bl	80066d4 <_Bfree>
 800678a:	4644      	mov	r4, r8
 800678c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006790:	3501      	adds	r5, #1
 8006792:	615e      	str	r6, [r3, #20]
 8006794:	6125      	str	r5, [r4, #16]
 8006796:	4620      	mov	r0, r4
 8006798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800679c:	08008fad 	.word	0x08008fad
 80067a0:	08008fbe 	.word	0x08008fbe

080067a4 <__s2b>:
 80067a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067a8:	460c      	mov	r4, r1
 80067aa:	4615      	mov	r5, r2
 80067ac:	461f      	mov	r7, r3
 80067ae:	2209      	movs	r2, #9
 80067b0:	3308      	adds	r3, #8
 80067b2:	4606      	mov	r6, r0
 80067b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80067b8:	2100      	movs	r1, #0
 80067ba:	2201      	movs	r2, #1
 80067bc:	429a      	cmp	r2, r3
 80067be:	db09      	blt.n	80067d4 <__s2b+0x30>
 80067c0:	4630      	mov	r0, r6
 80067c2:	f7ff ff47 	bl	8006654 <_Balloc>
 80067c6:	b940      	cbnz	r0, 80067da <__s2b+0x36>
 80067c8:	4602      	mov	r2, r0
 80067ca:	4b19      	ldr	r3, [pc, #100]	; (8006830 <__s2b+0x8c>)
 80067cc:	4819      	ldr	r0, [pc, #100]	; (8006834 <__s2b+0x90>)
 80067ce:	21d3      	movs	r1, #211	; 0xd3
 80067d0:	f001 fcde 	bl	8008190 <__assert_func>
 80067d4:	0052      	lsls	r2, r2, #1
 80067d6:	3101      	adds	r1, #1
 80067d8:	e7f0      	b.n	80067bc <__s2b+0x18>
 80067da:	9b08      	ldr	r3, [sp, #32]
 80067dc:	6143      	str	r3, [r0, #20]
 80067de:	2d09      	cmp	r5, #9
 80067e0:	f04f 0301 	mov.w	r3, #1
 80067e4:	6103      	str	r3, [r0, #16]
 80067e6:	dd16      	ble.n	8006816 <__s2b+0x72>
 80067e8:	f104 0909 	add.w	r9, r4, #9
 80067ec:	46c8      	mov	r8, r9
 80067ee:	442c      	add	r4, r5
 80067f0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80067f4:	4601      	mov	r1, r0
 80067f6:	3b30      	subs	r3, #48	; 0x30
 80067f8:	220a      	movs	r2, #10
 80067fa:	4630      	mov	r0, r6
 80067fc:	f7ff ff8c 	bl	8006718 <__multadd>
 8006800:	45a0      	cmp	r8, r4
 8006802:	d1f5      	bne.n	80067f0 <__s2b+0x4c>
 8006804:	f1a5 0408 	sub.w	r4, r5, #8
 8006808:	444c      	add	r4, r9
 800680a:	1b2d      	subs	r5, r5, r4
 800680c:	1963      	adds	r3, r4, r5
 800680e:	42bb      	cmp	r3, r7
 8006810:	db04      	blt.n	800681c <__s2b+0x78>
 8006812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006816:	340a      	adds	r4, #10
 8006818:	2509      	movs	r5, #9
 800681a:	e7f6      	b.n	800680a <__s2b+0x66>
 800681c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006820:	4601      	mov	r1, r0
 8006822:	3b30      	subs	r3, #48	; 0x30
 8006824:	220a      	movs	r2, #10
 8006826:	4630      	mov	r0, r6
 8006828:	f7ff ff76 	bl	8006718 <__multadd>
 800682c:	e7ee      	b.n	800680c <__s2b+0x68>
 800682e:	bf00      	nop
 8006830:	08008fad 	.word	0x08008fad
 8006834:	08008fbe 	.word	0x08008fbe

08006838 <__hi0bits>:
 8006838:	0c03      	lsrs	r3, r0, #16
 800683a:	041b      	lsls	r3, r3, #16
 800683c:	b9d3      	cbnz	r3, 8006874 <__hi0bits+0x3c>
 800683e:	0400      	lsls	r0, r0, #16
 8006840:	2310      	movs	r3, #16
 8006842:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006846:	bf04      	itt	eq
 8006848:	0200      	lsleq	r0, r0, #8
 800684a:	3308      	addeq	r3, #8
 800684c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006850:	bf04      	itt	eq
 8006852:	0100      	lsleq	r0, r0, #4
 8006854:	3304      	addeq	r3, #4
 8006856:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800685a:	bf04      	itt	eq
 800685c:	0080      	lsleq	r0, r0, #2
 800685e:	3302      	addeq	r3, #2
 8006860:	2800      	cmp	r0, #0
 8006862:	db05      	blt.n	8006870 <__hi0bits+0x38>
 8006864:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006868:	f103 0301 	add.w	r3, r3, #1
 800686c:	bf08      	it	eq
 800686e:	2320      	moveq	r3, #32
 8006870:	4618      	mov	r0, r3
 8006872:	4770      	bx	lr
 8006874:	2300      	movs	r3, #0
 8006876:	e7e4      	b.n	8006842 <__hi0bits+0xa>

08006878 <__lo0bits>:
 8006878:	6803      	ldr	r3, [r0, #0]
 800687a:	f013 0207 	ands.w	r2, r3, #7
 800687e:	d00c      	beq.n	800689a <__lo0bits+0x22>
 8006880:	07d9      	lsls	r1, r3, #31
 8006882:	d422      	bmi.n	80068ca <__lo0bits+0x52>
 8006884:	079a      	lsls	r2, r3, #30
 8006886:	bf49      	itett	mi
 8006888:	085b      	lsrmi	r3, r3, #1
 800688a:	089b      	lsrpl	r3, r3, #2
 800688c:	6003      	strmi	r3, [r0, #0]
 800688e:	2201      	movmi	r2, #1
 8006890:	bf5c      	itt	pl
 8006892:	6003      	strpl	r3, [r0, #0]
 8006894:	2202      	movpl	r2, #2
 8006896:	4610      	mov	r0, r2
 8006898:	4770      	bx	lr
 800689a:	b299      	uxth	r1, r3
 800689c:	b909      	cbnz	r1, 80068a2 <__lo0bits+0x2a>
 800689e:	0c1b      	lsrs	r3, r3, #16
 80068a0:	2210      	movs	r2, #16
 80068a2:	b2d9      	uxtb	r1, r3
 80068a4:	b909      	cbnz	r1, 80068aa <__lo0bits+0x32>
 80068a6:	3208      	adds	r2, #8
 80068a8:	0a1b      	lsrs	r3, r3, #8
 80068aa:	0719      	lsls	r1, r3, #28
 80068ac:	bf04      	itt	eq
 80068ae:	091b      	lsreq	r3, r3, #4
 80068b0:	3204      	addeq	r2, #4
 80068b2:	0799      	lsls	r1, r3, #30
 80068b4:	bf04      	itt	eq
 80068b6:	089b      	lsreq	r3, r3, #2
 80068b8:	3202      	addeq	r2, #2
 80068ba:	07d9      	lsls	r1, r3, #31
 80068bc:	d403      	bmi.n	80068c6 <__lo0bits+0x4e>
 80068be:	085b      	lsrs	r3, r3, #1
 80068c0:	f102 0201 	add.w	r2, r2, #1
 80068c4:	d003      	beq.n	80068ce <__lo0bits+0x56>
 80068c6:	6003      	str	r3, [r0, #0]
 80068c8:	e7e5      	b.n	8006896 <__lo0bits+0x1e>
 80068ca:	2200      	movs	r2, #0
 80068cc:	e7e3      	b.n	8006896 <__lo0bits+0x1e>
 80068ce:	2220      	movs	r2, #32
 80068d0:	e7e1      	b.n	8006896 <__lo0bits+0x1e>
	...

080068d4 <__i2b>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	460c      	mov	r4, r1
 80068d8:	2101      	movs	r1, #1
 80068da:	f7ff febb 	bl	8006654 <_Balloc>
 80068de:	4602      	mov	r2, r0
 80068e0:	b928      	cbnz	r0, 80068ee <__i2b+0x1a>
 80068e2:	4b05      	ldr	r3, [pc, #20]	; (80068f8 <__i2b+0x24>)
 80068e4:	4805      	ldr	r0, [pc, #20]	; (80068fc <__i2b+0x28>)
 80068e6:	f240 1145 	movw	r1, #325	; 0x145
 80068ea:	f001 fc51 	bl	8008190 <__assert_func>
 80068ee:	2301      	movs	r3, #1
 80068f0:	6144      	str	r4, [r0, #20]
 80068f2:	6103      	str	r3, [r0, #16]
 80068f4:	bd10      	pop	{r4, pc}
 80068f6:	bf00      	nop
 80068f8:	08008fad 	.word	0x08008fad
 80068fc:	08008fbe 	.word	0x08008fbe

08006900 <__multiply>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	4691      	mov	r9, r2
 8006906:	690a      	ldr	r2, [r1, #16]
 8006908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800690c:	429a      	cmp	r2, r3
 800690e:	bfb8      	it	lt
 8006910:	460b      	movlt	r3, r1
 8006912:	460c      	mov	r4, r1
 8006914:	bfbc      	itt	lt
 8006916:	464c      	movlt	r4, r9
 8006918:	4699      	movlt	r9, r3
 800691a:	6927      	ldr	r7, [r4, #16]
 800691c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006920:	68a3      	ldr	r3, [r4, #8]
 8006922:	6861      	ldr	r1, [r4, #4]
 8006924:	eb07 060a 	add.w	r6, r7, sl
 8006928:	42b3      	cmp	r3, r6
 800692a:	b085      	sub	sp, #20
 800692c:	bfb8      	it	lt
 800692e:	3101      	addlt	r1, #1
 8006930:	f7ff fe90 	bl	8006654 <_Balloc>
 8006934:	b930      	cbnz	r0, 8006944 <__multiply+0x44>
 8006936:	4602      	mov	r2, r0
 8006938:	4b44      	ldr	r3, [pc, #272]	; (8006a4c <__multiply+0x14c>)
 800693a:	4845      	ldr	r0, [pc, #276]	; (8006a50 <__multiply+0x150>)
 800693c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006940:	f001 fc26 	bl	8008190 <__assert_func>
 8006944:	f100 0514 	add.w	r5, r0, #20
 8006948:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800694c:	462b      	mov	r3, r5
 800694e:	2200      	movs	r2, #0
 8006950:	4543      	cmp	r3, r8
 8006952:	d321      	bcc.n	8006998 <__multiply+0x98>
 8006954:	f104 0314 	add.w	r3, r4, #20
 8006958:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800695c:	f109 0314 	add.w	r3, r9, #20
 8006960:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006964:	9202      	str	r2, [sp, #8]
 8006966:	1b3a      	subs	r2, r7, r4
 8006968:	3a15      	subs	r2, #21
 800696a:	f022 0203 	bic.w	r2, r2, #3
 800696e:	3204      	adds	r2, #4
 8006970:	f104 0115 	add.w	r1, r4, #21
 8006974:	428f      	cmp	r7, r1
 8006976:	bf38      	it	cc
 8006978:	2204      	movcc	r2, #4
 800697a:	9201      	str	r2, [sp, #4]
 800697c:	9a02      	ldr	r2, [sp, #8]
 800697e:	9303      	str	r3, [sp, #12]
 8006980:	429a      	cmp	r2, r3
 8006982:	d80c      	bhi.n	800699e <__multiply+0x9e>
 8006984:	2e00      	cmp	r6, #0
 8006986:	dd03      	ble.n	8006990 <__multiply+0x90>
 8006988:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800698c:	2b00      	cmp	r3, #0
 800698e:	d05b      	beq.n	8006a48 <__multiply+0x148>
 8006990:	6106      	str	r6, [r0, #16]
 8006992:	b005      	add	sp, #20
 8006994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006998:	f843 2b04 	str.w	r2, [r3], #4
 800699c:	e7d8      	b.n	8006950 <__multiply+0x50>
 800699e:	f8b3 a000 	ldrh.w	sl, [r3]
 80069a2:	f1ba 0f00 	cmp.w	sl, #0
 80069a6:	d024      	beq.n	80069f2 <__multiply+0xf2>
 80069a8:	f104 0e14 	add.w	lr, r4, #20
 80069ac:	46a9      	mov	r9, r5
 80069ae:	f04f 0c00 	mov.w	ip, #0
 80069b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80069b6:	f8d9 1000 	ldr.w	r1, [r9]
 80069ba:	fa1f fb82 	uxth.w	fp, r2
 80069be:	b289      	uxth	r1, r1
 80069c0:	fb0a 110b 	mla	r1, sl, fp, r1
 80069c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80069c8:	f8d9 2000 	ldr.w	r2, [r9]
 80069cc:	4461      	add	r1, ip
 80069ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80069d2:	fb0a c20b 	mla	r2, sl, fp, ip
 80069d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80069da:	b289      	uxth	r1, r1
 80069dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80069e0:	4577      	cmp	r7, lr
 80069e2:	f849 1b04 	str.w	r1, [r9], #4
 80069e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80069ea:	d8e2      	bhi.n	80069b2 <__multiply+0xb2>
 80069ec:	9a01      	ldr	r2, [sp, #4]
 80069ee:	f845 c002 	str.w	ip, [r5, r2]
 80069f2:	9a03      	ldr	r2, [sp, #12]
 80069f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80069f8:	3304      	adds	r3, #4
 80069fa:	f1b9 0f00 	cmp.w	r9, #0
 80069fe:	d021      	beq.n	8006a44 <__multiply+0x144>
 8006a00:	6829      	ldr	r1, [r5, #0]
 8006a02:	f104 0c14 	add.w	ip, r4, #20
 8006a06:	46ae      	mov	lr, r5
 8006a08:	f04f 0a00 	mov.w	sl, #0
 8006a0c:	f8bc b000 	ldrh.w	fp, [ip]
 8006a10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a14:	fb09 220b 	mla	r2, r9, fp, r2
 8006a18:	4452      	add	r2, sl
 8006a1a:	b289      	uxth	r1, r1
 8006a1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a20:	f84e 1b04 	str.w	r1, [lr], #4
 8006a24:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006a28:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a2c:	f8be 1000 	ldrh.w	r1, [lr]
 8006a30:	fb09 110a 	mla	r1, r9, sl, r1
 8006a34:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006a38:	4567      	cmp	r7, ip
 8006a3a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a3e:	d8e5      	bhi.n	8006a0c <__multiply+0x10c>
 8006a40:	9a01      	ldr	r2, [sp, #4]
 8006a42:	50a9      	str	r1, [r5, r2]
 8006a44:	3504      	adds	r5, #4
 8006a46:	e799      	b.n	800697c <__multiply+0x7c>
 8006a48:	3e01      	subs	r6, #1
 8006a4a:	e79b      	b.n	8006984 <__multiply+0x84>
 8006a4c:	08008fad 	.word	0x08008fad
 8006a50:	08008fbe 	.word	0x08008fbe

08006a54 <__pow5mult>:
 8006a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a58:	4615      	mov	r5, r2
 8006a5a:	f012 0203 	ands.w	r2, r2, #3
 8006a5e:	4606      	mov	r6, r0
 8006a60:	460f      	mov	r7, r1
 8006a62:	d007      	beq.n	8006a74 <__pow5mult+0x20>
 8006a64:	4c25      	ldr	r4, [pc, #148]	; (8006afc <__pow5mult+0xa8>)
 8006a66:	3a01      	subs	r2, #1
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a6e:	f7ff fe53 	bl	8006718 <__multadd>
 8006a72:	4607      	mov	r7, r0
 8006a74:	10ad      	asrs	r5, r5, #2
 8006a76:	d03d      	beq.n	8006af4 <__pow5mult+0xa0>
 8006a78:	69f4      	ldr	r4, [r6, #28]
 8006a7a:	b97c      	cbnz	r4, 8006a9c <__pow5mult+0x48>
 8006a7c:	2010      	movs	r0, #16
 8006a7e:	f7ff fd35 	bl	80064ec <malloc>
 8006a82:	4602      	mov	r2, r0
 8006a84:	61f0      	str	r0, [r6, #28]
 8006a86:	b928      	cbnz	r0, 8006a94 <__pow5mult+0x40>
 8006a88:	4b1d      	ldr	r3, [pc, #116]	; (8006b00 <__pow5mult+0xac>)
 8006a8a:	481e      	ldr	r0, [pc, #120]	; (8006b04 <__pow5mult+0xb0>)
 8006a8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006a90:	f001 fb7e 	bl	8008190 <__assert_func>
 8006a94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a98:	6004      	str	r4, [r0, #0]
 8006a9a:	60c4      	str	r4, [r0, #12]
 8006a9c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006aa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006aa4:	b94c      	cbnz	r4, 8006aba <__pow5mult+0x66>
 8006aa6:	f240 2171 	movw	r1, #625	; 0x271
 8006aaa:	4630      	mov	r0, r6
 8006aac:	f7ff ff12 	bl	80068d4 <__i2b>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	6003      	str	r3, [r0, #0]
 8006aba:	f04f 0900 	mov.w	r9, #0
 8006abe:	07eb      	lsls	r3, r5, #31
 8006ac0:	d50a      	bpl.n	8006ad8 <__pow5mult+0x84>
 8006ac2:	4639      	mov	r1, r7
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	f7ff ff1a 	bl	8006900 <__multiply>
 8006acc:	4639      	mov	r1, r7
 8006ace:	4680      	mov	r8, r0
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f7ff fdff 	bl	80066d4 <_Bfree>
 8006ad6:	4647      	mov	r7, r8
 8006ad8:	106d      	asrs	r5, r5, #1
 8006ada:	d00b      	beq.n	8006af4 <__pow5mult+0xa0>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	b938      	cbnz	r0, 8006af0 <__pow5mult+0x9c>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	f7ff ff0b 	bl	8006900 <__multiply>
 8006aea:	6020      	str	r0, [r4, #0]
 8006aec:	f8c0 9000 	str.w	r9, [r0]
 8006af0:	4604      	mov	r4, r0
 8006af2:	e7e4      	b.n	8006abe <__pow5mult+0x6a>
 8006af4:	4638      	mov	r0, r7
 8006af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afa:	bf00      	nop
 8006afc:	08009108 	.word	0x08009108
 8006b00:	08008f3e 	.word	0x08008f3e
 8006b04:	08008fbe 	.word	0x08008fbe

08006b08 <__lshift>:
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	6849      	ldr	r1, [r1, #4]
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b16:	68a3      	ldr	r3, [r4, #8]
 8006b18:	4607      	mov	r7, r0
 8006b1a:	4691      	mov	r9, r2
 8006b1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b20:	f108 0601 	add.w	r6, r8, #1
 8006b24:	42b3      	cmp	r3, r6
 8006b26:	db0b      	blt.n	8006b40 <__lshift+0x38>
 8006b28:	4638      	mov	r0, r7
 8006b2a:	f7ff fd93 	bl	8006654 <_Balloc>
 8006b2e:	4605      	mov	r5, r0
 8006b30:	b948      	cbnz	r0, 8006b46 <__lshift+0x3e>
 8006b32:	4602      	mov	r2, r0
 8006b34:	4b28      	ldr	r3, [pc, #160]	; (8006bd8 <__lshift+0xd0>)
 8006b36:	4829      	ldr	r0, [pc, #164]	; (8006bdc <__lshift+0xd4>)
 8006b38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006b3c:	f001 fb28 	bl	8008190 <__assert_func>
 8006b40:	3101      	adds	r1, #1
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	e7ee      	b.n	8006b24 <__lshift+0x1c>
 8006b46:	2300      	movs	r3, #0
 8006b48:	f100 0114 	add.w	r1, r0, #20
 8006b4c:	f100 0210 	add.w	r2, r0, #16
 8006b50:	4618      	mov	r0, r3
 8006b52:	4553      	cmp	r3, sl
 8006b54:	db33      	blt.n	8006bbe <__lshift+0xb6>
 8006b56:	6920      	ldr	r0, [r4, #16]
 8006b58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b5c:	f104 0314 	add.w	r3, r4, #20
 8006b60:	f019 091f 	ands.w	r9, r9, #31
 8006b64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b6c:	d02b      	beq.n	8006bc6 <__lshift+0xbe>
 8006b6e:	f1c9 0e20 	rsb	lr, r9, #32
 8006b72:	468a      	mov	sl, r1
 8006b74:	2200      	movs	r2, #0
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	fa00 f009 	lsl.w	r0, r0, r9
 8006b7c:	4310      	orrs	r0, r2
 8006b7e:	f84a 0b04 	str.w	r0, [sl], #4
 8006b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b86:	459c      	cmp	ip, r3
 8006b88:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b8c:	d8f3      	bhi.n	8006b76 <__lshift+0x6e>
 8006b8e:	ebac 0304 	sub.w	r3, ip, r4
 8006b92:	3b15      	subs	r3, #21
 8006b94:	f023 0303 	bic.w	r3, r3, #3
 8006b98:	3304      	adds	r3, #4
 8006b9a:	f104 0015 	add.w	r0, r4, #21
 8006b9e:	4584      	cmp	ip, r0
 8006ba0:	bf38      	it	cc
 8006ba2:	2304      	movcc	r3, #4
 8006ba4:	50ca      	str	r2, [r1, r3]
 8006ba6:	b10a      	cbz	r2, 8006bac <__lshift+0xa4>
 8006ba8:	f108 0602 	add.w	r6, r8, #2
 8006bac:	3e01      	subs	r6, #1
 8006bae:	4638      	mov	r0, r7
 8006bb0:	612e      	str	r6, [r5, #16]
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	f7ff fd8e 	bl	80066d4 <_Bfree>
 8006bb8:	4628      	mov	r0, r5
 8006bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	e7c5      	b.n	8006b52 <__lshift+0x4a>
 8006bc6:	3904      	subs	r1, #4
 8006bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bd0:	459c      	cmp	ip, r3
 8006bd2:	d8f9      	bhi.n	8006bc8 <__lshift+0xc0>
 8006bd4:	e7ea      	b.n	8006bac <__lshift+0xa4>
 8006bd6:	bf00      	nop
 8006bd8:	08008fad 	.word	0x08008fad
 8006bdc:	08008fbe 	.word	0x08008fbe

08006be0 <__mcmp>:
 8006be0:	b530      	push	{r4, r5, lr}
 8006be2:	6902      	ldr	r2, [r0, #16]
 8006be4:	690c      	ldr	r4, [r1, #16]
 8006be6:	1b12      	subs	r2, r2, r4
 8006be8:	d10e      	bne.n	8006c08 <__mcmp+0x28>
 8006bea:	f100 0314 	add.w	r3, r0, #20
 8006bee:	3114      	adds	r1, #20
 8006bf0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006bf4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006bf8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006bfc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c00:	42a5      	cmp	r5, r4
 8006c02:	d003      	beq.n	8006c0c <__mcmp+0x2c>
 8006c04:	d305      	bcc.n	8006c12 <__mcmp+0x32>
 8006c06:	2201      	movs	r2, #1
 8006c08:	4610      	mov	r0, r2
 8006c0a:	bd30      	pop	{r4, r5, pc}
 8006c0c:	4283      	cmp	r3, r0
 8006c0e:	d3f3      	bcc.n	8006bf8 <__mcmp+0x18>
 8006c10:	e7fa      	b.n	8006c08 <__mcmp+0x28>
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295
 8006c16:	e7f7      	b.n	8006c08 <__mcmp+0x28>

08006c18 <__mdiff>:
 8006c18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	4606      	mov	r6, r0
 8006c20:	4611      	mov	r1, r2
 8006c22:	4620      	mov	r0, r4
 8006c24:	4690      	mov	r8, r2
 8006c26:	f7ff ffdb 	bl	8006be0 <__mcmp>
 8006c2a:	1e05      	subs	r5, r0, #0
 8006c2c:	d110      	bne.n	8006c50 <__mdiff+0x38>
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff fd0f 	bl	8006654 <_Balloc>
 8006c36:	b930      	cbnz	r0, 8006c46 <__mdiff+0x2e>
 8006c38:	4b3a      	ldr	r3, [pc, #232]	; (8006d24 <__mdiff+0x10c>)
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	f240 2137 	movw	r1, #567	; 0x237
 8006c40:	4839      	ldr	r0, [pc, #228]	; (8006d28 <__mdiff+0x110>)
 8006c42:	f001 faa5 	bl	8008190 <__assert_func>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c50:	bfa4      	itt	ge
 8006c52:	4643      	movge	r3, r8
 8006c54:	46a0      	movge	r8, r4
 8006c56:	4630      	mov	r0, r6
 8006c58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c5c:	bfa6      	itte	ge
 8006c5e:	461c      	movge	r4, r3
 8006c60:	2500      	movge	r5, #0
 8006c62:	2501      	movlt	r5, #1
 8006c64:	f7ff fcf6 	bl	8006654 <_Balloc>
 8006c68:	b920      	cbnz	r0, 8006c74 <__mdiff+0x5c>
 8006c6a:	4b2e      	ldr	r3, [pc, #184]	; (8006d24 <__mdiff+0x10c>)
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	f240 2145 	movw	r1, #581	; 0x245
 8006c72:	e7e5      	b.n	8006c40 <__mdiff+0x28>
 8006c74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006c78:	6926      	ldr	r6, [r4, #16]
 8006c7a:	60c5      	str	r5, [r0, #12]
 8006c7c:	f104 0914 	add.w	r9, r4, #20
 8006c80:	f108 0514 	add.w	r5, r8, #20
 8006c84:	f100 0e14 	add.w	lr, r0, #20
 8006c88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006c8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006c90:	f108 0210 	add.w	r2, r8, #16
 8006c94:	46f2      	mov	sl, lr
 8006c96:	2100      	movs	r1, #0
 8006c98:	f859 3b04 	ldr.w	r3, [r9], #4
 8006c9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ca0:	fa11 f88b 	uxtah	r8, r1, fp
 8006ca4:	b299      	uxth	r1, r3
 8006ca6:	0c1b      	lsrs	r3, r3, #16
 8006ca8:	eba8 0801 	sub.w	r8, r8, r1
 8006cac:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006cb0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006cb4:	fa1f f888 	uxth.w	r8, r8
 8006cb8:	1419      	asrs	r1, r3, #16
 8006cba:	454e      	cmp	r6, r9
 8006cbc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006cc0:	f84a 3b04 	str.w	r3, [sl], #4
 8006cc4:	d8e8      	bhi.n	8006c98 <__mdiff+0x80>
 8006cc6:	1b33      	subs	r3, r6, r4
 8006cc8:	3b15      	subs	r3, #21
 8006cca:	f023 0303 	bic.w	r3, r3, #3
 8006cce:	3304      	adds	r3, #4
 8006cd0:	3415      	adds	r4, #21
 8006cd2:	42a6      	cmp	r6, r4
 8006cd4:	bf38      	it	cc
 8006cd6:	2304      	movcc	r3, #4
 8006cd8:	441d      	add	r5, r3
 8006cda:	4473      	add	r3, lr
 8006cdc:	469e      	mov	lr, r3
 8006cde:	462e      	mov	r6, r5
 8006ce0:	4566      	cmp	r6, ip
 8006ce2:	d30e      	bcc.n	8006d02 <__mdiff+0xea>
 8006ce4:	f10c 0203 	add.w	r2, ip, #3
 8006ce8:	1b52      	subs	r2, r2, r5
 8006cea:	f022 0203 	bic.w	r2, r2, #3
 8006cee:	3d03      	subs	r5, #3
 8006cf0:	45ac      	cmp	ip, r5
 8006cf2:	bf38      	it	cc
 8006cf4:	2200      	movcc	r2, #0
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006cfc:	b17a      	cbz	r2, 8006d1e <__mdiff+0x106>
 8006cfe:	6107      	str	r7, [r0, #16]
 8006d00:	e7a4      	b.n	8006c4c <__mdiff+0x34>
 8006d02:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d06:	fa11 f288 	uxtah	r2, r1, r8
 8006d0a:	1414      	asrs	r4, r2, #16
 8006d0c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d10:	b292      	uxth	r2, r2
 8006d12:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d16:	f84e 2b04 	str.w	r2, [lr], #4
 8006d1a:	1421      	asrs	r1, r4, #16
 8006d1c:	e7e0      	b.n	8006ce0 <__mdiff+0xc8>
 8006d1e:	3f01      	subs	r7, #1
 8006d20:	e7ea      	b.n	8006cf8 <__mdiff+0xe0>
 8006d22:	bf00      	nop
 8006d24:	08008fad 	.word	0x08008fad
 8006d28:	08008fbe 	.word	0x08008fbe

08006d2c <__ulp>:
 8006d2c:	b082      	sub	sp, #8
 8006d2e:	ed8d 0b00 	vstr	d0, [sp]
 8006d32:	9a01      	ldr	r2, [sp, #4]
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <__ulp+0x48>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dc08      	bgt.n	8006d52 <__ulp+0x26>
 8006d40:	425b      	negs	r3, r3
 8006d42:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006d46:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006d4a:	da04      	bge.n	8006d56 <__ulp+0x2a>
 8006d4c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d50:	4113      	asrs	r3, r2
 8006d52:	2200      	movs	r2, #0
 8006d54:	e008      	b.n	8006d68 <__ulp+0x3c>
 8006d56:	f1a2 0314 	sub.w	r3, r2, #20
 8006d5a:	2b1e      	cmp	r3, #30
 8006d5c:	bfda      	itte	le
 8006d5e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006d62:	40da      	lsrle	r2, r3
 8006d64:	2201      	movgt	r2, #1
 8006d66:	2300      	movs	r3, #0
 8006d68:	4619      	mov	r1, r3
 8006d6a:	4610      	mov	r0, r2
 8006d6c:	ec41 0b10 	vmov	d0, r0, r1
 8006d70:	b002      	add	sp, #8
 8006d72:	4770      	bx	lr
 8006d74:	7ff00000 	.word	0x7ff00000

08006d78 <__b2d>:
 8006d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d7c:	6906      	ldr	r6, [r0, #16]
 8006d7e:	f100 0814 	add.w	r8, r0, #20
 8006d82:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006d86:	1f37      	subs	r7, r6, #4
 8006d88:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	f7ff fd53 	bl	8006838 <__hi0bits>
 8006d92:	f1c0 0320 	rsb	r3, r0, #32
 8006d96:	280a      	cmp	r0, #10
 8006d98:	600b      	str	r3, [r1, #0]
 8006d9a:	491b      	ldr	r1, [pc, #108]	; (8006e08 <__b2d+0x90>)
 8006d9c:	dc15      	bgt.n	8006dca <__b2d+0x52>
 8006d9e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006da2:	fa22 f30c 	lsr.w	r3, r2, ip
 8006da6:	45b8      	cmp	r8, r7
 8006da8:	ea43 0501 	orr.w	r5, r3, r1
 8006dac:	bf34      	ite	cc
 8006dae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006db2:	2300      	movcs	r3, #0
 8006db4:	3015      	adds	r0, #21
 8006db6:	fa02 f000 	lsl.w	r0, r2, r0
 8006dba:	fa23 f30c 	lsr.w	r3, r3, ip
 8006dbe:	4303      	orrs	r3, r0
 8006dc0:	461c      	mov	r4, r3
 8006dc2:	ec45 4b10 	vmov	d0, r4, r5
 8006dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dca:	45b8      	cmp	r8, r7
 8006dcc:	bf3a      	itte	cc
 8006dce:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006dd2:	f1a6 0708 	subcc.w	r7, r6, #8
 8006dd6:	2300      	movcs	r3, #0
 8006dd8:	380b      	subs	r0, #11
 8006dda:	d012      	beq.n	8006e02 <__b2d+0x8a>
 8006ddc:	f1c0 0120 	rsb	r1, r0, #32
 8006de0:	fa23 f401 	lsr.w	r4, r3, r1
 8006de4:	4082      	lsls	r2, r0
 8006de6:	4322      	orrs	r2, r4
 8006de8:	4547      	cmp	r7, r8
 8006dea:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006dee:	bf8c      	ite	hi
 8006df0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006df4:	2200      	movls	r2, #0
 8006df6:	4083      	lsls	r3, r0
 8006df8:	40ca      	lsrs	r2, r1
 8006dfa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	e7de      	b.n	8006dc0 <__b2d+0x48>
 8006e02:	ea42 0501 	orr.w	r5, r2, r1
 8006e06:	e7db      	b.n	8006dc0 <__b2d+0x48>
 8006e08:	3ff00000 	.word	0x3ff00000

08006e0c <__d2b>:
 8006e0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e10:	460f      	mov	r7, r1
 8006e12:	2101      	movs	r1, #1
 8006e14:	ec59 8b10 	vmov	r8, r9, d0
 8006e18:	4616      	mov	r6, r2
 8006e1a:	f7ff fc1b 	bl	8006654 <_Balloc>
 8006e1e:	4604      	mov	r4, r0
 8006e20:	b930      	cbnz	r0, 8006e30 <__d2b+0x24>
 8006e22:	4602      	mov	r2, r0
 8006e24:	4b24      	ldr	r3, [pc, #144]	; (8006eb8 <__d2b+0xac>)
 8006e26:	4825      	ldr	r0, [pc, #148]	; (8006ebc <__d2b+0xb0>)
 8006e28:	f240 310f 	movw	r1, #783	; 0x30f
 8006e2c:	f001 f9b0 	bl	8008190 <__assert_func>
 8006e30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e38:	bb2d      	cbnz	r5, 8006e86 <__d2b+0x7a>
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	f1b8 0300 	subs.w	r3, r8, #0
 8006e40:	d026      	beq.n	8006e90 <__d2b+0x84>
 8006e42:	4668      	mov	r0, sp
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	f7ff fd17 	bl	8006878 <__lo0bits>
 8006e4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e4e:	b1e8      	cbz	r0, 8006e8c <__d2b+0x80>
 8006e50:	f1c0 0320 	rsb	r3, r0, #32
 8006e54:	fa02 f303 	lsl.w	r3, r2, r3
 8006e58:	430b      	orrs	r3, r1
 8006e5a:	40c2      	lsrs	r2, r0
 8006e5c:	6163      	str	r3, [r4, #20]
 8006e5e:	9201      	str	r2, [sp, #4]
 8006e60:	9b01      	ldr	r3, [sp, #4]
 8006e62:	61a3      	str	r3, [r4, #24]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bf14      	ite	ne
 8006e68:	2202      	movne	r2, #2
 8006e6a:	2201      	moveq	r2, #1
 8006e6c:	6122      	str	r2, [r4, #16]
 8006e6e:	b1bd      	cbz	r5, 8006ea0 <__d2b+0x94>
 8006e70:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e74:	4405      	add	r5, r0
 8006e76:	603d      	str	r5, [r7, #0]
 8006e78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006e7c:	6030      	str	r0, [r6, #0]
 8006e7e:	4620      	mov	r0, r4
 8006e80:	b003      	add	sp, #12
 8006e82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006e8a:	e7d6      	b.n	8006e3a <__d2b+0x2e>
 8006e8c:	6161      	str	r1, [r4, #20]
 8006e8e:	e7e7      	b.n	8006e60 <__d2b+0x54>
 8006e90:	a801      	add	r0, sp, #4
 8006e92:	f7ff fcf1 	bl	8006878 <__lo0bits>
 8006e96:	9b01      	ldr	r3, [sp, #4]
 8006e98:	6163      	str	r3, [r4, #20]
 8006e9a:	3020      	adds	r0, #32
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	e7e5      	b.n	8006e6c <__d2b+0x60>
 8006ea0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ea4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ea8:	6038      	str	r0, [r7, #0]
 8006eaa:	6918      	ldr	r0, [r3, #16]
 8006eac:	f7ff fcc4 	bl	8006838 <__hi0bits>
 8006eb0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006eb4:	e7e2      	b.n	8006e7c <__d2b+0x70>
 8006eb6:	bf00      	nop
 8006eb8:	08008fad 	.word	0x08008fad
 8006ebc:	08008fbe 	.word	0x08008fbe

08006ec0 <__ratio>:
 8006ec0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec4:	4688      	mov	r8, r1
 8006ec6:	4669      	mov	r1, sp
 8006ec8:	4681      	mov	r9, r0
 8006eca:	f7ff ff55 	bl	8006d78 <__b2d>
 8006ece:	a901      	add	r1, sp, #4
 8006ed0:	4640      	mov	r0, r8
 8006ed2:	ec55 4b10 	vmov	r4, r5, d0
 8006ed6:	f7ff ff4f 	bl	8006d78 <__b2d>
 8006eda:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ede:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006ee2:	eba3 0c02 	sub.w	ip, r3, r2
 8006ee6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006eea:	1a9b      	subs	r3, r3, r2
 8006eec:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006ef0:	ec51 0b10 	vmov	r0, r1, d0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	bfd6      	itet	le
 8006ef8:	460a      	movle	r2, r1
 8006efa:	462a      	movgt	r2, r5
 8006efc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f00:	468b      	mov	fp, r1
 8006f02:	462f      	mov	r7, r5
 8006f04:	bfd4      	ite	le
 8006f06:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006f0a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006f0e:	4620      	mov	r0, r4
 8006f10:	ee10 2a10 	vmov	r2, s0
 8006f14:	465b      	mov	r3, fp
 8006f16:	4639      	mov	r1, r7
 8006f18:	f7f9 fcb8 	bl	800088c <__aeabi_ddiv>
 8006f1c:	ec41 0b10 	vmov	d0, r0, r1
 8006f20:	b003      	add	sp, #12
 8006f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f26 <__copybits>:
 8006f26:	3901      	subs	r1, #1
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	1149      	asrs	r1, r1, #5
 8006f2c:	6914      	ldr	r4, [r2, #16]
 8006f2e:	3101      	adds	r1, #1
 8006f30:	f102 0314 	add.w	r3, r2, #20
 8006f34:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f3c:	1f05      	subs	r5, r0, #4
 8006f3e:	42a3      	cmp	r3, r4
 8006f40:	d30c      	bcc.n	8006f5c <__copybits+0x36>
 8006f42:	1aa3      	subs	r3, r4, r2
 8006f44:	3b11      	subs	r3, #17
 8006f46:	f023 0303 	bic.w	r3, r3, #3
 8006f4a:	3211      	adds	r2, #17
 8006f4c:	42a2      	cmp	r2, r4
 8006f4e:	bf88      	it	hi
 8006f50:	2300      	movhi	r3, #0
 8006f52:	4418      	add	r0, r3
 8006f54:	2300      	movs	r3, #0
 8006f56:	4288      	cmp	r0, r1
 8006f58:	d305      	bcc.n	8006f66 <__copybits+0x40>
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006f60:	f845 6f04 	str.w	r6, [r5, #4]!
 8006f64:	e7eb      	b.n	8006f3e <__copybits+0x18>
 8006f66:	f840 3b04 	str.w	r3, [r0], #4
 8006f6a:	e7f4      	b.n	8006f56 <__copybits+0x30>

08006f6c <__any_on>:
 8006f6c:	f100 0214 	add.w	r2, r0, #20
 8006f70:	6900      	ldr	r0, [r0, #16]
 8006f72:	114b      	asrs	r3, r1, #5
 8006f74:	4298      	cmp	r0, r3
 8006f76:	b510      	push	{r4, lr}
 8006f78:	db11      	blt.n	8006f9e <__any_on+0x32>
 8006f7a:	dd0a      	ble.n	8006f92 <__any_on+0x26>
 8006f7c:	f011 011f 	ands.w	r1, r1, #31
 8006f80:	d007      	beq.n	8006f92 <__any_on+0x26>
 8006f82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006f86:	fa24 f001 	lsr.w	r0, r4, r1
 8006f8a:	fa00 f101 	lsl.w	r1, r0, r1
 8006f8e:	428c      	cmp	r4, r1
 8006f90:	d10b      	bne.n	8006faa <__any_on+0x3e>
 8006f92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d803      	bhi.n	8006fa2 <__any_on+0x36>
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	bd10      	pop	{r4, pc}
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	e7f7      	b.n	8006f92 <__any_on+0x26>
 8006fa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d0f5      	beq.n	8006f96 <__any_on+0x2a>
 8006faa:	2001      	movs	r0, #1
 8006fac:	e7f6      	b.n	8006f9c <__any_on+0x30>

08006fae <sulp>:
 8006fae:	b570      	push	{r4, r5, r6, lr}
 8006fb0:	4604      	mov	r4, r0
 8006fb2:	460d      	mov	r5, r1
 8006fb4:	ec45 4b10 	vmov	d0, r4, r5
 8006fb8:	4616      	mov	r6, r2
 8006fba:	f7ff feb7 	bl	8006d2c <__ulp>
 8006fbe:	ec51 0b10 	vmov	r0, r1, d0
 8006fc2:	b17e      	cbz	r6, 8006fe4 <sulp+0x36>
 8006fc4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fc8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	dd09      	ble.n	8006fe4 <sulp+0x36>
 8006fd0:	051b      	lsls	r3, r3, #20
 8006fd2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fd6:	2400      	movs	r4, #0
 8006fd8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fdc:	4622      	mov	r2, r4
 8006fde:	462b      	mov	r3, r5
 8006fe0:	f7f9 fb2a 	bl	8000638 <__aeabi_dmul>
 8006fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08006fe8 <_strtod_l>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	ed2d 8b02 	vpush	{d8}
 8006ff0:	b09b      	sub	sp, #108	; 0x6c
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	9213      	str	r2, [sp, #76]	; 0x4c
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	9216      	str	r2, [sp, #88]	; 0x58
 8006ffa:	460d      	mov	r5, r1
 8006ffc:	f04f 0800 	mov.w	r8, #0
 8007000:	f04f 0900 	mov.w	r9, #0
 8007004:	460a      	mov	r2, r1
 8007006:	9215      	str	r2, [sp, #84]	; 0x54
 8007008:	7811      	ldrb	r1, [r2, #0]
 800700a:	292b      	cmp	r1, #43	; 0x2b
 800700c:	d04c      	beq.n	80070a8 <_strtod_l+0xc0>
 800700e:	d83a      	bhi.n	8007086 <_strtod_l+0x9e>
 8007010:	290d      	cmp	r1, #13
 8007012:	d834      	bhi.n	800707e <_strtod_l+0x96>
 8007014:	2908      	cmp	r1, #8
 8007016:	d834      	bhi.n	8007082 <_strtod_l+0x9a>
 8007018:	2900      	cmp	r1, #0
 800701a:	d03d      	beq.n	8007098 <_strtod_l+0xb0>
 800701c:	2200      	movs	r2, #0
 800701e:	920a      	str	r2, [sp, #40]	; 0x28
 8007020:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007022:	7832      	ldrb	r2, [r6, #0]
 8007024:	2a30      	cmp	r2, #48	; 0x30
 8007026:	f040 80b4 	bne.w	8007192 <_strtod_l+0x1aa>
 800702a:	7872      	ldrb	r2, [r6, #1]
 800702c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007030:	2a58      	cmp	r2, #88	; 0x58
 8007032:	d170      	bne.n	8007116 <_strtod_l+0x12e>
 8007034:	9302      	str	r3, [sp, #8]
 8007036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	ab16      	add	r3, sp, #88	; 0x58
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	4a8e      	ldr	r2, [pc, #568]	; (8007278 <_strtod_l+0x290>)
 8007040:	ab17      	add	r3, sp, #92	; 0x5c
 8007042:	a915      	add	r1, sp, #84	; 0x54
 8007044:	4620      	mov	r0, r4
 8007046:	f001 f93f 	bl	80082c8 <__gethex>
 800704a:	f010 070f 	ands.w	r7, r0, #15
 800704e:	4605      	mov	r5, r0
 8007050:	d005      	beq.n	800705e <_strtod_l+0x76>
 8007052:	2f06      	cmp	r7, #6
 8007054:	d12a      	bne.n	80070ac <_strtod_l+0xc4>
 8007056:	3601      	adds	r6, #1
 8007058:	2300      	movs	r3, #0
 800705a:	9615      	str	r6, [sp, #84]	; 0x54
 800705c:	930a      	str	r3, [sp, #40]	; 0x28
 800705e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007060:	2b00      	cmp	r3, #0
 8007062:	f040 857f 	bne.w	8007b64 <_strtod_l+0xb7c>
 8007066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007068:	b1db      	cbz	r3, 80070a2 <_strtod_l+0xba>
 800706a:	4642      	mov	r2, r8
 800706c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007070:	ec43 2b10 	vmov	d0, r2, r3
 8007074:	b01b      	add	sp, #108	; 0x6c
 8007076:	ecbd 8b02 	vpop	{d8}
 800707a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707e:	2920      	cmp	r1, #32
 8007080:	d1cc      	bne.n	800701c <_strtod_l+0x34>
 8007082:	3201      	adds	r2, #1
 8007084:	e7bf      	b.n	8007006 <_strtod_l+0x1e>
 8007086:	292d      	cmp	r1, #45	; 0x2d
 8007088:	d1c8      	bne.n	800701c <_strtod_l+0x34>
 800708a:	2101      	movs	r1, #1
 800708c:	910a      	str	r1, [sp, #40]	; 0x28
 800708e:	1c51      	adds	r1, r2, #1
 8007090:	9115      	str	r1, [sp, #84]	; 0x54
 8007092:	7852      	ldrb	r2, [r2, #1]
 8007094:	2a00      	cmp	r2, #0
 8007096:	d1c3      	bne.n	8007020 <_strtod_l+0x38>
 8007098:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800709a:	9515      	str	r5, [sp, #84]	; 0x54
 800709c:	2b00      	cmp	r3, #0
 800709e:	f040 855f 	bne.w	8007b60 <_strtod_l+0xb78>
 80070a2:	4642      	mov	r2, r8
 80070a4:	464b      	mov	r3, r9
 80070a6:	e7e3      	b.n	8007070 <_strtod_l+0x88>
 80070a8:	2100      	movs	r1, #0
 80070aa:	e7ef      	b.n	800708c <_strtod_l+0xa4>
 80070ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80070ae:	b13a      	cbz	r2, 80070c0 <_strtod_l+0xd8>
 80070b0:	2135      	movs	r1, #53	; 0x35
 80070b2:	a818      	add	r0, sp, #96	; 0x60
 80070b4:	f7ff ff37 	bl	8006f26 <__copybits>
 80070b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80070ba:	4620      	mov	r0, r4
 80070bc:	f7ff fb0a 	bl	80066d4 <_Bfree>
 80070c0:	3f01      	subs	r7, #1
 80070c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070c4:	2f04      	cmp	r7, #4
 80070c6:	d806      	bhi.n	80070d6 <_strtod_l+0xee>
 80070c8:	e8df f007 	tbb	[pc, r7]
 80070cc:	201d0314 	.word	0x201d0314
 80070d0:	14          	.byte	0x14
 80070d1:	00          	.byte	0x00
 80070d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80070d6:	05e9      	lsls	r1, r5, #23
 80070d8:	bf48      	it	mi
 80070da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80070de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070e2:	0d1b      	lsrs	r3, r3, #20
 80070e4:	051b      	lsls	r3, r3, #20
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d1b9      	bne.n	800705e <_strtod_l+0x76>
 80070ea:	f7fe fb05 	bl	80056f8 <__errno>
 80070ee:	2322      	movs	r3, #34	; 0x22
 80070f0:	6003      	str	r3, [r0, #0]
 80070f2:	e7b4      	b.n	800705e <_strtod_l+0x76>
 80070f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80070f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007100:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007104:	e7e7      	b.n	80070d6 <_strtod_l+0xee>
 8007106:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007280 <_strtod_l+0x298>
 800710a:	e7e4      	b.n	80070d6 <_strtod_l+0xee>
 800710c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007110:	f04f 38ff 	mov.w	r8, #4294967295
 8007114:	e7df      	b.n	80070d6 <_strtod_l+0xee>
 8007116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	9215      	str	r2, [sp, #84]	; 0x54
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b30      	cmp	r3, #48	; 0x30
 8007120:	d0f9      	beq.n	8007116 <_strtod_l+0x12e>
 8007122:	2b00      	cmp	r3, #0
 8007124:	d09b      	beq.n	800705e <_strtod_l+0x76>
 8007126:	2301      	movs	r3, #1
 8007128:	f04f 0a00 	mov.w	sl, #0
 800712c:	9304      	str	r3, [sp, #16]
 800712e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007130:	930b      	str	r3, [sp, #44]	; 0x2c
 8007132:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007136:	46d3      	mov	fp, sl
 8007138:	220a      	movs	r2, #10
 800713a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800713c:	7806      	ldrb	r6, [r0, #0]
 800713e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007142:	b2d9      	uxtb	r1, r3
 8007144:	2909      	cmp	r1, #9
 8007146:	d926      	bls.n	8007196 <_strtod_l+0x1ae>
 8007148:	494c      	ldr	r1, [pc, #304]	; (800727c <_strtod_l+0x294>)
 800714a:	2201      	movs	r2, #1
 800714c:	f000 ffe6 	bl	800811c <strncmp>
 8007150:	2800      	cmp	r0, #0
 8007152:	d030      	beq.n	80071b6 <_strtod_l+0x1ce>
 8007154:	2000      	movs	r0, #0
 8007156:	4632      	mov	r2, r6
 8007158:	9005      	str	r0, [sp, #20]
 800715a:	465e      	mov	r6, fp
 800715c:	4603      	mov	r3, r0
 800715e:	2a65      	cmp	r2, #101	; 0x65
 8007160:	d001      	beq.n	8007166 <_strtod_l+0x17e>
 8007162:	2a45      	cmp	r2, #69	; 0x45
 8007164:	d113      	bne.n	800718e <_strtod_l+0x1a6>
 8007166:	b91e      	cbnz	r6, 8007170 <_strtod_l+0x188>
 8007168:	9a04      	ldr	r2, [sp, #16]
 800716a:	4302      	orrs	r2, r0
 800716c:	d094      	beq.n	8007098 <_strtod_l+0xb0>
 800716e:	2600      	movs	r6, #0
 8007170:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007172:	1c6a      	adds	r2, r5, #1
 8007174:	9215      	str	r2, [sp, #84]	; 0x54
 8007176:	786a      	ldrb	r2, [r5, #1]
 8007178:	2a2b      	cmp	r2, #43	; 0x2b
 800717a:	d074      	beq.n	8007266 <_strtod_l+0x27e>
 800717c:	2a2d      	cmp	r2, #45	; 0x2d
 800717e:	d078      	beq.n	8007272 <_strtod_l+0x28a>
 8007180:	f04f 0c00 	mov.w	ip, #0
 8007184:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007188:	2909      	cmp	r1, #9
 800718a:	d97f      	bls.n	800728c <_strtod_l+0x2a4>
 800718c:	9515      	str	r5, [sp, #84]	; 0x54
 800718e:	2700      	movs	r7, #0
 8007190:	e09e      	b.n	80072d0 <_strtod_l+0x2e8>
 8007192:	2300      	movs	r3, #0
 8007194:	e7c8      	b.n	8007128 <_strtod_l+0x140>
 8007196:	f1bb 0f08 	cmp.w	fp, #8
 800719a:	bfd8      	it	le
 800719c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800719e:	f100 0001 	add.w	r0, r0, #1
 80071a2:	bfda      	itte	le
 80071a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80071a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80071aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80071ae:	f10b 0b01 	add.w	fp, fp, #1
 80071b2:	9015      	str	r0, [sp, #84]	; 0x54
 80071b4:	e7c1      	b.n	800713a <_strtod_l+0x152>
 80071b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	9215      	str	r2, [sp, #84]	; 0x54
 80071bc:	785a      	ldrb	r2, [r3, #1]
 80071be:	f1bb 0f00 	cmp.w	fp, #0
 80071c2:	d037      	beq.n	8007234 <_strtod_l+0x24c>
 80071c4:	9005      	str	r0, [sp, #20]
 80071c6:	465e      	mov	r6, fp
 80071c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80071cc:	2b09      	cmp	r3, #9
 80071ce:	d912      	bls.n	80071f6 <_strtod_l+0x20e>
 80071d0:	2301      	movs	r3, #1
 80071d2:	e7c4      	b.n	800715e <_strtod_l+0x176>
 80071d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	9215      	str	r2, [sp, #84]	; 0x54
 80071da:	785a      	ldrb	r2, [r3, #1]
 80071dc:	3001      	adds	r0, #1
 80071de:	2a30      	cmp	r2, #48	; 0x30
 80071e0:	d0f8      	beq.n	80071d4 <_strtod_l+0x1ec>
 80071e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80071e6:	2b08      	cmp	r3, #8
 80071e8:	f200 84c1 	bhi.w	8007b6e <_strtod_l+0xb86>
 80071ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80071ee:	9005      	str	r0, [sp, #20]
 80071f0:	2000      	movs	r0, #0
 80071f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f4:	4606      	mov	r6, r0
 80071f6:	3a30      	subs	r2, #48	; 0x30
 80071f8:	f100 0301 	add.w	r3, r0, #1
 80071fc:	d014      	beq.n	8007228 <_strtod_l+0x240>
 80071fe:	9905      	ldr	r1, [sp, #20]
 8007200:	4419      	add	r1, r3
 8007202:	9105      	str	r1, [sp, #20]
 8007204:	4633      	mov	r3, r6
 8007206:	eb00 0c06 	add.w	ip, r0, r6
 800720a:	210a      	movs	r1, #10
 800720c:	4563      	cmp	r3, ip
 800720e:	d113      	bne.n	8007238 <_strtod_l+0x250>
 8007210:	1833      	adds	r3, r6, r0
 8007212:	2b08      	cmp	r3, #8
 8007214:	f106 0601 	add.w	r6, r6, #1
 8007218:	4406      	add	r6, r0
 800721a:	dc1a      	bgt.n	8007252 <_strtod_l+0x26a>
 800721c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800721e:	230a      	movs	r3, #10
 8007220:	fb03 2301 	mla	r3, r3, r1, r2
 8007224:	9309      	str	r3, [sp, #36]	; 0x24
 8007226:	2300      	movs	r3, #0
 8007228:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800722a:	1c51      	adds	r1, r2, #1
 800722c:	9115      	str	r1, [sp, #84]	; 0x54
 800722e:	7852      	ldrb	r2, [r2, #1]
 8007230:	4618      	mov	r0, r3
 8007232:	e7c9      	b.n	80071c8 <_strtod_l+0x1e0>
 8007234:	4658      	mov	r0, fp
 8007236:	e7d2      	b.n	80071de <_strtod_l+0x1f6>
 8007238:	2b08      	cmp	r3, #8
 800723a:	f103 0301 	add.w	r3, r3, #1
 800723e:	dc03      	bgt.n	8007248 <_strtod_l+0x260>
 8007240:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007242:	434f      	muls	r7, r1
 8007244:	9709      	str	r7, [sp, #36]	; 0x24
 8007246:	e7e1      	b.n	800720c <_strtod_l+0x224>
 8007248:	2b10      	cmp	r3, #16
 800724a:	bfd8      	it	le
 800724c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007250:	e7dc      	b.n	800720c <_strtod_l+0x224>
 8007252:	2e10      	cmp	r6, #16
 8007254:	bfdc      	itt	le
 8007256:	230a      	movle	r3, #10
 8007258:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800725c:	e7e3      	b.n	8007226 <_strtod_l+0x23e>
 800725e:	2300      	movs	r3, #0
 8007260:	9305      	str	r3, [sp, #20]
 8007262:	2301      	movs	r3, #1
 8007264:	e780      	b.n	8007168 <_strtod_l+0x180>
 8007266:	f04f 0c00 	mov.w	ip, #0
 800726a:	1caa      	adds	r2, r5, #2
 800726c:	9215      	str	r2, [sp, #84]	; 0x54
 800726e:	78aa      	ldrb	r2, [r5, #2]
 8007270:	e788      	b.n	8007184 <_strtod_l+0x19c>
 8007272:	f04f 0c01 	mov.w	ip, #1
 8007276:	e7f8      	b.n	800726a <_strtod_l+0x282>
 8007278:	08009118 	.word	0x08009118
 800727c:	08009114 	.word	0x08009114
 8007280:	7ff00000 	.word	0x7ff00000
 8007284:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007286:	1c51      	adds	r1, r2, #1
 8007288:	9115      	str	r1, [sp, #84]	; 0x54
 800728a:	7852      	ldrb	r2, [r2, #1]
 800728c:	2a30      	cmp	r2, #48	; 0x30
 800728e:	d0f9      	beq.n	8007284 <_strtod_l+0x29c>
 8007290:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007294:	2908      	cmp	r1, #8
 8007296:	f63f af7a 	bhi.w	800718e <_strtod_l+0x1a6>
 800729a:	3a30      	subs	r2, #48	; 0x30
 800729c:	9208      	str	r2, [sp, #32]
 800729e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072a0:	920c      	str	r2, [sp, #48]	; 0x30
 80072a2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072a4:	1c57      	adds	r7, r2, #1
 80072a6:	9715      	str	r7, [sp, #84]	; 0x54
 80072a8:	7852      	ldrb	r2, [r2, #1]
 80072aa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80072ae:	f1be 0f09 	cmp.w	lr, #9
 80072b2:	d938      	bls.n	8007326 <_strtod_l+0x33e>
 80072b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80072b6:	1a7f      	subs	r7, r7, r1
 80072b8:	2f08      	cmp	r7, #8
 80072ba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80072be:	dc03      	bgt.n	80072c8 <_strtod_l+0x2e0>
 80072c0:	9908      	ldr	r1, [sp, #32]
 80072c2:	428f      	cmp	r7, r1
 80072c4:	bfa8      	it	ge
 80072c6:	460f      	movge	r7, r1
 80072c8:	f1bc 0f00 	cmp.w	ip, #0
 80072cc:	d000      	beq.n	80072d0 <_strtod_l+0x2e8>
 80072ce:	427f      	negs	r7, r7
 80072d0:	2e00      	cmp	r6, #0
 80072d2:	d14f      	bne.n	8007374 <_strtod_l+0x38c>
 80072d4:	9904      	ldr	r1, [sp, #16]
 80072d6:	4301      	orrs	r1, r0
 80072d8:	f47f aec1 	bne.w	800705e <_strtod_l+0x76>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f47f aedb 	bne.w	8007098 <_strtod_l+0xb0>
 80072e2:	2a69      	cmp	r2, #105	; 0x69
 80072e4:	d029      	beq.n	800733a <_strtod_l+0x352>
 80072e6:	dc26      	bgt.n	8007336 <_strtod_l+0x34e>
 80072e8:	2a49      	cmp	r2, #73	; 0x49
 80072ea:	d026      	beq.n	800733a <_strtod_l+0x352>
 80072ec:	2a4e      	cmp	r2, #78	; 0x4e
 80072ee:	f47f aed3 	bne.w	8007098 <_strtod_l+0xb0>
 80072f2:	499b      	ldr	r1, [pc, #620]	; (8007560 <_strtod_l+0x578>)
 80072f4:	a815      	add	r0, sp, #84	; 0x54
 80072f6:	f001 fa27 	bl	8008748 <__match>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	f43f aecc 	beq.w	8007098 <_strtod_l+0xb0>
 8007300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	2b28      	cmp	r3, #40	; 0x28
 8007306:	d12f      	bne.n	8007368 <_strtod_l+0x380>
 8007308:	4996      	ldr	r1, [pc, #600]	; (8007564 <_strtod_l+0x57c>)
 800730a:	aa18      	add	r2, sp, #96	; 0x60
 800730c:	a815      	add	r0, sp, #84	; 0x54
 800730e:	f001 fa2f 	bl	8008770 <__hexnan>
 8007312:	2805      	cmp	r0, #5
 8007314:	d128      	bne.n	8007368 <_strtod_l+0x380>
 8007316:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007318:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800731c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007320:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007324:	e69b      	b.n	800705e <_strtod_l+0x76>
 8007326:	9f08      	ldr	r7, [sp, #32]
 8007328:	210a      	movs	r1, #10
 800732a:	fb01 2107 	mla	r1, r1, r7, r2
 800732e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007332:	9208      	str	r2, [sp, #32]
 8007334:	e7b5      	b.n	80072a2 <_strtod_l+0x2ba>
 8007336:	2a6e      	cmp	r2, #110	; 0x6e
 8007338:	e7d9      	b.n	80072ee <_strtod_l+0x306>
 800733a:	498b      	ldr	r1, [pc, #556]	; (8007568 <_strtod_l+0x580>)
 800733c:	a815      	add	r0, sp, #84	; 0x54
 800733e:	f001 fa03 	bl	8008748 <__match>
 8007342:	2800      	cmp	r0, #0
 8007344:	f43f aea8 	beq.w	8007098 <_strtod_l+0xb0>
 8007348:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800734a:	4988      	ldr	r1, [pc, #544]	; (800756c <_strtod_l+0x584>)
 800734c:	3b01      	subs	r3, #1
 800734e:	a815      	add	r0, sp, #84	; 0x54
 8007350:	9315      	str	r3, [sp, #84]	; 0x54
 8007352:	f001 f9f9 	bl	8008748 <__match>
 8007356:	b910      	cbnz	r0, 800735e <_strtod_l+0x376>
 8007358:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800735a:	3301      	adds	r3, #1
 800735c:	9315      	str	r3, [sp, #84]	; 0x54
 800735e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800757c <_strtod_l+0x594>
 8007362:	f04f 0800 	mov.w	r8, #0
 8007366:	e67a      	b.n	800705e <_strtod_l+0x76>
 8007368:	4881      	ldr	r0, [pc, #516]	; (8007570 <_strtod_l+0x588>)
 800736a:	f000 ff09 	bl	8008180 <nan>
 800736e:	ec59 8b10 	vmov	r8, r9, d0
 8007372:	e674      	b.n	800705e <_strtod_l+0x76>
 8007374:	9b05      	ldr	r3, [sp, #20]
 8007376:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007378:	1afb      	subs	r3, r7, r3
 800737a:	f1bb 0f00 	cmp.w	fp, #0
 800737e:	bf08      	it	eq
 8007380:	46b3      	moveq	fp, r6
 8007382:	2e10      	cmp	r6, #16
 8007384:	9308      	str	r3, [sp, #32]
 8007386:	4635      	mov	r5, r6
 8007388:	bfa8      	it	ge
 800738a:	2510      	movge	r5, #16
 800738c:	f7f9 f8da 	bl	8000544 <__aeabi_ui2d>
 8007390:	2e09      	cmp	r6, #9
 8007392:	4680      	mov	r8, r0
 8007394:	4689      	mov	r9, r1
 8007396:	dd13      	ble.n	80073c0 <_strtod_l+0x3d8>
 8007398:	4b76      	ldr	r3, [pc, #472]	; (8007574 <_strtod_l+0x58c>)
 800739a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800739e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073a2:	f7f9 f949 	bl	8000638 <__aeabi_dmul>
 80073a6:	4680      	mov	r8, r0
 80073a8:	4650      	mov	r0, sl
 80073aa:	4689      	mov	r9, r1
 80073ac:	f7f9 f8ca 	bl	8000544 <__aeabi_ui2d>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4640      	mov	r0, r8
 80073b6:	4649      	mov	r1, r9
 80073b8:	f7f8 ff88 	bl	80002cc <__adddf3>
 80073bc:	4680      	mov	r8, r0
 80073be:	4689      	mov	r9, r1
 80073c0:	2e0f      	cmp	r6, #15
 80073c2:	dc38      	bgt.n	8007436 <_strtod_l+0x44e>
 80073c4:	9b08      	ldr	r3, [sp, #32]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f43f ae49 	beq.w	800705e <_strtod_l+0x76>
 80073cc:	dd24      	ble.n	8007418 <_strtod_l+0x430>
 80073ce:	2b16      	cmp	r3, #22
 80073d0:	dc0b      	bgt.n	80073ea <_strtod_l+0x402>
 80073d2:	4968      	ldr	r1, [pc, #416]	; (8007574 <_strtod_l+0x58c>)
 80073d4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073dc:	4642      	mov	r2, r8
 80073de:	464b      	mov	r3, r9
 80073e0:	f7f9 f92a 	bl	8000638 <__aeabi_dmul>
 80073e4:	4680      	mov	r8, r0
 80073e6:	4689      	mov	r9, r1
 80073e8:	e639      	b.n	800705e <_strtod_l+0x76>
 80073ea:	9a08      	ldr	r2, [sp, #32]
 80073ec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80073f0:	4293      	cmp	r3, r2
 80073f2:	db20      	blt.n	8007436 <_strtod_l+0x44e>
 80073f4:	4c5f      	ldr	r4, [pc, #380]	; (8007574 <_strtod_l+0x58c>)
 80073f6:	f1c6 060f 	rsb	r6, r6, #15
 80073fa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80073fe:	4642      	mov	r2, r8
 8007400:	464b      	mov	r3, r9
 8007402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007406:	f7f9 f917 	bl	8000638 <__aeabi_dmul>
 800740a:	9b08      	ldr	r3, [sp, #32]
 800740c:	1b9e      	subs	r6, r3, r6
 800740e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007412:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007416:	e7e3      	b.n	80073e0 <_strtod_l+0x3f8>
 8007418:	9b08      	ldr	r3, [sp, #32]
 800741a:	3316      	adds	r3, #22
 800741c:	db0b      	blt.n	8007436 <_strtod_l+0x44e>
 800741e:	9b05      	ldr	r3, [sp, #20]
 8007420:	1bdf      	subs	r7, r3, r7
 8007422:	4b54      	ldr	r3, [pc, #336]	; (8007574 <_strtod_l+0x58c>)
 8007424:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800742c:	4640      	mov	r0, r8
 800742e:	4649      	mov	r1, r9
 8007430:	f7f9 fa2c 	bl	800088c <__aeabi_ddiv>
 8007434:	e7d6      	b.n	80073e4 <_strtod_l+0x3fc>
 8007436:	9b08      	ldr	r3, [sp, #32]
 8007438:	1b75      	subs	r5, r6, r5
 800743a:	441d      	add	r5, r3
 800743c:	2d00      	cmp	r5, #0
 800743e:	dd70      	ble.n	8007522 <_strtod_l+0x53a>
 8007440:	f015 030f 	ands.w	r3, r5, #15
 8007444:	d00a      	beq.n	800745c <_strtod_l+0x474>
 8007446:	494b      	ldr	r1, [pc, #300]	; (8007574 <_strtod_l+0x58c>)
 8007448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800744c:	4642      	mov	r2, r8
 800744e:	464b      	mov	r3, r9
 8007450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007454:	f7f9 f8f0 	bl	8000638 <__aeabi_dmul>
 8007458:	4680      	mov	r8, r0
 800745a:	4689      	mov	r9, r1
 800745c:	f035 050f 	bics.w	r5, r5, #15
 8007460:	d04d      	beq.n	80074fe <_strtod_l+0x516>
 8007462:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007466:	dd22      	ble.n	80074ae <_strtod_l+0x4c6>
 8007468:	2500      	movs	r5, #0
 800746a:	46ab      	mov	fp, r5
 800746c:	9509      	str	r5, [sp, #36]	; 0x24
 800746e:	9505      	str	r5, [sp, #20]
 8007470:	2322      	movs	r3, #34	; 0x22
 8007472:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800757c <_strtod_l+0x594>
 8007476:	6023      	str	r3, [r4, #0]
 8007478:	f04f 0800 	mov.w	r8, #0
 800747c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747e:	2b00      	cmp	r3, #0
 8007480:	f43f aded 	beq.w	800705e <_strtod_l+0x76>
 8007484:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007486:	4620      	mov	r0, r4
 8007488:	f7ff f924 	bl	80066d4 <_Bfree>
 800748c:	9905      	ldr	r1, [sp, #20]
 800748e:	4620      	mov	r0, r4
 8007490:	f7ff f920 	bl	80066d4 <_Bfree>
 8007494:	4659      	mov	r1, fp
 8007496:	4620      	mov	r0, r4
 8007498:	f7ff f91c 	bl	80066d4 <_Bfree>
 800749c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800749e:	4620      	mov	r0, r4
 80074a0:	f7ff f918 	bl	80066d4 <_Bfree>
 80074a4:	4629      	mov	r1, r5
 80074a6:	4620      	mov	r0, r4
 80074a8:	f7ff f914 	bl	80066d4 <_Bfree>
 80074ac:	e5d7      	b.n	800705e <_strtod_l+0x76>
 80074ae:	4b32      	ldr	r3, [pc, #200]	; (8007578 <_strtod_l+0x590>)
 80074b0:	9304      	str	r3, [sp, #16]
 80074b2:	2300      	movs	r3, #0
 80074b4:	112d      	asrs	r5, r5, #4
 80074b6:	4640      	mov	r0, r8
 80074b8:	4649      	mov	r1, r9
 80074ba:	469a      	mov	sl, r3
 80074bc:	2d01      	cmp	r5, #1
 80074be:	dc21      	bgt.n	8007504 <_strtod_l+0x51c>
 80074c0:	b10b      	cbz	r3, 80074c6 <_strtod_l+0x4de>
 80074c2:	4680      	mov	r8, r0
 80074c4:	4689      	mov	r9, r1
 80074c6:	492c      	ldr	r1, [pc, #176]	; (8007578 <_strtod_l+0x590>)
 80074c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80074cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80074d0:	4642      	mov	r2, r8
 80074d2:	464b      	mov	r3, r9
 80074d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d8:	f7f9 f8ae 	bl	8000638 <__aeabi_dmul>
 80074dc:	4b27      	ldr	r3, [pc, #156]	; (800757c <_strtod_l+0x594>)
 80074de:	460a      	mov	r2, r1
 80074e0:	400b      	ands	r3, r1
 80074e2:	4927      	ldr	r1, [pc, #156]	; (8007580 <_strtod_l+0x598>)
 80074e4:	428b      	cmp	r3, r1
 80074e6:	4680      	mov	r8, r0
 80074e8:	d8be      	bhi.n	8007468 <_strtod_l+0x480>
 80074ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074ee:	428b      	cmp	r3, r1
 80074f0:	bf86      	itte	hi
 80074f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007584 <_strtod_l+0x59c>
 80074f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80074fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80074fe:	2300      	movs	r3, #0
 8007500:	9304      	str	r3, [sp, #16]
 8007502:	e07b      	b.n	80075fc <_strtod_l+0x614>
 8007504:	07ea      	lsls	r2, r5, #31
 8007506:	d505      	bpl.n	8007514 <_strtod_l+0x52c>
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f9 f893 	bl	8000638 <__aeabi_dmul>
 8007512:	2301      	movs	r3, #1
 8007514:	9a04      	ldr	r2, [sp, #16]
 8007516:	3208      	adds	r2, #8
 8007518:	f10a 0a01 	add.w	sl, sl, #1
 800751c:	106d      	asrs	r5, r5, #1
 800751e:	9204      	str	r2, [sp, #16]
 8007520:	e7cc      	b.n	80074bc <_strtod_l+0x4d4>
 8007522:	d0ec      	beq.n	80074fe <_strtod_l+0x516>
 8007524:	426d      	negs	r5, r5
 8007526:	f015 020f 	ands.w	r2, r5, #15
 800752a:	d00a      	beq.n	8007542 <_strtod_l+0x55a>
 800752c:	4b11      	ldr	r3, [pc, #68]	; (8007574 <_strtod_l+0x58c>)
 800752e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f7f9 f9a7 	bl	800088c <__aeabi_ddiv>
 800753e:	4680      	mov	r8, r0
 8007540:	4689      	mov	r9, r1
 8007542:	112d      	asrs	r5, r5, #4
 8007544:	d0db      	beq.n	80074fe <_strtod_l+0x516>
 8007546:	2d1f      	cmp	r5, #31
 8007548:	dd1e      	ble.n	8007588 <_strtod_l+0x5a0>
 800754a:	2500      	movs	r5, #0
 800754c:	46ab      	mov	fp, r5
 800754e:	9509      	str	r5, [sp, #36]	; 0x24
 8007550:	9505      	str	r5, [sp, #20]
 8007552:	2322      	movs	r3, #34	; 0x22
 8007554:	f04f 0800 	mov.w	r8, #0
 8007558:	f04f 0900 	mov.w	r9, #0
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	e78d      	b.n	800747c <_strtod_l+0x494>
 8007560:	08008f05 	.word	0x08008f05
 8007564:	0800912c 	.word	0x0800912c
 8007568:	08008efd 	.word	0x08008efd
 800756c:	08008f34 	.word	0x08008f34
 8007570:	080092bd 	.word	0x080092bd
 8007574:	08009040 	.word	0x08009040
 8007578:	08009018 	.word	0x08009018
 800757c:	7ff00000 	.word	0x7ff00000
 8007580:	7ca00000 	.word	0x7ca00000
 8007584:	7fefffff 	.word	0x7fefffff
 8007588:	f015 0310 	ands.w	r3, r5, #16
 800758c:	bf18      	it	ne
 800758e:	236a      	movne	r3, #106	; 0x6a
 8007590:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007934 <_strtod_l+0x94c>
 8007594:	9304      	str	r3, [sp, #16]
 8007596:	4640      	mov	r0, r8
 8007598:	4649      	mov	r1, r9
 800759a:	2300      	movs	r3, #0
 800759c:	07ea      	lsls	r2, r5, #31
 800759e:	d504      	bpl.n	80075aa <_strtod_l+0x5c2>
 80075a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80075a4:	f7f9 f848 	bl	8000638 <__aeabi_dmul>
 80075a8:	2301      	movs	r3, #1
 80075aa:	106d      	asrs	r5, r5, #1
 80075ac:	f10a 0a08 	add.w	sl, sl, #8
 80075b0:	d1f4      	bne.n	800759c <_strtod_l+0x5b4>
 80075b2:	b10b      	cbz	r3, 80075b8 <_strtod_l+0x5d0>
 80075b4:	4680      	mov	r8, r0
 80075b6:	4689      	mov	r9, r1
 80075b8:	9b04      	ldr	r3, [sp, #16]
 80075ba:	b1bb      	cbz	r3, 80075ec <_strtod_l+0x604>
 80075bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80075c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	4649      	mov	r1, r9
 80075c8:	dd10      	ble.n	80075ec <_strtod_l+0x604>
 80075ca:	2b1f      	cmp	r3, #31
 80075cc:	f340 811e 	ble.w	800780c <_strtod_l+0x824>
 80075d0:	2b34      	cmp	r3, #52	; 0x34
 80075d2:	bfde      	ittt	le
 80075d4:	f04f 33ff 	movle.w	r3, #4294967295
 80075d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80075dc:	4093      	lslle	r3, r2
 80075de:	f04f 0800 	mov.w	r8, #0
 80075e2:	bfcc      	ite	gt
 80075e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80075e8:	ea03 0901 	andle.w	r9, r3, r1
 80075ec:	2200      	movs	r2, #0
 80075ee:	2300      	movs	r3, #0
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7f9 fa88 	bl	8000b08 <__aeabi_dcmpeq>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d1a6      	bne.n	800754a <_strtod_l+0x562>
 80075fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007602:	4633      	mov	r3, r6
 8007604:	465a      	mov	r2, fp
 8007606:	4620      	mov	r0, r4
 8007608:	f7ff f8cc 	bl	80067a4 <__s2b>
 800760c:	9009      	str	r0, [sp, #36]	; 0x24
 800760e:	2800      	cmp	r0, #0
 8007610:	f43f af2a 	beq.w	8007468 <_strtod_l+0x480>
 8007614:	9a08      	ldr	r2, [sp, #32]
 8007616:	9b05      	ldr	r3, [sp, #20]
 8007618:	2a00      	cmp	r2, #0
 800761a:	eba3 0307 	sub.w	r3, r3, r7
 800761e:	bfa8      	it	ge
 8007620:	2300      	movge	r3, #0
 8007622:	930c      	str	r3, [sp, #48]	; 0x30
 8007624:	2500      	movs	r5, #0
 8007626:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800762a:	9312      	str	r3, [sp, #72]	; 0x48
 800762c:	46ab      	mov	fp, r5
 800762e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007630:	4620      	mov	r0, r4
 8007632:	6859      	ldr	r1, [r3, #4]
 8007634:	f7ff f80e 	bl	8006654 <_Balloc>
 8007638:	9005      	str	r0, [sp, #20]
 800763a:	2800      	cmp	r0, #0
 800763c:	f43f af18 	beq.w	8007470 <_strtod_l+0x488>
 8007640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	3202      	adds	r2, #2
 8007646:	f103 010c 	add.w	r1, r3, #12
 800764a:	0092      	lsls	r2, r2, #2
 800764c:	300c      	adds	r0, #12
 800764e:	f000 fd87 	bl	8008160 <memcpy>
 8007652:	ec49 8b10 	vmov	d0, r8, r9
 8007656:	aa18      	add	r2, sp, #96	; 0x60
 8007658:	a917      	add	r1, sp, #92	; 0x5c
 800765a:	4620      	mov	r0, r4
 800765c:	f7ff fbd6 	bl	8006e0c <__d2b>
 8007660:	ec49 8b18 	vmov	d8, r8, r9
 8007664:	9016      	str	r0, [sp, #88]	; 0x58
 8007666:	2800      	cmp	r0, #0
 8007668:	f43f af02 	beq.w	8007470 <_strtod_l+0x488>
 800766c:	2101      	movs	r1, #1
 800766e:	4620      	mov	r0, r4
 8007670:	f7ff f930 	bl	80068d4 <__i2b>
 8007674:	4683      	mov	fp, r0
 8007676:	2800      	cmp	r0, #0
 8007678:	f43f aefa 	beq.w	8007470 <_strtod_l+0x488>
 800767c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800767e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007680:	2e00      	cmp	r6, #0
 8007682:	bfab      	itete	ge
 8007684:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007686:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007688:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800768a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800768e:	bfac      	ite	ge
 8007690:	eb06 0a03 	addge.w	sl, r6, r3
 8007694:	1b9f      	sublt	r7, r3, r6
 8007696:	9b04      	ldr	r3, [sp, #16]
 8007698:	1af6      	subs	r6, r6, r3
 800769a:	4416      	add	r6, r2
 800769c:	4ba0      	ldr	r3, [pc, #640]	; (8007920 <_strtod_l+0x938>)
 800769e:	3e01      	subs	r6, #1
 80076a0:	429e      	cmp	r6, r3
 80076a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076a6:	f280 80c4 	bge.w	8007832 <_strtod_l+0x84a>
 80076aa:	1b9b      	subs	r3, r3, r6
 80076ac:	2b1f      	cmp	r3, #31
 80076ae:	eba2 0203 	sub.w	r2, r2, r3
 80076b2:	f04f 0101 	mov.w	r1, #1
 80076b6:	f300 80b0 	bgt.w	800781a <_strtod_l+0x832>
 80076ba:	fa01 f303 	lsl.w	r3, r1, r3
 80076be:	930e      	str	r3, [sp, #56]	; 0x38
 80076c0:	2300      	movs	r3, #0
 80076c2:	930d      	str	r3, [sp, #52]	; 0x34
 80076c4:	eb0a 0602 	add.w	r6, sl, r2
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	45b2      	cmp	sl, r6
 80076cc:	4417      	add	r7, r2
 80076ce:	441f      	add	r7, r3
 80076d0:	4653      	mov	r3, sl
 80076d2:	bfa8      	it	ge
 80076d4:	4633      	movge	r3, r6
 80076d6:	42bb      	cmp	r3, r7
 80076d8:	bfa8      	it	ge
 80076da:	463b      	movge	r3, r7
 80076dc:	2b00      	cmp	r3, #0
 80076de:	bfc2      	ittt	gt
 80076e0:	1af6      	subgt	r6, r6, r3
 80076e2:	1aff      	subgt	r7, r7, r3
 80076e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80076e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	dd17      	ble.n	800771e <_strtod_l+0x736>
 80076ee:	4659      	mov	r1, fp
 80076f0:	461a      	mov	r2, r3
 80076f2:	4620      	mov	r0, r4
 80076f4:	f7ff f9ae 	bl	8006a54 <__pow5mult>
 80076f8:	4683      	mov	fp, r0
 80076fa:	2800      	cmp	r0, #0
 80076fc:	f43f aeb8 	beq.w	8007470 <_strtod_l+0x488>
 8007700:	4601      	mov	r1, r0
 8007702:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007704:	4620      	mov	r0, r4
 8007706:	f7ff f8fb 	bl	8006900 <__multiply>
 800770a:	900b      	str	r0, [sp, #44]	; 0x2c
 800770c:	2800      	cmp	r0, #0
 800770e:	f43f aeaf 	beq.w	8007470 <_strtod_l+0x488>
 8007712:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007714:	4620      	mov	r0, r4
 8007716:	f7fe ffdd 	bl	80066d4 <_Bfree>
 800771a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800771c:	9316      	str	r3, [sp, #88]	; 0x58
 800771e:	2e00      	cmp	r6, #0
 8007720:	f300 808c 	bgt.w	800783c <_strtod_l+0x854>
 8007724:	9b08      	ldr	r3, [sp, #32]
 8007726:	2b00      	cmp	r3, #0
 8007728:	dd08      	ble.n	800773c <_strtod_l+0x754>
 800772a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800772c:	9905      	ldr	r1, [sp, #20]
 800772e:	4620      	mov	r0, r4
 8007730:	f7ff f990 	bl	8006a54 <__pow5mult>
 8007734:	9005      	str	r0, [sp, #20]
 8007736:	2800      	cmp	r0, #0
 8007738:	f43f ae9a 	beq.w	8007470 <_strtod_l+0x488>
 800773c:	2f00      	cmp	r7, #0
 800773e:	dd08      	ble.n	8007752 <_strtod_l+0x76a>
 8007740:	9905      	ldr	r1, [sp, #20]
 8007742:	463a      	mov	r2, r7
 8007744:	4620      	mov	r0, r4
 8007746:	f7ff f9df 	bl	8006b08 <__lshift>
 800774a:	9005      	str	r0, [sp, #20]
 800774c:	2800      	cmp	r0, #0
 800774e:	f43f ae8f 	beq.w	8007470 <_strtod_l+0x488>
 8007752:	f1ba 0f00 	cmp.w	sl, #0
 8007756:	dd08      	ble.n	800776a <_strtod_l+0x782>
 8007758:	4659      	mov	r1, fp
 800775a:	4652      	mov	r2, sl
 800775c:	4620      	mov	r0, r4
 800775e:	f7ff f9d3 	bl	8006b08 <__lshift>
 8007762:	4683      	mov	fp, r0
 8007764:	2800      	cmp	r0, #0
 8007766:	f43f ae83 	beq.w	8007470 <_strtod_l+0x488>
 800776a:	9a05      	ldr	r2, [sp, #20]
 800776c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800776e:	4620      	mov	r0, r4
 8007770:	f7ff fa52 	bl	8006c18 <__mdiff>
 8007774:	4605      	mov	r5, r0
 8007776:	2800      	cmp	r0, #0
 8007778:	f43f ae7a 	beq.w	8007470 <_strtod_l+0x488>
 800777c:	68c3      	ldr	r3, [r0, #12]
 800777e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007780:	2300      	movs	r3, #0
 8007782:	60c3      	str	r3, [r0, #12]
 8007784:	4659      	mov	r1, fp
 8007786:	f7ff fa2b 	bl	8006be0 <__mcmp>
 800778a:	2800      	cmp	r0, #0
 800778c:	da60      	bge.n	8007850 <_strtod_l+0x868>
 800778e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007790:	ea53 0308 	orrs.w	r3, r3, r8
 8007794:	f040 8084 	bne.w	80078a0 <_strtod_l+0x8b8>
 8007798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800779c:	2b00      	cmp	r3, #0
 800779e:	d17f      	bne.n	80078a0 <_strtod_l+0x8b8>
 80077a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077a4:	0d1b      	lsrs	r3, r3, #20
 80077a6:	051b      	lsls	r3, r3, #20
 80077a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077ac:	d978      	bls.n	80078a0 <_strtod_l+0x8b8>
 80077ae:	696b      	ldr	r3, [r5, #20]
 80077b0:	b913      	cbnz	r3, 80077b8 <_strtod_l+0x7d0>
 80077b2:	692b      	ldr	r3, [r5, #16]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	dd73      	ble.n	80078a0 <_strtod_l+0x8b8>
 80077b8:	4629      	mov	r1, r5
 80077ba:	2201      	movs	r2, #1
 80077bc:	4620      	mov	r0, r4
 80077be:	f7ff f9a3 	bl	8006b08 <__lshift>
 80077c2:	4659      	mov	r1, fp
 80077c4:	4605      	mov	r5, r0
 80077c6:	f7ff fa0b 	bl	8006be0 <__mcmp>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	dd68      	ble.n	80078a0 <_strtod_l+0x8b8>
 80077ce:	9904      	ldr	r1, [sp, #16]
 80077d0:	4a54      	ldr	r2, [pc, #336]	; (8007924 <_strtod_l+0x93c>)
 80077d2:	464b      	mov	r3, r9
 80077d4:	2900      	cmp	r1, #0
 80077d6:	f000 8084 	beq.w	80078e2 <_strtod_l+0x8fa>
 80077da:	ea02 0109 	and.w	r1, r2, r9
 80077de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80077e2:	dc7e      	bgt.n	80078e2 <_strtod_l+0x8fa>
 80077e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80077e8:	f77f aeb3 	ble.w	8007552 <_strtod_l+0x56a>
 80077ec:	4b4e      	ldr	r3, [pc, #312]	; (8007928 <_strtod_l+0x940>)
 80077ee:	4640      	mov	r0, r8
 80077f0:	4649      	mov	r1, r9
 80077f2:	2200      	movs	r2, #0
 80077f4:	f7f8 ff20 	bl	8000638 <__aeabi_dmul>
 80077f8:	4b4a      	ldr	r3, [pc, #296]	; (8007924 <_strtod_l+0x93c>)
 80077fa:	400b      	ands	r3, r1
 80077fc:	4680      	mov	r8, r0
 80077fe:	4689      	mov	r9, r1
 8007800:	2b00      	cmp	r3, #0
 8007802:	f47f ae3f 	bne.w	8007484 <_strtod_l+0x49c>
 8007806:	2322      	movs	r3, #34	; 0x22
 8007808:	6023      	str	r3, [r4, #0]
 800780a:	e63b      	b.n	8007484 <_strtod_l+0x49c>
 800780c:	f04f 32ff 	mov.w	r2, #4294967295
 8007810:	fa02 f303 	lsl.w	r3, r2, r3
 8007814:	ea03 0808 	and.w	r8, r3, r8
 8007818:	e6e8      	b.n	80075ec <_strtod_l+0x604>
 800781a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800781e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007822:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007826:	36e2      	adds	r6, #226	; 0xe2
 8007828:	fa01 f306 	lsl.w	r3, r1, r6
 800782c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007830:	e748      	b.n	80076c4 <_strtod_l+0x6dc>
 8007832:	2100      	movs	r1, #0
 8007834:	2301      	movs	r3, #1
 8007836:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800783a:	e743      	b.n	80076c4 <_strtod_l+0x6dc>
 800783c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800783e:	4632      	mov	r2, r6
 8007840:	4620      	mov	r0, r4
 8007842:	f7ff f961 	bl	8006b08 <__lshift>
 8007846:	9016      	str	r0, [sp, #88]	; 0x58
 8007848:	2800      	cmp	r0, #0
 800784a:	f47f af6b 	bne.w	8007724 <_strtod_l+0x73c>
 800784e:	e60f      	b.n	8007470 <_strtod_l+0x488>
 8007850:	46ca      	mov	sl, r9
 8007852:	d171      	bne.n	8007938 <_strtod_l+0x950>
 8007854:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007856:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800785a:	b352      	cbz	r2, 80078b2 <_strtod_l+0x8ca>
 800785c:	4a33      	ldr	r2, [pc, #204]	; (800792c <_strtod_l+0x944>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d12a      	bne.n	80078b8 <_strtod_l+0x8d0>
 8007862:	9b04      	ldr	r3, [sp, #16]
 8007864:	4641      	mov	r1, r8
 8007866:	b1fb      	cbz	r3, 80078a8 <_strtod_l+0x8c0>
 8007868:	4b2e      	ldr	r3, [pc, #184]	; (8007924 <_strtod_l+0x93c>)
 800786a:	ea09 0303 	and.w	r3, r9, r3
 800786e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007872:	f04f 32ff 	mov.w	r2, #4294967295
 8007876:	d81a      	bhi.n	80078ae <_strtod_l+0x8c6>
 8007878:	0d1b      	lsrs	r3, r3, #20
 800787a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800787e:	fa02 f303 	lsl.w	r3, r2, r3
 8007882:	4299      	cmp	r1, r3
 8007884:	d118      	bne.n	80078b8 <_strtod_l+0x8d0>
 8007886:	4b2a      	ldr	r3, [pc, #168]	; (8007930 <_strtod_l+0x948>)
 8007888:	459a      	cmp	sl, r3
 800788a:	d102      	bne.n	8007892 <_strtod_l+0x8aa>
 800788c:	3101      	adds	r1, #1
 800788e:	f43f adef 	beq.w	8007470 <_strtod_l+0x488>
 8007892:	4b24      	ldr	r3, [pc, #144]	; (8007924 <_strtod_l+0x93c>)
 8007894:	ea0a 0303 	and.w	r3, sl, r3
 8007898:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800789c:	f04f 0800 	mov.w	r8, #0
 80078a0:	9b04      	ldr	r3, [sp, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1a2      	bne.n	80077ec <_strtod_l+0x804>
 80078a6:	e5ed      	b.n	8007484 <_strtod_l+0x49c>
 80078a8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ac:	e7e9      	b.n	8007882 <_strtod_l+0x89a>
 80078ae:	4613      	mov	r3, r2
 80078b0:	e7e7      	b.n	8007882 <_strtod_l+0x89a>
 80078b2:	ea53 0308 	orrs.w	r3, r3, r8
 80078b6:	d08a      	beq.n	80077ce <_strtod_l+0x7e6>
 80078b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ba:	b1e3      	cbz	r3, 80078f6 <_strtod_l+0x90e>
 80078bc:	ea13 0f0a 	tst.w	r3, sl
 80078c0:	d0ee      	beq.n	80078a0 <_strtod_l+0x8b8>
 80078c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c4:	9a04      	ldr	r2, [sp, #16]
 80078c6:	4640      	mov	r0, r8
 80078c8:	4649      	mov	r1, r9
 80078ca:	b1c3      	cbz	r3, 80078fe <_strtod_l+0x916>
 80078cc:	f7ff fb6f 	bl	8006fae <sulp>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	ec51 0b18 	vmov	r0, r1, d8
 80078d8:	f7f8 fcf8 	bl	80002cc <__adddf3>
 80078dc:	4680      	mov	r8, r0
 80078de:	4689      	mov	r9, r1
 80078e0:	e7de      	b.n	80078a0 <_strtod_l+0x8b8>
 80078e2:	4013      	ands	r3, r2
 80078e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80078ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80078f0:	f04f 38ff 	mov.w	r8, #4294967295
 80078f4:	e7d4      	b.n	80078a0 <_strtod_l+0x8b8>
 80078f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f8:	ea13 0f08 	tst.w	r3, r8
 80078fc:	e7e0      	b.n	80078c0 <_strtod_l+0x8d8>
 80078fe:	f7ff fb56 	bl	8006fae <sulp>
 8007902:	4602      	mov	r2, r0
 8007904:	460b      	mov	r3, r1
 8007906:	ec51 0b18 	vmov	r0, r1, d8
 800790a:	f7f8 fcdd 	bl	80002c8 <__aeabi_dsub>
 800790e:	2200      	movs	r2, #0
 8007910:	2300      	movs	r3, #0
 8007912:	4680      	mov	r8, r0
 8007914:	4689      	mov	r9, r1
 8007916:	f7f9 f8f7 	bl	8000b08 <__aeabi_dcmpeq>
 800791a:	2800      	cmp	r0, #0
 800791c:	d0c0      	beq.n	80078a0 <_strtod_l+0x8b8>
 800791e:	e618      	b.n	8007552 <_strtod_l+0x56a>
 8007920:	fffffc02 	.word	0xfffffc02
 8007924:	7ff00000 	.word	0x7ff00000
 8007928:	39500000 	.word	0x39500000
 800792c:	000fffff 	.word	0x000fffff
 8007930:	7fefffff 	.word	0x7fefffff
 8007934:	08009140 	.word	0x08009140
 8007938:	4659      	mov	r1, fp
 800793a:	4628      	mov	r0, r5
 800793c:	f7ff fac0 	bl	8006ec0 <__ratio>
 8007940:	ec57 6b10 	vmov	r6, r7, d0
 8007944:	ee10 0a10 	vmov	r0, s0
 8007948:	2200      	movs	r2, #0
 800794a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800794e:	4639      	mov	r1, r7
 8007950:	f7f9 f8ee 	bl	8000b30 <__aeabi_dcmple>
 8007954:	2800      	cmp	r0, #0
 8007956:	d071      	beq.n	8007a3c <_strtod_l+0xa54>
 8007958:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800795a:	2b00      	cmp	r3, #0
 800795c:	d17c      	bne.n	8007a58 <_strtod_l+0xa70>
 800795e:	f1b8 0f00 	cmp.w	r8, #0
 8007962:	d15a      	bne.n	8007a1a <_strtod_l+0xa32>
 8007964:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007968:	2b00      	cmp	r3, #0
 800796a:	d15d      	bne.n	8007a28 <_strtod_l+0xa40>
 800796c:	4b90      	ldr	r3, [pc, #576]	; (8007bb0 <_strtod_l+0xbc8>)
 800796e:	2200      	movs	r2, #0
 8007970:	4630      	mov	r0, r6
 8007972:	4639      	mov	r1, r7
 8007974:	f7f9 f8d2 	bl	8000b1c <__aeabi_dcmplt>
 8007978:	2800      	cmp	r0, #0
 800797a:	d15c      	bne.n	8007a36 <_strtod_l+0xa4e>
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	4b8c      	ldr	r3, [pc, #560]	; (8007bb4 <_strtod_l+0xbcc>)
 8007982:	2200      	movs	r2, #0
 8007984:	f7f8 fe58 	bl	8000638 <__aeabi_dmul>
 8007988:	4606      	mov	r6, r0
 800798a:	460f      	mov	r7, r1
 800798c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007990:	9606      	str	r6, [sp, #24]
 8007992:	9307      	str	r3, [sp, #28]
 8007994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007998:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800799c:	4b86      	ldr	r3, [pc, #536]	; (8007bb8 <_strtod_l+0xbd0>)
 800799e:	ea0a 0303 	and.w	r3, sl, r3
 80079a2:	930d      	str	r3, [sp, #52]	; 0x34
 80079a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079a6:	4b85      	ldr	r3, [pc, #532]	; (8007bbc <_strtod_l+0xbd4>)
 80079a8:	429a      	cmp	r2, r3
 80079aa:	f040 8090 	bne.w	8007ace <_strtod_l+0xae6>
 80079ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80079b2:	ec49 8b10 	vmov	d0, r8, r9
 80079b6:	f7ff f9b9 	bl	8006d2c <__ulp>
 80079ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80079be:	ec51 0b10 	vmov	r0, r1, d0
 80079c2:	f7f8 fe39 	bl	8000638 <__aeabi_dmul>
 80079c6:	4642      	mov	r2, r8
 80079c8:	464b      	mov	r3, r9
 80079ca:	f7f8 fc7f 	bl	80002cc <__adddf3>
 80079ce:	460b      	mov	r3, r1
 80079d0:	4979      	ldr	r1, [pc, #484]	; (8007bb8 <_strtod_l+0xbd0>)
 80079d2:	4a7b      	ldr	r2, [pc, #492]	; (8007bc0 <_strtod_l+0xbd8>)
 80079d4:	4019      	ands	r1, r3
 80079d6:	4291      	cmp	r1, r2
 80079d8:	4680      	mov	r8, r0
 80079da:	d944      	bls.n	8007a66 <_strtod_l+0xa7e>
 80079dc:	ee18 2a90 	vmov	r2, s17
 80079e0:	4b78      	ldr	r3, [pc, #480]	; (8007bc4 <_strtod_l+0xbdc>)
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d104      	bne.n	80079f0 <_strtod_l+0xa08>
 80079e6:	ee18 3a10 	vmov	r3, s16
 80079ea:	3301      	adds	r3, #1
 80079ec:	f43f ad40 	beq.w	8007470 <_strtod_l+0x488>
 80079f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007bc4 <_strtod_l+0xbdc>
 80079f4:	f04f 38ff 	mov.w	r8, #4294967295
 80079f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079fa:	4620      	mov	r0, r4
 80079fc:	f7fe fe6a 	bl	80066d4 <_Bfree>
 8007a00:	9905      	ldr	r1, [sp, #20]
 8007a02:	4620      	mov	r0, r4
 8007a04:	f7fe fe66 	bl	80066d4 <_Bfree>
 8007a08:	4659      	mov	r1, fp
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f7fe fe62 	bl	80066d4 <_Bfree>
 8007a10:	4629      	mov	r1, r5
 8007a12:	4620      	mov	r0, r4
 8007a14:	f7fe fe5e 	bl	80066d4 <_Bfree>
 8007a18:	e609      	b.n	800762e <_strtod_l+0x646>
 8007a1a:	f1b8 0f01 	cmp.w	r8, #1
 8007a1e:	d103      	bne.n	8007a28 <_strtod_l+0xa40>
 8007a20:	f1b9 0f00 	cmp.w	r9, #0
 8007a24:	f43f ad95 	beq.w	8007552 <_strtod_l+0x56a>
 8007a28:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007b80 <_strtod_l+0xb98>
 8007a2c:	4f60      	ldr	r7, [pc, #384]	; (8007bb0 <_strtod_l+0xbc8>)
 8007a2e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a32:	2600      	movs	r6, #0
 8007a34:	e7ae      	b.n	8007994 <_strtod_l+0x9ac>
 8007a36:	4f5f      	ldr	r7, [pc, #380]	; (8007bb4 <_strtod_l+0xbcc>)
 8007a38:	2600      	movs	r6, #0
 8007a3a:	e7a7      	b.n	800798c <_strtod_l+0x9a4>
 8007a3c:	4b5d      	ldr	r3, [pc, #372]	; (8007bb4 <_strtod_l+0xbcc>)
 8007a3e:	4630      	mov	r0, r6
 8007a40:	4639      	mov	r1, r7
 8007a42:	2200      	movs	r2, #0
 8007a44:	f7f8 fdf8 	bl	8000638 <__aeabi_dmul>
 8007a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460f      	mov	r7, r1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d09c      	beq.n	800798c <_strtod_l+0x9a4>
 8007a52:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007a56:	e79d      	b.n	8007994 <_strtod_l+0x9ac>
 8007a58:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007b88 <_strtod_l+0xba0>
 8007a5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007a60:	ec57 6b17 	vmov	r6, r7, d7
 8007a64:	e796      	b.n	8007994 <_strtod_l+0x9ac>
 8007a66:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	46ca      	mov	sl, r9
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1c2      	bne.n	80079f8 <_strtod_l+0xa10>
 8007a72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a78:	0d1b      	lsrs	r3, r3, #20
 8007a7a:	051b      	lsls	r3, r3, #20
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d1bb      	bne.n	80079f8 <_strtod_l+0xa10>
 8007a80:	4630      	mov	r0, r6
 8007a82:	4639      	mov	r1, r7
 8007a84:	f7f9 f938 	bl	8000cf8 <__aeabi_d2lz>
 8007a88:	f7f8 fda8 	bl	80005dc <__aeabi_l2d>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4630      	mov	r0, r6
 8007a92:	4639      	mov	r1, r7
 8007a94:	f7f8 fc18 	bl	80002c8 <__aeabi_dsub>
 8007a98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a9a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a9e:	ea43 0308 	orr.w	r3, r3, r8
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	4606      	mov	r6, r0
 8007aa6:	460f      	mov	r7, r1
 8007aa8:	d054      	beq.n	8007b54 <_strtod_l+0xb6c>
 8007aaa:	a339      	add	r3, pc, #228	; (adr r3, 8007b90 <_strtod_l+0xba8>)
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	f7f9 f834 	bl	8000b1c <__aeabi_dcmplt>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f47f ace5 	bne.w	8007484 <_strtod_l+0x49c>
 8007aba:	a337      	add	r3, pc, #220	; (adr r3, 8007b98 <_strtod_l+0xbb0>)
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	4639      	mov	r1, r7
 8007ac4:	f7f9 f848 	bl	8000b58 <__aeabi_dcmpgt>
 8007ac8:	2800      	cmp	r0, #0
 8007aca:	d095      	beq.n	80079f8 <_strtod_l+0xa10>
 8007acc:	e4da      	b.n	8007484 <_strtod_l+0x49c>
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	b333      	cbz	r3, 8007b20 <_strtod_l+0xb38>
 8007ad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ad4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ad8:	d822      	bhi.n	8007b20 <_strtod_l+0xb38>
 8007ada:	a331      	add	r3, pc, #196	; (adr r3, 8007ba0 <_strtod_l+0xbb8>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	4630      	mov	r0, r6
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f9 f824 	bl	8000b30 <__aeabi_dcmple>
 8007ae8:	b1a0      	cbz	r0, 8007b14 <_strtod_l+0xb2c>
 8007aea:	4639      	mov	r1, r7
 8007aec:	4630      	mov	r0, r6
 8007aee:	f7f9 f87b 	bl	8000be8 <__aeabi_d2uiz>
 8007af2:	2801      	cmp	r0, #1
 8007af4:	bf38      	it	cc
 8007af6:	2001      	movcc	r0, #1
 8007af8:	f7f8 fd24 	bl	8000544 <__aeabi_ui2d>
 8007afc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007afe:	4606      	mov	r6, r0
 8007b00:	460f      	mov	r7, r1
 8007b02:	bb23      	cbnz	r3, 8007b4e <_strtod_l+0xb66>
 8007b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b08:	9010      	str	r0, [sp, #64]	; 0x40
 8007b0a:	9311      	str	r3, [sp, #68]	; 0x44
 8007b0c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b10:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b18:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b1c:	1a9b      	subs	r3, r3, r2
 8007b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b20:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b24:	eeb0 0a48 	vmov.f32	s0, s16
 8007b28:	eef0 0a68 	vmov.f32	s1, s17
 8007b2c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007b30:	f7ff f8fc 	bl	8006d2c <__ulp>
 8007b34:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007b38:	ec53 2b10 	vmov	r2, r3, d0
 8007b3c:	f7f8 fd7c 	bl	8000638 <__aeabi_dmul>
 8007b40:	ec53 2b18 	vmov	r2, r3, d8
 8007b44:	f7f8 fbc2 	bl	80002cc <__adddf3>
 8007b48:	4680      	mov	r8, r0
 8007b4a:	4689      	mov	r9, r1
 8007b4c:	e78d      	b.n	8007a6a <_strtod_l+0xa82>
 8007b4e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007b52:	e7db      	b.n	8007b0c <_strtod_l+0xb24>
 8007b54:	a314      	add	r3, pc, #80	; (adr r3, 8007ba8 <_strtod_l+0xbc0>)
 8007b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5a:	f7f8 ffdf 	bl	8000b1c <__aeabi_dcmplt>
 8007b5e:	e7b3      	b.n	8007ac8 <_strtod_l+0xae0>
 8007b60:	2300      	movs	r3, #0
 8007b62:	930a      	str	r3, [sp, #40]	; 0x28
 8007b64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	f7ff ba7c 	b.w	8007066 <_strtod_l+0x7e>
 8007b6e:	2a65      	cmp	r2, #101	; 0x65
 8007b70:	f43f ab75 	beq.w	800725e <_strtod_l+0x276>
 8007b74:	2a45      	cmp	r2, #69	; 0x45
 8007b76:	f43f ab72 	beq.w	800725e <_strtod_l+0x276>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	f7ff bbaa 	b.w	80072d4 <_strtod_l+0x2ec>
 8007b80:	00000000 	.word	0x00000000
 8007b84:	bff00000 	.word	0xbff00000
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	3ff00000 	.word	0x3ff00000
 8007b90:	94a03595 	.word	0x94a03595
 8007b94:	3fdfffff 	.word	0x3fdfffff
 8007b98:	35afe535 	.word	0x35afe535
 8007b9c:	3fe00000 	.word	0x3fe00000
 8007ba0:	ffc00000 	.word	0xffc00000
 8007ba4:	41dfffff 	.word	0x41dfffff
 8007ba8:	94a03595 	.word	0x94a03595
 8007bac:	3fcfffff 	.word	0x3fcfffff
 8007bb0:	3ff00000 	.word	0x3ff00000
 8007bb4:	3fe00000 	.word	0x3fe00000
 8007bb8:	7ff00000 	.word	0x7ff00000
 8007bbc:	7fe00000 	.word	0x7fe00000
 8007bc0:	7c9fffff 	.word	0x7c9fffff
 8007bc4:	7fefffff 	.word	0x7fefffff

08007bc8 <_strtod_r>:
 8007bc8:	4b01      	ldr	r3, [pc, #4]	; (8007bd0 <_strtod_r+0x8>)
 8007bca:	f7ff ba0d 	b.w	8006fe8 <_strtod_l>
 8007bce:	bf00      	nop
 8007bd0:	20000068 	.word	0x20000068

08007bd4 <_strtol_l.constprop.0>:
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bda:	d001      	beq.n	8007be0 <_strtol_l.constprop.0+0xc>
 8007bdc:	2b24      	cmp	r3, #36	; 0x24
 8007bde:	d906      	bls.n	8007bee <_strtol_l.constprop.0+0x1a>
 8007be0:	f7fd fd8a 	bl	80056f8 <__errno>
 8007be4:	2316      	movs	r3, #22
 8007be6:	6003      	str	r3, [r0, #0]
 8007be8:	2000      	movs	r0, #0
 8007bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007cd4 <_strtol_l.constprop.0+0x100>
 8007bf2:	460d      	mov	r5, r1
 8007bf4:	462e      	mov	r6, r5
 8007bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bfa:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007bfe:	f017 0708 	ands.w	r7, r7, #8
 8007c02:	d1f7      	bne.n	8007bf4 <_strtol_l.constprop.0+0x20>
 8007c04:	2c2d      	cmp	r4, #45	; 0x2d
 8007c06:	d132      	bne.n	8007c6e <_strtol_l.constprop.0+0x9a>
 8007c08:	782c      	ldrb	r4, [r5, #0]
 8007c0a:	2701      	movs	r7, #1
 8007c0c:	1cb5      	adds	r5, r6, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d05b      	beq.n	8007cca <_strtol_l.constprop.0+0xf6>
 8007c12:	2b10      	cmp	r3, #16
 8007c14:	d109      	bne.n	8007c2a <_strtol_l.constprop.0+0x56>
 8007c16:	2c30      	cmp	r4, #48	; 0x30
 8007c18:	d107      	bne.n	8007c2a <_strtol_l.constprop.0+0x56>
 8007c1a:	782c      	ldrb	r4, [r5, #0]
 8007c1c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c20:	2c58      	cmp	r4, #88	; 0x58
 8007c22:	d14d      	bne.n	8007cc0 <_strtol_l.constprop.0+0xec>
 8007c24:	786c      	ldrb	r4, [r5, #1]
 8007c26:	2310      	movs	r3, #16
 8007c28:	3502      	adds	r5, #2
 8007c2a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007c2e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c32:	f04f 0e00 	mov.w	lr, #0
 8007c36:	fbb8 f9f3 	udiv	r9, r8, r3
 8007c3a:	4676      	mov	r6, lr
 8007c3c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007c40:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007c44:	f1bc 0f09 	cmp.w	ip, #9
 8007c48:	d816      	bhi.n	8007c78 <_strtol_l.constprop.0+0xa4>
 8007c4a:	4664      	mov	r4, ip
 8007c4c:	42a3      	cmp	r3, r4
 8007c4e:	dd24      	ble.n	8007c9a <_strtol_l.constprop.0+0xc6>
 8007c50:	f1be 3fff 	cmp.w	lr, #4294967295
 8007c54:	d008      	beq.n	8007c68 <_strtol_l.constprop.0+0x94>
 8007c56:	45b1      	cmp	r9, r6
 8007c58:	d31c      	bcc.n	8007c94 <_strtol_l.constprop.0+0xc0>
 8007c5a:	d101      	bne.n	8007c60 <_strtol_l.constprop.0+0x8c>
 8007c5c:	45a2      	cmp	sl, r4
 8007c5e:	db19      	blt.n	8007c94 <_strtol_l.constprop.0+0xc0>
 8007c60:	fb06 4603 	mla	r6, r6, r3, r4
 8007c64:	f04f 0e01 	mov.w	lr, #1
 8007c68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c6c:	e7e8      	b.n	8007c40 <_strtol_l.constprop.0+0x6c>
 8007c6e:	2c2b      	cmp	r4, #43	; 0x2b
 8007c70:	bf04      	itt	eq
 8007c72:	782c      	ldrbeq	r4, [r5, #0]
 8007c74:	1cb5      	addeq	r5, r6, #2
 8007c76:	e7ca      	b.n	8007c0e <_strtol_l.constprop.0+0x3a>
 8007c78:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007c7c:	f1bc 0f19 	cmp.w	ip, #25
 8007c80:	d801      	bhi.n	8007c86 <_strtol_l.constprop.0+0xb2>
 8007c82:	3c37      	subs	r4, #55	; 0x37
 8007c84:	e7e2      	b.n	8007c4c <_strtol_l.constprop.0+0x78>
 8007c86:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007c8a:	f1bc 0f19 	cmp.w	ip, #25
 8007c8e:	d804      	bhi.n	8007c9a <_strtol_l.constprop.0+0xc6>
 8007c90:	3c57      	subs	r4, #87	; 0x57
 8007c92:	e7db      	b.n	8007c4c <_strtol_l.constprop.0+0x78>
 8007c94:	f04f 3eff 	mov.w	lr, #4294967295
 8007c98:	e7e6      	b.n	8007c68 <_strtol_l.constprop.0+0x94>
 8007c9a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007c9e:	d105      	bne.n	8007cac <_strtol_l.constprop.0+0xd8>
 8007ca0:	2322      	movs	r3, #34	; 0x22
 8007ca2:	6003      	str	r3, [r0, #0]
 8007ca4:	4646      	mov	r6, r8
 8007ca6:	b942      	cbnz	r2, 8007cba <_strtol_l.constprop.0+0xe6>
 8007ca8:	4630      	mov	r0, r6
 8007caa:	e79e      	b.n	8007bea <_strtol_l.constprop.0+0x16>
 8007cac:	b107      	cbz	r7, 8007cb0 <_strtol_l.constprop.0+0xdc>
 8007cae:	4276      	negs	r6, r6
 8007cb0:	2a00      	cmp	r2, #0
 8007cb2:	d0f9      	beq.n	8007ca8 <_strtol_l.constprop.0+0xd4>
 8007cb4:	f1be 0f00 	cmp.w	lr, #0
 8007cb8:	d000      	beq.n	8007cbc <_strtol_l.constprop.0+0xe8>
 8007cba:	1e69      	subs	r1, r5, #1
 8007cbc:	6011      	str	r1, [r2, #0]
 8007cbe:	e7f3      	b.n	8007ca8 <_strtol_l.constprop.0+0xd4>
 8007cc0:	2430      	movs	r4, #48	; 0x30
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1b1      	bne.n	8007c2a <_strtol_l.constprop.0+0x56>
 8007cc6:	2308      	movs	r3, #8
 8007cc8:	e7af      	b.n	8007c2a <_strtol_l.constprop.0+0x56>
 8007cca:	2c30      	cmp	r4, #48	; 0x30
 8007ccc:	d0a5      	beq.n	8007c1a <_strtol_l.constprop.0+0x46>
 8007cce:	230a      	movs	r3, #10
 8007cd0:	e7ab      	b.n	8007c2a <_strtol_l.constprop.0+0x56>
 8007cd2:	bf00      	nop
 8007cd4:	08009169 	.word	0x08009169

08007cd8 <_strtol_r>:
 8007cd8:	f7ff bf7c 	b.w	8007bd4 <_strtol_l.constprop.0>

08007cdc <__ssputs_r>:
 8007cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	688e      	ldr	r6, [r1, #8]
 8007ce2:	461f      	mov	r7, r3
 8007ce4:	42be      	cmp	r6, r7
 8007ce6:	680b      	ldr	r3, [r1, #0]
 8007ce8:	4682      	mov	sl, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	4690      	mov	r8, r2
 8007cee:	d82c      	bhi.n	8007d4a <__ssputs_r+0x6e>
 8007cf0:	898a      	ldrh	r2, [r1, #12]
 8007cf2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cf6:	d026      	beq.n	8007d46 <__ssputs_r+0x6a>
 8007cf8:	6965      	ldr	r5, [r4, #20]
 8007cfa:	6909      	ldr	r1, [r1, #16]
 8007cfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d00:	eba3 0901 	sub.w	r9, r3, r1
 8007d04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d08:	1c7b      	adds	r3, r7, #1
 8007d0a:	444b      	add	r3, r9
 8007d0c:	106d      	asrs	r5, r5, #1
 8007d0e:	429d      	cmp	r5, r3
 8007d10:	bf38      	it	cc
 8007d12:	461d      	movcc	r5, r3
 8007d14:	0553      	lsls	r3, r2, #21
 8007d16:	d527      	bpl.n	8007d68 <__ssputs_r+0x8c>
 8007d18:	4629      	mov	r1, r5
 8007d1a:	f7fe fc0f 	bl	800653c <_malloc_r>
 8007d1e:	4606      	mov	r6, r0
 8007d20:	b360      	cbz	r0, 8007d7c <__ssputs_r+0xa0>
 8007d22:	6921      	ldr	r1, [r4, #16]
 8007d24:	464a      	mov	r2, r9
 8007d26:	f000 fa1b 	bl	8008160 <memcpy>
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d34:	81a3      	strh	r3, [r4, #12]
 8007d36:	6126      	str	r6, [r4, #16]
 8007d38:	6165      	str	r5, [r4, #20]
 8007d3a:	444e      	add	r6, r9
 8007d3c:	eba5 0509 	sub.w	r5, r5, r9
 8007d40:	6026      	str	r6, [r4, #0]
 8007d42:	60a5      	str	r5, [r4, #8]
 8007d44:	463e      	mov	r6, r7
 8007d46:	42be      	cmp	r6, r7
 8007d48:	d900      	bls.n	8007d4c <__ssputs_r+0x70>
 8007d4a:	463e      	mov	r6, r7
 8007d4c:	6820      	ldr	r0, [r4, #0]
 8007d4e:	4632      	mov	r2, r6
 8007d50:	4641      	mov	r1, r8
 8007d52:	f000 f9c9 	bl	80080e8 <memmove>
 8007d56:	68a3      	ldr	r3, [r4, #8]
 8007d58:	1b9b      	subs	r3, r3, r6
 8007d5a:	60a3      	str	r3, [r4, #8]
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	4433      	add	r3, r6
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	2000      	movs	r0, #0
 8007d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d68:	462a      	mov	r2, r5
 8007d6a:	f000 fdae 	bl	80088ca <_realloc_r>
 8007d6e:	4606      	mov	r6, r0
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d1e0      	bne.n	8007d36 <__ssputs_r+0x5a>
 8007d74:	6921      	ldr	r1, [r4, #16]
 8007d76:	4650      	mov	r0, sl
 8007d78:	f7fe fb6c 	bl	8006454 <_free_r>
 8007d7c:	230c      	movs	r3, #12
 8007d7e:	f8ca 3000 	str.w	r3, [sl]
 8007d82:	89a3      	ldrh	r3, [r4, #12]
 8007d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d88:	81a3      	strh	r3, [r4, #12]
 8007d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d8e:	e7e9      	b.n	8007d64 <__ssputs_r+0x88>

08007d90 <_svfiprintf_r>:
 8007d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d94:	4698      	mov	r8, r3
 8007d96:	898b      	ldrh	r3, [r1, #12]
 8007d98:	061b      	lsls	r3, r3, #24
 8007d9a:	b09d      	sub	sp, #116	; 0x74
 8007d9c:	4607      	mov	r7, r0
 8007d9e:	460d      	mov	r5, r1
 8007da0:	4614      	mov	r4, r2
 8007da2:	d50e      	bpl.n	8007dc2 <_svfiprintf_r+0x32>
 8007da4:	690b      	ldr	r3, [r1, #16]
 8007da6:	b963      	cbnz	r3, 8007dc2 <_svfiprintf_r+0x32>
 8007da8:	2140      	movs	r1, #64	; 0x40
 8007daa:	f7fe fbc7 	bl	800653c <_malloc_r>
 8007dae:	6028      	str	r0, [r5, #0]
 8007db0:	6128      	str	r0, [r5, #16]
 8007db2:	b920      	cbnz	r0, 8007dbe <_svfiprintf_r+0x2e>
 8007db4:	230c      	movs	r3, #12
 8007db6:	603b      	str	r3, [r7, #0]
 8007db8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dbc:	e0d0      	b.n	8007f60 <_svfiprintf_r+0x1d0>
 8007dbe:	2340      	movs	r3, #64	; 0x40
 8007dc0:	616b      	str	r3, [r5, #20]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc6:	2320      	movs	r3, #32
 8007dc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd0:	2330      	movs	r3, #48	; 0x30
 8007dd2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f78 <_svfiprintf_r+0x1e8>
 8007dd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dda:	f04f 0901 	mov.w	r9, #1
 8007dde:	4623      	mov	r3, r4
 8007de0:	469a      	mov	sl, r3
 8007de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de6:	b10a      	cbz	r2, 8007dec <_svfiprintf_r+0x5c>
 8007de8:	2a25      	cmp	r2, #37	; 0x25
 8007dea:	d1f9      	bne.n	8007de0 <_svfiprintf_r+0x50>
 8007dec:	ebba 0b04 	subs.w	fp, sl, r4
 8007df0:	d00b      	beq.n	8007e0a <_svfiprintf_r+0x7a>
 8007df2:	465b      	mov	r3, fp
 8007df4:	4622      	mov	r2, r4
 8007df6:	4629      	mov	r1, r5
 8007df8:	4638      	mov	r0, r7
 8007dfa:	f7ff ff6f 	bl	8007cdc <__ssputs_r>
 8007dfe:	3001      	adds	r0, #1
 8007e00:	f000 80a9 	beq.w	8007f56 <_svfiprintf_r+0x1c6>
 8007e04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e06:	445a      	add	r2, fp
 8007e08:	9209      	str	r2, [sp, #36]	; 0x24
 8007e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80a1 	beq.w	8007f56 <_svfiprintf_r+0x1c6>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e1e:	f10a 0a01 	add.w	sl, sl, #1
 8007e22:	9304      	str	r3, [sp, #16]
 8007e24:	9307      	str	r3, [sp, #28]
 8007e26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e2a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e2c:	4654      	mov	r4, sl
 8007e2e:	2205      	movs	r2, #5
 8007e30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e34:	4850      	ldr	r0, [pc, #320]	; (8007f78 <_svfiprintf_r+0x1e8>)
 8007e36:	f7f8 f9eb 	bl	8000210 <memchr>
 8007e3a:	9a04      	ldr	r2, [sp, #16]
 8007e3c:	b9d8      	cbnz	r0, 8007e76 <_svfiprintf_r+0xe6>
 8007e3e:	06d0      	lsls	r0, r2, #27
 8007e40:	bf44      	itt	mi
 8007e42:	2320      	movmi	r3, #32
 8007e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e48:	0711      	lsls	r1, r2, #28
 8007e4a:	bf44      	itt	mi
 8007e4c:	232b      	movmi	r3, #43	; 0x2b
 8007e4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e52:	f89a 3000 	ldrb.w	r3, [sl]
 8007e56:	2b2a      	cmp	r3, #42	; 0x2a
 8007e58:	d015      	beq.n	8007e86 <_svfiprintf_r+0xf6>
 8007e5a:	9a07      	ldr	r2, [sp, #28]
 8007e5c:	4654      	mov	r4, sl
 8007e5e:	2000      	movs	r0, #0
 8007e60:	f04f 0c0a 	mov.w	ip, #10
 8007e64:	4621      	mov	r1, r4
 8007e66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e6a:	3b30      	subs	r3, #48	; 0x30
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d94d      	bls.n	8007f0c <_svfiprintf_r+0x17c>
 8007e70:	b1b0      	cbz	r0, 8007ea0 <_svfiprintf_r+0x110>
 8007e72:	9207      	str	r2, [sp, #28]
 8007e74:	e014      	b.n	8007ea0 <_svfiprintf_r+0x110>
 8007e76:	eba0 0308 	sub.w	r3, r0, r8
 8007e7a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	9304      	str	r3, [sp, #16]
 8007e82:	46a2      	mov	sl, r4
 8007e84:	e7d2      	b.n	8007e2c <_svfiprintf_r+0x9c>
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	1d19      	adds	r1, r3, #4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	9103      	str	r1, [sp, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	bfbb      	ittet	lt
 8007e92:	425b      	neglt	r3, r3
 8007e94:	f042 0202 	orrlt.w	r2, r2, #2
 8007e98:	9307      	strge	r3, [sp, #28]
 8007e9a:	9307      	strlt	r3, [sp, #28]
 8007e9c:	bfb8      	it	lt
 8007e9e:	9204      	strlt	r2, [sp, #16]
 8007ea0:	7823      	ldrb	r3, [r4, #0]
 8007ea2:	2b2e      	cmp	r3, #46	; 0x2e
 8007ea4:	d10c      	bne.n	8007ec0 <_svfiprintf_r+0x130>
 8007ea6:	7863      	ldrb	r3, [r4, #1]
 8007ea8:	2b2a      	cmp	r3, #42	; 0x2a
 8007eaa:	d134      	bne.n	8007f16 <_svfiprintf_r+0x186>
 8007eac:	9b03      	ldr	r3, [sp, #12]
 8007eae:	1d1a      	adds	r2, r3, #4
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	9203      	str	r2, [sp, #12]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	bfb8      	it	lt
 8007eb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ebc:	3402      	adds	r4, #2
 8007ebe:	9305      	str	r3, [sp, #20]
 8007ec0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007f88 <_svfiprintf_r+0x1f8>
 8007ec4:	7821      	ldrb	r1, [r4, #0]
 8007ec6:	2203      	movs	r2, #3
 8007ec8:	4650      	mov	r0, sl
 8007eca:	f7f8 f9a1 	bl	8000210 <memchr>
 8007ece:	b138      	cbz	r0, 8007ee0 <_svfiprintf_r+0x150>
 8007ed0:	9b04      	ldr	r3, [sp, #16]
 8007ed2:	eba0 000a 	sub.w	r0, r0, sl
 8007ed6:	2240      	movs	r2, #64	; 0x40
 8007ed8:	4082      	lsls	r2, r0
 8007eda:	4313      	orrs	r3, r2
 8007edc:	3401      	adds	r4, #1
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee4:	4825      	ldr	r0, [pc, #148]	; (8007f7c <_svfiprintf_r+0x1ec>)
 8007ee6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eea:	2206      	movs	r2, #6
 8007eec:	f7f8 f990 	bl	8000210 <memchr>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d038      	beq.n	8007f66 <_svfiprintf_r+0x1d6>
 8007ef4:	4b22      	ldr	r3, [pc, #136]	; (8007f80 <_svfiprintf_r+0x1f0>)
 8007ef6:	bb1b      	cbnz	r3, 8007f40 <_svfiprintf_r+0x1b0>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	3307      	adds	r3, #7
 8007efc:	f023 0307 	bic.w	r3, r3, #7
 8007f00:	3308      	adds	r3, #8
 8007f02:	9303      	str	r3, [sp, #12]
 8007f04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f06:	4433      	add	r3, r6
 8007f08:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0a:	e768      	b.n	8007dde <_svfiprintf_r+0x4e>
 8007f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f10:	460c      	mov	r4, r1
 8007f12:	2001      	movs	r0, #1
 8007f14:	e7a6      	b.n	8007e64 <_svfiprintf_r+0xd4>
 8007f16:	2300      	movs	r3, #0
 8007f18:	3401      	adds	r4, #1
 8007f1a:	9305      	str	r3, [sp, #20]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f04f 0c0a 	mov.w	ip, #10
 8007f22:	4620      	mov	r0, r4
 8007f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f28:	3a30      	subs	r2, #48	; 0x30
 8007f2a:	2a09      	cmp	r2, #9
 8007f2c:	d903      	bls.n	8007f36 <_svfiprintf_r+0x1a6>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d0c6      	beq.n	8007ec0 <_svfiprintf_r+0x130>
 8007f32:	9105      	str	r1, [sp, #20]
 8007f34:	e7c4      	b.n	8007ec0 <_svfiprintf_r+0x130>
 8007f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f3a:	4604      	mov	r4, r0
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e7f0      	b.n	8007f22 <_svfiprintf_r+0x192>
 8007f40:	ab03      	add	r3, sp, #12
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	462a      	mov	r2, r5
 8007f46:	4b0f      	ldr	r3, [pc, #60]	; (8007f84 <_svfiprintf_r+0x1f4>)
 8007f48:	a904      	add	r1, sp, #16
 8007f4a:	4638      	mov	r0, r7
 8007f4c:	f7fc fc86 	bl	800485c <_printf_float>
 8007f50:	1c42      	adds	r2, r0, #1
 8007f52:	4606      	mov	r6, r0
 8007f54:	d1d6      	bne.n	8007f04 <_svfiprintf_r+0x174>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	065b      	lsls	r3, r3, #25
 8007f5a:	f53f af2d 	bmi.w	8007db8 <_svfiprintf_r+0x28>
 8007f5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f60:	b01d      	add	sp, #116	; 0x74
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	ab03      	add	r3, sp, #12
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <_svfiprintf_r+0x1f4>)
 8007f6e:	a904      	add	r1, sp, #16
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7fc ff17 	bl	8004da4 <_printf_i>
 8007f76:	e7eb      	b.n	8007f50 <_svfiprintf_r+0x1c0>
 8007f78:	08009269 	.word	0x08009269
 8007f7c:	08009273 	.word	0x08009273
 8007f80:	0800485d 	.word	0x0800485d
 8007f84:	08007cdd 	.word	0x08007cdd
 8007f88:	0800926f 	.word	0x0800926f

08007f8c <__sflush_r>:
 8007f8c:	898a      	ldrh	r2, [r1, #12]
 8007f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f92:	4605      	mov	r5, r0
 8007f94:	0710      	lsls	r0, r2, #28
 8007f96:	460c      	mov	r4, r1
 8007f98:	d458      	bmi.n	800804c <__sflush_r+0xc0>
 8007f9a:	684b      	ldr	r3, [r1, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dc05      	bgt.n	8007fac <__sflush_r+0x20>
 8007fa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	dc02      	bgt.n	8007fac <__sflush_r+0x20>
 8007fa6:	2000      	movs	r0, #0
 8007fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fae:	2e00      	cmp	r6, #0
 8007fb0:	d0f9      	beq.n	8007fa6 <__sflush_r+0x1a>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fb8:	682f      	ldr	r7, [r5, #0]
 8007fba:	6a21      	ldr	r1, [r4, #32]
 8007fbc:	602b      	str	r3, [r5, #0]
 8007fbe:	d032      	beq.n	8008026 <__sflush_r+0x9a>
 8007fc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fc2:	89a3      	ldrh	r3, [r4, #12]
 8007fc4:	075a      	lsls	r2, r3, #29
 8007fc6:	d505      	bpl.n	8007fd4 <__sflush_r+0x48>
 8007fc8:	6863      	ldr	r3, [r4, #4]
 8007fca:	1ac0      	subs	r0, r0, r3
 8007fcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fce:	b10b      	cbz	r3, 8007fd4 <__sflush_r+0x48>
 8007fd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fd2:	1ac0      	subs	r0, r0, r3
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fda:	6a21      	ldr	r1, [r4, #32]
 8007fdc:	4628      	mov	r0, r5
 8007fde:	47b0      	blx	r6
 8007fe0:	1c43      	adds	r3, r0, #1
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	d106      	bne.n	8007ff4 <__sflush_r+0x68>
 8007fe6:	6829      	ldr	r1, [r5, #0]
 8007fe8:	291d      	cmp	r1, #29
 8007fea:	d82b      	bhi.n	8008044 <__sflush_r+0xb8>
 8007fec:	4a29      	ldr	r2, [pc, #164]	; (8008094 <__sflush_r+0x108>)
 8007fee:	410a      	asrs	r2, r1
 8007ff0:	07d6      	lsls	r6, r2, #31
 8007ff2:	d427      	bmi.n	8008044 <__sflush_r+0xb8>
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	6062      	str	r2, [r4, #4]
 8007ff8:	04d9      	lsls	r1, r3, #19
 8007ffa:	6922      	ldr	r2, [r4, #16]
 8007ffc:	6022      	str	r2, [r4, #0]
 8007ffe:	d504      	bpl.n	800800a <__sflush_r+0x7e>
 8008000:	1c42      	adds	r2, r0, #1
 8008002:	d101      	bne.n	8008008 <__sflush_r+0x7c>
 8008004:	682b      	ldr	r3, [r5, #0]
 8008006:	b903      	cbnz	r3, 800800a <__sflush_r+0x7e>
 8008008:	6560      	str	r0, [r4, #84]	; 0x54
 800800a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800800c:	602f      	str	r7, [r5, #0]
 800800e:	2900      	cmp	r1, #0
 8008010:	d0c9      	beq.n	8007fa6 <__sflush_r+0x1a>
 8008012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008016:	4299      	cmp	r1, r3
 8008018:	d002      	beq.n	8008020 <__sflush_r+0x94>
 800801a:	4628      	mov	r0, r5
 800801c:	f7fe fa1a 	bl	8006454 <_free_r>
 8008020:	2000      	movs	r0, #0
 8008022:	6360      	str	r0, [r4, #52]	; 0x34
 8008024:	e7c0      	b.n	8007fa8 <__sflush_r+0x1c>
 8008026:	2301      	movs	r3, #1
 8008028:	4628      	mov	r0, r5
 800802a:	47b0      	blx	r6
 800802c:	1c41      	adds	r1, r0, #1
 800802e:	d1c8      	bne.n	8007fc2 <__sflush_r+0x36>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0c5      	beq.n	8007fc2 <__sflush_r+0x36>
 8008036:	2b1d      	cmp	r3, #29
 8008038:	d001      	beq.n	800803e <__sflush_r+0xb2>
 800803a:	2b16      	cmp	r3, #22
 800803c:	d101      	bne.n	8008042 <__sflush_r+0xb6>
 800803e:	602f      	str	r7, [r5, #0]
 8008040:	e7b1      	b.n	8007fa6 <__sflush_r+0x1a>
 8008042:	89a3      	ldrh	r3, [r4, #12]
 8008044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008048:	81a3      	strh	r3, [r4, #12]
 800804a:	e7ad      	b.n	8007fa8 <__sflush_r+0x1c>
 800804c:	690f      	ldr	r7, [r1, #16]
 800804e:	2f00      	cmp	r7, #0
 8008050:	d0a9      	beq.n	8007fa6 <__sflush_r+0x1a>
 8008052:	0793      	lsls	r3, r2, #30
 8008054:	680e      	ldr	r6, [r1, #0]
 8008056:	bf08      	it	eq
 8008058:	694b      	ldreq	r3, [r1, #20]
 800805a:	600f      	str	r7, [r1, #0]
 800805c:	bf18      	it	ne
 800805e:	2300      	movne	r3, #0
 8008060:	eba6 0807 	sub.w	r8, r6, r7
 8008064:	608b      	str	r3, [r1, #8]
 8008066:	f1b8 0f00 	cmp.w	r8, #0
 800806a:	dd9c      	ble.n	8007fa6 <__sflush_r+0x1a>
 800806c:	6a21      	ldr	r1, [r4, #32]
 800806e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008070:	4643      	mov	r3, r8
 8008072:	463a      	mov	r2, r7
 8008074:	4628      	mov	r0, r5
 8008076:	47b0      	blx	r6
 8008078:	2800      	cmp	r0, #0
 800807a:	dc06      	bgt.n	800808a <__sflush_r+0xfe>
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008082:	81a3      	strh	r3, [r4, #12]
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	e78e      	b.n	8007fa8 <__sflush_r+0x1c>
 800808a:	4407      	add	r7, r0
 800808c:	eba8 0800 	sub.w	r8, r8, r0
 8008090:	e7e9      	b.n	8008066 <__sflush_r+0xda>
 8008092:	bf00      	nop
 8008094:	dfbffffe 	.word	0xdfbffffe

08008098 <_fflush_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	690b      	ldr	r3, [r1, #16]
 800809c:	4605      	mov	r5, r0
 800809e:	460c      	mov	r4, r1
 80080a0:	b913      	cbnz	r3, 80080a8 <_fflush_r+0x10>
 80080a2:	2500      	movs	r5, #0
 80080a4:	4628      	mov	r0, r5
 80080a6:	bd38      	pop	{r3, r4, r5, pc}
 80080a8:	b118      	cbz	r0, 80080b2 <_fflush_r+0x1a>
 80080aa:	6a03      	ldr	r3, [r0, #32]
 80080ac:	b90b      	cbnz	r3, 80080b2 <_fflush_r+0x1a>
 80080ae:	f7fd fa37 	bl	8005520 <__sinit>
 80080b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0f3      	beq.n	80080a2 <_fflush_r+0xa>
 80080ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080bc:	07d0      	lsls	r0, r2, #31
 80080be:	d404      	bmi.n	80080ca <_fflush_r+0x32>
 80080c0:	0599      	lsls	r1, r3, #22
 80080c2:	d402      	bmi.n	80080ca <_fflush_r+0x32>
 80080c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080c6:	f7fd fb42 	bl	800574e <__retarget_lock_acquire_recursive>
 80080ca:	4628      	mov	r0, r5
 80080cc:	4621      	mov	r1, r4
 80080ce:	f7ff ff5d 	bl	8007f8c <__sflush_r>
 80080d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080d4:	07da      	lsls	r2, r3, #31
 80080d6:	4605      	mov	r5, r0
 80080d8:	d4e4      	bmi.n	80080a4 <_fflush_r+0xc>
 80080da:	89a3      	ldrh	r3, [r4, #12]
 80080dc:	059b      	lsls	r3, r3, #22
 80080de:	d4e1      	bmi.n	80080a4 <_fflush_r+0xc>
 80080e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080e2:	f7fd fb35 	bl	8005750 <__retarget_lock_release_recursive>
 80080e6:	e7dd      	b.n	80080a4 <_fflush_r+0xc>

080080e8 <memmove>:
 80080e8:	4288      	cmp	r0, r1
 80080ea:	b510      	push	{r4, lr}
 80080ec:	eb01 0402 	add.w	r4, r1, r2
 80080f0:	d902      	bls.n	80080f8 <memmove+0x10>
 80080f2:	4284      	cmp	r4, r0
 80080f4:	4623      	mov	r3, r4
 80080f6:	d807      	bhi.n	8008108 <memmove+0x20>
 80080f8:	1e43      	subs	r3, r0, #1
 80080fa:	42a1      	cmp	r1, r4
 80080fc:	d008      	beq.n	8008110 <memmove+0x28>
 80080fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008102:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008106:	e7f8      	b.n	80080fa <memmove+0x12>
 8008108:	4402      	add	r2, r0
 800810a:	4601      	mov	r1, r0
 800810c:	428a      	cmp	r2, r1
 800810e:	d100      	bne.n	8008112 <memmove+0x2a>
 8008110:	bd10      	pop	{r4, pc}
 8008112:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008116:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800811a:	e7f7      	b.n	800810c <memmove+0x24>

0800811c <strncmp>:
 800811c:	b510      	push	{r4, lr}
 800811e:	b16a      	cbz	r2, 800813c <strncmp+0x20>
 8008120:	3901      	subs	r1, #1
 8008122:	1884      	adds	r4, r0, r2
 8008124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008128:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800812c:	429a      	cmp	r2, r3
 800812e:	d103      	bne.n	8008138 <strncmp+0x1c>
 8008130:	42a0      	cmp	r0, r4
 8008132:	d001      	beq.n	8008138 <strncmp+0x1c>
 8008134:	2a00      	cmp	r2, #0
 8008136:	d1f5      	bne.n	8008124 <strncmp+0x8>
 8008138:	1ad0      	subs	r0, r2, r3
 800813a:	bd10      	pop	{r4, pc}
 800813c:	4610      	mov	r0, r2
 800813e:	e7fc      	b.n	800813a <strncmp+0x1e>

08008140 <_sbrk_r>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d06      	ldr	r5, [pc, #24]	; (800815c <_sbrk_r+0x1c>)
 8008144:	2300      	movs	r3, #0
 8008146:	4604      	mov	r4, r0
 8008148:	4608      	mov	r0, r1
 800814a:	602b      	str	r3, [r5, #0]
 800814c:	f7f9 fe12 	bl	8001d74 <_sbrk>
 8008150:	1c43      	adds	r3, r0, #1
 8008152:	d102      	bne.n	800815a <_sbrk_r+0x1a>
 8008154:	682b      	ldr	r3, [r5, #0]
 8008156:	b103      	cbz	r3, 800815a <_sbrk_r+0x1a>
 8008158:	6023      	str	r3, [r4, #0]
 800815a:	bd38      	pop	{r3, r4, r5, pc}
 800815c:	20000580 	.word	0x20000580

08008160 <memcpy>:
 8008160:	440a      	add	r2, r1
 8008162:	4291      	cmp	r1, r2
 8008164:	f100 33ff 	add.w	r3, r0, #4294967295
 8008168:	d100      	bne.n	800816c <memcpy+0xc>
 800816a:	4770      	bx	lr
 800816c:	b510      	push	{r4, lr}
 800816e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008176:	4291      	cmp	r1, r2
 8008178:	d1f9      	bne.n	800816e <memcpy+0xe>
 800817a:	bd10      	pop	{r4, pc}
 800817c:	0000      	movs	r0, r0
	...

08008180 <nan>:
 8008180:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008188 <nan+0x8>
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	00000000 	.word	0x00000000
 800818c:	7ff80000 	.word	0x7ff80000

08008190 <__assert_func>:
 8008190:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008192:	4614      	mov	r4, r2
 8008194:	461a      	mov	r2, r3
 8008196:	4b09      	ldr	r3, [pc, #36]	; (80081bc <__assert_func+0x2c>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4605      	mov	r5, r0
 800819c:	68d8      	ldr	r0, [r3, #12]
 800819e:	b14c      	cbz	r4, 80081b4 <__assert_func+0x24>
 80081a0:	4b07      	ldr	r3, [pc, #28]	; (80081c0 <__assert_func+0x30>)
 80081a2:	9100      	str	r1, [sp, #0]
 80081a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081a8:	4906      	ldr	r1, [pc, #24]	; (80081c4 <__assert_func+0x34>)
 80081aa:	462b      	mov	r3, r5
 80081ac:	f000 fbca 	bl	8008944 <fiprintf>
 80081b0:	f000 fbda 	bl	8008968 <abort>
 80081b4:	4b04      	ldr	r3, [pc, #16]	; (80081c8 <__assert_func+0x38>)
 80081b6:	461c      	mov	r4, r3
 80081b8:	e7f3      	b.n	80081a2 <__assert_func+0x12>
 80081ba:	bf00      	nop
 80081bc:	20000064 	.word	0x20000064
 80081c0:	08009282 	.word	0x08009282
 80081c4:	0800928f 	.word	0x0800928f
 80081c8:	080092bd 	.word	0x080092bd

080081cc <_calloc_r>:
 80081cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081ce:	fba1 2402 	umull	r2, r4, r1, r2
 80081d2:	b94c      	cbnz	r4, 80081e8 <_calloc_r+0x1c>
 80081d4:	4611      	mov	r1, r2
 80081d6:	9201      	str	r2, [sp, #4]
 80081d8:	f7fe f9b0 	bl	800653c <_malloc_r>
 80081dc:	9a01      	ldr	r2, [sp, #4]
 80081de:	4605      	mov	r5, r0
 80081e0:	b930      	cbnz	r0, 80081f0 <_calloc_r+0x24>
 80081e2:	4628      	mov	r0, r5
 80081e4:	b003      	add	sp, #12
 80081e6:	bd30      	pop	{r4, r5, pc}
 80081e8:	220c      	movs	r2, #12
 80081ea:	6002      	str	r2, [r0, #0]
 80081ec:	2500      	movs	r5, #0
 80081ee:	e7f8      	b.n	80081e2 <_calloc_r+0x16>
 80081f0:	4621      	mov	r1, r4
 80081f2:	f7fd fa2e 	bl	8005652 <memset>
 80081f6:	e7f4      	b.n	80081e2 <_calloc_r+0x16>

080081f8 <rshift>:
 80081f8:	6903      	ldr	r3, [r0, #16]
 80081fa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80081fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008202:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008206:	f100 0414 	add.w	r4, r0, #20
 800820a:	dd45      	ble.n	8008298 <rshift+0xa0>
 800820c:	f011 011f 	ands.w	r1, r1, #31
 8008210:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008214:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008218:	d10c      	bne.n	8008234 <rshift+0x3c>
 800821a:	f100 0710 	add.w	r7, r0, #16
 800821e:	4629      	mov	r1, r5
 8008220:	42b1      	cmp	r1, r6
 8008222:	d334      	bcc.n	800828e <rshift+0x96>
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	1eea      	subs	r2, r5, #3
 800822a:	4296      	cmp	r6, r2
 800822c:	bf38      	it	cc
 800822e:	2300      	movcc	r3, #0
 8008230:	4423      	add	r3, r4
 8008232:	e015      	b.n	8008260 <rshift+0x68>
 8008234:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008238:	f1c1 0820 	rsb	r8, r1, #32
 800823c:	40cf      	lsrs	r7, r1
 800823e:	f105 0e04 	add.w	lr, r5, #4
 8008242:	46a1      	mov	r9, r4
 8008244:	4576      	cmp	r6, lr
 8008246:	46f4      	mov	ip, lr
 8008248:	d815      	bhi.n	8008276 <rshift+0x7e>
 800824a:	1a9a      	subs	r2, r3, r2
 800824c:	0092      	lsls	r2, r2, #2
 800824e:	3a04      	subs	r2, #4
 8008250:	3501      	adds	r5, #1
 8008252:	42ae      	cmp	r6, r5
 8008254:	bf38      	it	cc
 8008256:	2200      	movcc	r2, #0
 8008258:	18a3      	adds	r3, r4, r2
 800825a:	50a7      	str	r7, [r4, r2]
 800825c:	b107      	cbz	r7, 8008260 <rshift+0x68>
 800825e:	3304      	adds	r3, #4
 8008260:	1b1a      	subs	r2, r3, r4
 8008262:	42a3      	cmp	r3, r4
 8008264:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008268:	bf08      	it	eq
 800826a:	2300      	moveq	r3, #0
 800826c:	6102      	str	r2, [r0, #16]
 800826e:	bf08      	it	eq
 8008270:	6143      	streq	r3, [r0, #20]
 8008272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008276:	f8dc c000 	ldr.w	ip, [ip]
 800827a:	fa0c fc08 	lsl.w	ip, ip, r8
 800827e:	ea4c 0707 	orr.w	r7, ip, r7
 8008282:	f849 7b04 	str.w	r7, [r9], #4
 8008286:	f85e 7b04 	ldr.w	r7, [lr], #4
 800828a:	40cf      	lsrs	r7, r1
 800828c:	e7da      	b.n	8008244 <rshift+0x4c>
 800828e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008292:	f847 cf04 	str.w	ip, [r7, #4]!
 8008296:	e7c3      	b.n	8008220 <rshift+0x28>
 8008298:	4623      	mov	r3, r4
 800829a:	e7e1      	b.n	8008260 <rshift+0x68>

0800829c <__hexdig_fun>:
 800829c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80082a0:	2b09      	cmp	r3, #9
 80082a2:	d802      	bhi.n	80082aa <__hexdig_fun+0xe>
 80082a4:	3820      	subs	r0, #32
 80082a6:	b2c0      	uxtb	r0, r0
 80082a8:	4770      	bx	lr
 80082aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80082ae:	2b05      	cmp	r3, #5
 80082b0:	d801      	bhi.n	80082b6 <__hexdig_fun+0x1a>
 80082b2:	3847      	subs	r0, #71	; 0x47
 80082b4:	e7f7      	b.n	80082a6 <__hexdig_fun+0xa>
 80082b6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80082ba:	2b05      	cmp	r3, #5
 80082bc:	d801      	bhi.n	80082c2 <__hexdig_fun+0x26>
 80082be:	3827      	subs	r0, #39	; 0x27
 80082c0:	e7f1      	b.n	80082a6 <__hexdig_fun+0xa>
 80082c2:	2000      	movs	r0, #0
 80082c4:	4770      	bx	lr
	...

080082c8 <__gethex>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	4617      	mov	r7, r2
 80082ce:	680a      	ldr	r2, [r1, #0]
 80082d0:	b085      	sub	sp, #20
 80082d2:	f102 0b02 	add.w	fp, r2, #2
 80082d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80082da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80082de:	4681      	mov	r9, r0
 80082e0:	468a      	mov	sl, r1
 80082e2:	9302      	str	r3, [sp, #8]
 80082e4:	32fe      	adds	r2, #254	; 0xfe
 80082e6:	eb02 030b 	add.w	r3, r2, fp
 80082ea:	46d8      	mov	r8, fp
 80082ec:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80082f0:	9301      	str	r3, [sp, #4]
 80082f2:	2830      	cmp	r0, #48	; 0x30
 80082f4:	d0f7      	beq.n	80082e6 <__gethex+0x1e>
 80082f6:	f7ff ffd1 	bl	800829c <__hexdig_fun>
 80082fa:	4604      	mov	r4, r0
 80082fc:	2800      	cmp	r0, #0
 80082fe:	d138      	bne.n	8008372 <__gethex+0xaa>
 8008300:	49a7      	ldr	r1, [pc, #668]	; (80085a0 <__gethex+0x2d8>)
 8008302:	2201      	movs	r2, #1
 8008304:	4640      	mov	r0, r8
 8008306:	f7ff ff09 	bl	800811c <strncmp>
 800830a:	4606      	mov	r6, r0
 800830c:	2800      	cmp	r0, #0
 800830e:	d169      	bne.n	80083e4 <__gethex+0x11c>
 8008310:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008314:	465d      	mov	r5, fp
 8008316:	f7ff ffc1 	bl	800829c <__hexdig_fun>
 800831a:	2800      	cmp	r0, #0
 800831c:	d064      	beq.n	80083e8 <__gethex+0x120>
 800831e:	465a      	mov	r2, fp
 8008320:	7810      	ldrb	r0, [r2, #0]
 8008322:	2830      	cmp	r0, #48	; 0x30
 8008324:	4690      	mov	r8, r2
 8008326:	f102 0201 	add.w	r2, r2, #1
 800832a:	d0f9      	beq.n	8008320 <__gethex+0x58>
 800832c:	f7ff ffb6 	bl	800829c <__hexdig_fun>
 8008330:	2301      	movs	r3, #1
 8008332:	fab0 f480 	clz	r4, r0
 8008336:	0964      	lsrs	r4, r4, #5
 8008338:	465e      	mov	r6, fp
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	4642      	mov	r2, r8
 800833e:	4615      	mov	r5, r2
 8008340:	3201      	adds	r2, #1
 8008342:	7828      	ldrb	r0, [r5, #0]
 8008344:	f7ff ffaa 	bl	800829c <__hexdig_fun>
 8008348:	2800      	cmp	r0, #0
 800834a:	d1f8      	bne.n	800833e <__gethex+0x76>
 800834c:	4994      	ldr	r1, [pc, #592]	; (80085a0 <__gethex+0x2d8>)
 800834e:	2201      	movs	r2, #1
 8008350:	4628      	mov	r0, r5
 8008352:	f7ff fee3 	bl	800811c <strncmp>
 8008356:	b978      	cbnz	r0, 8008378 <__gethex+0xb0>
 8008358:	b946      	cbnz	r6, 800836c <__gethex+0xa4>
 800835a:	1c6e      	adds	r6, r5, #1
 800835c:	4632      	mov	r2, r6
 800835e:	4615      	mov	r5, r2
 8008360:	3201      	adds	r2, #1
 8008362:	7828      	ldrb	r0, [r5, #0]
 8008364:	f7ff ff9a 	bl	800829c <__hexdig_fun>
 8008368:	2800      	cmp	r0, #0
 800836a:	d1f8      	bne.n	800835e <__gethex+0x96>
 800836c:	1b73      	subs	r3, r6, r5
 800836e:	009e      	lsls	r6, r3, #2
 8008370:	e004      	b.n	800837c <__gethex+0xb4>
 8008372:	2400      	movs	r4, #0
 8008374:	4626      	mov	r6, r4
 8008376:	e7e1      	b.n	800833c <__gethex+0x74>
 8008378:	2e00      	cmp	r6, #0
 800837a:	d1f7      	bne.n	800836c <__gethex+0xa4>
 800837c:	782b      	ldrb	r3, [r5, #0]
 800837e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008382:	2b50      	cmp	r3, #80	; 0x50
 8008384:	d13d      	bne.n	8008402 <__gethex+0x13a>
 8008386:	786b      	ldrb	r3, [r5, #1]
 8008388:	2b2b      	cmp	r3, #43	; 0x2b
 800838a:	d02f      	beq.n	80083ec <__gethex+0x124>
 800838c:	2b2d      	cmp	r3, #45	; 0x2d
 800838e:	d031      	beq.n	80083f4 <__gethex+0x12c>
 8008390:	1c69      	adds	r1, r5, #1
 8008392:	f04f 0b00 	mov.w	fp, #0
 8008396:	7808      	ldrb	r0, [r1, #0]
 8008398:	f7ff ff80 	bl	800829c <__hexdig_fun>
 800839c:	1e42      	subs	r2, r0, #1
 800839e:	b2d2      	uxtb	r2, r2
 80083a0:	2a18      	cmp	r2, #24
 80083a2:	d82e      	bhi.n	8008402 <__gethex+0x13a>
 80083a4:	f1a0 0210 	sub.w	r2, r0, #16
 80083a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083ac:	f7ff ff76 	bl	800829c <__hexdig_fun>
 80083b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80083b4:	fa5f fc8c 	uxtb.w	ip, ip
 80083b8:	f1bc 0f18 	cmp.w	ip, #24
 80083bc:	d91d      	bls.n	80083fa <__gethex+0x132>
 80083be:	f1bb 0f00 	cmp.w	fp, #0
 80083c2:	d000      	beq.n	80083c6 <__gethex+0xfe>
 80083c4:	4252      	negs	r2, r2
 80083c6:	4416      	add	r6, r2
 80083c8:	f8ca 1000 	str.w	r1, [sl]
 80083cc:	b1dc      	cbz	r4, 8008406 <__gethex+0x13e>
 80083ce:	9b01      	ldr	r3, [sp, #4]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	bf14      	ite	ne
 80083d4:	f04f 0800 	movne.w	r8, #0
 80083d8:	f04f 0806 	moveq.w	r8, #6
 80083dc:	4640      	mov	r0, r8
 80083de:	b005      	add	sp, #20
 80083e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e4:	4645      	mov	r5, r8
 80083e6:	4626      	mov	r6, r4
 80083e8:	2401      	movs	r4, #1
 80083ea:	e7c7      	b.n	800837c <__gethex+0xb4>
 80083ec:	f04f 0b00 	mov.w	fp, #0
 80083f0:	1ca9      	adds	r1, r5, #2
 80083f2:	e7d0      	b.n	8008396 <__gethex+0xce>
 80083f4:	f04f 0b01 	mov.w	fp, #1
 80083f8:	e7fa      	b.n	80083f0 <__gethex+0x128>
 80083fa:	230a      	movs	r3, #10
 80083fc:	fb03 0002 	mla	r0, r3, r2, r0
 8008400:	e7d0      	b.n	80083a4 <__gethex+0xdc>
 8008402:	4629      	mov	r1, r5
 8008404:	e7e0      	b.n	80083c8 <__gethex+0x100>
 8008406:	eba5 0308 	sub.w	r3, r5, r8
 800840a:	3b01      	subs	r3, #1
 800840c:	4621      	mov	r1, r4
 800840e:	2b07      	cmp	r3, #7
 8008410:	dc0a      	bgt.n	8008428 <__gethex+0x160>
 8008412:	4648      	mov	r0, r9
 8008414:	f7fe f91e 	bl	8006654 <_Balloc>
 8008418:	4604      	mov	r4, r0
 800841a:	b940      	cbnz	r0, 800842e <__gethex+0x166>
 800841c:	4b61      	ldr	r3, [pc, #388]	; (80085a4 <__gethex+0x2dc>)
 800841e:	4602      	mov	r2, r0
 8008420:	21e4      	movs	r1, #228	; 0xe4
 8008422:	4861      	ldr	r0, [pc, #388]	; (80085a8 <__gethex+0x2e0>)
 8008424:	f7ff feb4 	bl	8008190 <__assert_func>
 8008428:	3101      	adds	r1, #1
 800842a:	105b      	asrs	r3, r3, #1
 800842c:	e7ef      	b.n	800840e <__gethex+0x146>
 800842e:	f100 0a14 	add.w	sl, r0, #20
 8008432:	2300      	movs	r3, #0
 8008434:	495a      	ldr	r1, [pc, #360]	; (80085a0 <__gethex+0x2d8>)
 8008436:	f8cd a004 	str.w	sl, [sp, #4]
 800843a:	469b      	mov	fp, r3
 800843c:	45a8      	cmp	r8, r5
 800843e:	d342      	bcc.n	80084c6 <__gethex+0x1fe>
 8008440:	9801      	ldr	r0, [sp, #4]
 8008442:	f840 bb04 	str.w	fp, [r0], #4
 8008446:	eba0 000a 	sub.w	r0, r0, sl
 800844a:	1080      	asrs	r0, r0, #2
 800844c:	6120      	str	r0, [r4, #16]
 800844e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008452:	4658      	mov	r0, fp
 8008454:	f7fe f9f0 	bl	8006838 <__hi0bits>
 8008458:	683d      	ldr	r5, [r7, #0]
 800845a:	eba8 0000 	sub.w	r0, r8, r0
 800845e:	42a8      	cmp	r0, r5
 8008460:	dd59      	ble.n	8008516 <__gethex+0x24e>
 8008462:	eba0 0805 	sub.w	r8, r0, r5
 8008466:	4641      	mov	r1, r8
 8008468:	4620      	mov	r0, r4
 800846a:	f7fe fd7f 	bl	8006f6c <__any_on>
 800846e:	4683      	mov	fp, r0
 8008470:	b1b8      	cbz	r0, 80084a2 <__gethex+0x1da>
 8008472:	f108 33ff 	add.w	r3, r8, #4294967295
 8008476:	1159      	asrs	r1, r3, #5
 8008478:	f003 021f 	and.w	r2, r3, #31
 800847c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008480:	f04f 0b01 	mov.w	fp, #1
 8008484:	fa0b f202 	lsl.w	r2, fp, r2
 8008488:	420a      	tst	r2, r1
 800848a:	d00a      	beq.n	80084a2 <__gethex+0x1da>
 800848c:	455b      	cmp	r3, fp
 800848e:	dd06      	ble.n	800849e <__gethex+0x1d6>
 8008490:	f1a8 0102 	sub.w	r1, r8, #2
 8008494:	4620      	mov	r0, r4
 8008496:	f7fe fd69 	bl	8006f6c <__any_on>
 800849a:	2800      	cmp	r0, #0
 800849c:	d138      	bne.n	8008510 <__gethex+0x248>
 800849e:	f04f 0b02 	mov.w	fp, #2
 80084a2:	4641      	mov	r1, r8
 80084a4:	4620      	mov	r0, r4
 80084a6:	f7ff fea7 	bl	80081f8 <rshift>
 80084aa:	4446      	add	r6, r8
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	42b3      	cmp	r3, r6
 80084b0:	da41      	bge.n	8008536 <__gethex+0x26e>
 80084b2:	4621      	mov	r1, r4
 80084b4:	4648      	mov	r0, r9
 80084b6:	f7fe f90d 	bl	80066d4 <_Bfree>
 80084ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80084bc:	2300      	movs	r3, #0
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80084c4:	e78a      	b.n	80083dc <__gethex+0x114>
 80084c6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80084ca:	2a2e      	cmp	r2, #46	; 0x2e
 80084cc:	d014      	beq.n	80084f8 <__gethex+0x230>
 80084ce:	2b20      	cmp	r3, #32
 80084d0:	d106      	bne.n	80084e0 <__gethex+0x218>
 80084d2:	9b01      	ldr	r3, [sp, #4]
 80084d4:	f843 bb04 	str.w	fp, [r3], #4
 80084d8:	f04f 0b00 	mov.w	fp, #0
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	465b      	mov	r3, fp
 80084e0:	7828      	ldrb	r0, [r5, #0]
 80084e2:	9303      	str	r3, [sp, #12]
 80084e4:	f7ff feda 	bl	800829c <__hexdig_fun>
 80084e8:	9b03      	ldr	r3, [sp, #12]
 80084ea:	f000 000f 	and.w	r0, r0, #15
 80084ee:	4098      	lsls	r0, r3
 80084f0:	ea4b 0b00 	orr.w	fp, fp, r0
 80084f4:	3304      	adds	r3, #4
 80084f6:	e7a1      	b.n	800843c <__gethex+0x174>
 80084f8:	45a8      	cmp	r8, r5
 80084fa:	d8e8      	bhi.n	80084ce <__gethex+0x206>
 80084fc:	2201      	movs	r2, #1
 80084fe:	4628      	mov	r0, r5
 8008500:	9303      	str	r3, [sp, #12]
 8008502:	f7ff fe0b 	bl	800811c <strncmp>
 8008506:	4926      	ldr	r1, [pc, #152]	; (80085a0 <__gethex+0x2d8>)
 8008508:	9b03      	ldr	r3, [sp, #12]
 800850a:	2800      	cmp	r0, #0
 800850c:	d1df      	bne.n	80084ce <__gethex+0x206>
 800850e:	e795      	b.n	800843c <__gethex+0x174>
 8008510:	f04f 0b03 	mov.w	fp, #3
 8008514:	e7c5      	b.n	80084a2 <__gethex+0x1da>
 8008516:	da0b      	bge.n	8008530 <__gethex+0x268>
 8008518:	eba5 0800 	sub.w	r8, r5, r0
 800851c:	4621      	mov	r1, r4
 800851e:	4642      	mov	r2, r8
 8008520:	4648      	mov	r0, r9
 8008522:	f7fe faf1 	bl	8006b08 <__lshift>
 8008526:	eba6 0608 	sub.w	r6, r6, r8
 800852a:	4604      	mov	r4, r0
 800852c:	f100 0a14 	add.w	sl, r0, #20
 8008530:	f04f 0b00 	mov.w	fp, #0
 8008534:	e7ba      	b.n	80084ac <__gethex+0x1e4>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	42b3      	cmp	r3, r6
 800853a:	dd73      	ble.n	8008624 <__gethex+0x35c>
 800853c:	1b9e      	subs	r6, r3, r6
 800853e:	42b5      	cmp	r5, r6
 8008540:	dc34      	bgt.n	80085ac <__gethex+0x2e4>
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d023      	beq.n	8008590 <__gethex+0x2c8>
 8008548:	2b03      	cmp	r3, #3
 800854a:	d025      	beq.n	8008598 <__gethex+0x2d0>
 800854c:	2b01      	cmp	r3, #1
 800854e:	d115      	bne.n	800857c <__gethex+0x2b4>
 8008550:	42b5      	cmp	r5, r6
 8008552:	d113      	bne.n	800857c <__gethex+0x2b4>
 8008554:	2d01      	cmp	r5, #1
 8008556:	d10b      	bne.n	8008570 <__gethex+0x2a8>
 8008558:	9a02      	ldr	r2, [sp, #8]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6013      	str	r3, [r2, #0]
 800855e:	2301      	movs	r3, #1
 8008560:	6123      	str	r3, [r4, #16]
 8008562:	f8ca 3000 	str.w	r3, [sl]
 8008566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008568:	f04f 0862 	mov.w	r8, #98	; 0x62
 800856c:	601c      	str	r4, [r3, #0]
 800856e:	e735      	b.n	80083dc <__gethex+0x114>
 8008570:	1e69      	subs	r1, r5, #1
 8008572:	4620      	mov	r0, r4
 8008574:	f7fe fcfa 	bl	8006f6c <__any_on>
 8008578:	2800      	cmp	r0, #0
 800857a:	d1ed      	bne.n	8008558 <__gethex+0x290>
 800857c:	4621      	mov	r1, r4
 800857e:	4648      	mov	r0, r9
 8008580:	f7fe f8a8 	bl	80066d4 <_Bfree>
 8008584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008586:	2300      	movs	r3, #0
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800858e:	e725      	b.n	80083dc <__gethex+0x114>
 8008590:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1f2      	bne.n	800857c <__gethex+0x2b4>
 8008596:	e7df      	b.n	8008558 <__gethex+0x290>
 8008598:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1dc      	bne.n	8008558 <__gethex+0x290>
 800859e:	e7ed      	b.n	800857c <__gethex+0x2b4>
 80085a0:	08009114 	.word	0x08009114
 80085a4:	08008fad 	.word	0x08008fad
 80085a8:	080092be 	.word	0x080092be
 80085ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80085b0:	f1bb 0f00 	cmp.w	fp, #0
 80085b4:	d133      	bne.n	800861e <__gethex+0x356>
 80085b6:	f1b8 0f00 	cmp.w	r8, #0
 80085ba:	d004      	beq.n	80085c6 <__gethex+0x2fe>
 80085bc:	4641      	mov	r1, r8
 80085be:	4620      	mov	r0, r4
 80085c0:	f7fe fcd4 	bl	8006f6c <__any_on>
 80085c4:	4683      	mov	fp, r0
 80085c6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80085ca:	2301      	movs	r3, #1
 80085cc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80085d0:	f008 081f 	and.w	r8, r8, #31
 80085d4:	fa03 f308 	lsl.w	r3, r3, r8
 80085d8:	4213      	tst	r3, r2
 80085da:	4631      	mov	r1, r6
 80085dc:	4620      	mov	r0, r4
 80085de:	bf18      	it	ne
 80085e0:	f04b 0b02 	orrne.w	fp, fp, #2
 80085e4:	1bad      	subs	r5, r5, r6
 80085e6:	f7ff fe07 	bl	80081f8 <rshift>
 80085ea:	687e      	ldr	r6, [r7, #4]
 80085ec:	f04f 0802 	mov.w	r8, #2
 80085f0:	f1bb 0f00 	cmp.w	fp, #0
 80085f4:	d04a      	beq.n	800868c <__gethex+0x3c4>
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d016      	beq.n	800862a <__gethex+0x362>
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d018      	beq.n	8008632 <__gethex+0x36a>
 8008600:	2b01      	cmp	r3, #1
 8008602:	d109      	bne.n	8008618 <__gethex+0x350>
 8008604:	f01b 0f02 	tst.w	fp, #2
 8008608:	d006      	beq.n	8008618 <__gethex+0x350>
 800860a:	f8da 3000 	ldr.w	r3, [sl]
 800860e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008612:	f01b 0f01 	tst.w	fp, #1
 8008616:	d10f      	bne.n	8008638 <__gethex+0x370>
 8008618:	f048 0810 	orr.w	r8, r8, #16
 800861c:	e036      	b.n	800868c <__gethex+0x3c4>
 800861e:	f04f 0b01 	mov.w	fp, #1
 8008622:	e7d0      	b.n	80085c6 <__gethex+0x2fe>
 8008624:	f04f 0801 	mov.w	r8, #1
 8008628:	e7e2      	b.n	80085f0 <__gethex+0x328>
 800862a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800862c:	f1c3 0301 	rsb	r3, r3, #1
 8008630:	930f      	str	r3, [sp, #60]	; 0x3c
 8008632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008634:	2b00      	cmp	r3, #0
 8008636:	d0ef      	beq.n	8008618 <__gethex+0x350>
 8008638:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800863c:	f104 0214 	add.w	r2, r4, #20
 8008640:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008644:	9301      	str	r3, [sp, #4]
 8008646:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800864a:	2300      	movs	r3, #0
 800864c:	4694      	mov	ip, r2
 800864e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008652:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008656:	d01e      	beq.n	8008696 <__gethex+0x3ce>
 8008658:	3101      	adds	r1, #1
 800865a:	f8cc 1000 	str.w	r1, [ip]
 800865e:	f1b8 0f02 	cmp.w	r8, #2
 8008662:	f104 0214 	add.w	r2, r4, #20
 8008666:	d13d      	bne.n	80086e4 <__gethex+0x41c>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	3b01      	subs	r3, #1
 800866c:	42ab      	cmp	r3, r5
 800866e:	d10b      	bne.n	8008688 <__gethex+0x3c0>
 8008670:	1169      	asrs	r1, r5, #5
 8008672:	2301      	movs	r3, #1
 8008674:	f005 051f 	and.w	r5, r5, #31
 8008678:	fa03 f505 	lsl.w	r5, r3, r5
 800867c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008680:	421d      	tst	r5, r3
 8008682:	bf18      	it	ne
 8008684:	f04f 0801 	movne.w	r8, #1
 8008688:	f048 0820 	orr.w	r8, r8, #32
 800868c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800868e:	601c      	str	r4, [r3, #0]
 8008690:	9b02      	ldr	r3, [sp, #8]
 8008692:	601e      	str	r6, [r3, #0]
 8008694:	e6a2      	b.n	80083dc <__gethex+0x114>
 8008696:	4290      	cmp	r0, r2
 8008698:	f842 3c04 	str.w	r3, [r2, #-4]
 800869c:	d8d6      	bhi.n	800864c <__gethex+0x384>
 800869e:	68a2      	ldr	r2, [r4, #8]
 80086a0:	4593      	cmp	fp, r2
 80086a2:	db17      	blt.n	80086d4 <__gethex+0x40c>
 80086a4:	6861      	ldr	r1, [r4, #4]
 80086a6:	4648      	mov	r0, r9
 80086a8:	3101      	adds	r1, #1
 80086aa:	f7fd ffd3 	bl	8006654 <_Balloc>
 80086ae:	4682      	mov	sl, r0
 80086b0:	b918      	cbnz	r0, 80086ba <__gethex+0x3f2>
 80086b2:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <__gethex+0x458>)
 80086b4:	4602      	mov	r2, r0
 80086b6:	2184      	movs	r1, #132	; 0x84
 80086b8:	e6b3      	b.n	8008422 <__gethex+0x15a>
 80086ba:	6922      	ldr	r2, [r4, #16]
 80086bc:	3202      	adds	r2, #2
 80086be:	f104 010c 	add.w	r1, r4, #12
 80086c2:	0092      	lsls	r2, r2, #2
 80086c4:	300c      	adds	r0, #12
 80086c6:	f7ff fd4b 	bl	8008160 <memcpy>
 80086ca:	4621      	mov	r1, r4
 80086cc:	4648      	mov	r0, r9
 80086ce:	f7fe f801 	bl	80066d4 <_Bfree>
 80086d2:	4654      	mov	r4, sl
 80086d4:	6922      	ldr	r2, [r4, #16]
 80086d6:	1c51      	adds	r1, r2, #1
 80086d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80086dc:	6121      	str	r1, [r4, #16]
 80086de:	2101      	movs	r1, #1
 80086e0:	6151      	str	r1, [r2, #20]
 80086e2:	e7bc      	b.n	800865e <__gethex+0x396>
 80086e4:	6921      	ldr	r1, [r4, #16]
 80086e6:	4559      	cmp	r1, fp
 80086e8:	dd0b      	ble.n	8008702 <__gethex+0x43a>
 80086ea:	2101      	movs	r1, #1
 80086ec:	4620      	mov	r0, r4
 80086ee:	f7ff fd83 	bl	80081f8 <rshift>
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	3601      	adds	r6, #1
 80086f6:	42b3      	cmp	r3, r6
 80086f8:	f6ff aedb 	blt.w	80084b2 <__gethex+0x1ea>
 80086fc:	f04f 0801 	mov.w	r8, #1
 8008700:	e7c2      	b.n	8008688 <__gethex+0x3c0>
 8008702:	f015 051f 	ands.w	r5, r5, #31
 8008706:	d0f9      	beq.n	80086fc <__gethex+0x434>
 8008708:	9b01      	ldr	r3, [sp, #4]
 800870a:	441a      	add	r2, r3
 800870c:	f1c5 0520 	rsb	r5, r5, #32
 8008710:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008714:	f7fe f890 	bl	8006838 <__hi0bits>
 8008718:	42a8      	cmp	r0, r5
 800871a:	dbe6      	blt.n	80086ea <__gethex+0x422>
 800871c:	e7ee      	b.n	80086fc <__gethex+0x434>
 800871e:	bf00      	nop
 8008720:	08008fad 	.word	0x08008fad

08008724 <L_shift>:
 8008724:	f1c2 0208 	rsb	r2, r2, #8
 8008728:	0092      	lsls	r2, r2, #2
 800872a:	b570      	push	{r4, r5, r6, lr}
 800872c:	f1c2 0620 	rsb	r6, r2, #32
 8008730:	6843      	ldr	r3, [r0, #4]
 8008732:	6804      	ldr	r4, [r0, #0]
 8008734:	fa03 f506 	lsl.w	r5, r3, r6
 8008738:	432c      	orrs	r4, r5
 800873a:	40d3      	lsrs	r3, r2
 800873c:	6004      	str	r4, [r0, #0]
 800873e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008742:	4288      	cmp	r0, r1
 8008744:	d3f4      	bcc.n	8008730 <L_shift+0xc>
 8008746:	bd70      	pop	{r4, r5, r6, pc}

08008748 <__match>:
 8008748:	b530      	push	{r4, r5, lr}
 800874a:	6803      	ldr	r3, [r0, #0]
 800874c:	3301      	adds	r3, #1
 800874e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008752:	b914      	cbnz	r4, 800875a <__match+0x12>
 8008754:	6003      	str	r3, [r0, #0]
 8008756:	2001      	movs	r0, #1
 8008758:	bd30      	pop	{r4, r5, pc}
 800875a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800875e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008762:	2d19      	cmp	r5, #25
 8008764:	bf98      	it	ls
 8008766:	3220      	addls	r2, #32
 8008768:	42a2      	cmp	r2, r4
 800876a:	d0f0      	beq.n	800874e <__match+0x6>
 800876c:	2000      	movs	r0, #0
 800876e:	e7f3      	b.n	8008758 <__match+0x10>

08008770 <__hexnan>:
 8008770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008774:	680b      	ldr	r3, [r1, #0]
 8008776:	6801      	ldr	r1, [r0, #0]
 8008778:	115e      	asrs	r6, r3, #5
 800877a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800877e:	f013 031f 	ands.w	r3, r3, #31
 8008782:	b087      	sub	sp, #28
 8008784:	bf18      	it	ne
 8008786:	3604      	addne	r6, #4
 8008788:	2500      	movs	r5, #0
 800878a:	1f37      	subs	r7, r6, #4
 800878c:	4682      	mov	sl, r0
 800878e:	4690      	mov	r8, r2
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	f846 5c04 	str.w	r5, [r6, #-4]
 8008796:	46b9      	mov	r9, r7
 8008798:	463c      	mov	r4, r7
 800879a:	9502      	str	r5, [sp, #8]
 800879c:	46ab      	mov	fp, r5
 800879e:	784a      	ldrb	r2, [r1, #1]
 80087a0:	1c4b      	adds	r3, r1, #1
 80087a2:	9303      	str	r3, [sp, #12]
 80087a4:	b342      	cbz	r2, 80087f8 <__hexnan+0x88>
 80087a6:	4610      	mov	r0, r2
 80087a8:	9105      	str	r1, [sp, #20]
 80087aa:	9204      	str	r2, [sp, #16]
 80087ac:	f7ff fd76 	bl	800829c <__hexdig_fun>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	d14f      	bne.n	8008854 <__hexnan+0xe4>
 80087b4:	9a04      	ldr	r2, [sp, #16]
 80087b6:	9905      	ldr	r1, [sp, #20]
 80087b8:	2a20      	cmp	r2, #32
 80087ba:	d818      	bhi.n	80087ee <__hexnan+0x7e>
 80087bc:	9b02      	ldr	r3, [sp, #8]
 80087be:	459b      	cmp	fp, r3
 80087c0:	dd13      	ble.n	80087ea <__hexnan+0x7a>
 80087c2:	454c      	cmp	r4, r9
 80087c4:	d206      	bcs.n	80087d4 <__hexnan+0x64>
 80087c6:	2d07      	cmp	r5, #7
 80087c8:	dc04      	bgt.n	80087d4 <__hexnan+0x64>
 80087ca:	462a      	mov	r2, r5
 80087cc:	4649      	mov	r1, r9
 80087ce:	4620      	mov	r0, r4
 80087d0:	f7ff ffa8 	bl	8008724 <L_shift>
 80087d4:	4544      	cmp	r4, r8
 80087d6:	d950      	bls.n	800887a <__hexnan+0x10a>
 80087d8:	2300      	movs	r3, #0
 80087da:	f1a4 0904 	sub.w	r9, r4, #4
 80087de:	f844 3c04 	str.w	r3, [r4, #-4]
 80087e2:	f8cd b008 	str.w	fp, [sp, #8]
 80087e6:	464c      	mov	r4, r9
 80087e8:	461d      	mov	r5, r3
 80087ea:	9903      	ldr	r1, [sp, #12]
 80087ec:	e7d7      	b.n	800879e <__hexnan+0x2e>
 80087ee:	2a29      	cmp	r2, #41	; 0x29
 80087f0:	d155      	bne.n	800889e <__hexnan+0x12e>
 80087f2:	3102      	adds	r1, #2
 80087f4:	f8ca 1000 	str.w	r1, [sl]
 80087f8:	f1bb 0f00 	cmp.w	fp, #0
 80087fc:	d04f      	beq.n	800889e <__hexnan+0x12e>
 80087fe:	454c      	cmp	r4, r9
 8008800:	d206      	bcs.n	8008810 <__hexnan+0xa0>
 8008802:	2d07      	cmp	r5, #7
 8008804:	dc04      	bgt.n	8008810 <__hexnan+0xa0>
 8008806:	462a      	mov	r2, r5
 8008808:	4649      	mov	r1, r9
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff ff8a 	bl	8008724 <L_shift>
 8008810:	4544      	cmp	r4, r8
 8008812:	d934      	bls.n	800887e <__hexnan+0x10e>
 8008814:	f1a8 0204 	sub.w	r2, r8, #4
 8008818:	4623      	mov	r3, r4
 800881a:	f853 1b04 	ldr.w	r1, [r3], #4
 800881e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008822:	429f      	cmp	r7, r3
 8008824:	d2f9      	bcs.n	800881a <__hexnan+0xaa>
 8008826:	1b3b      	subs	r3, r7, r4
 8008828:	f023 0303 	bic.w	r3, r3, #3
 800882c:	3304      	adds	r3, #4
 800882e:	3e03      	subs	r6, #3
 8008830:	3401      	adds	r4, #1
 8008832:	42a6      	cmp	r6, r4
 8008834:	bf38      	it	cc
 8008836:	2304      	movcc	r3, #4
 8008838:	4443      	add	r3, r8
 800883a:	2200      	movs	r2, #0
 800883c:	f843 2b04 	str.w	r2, [r3], #4
 8008840:	429f      	cmp	r7, r3
 8008842:	d2fb      	bcs.n	800883c <__hexnan+0xcc>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	b91b      	cbnz	r3, 8008850 <__hexnan+0xe0>
 8008848:	4547      	cmp	r7, r8
 800884a:	d126      	bne.n	800889a <__hexnan+0x12a>
 800884c:	2301      	movs	r3, #1
 800884e:	603b      	str	r3, [r7, #0]
 8008850:	2005      	movs	r0, #5
 8008852:	e025      	b.n	80088a0 <__hexnan+0x130>
 8008854:	3501      	adds	r5, #1
 8008856:	2d08      	cmp	r5, #8
 8008858:	f10b 0b01 	add.w	fp, fp, #1
 800885c:	dd06      	ble.n	800886c <__hexnan+0xfc>
 800885e:	4544      	cmp	r4, r8
 8008860:	d9c3      	bls.n	80087ea <__hexnan+0x7a>
 8008862:	2300      	movs	r3, #0
 8008864:	f844 3c04 	str.w	r3, [r4, #-4]
 8008868:	2501      	movs	r5, #1
 800886a:	3c04      	subs	r4, #4
 800886c:	6822      	ldr	r2, [r4, #0]
 800886e:	f000 000f 	and.w	r0, r0, #15
 8008872:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008876:	6020      	str	r0, [r4, #0]
 8008878:	e7b7      	b.n	80087ea <__hexnan+0x7a>
 800887a:	2508      	movs	r5, #8
 800887c:	e7b5      	b.n	80087ea <__hexnan+0x7a>
 800887e:	9b01      	ldr	r3, [sp, #4]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0df      	beq.n	8008844 <__hexnan+0xd4>
 8008884:	f1c3 0320 	rsb	r3, r3, #32
 8008888:	f04f 32ff 	mov.w	r2, #4294967295
 800888c:	40da      	lsrs	r2, r3
 800888e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008892:	4013      	ands	r3, r2
 8008894:	f846 3c04 	str.w	r3, [r6, #-4]
 8008898:	e7d4      	b.n	8008844 <__hexnan+0xd4>
 800889a:	3f04      	subs	r7, #4
 800889c:	e7d2      	b.n	8008844 <__hexnan+0xd4>
 800889e:	2004      	movs	r0, #4
 80088a0:	b007      	add	sp, #28
 80088a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088a6 <__ascii_mbtowc>:
 80088a6:	b082      	sub	sp, #8
 80088a8:	b901      	cbnz	r1, 80088ac <__ascii_mbtowc+0x6>
 80088aa:	a901      	add	r1, sp, #4
 80088ac:	b142      	cbz	r2, 80088c0 <__ascii_mbtowc+0x1a>
 80088ae:	b14b      	cbz	r3, 80088c4 <__ascii_mbtowc+0x1e>
 80088b0:	7813      	ldrb	r3, [r2, #0]
 80088b2:	600b      	str	r3, [r1, #0]
 80088b4:	7812      	ldrb	r2, [r2, #0]
 80088b6:	1e10      	subs	r0, r2, #0
 80088b8:	bf18      	it	ne
 80088ba:	2001      	movne	r0, #1
 80088bc:	b002      	add	sp, #8
 80088be:	4770      	bx	lr
 80088c0:	4610      	mov	r0, r2
 80088c2:	e7fb      	b.n	80088bc <__ascii_mbtowc+0x16>
 80088c4:	f06f 0001 	mvn.w	r0, #1
 80088c8:	e7f8      	b.n	80088bc <__ascii_mbtowc+0x16>

080088ca <_realloc_r>:
 80088ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ce:	4680      	mov	r8, r0
 80088d0:	4614      	mov	r4, r2
 80088d2:	460e      	mov	r6, r1
 80088d4:	b921      	cbnz	r1, 80088e0 <_realloc_r+0x16>
 80088d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088da:	4611      	mov	r1, r2
 80088dc:	f7fd be2e 	b.w	800653c <_malloc_r>
 80088e0:	b92a      	cbnz	r2, 80088ee <_realloc_r+0x24>
 80088e2:	f7fd fdb7 	bl	8006454 <_free_r>
 80088e6:	4625      	mov	r5, r4
 80088e8:	4628      	mov	r0, r5
 80088ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ee:	f000 f842 	bl	8008976 <_malloc_usable_size_r>
 80088f2:	4284      	cmp	r4, r0
 80088f4:	4607      	mov	r7, r0
 80088f6:	d802      	bhi.n	80088fe <_realloc_r+0x34>
 80088f8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088fc:	d812      	bhi.n	8008924 <_realloc_r+0x5a>
 80088fe:	4621      	mov	r1, r4
 8008900:	4640      	mov	r0, r8
 8008902:	f7fd fe1b 	bl	800653c <_malloc_r>
 8008906:	4605      	mov	r5, r0
 8008908:	2800      	cmp	r0, #0
 800890a:	d0ed      	beq.n	80088e8 <_realloc_r+0x1e>
 800890c:	42bc      	cmp	r4, r7
 800890e:	4622      	mov	r2, r4
 8008910:	4631      	mov	r1, r6
 8008912:	bf28      	it	cs
 8008914:	463a      	movcs	r2, r7
 8008916:	f7ff fc23 	bl	8008160 <memcpy>
 800891a:	4631      	mov	r1, r6
 800891c:	4640      	mov	r0, r8
 800891e:	f7fd fd99 	bl	8006454 <_free_r>
 8008922:	e7e1      	b.n	80088e8 <_realloc_r+0x1e>
 8008924:	4635      	mov	r5, r6
 8008926:	e7df      	b.n	80088e8 <_realloc_r+0x1e>

08008928 <__ascii_wctomb>:
 8008928:	b149      	cbz	r1, 800893e <__ascii_wctomb+0x16>
 800892a:	2aff      	cmp	r2, #255	; 0xff
 800892c:	bf85      	ittet	hi
 800892e:	238a      	movhi	r3, #138	; 0x8a
 8008930:	6003      	strhi	r3, [r0, #0]
 8008932:	700a      	strbls	r2, [r1, #0]
 8008934:	f04f 30ff 	movhi.w	r0, #4294967295
 8008938:	bf98      	it	ls
 800893a:	2001      	movls	r0, #1
 800893c:	4770      	bx	lr
 800893e:	4608      	mov	r0, r1
 8008940:	4770      	bx	lr
	...

08008944 <fiprintf>:
 8008944:	b40e      	push	{r1, r2, r3}
 8008946:	b503      	push	{r0, r1, lr}
 8008948:	4601      	mov	r1, r0
 800894a:	ab03      	add	r3, sp, #12
 800894c:	4805      	ldr	r0, [pc, #20]	; (8008964 <fiprintf+0x20>)
 800894e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	f000 f83f 	bl	80089d8 <_vfiprintf_r>
 800895a:	b002      	add	sp, #8
 800895c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008960:	b003      	add	sp, #12
 8008962:	4770      	bx	lr
 8008964:	20000064 	.word	0x20000064

08008968 <abort>:
 8008968:	b508      	push	{r3, lr}
 800896a:	2006      	movs	r0, #6
 800896c:	f000 fa0c 	bl	8008d88 <raise>
 8008970:	2001      	movs	r0, #1
 8008972:	f7f9 f987 	bl	8001c84 <_exit>

08008976 <_malloc_usable_size_r>:
 8008976:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800897a:	1f18      	subs	r0, r3, #4
 800897c:	2b00      	cmp	r3, #0
 800897e:	bfbc      	itt	lt
 8008980:	580b      	ldrlt	r3, [r1, r0]
 8008982:	18c0      	addlt	r0, r0, r3
 8008984:	4770      	bx	lr

08008986 <__sfputc_r>:
 8008986:	6893      	ldr	r3, [r2, #8]
 8008988:	3b01      	subs	r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	b410      	push	{r4}
 800898e:	6093      	str	r3, [r2, #8]
 8008990:	da08      	bge.n	80089a4 <__sfputc_r+0x1e>
 8008992:	6994      	ldr	r4, [r2, #24]
 8008994:	42a3      	cmp	r3, r4
 8008996:	db01      	blt.n	800899c <__sfputc_r+0x16>
 8008998:	290a      	cmp	r1, #10
 800899a:	d103      	bne.n	80089a4 <__sfputc_r+0x1e>
 800899c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089a0:	f000 b934 	b.w	8008c0c <__swbuf_r>
 80089a4:	6813      	ldr	r3, [r2, #0]
 80089a6:	1c58      	adds	r0, r3, #1
 80089a8:	6010      	str	r0, [r2, #0]
 80089aa:	7019      	strb	r1, [r3, #0]
 80089ac:	4608      	mov	r0, r1
 80089ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <__sfputs_r>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	4606      	mov	r6, r0
 80089b8:	460f      	mov	r7, r1
 80089ba:	4614      	mov	r4, r2
 80089bc:	18d5      	adds	r5, r2, r3
 80089be:	42ac      	cmp	r4, r5
 80089c0:	d101      	bne.n	80089c6 <__sfputs_r+0x12>
 80089c2:	2000      	movs	r0, #0
 80089c4:	e007      	b.n	80089d6 <__sfputs_r+0x22>
 80089c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ca:	463a      	mov	r2, r7
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7ff ffda 	bl	8008986 <__sfputc_r>
 80089d2:	1c43      	adds	r3, r0, #1
 80089d4:	d1f3      	bne.n	80089be <__sfputs_r+0xa>
 80089d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089d8 <_vfiprintf_r>:
 80089d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	460d      	mov	r5, r1
 80089de:	b09d      	sub	sp, #116	; 0x74
 80089e0:	4614      	mov	r4, r2
 80089e2:	4698      	mov	r8, r3
 80089e4:	4606      	mov	r6, r0
 80089e6:	b118      	cbz	r0, 80089f0 <_vfiprintf_r+0x18>
 80089e8:	6a03      	ldr	r3, [r0, #32]
 80089ea:	b90b      	cbnz	r3, 80089f0 <_vfiprintf_r+0x18>
 80089ec:	f7fc fd98 	bl	8005520 <__sinit>
 80089f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089f2:	07d9      	lsls	r1, r3, #31
 80089f4:	d405      	bmi.n	8008a02 <_vfiprintf_r+0x2a>
 80089f6:	89ab      	ldrh	r3, [r5, #12]
 80089f8:	059a      	lsls	r2, r3, #22
 80089fa:	d402      	bmi.n	8008a02 <_vfiprintf_r+0x2a>
 80089fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089fe:	f7fc fea6 	bl	800574e <__retarget_lock_acquire_recursive>
 8008a02:	89ab      	ldrh	r3, [r5, #12]
 8008a04:	071b      	lsls	r3, r3, #28
 8008a06:	d501      	bpl.n	8008a0c <_vfiprintf_r+0x34>
 8008a08:	692b      	ldr	r3, [r5, #16]
 8008a0a:	b99b      	cbnz	r3, 8008a34 <_vfiprintf_r+0x5c>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f000 f93a 	bl	8008c88 <__swsetup_r>
 8008a14:	b170      	cbz	r0, 8008a34 <_vfiprintf_r+0x5c>
 8008a16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a18:	07dc      	lsls	r4, r3, #31
 8008a1a:	d504      	bpl.n	8008a26 <_vfiprintf_r+0x4e>
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	b01d      	add	sp, #116	; 0x74
 8008a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a26:	89ab      	ldrh	r3, [r5, #12]
 8008a28:	0598      	lsls	r0, r3, #22
 8008a2a:	d4f7      	bmi.n	8008a1c <_vfiprintf_r+0x44>
 8008a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a2e:	f7fc fe8f 	bl	8005750 <__retarget_lock_release_recursive>
 8008a32:	e7f3      	b.n	8008a1c <_vfiprintf_r+0x44>
 8008a34:	2300      	movs	r3, #0
 8008a36:	9309      	str	r3, [sp, #36]	; 0x24
 8008a38:	2320      	movs	r3, #32
 8008a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a42:	2330      	movs	r3, #48	; 0x30
 8008a44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008bf8 <_vfiprintf_r+0x220>
 8008a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a4c:	f04f 0901 	mov.w	r9, #1
 8008a50:	4623      	mov	r3, r4
 8008a52:	469a      	mov	sl, r3
 8008a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a58:	b10a      	cbz	r2, 8008a5e <_vfiprintf_r+0x86>
 8008a5a:	2a25      	cmp	r2, #37	; 0x25
 8008a5c:	d1f9      	bne.n	8008a52 <_vfiprintf_r+0x7a>
 8008a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8008a62:	d00b      	beq.n	8008a7c <_vfiprintf_r+0xa4>
 8008a64:	465b      	mov	r3, fp
 8008a66:	4622      	mov	r2, r4
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7ff ffa2 	bl	80089b4 <__sfputs_r>
 8008a70:	3001      	adds	r0, #1
 8008a72:	f000 80a9 	beq.w	8008bc8 <_vfiprintf_r+0x1f0>
 8008a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a78:	445a      	add	r2, fp
 8008a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 80a1 	beq.w	8008bc8 <_vfiprintf_r+0x1f0>
 8008a86:	2300      	movs	r3, #0
 8008a88:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a90:	f10a 0a01 	add.w	sl, sl, #1
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	9307      	str	r3, [sp, #28]
 8008a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8008a9e:	4654      	mov	r4, sl
 8008aa0:	2205      	movs	r2, #5
 8008aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aa6:	4854      	ldr	r0, [pc, #336]	; (8008bf8 <_vfiprintf_r+0x220>)
 8008aa8:	f7f7 fbb2 	bl	8000210 <memchr>
 8008aac:	9a04      	ldr	r2, [sp, #16]
 8008aae:	b9d8      	cbnz	r0, 8008ae8 <_vfiprintf_r+0x110>
 8008ab0:	06d1      	lsls	r1, r2, #27
 8008ab2:	bf44      	itt	mi
 8008ab4:	2320      	movmi	r3, #32
 8008ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aba:	0713      	lsls	r3, r2, #28
 8008abc:	bf44      	itt	mi
 8008abe:	232b      	movmi	r3, #43	; 0x2b
 8008ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aca:	d015      	beq.n	8008af8 <_vfiprintf_r+0x120>
 8008acc:	9a07      	ldr	r2, [sp, #28]
 8008ace:	4654      	mov	r4, sl
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	f04f 0c0a 	mov.w	ip, #10
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008adc:	3b30      	subs	r3, #48	; 0x30
 8008ade:	2b09      	cmp	r3, #9
 8008ae0:	d94d      	bls.n	8008b7e <_vfiprintf_r+0x1a6>
 8008ae2:	b1b0      	cbz	r0, 8008b12 <_vfiprintf_r+0x13a>
 8008ae4:	9207      	str	r2, [sp, #28]
 8008ae6:	e014      	b.n	8008b12 <_vfiprintf_r+0x13a>
 8008ae8:	eba0 0308 	sub.w	r3, r0, r8
 8008aec:	fa09 f303 	lsl.w	r3, r9, r3
 8008af0:	4313      	orrs	r3, r2
 8008af2:	9304      	str	r3, [sp, #16]
 8008af4:	46a2      	mov	sl, r4
 8008af6:	e7d2      	b.n	8008a9e <_vfiprintf_r+0xc6>
 8008af8:	9b03      	ldr	r3, [sp, #12]
 8008afa:	1d19      	adds	r1, r3, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	9103      	str	r1, [sp, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bfbb      	ittet	lt
 8008b04:	425b      	neglt	r3, r3
 8008b06:	f042 0202 	orrlt.w	r2, r2, #2
 8008b0a:	9307      	strge	r3, [sp, #28]
 8008b0c:	9307      	strlt	r3, [sp, #28]
 8008b0e:	bfb8      	it	lt
 8008b10:	9204      	strlt	r2, [sp, #16]
 8008b12:	7823      	ldrb	r3, [r4, #0]
 8008b14:	2b2e      	cmp	r3, #46	; 0x2e
 8008b16:	d10c      	bne.n	8008b32 <_vfiprintf_r+0x15a>
 8008b18:	7863      	ldrb	r3, [r4, #1]
 8008b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b1c:	d134      	bne.n	8008b88 <_vfiprintf_r+0x1b0>
 8008b1e:	9b03      	ldr	r3, [sp, #12]
 8008b20:	1d1a      	adds	r2, r3, #4
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	9203      	str	r2, [sp, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	bfb8      	it	lt
 8008b2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008b2e:	3402      	adds	r4, #2
 8008b30:	9305      	str	r3, [sp, #20]
 8008b32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008c08 <_vfiprintf_r+0x230>
 8008b36:	7821      	ldrb	r1, [r4, #0]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	4650      	mov	r0, sl
 8008b3c:	f7f7 fb68 	bl	8000210 <memchr>
 8008b40:	b138      	cbz	r0, 8008b52 <_vfiprintf_r+0x17a>
 8008b42:	9b04      	ldr	r3, [sp, #16]
 8008b44:	eba0 000a 	sub.w	r0, r0, sl
 8008b48:	2240      	movs	r2, #64	; 0x40
 8008b4a:	4082      	lsls	r2, r0
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	3401      	adds	r4, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b56:	4829      	ldr	r0, [pc, #164]	; (8008bfc <_vfiprintf_r+0x224>)
 8008b58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b5c:	2206      	movs	r2, #6
 8008b5e:	f7f7 fb57 	bl	8000210 <memchr>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d03f      	beq.n	8008be6 <_vfiprintf_r+0x20e>
 8008b66:	4b26      	ldr	r3, [pc, #152]	; (8008c00 <_vfiprintf_r+0x228>)
 8008b68:	bb1b      	cbnz	r3, 8008bb2 <_vfiprintf_r+0x1da>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	3307      	adds	r3, #7
 8008b6e:	f023 0307 	bic.w	r3, r3, #7
 8008b72:	3308      	adds	r3, #8
 8008b74:	9303      	str	r3, [sp, #12]
 8008b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b78:	443b      	add	r3, r7
 8008b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7c:	e768      	b.n	8008a50 <_vfiprintf_r+0x78>
 8008b7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b82:	460c      	mov	r4, r1
 8008b84:	2001      	movs	r0, #1
 8008b86:	e7a6      	b.n	8008ad6 <_vfiprintf_r+0xfe>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	3401      	adds	r4, #1
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	f04f 0c0a 	mov.w	ip, #10
 8008b94:	4620      	mov	r0, r4
 8008b96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b9a:	3a30      	subs	r2, #48	; 0x30
 8008b9c:	2a09      	cmp	r2, #9
 8008b9e:	d903      	bls.n	8008ba8 <_vfiprintf_r+0x1d0>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d0c6      	beq.n	8008b32 <_vfiprintf_r+0x15a>
 8008ba4:	9105      	str	r1, [sp, #20]
 8008ba6:	e7c4      	b.n	8008b32 <_vfiprintf_r+0x15a>
 8008ba8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bac:	4604      	mov	r4, r0
 8008bae:	2301      	movs	r3, #1
 8008bb0:	e7f0      	b.n	8008b94 <_vfiprintf_r+0x1bc>
 8008bb2:	ab03      	add	r3, sp, #12
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	462a      	mov	r2, r5
 8008bb8:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <_vfiprintf_r+0x22c>)
 8008bba:	a904      	add	r1, sp, #16
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f7fb fe4d 	bl	800485c <_printf_float>
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	1c78      	adds	r0, r7, #1
 8008bc6:	d1d6      	bne.n	8008b76 <_vfiprintf_r+0x19e>
 8008bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bca:	07d9      	lsls	r1, r3, #31
 8008bcc:	d405      	bmi.n	8008bda <_vfiprintf_r+0x202>
 8008bce:	89ab      	ldrh	r3, [r5, #12]
 8008bd0:	059a      	lsls	r2, r3, #22
 8008bd2:	d402      	bmi.n	8008bda <_vfiprintf_r+0x202>
 8008bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bd6:	f7fc fdbb 	bl	8005750 <__retarget_lock_release_recursive>
 8008bda:	89ab      	ldrh	r3, [r5, #12]
 8008bdc:	065b      	lsls	r3, r3, #25
 8008bde:	f53f af1d 	bmi.w	8008a1c <_vfiprintf_r+0x44>
 8008be2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008be4:	e71c      	b.n	8008a20 <_vfiprintf_r+0x48>
 8008be6:	ab03      	add	r3, sp, #12
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	462a      	mov	r2, r5
 8008bec:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <_vfiprintf_r+0x22c>)
 8008bee:	a904      	add	r1, sp, #16
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7fc f8d7 	bl	8004da4 <_printf_i>
 8008bf6:	e7e4      	b.n	8008bc2 <_vfiprintf_r+0x1ea>
 8008bf8:	08009269 	.word	0x08009269
 8008bfc:	08009273 	.word	0x08009273
 8008c00:	0800485d 	.word	0x0800485d
 8008c04:	080089b5 	.word	0x080089b5
 8008c08:	0800926f 	.word	0x0800926f

08008c0c <__swbuf_r>:
 8008c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0e:	460e      	mov	r6, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	4605      	mov	r5, r0
 8008c14:	b118      	cbz	r0, 8008c1e <__swbuf_r+0x12>
 8008c16:	6a03      	ldr	r3, [r0, #32]
 8008c18:	b90b      	cbnz	r3, 8008c1e <__swbuf_r+0x12>
 8008c1a:	f7fc fc81 	bl	8005520 <__sinit>
 8008c1e:	69a3      	ldr	r3, [r4, #24]
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	071a      	lsls	r2, r3, #28
 8008c26:	d525      	bpl.n	8008c74 <__swbuf_r+0x68>
 8008c28:	6923      	ldr	r3, [r4, #16]
 8008c2a:	b31b      	cbz	r3, 8008c74 <__swbuf_r+0x68>
 8008c2c:	6823      	ldr	r3, [r4, #0]
 8008c2e:	6922      	ldr	r2, [r4, #16]
 8008c30:	1a98      	subs	r0, r3, r2
 8008c32:	6963      	ldr	r3, [r4, #20]
 8008c34:	b2f6      	uxtb	r6, r6
 8008c36:	4283      	cmp	r3, r0
 8008c38:	4637      	mov	r7, r6
 8008c3a:	dc04      	bgt.n	8008c46 <__swbuf_r+0x3a>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f7ff fa2a 	bl	8008098 <_fflush_r>
 8008c44:	b9e0      	cbnz	r0, 8008c80 <__swbuf_r+0x74>
 8008c46:	68a3      	ldr	r3, [r4, #8]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	60a3      	str	r3, [r4, #8]
 8008c4c:	6823      	ldr	r3, [r4, #0]
 8008c4e:	1c5a      	adds	r2, r3, #1
 8008c50:	6022      	str	r2, [r4, #0]
 8008c52:	701e      	strb	r6, [r3, #0]
 8008c54:	6962      	ldr	r2, [r4, #20]
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d004      	beq.n	8008c66 <__swbuf_r+0x5a>
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	07db      	lsls	r3, r3, #31
 8008c60:	d506      	bpl.n	8008c70 <__swbuf_r+0x64>
 8008c62:	2e0a      	cmp	r6, #10
 8008c64:	d104      	bne.n	8008c70 <__swbuf_r+0x64>
 8008c66:	4621      	mov	r1, r4
 8008c68:	4628      	mov	r0, r5
 8008c6a:	f7ff fa15 	bl	8008098 <_fflush_r>
 8008c6e:	b938      	cbnz	r0, 8008c80 <__swbuf_r+0x74>
 8008c70:	4638      	mov	r0, r7
 8008c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c74:	4621      	mov	r1, r4
 8008c76:	4628      	mov	r0, r5
 8008c78:	f000 f806 	bl	8008c88 <__swsetup_r>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d0d5      	beq.n	8008c2c <__swbuf_r+0x20>
 8008c80:	f04f 37ff 	mov.w	r7, #4294967295
 8008c84:	e7f4      	b.n	8008c70 <__swbuf_r+0x64>
	...

08008c88 <__swsetup_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4b2a      	ldr	r3, [pc, #168]	; (8008d34 <__swsetup_r+0xac>)
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	6818      	ldr	r0, [r3, #0]
 8008c90:	460c      	mov	r4, r1
 8008c92:	b118      	cbz	r0, 8008c9c <__swsetup_r+0x14>
 8008c94:	6a03      	ldr	r3, [r0, #32]
 8008c96:	b90b      	cbnz	r3, 8008c9c <__swsetup_r+0x14>
 8008c98:	f7fc fc42 	bl	8005520 <__sinit>
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ca2:	0718      	lsls	r0, r3, #28
 8008ca4:	d422      	bmi.n	8008cec <__swsetup_r+0x64>
 8008ca6:	06d9      	lsls	r1, r3, #27
 8008ca8:	d407      	bmi.n	8008cba <__swsetup_r+0x32>
 8008caa:	2309      	movs	r3, #9
 8008cac:	602b      	str	r3, [r5, #0]
 8008cae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008cb2:	81a3      	strh	r3, [r4, #12]
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb8:	e034      	b.n	8008d24 <__swsetup_r+0x9c>
 8008cba:	0758      	lsls	r0, r3, #29
 8008cbc:	d512      	bpl.n	8008ce4 <__swsetup_r+0x5c>
 8008cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cc0:	b141      	cbz	r1, 8008cd4 <__swsetup_r+0x4c>
 8008cc2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc6:	4299      	cmp	r1, r3
 8008cc8:	d002      	beq.n	8008cd0 <__swsetup_r+0x48>
 8008cca:	4628      	mov	r0, r5
 8008ccc:	f7fd fbc2 	bl	8006454 <_free_r>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	6363      	str	r3, [r4, #52]	; 0x34
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cda:	81a3      	strh	r3, [r4, #12]
 8008cdc:	2300      	movs	r3, #0
 8008cde:	6063      	str	r3, [r4, #4]
 8008ce0:	6923      	ldr	r3, [r4, #16]
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	f043 0308 	orr.w	r3, r3, #8
 8008cea:	81a3      	strh	r3, [r4, #12]
 8008cec:	6923      	ldr	r3, [r4, #16]
 8008cee:	b94b      	cbnz	r3, 8008d04 <__swsetup_r+0x7c>
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cfa:	d003      	beq.n	8008d04 <__swsetup_r+0x7c>
 8008cfc:	4621      	mov	r1, r4
 8008cfe:	4628      	mov	r0, r5
 8008d00:	f000 f884 	bl	8008e0c <__smakebuf_r>
 8008d04:	89a0      	ldrh	r0, [r4, #12]
 8008d06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d0a:	f010 0301 	ands.w	r3, r0, #1
 8008d0e:	d00a      	beq.n	8008d26 <__swsetup_r+0x9e>
 8008d10:	2300      	movs	r3, #0
 8008d12:	60a3      	str	r3, [r4, #8]
 8008d14:	6963      	ldr	r3, [r4, #20]
 8008d16:	425b      	negs	r3, r3
 8008d18:	61a3      	str	r3, [r4, #24]
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	b943      	cbnz	r3, 8008d30 <__swsetup_r+0xa8>
 8008d1e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008d22:	d1c4      	bne.n	8008cae <__swsetup_r+0x26>
 8008d24:	bd38      	pop	{r3, r4, r5, pc}
 8008d26:	0781      	lsls	r1, r0, #30
 8008d28:	bf58      	it	pl
 8008d2a:	6963      	ldrpl	r3, [r4, #20]
 8008d2c:	60a3      	str	r3, [r4, #8]
 8008d2e:	e7f4      	b.n	8008d1a <__swsetup_r+0x92>
 8008d30:	2000      	movs	r0, #0
 8008d32:	e7f7      	b.n	8008d24 <__swsetup_r+0x9c>
 8008d34:	20000064 	.word	0x20000064

08008d38 <_raise_r>:
 8008d38:	291f      	cmp	r1, #31
 8008d3a:	b538      	push	{r3, r4, r5, lr}
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	460d      	mov	r5, r1
 8008d40:	d904      	bls.n	8008d4c <_raise_r+0x14>
 8008d42:	2316      	movs	r3, #22
 8008d44:	6003      	str	r3, [r0, #0]
 8008d46:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4a:	bd38      	pop	{r3, r4, r5, pc}
 8008d4c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008d4e:	b112      	cbz	r2, 8008d56 <_raise_r+0x1e>
 8008d50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d54:	b94b      	cbnz	r3, 8008d6a <_raise_r+0x32>
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 f830 	bl	8008dbc <_getpid_r>
 8008d5c:	462a      	mov	r2, r5
 8008d5e:	4601      	mov	r1, r0
 8008d60:	4620      	mov	r0, r4
 8008d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d66:	f000 b817 	b.w	8008d98 <_kill_r>
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d00a      	beq.n	8008d84 <_raise_r+0x4c>
 8008d6e:	1c59      	adds	r1, r3, #1
 8008d70:	d103      	bne.n	8008d7a <_raise_r+0x42>
 8008d72:	2316      	movs	r3, #22
 8008d74:	6003      	str	r3, [r0, #0]
 8008d76:	2001      	movs	r0, #1
 8008d78:	e7e7      	b.n	8008d4a <_raise_r+0x12>
 8008d7a:	2400      	movs	r4, #0
 8008d7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d80:	4628      	mov	r0, r5
 8008d82:	4798      	blx	r3
 8008d84:	2000      	movs	r0, #0
 8008d86:	e7e0      	b.n	8008d4a <_raise_r+0x12>

08008d88 <raise>:
 8008d88:	4b02      	ldr	r3, [pc, #8]	; (8008d94 <raise+0xc>)
 8008d8a:	4601      	mov	r1, r0
 8008d8c:	6818      	ldr	r0, [r3, #0]
 8008d8e:	f7ff bfd3 	b.w	8008d38 <_raise_r>
 8008d92:	bf00      	nop
 8008d94:	20000064 	.word	0x20000064

08008d98 <_kill_r>:
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	4d07      	ldr	r5, [pc, #28]	; (8008db8 <_kill_r+0x20>)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	4604      	mov	r4, r0
 8008da0:	4608      	mov	r0, r1
 8008da2:	4611      	mov	r1, r2
 8008da4:	602b      	str	r3, [r5, #0]
 8008da6:	f7f8 ff5d 	bl	8001c64 <_kill>
 8008daa:	1c43      	adds	r3, r0, #1
 8008dac:	d102      	bne.n	8008db4 <_kill_r+0x1c>
 8008dae:	682b      	ldr	r3, [r5, #0]
 8008db0:	b103      	cbz	r3, 8008db4 <_kill_r+0x1c>
 8008db2:	6023      	str	r3, [r4, #0]
 8008db4:	bd38      	pop	{r3, r4, r5, pc}
 8008db6:	bf00      	nop
 8008db8:	20000580 	.word	0x20000580

08008dbc <_getpid_r>:
 8008dbc:	f7f8 bf4a 	b.w	8001c54 <_getpid>

08008dc0 <__swhatbuf_r>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc8:	2900      	cmp	r1, #0
 8008dca:	b096      	sub	sp, #88	; 0x58
 8008dcc:	4615      	mov	r5, r2
 8008dce:	461e      	mov	r6, r3
 8008dd0:	da0d      	bge.n	8008dee <__swhatbuf_r+0x2e>
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008dd8:	f04f 0100 	mov.w	r1, #0
 8008ddc:	bf0c      	ite	eq
 8008dde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008de2:	2340      	movne	r3, #64	; 0x40
 8008de4:	2000      	movs	r0, #0
 8008de6:	6031      	str	r1, [r6, #0]
 8008de8:	602b      	str	r3, [r5, #0]
 8008dea:	b016      	add	sp, #88	; 0x58
 8008dec:	bd70      	pop	{r4, r5, r6, pc}
 8008dee:	466a      	mov	r2, sp
 8008df0:	f000 f848 	bl	8008e84 <_fstat_r>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	dbec      	blt.n	8008dd2 <__swhatbuf_r+0x12>
 8008df8:	9901      	ldr	r1, [sp, #4]
 8008dfa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008dfe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e02:	4259      	negs	r1, r3
 8008e04:	4159      	adcs	r1, r3
 8008e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e0a:	e7eb      	b.n	8008de4 <__swhatbuf_r+0x24>

08008e0c <__smakebuf_r>:
 8008e0c:	898b      	ldrh	r3, [r1, #12]
 8008e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e10:	079d      	lsls	r5, r3, #30
 8008e12:	4606      	mov	r6, r0
 8008e14:	460c      	mov	r4, r1
 8008e16:	d507      	bpl.n	8008e28 <__smakebuf_r+0x1c>
 8008e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	2301      	movs	r3, #1
 8008e22:	6163      	str	r3, [r4, #20]
 8008e24:	b002      	add	sp, #8
 8008e26:	bd70      	pop	{r4, r5, r6, pc}
 8008e28:	ab01      	add	r3, sp, #4
 8008e2a:	466a      	mov	r2, sp
 8008e2c:	f7ff ffc8 	bl	8008dc0 <__swhatbuf_r>
 8008e30:	9900      	ldr	r1, [sp, #0]
 8008e32:	4605      	mov	r5, r0
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7fd fb81 	bl	800653c <_malloc_r>
 8008e3a:	b948      	cbnz	r0, 8008e50 <__smakebuf_r+0x44>
 8008e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e40:	059a      	lsls	r2, r3, #22
 8008e42:	d4ef      	bmi.n	8008e24 <__smakebuf_r+0x18>
 8008e44:	f023 0303 	bic.w	r3, r3, #3
 8008e48:	f043 0302 	orr.w	r3, r3, #2
 8008e4c:	81a3      	strh	r3, [r4, #12]
 8008e4e:	e7e3      	b.n	8008e18 <__smakebuf_r+0xc>
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	6020      	str	r0, [r4, #0]
 8008e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e58:	81a3      	strh	r3, [r4, #12]
 8008e5a:	9b00      	ldr	r3, [sp, #0]
 8008e5c:	6163      	str	r3, [r4, #20]
 8008e5e:	9b01      	ldr	r3, [sp, #4]
 8008e60:	6120      	str	r0, [r4, #16]
 8008e62:	b15b      	cbz	r3, 8008e7c <__smakebuf_r+0x70>
 8008e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f000 f81d 	bl	8008ea8 <_isatty_r>
 8008e6e:	b128      	cbz	r0, 8008e7c <__smakebuf_r+0x70>
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	f023 0303 	bic.w	r3, r3, #3
 8008e76:	f043 0301 	orr.w	r3, r3, #1
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	431d      	orrs	r5, r3
 8008e80:	81a5      	strh	r5, [r4, #12]
 8008e82:	e7cf      	b.n	8008e24 <__smakebuf_r+0x18>

08008e84 <_fstat_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d07      	ldr	r5, [pc, #28]	; (8008ea4 <_fstat_r+0x20>)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	4608      	mov	r0, r1
 8008e8e:	4611      	mov	r1, r2
 8008e90:	602b      	str	r3, [r5, #0]
 8008e92:	f7f8 ff46 	bl	8001d22 <_fstat>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	d102      	bne.n	8008ea0 <_fstat_r+0x1c>
 8008e9a:	682b      	ldr	r3, [r5, #0]
 8008e9c:	b103      	cbz	r3, 8008ea0 <_fstat_r+0x1c>
 8008e9e:	6023      	str	r3, [r4, #0]
 8008ea0:	bd38      	pop	{r3, r4, r5, pc}
 8008ea2:	bf00      	nop
 8008ea4:	20000580 	.word	0x20000580

08008ea8 <_isatty_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d06      	ldr	r5, [pc, #24]	; (8008ec4 <_isatty_r+0x1c>)
 8008eac:	2300      	movs	r3, #0
 8008eae:	4604      	mov	r4, r0
 8008eb0:	4608      	mov	r0, r1
 8008eb2:	602b      	str	r3, [r5, #0]
 8008eb4:	f7f8 ff45 	bl	8001d42 <_isatty>
 8008eb8:	1c43      	adds	r3, r0, #1
 8008eba:	d102      	bne.n	8008ec2 <_isatty_r+0x1a>
 8008ebc:	682b      	ldr	r3, [r5, #0]
 8008ebe:	b103      	cbz	r3, 8008ec2 <_isatty_r+0x1a>
 8008ec0:	6023      	str	r3, [r4, #0]
 8008ec2:	bd38      	pop	{r3, r4, r5, pc}
 8008ec4:	20000580 	.word	0x20000580

08008ec8 <_init>:
 8008ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eca:	bf00      	nop
 8008ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ece:	bc08      	pop	{r3}
 8008ed0:	469e      	mov	lr, r3
 8008ed2:	4770      	bx	lr

08008ed4 <_fini>:
 8008ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed6:	bf00      	nop
 8008ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eda:	bc08      	pop	{r3}
 8008edc:	469e      	mov	lr, r3
 8008ede:	4770      	bx	lr
