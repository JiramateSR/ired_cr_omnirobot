
ired_cr_omnirobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b10  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  08012ce0  08012ce0  00013ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080135b0  080135b0  000151e8  2**0
                  CONTENTS
  4 .ARM          00000008  080135b0  080135b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080135b8  080135b8  000151e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080135b8  080135b8  000145b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080135c0  080135c0  000145c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  080135c4  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011cc  200001e8  080137ac  000151e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013b4  080137ac  000153b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f688  00000000  00000000  00015218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f0  00000000  00000000  000348a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001548  00000000  00000000  00037e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c8  00000000  00000000  000393d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f46  00000000  00000000  0003a4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b723  00000000  00000000  000613e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de492  00000000  00000000  0007cb09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015af9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007254  00000000  00000000  0015afe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00162234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012cc8 	.word	0x08012cc8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08012cc8 	.word	0x08012cc8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <_ZN3ros22normalizeSecNSecSignedERlS0_>:
#include "ros/duration.h"

namespace ros
{
void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  int32_t nsec_part = nsec;
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	60fb      	str	r3, [r7, #12]
  int32_t sec_part = sec;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60bb      	str	r3, [r7, #8]

  while (nsec_part > 1000000000L)
 800103a:	e006      	b.n	800104a <_ZN3ros22normalizeSecNSecSignedERlS0_+0x26>
  {
    nsec_part -= 1000000000L;
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x5c>)
 8001040:	4413      	add	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
    ++sec_part;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3301      	adds	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
  while (nsec_part > 1000000000L)
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x60>)
 800104e:	4293      	cmp	r3, r2
 8001050:	dcf4      	bgt.n	800103c <_ZN3ros22normalizeSecNSecSignedERlS0_+0x18>
  }
  while (nsec_part < 0)
 8001052:	e006      	b.n	8001062 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x3e>
  {
    nsec_part += 1000000000L;
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	4b0b      	ldr	r3, [pc, #44]	@ (8001084 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x60>)
 8001058:	4413      	add	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
    --sec_part;
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	3b01      	subs	r3, #1
 8001060:	60bb      	str	r3, [r7, #8]
  while (nsec_part < 0)
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	2b00      	cmp	r3, #0
 8001066:	dbf5      	blt.n	8001054 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x30>
  }
  sec = sec_part;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	c4653600 	.word	0xc4653600
 8001084:	3b9aca00 	.word	0x3b9aca00

08001088 <_ZN3ros8DurationC1Ev>:
class Duration
{
public:
  int32_t sec, nsec;

  Duration() : sec(0), nsec(0) {}
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b085      	sub	sp, #20
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	0a5a      	lsrs	r2, r3, #9
 80010bc:	490f      	ldr	r1, [pc, #60]	@ (80010fc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80010be:	fba1 1202 	umull	r1, r2, r1, r2
 80010c2:	09d2      	lsrs	r2, r2, #7
 80010c4:	490e      	ldr	r1, [pc, #56]	@ (8001100 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80010c6:	fb01 f202 	mul.w	r2, r1, r2
 80010ca:	1a9b      	subs	r3, r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	0a5b      	lsrs	r3, r3, #9
 80010d4:	4a09      	ldr	r2, [pc, #36]	@ (80010fc <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	09db      	lsrs	r3, r3, #7
 80010dc:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	441a      	add	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	601a      	str	r2, [r3, #0]
}
 80010f0:	bf00      	nop
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	00044b83 	.word	0x00044b83
 8001100:	3b9aca00 	.word	0x3b9aca00

08001104 <_ZNK3ros4TimemiERKS0_>:
  nsec = nsec + 1000000000UL - rhs.nsec;
  normalizeSecNSec(sec, nsec);
  return *this;
}

Duration Time::operator-(const Time &rhs) const {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  // Note: Considers wrap around as a continuation of time, e.g.,
  // (0,0) - (0xFFFFFFFF, 0) = (1, 0)
  Duration d;
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f7ff ffb9 	bl	8001088 <_ZN3ros8DurationC1Ev>
  d.sec = sec > rhs.sec ? sec - rhs.sec : -(rhs.sec - sec);
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	461a      	mov	r2, r3
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	601a      	str	r2, [r3, #0]
  d.nsec = nsec > rhs.nsec ? nsec - rhs.nsec : -(rhs.nsec - nsec);
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	461a      	mov	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	605a      	str	r2, [r3, #4]
  normalizeSecNSecSigned(d.sec, d.nsec);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3304      	adds	r3, #4
 800113a:	4619      	mov	r1, r3
 800113c:	68f8      	ldr	r0, [r7, #12]
 800113e:	f7ff ff71 	bl	8001024 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return d;
 8001142:	bf00      	nop
}
 8001144:	68f8      	ldr	r0, [r7, #12]
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <_ZN7MPU92509getAngleXEv>:
		double getAccAngleY() {
			return angleAccY;
		}
		;

		double getAngleX() {
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
			return angleX;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 800115a:	ec43 2b17 	vmov	d7, r2, r3
		}
 800115e:	eeb0 0a47 	vmov.f32	s0, s14
 8001162:	eef0 0a67 	vmov.f32	s1, s15
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <_ZN7MPU92509getAngleYEv>:
		;
		double getAngleY() {
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
			return angleY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800117e:	ec43 2b17 	vmov	d7, r2, r3
		}
 8001182:	eeb0 0a47 	vmov.f32	s0, s14
 8001186:	eef0 0a67 	vmov.f32	s1, s15
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_ZN7MPU92509getAngleZEv>:
		;
		double getAngleZ() {
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
			return angleZ;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 80011a2:	ec43 2b17 	vmov	d7, r2, r3
		}
 80011a6:	eeb0 0a47 	vmov.f32	s0, s14
 80011aa:	eef0 0a67 	vmov.f32	s1, s15
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_ZNK3ros8Duration5toSecEv>:
  Duration(int32_t _sec, int32_t _nsec) : sec(_sec), nsec(_nsec)
  {
    normalizeSecNSecSigned(sec, nsec);
  }

  double toSec() const
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  {
    return (double)sec + 1e-9 * (double)nsec;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9cd 	bl	8000564 <__aeabi_i2d>
 80011ca:	4604      	mov	r4, r0
 80011cc:	460d      	mov	r5, r1
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f9c6 	bl	8000564 <__aeabi_i2d>
 80011d8:	a30b      	add	r3, pc, #44	@ (adr r3, 8001208 <_ZNK3ros8Duration5toSecEv+0x50>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fa2b 	bl	8000638 <__aeabi_dmul>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4620      	mov	r0, r4
 80011e8:	4629      	mov	r1, r5
 80011ea:	f7ff f86f 	bl	80002cc <__adddf3>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	ec43 2b17 	vmov	d7, r2, r3
  };
 80011f6:	eeb0 0a47 	vmov.f32	s0, s14
 80011fa:	eef0 0a67 	vmov.f32	s1, s15
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bdb0      	pop	{r4, r5, r7, pc}
 8001204:	f3af 8000 	nop.w
 8001208:	e826d695 	.word	0xe826d695
 800120c:	3e112e0b 	.word	0x3e112e0b

08001210 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <_ZN3ros3MsgC1Ev+0x1c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	080130dc 	.word	0x080130dc

08001254 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
      data()
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ffe8 	bl	8001234 <_ZN3ros3MsgC1Ev>
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3304      	adds	r3, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffce 	bl	8001210 <_ZN3ros4TimeC1Ev>
    {
    }
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	080130c4 	.word	0x080130c4

08001284 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6859      	ldr	r1, [r3, #4]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	4413      	add	r3, r2
 800129c:	b2ca      	uxtb	r2, r1
 800129e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	0a19      	lsrs	r1, r3, #8
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	3301      	adds	r3, #1
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	4413      	add	r3, r2
 80012ae:	b2ca      	uxtb	r2, r1
 80012b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	0c19      	lsrs	r1, r3, #16
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3302      	adds	r3, #2
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	4413      	add	r3, r2
 80012c0:	b2ca      	uxtb	r2, r1
 80012c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	0e19      	lsrs	r1, r3, #24
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	3303      	adds	r3, #3
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3304      	adds	r3, #4
 80012da:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6899      	ldr	r1, [r3, #8]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	4413      	add	r3, r2
 80012e6:	b2ca      	uxtb	r2, r1
 80012e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	0a19      	lsrs	r1, r3, #8
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3301      	adds	r3, #1
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2ca      	uxtb	r2, r1
 80012fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	0c19      	lsrs	r1, r3, #16
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3302      	adds	r3, #2
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	b2ca      	uxtb	r2, r1
 800130c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	0e19      	lsrs	r1, r3, #24
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3303      	adds	r3, #3
 8001318:	683a      	ldr	r2, [r7, #0]
 800131a:	4413      	add	r3, r2
 800131c:	b2ca      	uxtb	r2, r1
 800131e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3304      	adds	r3, #4
 8001324:	60fb      	str	r3, [r7, #12]
      return offset;
 8001326:	68fb      	ldr	r3, [r7, #12]
    }
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	4413      	add	r3, r2
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	3301      	adds	r3, #1
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	440b      	add	r3, r1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	021b      	lsls	r3, r3, #8
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3302      	adds	r3, #2
 800136e:	6839      	ldr	r1, [r7, #0]
 8001370:	440b      	add	r3, r1
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3303      	adds	r3, #3
 8001384:	6839      	ldr	r1, [r7, #0]
 8001386:	440b      	add	r3, r1
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	061b      	lsls	r3, r3, #24
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3304      	adds	r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689a      	ldr	r2, [r3, #8]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	3301      	adds	r3, #1
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	440b      	add	r3, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3302      	adds	r3, #2
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	440b      	add	r3, r1
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3303      	adds	r3, #3
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	061b      	lsls	r3, r3, #24
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	3304      	adds	r3, #4
 80013ec:	60fb      	str	r3, [r7, #12]
     return offset;
 80013ee:	68fb      	ldr	r3, [r7, #12]
    }
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	08012ce0 	.word	0x08012ce0

08001418 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	08012cf0 	.word	0x08012cf0

08001434 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fef8 	bl	8001234 <_ZN3ros3MsgC1Ev>
 8001444:	4a0b      	ldr	r2, [pc, #44]	@ (8001474 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a09      	ldr	r2, [pc, #36]	@ (8001478 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001454:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a07      	ldr	r2, [pc, #28]	@ (8001478 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800145a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a06      	ldr	r2, [pc, #24]	@ (8001478 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001460:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
    {
    }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	080130ac 	.word	0x080130ac
 8001478:	08012d14 	.word	0x08012d14

0800147c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	8899      	ldrh	r1, [r3, #4]
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	4413      	add	r3, r2
 8001494:	b2ca      	uxtb	r2, r1
 8001496:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	889b      	ldrh	r3, [r3, #4]
 800149c:	0a1b      	lsrs	r3, r3, #8
 800149e:	b299      	uxth	r1, r3
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	3301      	adds	r3, #1
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	b2ca      	uxtb	r2, r1
 80014aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	3302      	adds	r3, #2
 80014b0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe fefa 	bl	80002b0 <strlen>
 80014bc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	69b9      	ldr	r1, [r7, #24]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f005 faec 	bl	8006aa4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	3304      	adds	r3, #4
 80014d0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	18d0      	adds	r0, r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4619      	mov	r1, r3
 80014e0:	f00e f8c9 	bl	800f676 <memcpy>
      offset += length_topic_name;
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	4413      	add	r3, r2
 80014ea:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7fe fedd 	bl	80002b0 <strlen>
 80014f6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	6979      	ldr	r1, [r7, #20]
 8001500:	4618      	mov	r0, r3
 8001502:	f005 facf 	bl	8006aa4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3304      	adds	r3, #4
 800150a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	18d0      	adds	r0, r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4619      	mov	r1, r3
 800151a:	f00e f8ac 	bl	800f676 <memcpy>
      offset += length_message_type;
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	4413      	add	r3, r2
 8001524:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe fec0 	bl	80002b0 <strlen>
 8001530:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	4413      	add	r3, r2
 8001538:	6939      	ldr	r1, [r7, #16]
 800153a:	4618      	mov	r0, r3
 800153c:	f005 fab2 	bl	8006aa4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	3304      	adds	r3, #4
 8001544:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	18d0      	adds	r0, r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4619      	mov	r1, r3
 8001554:	f00e f88f 	bl	800f676 <memcpy>
      offset += length_md5sum;
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4413      	add	r3, r2
 800155e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	695b      	ldr	r3, [r3, #20]
 8001564:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001566:	68f9      	ldr	r1, [r7, #12]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	4413      	add	r3, r2
 800156e:	b2ca      	uxtb	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	0a19      	lsrs	r1, r3, #8
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3301      	adds	r3, #1
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	4413      	add	r3, r2
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	0c19      	lsrs	r1, r3, #16
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3302      	adds	r3, #2
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	4413      	add	r3, r2
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0e19      	lsrs	r1, r3, #24
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3303      	adds	r3, #3
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	61fb      	str	r3, [r7, #28]
      return offset;
 80015a8:	69fb      	ldr	r3, [r7, #28]
    }
 80015aa:	4618      	mov	r0, r3
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b08a      	sub	sp, #40	@ 0x28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	889b      	ldrh	r3, [r3, #4]
 80015d2:	b21a      	sxth	r2, r3
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	3301      	adds	r3, #1
 80015d8:	6839      	ldr	r1, [r7, #0]
 80015da:	440b      	add	r3, r1
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	021b      	lsls	r3, r3, #8
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	3302      	adds	r3, #2
 80015f0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	441a      	add	r2, r3
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f005 fa6f 	bl	8006ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	3304      	adds	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	627b      	str	r3, [r7, #36]	@ 0x24
 800160e:	e00b      	b.n	8001628 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	441a      	add	r2, r3
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	3b01      	subs	r3, #1
 800161a:	6839      	ldr	r1, [r7, #0]
 800161c:	440b      	add	r3, r1
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	3301      	adds	r3, #1
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	4413      	add	r3, r2
 800162e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001630:	429a      	cmp	r2, r3
 8001632:	d3ed      	bcc.n	8001610 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	4413      	add	r3, r2
 800163a:	3b01      	subs	r3, #1
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	4413      	add	r3, r2
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	3b01      	subs	r3, #1
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	441a      	add	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	4413      	add	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	441a      	add	r2, r3
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f005 fa3c 	bl	8006ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	3304      	adds	r3, #4
 800166e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	e00b      	b.n	800168e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	6a3b      	ldr	r3, [r7, #32]
 800167a:	441a      	add	r2, r3
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	3b01      	subs	r3, #1
 8001680:	6839      	ldr	r1, [r7, #0]
 8001682:	440b      	add	r3, r1
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	3301      	adds	r3, #1
 800168c:	623b      	str	r3, [r7, #32]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4413      	add	r3, r2
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3ed      	bcc.n	8001676 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	4413      	add	r3, r2
 80016a0:	3b01      	subs	r3, #1
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	4413      	add	r3, r2
 80016a6:	2200      	movs	r2, #0
 80016a8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	441a      	add	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4413      	add	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	441a      	add	r2, r3
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4611      	mov	r1, r2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 fa09 	bl	8006ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	3304      	adds	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e00b      	b.n	80016f4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	441a      	add	r2, r3
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3b01      	subs	r3, #1
 80016e6:	6839      	ldr	r1, [r7, #0]
 80016e8:	440b      	add	r3, r1
 80016ea:	7812      	ldrb	r2, [r2, #0]
 80016ec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	4413      	add	r3, r2
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d3ed      	bcc.n	80016dc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	4413      	add	r3, r2
 8001706:	3b01      	subs	r3, #1
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	4413      	add	r3, r2
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	3b01      	subs	r3, #1
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	441a      	add	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4413      	add	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	6839      	ldr	r1, [r7, #0]
 800172e:	440a      	add	r2, r1
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4313      	orrs	r3, r2
 8001734:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001736:	68ba      	ldr	r2, [r7, #8]
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	3301      	adds	r3, #1
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	440b      	add	r3, r1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	4313      	orrs	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001748:	68ba      	ldr	r2, [r7, #8]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	3302      	adds	r3, #2
 800174e:	6839      	ldr	r1, [r7, #0]
 8001750:	440b      	add	r3, r1
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	041b      	lsls	r3, r3, #16
 8001756:	4313      	orrs	r3, r2
 8001758:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	3303      	adds	r3, #3
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	440b      	add	r3, r1
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	061b      	lsls	r3, r3, #24
 8001768:	4313      	orrs	r3, r2
 800176a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800176c:	68ba      	ldr	r2, [r7, #8]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	3304      	adds	r3, #4
 8001776:	61bb      	str	r3, [r7, #24]
     return offset;
 8001778:	69bb      	ldr	r3, [r7, #24]
    }
 800177a:	4618      	mov	r0, r3
 800177c:	3728      	adds	r7, #40	@ 0x28
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	08012d18 	.word	0x08012d18

080017a0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	4b03      	ldr	r3, [pc, #12]	@ (80017b8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	08012d34 	.word	0x08012d34

080017bc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fd34 	bl	8001234 <_ZN3ros3MsgC1Ev>
 80017cc:	4a06      	ldr	r2, [pc, #24]	@ (80017e8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
      level(0),
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	711a      	strb	r2, [r3, #4]
      msg("")
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80017dc:	609a      	str	r2, [r3, #8]
    {
    }
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	08013094 	.word	0x08013094
 80017ec:	08012d14 	.word	0x08012d14

080017f0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	7912      	ldrb	r2, [r2, #4]
 8001808:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe fd4b 	bl	80002b0 <strlen>
 800181a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	4413      	add	r3, r2
 8001822:	68b9      	ldr	r1, [r7, #8]
 8001824:	4618      	mov	r0, r3
 8001826:	f005 f93d 	bl	8006aa4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	3304      	adds	r3, #4
 800182e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	18d0      	adds	r0, r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	4619      	mov	r1, r3
 800183e:	f00d ff1a 	bl	800f676 <memcpy>
      offset += length_msg;
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
      return offset;
 800184a:	68fb      	ldr	r3, [r7, #12]
    }
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	4413      	add	r3, r2
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	3301      	adds	r3, #1
 8001872:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	441a      	add	r2, r3
 800187a:	f107 030c 	add.w	r3, r7, #12
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f005 f92e 	bl	8006ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	3304      	adds	r3, #4
 800188a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	e00b      	b.n	80018aa <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8001892:	683a      	ldr	r2, [r7, #0]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	441a      	add	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	3b01      	subs	r3, #1
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	440b      	add	r3, r1
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	697a      	ldr	r2, [r7, #20]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d3ed      	bcc.n	8001892 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	3b01      	subs	r3, #1
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	4413      	add	r3, r2
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	441a      	add	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	613b      	str	r3, [r7, #16]
     return offset;
 80018da:	693b      	ldr	r3, [r7, #16]
    }
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80018ee:	4618      	mov	r0, r3
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	08012d58 	.word	0x08012d58

08001900 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800190a:	4618      	mov	r0, r3
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	08012d6c 	.word	0x08012d6c

0800191c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fc84 	bl	8001234 <_ZN3ros3MsgC1Ev>
 800192c:	4a11      	ldr	r2, [pc, #68]	@ (8001974 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	611a      	str	r2, [r3, #16]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	615a      	str	r2, [r3, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	61da      	str	r2, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24
    {
    }
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0801307c 	.word	0x0801307c

08001978 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6859      	ldr	r1, [r3, #4]
 800198a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	b2ca      	uxtb	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0a19      	lsrs	r1, r3, #8
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	3301      	adds	r3, #1
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0c19      	lsrs	r1, r3, #16
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	3302      	adds	r3, #2
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	b2ca      	uxtb	r2, r1
 80019b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	0e19      	lsrs	r1, r3, #24
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	3303      	adds	r3, #3
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	4413      	add	r3, r2
 80019c6:	b2ca      	uxtb	r2, r1
 80019c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019cc:	3304      	adds	r3, #4
 80019ce:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80019d0:	2300      	movs	r3, #0
 80019d2:	623b      	str	r3, [r7, #32]
 80019d4:	e02a      	b.n	8001a2c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80019e4:	6939      	ldr	r1, [r7, #16]
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	b2ca      	uxtb	r2, r1
 80019ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	0a19      	lsrs	r1, r3, #8
 80019f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f6:	3301      	adds	r3, #1
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	b2ca      	uxtb	r2, r1
 80019fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	0c19      	lsrs	r1, r3, #16
 8001a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a06:	3302      	adds	r3, #2
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b2ca      	uxtb	r2, r1
 8001a0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	0e19      	lsrs	r1, r3, #24
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	3303      	adds	r3, #3
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2ca      	uxtb	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a22:	3304      	adds	r3, #4
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a26:	6a3b      	ldr	r3, [r7, #32]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	6a3a      	ldr	r2, [r7, #32]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d3cf      	bcc.n	80019d6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6919      	ldr	r1, [r3, #16]
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	0a19      	lsrs	r1, r3, #8
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	4413      	add	r3, r2
 8001a52:	b2ca      	uxtb	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	0c19      	lsrs	r1, r3, #16
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	3302      	adds	r3, #2
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	b2ca      	uxtb	r2, r1
 8001a66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	0e19      	lsrs	r1, r3, #24
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	3303      	adds	r3, #3
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	4413      	add	r3, r2
 8001a76:	b2ca      	uxtb	r2, r1
 8001a78:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
 8001a84:	e02a      	b.n	8001adc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699a      	ldr	r2, [r3, #24]
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b2ca      	uxtb	r2, r1
 8001a9e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	0a19      	lsrs	r1, r3, #8
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	0c19      	lsrs	r1, r3, #16
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	b2ca      	uxtb	r2, r1
 8001abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	0e19      	lsrs	r1, r3, #24
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	b2ca      	uxtb	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d3cf      	bcc.n	8001a86 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69d9      	ldr	r1, [r3, #28]
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	b2ca      	uxtb	r2, r1
 8001af2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	0a19      	lsrs	r1, r3, #8
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	3301      	adds	r3, #1
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	4413      	add	r3, r2
 8001b02:	b2ca      	uxtb	r2, r1
 8001b04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	0c19      	lsrs	r1, r3, #16
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	3302      	adds	r3, #2
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	b2ca      	uxtb	r2, r1
 8001b16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	0e19      	lsrs	r1, r3, #24
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	3303      	adds	r3, #3
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	b2ca      	uxtb	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001b30:	2300      	movs	r3, #0
 8001b32:	61bb      	str	r3, [r7, #24]
 8001b34:	e027      	b.n	8001b86 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fbb4 	bl	80002b0 <strlen>
 8001b48:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4c:	683a      	ldr	r2, [r7, #0]
 8001b4e:	4413      	add	r3, r2
 8001b50:	6979      	ldr	r1, [r7, #20]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f004 ffa6 	bl	8006aa4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	18d0      	adds	r0, r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4619      	mov	r1, r3
 8001b74:	f00d fd7f 	bl	800f676 <memcpy>
      offset += length_stringsi;
 8001b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	627b      	str	r3, [r7, #36]	@ 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	3301      	adds	r3, #1
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d3d2      	bcc.n	8001b36 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8001b92:	4618      	mov	r0, r3
 8001b94:	3728      	adds	r7, #40	@ 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b08e      	sub	sp, #56	@ 0x38
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	@ 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	683a      	ldr	r2, [r7, #0]
 8001bb8:	4413      	add	r3, r2
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	6a3a      	ldr	r2, [r7, #32]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bd8:	3303      	adds	r3, #3
 8001bda:	683a      	ldr	r2, [r7, #0]
 8001bdc:	4413      	add	r3, r2
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	6a3a      	ldr	r2, [r7, #32]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bea:	3304      	adds	r3, #4
 8001bec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(ints_lengthT > ints_length)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	6a3a      	ldr	r2, [r7, #32]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d90a      	bls.n	8001c0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	4619      	mov	r1, r3
 8001c02:	4610      	mov	r0, r2
 8001c04:	f00c fcf0 	bl	800e5e8 <realloc>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a3a      	ldr	r2, [r7, #32]
 8001c12:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001c14:	2300      	movs	r3, #0
 8001c16:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c18:	e035      	b.n	8001c86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	440a      	add	r2, r1
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c30:	3301      	adds	r3, #1
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	440b      	add	r3, r1
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	021b      	lsls	r3, r3, #8
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c42:	3302      	adds	r3, #2
 8001c44:	6839      	ldr	r1, [r7, #0]
 8001c46:	440b      	add	r3, r1
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	041b      	lsls	r3, r3, #16
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c54:	3303      	adds	r3, #3
 8001c56:	6839      	ldr	r1, [r7, #0]
 8001c58:	440b      	add	r3, r1
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	4413      	add	r3, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	3208      	adds	r2, #8
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c82:	3301      	adds	r3, #1
 8001c84:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d3c4      	bcc.n	8001c1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	69fa      	ldr	r2, [r7, #28]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cae:	3302      	adds	r3, #2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(floats_lengthT > floats_length)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d90a      	bls.n	8001cf6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4610      	mov	r0, r2
 8001cec:	f00c fc7c 	bl	800e5e8 <realloc>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69fa      	ldr	r2, [r7, #28]
 8001cfa:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d00:	e035      	b.n	8001d6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001d0a:	6839      	ldr	r1, [r7, #0]
 8001d0c:	440a      	add	r2, r1
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d14:	693a      	ldr	r2, [r7, #16]
 8001d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d18:	3301      	adds	r3, #1
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	440b      	add	r3, r1
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	6839      	ldr	r1, [r7, #0]
 8001d2e:	440b      	add	r3, r1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	041b      	lsls	r3, r3, #16
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d3c:	3303      	adds	r3, #3
 8001d3e:	6839      	ldr	r1, [r7, #0]
 8001d40:	440b      	add	r3, r1
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d52:	3304      	adds	r3, #4
 8001d54:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699a      	ldr	r2, [r3, #24]
 8001d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	3214      	adds	r2, #20
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d3c4      	bcc.n	8001d02 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d84:	3301      	adds	r3, #1
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	4413      	add	r3, r2
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d96:	3302      	adds	r3, #2
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	041b      	lsls	r3, r3, #16
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da8:	3303      	adds	r3, #3
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dba:	3304      	adds	r3, #4
 8001dbc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(strings_lengthT > strings_length)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d90a      	bls.n	8001dde <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f00c fc08 	bl	800e5e8 <realloc>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24
      strings_length = strings_lengthT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001de4:	2300      	movs	r3, #0
 8001de6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001de8:	e03e      	b.n	8001e68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	441a      	add	r2, r3
 8001df0:	f107 030c 	add.w	r3, r7, #12
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fe73 	bl	8006ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dfe:	3304      	adds	r3, #4
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e06:	e00b      	b.n	8001e20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	441a      	add	r2, r3
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	3b01      	subs	r3, #1
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	440b      	add	r3, r1
 8001e16:	7812      	ldrb	r2, [r2, #0]
 8001e18:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4413      	add	r3, r2
 8001e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d3ed      	bcc.n	8001e08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001e2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4413      	add	r3, r2
 8001e32:	3b01      	subs	r3, #1
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	4413      	add	r3, r2
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	441a      	add	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001e48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	637b      	str	r3, [r7, #52]	@ 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	3220      	adds	r2, #32
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e64:	3301      	adds	r3, #1
 8001e66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d3bb      	bcc.n	8001dea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8001e74:	4618      	mov	r0, r3
 8001e76:	3738      	adds	r7, #56	@ 0x38
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	08012f70 	.word	0x08012f70

08001e98 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	4b03      	ldr	r3, [pc, #12]	@ (8001eb0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	08012d90 	.word	0x08012d90

08001eb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	611a      	str	r2, [r3, #16]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	68d8      	ldr	r0, [r3, #12]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6891      	ldr	r1, [r2, #8]
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	4798      	blx	r3
 8001f00:	4603      	mov	r3, r0
  };
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
  }
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8001f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <_ZN13STM32HardwareC1Ev+0x34>)
 8001f54:	601a      	str	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
    }
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	2000040c 	.word	0x2000040c

08001f80 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 f804 	bl	8001f96 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001f8e:	bf00      	nop
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6818      	ldr	r0, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001faa:	4619      	mov	r1, r3
 8001fac:	f00a fe9a 	bl	800cce4 <HAL_UART_Receive_DMA>
    }
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f8d3 4204 	ldr.w	r4, [r3, #516]	@ 0x204
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff ffa8 	bl	8001f22 <_ZN13STM32Hardware10getRdmaIndEv>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	429c      	cmp	r4, r3
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d012      	beq.n	8002008 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001fe8:	1c59      	adds	r1, r3, #1
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	f8c2 1204 	str.w	r1, [r2, #516]	@ 0x204
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	791b      	ldrb	r3, [r3, #4]
 8001ff6:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001ffe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
      }
      return c;
 8002008:	68fb      	ldr	r3, [r7, #12]
    }
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bd90      	pop	{r4, r7, pc}
	...

08002014 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b20      	cmp	r3, #32
 8002028:	d108      	bne.n	800203c <_ZN13STM32Hardware5flushEv+0x28>
 800202a:	4b28      	ldr	r3, [pc, #160]	@ (80020cc <_ZN13STM32Hardware5flushEv+0xb8>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f083 0301 	eor.w	r3, r3, #1
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <_ZN13STM32Hardware5flushEv+0x28>
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <_ZN13STM32Hardware5flushEv+0x2a>
 800203c:	2300      	movs	r3, #0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d03f      	beq.n	80020c2 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002042:	4b22      	ldr	r3, [pc, #136]	@ (80020cc <_ZN13STM32Hardware5flushEv+0xb8>)
 8002044:	2201      	movs	r2, #1
 8002046:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002054:	429a      	cmp	r2, r3
 8002056:	d031      	beq.n	80020bc <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 8002064:	429a      	cmp	r2, r3
 8002066:	d20a      	bcs.n	800207e <_ZN13STM32Hardware5flushEv+0x6a>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800206e:	b29a      	uxth	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002076:	b29b      	uxth	r3, r3
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	b29b      	uxth	r3, r3
 800207c:	e006      	b.n	800208c <_ZN13STM32Hardware5flushEv+0x78>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002084:	b29b      	uxth	r3, r3
 8002086:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800208a:	b29b      	uxth	r3, r3
 800208c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8002098:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	89fa      	ldrh	r2, [r7, #14]
 80020a2:	4619      	mov	r1, r3
 80020a4:	f00a fdae 	bl	800cc04 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80020ae:	89fb      	ldrh	r3, [r7, #14]
 80020b0:	4413      	add	r3, r2
 80020b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f8c3 240c 	str.w	r2, [r3, #1036]	@ 0x40c
        }
        mutex = false;
 80020bc:	4b03      	ldr	r3, [pc, #12]	@ (80020cc <_ZN13STM32Hardware5flushEv+0xb8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
      }
    }
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000204 	.word	0x20000204

080020d0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
      int n = length;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020e6:	bfa8      	it	ge
 80020e8:	f44f 7300 	movge.w	r3, #512	@ 0x200
 80020ec:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : tbuflen - twind;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 80020f4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80020f8:	461a      	mov	r2, r3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4293      	cmp	r3, r2
 80020fe:	bfa8      	it	ge
 8002100:	4613      	movge	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f8d3 3408 	ldr.w	r3, [r3, #1032]	@ 0x408
 800210a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	4413      	add	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	4618      	mov	r0, r3
 8002118:	f00d faad 	bl	800f676 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	4413      	add	r3, r2
 8002126:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408

      if(n != n_tail){
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d00b      	beq.n	8002150 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f503 7002 	add.w	r0, r3, #520	@ 0x208
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	18d1      	adds	r1, r2, r3
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	461a      	mov	r2, r3
 800214c:	f00d fa93 	bl	800f676 <memcpy>
      }

      flush();
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f7ff ff5f 	bl	8002014 <_ZN13STM32Hardware5flushEv>
    }
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	f006 fec1 	bl	8008eec <HAL_GetTick>
 800216a:	4603      	mov	r3, r0
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff f858 	bl	8001234 <_ZN3ros3MsgC1Ev>
 8002184:	4a0e      	ldr	r2, [pc, #56]	@ (80021c0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
      x(0),
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	08013038 	.word	0x08013038

080021c4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021c4:	b480      	push	{r7}
 80021c6:	b08b      	sub	sp, #44	@ 0x2c
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80021dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	4401      	add	r1, r0
 80021e6:	b2d3      	uxtb	r3, r2
 80021e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80021ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	0a02      	lsrs	r2, r0, #8
 80021f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80021fc:	0a0b      	lsrs	r3, r1, #8
 80021fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002200:	3101      	adds	r1, #1
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	4401      	add	r1, r0
 8002206:	b2d3      	uxtb	r3, r2
 8002208:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800220a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800220e:	f04f 0200 	mov.w	r2, #0
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	0c02      	lsrs	r2, r0, #16
 8002218:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800221c:	0c0b      	lsrs	r3, r1, #16
 800221e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002220:	3102      	adds	r1, #2
 8002222:	6838      	ldr	r0, [r7, #0]
 8002224:	4401      	add	r1, r0
 8002226:	b2d3      	uxtb	r3, r2
 8002228:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800222a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800222e:	f04f 0200 	mov.w	r2, #0
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	0e02      	lsrs	r2, r0, #24
 8002238:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800223c:	0e0b      	lsrs	r3, r1, #24
 800223e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002240:	3103      	adds	r1, #3
 8002242:	6838      	ldr	r0, [r7, #0]
 8002244:	4401      	add	r1, r0
 8002246:	b2d3      	uxtb	r3, r2
 8002248:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800224a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	000a      	movs	r2, r1
 8002258:	2300      	movs	r3, #0
 800225a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800225c:	3104      	adds	r1, #4
 800225e:	6838      	ldr	r0, [r7, #0]
 8002260:	4401      	add	r1, r0
 8002262:	b2d3      	uxtb	r3, r2
 8002264:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002266:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	0a0a      	lsrs	r2, r1, #8
 8002274:	2300      	movs	r3, #0
 8002276:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002278:	3105      	adds	r1, #5
 800227a:	6838      	ldr	r0, [r7, #0]
 800227c:	4401      	add	r1, r0
 800227e:	b2d3      	uxtb	r3, r2
 8002280:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002282:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	0c0a      	lsrs	r2, r1, #16
 8002290:	2300      	movs	r3, #0
 8002292:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002294:	3106      	adds	r1, #6
 8002296:	6838      	ldr	r0, [r7, #0]
 8002298:	4401      	add	r1, r0
 800229a:	b2d3      	uxtb	r3, r2
 800229c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800229e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022a2:	f04f 0200 	mov.w	r2, #0
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	0e0a      	lsrs	r2, r1, #24
 80022ac:	2300      	movs	r3, #0
 80022ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022b0:	3107      	adds	r1, #7
 80022b2:	6838      	ldr	r0, [r7, #0]
 80022b4:	4401      	add	r1, r0
 80022b6:	b2d3      	uxtb	r3, r2
 80022b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	3308      	adds	r3, #8
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80022ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022d0:	6838      	ldr	r0, [r7, #0]
 80022d2:	4401      	add	r1, r0
 80022d4:	b2d3      	uxtb	r3, r2
 80022d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80022d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	0a02      	lsrs	r2, r0, #8
 80022e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80022ea:	0a0b      	lsrs	r3, r1, #8
 80022ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022ee:	3101      	adds	r1, #1
 80022f0:	6838      	ldr	r0, [r7, #0]
 80022f2:	4401      	add	r1, r0
 80022f4:	b2d3      	uxtb	r3, r2
 80022f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80022f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	0c02      	lsrs	r2, r0, #16
 8002306:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800230a:	0c0b      	lsrs	r3, r1, #16
 800230c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800230e:	3102      	adds	r1, #2
 8002310:	6838      	ldr	r0, [r7, #0]
 8002312:	4401      	add	r1, r0
 8002314:	b2d3      	uxtb	r3, r2
 8002316:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002318:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	0e02      	lsrs	r2, r0, #24
 8002326:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800232a:	0e0b      	lsrs	r3, r1, #24
 800232c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800232e:	3103      	adds	r1, #3
 8002330:	6838      	ldr	r0, [r7, #0]
 8002332:	4401      	add	r1, r0
 8002334:	b2d3      	uxtb	r3, r2
 8002336:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002338:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	000a      	movs	r2, r1
 8002346:	2300      	movs	r3, #0
 8002348:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800234a:	3104      	adds	r1, #4
 800234c:	6838      	ldr	r0, [r7, #0]
 800234e:	4401      	add	r1, r0
 8002350:	b2d3      	uxtb	r3, r2
 8002352:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002354:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	0a0a      	lsrs	r2, r1, #8
 8002362:	2300      	movs	r3, #0
 8002364:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002366:	3105      	adds	r1, #5
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	4401      	add	r1, r0
 800236c:	b2d3      	uxtb	r3, r2
 800236e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002370:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	0c0a      	lsrs	r2, r1, #16
 800237e:	2300      	movs	r3, #0
 8002380:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002382:	3106      	adds	r1, #6
 8002384:	6838      	ldr	r0, [r7, #0]
 8002386:	4401      	add	r1, r0
 8002388:	b2d3      	uxtb	r3, r2
 800238a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800238c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	0e0a      	lsrs	r2, r1, #24
 800239a:	2300      	movs	r3, #0
 800239c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800239e:	3107      	adds	r1, #7
 80023a0:	6838      	ldr	r0, [r7, #0]
 80023a2:	4401      	add	r1, r0
 80023a4:	b2d3      	uxtb	r3, r2
 80023a6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80023a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023aa:	3308      	adds	r3, #8
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80023b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023be:	6838      	ldr	r0, [r7, #0]
 80023c0:	4401      	add	r1, r0
 80023c2:	b2d3      	uxtb	r3, r2
 80023c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80023c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	f04f 0300 	mov.w	r3, #0
 80023d2:	0a02      	lsrs	r2, r0, #8
 80023d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80023d8:	0a0b      	lsrs	r3, r1, #8
 80023da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023dc:	3101      	adds	r1, #1
 80023de:	6838      	ldr	r0, [r7, #0]
 80023e0:	4401      	add	r1, r0
 80023e2:	b2d3      	uxtb	r3, r2
 80023e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80023e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	0c02      	lsrs	r2, r0, #16
 80023f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023f8:	0c0b      	lsrs	r3, r1, #16
 80023fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023fc:	3102      	adds	r1, #2
 80023fe:	6838      	ldr	r0, [r7, #0]
 8002400:	4401      	add	r1, r0
 8002402:	b2d3      	uxtb	r3, r2
 8002404:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002406:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	0e02      	lsrs	r2, r0, #24
 8002414:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002418:	0e0b      	lsrs	r3, r1, #24
 800241a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800241c:	3103      	adds	r1, #3
 800241e:	6838      	ldr	r0, [r7, #0]
 8002420:	4401      	add	r1, r0
 8002422:	b2d3      	uxtb	r3, r2
 8002424:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	000a      	movs	r2, r1
 8002434:	2300      	movs	r3, #0
 8002436:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002438:	3104      	adds	r1, #4
 800243a:	6838      	ldr	r0, [r7, #0]
 800243c:	4401      	add	r1, r0
 800243e:	b2d3      	uxtb	r3, r2
 8002440:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	0a0a      	lsrs	r2, r1, #8
 8002450:	2300      	movs	r3, #0
 8002452:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002454:	3105      	adds	r1, #5
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	4401      	add	r1, r0
 800245a:	b2d3      	uxtb	r3, r2
 800245c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800245e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	0c0a      	lsrs	r2, r1, #16
 800246c:	2300      	movs	r3, #0
 800246e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002470:	3106      	adds	r1, #6
 8002472:	6838      	ldr	r0, [r7, #0]
 8002474:	4401      	add	r1, r0
 8002476:	b2d3      	uxtb	r3, r2
 8002478:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800247a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	0e0a      	lsrs	r2, r1, #24
 8002488:	2300      	movs	r3, #0
 800248a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800248c:	3107      	adds	r1, #7
 800248e:	6838      	ldr	r0, [r7, #0]
 8002490:	4401      	add	r1, r0
 8002492:	b2d3      	uxtb	r3, r2
 8002494:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8002496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002498:	3308      	adds	r3, #8
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800249e:	4618      	mov	r0, r3
 80024a0:	372c      	adds	r7, #44	@ 0x2c
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80024aa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024ae:	b0eb      	sub	sp, #428	@ 0x1ac
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 80024b6:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80024d0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80024d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80024d8:	4413      	add	r3, r2
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2200      	movs	r2, #0
 80024e0:	461c      	mov	r4, r3
 80024e2:	4615      	mov	r5, r2
 80024e4:	ea40 0804 	orr.w	r8, r0, r4
 80024e8:	ea41 0905 	orr.w	r9, r1, r5
 80024ec:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80024f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80024f8:	1c5a      	adds	r2, r3, #1
 80024fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80024fe:	4413      	add	r3, r2
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2200      	movs	r2, #0
 8002506:	469a      	mov	sl, r3
 8002508:	4693      	mov	fp, r2
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002516:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800251a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800251e:	ea40 0402 	orr.w	r4, r0, r2
 8002522:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 8002526:	430b      	orrs	r3, r1
 8002528:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800252c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8002530:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002534:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002538:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800253c:	1c9a      	adds	r2, r3, #2
 800253e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800254e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 800255e:	464c      	mov	r4, r9
 8002560:	0423      	lsls	r3, r4, #16
 8002562:	4644      	mov	r4, r8
 8002564:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002568:	4644      	mov	r4, r8
 800256a:	0422      	lsls	r2, r4, #16
 800256c:	ea40 0402 	orr.w	r4, r0, r2
 8002570:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8002574:	430b      	orrs	r3, r1
 8002576:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800257a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 800257e:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002582:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002586:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800258a:	1cda      	adds	r2, r3, #3
 800258c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002590:	4413      	add	r3, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2200      	movs	r2, #0
 8002598:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800259c:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80025a0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80025a4:	4623      	mov	r3, r4
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80025ac:	4623      	mov	r3, r4
 80025ae:	061b      	lsls	r3, r3, #24
 80025b0:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80025b4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80025b8:	4623      	mov	r3, r4
 80025ba:	4303      	orrs	r3, r0
 80025bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80025c0:	462b      	mov	r3, r5
 80025c2:	430b      	orrs	r3, r1
 80025c4:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80025c8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 80025cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80025d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80025d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80025d8:	1d1a      	adds	r2, r3, #4
 80025da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80025de:	4413      	add	r3, r2
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2200      	movs	r2, #0
 80025e6:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80025ea:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 80025fa:	0023      	movs	r3, r4
 80025fc:	2200      	movs	r2, #0
 80025fe:	ea40 0402 	orr.w	r4, r0, r2
 8002602:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 8002606:	430b      	orrs	r3, r1
 8002608:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800260c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8002610:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002614:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8002618:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800261c:	1d5a      	adds	r2, r3, #5
 800261e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2200      	movs	r2, #0
 800262a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800262e:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 800263e:	0223      	lsls	r3, r4, #8
 8002640:	2200      	movs	r2, #0
 8002642:	ea40 0402 	orr.w	r4, r0, r2
 8002646:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 800264a:	430b      	orrs	r3, r1
 800264c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002650:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8002654:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002658:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800265c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002660:	1d9a      	adds	r2, r3, #6
 8002662:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2200      	movs	r2, #0
 800266e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002672:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8002682:	0423      	lsls	r3, r4, #16
 8002684:	2200      	movs	r2, #0
 8002686:	ea40 0402 	orr.w	r4, r0, r2
 800268a:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 800268e:	430b      	orrs	r3, r1
 8002690:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002694:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 8002698:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800269c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80026a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80026a4:	1dda      	adds	r2, r3, #7
 80026a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80026b6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80026c6:	0623      	lsls	r3, r4, #24
 80026c8:	2200      	movs	r2, #0
 80026ca:	ea40 0402 	orr.w	r4, r0, r2
 80026ce:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 80026d2:	430b      	orrs	r3, r1
 80026d4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80026d8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80026dc:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->x = u_x.real;
 80026e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80026e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80026e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80026ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80026f0:	3308      	adds	r3, #8
 80026f2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002702:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002706:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800270a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800270e:	4413      	add	r3, r2
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2200      	movs	r2, #0
 8002716:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800271a:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 800271e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8002722:	4623      	mov	r3, r4
 8002724:	4303      	orrs	r3, r0
 8002726:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800272a:	462b      	mov	r3, r5
 800272c:	430b      	orrs	r3, r1
 800272e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002732:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 8002736:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800273a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800273e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002742:	1c5a      	adds	r2, r3, #1
 8002744:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002754:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	f04f 0300 	mov.w	r3, #0
 8002760:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8002764:	464c      	mov	r4, r9
 8002766:	0223      	lsls	r3, r4, #8
 8002768:	4644      	mov	r4, r8
 800276a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800276e:	4644      	mov	r4, r8
 8002770:	0222      	lsls	r2, r4, #8
 8002772:	ea40 0402 	orr.w	r4, r0, r2
 8002776:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 800277a:	430b      	orrs	r3, r1
 800277c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002780:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 8002784:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002788:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800278c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002790:	1c9a      	adds	r2, r3, #2
 8002792:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002796:	4413      	add	r3, r2
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2200      	movs	r2, #0
 800279e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80027a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80027b2:	464c      	mov	r4, r9
 80027b4:	0423      	lsls	r3, r4, #16
 80027b6:	4644      	mov	r4, r8
 80027b8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80027bc:	4644      	mov	r4, r8
 80027be:	0422      	lsls	r2, r4, #16
 80027c0:	ea40 0402 	orr.w	r4, r0, r2
 80027c4:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80027c8:	430b      	orrs	r3, r1
 80027ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027ce:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80027d2:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027d6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80027da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80027de:	1cda      	adds	r2, r3, #3
 80027e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80027e4:	4413      	add	r3, r2
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2200      	movs	r2, #0
 80027ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027f0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027f4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80027f8:	4623      	mov	r3, r4
 80027fa:	0a1b      	lsrs	r3, r3, #8
 80027fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002800:	4623      	mov	r3, r4
 8002802:	061b      	lsls	r3, r3, #24
 8002804:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002808:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800280c:	4623      	mov	r3, r4
 800280e:	4303      	orrs	r3, r0
 8002810:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002814:	462b      	mov	r3, r5
 8002816:	430b      	orrs	r3, r1
 8002818:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800281c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8002820:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002824:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002828:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800282c:	1d1a      	adds	r2, r3, #4
 800282e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002832:	4413      	add	r3, r2
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2200      	movs	r2, #0
 800283a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800283e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	f04f 0300 	mov.w	r3, #0
 800284a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 800284e:	0023      	movs	r3, r4
 8002850:	2200      	movs	r2, #0
 8002852:	ea40 0402 	orr.w	r4, r0, r2
 8002856:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 800285a:	430b      	orrs	r3, r1
 800285c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002860:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8002864:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002868:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800286c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002870:	1d5a      	adds	r2, r3, #5
 8002872:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002876:	4413      	add	r3, r2
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2200      	movs	r2, #0
 800287e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002882:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 8002892:	0223      	lsls	r3, r4, #8
 8002894:	2200      	movs	r2, #0
 8002896:	ea40 0402 	orr.w	r4, r0, r2
 800289a:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 800289e:	430b      	orrs	r3, r1
 80028a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028a4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80028a8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80028ac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80028b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80028b4:	1d9a      	adds	r2, r3, #6
 80028b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028c6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80028d6:	0423      	lsls	r3, r4, #16
 80028d8:	2200      	movs	r2, #0
 80028da:	ea40 0402 	orr.w	r4, r0, r2
 80028de:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80028e2:	430b      	orrs	r3, r1
 80028e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028e8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80028ec:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80028f0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80028f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80028f8:	1dda      	adds	r2, r3, #7
 80028fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80028fe:	4413      	add	r3, r2
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2200      	movs	r2, #0
 8002906:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800290a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800291a:	0623      	lsls	r3, r4, #24
 800291c:	2200      	movs	r2, #0
 800291e:	ea40 0402 	orr.w	r4, r0, r2
 8002922:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8002926:	430b      	orrs	r3, r1
 8002928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800292c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8002930:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->y = u_y.real;
 8002934:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8002938:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800293c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002940:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002944:	3308      	adds	r3, #8
 8002946:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800294a:	f04f 0200 	mov.w	r2, #0
 800294e:	f04f 0300 	mov.w	r3, #0
 8002952:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002956:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800295a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800295e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002962:	4413      	add	r3, r2
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2200      	movs	r2, #0
 800296a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800296e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002972:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8002976:	4623      	mov	r3, r4
 8002978:	4303      	orrs	r3, r0
 800297a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800297c:	462b      	mov	r3, r5
 800297e:	430b      	orrs	r3, r1
 8002980:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002982:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8002986:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800298a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800298e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2200      	movs	r2, #0
 80029a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80029a2:	677a      	str	r2, [r7, #116]	@ 0x74
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029b0:	464c      	mov	r4, r9
 80029b2:	0223      	lsls	r3, r4, #8
 80029b4:	4644      	mov	r4, r8
 80029b6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80029ba:	4644      	mov	r4, r8
 80029bc:	0222      	lsls	r2, r4, #8
 80029be:	ea40 0402 	orr.w	r4, r0, r2
 80029c2:	66bc      	str	r4, [r7, #104]	@ 0x68
 80029c4:	430b      	orrs	r3, r1
 80029c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80029c8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 80029cc:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029d0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80029d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80029d8:	1c9a      	adds	r2, r3, #2
 80029da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	2200      	movs	r2, #0
 80029e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80029e8:	667a      	str	r2, [r7, #100]	@ 0x64
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80029f6:	464c      	mov	r4, r9
 80029f8:	0423      	lsls	r3, r4, #16
 80029fa:	4644      	mov	r4, r8
 80029fc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a00:	4644      	mov	r4, r8
 8002a02:	0422      	lsls	r2, r4, #16
 8002a04:	ea40 0402 	orr.w	r4, r0, r2
 8002a08:	65bc      	str	r4, [r7, #88]	@ 0x58
 8002a0a:	430b      	orrs	r3, r1
 8002a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a0e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8002a12:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002a1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002a1e:	1cda      	adds	r2, r3, #3
 8002a20:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a24:	4413      	add	r3, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a2e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002a30:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8002a34:	4623      	mov	r3, r4
 8002a36:	0a1b      	lsrs	r3, r3, #8
 8002a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a3a:	4623      	mov	r3, r4
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a40:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002a44:	4623      	mov	r3, r4
 8002a46:	4303      	orrs	r3, r0
 8002a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	430b      	orrs	r3, r1
 8002a4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a50:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002a54:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a58:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002a5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002a60:	1d1a      	adds	r2, r3, #4
 8002a62:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002a66:	4413      	add	r3, r2
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a72:	f04f 0200 	mov.w	r2, #0
 8002a76:	f04f 0300 	mov.w	r3, #0
 8002a7a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8002a7c:	0023      	movs	r3, r4
 8002a7e:	2200      	movs	r2, #0
 8002a80:	ea40 0402 	orr.w	r4, r0, r2
 8002a84:	633c      	str	r4, [r7, #48]	@ 0x30
 8002a86:	430b      	orrs	r3, r1
 8002a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a8a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002a8e:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a92:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002a96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002a9a:	1d5a      	adds	r2, r3, #5
 8002a9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8002ab6:	0223      	lsls	r3, r4, #8
 8002ab8:	2200      	movs	r2, #0
 8002aba:	ea40 0402 	orr.w	r4, r0, r2
 8002abe:	623c      	str	r4, [r7, #32]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ac4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002ac8:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002acc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002ad0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002ad4:	3306      	adds	r3, #6
 8002ad6:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8002ada:	4413      	add	r3, r2
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
 8002ae4:	61fa      	str	r2, [r7, #28]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	69bc      	ldr	r4, [r7, #24]
 8002af0:	0423      	lsls	r3, r4, #16
 8002af2:	2200      	movs	r2, #0
 8002af4:	ea40 0402 	orr.w	r4, r0, r2
 8002af8:	613c      	str	r4, [r7, #16]
 8002afa:	430b      	orrs	r3, r1
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b02:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8002b0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002b0e:	3307      	adds	r3, #7
 8002b10:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8002b14:	4413      	add	r3, r2
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	60fa      	str	r2, [r7, #12]
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	68bc      	ldr	r4, [r7, #8]
 8002b2a:	0623      	lsls	r3, r4, #24
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	ea40 0402 	orr.w	r4, r0, r2
 8002b32:	603c      	str	r4, [r7, #0]
 8002b34:	430b      	orrs	r3, r1
 8002b36:	607b      	str	r3, [r7, #4]
 8002b38:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b3c:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->z = u_z.real;
 8002b40:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8002b44:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 8002b48:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002b4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8002b50:	3308      	adds	r3, #8
 8002b52:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 8002b56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8002b60:	46bd      	mov	sp, r7
 8002b62:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b66:	4770      	bx	lr

08002b68 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	4b03      	ldr	r3, [pc, #12]	@ (8002b80 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	08012db4 	.word	0x08012db4

08002b84 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	4b03      	ldr	r3, [pc, #12]	@ (8002b9c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	08012dcc 	.word	0x08012dcc

08002ba0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7fe fb42 	bl	8001234 <_ZN3ros3MsgC1Ev>
 8002bb0:	4a08      	ldr	r2, [pc, #32]	@ (8002bd4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
      linear(),
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3308      	adds	r3, #8
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fada 	bl	8002174 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3328      	adds	r3, #40	@ 0x28
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fad5 	bl	8002174 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3708      	adds	r7, #8
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	08013020 	.word	0x08013020

08002bd8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f103 0008 	add.w	r0, r3, #8
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f7ff fae6 	bl	80021c4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f7ff fad9 	bl	80021c4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c12:	4602      	mov	r2, r0
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
    }
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f103 0008 	add.w	r0, r3, #8
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7ff fc33 	bl	80024aa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4413      	add	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	683a      	ldr	r2, [r7, #0]
 8002c56:	4413      	add	r3, r2
 8002c58:	4619      	mov	r1, r3
 8002c5a:	f7ff fc26 	bl	80024aa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4413      	add	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c66:	68fb      	ldr	r3, [r7, #12]
    }
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	08012df0 	.word	0x08012df0

08002c8c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	4b03      	ldr	r3, [pc, #12]	@ (8002ca4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	370c      	adds	r7, #12
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	08012e04 	.word	0x08012e04

08002ca8 <_ZN9ired_msgs3IMUC1Ev>:
      typedef double _pitch_type;
      _pitch_type pitch;
      typedef double _yaw_type;
      _yaw_type yaw;

    IMU():
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
      roll(0),
      pitch(0),
      yaw(0)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7fe fabe 	bl	8001234 <_ZN3ros3MsgC1Ev>
 8002cb8:	4a0e      	ldr	r2, [pc, #56]	@ (8002cf4 <_ZN9ired_msgs3IMUC1Ev+0x4c>)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	601a      	str	r2, [r3, #0]
      roll(0),
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
      pitch(0),
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	e9c1 2304 	strd	r2, r3, [r1, #16]
      yaw(0)
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	08013008 	.word	0x08013008

08002cf8 <_ZNK9ired_msgs3IMU9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002cf8:	b480      	push	{r7}
 8002cfa:	b08b      	sub	sp, #44	@ 0x2c
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_roll;
      u_roll.real = this->roll;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d0c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 8002d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d16:	6838      	ldr	r0, [r7, #0]
 8002d18:	4401      	add	r1, r0
 8002d1a:	b2d3      	uxtb	r3, r2
 8002d1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 8002d1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f04f 0300 	mov.w	r3, #0
 8002d2a:	0a02      	lsrs	r2, r0, #8
 8002d2c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d30:	0a0b      	lsrs	r3, r1, #8
 8002d32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d34:	3101      	adds	r1, #1
 8002d36:	6838      	ldr	r0, [r7, #0]
 8002d38:	4401      	add	r1, r0
 8002d3a:	b2d3      	uxtb	r3, r2
 8002d3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8002d3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	0c02      	lsrs	r2, r0, #16
 8002d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d50:	0c0b      	lsrs	r3, r1, #16
 8002d52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d54:	3102      	adds	r1, #2
 8002d56:	6838      	ldr	r0, [r7, #0]
 8002d58:	4401      	add	r1, r0
 8002d5a:	b2d3      	uxtb	r3, r2
 8002d5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8002d5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	0e02      	lsrs	r2, r0, #24
 8002d6c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d70:	0e0b      	lsrs	r3, r1, #24
 8002d72:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d74:	3103      	adds	r1, #3
 8002d76:	6838      	ldr	r0, [r7, #0]
 8002d78:	4401      	add	r1, r0
 8002d7a:	b2d3      	uxtb	r3, r2
 8002d7c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_roll.base >> (8 * 4)) & 0xFF;
 8002d7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	000a      	movs	r2, r1
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d90:	3104      	adds	r1, #4
 8002d92:	6838      	ldr	r0, [r7, #0]
 8002d94:	4401      	add	r1, r0
 8002d96:	b2d3      	uxtb	r3, r2
 8002d98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_roll.base >> (8 * 5)) & 0xFF;
 8002d9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f04f 0300 	mov.w	r3, #0
 8002da6:	0a0a      	lsrs	r2, r1, #8
 8002da8:	2300      	movs	r3, #0
 8002daa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dac:	3105      	adds	r1, #5
 8002dae:	6838      	ldr	r0, [r7, #0]
 8002db0:	4401      	add	r1, r0
 8002db2:	b2d3      	uxtb	r3, r2
 8002db4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_roll.base >> (8 * 6)) & 0xFF;
 8002db6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dba:	f04f 0200 	mov.w	r2, #0
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	0c0a      	lsrs	r2, r1, #16
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002dc8:	3106      	adds	r1, #6
 8002dca:	6838      	ldr	r0, [r7, #0]
 8002dcc:	4401      	add	r1, r0
 8002dce:	b2d3      	uxtb	r3, r2
 8002dd0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_roll.base >> (8 * 7)) & 0xFF;
 8002dd2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	0e0a      	lsrs	r2, r1, #24
 8002de0:	2300      	movs	r3, #0
 8002de2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002de4:	3107      	adds	r1, #7
 8002de6:	6838      	ldr	r0, [r7, #0]
 8002de8:	4401      	add	r1, r0
 8002dea:	b2d3      	uxtb	r3, r2
 8002dec:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->roll);
 8002dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df0:	3308      	adds	r3, #8
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002dfa:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 8002dfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e04:	6838      	ldr	r0, [r7, #0]
 8002e06:	4401      	add	r1, r0
 8002e08:	b2d3      	uxtb	r3, r2
 8002e0a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 8002e0c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	f04f 0300 	mov.w	r3, #0
 8002e18:	0a02      	lsrs	r2, r0, #8
 8002e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e1e:	0a0b      	lsrs	r3, r1, #8
 8002e20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e22:	3101      	adds	r1, #1
 8002e24:	6838      	ldr	r0, [r7, #0]
 8002e26:	4401      	add	r1, r0
 8002e28:	b2d3      	uxtb	r3, r2
 8002e2a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8002e2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	0c02      	lsrs	r2, r0, #16
 8002e3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e3e:	0c0b      	lsrs	r3, r1, #16
 8002e40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e42:	3102      	adds	r1, #2
 8002e44:	6838      	ldr	r0, [r7, #0]
 8002e46:	4401      	add	r1, r0
 8002e48:	b2d3      	uxtb	r3, r2
 8002e4a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8002e4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e50:	f04f 0200 	mov.w	r2, #0
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	0e02      	lsrs	r2, r0, #24
 8002e5a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e5e:	0e0b      	lsrs	r3, r1, #24
 8002e60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e62:	3103      	adds	r1, #3
 8002e64:	6838      	ldr	r0, [r7, #0]
 8002e66:	4401      	add	r1, r0
 8002e68:	b2d3      	uxtb	r3, r2
 8002e6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pitch.base >> (8 * 4)) & 0xFF;
 8002e6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	000a      	movs	r2, r1
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e7e:	3104      	adds	r1, #4
 8002e80:	6838      	ldr	r0, [r7, #0]
 8002e82:	4401      	add	r1, r0
 8002e84:	b2d3      	uxtb	r3, r2
 8002e86:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pitch.base >> (8 * 5)) & 0xFF;
 8002e88:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	0a0a      	lsrs	r2, r1, #8
 8002e96:	2300      	movs	r3, #0
 8002e98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e9a:	3105      	adds	r1, #5
 8002e9c:	6838      	ldr	r0, [r7, #0]
 8002e9e:	4401      	add	r1, r0
 8002ea0:	b2d3      	uxtb	r3, r2
 8002ea2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pitch.base >> (8 * 6)) & 0xFF;
 8002ea4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	0c0a      	lsrs	r2, r1, #16
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002eb6:	3106      	adds	r1, #6
 8002eb8:	6838      	ldr	r0, [r7, #0]
 8002eba:	4401      	add	r1, r0
 8002ebc:	b2d3      	uxtb	r3, r2
 8002ebe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pitch.base >> (8 * 7)) & 0xFF;
 8002ec0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	0e0a      	lsrs	r2, r1, #24
 8002ece:	2300      	movs	r3, #0
 8002ed0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ed2:	3107      	adds	r1, #7
 8002ed4:	6838      	ldr	r0, [r7, #0]
 8002ed6:	4401      	add	r1, r0
 8002ed8:	b2d3      	uxtb	r3, r2
 8002eda:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pitch);
 8002edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ede:	3308      	adds	r3, #8
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        double real;
        uint64_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ee8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 8002eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ef0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ef2:	6838      	ldr	r0, [r7, #0]
 8002ef4:	4401      	add	r1, r0
 8002ef6:	b2d3      	uxtb	r3, r2
 8002ef8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 8002efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	0a02      	lsrs	r2, r0, #8
 8002f08:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f0c:	0a0b      	lsrs	r3, r1, #8
 8002f0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f10:	3101      	adds	r1, #1
 8002f12:	6838      	ldr	r0, [r7, #0]
 8002f14:	4401      	add	r1, r0
 8002f16:	b2d3      	uxtb	r3, r2
 8002f18:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 8002f1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f04f 0300 	mov.w	r3, #0
 8002f26:	0c02      	lsrs	r2, r0, #16
 8002f28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f2c:	0c0b      	lsrs	r3, r1, #16
 8002f2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f30:	3102      	adds	r1, #2
 8002f32:	6838      	ldr	r0, [r7, #0]
 8002f34:	4401      	add	r1, r0
 8002f36:	b2d3      	uxtb	r3, r2
 8002f38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 8002f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	0e02      	lsrs	r2, r0, #24
 8002f48:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f4c:	0e0b      	lsrs	r3, r1, #24
 8002f4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f50:	3103      	adds	r1, #3
 8002f52:	6838      	ldr	r0, [r7, #0]
 8002f54:	4401      	add	r1, r0
 8002f56:	b2d3      	uxtb	r3, r2
 8002f58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_yaw.base >> (8 * 4)) & 0xFF;
 8002f5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	000a      	movs	r2, r1
 8002f68:	2300      	movs	r3, #0
 8002f6a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f6c:	3104      	adds	r1, #4
 8002f6e:	6838      	ldr	r0, [r7, #0]
 8002f70:	4401      	add	r1, r0
 8002f72:	b2d3      	uxtb	r3, r2
 8002f74:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_yaw.base >> (8 * 5)) & 0xFF;
 8002f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	0a0a      	lsrs	r2, r1, #8
 8002f84:	2300      	movs	r3, #0
 8002f86:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f88:	3105      	adds	r1, #5
 8002f8a:	6838      	ldr	r0, [r7, #0]
 8002f8c:	4401      	add	r1, r0
 8002f8e:	b2d3      	uxtb	r3, r2
 8002f90:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_yaw.base >> (8 * 6)) & 0xFF;
 8002f92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	0c0a      	lsrs	r2, r1, #16
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fa4:	3106      	adds	r1, #6
 8002fa6:	6838      	ldr	r0, [r7, #0]
 8002fa8:	4401      	add	r1, r0
 8002faa:	b2d3      	uxtb	r3, r2
 8002fac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_yaw.base >> (8 * 7)) & 0xFF;
 8002fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	0e0a      	lsrs	r2, r1, #24
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fc0:	3107      	adds	r1, #7
 8002fc2:	6838      	ldr	r0, [r7, #0]
 8002fc4:	4401      	add	r1, r0
 8002fc6:	b2d3      	uxtb	r3, r2
 8002fc8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->yaw);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fcc:	3308      	adds	r3, #8
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
      return offset;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	372c      	adds	r7, #44	@ 0x2c
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <_ZN9ired_msgs3IMU11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002fde:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002fe2:	b0eb      	sub	sp, #428	@ 0x1ac
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
 8002fea:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
    {
      int offset = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_roll;
      u_roll.base = 0;
 8002ff4:	f04f 0200 	mov.w	r2, #0
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	e9c7 2366 	strd	r2, r3, [r7, #408]	@ 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003000:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003004:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003008:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800300c:	4413      	add	r3, r2
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2200      	movs	r2, #0
 8003014:	461c      	mov	r4, r3
 8003016:	4615      	mov	r5, r2
 8003018:	ea40 0804 	orr.w	r8, r0, r4
 800301c:	ea41 0905 	orr.w	r9, r1, r5
 8003020:	e9c7 8966 	strd	r8, r9, [r7, #408]	@ 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003024:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003028:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800302c:	1c5a      	adds	r2, r3, #1
 800302e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003032:	4413      	add	r3, r2
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2200      	movs	r2, #0
 800303a:	469a      	mov	sl, r3
 800303c:	4693      	mov	fp, r2
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800304a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800304e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003052:	ea40 0402 	orr.w	r4, r0, r2
 8003056:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 800305a:	430b      	orrs	r3, r1
 800305c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003060:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8003064:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003068:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800306c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003070:	1c9a      	adds	r2, r3, #2
 8003072:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003076:	4413      	add	r3, r2
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2200      	movs	r2, #0
 800307e:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8003082:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	@ 0x170
 8003092:	464c      	mov	r4, r9
 8003094:	0423      	lsls	r3, r4, #16
 8003096:	4644      	mov	r4, r8
 8003098:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800309c:	4644      	mov	r4, r8
 800309e:	0422      	lsls	r2, r4, #16
 80030a0:	ea40 0402 	orr.w	r4, r0, r2
 80030a4:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 80030a8:	430b      	orrs	r3, r1
 80030aa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80030ae:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 80030b2:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030b6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80030ba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80030be:	1cda      	adds	r2, r3, #3
 80030c0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80030d0:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 80030d4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 80030d8:	4623      	mov	r3, r4
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80030e0:	4623      	mov	r3, r4
 80030e2:	061b      	lsls	r3, r3, #24
 80030e4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80030e8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 80030ec:	4623      	mov	r3, r4
 80030ee:	4303      	orrs	r3, r0
 80030f0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80030f4:	462b      	mov	r3, r5
 80030f6:	430b      	orrs	r3, r1
 80030f8:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80030fc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 8003100:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003104:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003108:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800310c:	1d1a      	adds	r2, r3, #4
 800310e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003112:	4413      	add	r3, r2
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800311e:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 800312e:	0023      	movs	r3, r4
 8003130:	2200      	movs	r2, #0
 8003132:	ea40 0402 	orr.w	r4, r0, r2
 8003136:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 800313a:	430b      	orrs	r3, r1
 800313c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8003140:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 8003144:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003148:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 800314c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003150:	1d5a      	adds	r2, r3, #5
 8003152:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003156:	4413      	add	r3, r2
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8003162:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8003172:	0223      	lsls	r3, r4, #8
 8003174:	2200      	movs	r2, #0
 8003176:	ea40 0402 	orr.w	r4, r0, r2
 800317a:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 800317e:	430b      	orrs	r3, r1
 8003180:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003184:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8003188:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800318c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003190:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003194:	1d9a      	adds	r2, r3, #6
 8003196:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800319a:	4413      	add	r3, r2
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	2200      	movs	r2, #0
 80031a2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80031a6:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 80031b6:	0423      	lsls	r3, r4, #16
 80031b8:	2200      	movs	r2, #0
 80031ba:	ea40 0402 	orr.w	r4, r0, r2
 80031be:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 80031c2:	430b      	orrs	r3, r1
 80031c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80031c8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 80031cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80031d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 80031d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80031d8:	1dda      	adds	r2, r3, #7
 80031da:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80031ea:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	f04f 0300 	mov.w	r3, #0
 80031f6:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 80031fa:	0623      	lsls	r3, r4, #24
 80031fc:	2200      	movs	r2, #0
 80031fe:	ea40 0402 	orr.w	r4, r0, r2
 8003202:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 8003206:	430b      	orrs	r3, r1
 8003208:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800320c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 8003210:	e9c7 3466 	strd	r3, r4, [r7, #408]	@ 0x198
      this->roll = u_roll.real;
 8003214:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	@ 0x198
 8003218:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800321c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->roll);
 8003220:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003224:	3308      	adds	r3, #8
 8003226:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_pitch;
      u_pitch.base = 0;
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	e9c7 2364 	strd	r2, r3, [r7, #400]	@ 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003236:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800323a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 800323e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003242:	4413      	add	r3, r2
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2200      	movs	r2, #0
 800324a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800324e:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8003252:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 8003256:	4623      	mov	r3, r4
 8003258:	4303      	orrs	r3, r0
 800325a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800325e:	462b      	mov	r3, r5
 8003260:	430b      	orrs	r3, r1
 8003262:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003266:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 800326a:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800326e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003272:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800327c:	4413      	add	r3, r2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2200      	movs	r2, #0
 8003284:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003288:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	@ 0xf8
 8003298:	464c      	mov	r4, r9
 800329a:	0223      	lsls	r3, r4, #8
 800329c:	4644      	mov	r4, r8
 800329e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032a2:	4644      	mov	r4, r8
 80032a4:	0222      	lsls	r2, r4, #8
 80032a6:	ea40 0402 	orr.w	r4, r0, r2
 80032aa:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 80032ae:	430b      	orrs	r3, r1
 80032b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80032b4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 80032b8:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80032c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80032c4:	1c9a      	adds	r2, r3, #2
 80032c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80032ca:	4413      	add	r3, r2
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2200      	movs	r2, #0
 80032d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80032e6:	464c      	mov	r4, r9
 80032e8:	0423      	lsls	r3, r4, #16
 80032ea:	4644      	mov	r4, r8
 80032ec:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80032f0:	4644      	mov	r4, r8
 80032f2:	0422      	lsls	r2, r4, #16
 80032f4:	ea40 0402 	orr.w	r4, r0, r2
 80032f8:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80032fc:	430b      	orrs	r3, r1
 80032fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003302:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 8003306:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800330a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800330e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003312:	1cda      	adds	r2, r3, #3
 8003314:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003318:	4413      	add	r3, r2
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2200      	movs	r2, #0
 8003320:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003324:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003328:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800332c:	4623      	mov	r3, r4
 800332e:	0a1b      	lsrs	r3, r3, #8
 8003330:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003334:	4623      	mov	r3, r4
 8003336:	061b      	lsls	r3, r3, #24
 8003338:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800333c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8003340:	4623      	mov	r3, r4
 8003342:	4303      	orrs	r3, r0
 8003344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003348:	462b      	mov	r3, r5
 800334a:	430b      	orrs	r3, r1
 800334c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003350:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8003354:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003358:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800335c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003360:	1d1a      	adds	r2, r3, #4
 8003362:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003366:	4413      	add	r3, r2
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2200      	movs	r2, #0
 800336e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003372:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8003382:	0023      	movs	r3, r4
 8003384:	2200      	movs	r2, #0
 8003386:	ea40 0402 	orr.w	r4, r0, r2
 800338a:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 800338e:	430b      	orrs	r3, r1
 8003390:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003394:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 8003398:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800339c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80033a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80033a4:	1d5a      	adds	r2, r3, #5
 80033a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80033aa:	4413      	add	r3, r2
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033b6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 80033c6:	0223      	lsls	r3, r4, #8
 80033c8:	2200      	movs	r2, #0
 80033ca:	ea40 0402 	orr.w	r4, r0, r2
 80033ce:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 80033d2:	430b      	orrs	r3, r1
 80033d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033d8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80033dc:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033e0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 80033e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80033e8:	1d9a      	adds	r2, r3, #6
 80033ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80033ee:	4413      	add	r3, r2
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800340a:	0423      	lsls	r3, r4, #16
 800340c:	2200      	movs	r2, #0
 800340e:	ea40 0402 	orr.w	r4, r0, r2
 8003412:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 8003416:	430b      	orrs	r3, r1
 8003418:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800341c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8003420:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003424:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8003428:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800342c:	1dda      	adds	r2, r3, #7
 800342e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003432:	4413      	add	r3, r2
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2200      	movs	r2, #0
 800343a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800343e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 800344e:	0623      	lsls	r3, r4, #24
 8003450:	2200      	movs	r2, #0
 8003452:	ea40 0402 	orr.w	r4, r0, r2
 8003456:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 800345a:	430b      	orrs	r3, r1
 800345c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003460:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8003464:	e9c7 3464 	strd	r3, r4, [r7, #400]	@ 0x190
      this->pitch = u_pitch.real;
 8003468:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 800346c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003470:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->pitch);
 8003474:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003478:	3308      	adds	r3, #8
 800347a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
      union {
        double real;
        uint64_t base;
      } u_yaw;
      u_yaw.base = 0;
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	e9c7 2362 	strd	r2, r3, [r7, #392]	@ 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800348a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800348e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 8003492:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003496:	4413      	add	r3, r2
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2200      	movs	r2, #0
 800349e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034a2:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80034a6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80034aa:	4623      	mov	r3, r4
 80034ac:	4303      	orrs	r3, r0
 80034ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034b0:	462b      	mov	r3, r5
 80034b2:	430b      	orrs	r3, r1
 80034b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034b6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 80034ba:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034be:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80034c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80034cc:	4413      	add	r3, r2
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2200      	movs	r2, #0
 80034d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80034d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80034e4:	464c      	mov	r4, r9
 80034e6:	0223      	lsls	r3, r4, #8
 80034e8:	4644      	mov	r4, r8
 80034ea:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034ee:	4644      	mov	r4, r8
 80034f0:	0222      	lsls	r2, r4, #8
 80034f2:	ea40 0402 	orr.w	r4, r0, r2
 80034f6:	66bc      	str	r4, [r7, #104]	@ 0x68
 80034f8:	430b      	orrs	r3, r1
 80034fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034fc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8003500:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003504:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003508:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800350c:	1c9a      	adds	r2, r3, #2
 800350e:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003512:	4413      	add	r3, r2
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2200      	movs	r2, #0
 800351a:	663b      	str	r3, [r7, #96]	@ 0x60
 800351c:	667a      	str	r2, [r7, #100]	@ 0x64
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800352a:	464c      	mov	r4, r9
 800352c:	0423      	lsls	r3, r4, #16
 800352e:	4644      	mov	r4, r8
 8003530:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003534:	4644      	mov	r4, r8
 8003536:	0422      	lsls	r2, r4, #16
 8003538:	ea40 0402 	orr.w	r4, r0, r2
 800353c:	65bc      	str	r4, [r7, #88]	@ 0x58
 800353e:	430b      	orrs	r3, r1
 8003540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003542:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8003546:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800354a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800354e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003552:	1cda      	adds	r2, r3, #3
 8003554:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003558:	4413      	add	r3, r2
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2200      	movs	r2, #0
 8003560:	653b      	str	r3, [r7, #80]	@ 0x50
 8003562:	657a      	str	r2, [r7, #84]	@ 0x54
 8003564:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003568:	4623      	mov	r3, r4
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800356e:	4623      	mov	r3, r4
 8003570:	061b      	lsls	r3, r3, #24
 8003572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003574:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003578:	4623      	mov	r3, r4
 800357a:	4303      	orrs	r3, r0
 800357c:	643b      	str	r3, [r7, #64]	@ 0x40
 800357e:	462b      	mov	r3, r5
 8003580:	430b      	orrs	r3, r1
 8003582:	647b      	str	r3, [r7, #68]	@ 0x44
 8003584:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8003588:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800358c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003590:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003594:	1d1a      	adds	r2, r3, #4
 8003596:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2200      	movs	r2, #0
 80035a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80035b0:	0023      	movs	r3, r4
 80035b2:	2200      	movs	r2, #0
 80035b4:	ea40 0402 	orr.w	r4, r0, r2
 80035b8:	633c      	str	r4, [r7, #48]	@ 0x30
 80035ba:	430b      	orrs	r3, r1
 80035bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035be:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80035c2:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80035c6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 80035ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80035ce:	1d5a      	adds	r2, r3, #5
 80035d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80035d4:	4413      	add	r3, r2
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2200      	movs	r2, #0
 80035dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 80035ea:	0223      	lsls	r3, r4, #8
 80035ec:	2200      	movs	r2, #0
 80035ee:	ea40 0402 	orr.w	r4, r0, r2
 80035f2:	623c      	str	r4, [r7, #32]
 80035f4:	430b      	orrs	r3, r1
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80035fc:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003600:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 8003604:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003608:	3306      	adds	r3, #6
 800360a:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 800360e:	4413      	add	r3, r2
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2200      	movs	r2, #0
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	61fa      	str	r2, [r7, #28]
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	69bc      	ldr	r4, [r7, #24]
 8003624:	0423      	lsls	r3, r4, #16
 8003626:	2200      	movs	r2, #0
 8003628:	ea40 0402 	orr.w	r4, r0, r2
 800362c:	613c      	str	r4, [r7, #16]
 800362e:	430b      	orrs	r3, r1
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003636:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800363a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	@ 0x188
 800363e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003642:	3307      	adds	r3, #7
 8003644:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8003648:	4413      	add	r3, r2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2200      	movs	r2, #0
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	60fa      	str	r2, [r7, #12]
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	68bc      	ldr	r4, [r7, #8]
 800365e:	0623      	lsls	r3, r4, #24
 8003660:	2200      	movs	r2, #0
 8003662:	ea40 0402 	orr.w	r4, r0, r2
 8003666:	603c      	str	r4, [r7, #0]
 8003668:	430b      	orrs	r3, r1
 800366a:	607b      	str	r3, [r7, #4]
 800366c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003670:	e9c7 3462 	strd	r3, r4, [r7, #392]	@ 0x188
      this->yaw = u_yaw.real;
 8003674:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 8003678:	f8d7 1184 	ldr.w	r1, [r7, #388]	@ 0x184
 800367c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->yaw);
 8003680:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003684:	3308      	adds	r3, #8
 8003686:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
     return offset;
 800368a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
    }
 800368e:	4618      	mov	r0, r3
 8003690:	f507 77d6 	add.w	r7, r7, #428	@ 0x1ac
 8003694:	46bd      	mov	sp, r7
 8003696:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800369a:	4770      	bx	lr

0800369c <_ZN9ired_msgs3IMU7getTypeEv>:

    virtual const char * getType() override { return "ired_msgs/IMU"; };
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4b03      	ldr	r3, [pc, #12]	@ (80036b4 <_ZN9ired_msgs3IMU7getTypeEv+0x18>)
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	08012e28 	.word	0x08012e28

080036b8 <_ZN9ired_msgs3IMU6getMD5Ev>:
    virtual const char * getMD5() override { return "eeec8b25a660789a89540dedcb2b06d6"; };
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	4b03      	ldr	r3, [pc, #12]	@ (80036d0 <_ZN9ired_msgs3IMU6getMD5Ev+0x18>)
 80036c2:	4618      	mov	r0, r3
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	08012e38 	.word	0x08012e38

080036d4 <_ZN9ired_msgs5MotorC1Ev>:
      double pid_motor_front_left[3];
      double pid_motor_front_right[3];
      double pid_motor_rear_left[3];
      double pid_motor_rear_right[3];

    Motor():
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
      speed_sp(),
      speed_fb(),
      pid_motor_front_left(),
      pid_motor_front_right(),
      pid_motor_rear_left(),
      pid_motor_rear_right()
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fda8 	bl	8001234 <_ZN3ros3MsgC1Ev>
 80036e4:	4a30      	ldr	r2, [pc, #192]	@ (80037a8 <_ZN9ired_msgs5MotorC1Ev+0xd4>)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	601a      	str	r2, [r3, #0]
      speed_sp(),
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f103 0208 	add.w	r2, r3, #8
 80036f0:	2303      	movs	r3, #3
 80036f2:	e007      	b.n	8003704 <_ZN9ired_msgs5MotorC1Ev+0x30>
 80036f4:	f04f 0000 	mov.w	r0, #0
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	e9c2 0100 	strd	r0, r1, [r2]
 8003700:	3b01      	subs	r3, #1
 8003702:	3208      	adds	r2, #8
 8003704:	2b00      	cmp	r3, #0
 8003706:	daf5      	bge.n	80036f4 <_ZN9ired_msgs5MotorC1Ev+0x20>
      speed_fb(),
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800370e:	2303      	movs	r3, #3
 8003710:	e007      	b.n	8003722 <_ZN9ired_msgs5MotorC1Ev+0x4e>
 8003712:	f04f 0000 	mov.w	r0, #0
 8003716:	f04f 0100 	mov.w	r1, #0
 800371a:	e9c2 0100 	strd	r0, r1, [r2]
 800371e:	3b01      	subs	r3, #1
 8003720:	3208      	adds	r2, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	daf5      	bge.n	8003712 <_ZN9ired_msgs5MotorC1Ev+0x3e>
      pid_motor_front_left(),
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800372c:	2302      	movs	r3, #2
 800372e:	e007      	b.n	8003740 <_ZN9ired_msgs5MotorC1Ev+0x6c>
 8003730:	f04f 0000 	mov.w	r0, #0
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	e9c2 0100 	strd	r0, r1, [r2]
 800373c:	3b01      	subs	r3, #1
 800373e:	3208      	adds	r2, #8
 8003740:	2b00      	cmp	r3, #0
 8003742:	daf5      	bge.n	8003730 <_ZN9ired_msgs5MotorC1Ev+0x5c>
      pid_motor_front_right(),
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 800374a:	2302      	movs	r3, #2
 800374c:	e007      	b.n	800375e <_ZN9ired_msgs5MotorC1Ev+0x8a>
 800374e:	f04f 0000 	mov.w	r0, #0
 8003752:	f04f 0100 	mov.w	r1, #0
 8003756:	e9c2 0100 	strd	r0, r1, [r2]
 800375a:	3b01      	subs	r3, #1
 800375c:	3208      	adds	r2, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	daf5      	bge.n	800374e <_ZN9ired_msgs5MotorC1Ev+0x7a>
      pid_motor_rear_left(),
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f103 0278 	add.w	r2, r3, #120	@ 0x78
 8003768:	2302      	movs	r3, #2
 800376a:	e007      	b.n	800377c <_ZN9ired_msgs5MotorC1Ev+0xa8>
 800376c:	f04f 0000 	mov.w	r0, #0
 8003770:	f04f 0100 	mov.w	r1, #0
 8003774:	e9c2 0100 	strd	r0, r1, [r2]
 8003778:	3b01      	subs	r3, #1
 800377a:	3208      	adds	r2, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	daf5      	bge.n	800376c <_ZN9ired_msgs5MotorC1Ev+0x98>
      pid_motor_rear_right()
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f103 0290 	add.w	r2, r3, #144	@ 0x90
 8003786:	2302      	movs	r3, #2
 8003788:	e007      	b.n	800379a <_ZN9ired_msgs5MotorC1Ev+0xc6>
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	e9c2 0100 	strd	r0, r1, [r2]
 8003796:	3b01      	subs	r3, #1
 8003798:	3208      	adds	r2, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	daf5      	bge.n	800378a <_ZN9ired_msgs5MotorC1Ev+0xb6>
    {
    }
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4618      	mov	r0, r3
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	08012ff0 	.word	0x08012ff0

080037ac <_ZNK9ired_msgs5Motor9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80037ac:	b480      	push	{r7}
 80037ae:	b097      	sub	sp, #92	@ 0x5c
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	657b      	str	r3, [r7, #84]	@ 0x54
      for( uint32_t i = 0; i < 4; i++){
 80037ba:	2300      	movs	r3, #0
 80037bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80037be:	e07d      	b.n	80038bc <_ZNK9ired_msgs5Motor9serializeEPh+0x110>
      union {
        double real;
        uint64_t base;
      } u_speed_spi;
      u_speed_spi.real = this->speed_sp[i];
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037c4:	3301      	adds	r3, #1
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
      *(outbuffer + offset + 0) = (u_speed_spi.base >> (8 * 0)) & 0xFF;
 80037d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80037d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037d8:	6838      	ldr	r0, [r7, #0]
 80037da:	4401      	add	r1, r0
 80037dc:	b2d3      	uxtb	r3, r2
 80037de:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_speed_spi.base >> (8 * 1)) & 0xFF;
 80037e0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80037e4:	f04f 0200 	mov.w	r2, #0
 80037e8:	f04f 0300 	mov.w	r3, #0
 80037ec:	0a02      	lsrs	r2, r0, #8
 80037ee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80037f2:	0a0b      	lsrs	r3, r1, #8
 80037f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037f6:	3101      	adds	r1, #1
 80037f8:	6838      	ldr	r0, [r7, #0]
 80037fa:	4401      	add	r1, r0
 80037fc:	b2d3      	uxtb	r3, r2
 80037fe:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_speed_spi.base >> (8 * 2)) & 0xFF;
 8003800:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	0c02      	lsrs	r2, r0, #16
 800380e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003812:	0c0b      	lsrs	r3, r1, #16
 8003814:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003816:	3102      	adds	r1, #2
 8003818:	6838      	ldr	r0, [r7, #0]
 800381a:	4401      	add	r1, r0
 800381c:	b2d3      	uxtb	r3, r2
 800381e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_speed_spi.base >> (8 * 3)) & 0xFF;
 8003820:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003824:	f04f 0200 	mov.w	r2, #0
 8003828:	f04f 0300 	mov.w	r3, #0
 800382c:	0e02      	lsrs	r2, r0, #24
 800382e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003832:	0e0b      	lsrs	r3, r1, #24
 8003834:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003836:	3103      	adds	r1, #3
 8003838:	6838      	ldr	r0, [r7, #0]
 800383a:	4401      	add	r1, r0
 800383c:	b2d3      	uxtb	r3, r2
 800383e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_speed_spi.base >> (8 * 4)) & 0xFF;
 8003840:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	f04f 0300 	mov.w	r3, #0
 800384c:	000a      	movs	r2, r1
 800384e:	2300      	movs	r3, #0
 8003850:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003852:	3104      	adds	r1, #4
 8003854:	6838      	ldr	r0, [r7, #0]
 8003856:	4401      	add	r1, r0
 8003858:	b2d3      	uxtb	r3, r2
 800385a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_speed_spi.base >> (8 * 5)) & 0xFF;
 800385c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	f04f 0300 	mov.w	r3, #0
 8003868:	0a0a      	lsrs	r2, r1, #8
 800386a:	2300      	movs	r3, #0
 800386c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800386e:	3105      	adds	r1, #5
 8003870:	6838      	ldr	r0, [r7, #0]
 8003872:	4401      	add	r1, r0
 8003874:	b2d3      	uxtb	r3, r2
 8003876:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_speed_spi.base >> (8 * 6)) & 0xFF;
 8003878:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	0c0a      	lsrs	r2, r1, #16
 8003886:	2300      	movs	r3, #0
 8003888:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800388a:	3106      	adds	r1, #6
 800388c:	6838      	ldr	r0, [r7, #0]
 800388e:	4401      	add	r1, r0
 8003890:	b2d3      	uxtb	r3, r2
 8003892:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_speed_spi.base >> (8 * 7)) & 0xFF;
 8003894:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8003898:	f04f 0200 	mov.w	r2, #0
 800389c:	f04f 0300 	mov.w	r3, #0
 80038a0:	0e0a      	lsrs	r2, r1, #24
 80038a2:	2300      	movs	r3, #0
 80038a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038a6:	3107      	adds	r1, #7
 80038a8:	6838      	ldr	r0, [r7, #0]
 80038aa:	4401      	add	r1, r0
 80038ac:	b2d3      	uxtb	r3, r2
 80038ae:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->speed_sp[i]);
 80038b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038b2:	3308      	adds	r3, #8
 80038b4:	657b      	str	r3, [r7, #84]	@ 0x54
      for( uint32_t i = 0; i < 4; i++){
 80038b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038b8:	3301      	adds	r3, #1
 80038ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80038bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038be:	2b03      	cmp	r3, #3
 80038c0:	f67f af7e 	bls.w	80037c0 <_ZNK9ired_msgs5Motor9serializeEPh+0x14>
      }
      for( uint32_t i = 0; i < 4; i++){
 80038c4:	2300      	movs	r3, #0
 80038c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038c8:	e07d      	b.n	80039c6 <_ZNK9ired_msgs5Motor9serializeEPh+0x21a>
      union {
        double real;
        uint64_t base;
      } u_speed_fbi;
      u_speed_fbi.real = this->speed_fb[i];
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ce:	3305      	adds	r3, #5
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
      *(outbuffer + offset + 0) = (u_speed_fbi.base >> (8 * 0)) & 0xFF;
 80038dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038e2:	6838      	ldr	r0, [r7, #0]
 80038e4:	4401      	add	r1, r0
 80038e6:	b2d3      	uxtb	r3, r2
 80038e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_speed_fbi.base >> (8 * 1)) & 0xFF;
 80038ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	0a02      	lsrs	r2, r0, #8
 80038f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80038fc:	0a0b      	lsrs	r3, r1, #8
 80038fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003900:	3101      	adds	r1, #1
 8003902:	6838      	ldr	r0, [r7, #0]
 8003904:	4401      	add	r1, r0
 8003906:	b2d3      	uxtb	r3, r2
 8003908:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_speed_fbi.base >> (8 * 2)) & 0xFF;
 800390a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	0c02      	lsrs	r2, r0, #16
 8003918:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800391c:	0c0b      	lsrs	r3, r1, #16
 800391e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003920:	3102      	adds	r1, #2
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	4401      	add	r1, r0
 8003926:	b2d3      	uxtb	r3, r2
 8003928:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_speed_fbi.base >> (8 * 3)) & 0xFF;
 800392a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	f04f 0300 	mov.w	r3, #0
 8003936:	0e02      	lsrs	r2, r0, #24
 8003938:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800393c:	0e0b      	lsrs	r3, r1, #24
 800393e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003940:	3103      	adds	r1, #3
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	4401      	add	r1, r0
 8003946:	b2d3      	uxtb	r3, r2
 8003948:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_speed_fbi.base >> (8 * 4)) & 0xFF;
 800394a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	000a      	movs	r2, r1
 8003958:	2300      	movs	r3, #0
 800395a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800395c:	3104      	adds	r1, #4
 800395e:	6838      	ldr	r0, [r7, #0]
 8003960:	4401      	add	r1, r0
 8003962:	b2d3      	uxtb	r3, r2
 8003964:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_speed_fbi.base >> (8 * 5)) & 0xFF;
 8003966:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	0a0a      	lsrs	r2, r1, #8
 8003974:	2300      	movs	r3, #0
 8003976:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003978:	3105      	adds	r1, #5
 800397a:	6838      	ldr	r0, [r7, #0]
 800397c:	4401      	add	r1, r0
 800397e:	b2d3      	uxtb	r3, r2
 8003980:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_speed_fbi.base >> (8 * 6)) & 0xFF;
 8003982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	0c0a      	lsrs	r2, r1, #16
 8003990:	2300      	movs	r3, #0
 8003992:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003994:	3106      	adds	r1, #6
 8003996:	6838      	ldr	r0, [r7, #0]
 8003998:	4401      	add	r1, r0
 800399a:	b2d3      	uxtb	r3, r2
 800399c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_speed_fbi.base >> (8 * 7)) & 0xFF;
 800399e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	f04f 0300 	mov.w	r3, #0
 80039aa:	0e0a      	lsrs	r2, r1, #24
 80039ac:	2300      	movs	r3, #0
 80039ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039b0:	3107      	adds	r1, #7
 80039b2:	6838      	ldr	r0, [r7, #0]
 80039b4:	4401      	add	r1, r0
 80039b6:	b2d3      	uxtb	r3, r2
 80039b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->speed_fb[i]);
 80039ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039bc:	3308      	adds	r3, #8
 80039be:	657b      	str	r3, [r7, #84]	@ 0x54
      for( uint32_t i = 0; i < 4; i++){
 80039c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c2:	3301      	adds	r3, #1
 80039c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	f67f af7e 	bls.w	80038ca <_ZNK9ired_msgs5Motor9serializeEPh+0x11e>
      }
      for( uint32_t i = 0; i < 3; i++){
 80039ce:	2300      	movs	r3, #0
 80039d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039d2:	e07d      	b.n	8003ad0 <_ZNK9ired_msgs5Motor9serializeEPh+0x324>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_front_lefti;
      u_pid_motor_front_lefti.real = this->pid_motor_front_left[i];
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d8:	3309      	adds	r3, #9
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4413      	add	r3, r2
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_pid_motor_front_lefti.base >> (8 * 0)) & 0xFF;
 80039e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039ec:	6838      	ldr	r0, [r7, #0]
 80039ee:	4401      	add	r1, r0
 80039f0:	b2d3      	uxtb	r3, r2
 80039f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pid_motor_front_lefti.base >> (8 * 1)) & 0xFF;
 80039f4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	f04f 0300 	mov.w	r3, #0
 8003a00:	0a02      	lsrs	r2, r0, #8
 8003a02:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003a06:	0a0b      	lsrs	r3, r1, #8
 8003a08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a0a:	3101      	adds	r1, #1
 8003a0c:	6838      	ldr	r0, [r7, #0]
 8003a0e:	4401      	add	r1, r0
 8003a10:	b2d3      	uxtb	r3, r2
 8003a12:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pid_motor_front_lefti.base >> (8 * 2)) & 0xFF;
 8003a14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	0c02      	lsrs	r2, r0, #16
 8003a22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a26:	0c0b      	lsrs	r3, r1, #16
 8003a28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a2a:	3102      	adds	r1, #2
 8003a2c:	6838      	ldr	r0, [r7, #0]
 8003a2e:	4401      	add	r1, r0
 8003a30:	b2d3      	uxtb	r3, r2
 8003a32:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pid_motor_front_lefti.base >> (8 * 3)) & 0xFF;
 8003a34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	0e02      	lsrs	r2, r0, #24
 8003a42:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a46:	0e0b      	lsrs	r3, r1, #24
 8003a48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a4a:	3103      	adds	r1, #3
 8003a4c:	6838      	ldr	r0, [r7, #0]
 8003a4e:	4401      	add	r1, r0
 8003a50:	b2d3      	uxtb	r3, r2
 8003a52:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pid_motor_front_lefti.base >> (8 * 4)) & 0xFF;
 8003a54:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	000a      	movs	r2, r1
 8003a62:	2300      	movs	r3, #0
 8003a64:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a66:	3104      	adds	r1, #4
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	4401      	add	r1, r0
 8003a6c:	b2d3      	uxtb	r3, r2
 8003a6e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pid_motor_front_lefti.base >> (8 * 5)) & 0xFF;
 8003a70:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	0a0a      	lsrs	r2, r1, #8
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a82:	3105      	adds	r1, #5
 8003a84:	6838      	ldr	r0, [r7, #0]
 8003a86:	4401      	add	r1, r0
 8003a88:	b2d3      	uxtb	r3, r2
 8003a8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pid_motor_front_lefti.base >> (8 * 6)) & 0xFF;
 8003a8c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	0c0a      	lsrs	r2, r1, #16
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a9e:	3106      	adds	r1, #6
 8003aa0:	6838      	ldr	r0, [r7, #0]
 8003aa2:	4401      	add	r1, r0
 8003aa4:	b2d3      	uxtb	r3, r2
 8003aa6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pid_motor_front_lefti.base >> (8 * 7)) & 0xFF;
 8003aa8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	0e0a      	lsrs	r2, r1, #24
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aba:	3107      	adds	r1, #7
 8003abc:	6838      	ldr	r0, [r7, #0]
 8003abe:	4401      	add	r1, r0
 8003ac0:	b2d3      	uxtb	r3, r2
 8003ac2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pid_motor_front_left[i]);
 8003ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	657b      	str	r3, [r7, #84]	@ 0x54
      for( uint32_t i = 0; i < 3; i++){
 8003aca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003acc:	3301      	adds	r3, #1
 8003ace:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	f67f af7e 	bls.w	80039d4 <_ZNK9ired_msgs5Motor9serializeEPh+0x228>
      }
      for( uint32_t i = 0; i < 3; i++){
 8003ad8:	2300      	movs	r3, #0
 8003ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8003adc:	e07d      	b.n	8003bda <_ZNK9ired_msgs5Motor9serializeEPh+0x42e>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_front_righti;
      u_pid_motor_front_righti.real = this->pid_motor_front_right[i];
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aec:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_pid_motor_front_righti.base >> (8 * 0)) & 0xFF;
 8003af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003af4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003af6:	6838      	ldr	r0, [r7, #0]
 8003af8:	4401      	add	r1, r0
 8003afa:	b2d3      	uxtb	r3, r2
 8003afc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pid_motor_front_righti.base >> (8 * 1)) & 0xFF;
 8003afe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	0a02      	lsrs	r2, r0, #8
 8003b0c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003b10:	0a0b      	lsrs	r3, r1, #8
 8003b12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b14:	3101      	adds	r1, #1
 8003b16:	6838      	ldr	r0, [r7, #0]
 8003b18:	4401      	add	r1, r0
 8003b1a:	b2d3      	uxtb	r3, r2
 8003b1c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pid_motor_front_righti.base >> (8 * 2)) & 0xFF;
 8003b1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	0c02      	lsrs	r2, r0, #16
 8003b2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b30:	0c0b      	lsrs	r3, r1, #16
 8003b32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b34:	3102      	adds	r1, #2
 8003b36:	6838      	ldr	r0, [r7, #0]
 8003b38:	4401      	add	r1, r0
 8003b3a:	b2d3      	uxtb	r3, r2
 8003b3c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pid_motor_front_righti.base >> (8 * 3)) & 0xFF;
 8003b3e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	0e02      	lsrs	r2, r0, #24
 8003b4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b50:	0e0b      	lsrs	r3, r1, #24
 8003b52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b54:	3103      	adds	r1, #3
 8003b56:	6838      	ldr	r0, [r7, #0]
 8003b58:	4401      	add	r1, r0
 8003b5a:	b2d3      	uxtb	r3, r2
 8003b5c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pid_motor_front_righti.base >> (8 * 4)) & 0xFF;
 8003b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	000a      	movs	r2, r1
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b70:	3104      	adds	r1, #4
 8003b72:	6838      	ldr	r0, [r7, #0]
 8003b74:	4401      	add	r1, r0
 8003b76:	b2d3      	uxtb	r3, r2
 8003b78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pid_motor_front_righti.base >> (8 * 5)) & 0xFF;
 8003b7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	0a0a      	lsrs	r2, r1, #8
 8003b88:	2300      	movs	r3, #0
 8003b8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b8c:	3105      	adds	r1, #5
 8003b8e:	6838      	ldr	r0, [r7, #0]
 8003b90:	4401      	add	r1, r0
 8003b92:	b2d3      	uxtb	r3, r2
 8003b94:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pid_motor_front_righti.base >> (8 * 6)) & 0xFF;
 8003b96:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b9a:	f04f 0200 	mov.w	r2, #0
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	0c0a      	lsrs	r2, r1, #16
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ba8:	3106      	adds	r1, #6
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	4401      	add	r1, r0
 8003bae:	b2d3      	uxtb	r3, r2
 8003bb0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pid_motor_front_righti.base >> (8 * 7)) & 0xFF;
 8003bb2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bb6:	f04f 0200 	mov.w	r2, #0
 8003bba:	f04f 0300 	mov.w	r3, #0
 8003bbe:	0e0a      	lsrs	r2, r1, #24
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003bc4:	3107      	adds	r1, #7
 8003bc6:	6838      	ldr	r0, [r7, #0]
 8003bc8:	4401      	add	r1, r0
 8003bca:	b2d3      	uxtb	r3, r2
 8003bcc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pid_motor_front_right[i]);
 8003bce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	657b      	str	r3, [r7, #84]	@ 0x54
      for( uint32_t i = 0; i < 3; i++){
 8003bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	f67f af7e 	bls.w	8003ade <_ZNK9ired_msgs5Motor9serializeEPh+0x332>
      }
      for( uint32_t i = 0; i < 3; i++){
 8003be2:	2300      	movs	r3, #0
 8003be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003be6:	e07d      	b.n	8003ce4 <_ZNK9ired_msgs5Motor9serializeEPh+0x538>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_rear_lefti;
      u_pid_motor_rear_lefti.real = this->pid_motor_rear_left[i];
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bec:	330f      	adds	r3, #15
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_pid_motor_rear_lefti.base >> (8 * 0)) & 0xFF;
 8003bfa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bfe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c00:	6838      	ldr	r0, [r7, #0]
 8003c02:	4401      	add	r1, r0
 8003c04:	b2d3      	uxtb	r3, r2
 8003c06:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pid_motor_rear_lefti.base >> (8 * 1)) & 0xFF;
 8003c08:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	0a02      	lsrs	r2, r0, #8
 8003c16:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c1a:	0a0b      	lsrs	r3, r1, #8
 8003c1c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c1e:	3101      	adds	r1, #1
 8003c20:	6838      	ldr	r0, [r7, #0]
 8003c22:	4401      	add	r1, r0
 8003c24:	b2d3      	uxtb	r3, r2
 8003c26:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pid_motor_rear_lefti.base >> (8 * 2)) & 0xFF;
 8003c28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	0c02      	lsrs	r2, r0, #16
 8003c36:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c3a:	0c0b      	lsrs	r3, r1, #16
 8003c3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c3e:	3102      	adds	r1, #2
 8003c40:	6838      	ldr	r0, [r7, #0]
 8003c42:	4401      	add	r1, r0
 8003c44:	b2d3      	uxtb	r3, r2
 8003c46:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pid_motor_rear_lefti.base >> (8 * 3)) & 0xFF;
 8003c48:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	0e02      	lsrs	r2, r0, #24
 8003c56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003c5a:	0e0b      	lsrs	r3, r1, #24
 8003c5c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c5e:	3103      	adds	r1, #3
 8003c60:	6838      	ldr	r0, [r7, #0]
 8003c62:	4401      	add	r1, r0
 8003c64:	b2d3      	uxtb	r3, r2
 8003c66:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pid_motor_rear_lefti.base >> (8 * 4)) & 0xFF;
 8003c68:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	000a      	movs	r2, r1
 8003c76:	2300      	movs	r3, #0
 8003c78:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c7a:	3104      	adds	r1, #4
 8003c7c:	6838      	ldr	r0, [r7, #0]
 8003c7e:	4401      	add	r1, r0
 8003c80:	b2d3      	uxtb	r3, r2
 8003c82:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pid_motor_rear_lefti.base >> (8 * 5)) & 0xFF;
 8003c84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	0a0a      	lsrs	r2, r1, #8
 8003c92:	2300      	movs	r3, #0
 8003c94:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c96:	3105      	adds	r1, #5
 8003c98:	6838      	ldr	r0, [r7, #0]
 8003c9a:	4401      	add	r1, r0
 8003c9c:	b2d3      	uxtb	r3, r2
 8003c9e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pid_motor_rear_lefti.base >> (8 * 6)) & 0xFF;
 8003ca0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	0c0a      	lsrs	r2, r1, #16
 8003cae:	2300      	movs	r3, #0
 8003cb0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cb2:	3106      	adds	r1, #6
 8003cb4:	6838      	ldr	r0, [r7, #0]
 8003cb6:	4401      	add	r1, r0
 8003cb8:	b2d3      	uxtb	r3, r2
 8003cba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pid_motor_rear_lefti.base >> (8 * 7)) & 0xFF;
 8003cbc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	0e0a      	lsrs	r2, r1, #24
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cce:	3107      	adds	r1, #7
 8003cd0:	6838      	ldr	r0, [r7, #0]
 8003cd2:	4401      	add	r1, r0
 8003cd4:	b2d3      	uxtb	r3, r2
 8003cd6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pid_motor_rear_left[i]);
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cda:	3308      	adds	r3, #8
 8003cdc:	657b      	str	r3, [r7, #84]	@ 0x54
      for( uint32_t i = 0; i < 3; i++){
 8003cde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ce4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	f67f af7e 	bls.w	8003be8 <_ZNK9ired_msgs5Motor9serializeEPh+0x43c>
      }
      for( uint32_t i = 0; i < 3; i++){
 8003cec:	2300      	movs	r3, #0
 8003cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cf0:	e07d      	b.n	8003dee <_ZNK9ired_msgs5Motor9serializeEPh+0x642>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_rear_righti;
      u_pid_motor_rear_righti.real = this->pid_motor_rear_right[i];
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cf6:	3312      	adds	r3, #18
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_pid_motor_rear_righti.base >> (8 * 0)) & 0xFF;
 8003d04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d0a:	6838      	ldr	r0, [r7, #0]
 8003d0c:	4401      	add	r1, r0
 8003d0e:	b2d3      	uxtb	r3, r2
 8003d10:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pid_motor_rear_righti.base >> (8 * 1)) & 0xFF;
 8003d12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	0a02      	lsrs	r2, r0, #8
 8003d20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003d24:	0a0b      	lsrs	r3, r1, #8
 8003d26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d28:	3101      	adds	r1, #1
 8003d2a:	6838      	ldr	r0, [r7, #0]
 8003d2c:	4401      	add	r1, r0
 8003d2e:	b2d3      	uxtb	r3, r2
 8003d30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pid_motor_rear_righti.base >> (8 * 2)) & 0xFF;
 8003d32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	0c02      	lsrs	r2, r0, #16
 8003d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003d44:	0c0b      	lsrs	r3, r1, #16
 8003d46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d48:	3102      	adds	r1, #2
 8003d4a:	6838      	ldr	r0, [r7, #0]
 8003d4c:	4401      	add	r1, r0
 8003d4e:	b2d3      	uxtb	r3, r2
 8003d50:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pid_motor_rear_righti.base >> (8 * 3)) & 0xFF;
 8003d52:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	0e02      	lsrs	r2, r0, #24
 8003d60:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d64:	0e0b      	lsrs	r3, r1, #24
 8003d66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d68:	3103      	adds	r1, #3
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	4401      	add	r1, r0
 8003d6e:	b2d3      	uxtb	r3, r2
 8003d70:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pid_motor_rear_righti.base >> (8 * 4)) & 0xFF;
 8003d72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	000a      	movs	r2, r1
 8003d80:	2300      	movs	r3, #0
 8003d82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d84:	3104      	adds	r1, #4
 8003d86:	6838      	ldr	r0, [r7, #0]
 8003d88:	4401      	add	r1, r0
 8003d8a:	b2d3      	uxtb	r3, r2
 8003d8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pid_motor_rear_righti.base >> (8 * 5)) & 0xFF;
 8003d8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	0a0a      	lsrs	r2, r1, #8
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003da0:	3105      	adds	r1, #5
 8003da2:	6838      	ldr	r0, [r7, #0]
 8003da4:	4401      	add	r1, r0
 8003da6:	b2d3      	uxtb	r3, r2
 8003da8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pid_motor_rear_righti.base >> (8 * 6)) & 0xFF;
 8003daa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	0c0a      	lsrs	r2, r1, #16
 8003db8:	2300      	movs	r3, #0
 8003dba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dbc:	3106      	adds	r1, #6
 8003dbe:	6838      	ldr	r0, [r7, #0]
 8003dc0:	4401      	add	r1, r0
 8003dc2:	b2d3      	uxtb	r3, r2
 8003dc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pid_motor_rear_righti.base >> (8 * 7)) & 0xFF;
 8003dc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dca:	f04f 0200 	mov.w	r2, #0
 8003dce:	f04f 0300 	mov.w	r3, #0
 8003dd2:	0e0a      	lsrs	r2, r1, #24
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003dd8:	3107      	adds	r1, #7
 8003dda:	6838      	ldr	r0, [r7, #0]
 8003ddc:	4401      	add	r1, r0
 8003dde:	b2d3      	uxtb	r3, r2
 8003de0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pid_motor_rear_right[i]);
 8003de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003de4:	3308      	adds	r3, #8
 8003de6:	657b      	str	r3, [r7, #84]	@ 0x54
      for( uint32_t i = 0; i < 3; i++){
 8003de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dea:	3301      	adds	r3, #1
 8003dec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	f67f af7e 	bls.w	8003cf2 <_ZNK9ired_msgs5Motor9serializeEPh+0x546>
      }
      return offset;
 8003df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
    }
 8003df8:	4618      	mov	r0, r3
 8003dfa:	375c      	adds	r7, #92	@ 0x5c
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_ZN9ired_msgs5Motor11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003e04:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e08:	f5ad 7d5c 	sub.w	sp, sp, #880	@ 0x370
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	f8c7 031c 	str.w	r0, [r7, #796]	@ 0x31c
 8003e12:	f8c7 1318 	str.w	r1, [r7, #792]	@ 0x318
    {
      int offset = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
      for( uint32_t i = 0; i < 4; i++){
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 8003e22:	e124      	b.n	800406e <_ZN9ired_msgs5Motor11deserializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_speed_spi;
      u_speed_spi.base = 0;
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e30:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003e34:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8003e38:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003e3c:	4413      	add	r3, r2
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2200      	movs	r2, #0
 8003e44:	f8c7 3308 	str.w	r3, [r7, #776]	@ 0x308
 8003e48:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8003e4c:	f8d7 3308 	ldr.w	r3, [r7, #776]	@ 0x308
 8003e50:	4303      	orrs	r3, r0
 8003e52:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 8003e56:	f8d7 330c 	ldr.w	r3, [r7, #780]	@ 0x30c
 8003e5a:	430b      	orrs	r3, r1
 8003e5c:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8003e60:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8003e64:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e68:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003e6c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003e76:	4413      	add	r3, r2
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8003e82:	f8c7 2314 	str.w	r2, [r7, #788]	@ 0x314
 8003e86:	f04f 0200 	mov.w	r2, #0
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	f8d7 6314 	ldr.w	r6, [r7, #788]	@ 0x314
 8003e92:	0233      	lsls	r3, r6, #8
 8003e94:	f8d7 6310 	ldr.w	r6, [r7, #784]	@ 0x310
 8003e98:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8003e9c:	f8d7 6310 	ldr.w	r6, [r7, #784]	@ 0x310
 8003ea0:	0232      	lsls	r2, r6, #8
 8003ea2:	ea40 0602 	orr.w	r6, r0, r2
 8003ea6:	f8c7 62f0 	str.w	r6, [r7, #752]	@ 0x2f0
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8003eb0:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8003eb4:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003eb8:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003ebc:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8003ec0:	1c9a      	adds	r2, r3, #2
 8003ec2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003ec6:	4413      	add	r3, r2
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4698      	mov	r8, r3
 8003ed0:	4691      	mov	r9, r2
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003ede:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ee2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003ee6:	ea40 0602 	orr.w	r6, r0, r2
 8003eea:	f8c7 62e8 	str.w	r6, [r7, #744]	@ 0x2e8
 8003eee:	430b      	orrs	r3, r1
 8003ef0:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8003ef4:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8003ef8:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003efc:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003f00:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8003f04:	1cda      	adds	r2, r3, #3
 8003f06:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003f0a:	4413      	add	r3, r2
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2200      	movs	r2, #0
 8003f12:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8003f16:	f8c7 2304 	str.w	r2, [r7, #772]	@ 0x304
 8003f1a:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8003f1e:	0a1d      	lsrs	r5, r3, #8
 8003f20:	f8d7 3300 	ldr.w	r3, [r7, #768]	@ 0x300
 8003f24:	061c      	lsls	r4, r3, #24
 8003f26:	ea40 0304 	orr.w	r3, r0, r4
 8003f2a:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8003f2e:	ea41 0305 	orr.w	r3, r1, r5
 8003f32:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8003f36:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8003f3a:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003f3e:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003f42:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8003f46:	1d1a      	adds	r2, r3, #4
 8003f48:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003f4c:	4413      	add	r3, r2
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 32d8 	str.w	r3, [r7, #728]	@ 0x2d8
 8003f58:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	f8d7 62d8 	ldr.w	r6, [r7, #728]	@ 0x2d8
 8003f68:	0033      	movs	r3, r6
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	ea40 0602 	orr.w	r6, r0, r2
 8003f70:	f8c7 62d0 	str.w	r6, [r7, #720]	@ 0x2d0
 8003f74:	430b      	orrs	r3, r1
 8003f76:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8003f7a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	@ 0x2d0
 8003f7e:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f82:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003f86:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8003f8a:	1d5a      	adds	r2, r3, #5
 8003f8c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003f90:	4413      	add	r3, r2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8003f9c:	f8c7 22cc 	str.w	r2, [r7, #716]	@ 0x2cc
 8003fa0:	f04f 0200 	mov.w	r2, #0
 8003fa4:	f04f 0300 	mov.w	r3, #0
 8003fa8:	f8d7 62c8 	ldr.w	r6, [r7, #712]	@ 0x2c8
 8003fac:	0233      	lsls	r3, r6, #8
 8003fae:	2200      	movs	r2, #0
 8003fb0:	ea40 0602 	orr.w	r6, r0, r2
 8003fb4:	f8c7 62c0 	str.w	r6, [r7, #704]	@ 0x2c0
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8003fbe:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8003fc2:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003fc6:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8003fca:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8003fce:	1d9a      	adds	r2, r3, #6
 8003fd0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8003fd4:	4413      	add	r3, r2
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8003fe0:	f8c7 22bc 	str.w	r2, [r7, #700]	@ 0x2bc
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	f8d7 62b8 	ldr.w	r6, [r7, #696]	@ 0x2b8
 8003ff0:	0433      	lsls	r3, r6, #16
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	ea40 0602 	orr.w	r6, r0, r2
 8003ff8:	f8c7 62b0 	str.w	r6, [r7, #688]	@ 0x2b0
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8004002:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8004006:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800400a:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 800400e:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004012:	1dda      	adds	r2, r3, #7
 8004014:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004018:	4413      	add	r3, r2
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 32a8 	str.w	r3, [r7, #680]	@ 0x2a8
 8004024:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	f8d7 62a8 	ldr.w	r6, [r7, #680]	@ 0x2a8
 8004034:	0633      	lsls	r3, r6, #24
 8004036:	2200      	movs	r2, #0
 8004038:	ea40 0a02 	orr.w	sl, r0, r2
 800403c:	ea41 0b03 	orr.w	fp, r1, r3
 8004040:	e9c7 abd2 	strd	sl, fp, [r7, #840]	@ 0x348
      this->speed_sp[i] = u_speed_spi.real;
 8004044:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8004048:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 800404c:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8004050:	3301      	adds	r3, #1
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	4413      	add	r3, r2
 8004056:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->speed_sp[i]);
 800405a:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800405e:	3308      	adds	r3, #8
 8004060:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
      for( uint32_t i = 0; i < 4; i++){
 8004064:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8004068:	3301      	adds	r3, #1
 800406a:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 800406e:	f8d7 3368 	ldr.w	r3, [r7, #872]	@ 0x368
 8004072:	2b03      	cmp	r3, #3
 8004074:	f67f aed6 	bls.w	8003e24 <_ZN9ired_msgs5Motor11deserializeEPh+0x20>
      }
      for( uint32_t i = 0; i < 4; i++){
 8004078:	2300      	movs	r3, #0
 800407a:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800407e:	e133      	b.n	80042e8 <_ZN9ired_msgs5Motor11deserializeEPh+0x4e4>
      union {
        double real;
        uint64_t base;
      } u_speed_fbi;
      u_speed_fbi.base = 0;
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	e9c7 23d0 	strd	r2, r3, [r7, #832]	@ 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800408c:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8004090:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8004094:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004098:	4413      	add	r3, r2
 800409a:	781b      	ldrb	r3, [r3, #0]
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 80040a4:	f8c7 22a4 	str.w	r2, [r7, #676]	@ 0x2a4
 80040a8:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	@ 0x2a0
 80040ac:	4623      	mov	r3, r4
 80040ae:	4303      	orrs	r3, r0
 80040b0:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 80040b4:	462b      	mov	r3, r5
 80040b6:	430b      	orrs	r3, r1
 80040b8:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 80040bc:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	@ 0x298
 80040c0:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80040c4:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80040c8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80040cc:	1c5a      	adds	r2, r3, #1
 80040ce:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80040d2:	4413      	add	r3, r2
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2200      	movs	r2, #0
 80040da:	f8c7 3290 	str.w	r3, [r7, #656]	@ 0x290
 80040de:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	e9d7 56a4 	ldrd	r5, r6, [r7, #656]	@ 0x290
 80040ee:	4634      	mov	r4, r6
 80040f0:	0223      	lsls	r3, r4, #8
 80040f2:	462c      	mov	r4, r5
 80040f4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040f8:	462c      	mov	r4, r5
 80040fa:	0222      	lsls	r2, r4, #8
 80040fc:	ea40 0402 	orr.w	r4, r0, r2
 8004100:	f8c7 4288 	str.w	r4, [r7, #648]	@ 0x288
 8004104:	430b      	orrs	r3, r1
 8004106:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 800410a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	@ 0x288
 800410e:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004112:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8004116:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004120:	4413      	add	r3, r2
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 800412c:	f8c7 2284 	str.w	r2, [r7, #644]	@ 0x284
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	e9d7 56a0 	ldrd	r5, r6, [r7, #640]	@ 0x280
 800413c:	4634      	mov	r4, r6
 800413e:	0423      	lsls	r3, r4, #16
 8004140:	462c      	mov	r4, r5
 8004142:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004146:	462c      	mov	r4, r5
 8004148:	0422      	lsls	r2, r4, #16
 800414a:	ea40 0402 	orr.w	r4, r0, r2
 800414e:	f8c7 4278 	str.w	r4, [r7, #632]	@ 0x278
 8004152:	430b      	orrs	r3, r1
 8004154:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 8004158:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	@ 0x278
 800415c:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004160:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 8004164:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004168:	1cda      	adds	r2, r3, #3
 800416a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800416e:	4413      	add	r3, r2
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2200      	movs	r2, #0
 8004176:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 800417a:	f8c7 2274 	str.w	r2, [r7, #628]	@ 0x274
 800417e:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	@ 0x270
 8004182:	4623      	mov	r3, r4
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800418a:	4623      	mov	r3, r4
 800418c:	061b      	lsls	r3, r3, #24
 800418e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8004192:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	@ 0x268
 8004196:	4623      	mov	r3, r4
 8004198:	4303      	orrs	r3, r0
 800419a:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 800419e:	462b      	mov	r3, r5
 80041a0:	430b      	orrs	r3, r1
 80041a2:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 80041a6:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	@ 0x260
 80041aa:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80041ae:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80041b2:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80041b6:	1d1a      	adds	r2, r3, #4
 80041b8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80041bc:	4413      	add	r3, r2
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 80041c8:	f8c7 225c 	str.w	r2, [r7, #604]	@ 0x25c
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	f8d7 4258 	ldr.w	r4, [r7, #600]	@ 0x258
 80041d8:	0023      	movs	r3, r4
 80041da:	2200      	movs	r2, #0
 80041dc:	ea40 0402 	orr.w	r4, r0, r2
 80041e0:	f8c7 4250 	str.w	r4, [r7, #592]	@ 0x250
 80041e4:	430b      	orrs	r3, r1
 80041e6:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80041ea:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	@ 0x250
 80041ee:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80041f2:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80041f6:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80041fa:	1d5a      	adds	r2, r3, #5
 80041fc:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004200:	4413      	add	r3, r2
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2200      	movs	r2, #0
 8004208:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 800420c:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	f8d7 4248 	ldr.w	r4, [r7, #584]	@ 0x248
 800421c:	0223      	lsls	r3, r4, #8
 800421e:	2200      	movs	r2, #0
 8004220:	ea40 0402 	orr.w	r4, r0, r2
 8004224:	f8c7 4240 	str.w	r4, [r7, #576]	@ 0x240
 8004228:	430b      	orrs	r3, r1
 800422a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800422e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	@ 0x240
 8004232:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004236:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 800423a:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800423e:	1d9a      	adds	r2, r3, #6
 8004240:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004244:	4413      	add	r3, r2
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2200      	movs	r2, #0
 800424c:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 8004250:	f8c7 223c 	str.w	r2, [r7, #572]	@ 0x23c
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	f8d7 4238 	ldr.w	r4, [r7, #568]	@ 0x238
 8004260:	0423      	lsls	r3, r4, #16
 8004262:	2200      	movs	r2, #0
 8004264:	ea40 0402 	orr.w	r4, r0, r2
 8004268:	f8c7 4230 	str.w	r4, [r7, #560]	@ 0x230
 800426c:	430b      	orrs	r3, r1
 800426e:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 8004272:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	@ 0x230
 8004276:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800427a:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 800427e:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004282:	1dda      	adds	r2, r3, #7
 8004284:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004288:	4413      	add	r3, r2
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2200      	movs	r2, #0
 8004290:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8004294:	f8c7 222c 	str.w	r2, [r7, #556]	@ 0x22c
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	f8d7 4228 	ldr.w	r4, [r7, #552]	@ 0x228
 80042a4:	0623      	lsls	r3, r4, #24
 80042a6:	2200      	movs	r2, #0
 80042a8:	ea40 0402 	orr.w	r4, r0, r2
 80042ac:	f8c7 4220 	str.w	r4, [r7, #544]	@ 0x220
 80042b0:	430b      	orrs	r3, r1
 80042b2:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 80042b6:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	@ 0x220
 80042ba:	e9c7 34d0 	strd	r3, r4, [r7, #832]	@ 0x340
      this->speed_fb[i] = u_speed_fbi.real;
 80042be:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	@ 0x340
 80042c2:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 80042c6:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80042ca:	3305      	adds	r3, #5
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->speed_fb[i]);
 80042d4:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80042d8:	3308      	adds	r3, #8
 80042da:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
      for( uint32_t i = 0; i < 4; i++){
 80042de:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80042e2:	3301      	adds	r3, #1
 80042e4:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 80042e8:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	f67f aec7 	bls.w	8004080 <_ZN9ired_msgs5Motor11deserializeEPh+0x27c>
      }
      for( uint32_t i = 0; i < 3; i++){
 80042f2:	2300      	movs	r3, #0
 80042f4:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 80042f8:	e133      	b.n	8004562 <_ZN9ired_msgs5Motor11deserializeEPh+0x75e>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_front_lefti;
      u_pid_motor_front_lefti.base = 0;
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004306:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 800430a:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 800430e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004312:	4413      	add	r3, r2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2200      	movs	r2, #0
 800431a:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 800431e:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8004322:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	@ 0x218
 8004326:	4623      	mov	r3, r4
 8004328:	4303      	orrs	r3, r0
 800432a:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 800432e:	462b      	mov	r3, r5
 8004330:	430b      	orrs	r3, r1
 8004332:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8004336:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	@ 0x210
 800433a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800433e:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8004342:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800434c:	4413      	add	r3, r2
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 8004358:	f8c7 220c 	str.w	r2, [r7, #524]	@ 0x20c
 800435c:	f04f 0200 	mov.w	r2, #0
 8004360:	f04f 0300 	mov.w	r3, #0
 8004364:	e9d7 5682 	ldrd	r5, r6, [r7, #520]	@ 0x208
 8004368:	4634      	mov	r4, r6
 800436a:	0223      	lsls	r3, r4, #8
 800436c:	462c      	mov	r4, r5
 800436e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004372:	462c      	mov	r4, r5
 8004374:	0222      	lsls	r2, r4, #8
 8004376:	ea40 0402 	orr.w	r4, r0, r2
 800437a:	f8c7 4200 	str.w	r4, [r7, #512]	@ 0x200
 800437e:	430b      	orrs	r3, r1
 8004380:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 8004384:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	@ 0x200
 8004388:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800438c:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8004390:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004394:	1c9a      	adds	r2, r3, #2
 8004396:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800439a:	4413      	add	r3, r2
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2200      	movs	r2, #0
 80043a2:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 80043a6:	f8c7 21fc 	str.w	r2, [r7, #508]	@ 0x1fc
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9d7 567e 	ldrd	r5, r6, [r7, #504]	@ 0x1f8
 80043b6:	4634      	mov	r4, r6
 80043b8:	0423      	lsls	r3, r4, #16
 80043ba:	462c      	mov	r4, r5
 80043bc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80043c0:	462c      	mov	r4, r5
 80043c2:	0422      	lsls	r2, r4, #16
 80043c4:	ea40 0402 	orr.w	r4, r0, r2
 80043c8:	f8c7 41f0 	str.w	r4, [r7, #496]	@ 0x1f0
 80043cc:	430b      	orrs	r3, r1
 80043ce:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80043d2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	@ 0x1f0
 80043d6:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043da:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 80043de:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80043e2:	1cda      	adds	r2, r3, #3
 80043e4:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80043e8:	4413      	add	r3, r2
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2200      	movs	r2, #0
 80043f0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80043f4:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80043f8:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	@ 0x1e8
 80043fc:	4623      	mov	r3, r4
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004404:	4623      	mov	r3, r4
 8004406:	061b      	lsls	r3, r3, #24
 8004408:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800440c:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	@ 0x1e0
 8004410:	4623      	mov	r3, r4
 8004412:	4303      	orrs	r3, r0
 8004414:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8004418:	462b      	mov	r3, r5
 800441a:	430b      	orrs	r3, r1
 800441c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004420:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	@ 0x1d8
 8004424:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004428:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 800442c:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004430:	1d1a      	adds	r2, r3, #4
 8004432:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004436:	4413      	add	r3, r2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2200      	movs	r2, #0
 800443e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8004442:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	f8d7 41d0 	ldr.w	r4, [r7, #464]	@ 0x1d0
 8004452:	0023      	movs	r3, r4
 8004454:	2200      	movs	r2, #0
 8004456:	ea40 0402 	orr.w	r4, r0, r2
 800445a:	f8c7 41c8 	str.w	r4, [r7, #456]	@ 0x1c8
 800445e:	430b      	orrs	r3, r1
 8004460:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8004464:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	@ 0x1c8
 8004468:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800446c:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8004470:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004474:	1d5a      	adds	r2, r3, #5
 8004476:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800447a:	4413      	add	r3, r2
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2200      	movs	r2, #0
 8004482:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004486:	f8c7 21c4 	str.w	r2, [r7, #452]	@ 0x1c4
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	f8d7 41c0 	ldr.w	r4, [r7, #448]	@ 0x1c0
 8004496:	0223      	lsls	r3, r4, #8
 8004498:	2200      	movs	r2, #0
 800449a:	ea40 0402 	orr.w	r4, r0, r2
 800449e:	f8c7 41b8 	str.w	r4, [r7, #440]	@ 0x1b8
 80044a2:	430b      	orrs	r3, r1
 80044a4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80044a8:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	@ 0x1b8
 80044ac:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80044b0:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 80044b4:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80044b8:	1d9a      	adds	r2, r3, #6
 80044ba:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80044be:	4413      	add	r3, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2200      	movs	r2, #0
 80044c6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 80044ca:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	f8d7 41b0 	ldr.w	r4, [r7, #432]	@ 0x1b0
 80044da:	0423      	lsls	r3, r4, #16
 80044dc:	2200      	movs	r2, #0
 80044de:	ea40 0402 	orr.w	r4, r0, r2
 80044e2:	f8c7 41a8 	str.w	r4, [r7, #424]	@ 0x1a8
 80044e6:	430b      	orrs	r3, r1
 80044e8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80044ec:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	@ 0x1a8
 80044f0:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80044f4:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 80044f8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80044fc:	1dda      	adds	r2, r3, #7
 80044fe:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004502:	4413      	add	r3, r2
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2200      	movs	r2, #0
 800450a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800450e:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	f8d7 41a0 	ldr.w	r4, [r7, #416]	@ 0x1a0
 800451e:	0623      	lsls	r3, r4, #24
 8004520:	2200      	movs	r2, #0
 8004522:	ea40 0402 	orr.w	r4, r0, r2
 8004526:	f8c7 4198 	str.w	r4, [r7, #408]	@ 0x198
 800452a:	430b      	orrs	r3, r1
 800452c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004530:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	@ 0x198
 8004534:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338
      this->pid_motor_front_left[i] = u_pid_motor_front_lefti.real;
 8004538:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 800453c:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8004540:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8004544:	3309      	adds	r3, #9
 8004546:	00db      	lsls	r3, r3, #3
 8004548:	4413      	add	r3, r2
 800454a:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->pid_motor_front_left[i]);
 800454e:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004552:	3308      	adds	r3, #8
 8004554:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
      for( uint32_t i = 0; i < 3; i++){
 8004558:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 800455c:	3301      	adds	r3, #1
 800455e:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8004562:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8004566:	2b02      	cmp	r3, #2
 8004568:	f67f aec7 	bls.w	80042fa <_ZN9ired_msgs5Motor11deserializeEPh+0x4f6>
      }
      for( uint32_t i = 0; i < 3; i++){
 800456c:	2300      	movs	r3, #0
 800456e:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8004572:	e133      	b.n	80047dc <_ZN9ired_msgs5Motor11deserializeEPh+0x9d8>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_front_righti;
      u_pid_motor_front_righti.base = 0;
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9c7 23cc 	strd	r2, r3, [r7, #816]	@ 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004580:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8004584:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8004588:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800458c:	4413      	add	r3, r2
 800458e:	781b      	ldrb	r3, [r3, #0]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2200      	movs	r2, #0
 8004594:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8004598:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
 800459c:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	@ 0x190
 80045a0:	4623      	mov	r3, r4
 80045a2:	4303      	orrs	r3, r0
 80045a4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80045a8:	462b      	mov	r3, r5
 80045aa:	430b      	orrs	r3, r1
 80045ac:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 80045b0:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	@ 0x188
 80045b4:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80045b8:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 80045bc:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80045c6:	4413      	add	r3, r2
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80045d2:	f8c7 2184 	str.w	r2, [r7, #388]	@ 0x184
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	e9d7 5660 	ldrd	r5, r6, [r7, #384]	@ 0x180
 80045e2:	4634      	mov	r4, r6
 80045e4:	0223      	lsls	r3, r4, #8
 80045e6:	462c      	mov	r4, r5
 80045e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045ec:	462c      	mov	r4, r5
 80045ee:	0222      	lsls	r2, r4, #8
 80045f0:	ea40 0402 	orr.w	r4, r0, r2
 80045f4:	f8c7 4178 	str.w	r4, [r7, #376]	@ 0x178
 80045f8:	430b      	orrs	r3, r1
 80045fa:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80045fe:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	@ 0x178
 8004602:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004606:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 800460a:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800460e:	1c9a      	adds	r2, r3, #2
 8004610:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004614:	4413      	add	r3, r2
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2200      	movs	r2, #0
 800461c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8004620:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 565c 	ldrd	r5, r6, [r7, #368]	@ 0x170
 8004630:	4634      	mov	r4, r6
 8004632:	0423      	lsls	r3, r4, #16
 8004634:	462c      	mov	r4, r5
 8004636:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800463a:	462c      	mov	r4, r5
 800463c:	0422      	lsls	r2, r4, #16
 800463e:	ea40 0402 	orr.w	r4, r0, r2
 8004642:	f8c7 4168 	str.w	r4, [r7, #360]	@ 0x168
 8004646:	430b      	orrs	r3, r1
 8004648:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800464c:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	@ 0x168
 8004650:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004654:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8004658:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800465c:	1cda      	adds	r2, r3, #3
 800465e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004662:	4413      	add	r3, r2
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2200      	movs	r2, #0
 800466a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800466e:	f8c7 2164 	str.w	r2, [r7, #356]	@ 0x164
 8004672:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	@ 0x160
 8004676:	4623      	mov	r3, r4
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800467e:	4623      	mov	r3, r4
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8004686:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	@ 0x158
 800468a:	4623      	mov	r3, r4
 800468c:	4303      	orrs	r3, r0
 800468e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004692:	462b      	mov	r3, r5
 8004694:	430b      	orrs	r3, r1
 8004696:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800469a:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	@ 0x150
 800469e:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80046a2:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 80046a6:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80046b0:	4413      	add	r3, r2
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 80046bc:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80046c0:	f04f 0200 	mov.w	r2, #0
 80046c4:	f04f 0300 	mov.w	r3, #0
 80046c8:	f8d7 4148 	ldr.w	r4, [r7, #328]	@ 0x148
 80046cc:	0023      	movs	r3, r4
 80046ce:	2200      	movs	r2, #0
 80046d0:	ea40 0402 	orr.w	r4, r0, r2
 80046d4:	f8c7 4140 	str.w	r4, [r7, #320]	@ 0x140
 80046d8:	430b      	orrs	r3, r1
 80046da:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 80046de:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	@ 0x140
 80046e2:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80046e6:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 80046ea:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80046ee:	1d5a      	adds	r2, r3, #5
 80046f0:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80046f4:	4413      	add	r3, r2
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2200      	movs	r2, #0
 80046fc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004700:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	f8d7 4138 	ldr.w	r4, [r7, #312]	@ 0x138
 8004710:	0223      	lsls	r3, r4, #8
 8004712:	2200      	movs	r2, #0
 8004714:	ea40 0402 	orr.w	r4, r0, r2
 8004718:	f8c7 4130 	str.w	r4, [r7, #304]	@ 0x130
 800471c:	430b      	orrs	r3, r1
 800471e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004722:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	@ 0x130
 8004726:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800472a:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 800472e:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004732:	1d9a      	adds	r2, r3, #6
 8004734:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004738:	4413      	add	r3, r2
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004744:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	f8d7 4128 	ldr.w	r4, [r7, #296]	@ 0x128
 8004754:	0423      	lsls	r3, r4, #16
 8004756:	2200      	movs	r2, #0
 8004758:	ea40 0402 	orr.w	r4, r0, r2
 800475c:	f8c7 4120 	str.w	r4, [r7, #288]	@ 0x120
 8004760:	430b      	orrs	r3, r1
 8004762:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004766:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	@ 0x120
 800476a:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800476e:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 8004772:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004776:	1dda      	adds	r2, r3, #7
 8004778:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800477c:	4413      	add	r3, r2
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2200      	movs	r2, #0
 8004784:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8004788:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	f8d7 4118 	ldr.w	r4, [r7, #280]	@ 0x118
 8004798:	0623      	lsls	r3, r4, #24
 800479a:	2200      	movs	r2, #0
 800479c:	ea40 0402 	orr.w	r4, r0, r2
 80047a0:	f8c7 4110 	str.w	r4, [r7, #272]	@ 0x110
 80047a4:	430b      	orrs	r3, r1
 80047a6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80047aa:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	@ 0x110
 80047ae:	e9c7 34cc 	strd	r3, r4, [r7, #816]	@ 0x330
      this->pid_motor_front_right[i] = u_pid_motor_front_righti.real;
 80047b2:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	@ 0x330
 80047b6:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 80047ba:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80047be:	330c      	adds	r3, #12
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	4413      	add	r3, r2
 80047c4:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->pid_motor_front_right[i]);
 80047c8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80047cc:	3308      	adds	r3, #8
 80047ce:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
      for( uint32_t i = 0; i < 3; i++){
 80047d2:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80047d6:	3301      	adds	r3, #1
 80047d8:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 80047dc:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	f67f aec7 	bls.w	8004574 <_ZN9ired_msgs5Motor11deserializeEPh+0x770>
      }
      for( uint32_t i = 0; i < 3; i++){
 80047e6:	2300      	movs	r3, #0
 80047e8:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 80047ec:	e133      	b.n	8004a56 <_ZN9ired_msgs5Motor11deserializeEPh+0xc52>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_rear_lefti;
      u_pid_motor_rear_lefti.base = 0;
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	e9c7 23ca 	strd	r2, r3, [r7, #808]	@ 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80047fa:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 80047fe:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8004802:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004806:	4413      	add	r3, r2
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004812:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
 8004816:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	@ 0x108
 800481a:	4623      	mov	r3, r4
 800481c:	4303      	orrs	r3, r0
 800481e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004822:	462b      	mov	r3, r5
 8004824:	430b      	orrs	r3, r1
 8004826:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800482a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	@ 0x100
 800482e:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004832:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8004836:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 800483a:	1c5a      	adds	r2, r3, #1
 800483c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004840:	4413      	add	r3, r2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2200      	movs	r2, #0
 8004848:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800484c:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	@ 0xf8
 800485c:	4634      	mov	r4, r6
 800485e:	0223      	lsls	r3, r4, #8
 8004860:	462c      	mov	r4, r5
 8004862:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004866:	462c      	mov	r4, r5
 8004868:	0222      	lsls	r2, r4, #8
 800486a:	ea40 0402 	orr.w	r4, r0, r2
 800486e:	f8c7 40f0 	str.w	r4, [r7, #240]	@ 0xf0
 8004872:	430b      	orrs	r3, r1
 8004874:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004878:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	@ 0xf0
 800487c:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004880:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8004884:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800488e:	4413      	add	r3, r2
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800489a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800489e:	f04f 0200 	mov.w	r2, #0
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	@ 0xe8
 80048aa:	4634      	mov	r4, r6
 80048ac:	0423      	lsls	r3, r4, #16
 80048ae:	462c      	mov	r4, r5
 80048b0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80048b4:	462c      	mov	r4, r5
 80048b6:	0422      	lsls	r2, r4, #16
 80048b8:	ea40 0402 	orr.w	r4, r0, r2
 80048bc:	f8c7 40e0 	str.w	r4, [r7, #224]	@ 0xe0
 80048c0:	430b      	orrs	r3, r1
 80048c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048c6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	@ 0xe0
 80048ca:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80048ce:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 80048d2:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80048d6:	1cda      	adds	r2, r3, #3
 80048d8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80048dc:	4413      	add	r3, r2
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048e8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048ec:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80048f0:	4623      	mov	r3, r4
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80048f8:	4623      	mov	r3, r4
 80048fa:	061b      	lsls	r3, r3, #24
 80048fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004900:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8004904:	4623      	mov	r3, r4
 8004906:	4303      	orrs	r3, r0
 8004908:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800490c:	462b      	mov	r3, r5
 800490e:	430b      	orrs	r3, r1
 8004910:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004914:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	@ 0xc8
 8004918:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800491c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8004920:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800492a:	4413      	add	r3, r2
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2200      	movs	r2, #0
 8004932:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004936:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	f8d7 40c0 	ldr.w	r4, [r7, #192]	@ 0xc0
 8004946:	0023      	movs	r3, r4
 8004948:	2200      	movs	r2, #0
 800494a:	ea40 0402 	orr.w	r4, r0, r2
 800494e:	f8c7 40b8 	str.w	r4, [r7, #184]	@ 0xb8
 8004952:	430b      	orrs	r3, r1
 8004954:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004958:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	@ 0xb8
 800495c:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004960:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8004964:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004968:	1d5a      	adds	r2, r3, #5
 800496a:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 800496e:	4413      	add	r3, r2
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2200      	movs	r2, #0
 8004976:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800497a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	f8d7 40b0 	ldr.w	r4, [r7, #176]	@ 0xb0
 800498a:	0223      	lsls	r3, r4, #8
 800498c:	2200      	movs	r2, #0
 800498e:	ea40 0402 	orr.w	r4, r0, r2
 8004992:	f8c7 40a8 	str.w	r4, [r7, #168]	@ 0xa8
 8004996:	430b      	orrs	r3, r1
 8004998:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800499c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 80049a0:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80049a4:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 80049a8:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80049ac:	1d9a      	adds	r2, r3, #6
 80049ae:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80049b2:	4413      	add	r3, r2
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2200      	movs	r2, #0
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80049ce:	0423      	lsls	r3, r4, #16
 80049d0:	2200      	movs	r2, #0
 80049d2:	ea40 0402 	orr.w	r4, r0, r2
 80049d6:	f8c7 4098 	str.w	r4, [r7, #152]	@ 0x98
 80049da:	430b      	orrs	r3, r1
 80049dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049e0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 80049e4:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80049e8:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 80049ec:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 80049f0:	1dda      	adds	r2, r3, #7
 80049f2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 80049f6:	4413      	add	r3, r2
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a06:	f04f 0200 	mov.w	r2, #0
 8004a0a:	f04f 0300 	mov.w	r3, #0
 8004a0e:	f8d7 4090 	ldr.w	r4, [r7, #144]	@ 0x90
 8004a12:	0623      	lsls	r3, r4, #24
 8004a14:	2200      	movs	r2, #0
 8004a16:	ea40 0402 	orr.w	r4, r0, r2
 8004a1a:	f8c7 4088 	str.w	r4, [r7, #136]	@ 0x88
 8004a1e:	430b      	orrs	r3, r1
 8004a20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a24:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8004a28:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
      this->pid_motor_rear_left[i] = u_pid_motor_rear_lefti.real;
 8004a2c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	@ 0x328
 8004a30:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8004a34:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8004a38:	330f      	adds	r3, #15
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->pid_motor_rear_left[i]);
 8004a42:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004a46:	3308      	adds	r3, #8
 8004a48:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
      for( uint32_t i = 0; i < 3; i++){
 8004a4c:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8004a50:	3301      	adds	r3, #1
 8004a52:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8004a56:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	f67f aec7 	bls.w	80047ee <_ZN9ired_msgs5Motor11deserializeEPh+0x9ea>
      }
      for( uint32_t i = 0; i < 3; i++){
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8004a66:	e10f      	b.n	8004c88 <_ZN9ired_msgs5Motor11deserializeEPh+0xe84>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_rear_righti;
      u_pid_motor_rear_righti.base = 0;
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9c7 23c8 	strd	r2, r3, [r7, #800]	@ 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004a74:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004a78:	f8d7 236c 	ldr.w	r2, [r7, #876]	@ 0x36c
 8004a7c:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004a80:	4413      	add	r3, r2
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a8c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004a90:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8004a94:	4623      	mov	r3, r4
 8004a96:	4303      	orrs	r3, r0
 8004a98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a9a:	462b      	mov	r3, r5
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004aa0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 8004aa4:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004aa8:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004aac:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004ab6:	4413      	add	r3, r2
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2200      	movs	r2, #0
 8004abe:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ac0:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	@ 0x70
 8004ace:	4634      	mov	r4, r6
 8004ad0:	0223      	lsls	r3, r4, #8
 8004ad2:	462c      	mov	r4, r5
 8004ad4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ad8:	462c      	mov	r4, r5
 8004ada:	0222      	lsls	r2, r4, #8
 8004adc:	ea40 0402 	orr.w	r4, r0, r2
 8004ae0:	66bc      	str	r4, [r7, #104]	@ 0x68
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ae6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8004aea:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004aee:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004af2:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004af6:	1c9a      	adds	r2, r3, #2
 8004af8:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004afc:	4413      	add	r3, r2
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2200      	movs	r2, #0
 8004b04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b06:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	@ 0x60
 8004b14:	4634      	mov	r4, r6
 8004b16:	0423      	lsls	r3, r4, #16
 8004b18:	462c      	mov	r4, r5
 8004b1a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004b1e:	462c      	mov	r4, r5
 8004b20:	0422      	lsls	r2, r4, #16
 8004b22:	ea40 0402 	orr.w	r4, r0, r2
 8004b26:	65bc      	str	r4, [r7, #88]	@ 0x58
 8004b28:	430b      	orrs	r3, r1
 8004b2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b2c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8004b30:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004b34:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004b38:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004b3c:	1cda      	adds	r2, r3, #3
 8004b3e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004b42:	4413      	add	r3, r2
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2200      	movs	r2, #0
 8004b4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b4c:	657a      	str	r2, [r7, #84]	@ 0x54
 8004b4e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004b52:	4623      	mov	r3, r4
 8004b54:	0a1b      	lsrs	r3, r3, #8
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b58:	4623      	mov	r3, r4
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b5e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004b62:	4623      	mov	r3, r4
 8004b64:	4303      	orrs	r3, r0
 8004b66:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b68:	462b      	mov	r3, r5
 8004b6a:	430b      	orrs	r3, r1
 8004b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8004b72:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004b76:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004b7a:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004b7e:	1d1a      	adds	r2, r3, #4
 8004b80:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004b84:	4413      	add	r3, r2
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8004b9a:	0023      	movs	r3, r4
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	ea40 0402 	orr.w	r4, r0, r2
 8004ba2:	633c      	str	r4, [r7, #48]	@ 0x30
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8004bac:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004bb0:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004bb4:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004bb8:	1d5a      	adds	r2, r3, #5
 8004bba:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004bbe:	4413      	add	r3, r2
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8004bd4:	0223      	lsls	r3, r4, #8
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	ea40 0402 	orr.w	r4, r0, r2
 8004bdc:	623c      	str	r4, [r7, #32]
 8004bde:	430b      	orrs	r3, r1
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004be2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004be6:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004bea:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004bee:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004bf2:	1d9a      	adds	r2, r3, #6
 8004bf4:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004bf8:	4413      	add	r3, r2
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2200      	movs	r2, #0
 8004c00:	61bb      	str	r3, [r7, #24]
 8004c02:	61fa      	str	r2, [r7, #28]
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	69bc      	ldr	r4, [r7, #24]
 8004c0e:	0423      	lsls	r3, r4, #16
 8004c10:	2200      	movs	r2, #0
 8004c12:	ea40 0402 	orr.w	r4, r0, r2
 8004c16:	613c      	str	r4, [r7, #16]
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c20:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004c24:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004c28:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004c2c:	1dda      	adds	r2, r3, #7
 8004c2e:	f8d7 3318 	ldr.w	r3, [r7, #792]	@ 0x318
 8004c32:	4413      	add	r3, r2
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	60fa      	str	r2, [r7, #12]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	f04f 0300 	mov.w	r3, #0
 8004c46:	68bc      	ldr	r4, [r7, #8]
 8004c48:	0623      	lsls	r3, r4, #24
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	ea40 0402 	orr.w	r4, r0, r2
 8004c50:	603c      	str	r4, [r7, #0]
 8004c52:	430b      	orrs	r3, r1
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004c5a:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320
      this->pid_motor_rear_right[i] = u_pid_motor_rear_righti.real;
 8004c5e:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	@ 0x320
 8004c62:	f8d7 231c 	ldr.w	r2, [r7, #796]	@ 0x31c
 8004c66:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004c6a:	3312      	adds	r3, #18
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4413      	add	r3, r2
 8004c70:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->pid_motor_rear_right[i]);
 8004c74:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
 8004c78:	3308      	adds	r3, #8
 8004c7a:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
      for( uint32_t i = 0; i < 3; i++){
 8004c7e:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004c82:	3301      	adds	r3, #1
 8004c84:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8004c88:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	f67f aeeb 	bls.w	8004a68 <_ZN9ired_msgs5Motor11deserializeEPh+0xc64>
      }
     return offset;
 8004c92:	f8d7 336c 	ldr.w	r3, [r7, #876]	@ 0x36c
    }
 8004c96:	4618      	mov	r0, r3
 8004c98:	f507 775c 	add.w	r7, r7, #880	@ 0x370
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ca2:	4770      	bx	lr

08004ca4 <_ZN9ired_msgs5Motor7getTypeEv>:

    virtual const char * getType() override { return "ired_msgs/Motor"; };
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	4b03      	ldr	r3, [pc, #12]	@ (8004cbc <_ZN9ired_msgs5Motor7getTypeEv+0x18>)
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	08012e5c 	.word	0x08012e5c

08004cc0 <_ZN9ired_msgs5Motor6getMD5Ev>:
    virtual const char * getMD5() override { return "ec2526e9a146e07c0941072e0ef16c7b"; };
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	4b03      	ldr	r3, [pc, #12]	@ (8004cd8 <_ZN9ired_msgs5Motor6getMD5Ev+0x18>)
 8004cca:	4618      	mov	r0, r3
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	08012e6c 	.word	0x08012e6c

08004cdc <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
    {
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fc faa4 	bl	8001234 <_ZN3ros3MsgC1Ev>
 8004cec:	4a03      	ldr	r2, [pc, #12]	@ (8004cfc <_ZN8std_msgs5EmptyC1Ev+0x20>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
    }
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	08012fd8 	.word	0x08012fd8

08004d00 <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
    }
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
     return offset;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
    }
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <_ZN8std_msgs5Empty7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Empty"; };
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	4b03      	ldr	r3, [pc, #12]	@ (8004d50 <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 8004d42:	4618      	mov	r0, r3
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	08012e90 	.word	0x08012e90

08004d54 <_ZN8std_msgs5Empty6getMD5Ev>:
    virtual const char * getMD5() override { return "d41d8cd98f00b204e9800998ecf8427e"; };
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	4b03      	ldr	r3, [pc, #12]	@ (8004d6c <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	08012ea0 	.word	0x08012ea0

08004d70 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	4a04      	ldr	r2, [pc, #16]	@ (8004d8c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	08013068 	.word	0x08013068

08004d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ffe8 	bl	8004d70 <_ZN3ros15NodeHandleBase_C1Ev>
 8004da0:	4a36      	ldr	r2, [pc, #216]	@ (8004e7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3304      	adds	r3, #4
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fd f8cc 	bl	8001f48 <_ZN13STM32HardwareC1Ev>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 241c 	str.w	r2, [r3, #1052]	@ 0x41c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c3 2420 	str.w	r2, [r3, #1056]	@ 0x420
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8004dd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f00a fbca 	bl	800f576 <memset>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8004de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dec:	2100      	movs	r1, #0
 8004dee:	4618      	mov	r0, r3
 8004df0:	f00a fbc1 	bl	800f576 <memset>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f603 0324 	addw	r3, r3, #2084	@ 0x824
 8004dfa:	2264      	movs	r2, #100	@ 0x64
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f00a fbb9 	bl	800f576 <memset>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f603 0388 	addw	r3, r3, #2184	@ 0x888
 8004e0a:	2264      	movs	r2, #100	@ 0x64
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f00a fbb1 	bl	800f576 <memset>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f603 1314 	addw	r3, r3, #2324	@ 0x914
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fc fd56 	bl	800191c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	08012fc4 	.word	0x08012fc4

08004e80 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004e80:	b5b0      	push	{r4, r5, r7, lr}
 8004e82:	b096      	sub	sp, #88	@ 0x58
 8004e84:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004e86:	f003 ffcb 	bl	8008e20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004e8a:	f000 fadf 	bl	800544c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004e8e:	f000 fe5f 	bl	8005b50 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8004e92:	f000 fe35 	bl	8005b00 <_ZL11MX_DMA_Initv>
	MX_TIM1_Init();
 8004e96:	f000 fb8f 	bl	80055b8 <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 8004e9a:	f000 fbef 	bl	800567c <_ZL12MX_TIM2_Initv>
	MX_TIM4_Init();
 8004e9e:	f000 fce3 	bl	8005868 <_ZL12MX_TIM4_Initv>
	MX_TIM3_Init();
 8004ea2:	f000 fc83 	bl	80057ac <_ZL12MX_TIM3_Initv>
	MX_I2C1_Init();
 8004ea6:	f000 fb53 	bl	8005550 <_ZL12MX_I2C1_Initv>
	MX_TIM5_Init();
 8004eaa:	f000 fd3b 	bl	8005924 <_ZL12MX_TIM5_Initv>
	MX_TIM8_Init();
 8004eae:	f000 fd97 	bl	80059e0 <_ZL12MX_TIM8_Initv>
	MX_USART1_UART_Init();
 8004eb2:	f000 fdf7 	bl	8005aa4 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	/* LED Status */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ebc:	4878      	ldr	r0, [pc, #480]	@ (80050a0 <main+0x220>)
 8004ebe:	f004 feed 	bl	8009c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ec8:	4875      	ldr	r0, [pc, #468]	@ (80050a0 <main+0x220>)
 8004eca:	f004 fee7 	bl	8009c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ed4:	4872      	ldr	r0, [pc, #456]	@ (80050a0 <main+0x220>)
 8004ed6:	f004 fee1 	bl	8009c9c <HAL_GPIO_WritePin>

	uint8_t status = mpu.begin();
 8004eda:	2200      	movs	r2, #0
 8004edc:	2101      	movs	r1, #1
 8004ede:	4871      	ldr	r0, [pc, #452]	@ (80050a4 <main+0x224>)
 8004ee0:	f002 fe12 	bl	8007b08 <_ZN7MPU92505beginEii>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	while (status != HAL_OK) {
 8004eea:	e010      	b.n	8004f0e <main+0x8e>
		status = mpu.begin();
 8004eec:	2200      	movs	r2, #0
 8004eee:	2101      	movs	r1, #1
 8004ef0:	486c      	ldr	r0, [pc, #432]	@ (80050a4 <main+0x224>)
 8004ef2:	f002 fe09 	bl	8007b08 <_ZN7MPU92505beginEii>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8004efc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f00:	4867      	ldr	r0, [pc, #412]	@ (80050a0 <main+0x220>)
 8004f02:	f004 fee4 	bl	8009cce <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8004f06:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004f0a:	f003 fffb 	bl	8008f04 <HAL_Delay>
	while (status != HAL_OK) {
 8004f0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1ea      	bne.n	8004eec <main+0x6c>
	}
	mpu.calcOffsets();
 8004f16:	2201      	movs	r2, #1
 8004f18:	2101      	movs	r1, #1
 8004f1a:	4862      	ldr	r0, [pc, #392]	@ (80050a4 <main+0x224>)
 8004f1c:	f002 ff90 	bl	8007e40 <_ZN7MPU925011calcOffsetsEbb>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8004f20:	2201      	movs	r2, #1
 8004f22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004f26:	485e      	ldr	r0, [pc, #376]	@ (80050a0 <main+0x220>)
 8004f28:	f004 feb8 	bl	8009c9c <HAL_GPIO_WritePin>

	/* Motor */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004f2c:	2100      	movs	r1, #0
 8004f2e:	485e      	ldr	r0, [pc, #376]	@ (80050a8 <main+0x228>)
 8004f30:	f006 fdce 	bl	800bad0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004f34:	2104      	movs	r1, #4
 8004f36:	485c      	ldr	r0, [pc, #368]	@ (80050a8 <main+0x228>)
 8004f38:	f006 fdca 	bl	800bad0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004f3c:	2108      	movs	r1, #8
 8004f3e:	485a      	ldr	r0, [pc, #360]	@ (80050a8 <main+0x228>)
 8004f40:	f006 fdc6 	bl	800bad0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004f44:	210c      	movs	r1, #12
 8004f46:	4858      	ldr	r0, [pc, #352]	@ (80050a8 <main+0x228>)
 8004f48:	f006 fdc2 	bl	800bad0 <HAL_TIM_PWM_Start>
	TIM2->CCR1 = 0;
 8004f4c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f50:	2200      	movs	r2, #0
 8004f52:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 8004f54:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f58:	2200      	movs	r2, #0
 8004f5a:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2->CCR3 = 0;
 8004f5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f60:	2200      	movs	r2, #0
 8004f62:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = 0;
 8004f64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f68:	2200      	movs	r2, #0
 8004f6a:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	2101      	movs	r1, #1
 8004f70:	484e      	ldr	r0, [pc, #312]	@ (80050ac <main+0x22c>)
 8004f72:	f004 fe93 	bl	8009c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8004f76:	2201      	movs	r2, #1
 8004f78:	2102      	movs	r1, #2
 8004f7a:	484c      	ldr	r0, [pc, #304]	@ (80050ac <main+0x22c>)
 8004f7c:	f004 fe8e 	bl	8009c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8004f80:	2201      	movs	r2, #1
 8004f82:	2104      	movs	r1, #4
 8004f84:	4849      	ldr	r0, [pc, #292]	@ (80050ac <main+0x22c>)
 8004f86:	f004 fe89 	bl	8009c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	2108      	movs	r1, #8
 8004f8e:	4847      	ldr	r0, [pc, #284]	@ (80050ac <main+0x22c>)
 8004f90:	f004 fe84 	bl	8009c9c <HAL_GPIO_WritePin>

	/* Encoder */
	HAL_TIM_Base_Start_IT(&htim4);
 8004f94:	4846      	ldr	r0, [pc, #280]	@ (80050b0 <main+0x230>)
 8004f96:	f006 fcdb 	bl	800b950 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8004f9a:	213c      	movs	r1, #60	@ 0x3c
 8004f9c:	4845      	ldr	r0, [pc, #276]	@ (80050b4 <main+0x234>)
 8004f9e:	f006 ff05 	bl	800bdac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8004fa2:	213c      	movs	r1, #60	@ 0x3c
 8004fa4:	4844      	ldr	r0, [pc, #272]	@ (80050b8 <main+0x238>)
 8004fa6:	f006 ff01 	bl	800bdac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8004faa:	213c      	movs	r1, #60	@ 0x3c
 8004fac:	4843      	ldr	r0, [pc, #268]	@ (80050bc <main+0x23c>)
 8004fae:	f006 fefd 	bl	800bdac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8004fb2:	213c      	movs	r1, #60	@ 0x3c
 8004fb4:	4842      	ldr	r0, [pc, #264]	@ (80050c0 <main+0x240>)
 8004fb6:	f006 fef9 	bl	800bdac <HAL_TIM_Encoder_Start>
	htim1.Instance->CNT = 30000;
 8004fba:	4b3e      	ldr	r3, [pc, #248]	@ (80050b4 <main+0x234>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004fc2:	625a      	str	r2, [r3, #36]	@ 0x24
	htim3.Instance->CNT = 30000;
 8004fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80050b8 <main+0x238>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004fcc:	625a      	str	r2, [r3, #36]	@ 0x24
	htim5.Instance->CNT = 30000;
 8004fce:	4b3b      	ldr	r3, [pc, #236]	@ (80050bc <main+0x23c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004fd6:	625a      	str	r2, [r3, #36]	@ 0x24
	htim8.Instance->CNT = 30000;
 8004fd8:	4b39      	ldr	r3, [pc, #228]	@ (80050c0 <main+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f247 5230 	movw	r2, #30000	@ 0x7530
 8004fe0:	625a      	str	r2, [r3, #36]	@ 0x24

	/* PID Data */
	motor_initData(&motor_front_left_);
 8004fe2:	4838      	ldr	r0, [pc, #224]	@ (80050c4 <main+0x244>)
 8004fe4:	f001 fac4 	bl	8006570 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_front_right_);
 8004fe8:	4837      	ldr	r0, [pc, #220]	@ (80050c8 <main+0x248>)
 8004fea:	f001 fac1 	bl	8006570 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_rear_left_);
 8004fee:	4837      	ldr	r0, [pc, #220]	@ (80050cc <main+0x24c>)
 8004ff0:	f001 fabe 	bl	8006570 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_rear_right_);
 8004ff4:	4836      	ldr	r0, [pc, #216]	@ (80050d0 <main+0x250>)
 8004ff6:	f001 fabb 	bl	8006570 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	resetPIDData(&pid_data_front_left_);
 8004ffa:	4836      	ldr	r0, [pc, #216]	@ (80050d4 <main+0x254>)
 8004ffc:	f002 fcc6 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_front_right_);
 8005000:	4835      	ldr	r0, [pc, #212]	@ (80050d8 <main+0x258>)
 8005002:	f002 fcc3 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_rear_left_);
 8005006:	4835      	ldr	r0, [pc, #212]	@ (80050dc <main+0x25c>)
 8005008:	f002 fcc0 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_rear_right_);
 800500c:	4834      	ldr	r0, [pc, #208]	@ (80050e0 <main+0x260>)
 800500e:	f002 fcbd 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
	setupPIDParameter(&pid_data_front_left_, 15.0, 85.0, 0.02);
 8005012:	ed9f 2b1d 	vldr	d2, [pc, #116]	@ 8005088 <main+0x208>
 8005016:	ed9f 1b1e 	vldr	d1, [pc, #120]	@ 8005090 <main+0x210>
 800501a:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 8005098 <main+0x218>
 800501e:	482d      	ldr	r0, [pc, #180]	@ (80050d4 <main+0x254>)
 8005020:	f002 fcd3 	bl	80079ca <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_front_right_, 15.0, 85.0, 0.02);
 8005024:	ed9f 2b18 	vldr	d2, [pc, #96]	@ 8005088 <main+0x208>
 8005028:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8005090 <main+0x210>
 800502c:	ed9f 0b1a 	vldr	d0, [pc, #104]	@ 8005098 <main+0x218>
 8005030:	4829      	ldr	r0, [pc, #164]	@ (80050d8 <main+0x258>)
 8005032:	f002 fcca 	bl	80079ca <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_rear_left_, 15.0, 85.0, 0.02);
 8005036:	ed9f 2b14 	vldr	d2, [pc, #80]	@ 8005088 <main+0x208>
 800503a:	ed9f 1b15 	vldr	d1, [pc, #84]	@ 8005090 <main+0x210>
 800503e:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8005098 <main+0x218>
 8005042:	4826      	ldr	r0, [pc, #152]	@ (80050dc <main+0x25c>)
 8005044:	f002 fcc1 	bl	80079ca <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_rear_right_, 15.0, 85.0, 0.02);
 8005048:	ed9f 2b0f 	vldr	d2, [pc, #60]	@ 8005088 <main+0x208>
 800504c:	ed9f 1b10 	vldr	d1, [pc, #64]	@ 8005090 <main+0x210>
 8005050:	ed9f 0b11 	vldr	d0, [pc, #68]	@ 8005098 <main+0x218>
 8005054:	4822      	ldr	r0, [pc, #136]	@ (80050e0 <main+0x260>)
 8005056:	f002 fcb8 	bl	80079ca <_Z17setupPIDParameterP16PID_Data_Typedefddd>

	/* ROS */
	ROS_setup();
 800505a:	f001 fc8b 	bl	8006974 <_Z9ROS_setupv>

	/* Timer */
	ros::Time time_now, tTime[3];
 800505e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005062:	4618      	mov	r0, r3
 8005064:	f7fc f8d4 	bl	8001210 <_ZN3ros4TimeC1Ev>
 8005068:	f107 030c 	add.w	r3, r7, #12
 800506c:	2402      	movs	r4, #2
 800506e:	461d      	mov	r5, r3
 8005070:	e004      	b.n	800507c <main+0x1fc>
 8005072:	4628      	mov	r0, r5
 8005074:	f7fc f8cc 	bl	8001210 <_ZN3ros4TimeC1Ev>
 8005078:	3c01      	subs	r4, #1
 800507a:	3508      	adds	r5, #8
 800507c:	2c00      	cmp	r4, #0
 800507e:	daf8      	bge.n	8005072 <main+0x1f2>
	for (int i = 1; i < 3; i++) {
 8005080:	2301      	movs	r3, #1
 8005082:	653b      	str	r3, [r7, #80]	@ 0x50
 8005084:	e042      	b.n	800510c <main+0x28c>
 8005086:	bf00      	nop
 8005088:	47ae147b 	.word	0x47ae147b
 800508c:	3f947ae1 	.word	0x3f947ae1
 8005090:	00000000 	.word	0x00000000
 8005094:	40554000 	.word	0x40554000
 8005098:	00000000 	.word	0x00000000
 800509c:	402e0000 	.word	0x402e0000
 80050a0:	40020400 	.word	0x40020400
 80050a4:	20000518 	.word	0x20000518
 80050a8:	200002a4 	.word	0x200002a4
 80050ac:	40020800 	.word	0x40020800
 80050b0:	20000334 	.word	0x20000334
 80050b4:	2000025c 	.word	0x2000025c
 80050b8:	200002ec 	.word	0x200002ec
 80050bc:	2000037c 	.word	0x2000037c
 80050c0:	200003c4 	.word	0x200003c4
 80050c4:	200005d8 	.word	0x200005d8
 80050c8:	20000608 	.word	0x20000608
 80050cc:	20000638 	.word	0x20000638
 80050d0:	20000668 	.word	0x20000668
 80050d4:	20000698 	.word	0x20000698
 80050d8:	200006c8 	.word	0x200006c8
 80050dc:	200006f8 	.word	0x200006f8
 80050e0:	20000728 	.word	0x20000728
		tTime[i] = nh_.now();
 80050e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e6:	00dc      	lsls	r4, r3, #3
 80050e8:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 80050ec:	19dc      	adds	r4, r3, r7
 80050ee:	463b      	mov	r3, r7
 80050f0:	49b3      	ldr	r1, [pc, #716]	@ (80053c0 <main+0x540>)
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 fd74 	bl	8006be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 80050f8:	f1a4 034c 	sub.w	r3, r4, #76	@ 0x4c
 80050fc:	463a      	mov	r2, r7
 80050fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005102:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 1; i < 3; i++) {
 8005106:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005108:	3301      	adds	r3, #1
 800510a:	653b      	str	r3, [r7, #80]	@ 0x50
 800510c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800510e:	2b02      	cmp	r3, #2
 8005110:	dde8      	ble.n	80050e4 <main+0x264>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		time_now = nh_.now();
 8005112:	463b      	mov	r3, r7
 8005114:	49aa      	ldr	r1, [pc, #680]	@ (80053c0 <main+0x540>)
 8005116:	4618      	mov	r0, r3
 8005118:	f001 fd62 	bl	8006be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 800511c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005120:	463a      	mov	r2, r7
 8005122:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005126:	e883 0003 	stmia.w	r3, {r0, r1}
		if ((time_now - tTime[0]).toSec() > 0.05) {
 800512a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800512e:	f107 020c 	add.w	r2, r7, #12
 8005132:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005136:	4618      	mov	r0, r3
 8005138:	f7fb ffe4 	bl	8001104 <_ZNK3ros4TimemiERKS0_>
 800513c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005140:	4618      	mov	r0, r3
 8005142:	f7fc f839 	bl	80011b8 <_ZNK3ros8Duration5toSecEv>
 8005146:	ec51 0b10 	vmov	r0, r1, d0
 800514a:	2301      	movs	r3, #1
 800514c:	461c      	mov	r4, r3
 800514e:	a398      	add	r3, pc, #608	@ (adr r3, 80053b0 <main+0x530>)
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7fb fd00 	bl	8000b58 <__aeabi_dcmpgt>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <main+0x2e2>
 800515e:	2300      	movs	r3, #0
 8005160:	461c      	mov	r4, r3
 8005162:	b2e3      	uxtb	r3, r4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d065      	beq.n	8005234 <main+0x3b4>
			/* IMU */
			imu_.roll = mpu.getAngleX();
 8005168:	4896      	ldr	r0, [pc, #600]	@ (80053c4 <main+0x544>)
 800516a:	f7fb ffef 	bl	800114c <_ZN7MPU92509getAngleXEv>
 800516e:	eeb0 7a40 	vmov.f32	s14, s0
 8005172:	eef0 7a60 	vmov.f32	s15, s1
 8005176:	4b94      	ldr	r3, [pc, #592]	@ (80053c8 <main+0x548>)
 8005178:	ed83 7b02 	vstr	d7, [r3, #8]
			imu_.pitch = mpu.getAngleY();
 800517c:	4891      	ldr	r0, [pc, #580]	@ (80053c4 <main+0x544>)
 800517e:	f7fb fff7 	bl	8001170 <_ZN7MPU92509getAngleYEv>
 8005182:	eeb0 7a40 	vmov.f32	s14, s0
 8005186:	eef0 7a60 	vmov.f32	s15, s1
 800518a:	4b8f      	ldr	r3, [pc, #572]	@ (80053c8 <main+0x548>)
 800518c:	ed83 7b04 	vstr	d7, [r3, #16]
			imu_.yaw = mpu.getAngleZ();
 8005190:	488c      	ldr	r0, [pc, #560]	@ (80053c4 <main+0x544>)
 8005192:	f7fb ffff 	bl	8001194 <_ZN7MPU92509getAngleZEv>
 8005196:	eeb0 7a40 	vmov.f32	s14, s0
 800519a:	eef0 7a60 	vmov.f32	s15, s1
 800519e:	4b8a      	ldr	r3, [pc, #552]	@ (80053c8 <main+0x548>)
 80051a0:	ed83 7b06 	vstr	d7, [r3, #24]
			imu_pub_.publish(&imu_);
 80051a4:	4988      	ldr	r1, [pc, #544]	@ (80053c8 <main+0x548>)
 80051a6:	4889      	ldr	r0, [pc, #548]	@ (80053cc <main+0x54c>)
 80051a8:	f7fc fe9b 	bl	8001ee2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

			/* Motor */
			motor_.speed_sp[FRONT_LEFT] = motor_front_left_.speed_sp;
 80051ac:	4b88      	ldr	r3, [pc, #544]	@ (80053d0 <main+0x550>)
 80051ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051b2:	4988      	ldr	r1, [pc, #544]	@ (80053d4 <main+0x554>)
 80051b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
			motor_.speed_sp[FRONT_RIGHT] = motor_front_right_.speed_sp;
 80051b8:	4b87      	ldr	r3, [pc, #540]	@ (80053d8 <main+0x558>)
 80051ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051be:	4985      	ldr	r1, [pc, #532]	@ (80053d4 <main+0x554>)
 80051c0:	e9c1 2304 	strd	r2, r3, [r1, #16]
			motor_.speed_sp[REAR_LEFT] = motor_rear_left_.speed_sp;
 80051c4:	4b85      	ldr	r3, [pc, #532]	@ (80053dc <main+0x55c>)
 80051c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051ca:	4982      	ldr	r1, [pc, #520]	@ (80053d4 <main+0x554>)
 80051cc:	e9c1 2306 	strd	r2, r3, [r1, #24]
			motor_.speed_sp[REAR_RIGHT] = motor_rear_right_.speed_sp;
 80051d0:	4b83      	ldr	r3, [pc, #524]	@ (80053e0 <main+0x560>)
 80051d2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051d6:	497f      	ldr	r1, [pc, #508]	@ (80053d4 <main+0x554>)
 80051d8:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_.speed_fb[FRONT_LEFT] = motor_front_left_.speed_pv;
 80051dc:	4b7c      	ldr	r3, [pc, #496]	@ (80053d0 <main+0x550>)
 80051de:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051e2:	497c      	ldr	r1, [pc, #496]	@ (80053d4 <main+0x554>)
 80051e4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
			motor_.speed_fb[FRONT_RIGHT] = motor_front_right_.speed_pv;
 80051e8:	4b7b      	ldr	r3, [pc, #492]	@ (80053d8 <main+0x558>)
 80051ea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051ee:	4979      	ldr	r1, [pc, #484]	@ (80053d4 <main+0x554>)
 80051f0:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
			motor_.speed_fb[REAR_LEFT] = motor_rear_left_.speed_pv;
 80051f4:	4b79      	ldr	r3, [pc, #484]	@ (80053dc <main+0x55c>)
 80051f6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051fa:	4976      	ldr	r1, [pc, #472]	@ (80053d4 <main+0x554>)
 80051fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
			motor_.speed_fb[REAR_RIGHT] = motor_rear_right_.speed_pv;
 8005200:	4b77      	ldr	r3, [pc, #476]	@ (80053e0 <main+0x560>)
 8005202:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005206:	4973      	ldr	r1, [pc, #460]	@ (80053d4 <main+0x554>)
 8005208:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
			motor_pub_.publish(&motor_);
 800520c:	4971      	ldr	r1, [pc, #452]	@ (80053d4 <main+0x554>)
 800520e:	4875      	ldr	r0, [pc, #468]	@ (80053e4 <main+0x564>)
 8005210:	f7fc fe67 	bl	8001ee2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8005214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005218:	4873      	ldr	r0, [pc, #460]	@ (80053e8 <main+0x568>)
 800521a:	f004 fd58 	bl	8009cce <HAL_GPIO_TogglePin>
			nh_.spinOnce();
 800521e:	4868      	ldr	r0, [pc, #416]	@ (80053c0 <main+0x540>)
 8005220:	f001 fd1a 	bl	8006c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

			tTime[0] = time_now;
 8005224:	f107 030c 	add.w	r3, r7, #12
 8005228:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800522c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005230:	e883 0003 	stmia.w	r3, {r0, r1}
		}

		if ((time_now - tTime[1]).toSec() > 0.01) {
 8005234:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8005238:	f107 030c 	add.w	r3, r7, #12
 800523c:	f103 0208 	add.w	r2, r3, #8
 8005240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005244:	4619      	mov	r1, r3
 8005246:	f7fb ff5d 	bl	8001104 <_ZNK3ros4TimemiERKS0_>
 800524a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800524e:	4618      	mov	r0, r3
 8005250:	f7fb ffb2 	bl	80011b8 <_ZNK3ros8Duration5toSecEv>
 8005254:	ec51 0b10 	vmov	r0, r1, d0
 8005258:	2301      	movs	r3, #1
 800525a:	461c      	mov	r4, r3
 800525c:	a356      	add	r3, pc, #344	@ (adr r3, 80053b8 <main+0x538>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fb fc79 	bl	8000b58 <__aeabi_dcmpgt>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <main+0x3f0>
 800526c:	2300      	movs	r3, #0
 800526e:	461c      	mov	r4, r3
 8005270:	b2e3      	uxtb	r3, r4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d06e      	beq.n	8005354 <main+0x4d4>
			motor_front_left_.speed_sp = set_speed_motor_[FRONT_LEFT];
 8005276:	4b5d      	ldr	r3, [pc, #372]	@ (80053ec <main+0x56c>)
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	4954      	ldr	r1, [pc, #336]	@ (80053d0 <main+0x550>)
 800527e:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_front_right_.speed_sp = set_speed_motor_[FRONT_RIGHT];
 8005282:	4b5a      	ldr	r3, [pc, #360]	@ (80053ec <main+0x56c>)
 8005284:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005288:	4953      	ldr	r1, [pc, #332]	@ (80053d8 <main+0x558>)
 800528a:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_rear_left_.speed_sp = set_speed_motor_[REAR_LEFT];
 800528e:	4b57      	ldr	r3, [pc, #348]	@ (80053ec <main+0x56c>)
 8005290:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005294:	4951      	ldr	r1, [pc, #324]	@ (80053dc <main+0x55c>)
 8005296:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_rear_right_.speed_sp = set_speed_motor_[REAR_RIGHT];
 800529a:	4b54      	ldr	r3, [pc, #336]	@ (80053ec <main+0x56c>)
 800529c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80052a0:	494f      	ldr	r1, [pc, #316]	@ (80053e0 <main+0x560>)
 80052a2:	e9c1 2308 	strd	r2, r3, [r1, #32]
//			motor_front_left_.speed_sp = 10;
//			motor_front_right_.speed_sp = -10;
//			motor_rear_left_.speed_sp = 10;
//			motor_rear_right_.speed_sp = -10;

			if ((time_now - last_time_cmd_vel_).toSec() > 1.0) {
 80052a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80052aa:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80052ae:	4a50      	ldr	r2, [pc, #320]	@ (80053f0 <main+0x570>)
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fb ff27 	bl	8001104 <_ZNK3ros4TimemiERKS0_>
 80052b6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fb ff7c 	bl	80011b8 <_ZNK3ros8Duration5toSecEv>
 80052c0:	ec51 0b10 	vmov	r0, r1, d0
 80052c4:	2301      	movs	r3, #1
 80052c6:	461c      	mov	r4, r3
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	4b49      	ldr	r3, [pc, #292]	@ (80053f4 <main+0x574>)
 80052ce:	f7fb fc43 	bl	8000b58 <__aeabi_dcmpgt>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <main+0x45c>
 80052d8:	2300      	movs	r3, #0
 80052da:	461c      	mov	r4, r3
 80052dc:	b2e3      	uxtb	r3, r4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01b      	beq.n	800531a <main+0x49a>
				motor_front_left_.speed_sp = 0.0f;
 80052e2:	493b      	ldr	r1, [pc, #236]	@ (80053d0 <main+0x550>)
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	e9c1 2308 	strd	r2, r3, [r1, #32]
				motor_front_right_.speed_sp = 0.0f;
 80052f0:	4939      	ldr	r1, [pc, #228]	@ (80053d8 <main+0x558>)
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
				motor_rear_left_.speed_sp = 0.0f;
 80052fe:	4937      	ldr	r1, [pc, #220]	@ (80053dc <main+0x55c>)
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	e9c1 2308 	strd	r2, r3, [r1, #32]
				motor_rear_right_.speed_sp = 0.0f;
 800530c:	4934      	ldr	r1, [pc, #208]	@ (80053e0 <main+0x560>)
 800530e:	f04f 0200 	mov.w	r2, #0
 8005312:	f04f 0300 	mov.w	r3, #0
 8005316:	e9c1 2308 	strd	r2, r3, [r1, #32]
			}

			motor_front_left_drive(0.01);
 800531a:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 80053b8 <main+0x538>
 800531e:	f000 fe07 	bl	8005f30 <_Z22motor_front_left_drived>
			motor_front_right_drive(0.01);
 8005322:	ed9f 0b25 	vldr	d0, [pc, #148]	@ 80053b8 <main+0x538>
 8005326:	f000 fecb 	bl	80060c0 <_Z23motor_front_right_drived>
			motor_rear_left_drive(0.01);
 800532a:	ed9f 0b23 	vldr	d0, [pc, #140]	@ 80053b8 <main+0x538>
 800532e:	f000 ff8f 	bl	8006250 <_Z21motor_rear_left_drived>
			motor_rear_right_drive(0.01);
 8005332:	ed9f 0b21 	vldr	d0, [pc, #132]	@ 80053b8 <main+0x538>
 8005336:	f001 f853 	bl	80063e0 <_Z22motor_rear_right_drived>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800533a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800533e:	482a      	ldr	r0, [pc, #168]	@ (80053e8 <main+0x568>)
 8005340:	f004 fcc5 	bl	8009cce <HAL_GPIO_TogglePin>
			tTime[1] = time_now;
 8005344:	f107 0314 	add.w	r3, r7, #20
 8005348:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800534c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005350:	e883 0003 	stmia.w	r3, {r0, r1}
		}

		if ((time_now - tTime[2]).toSec() > 0.01) {
 8005354:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	f103 0210 	add.w	r2, r3, #16
 8005360:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005364:	4619      	mov	r1, r3
 8005366:	f7fb fecd 	bl	8001104 <_ZNK3ros4TimemiERKS0_>
 800536a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800536e:	4618      	mov	r0, r3
 8005370:	f7fb ff22 	bl	80011b8 <_ZNK3ros8Duration5toSecEv>
 8005374:	ec51 0b10 	vmov	r0, r1, d0
 8005378:	2301      	movs	r3, #1
 800537a:	461c      	mov	r4, r3
 800537c:	a30e      	add	r3, pc, #56	@ (adr r3, 80053b8 <main+0x538>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fb fbe9 	bl	8000b58 <__aeabi_dcmpgt>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <main+0x510>
 800538c:	2300      	movs	r3, #0
 800538e:	461c      	mov	r4, r3
 8005390:	b2e3      	uxtb	r3, r4
 8005392:	2b00      	cmp	r3, #0
 8005394:	f43f aebd 	beq.w	8005112 <main+0x292>
			uint8_t status = mpu.update();
 8005398:	480a      	ldr	r0, [pc, #40]	@ (80053c4 <main+0x544>)
 800539a:	f002 ff39 	bl	8008210 <_ZN7MPU92506updateEv>
 800539e:	4603      	mov	r3, r0
 80053a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			if (status != HAL_OK) {
 80053a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d045      	beq.n	8005438 <main+0x5b8>
				while (status != HAL_OK) {
 80053ac:	e035      	b.n	800541a <main+0x59a>
 80053ae:	bf00      	nop
 80053b0:	9999999a 	.word	0x9999999a
 80053b4:	3fa99999 	.word	0x3fa99999
 80053b8:	47ae147b 	.word	0x47ae147b
 80053bc:	3f847ae1 	.word	0x3f847ae1
 80053c0:	20000758 	.word	0x20000758
 80053c4:	20000518 	.word	0x20000518
 80053c8:	200010a0 	.word	0x200010a0
 80053cc:	20001168 	.word	0x20001168
 80053d0:	200005d8 	.word	0x200005d8
 80053d4:	200010c0 	.word	0x200010c0
 80053d8:	20000608 	.word	0x20000608
 80053dc:	20000638 	.word	0x20000638
 80053e0:	20000668 	.word	0x20000668
 80053e4:	2000117c 	.word	0x2000117c
 80053e8:	40020400 	.word	0x40020400
 80053ec:	20001240 	.word	0x20001240
 80053f0:	20001094 	.word	0x20001094
 80053f4:	3ff00000 	.word	0x3ff00000
					status = mpu.begin();
 80053f8:	2200      	movs	r2, #0
 80053fa:	2101      	movs	r1, #1
 80053fc:	4811      	ldr	r0, [pc, #68]	@ (8005444 <main+0x5c4>)
 80053fe:	f002 fb83 	bl	8007b08 <_ZN7MPU92505beginEii>
 8005402:	4603      	mov	r3, r0
 8005404:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8005408:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800540c:	480e      	ldr	r0, [pc, #56]	@ (8005448 <main+0x5c8>)
 800540e:	f004 fc5e 	bl	8009cce <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 8005412:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005416:	f003 fd75 	bl	8008f04 <HAL_Delay>
				while (status != HAL_OK) {
 800541a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1ea      	bne.n	80053f8 <main+0x578>
				}
				mpu.calcOffsets();
 8005422:	2201      	movs	r2, #1
 8005424:	2101      	movs	r1, #1
 8005426:	4807      	ldr	r0, [pc, #28]	@ (8005444 <main+0x5c4>)
 8005428:	f002 fd0a 	bl	8007e40 <_ZN7MPU925011calcOffsetsEbb>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800542c:	2201      	movs	r2, #1
 800542e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005432:	4805      	ldr	r0, [pc, #20]	@ (8005448 <main+0x5c8>)
 8005434:	f004 fc32 	bl	8009c9c <HAL_GPIO_WritePin>
			}
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8005438:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800543c:	4802      	ldr	r0, [pc, #8]	@ (8005448 <main+0x5c8>)
 800543e:	f004 fc46 	bl	8009cce <HAL_GPIO_TogglePin>
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
 8005442:	e666      	b.n	8005112 <main+0x292>
 8005444:	20000518 	.word	0x20000518
 8005448:	40020400 	.word	0x40020400

0800544c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b094      	sub	sp, #80	@ 0x50
 8005450:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005452:	f107 031c 	add.w	r3, r7, #28
 8005456:	2234      	movs	r2, #52	@ 0x34
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f00a f88b 	bl	800f576 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005460:	f107 0308 	add.w	r3, r7, #8
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
 8005468:	605a      	str	r2, [r3, #4]
 800546a:	609a      	str	r2, [r3, #8]
 800546c:	60da      	str	r2, [r3, #12]
 800546e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005470:	2300      	movs	r3, #0
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	4b34      	ldr	r3, [pc, #208]	@ (8005548 <_Z18SystemClock_Configv+0xfc>)
 8005476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005478:	4a33      	ldr	r2, [pc, #204]	@ (8005548 <_Z18SystemClock_Configv+0xfc>)
 800547a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800547e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005480:	4b31      	ldr	r3, [pc, #196]	@ (8005548 <_Z18SystemClock_Configv+0xfc>)
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005488:	607b      	str	r3, [r7, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800548c:	2300      	movs	r3, #0
 800548e:	603b      	str	r3, [r7, #0]
 8005490:	4b2e      	ldr	r3, [pc, #184]	@ (800554c <_Z18SystemClock_Configv+0x100>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2d      	ldr	r2, [pc, #180]	@ (800554c <_Z18SystemClock_Configv+0x100>)
 8005496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800549a:	6013      	str	r3, [r2, #0]
 800549c:	4b2b      	ldr	r3, [pc, #172]	@ (800554c <_Z18SystemClock_Configv+0x100>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80054a8:	2301      	movs	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054b0:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054b2:	2302      	movs	r3, #2
 80054b4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80054ba:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 15;
 80054bc:	230f      	movs	r3, #15
 80054be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 80054c0:	23d8      	movs	r3, #216	@ 0xd8
 80054c2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054c4:	2302      	movs	r3, #2
 80054c6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80054c8:	2302      	movs	r3, #2
 80054ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80054cc:	2302      	movs	r3, #2
 80054ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80054d0:	f107 031c 	add.w	r3, r7, #28
 80054d4:	4618      	mov	r0, r3
 80054d6:	f005 ff4d 	bl	800b374 <HAL_RCC_OscConfig>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d001      	beq.n	80054ee <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 80054ea:	f001 fad5 	bl	8006a98 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80054ee:	f005 fc2d 	bl	800ad4c <HAL_PWREx_EnableOverDrive>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bf14      	ite	ne
 80054f8:	2301      	movne	r3, #1
 80054fa:	2300      	moveq	r3, #0
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 8005502:	f001 fac9 	bl	8006a98 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005506:	230f      	movs	r3, #15
 8005508:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800550a:	2302      	movs	r3, #2
 800550c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800550e:	2300      	movs	r3, #0
 8005510:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005512:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8005516:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800551c:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800551e:	f107 0308 	add.w	r3, r7, #8
 8005522:	2105      	movs	r1, #5
 8005524:	4618      	mov	r0, r3
 8005526:	f005 fc61 	bl	800adec <HAL_RCC_ClockConfig>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	bf14      	ite	ne
 8005530:	2301      	movne	r3, #1
 8005532:	2300      	moveq	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 800553a:	f001 faad 	bl	8006a98 <Error_Handler>
	}
}
 800553e:	bf00      	nop
 8005540:	3750      	adds	r7, #80	@ 0x50
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
 800554c:	40007000 	.word	0x40007000

08005550 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8005554:	4b15      	ldr	r3, [pc, #84]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 8005556:	4a16      	ldr	r2, [pc, #88]	@ (80055b0 <_ZL12MX_I2C1_Initv+0x60>)
 8005558:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800555a:	4b14      	ldr	r3, [pc, #80]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 800555c:	4a15      	ldr	r2, [pc, #84]	@ (80055b4 <_ZL12MX_I2C1_Initv+0x64>)
 800555e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005560:	4b12      	ldr	r3, [pc, #72]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 8005562:	2200      	movs	r2, #0
 8005564:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8005566:	4b11      	ldr	r3, [pc, #68]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 8005568:	2200      	movs	r2, #0
 800556a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800556c:	4b0f      	ldr	r3, [pc, #60]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 800556e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005572:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005574:	4b0d      	ldr	r3, [pc, #52]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 8005576:	2200      	movs	r2, #0
 8005578:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800557a:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 800557c:	2200      	movs	r2, #0
 800557e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005580:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 8005582:	2200      	movs	r2, #0
 8005584:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005586:	4b09      	ldr	r3, [pc, #36]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 8005588:	2200      	movs	r2, #0
 800558a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800558c:	4807      	ldr	r0, [pc, #28]	@ (80055ac <_ZL12MX_I2C1_Initv+0x5c>)
 800558e:	f004 fbb9 	bl	8009d04 <HAL_I2C_Init>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 80055a2:	f001 fa79 	bl	8006a98 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80055a6:	bf00      	nop
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000208 	.word	0x20000208
 80055b0:	40005400 	.word	0x40005400
 80055b4:	000186a0 	.word	0x000186a0

080055b8 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08c      	sub	sp, #48	@ 0x30
 80055bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80055be:	f107 030c 	add.w	r3, r7, #12
 80055c2:	2224      	movs	r2, #36	@ 0x24
 80055c4:	2100      	movs	r1, #0
 80055c6:	4618      	mov	r0, r3
 80055c8:	f009 ffd5 	bl	800f576 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80055cc:	1d3b      	adds	r3, r7, #4
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80055d4:	4b27      	ldr	r3, [pc, #156]	@ (8005674 <_ZL12MX_TIM1_Initv+0xbc>)
 80055d6:	4a28      	ldr	r2, [pc, #160]	@ (8005678 <_ZL12MX_TIM1_Initv+0xc0>)
 80055d8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80055da:	4b26      	ldr	r3, [pc, #152]	@ (8005674 <_ZL12MX_TIM1_Initv+0xbc>)
 80055dc:	2200      	movs	r2, #0
 80055de:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055e0:	4b24      	ldr	r3, [pc, #144]	@ (8005674 <_ZL12MX_TIM1_Initv+0xbc>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 60000;
 80055e6:	4b23      	ldr	r3, [pc, #140]	@ (8005674 <_ZL12MX_TIM1_Initv+0xbc>)
 80055e8:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80055ec:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055ee:	4b21      	ldr	r3, [pc, #132]	@ (8005674 <_ZL12MX_TIM1_Initv+0xbc>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80055f4:	4b1f      	ldr	r3, [pc, #124]	@ (8005674 <_ZL12MX_TIM1_Initv+0xbc>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005674 <_ZL12MX_TIM1_Initv+0xbc>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005600:	2303      	movs	r3, #3
 8005602:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005604:	2300      	movs	r3, #0
 8005606:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800560c:	2300      	movs	r3, #0
 800560e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005614:	2300      	movs	r3, #0
 8005616:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005618:	2301      	movs	r3, #1
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800561c:	2300      	movs	r3, #0
 800561e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8005624:	f107 030c 	add.w	r3, r7, #12
 8005628:	4619      	mov	r1, r3
 800562a:	4812      	ldr	r0, [pc, #72]	@ (8005674 <_ZL12MX_TIM1_Initv+0xbc>)
 800562c:	f006 fb18 	bl	800bc60 <HAL_TIM_Encoder_Init>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf14      	ite	ne
 8005636:	2301      	movne	r3, #1
 8005638:	2300      	moveq	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <_ZL12MX_TIM1_Initv+0x8c>
		Error_Handler();
 8005640:	f001 fa2a 	bl	8006a98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005644:	2300      	movs	r3, #0
 8005646:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005648:	2300      	movs	r3, #0
 800564a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 800564c:	1d3b      	adds	r3, r7, #4
 800564e:	4619      	mov	r1, r3
 8005650:	4808      	ldr	r0, [pc, #32]	@ (8005674 <_ZL12MX_TIM1_Initv+0xbc>)
 8005652:	f007 f9f7 	bl	800ca44 <HAL_TIMEx_MasterConfigSynchronization>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	bf14      	ite	ne
 800565c:	2301      	movne	r3, #1
 800565e:	2300      	moveq	r3, #0
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <_ZL12MX_TIM1_Initv+0xb2>
		Error_Handler();
 8005666:	f001 fa17 	bl	8006a98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800566a:	bf00      	nop
 800566c:	3730      	adds	r7, #48	@ 0x30
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	2000025c 	.word	0x2000025c
 8005678:	40010000 	.word	0x40010000

0800567c <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	@ 0x28
 8005680:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005682:	f107 0320 	add.w	r3, r7, #32
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800568c:	1d3b      	adds	r3, r7, #4
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	605a      	str	r2, [r3, #4]
 8005694:	609a      	str	r2, [r3, #8]
 8005696:	60da      	str	r2, [r3, #12]
 8005698:	611a      	str	r2, [r3, #16]
 800569a:	615a      	str	r2, [r3, #20]
 800569c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800569e:	4b42      	ldr	r3, [pc, #264]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 80056a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80056a4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 45 - 1;
 80056a6:	4b40      	ldr	r3, [pc, #256]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 80056a8:	222c      	movs	r2, #44	@ 0x2c
 80056aa:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ac:	4b3e      	ldr	r3, [pc, #248]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80056b2:	4b3d      	ldr	r3, [pc, #244]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 80056b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80056b8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056ba:	4b3b      	ldr	r3, [pc, #236]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 80056bc:	2200      	movs	r2, #0
 80056be:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056c0:	4b39      	ldr	r3, [pc, #228]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80056c6:	4838      	ldr	r0, [pc, #224]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 80056c8:	f006 f9b2 	bl	800ba30 <HAL_TIM_PWM_Init>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	bf14      	ite	ne
 80056d2:	2301      	movne	r3, #1
 80056d4:	2300      	moveq	r3, #0
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <_ZL12MX_TIM2_Initv+0x64>
		Error_Handler();
 80056dc:	f001 f9dc 	bl	8006a98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056e0:	2300      	movs	r3, #0
 80056e2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80056e8:	f107 0320 	add.w	r3, r7, #32
 80056ec:	4619      	mov	r1, r3
 80056ee:	482e      	ldr	r0, [pc, #184]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 80056f0:	f007 f9a8 	bl	800ca44 <HAL_TIMEx_MasterConfigSynchronization>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	bf14      	ite	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	2300      	moveq	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <_ZL12MX_TIM2_Initv+0x8c>
		Error_Handler();
 8005704:	f001 f9c8 	bl	8006a98 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005708:	2360      	movs	r3, #96	@ 0x60
 800570a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005714:	2300      	movs	r3, #0
 8005716:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8005718:	1d3b      	adds	r3, r7, #4
 800571a:	2200      	movs	r2, #0
 800571c:	4619      	mov	r1, r3
 800571e:	4822      	ldr	r0, [pc, #136]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 8005720:	f006 fcc2 	bl	800c0a8 <HAL_TIM_PWM_ConfigChannel>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	bf14      	ite	ne
 800572a:	2301      	movne	r3, #1
 800572c:	2300      	moveq	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <_ZL12MX_TIM2_Initv+0xbc>
		Error_Handler();
 8005734:	f001 f9b0 	bl	8006a98 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8005738:	1d3b      	adds	r3, r7, #4
 800573a:	2204      	movs	r2, #4
 800573c:	4619      	mov	r1, r3
 800573e:	481a      	ldr	r0, [pc, #104]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 8005740:	f006 fcb2 	bl	800c0a8 <HAL_TIM_PWM_ConfigChannel>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	bf14      	ite	ne
 800574a:	2301      	movne	r3, #1
 800574c:	2300      	moveq	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <_ZL12MX_TIM2_Initv+0xdc>
		Error_Handler();
 8005754:	f001 f9a0 	bl	8006a98 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8005758:	1d3b      	adds	r3, r7, #4
 800575a:	2208      	movs	r2, #8
 800575c:	4619      	mov	r1, r3
 800575e:	4812      	ldr	r0, [pc, #72]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 8005760:	f006 fca2 	bl	800c0a8 <HAL_TIM_PWM_ConfigChannel>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf14      	ite	ne
 800576a:	2301      	movne	r3, #1
 800576c:	2300      	moveq	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <_ZL12MX_TIM2_Initv+0xfc>
		Error_Handler();
 8005774:	f001 f990 	bl	8006a98 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8005778:	1d3b      	adds	r3, r7, #4
 800577a:	220c      	movs	r2, #12
 800577c:	4619      	mov	r1, r3
 800577e:	480a      	ldr	r0, [pc, #40]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 8005780:	f006 fc92 	bl	800c0a8 <HAL_TIM_PWM_ConfigChannel>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	bf14      	ite	ne
 800578a:	2301      	movne	r3, #1
 800578c:	2300      	moveq	r3, #0
 800578e:	b2db      	uxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <_ZL12MX_TIM2_Initv+0x11c>
		Error_Handler();
 8005794:	f001 f980 	bl	8006a98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8005798:	4803      	ldr	r0, [pc, #12]	@ (80057a8 <_ZL12MX_TIM2_Initv+0x12c>)
 800579a:	f003 f8b9 	bl	8008910 <HAL_TIM_MspPostInit>

}
 800579e:	bf00      	nop
 80057a0:	3728      	adds	r7, #40	@ 0x28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	200002a4 	.word	0x200002a4

080057ac <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b08c      	sub	sp, #48	@ 0x30
 80057b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80057b2:	f107 030c 	add.w	r3, r7, #12
 80057b6:	2224      	movs	r2, #36	@ 0x24
 80057b8:	2100      	movs	r1, #0
 80057ba:	4618      	mov	r0, r3
 80057bc:	f009 fedb 	bl	800f576 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80057c0:	1d3b      	adds	r3, r7, #4
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80057c8:	4b25      	ldr	r3, [pc, #148]	@ (8005860 <_ZL12MX_TIM3_Initv+0xb4>)
 80057ca:	4a26      	ldr	r2, [pc, #152]	@ (8005864 <_ZL12MX_TIM3_Initv+0xb8>)
 80057cc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80057ce:	4b24      	ldr	r3, [pc, #144]	@ (8005860 <_ZL12MX_TIM3_Initv+0xb4>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057d4:	4b22      	ldr	r3, [pc, #136]	@ (8005860 <_ZL12MX_TIM3_Initv+0xb4>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 60000;
 80057da:	4b21      	ldr	r3, [pc, #132]	@ (8005860 <_ZL12MX_TIM3_Initv+0xb4>)
 80057dc:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80057e0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057e2:	4b1f      	ldr	r3, [pc, #124]	@ (8005860 <_ZL12MX_TIM3_Initv+0xb4>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005860 <_ZL12MX_TIM3_Initv+0xb4>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80057ee:	2303      	movs	r3, #3
 80057f0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80057f6:	2301      	movs	r3, #1
 80057f8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005802:	2300      	movs	r3, #0
 8005804:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005806:	2301      	movs	r3, #1
 8005808:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800580a:	2300      	movs	r3, #0
 800580c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8005812:	f107 030c 	add.w	r3, r7, #12
 8005816:	4619      	mov	r1, r3
 8005818:	4811      	ldr	r0, [pc, #68]	@ (8005860 <_ZL12MX_TIM3_Initv+0xb4>)
 800581a:	f006 fa21 	bl	800bc60 <HAL_TIM_Encoder_Init>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <_ZL12MX_TIM3_Initv+0x86>
		Error_Handler();
 800582e:	f001 f933 	bl	8006a98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005832:	2300      	movs	r3, #0
 8005834:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 800583a:	1d3b      	adds	r3, r7, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4808      	ldr	r0, [pc, #32]	@ (8005860 <_ZL12MX_TIM3_Initv+0xb4>)
 8005840:	f007 f900 	bl	800ca44 <HAL_TIMEx_MasterConfigSynchronization>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	d001      	beq.n	8005858 <_ZL12MX_TIM3_Initv+0xac>
		Error_Handler();
 8005854:	f001 f920 	bl	8006a98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8005858:	bf00      	nop
 800585a:	3730      	adds	r7, #48	@ 0x30
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	200002ec 	.word	0x200002ec
 8005864:	40000400 	.word	0x40000400

08005868 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800586e:	f107 0308 	add.w	r3, r7, #8
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	605a      	str	r2, [r3, #4]
 8005878:	609a      	str	r2, [r3, #8]
 800587a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800587c:	463b      	mov	r3, r7
 800587e:	2200      	movs	r2, #0
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8005884:	4b25      	ldr	r3, [pc, #148]	@ (800591c <_ZL12MX_TIM4_Initv+0xb4>)
 8005886:	4a26      	ldr	r2, [pc, #152]	@ (8005920 <_ZL12MX_TIM4_Initv+0xb8>)
 8005888:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 900 - 1;
 800588a:	4b24      	ldr	r3, [pc, #144]	@ (800591c <_ZL12MX_TIM4_Initv+0xb4>)
 800588c:	f240 3283 	movw	r2, #899	@ 0x383
 8005890:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005892:	4b22      	ldr	r3, [pc, #136]	@ (800591c <_ZL12MX_TIM4_Initv+0xb4>)
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000;
 8005898:	4b20      	ldr	r3, [pc, #128]	@ (800591c <_ZL12MX_TIM4_Initv+0xb4>)
 800589a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800589e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058a0:	4b1e      	ldr	r3, [pc, #120]	@ (800591c <_ZL12MX_TIM4_Initv+0xb4>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058a6:	4b1d      	ldr	r3, [pc, #116]	@ (800591c <_ZL12MX_TIM4_Initv+0xb4>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80058ac:	481b      	ldr	r0, [pc, #108]	@ (800591c <_ZL12MX_TIM4_Initv+0xb4>)
 80058ae:	f005 ffff 	bl	800b8b0 <HAL_TIM_Base_Init>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <_ZL12MX_TIM4_Initv+0x5e>
		Error_Handler();
 80058c2:	f001 f8e9 	bl	8006a98 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80058ca:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80058cc:	f107 0308 	add.w	r3, r7, #8
 80058d0:	4619      	mov	r1, r3
 80058d2:	4812      	ldr	r0, [pc, #72]	@ (800591c <_ZL12MX_TIM4_Initv+0xb4>)
 80058d4:	f006 fcaa 	bl	800c22c <HAL_TIM_ConfigClockSource>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bf14      	ite	ne
 80058de:	2301      	movne	r3, #1
 80058e0:	2300      	moveq	r3, #0
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d001      	beq.n	80058ec <_ZL12MX_TIM4_Initv+0x84>
		Error_Handler();
 80058e8:	f001 f8d6 	bl	8006a98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058ec:	2300      	movs	r3, #0
 80058ee:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058f0:	2300      	movs	r3, #0
 80058f2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80058f4:	463b      	mov	r3, r7
 80058f6:	4619      	mov	r1, r3
 80058f8:	4808      	ldr	r0, [pc, #32]	@ (800591c <_ZL12MX_TIM4_Initv+0xb4>)
 80058fa:	f007 f8a3 	bl	800ca44 <HAL_TIMEx_MasterConfigSynchronization>
 80058fe:	4603      	mov	r3, r0
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <_ZL12MX_TIM4_Initv+0xaa>
		Error_Handler();
 800590e:	f001 f8c3 	bl	8006a98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8005912:	bf00      	nop
 8005914:	3718      	adds	r7, #24
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000334 	.word	0x20000334
 8005920:	40000800 	.word	0x40000800

08005924 <_ZL12MX_TIM5_Initv>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	@ 0x30
 8005928:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800592a:	f107 030c 	add.w	r3, r7, #12
 800592e:	2224      	movs	r2, #36	@ 0x24
 8005930:	2100      	movs	r1, #0
 8005932:	4618      	mov	r0, r3
 8005934:	f009 fe1f 	bl	800f576 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]
 800593e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8005940:	4b25      	ldr	r3, [pc, #148]	@ (80059d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8005942:	4a26      	ldr	r2, [pc, #152]	@ (80059dc <_ZL12MX_TIM5_Initv+0xb8>)
 8005944:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8005946:	4b24      	ldr	r3, [pc, #144]	@ (80059d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8005948:	2200      	movs	r2, #0
 800594a:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800594c:	4b22      	ldr	r3, [pc, #136]	@ (80059d8 <_ZL12MX_TIM5_Initv+0xb4>)
 800594e:	2200      	movs	r2, #0
 8005950:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 60000;
 8005952:	4b21      	ldr	r3, [pc, #132]	@ (80059d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8005954:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8005958:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800595a:	4b1f      	ldr	r3, [pc, #124]	@ (80059d8 <_ZL12MX_TIM5_Initv+0xb4>)
 800595c:	2200      	movs	r2, #0
 800595e:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005960:	4b1d      	ldr	r3, [pc, #116]	@ (80059d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8005962:	2200      	movs	r2, #0
 8005964:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005966:	2303      	movs	r3, #3
 8005968:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800596a:	2300      	movs	r3, #0
 800596c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800596e:	2301      	movs	r3, #1
 8005970:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800597a:	2300      	movs	r3, #0
 800597c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800597e:	2301      	movs	r3, #1
 8005980:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005982:	2300      	movs	r3, #0
 8005984:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 800598a:	f107 030c 	add.w	r3, r7, #12
 800598e:	4619      	mov	r1, r3
 8005990:	4811      	ldr	r0, [pc, #68]	@ (80059d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8005992:	f006 f965 	bl	800bc60 <HAL_TIM_Encoder_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf14      	ite	ne
 800599c:	2301      	movne	r3, #1
 800599e:	2300      	moveq	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <_ZL12MX_TIM5_Initv+0x86>
		Error_Handler();
 80059a6:	f001 f877 	bl	8006a98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059aa:	2300      	movs	r3, #0
 80059ac:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80059b2:	1d3b      	adds	r3, r7, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4808      	ldr	r0, [pc, #32]	@ (80059d8 <_ZL12MX_TIM5_Initv+0xb4>)
 80059b8:	f007 f844 	bl	800ca44 <HAL_TIMEx_MasterConfigSynchronization>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bf14      	ite	ne
 80059c2:	2301      	movne	r3, #1
 80059c4:	2300      	moveq	r3, #0
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <_ZL12MX_TIM5_Initv+0xac>
		Error_Handler();
 80059cc:	f001 f864 	bl	8006a98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80059d0:	bf00      	nop
 80059d2:	3730      	adds	r7, #48	@ 0x30
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	2000037c 	.word	0x2000037c
 80059dc:	40000c00 	.word	0x40000c00

080059e0 <_ZL12MX_TIM8_Initv>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08c      	sub	sp, #48	@ 0x30
 80059e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80059e6:	f107 030c 	add.w	r3, r7, #12
 80059ea:	2224      	movs	r2, #36	@ 0x24
 80059ec:	2100      	movs	r1, #0
 80059ee:	4618      	mov	r0, r3
 80059f0:	f009 fdc1 	bl	800f576 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80059f4:	1d3b      	adds	r3, r7, #4
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]
 80059fa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80059fc:	4b27      	ldr	r3, [pc, #156]	@ (8005a9c <_ZL12MX_TIM8_Initv+0xbc>)
 80059fe:	4a28      	ldr	r2, [pc, #160]	@ (8005aa0 <_ZL12MX_TIM8_Initv+0xc0>)
 8005a00:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8005a02:	4b26      	ldr	r3, [pc, #152]	@ (8005a9c <_ZL12MX_TIM8_Initv+0xbc>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a08:	4b24      	ldr	r3, [pc, #144]	@ (8005a9c <_ZL12MX_TIM8_Initv+0xbc>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 60000;
 8005a0e:	4b23      	ldr	r3, [pc, #140]	@ (8005a9c <_ZL12MX_TIM8_Initv+0xbc>)
 8005a10:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8005a14:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a16:	4b21      	ldr	r3, [pc, #132]	@ (8005a9c <_ZL12MX_TIM8_Initv+0xbc>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8005a9c <_ZL12MX_TIM8_Initv+0xbc>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a22:	4b1e      	ldr	r3, [pc, #120]	@ (8005a9c <_ZL12MX_TIM8_Initv+0xbc>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005a30:	2301      	movs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005a34:	2300      	movs	r3, #0
 8005a36:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a40:	2301      	movs	r3, #1
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a44:	2300      	movs	r3, #0
 8005a46:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 8005a4c:	f107 030c 	add.w	r3, r7, #12
 8005a50:	4619      	mov	r1, r3
 8005a52:	4812      	ldr	r0, [pc, #72]	@ (8005a9c <_ZL12MX_TIM8_Initv+0xbc>)
 8005a54:	f006 f904 	bl	800bc60 <HAL_TIM_Encoder_Init>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bf14      	ite	ne
 8005a5e:	2301      	movne	r3, #1
 8005a60:	2300      	moveq	r3, #0
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d001      	beq.n	8005a6c <_ZL12MX_TIM8_Initv+0x8c>
		Error_Handler();
 8005a68:	f001 f816 	bl	8006a98 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8005a74:	1d3b      	adds	r3, r7, #4
 8005a76:	4619      	mov	r1, r3
 8005a78:	4808      	ldr	r0, [pc, #32]	@ (8005a9c <_ZL12MX_TIM8_Initv+0xbc>)
 8005a7a:	f006 ffe3 	bl	800ca44 <HAL_TIMEx_MasterConfigSynchronization>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf14      	ite	ne
 8005a84:	2301      	movne	r3, #1
 8005a86:	2300      	moveq	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <_ZL12MX_TIM8_Initv+0xb2>
		Error_Handler();
 8005a8e:	f001 f803 	bl	8006a98 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8005a92:	bf00      	nop
 8005a94:	3730      	adds	r7, #48	@ 0x30
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200003c4 	.word	0x200003c4
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8005aa8:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005aaa:	4a14      	ldr	r2, [pc, #80]	@ (8005afc <_ZL19MX_USART1_UART_Initv+0x58>)
 8005aac:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8005aae:	4b12      	ldr	r3, [pc, #72]	@ (8005af8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005ab4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005ab6:	4b10      	ldr	r3, [pc, #64]	@ (8005af8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8005abc:	4b0e      	ldr	r3, [pc, #56]	@ (8005af8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005abe:	2200      	movs	r2, #0
 8005ac0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005aca:	220c      	movs	r2, #12
 8005acc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ace:	4b0a      	ldr	r3, [pc, #40]	@ (8005af8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ad4:	4b08      	ldr	r3, [pc, #32]	@ (8005af8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8005ada:	4807      	ldr	r0, [pc, #28]	@ (8005af8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005adc:	f007 f842 	bl	800cb64 <HAL_UART_Init>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	bf14      	ite	ne
 8005ae6:	2301      	movne	r3, #1
 8005ae8:	2300      	moveq	r3, #0
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8005af0:	f000 ffd2 	bl	8006a98 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8005af4:	bf00      	nop
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	2000040c 	.word	0x2000040c
 8005afc:	40011000 	.word	0x40011000

08005b00 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8005b06:	2300      	movs	r3, #0
 8005b08:	607b      	str	r3, [r7, #4]
 8005b0a:	4b10      	ldr	r3, [pc, #64]	@ (8005b4c <_ZL11MX_DMA_Initv+0x4c>)
 8005b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0e:	4a0f      	ldr	r2, [pc, #60]	@ (8005b4c <_ZL11MX_DMA_Initv+0x4c>)
 8005b10:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b16:	4b0d      	ldr	r3, [pc, #52]	@ (8005b4c <_ZL11MX_DMA_Initv+0x4c>)
 8005b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b1e:	607b      	str	r3, [r7, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005b22:	2200      	movs	r2, #0
 8005b24:	2100      	movs	r1, #0
 8005b26:	203a      	movs	r0, #58	@ 0x3a
 8005b28:	f003 faeb 	bl	8009102 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005b2c:	203a      	movs	r0, #58	@ 0x3a
 8005b2e:	f003 fb04 	bl	800913a <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8005b32:	2200      	movs	r2, #0
 8005b34:	2100      	movs	r1, #0
 8005b36:	2046      	movs	r0, #70	@ 0x46
 8005b38:	f003 fae3 	bl	8009102 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005b3c:	2046      	movs	r0, #70	@ 0x46
 8005b3e:	f003 fafc 	bl	800913a <HAL_NVIC_EnableIRQ>

}
 8005b42:	bf00      	nop
 8005b44:	3708      	adds	r7, #8
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	40023800 	.word	0x40023800

08005b50 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b08a      	sub	sp, #40	@ 0x28
 8005b54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005b56:	f107 0314 	add.w	r3, r7, #20
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	605a      	str	r2, [r3, #4]
 8005b60:	609a      	str	r2, [r3, #8]
 8005b62:	60da      	str	r2, [r3, #12]
 8005b64:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005b66:	2300      	movs	r3, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	4b31      	ldr	r3, [pc, #196]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b6e:	4a30      	ldr	r2, [pc, #192]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b70:	f043 0304 	orr.w	r3, r3, #4
 8005b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b76:	4b2e      	ldr	r3, [pc, #184]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	4b2a      	ldr	r3, [pc, #168]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b8a:	4a29      	ldr	r2, [pc, #164]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b92:	4b27      	ldr	r3, [pc, #156]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	4b23      	ldr	r3, [pc, #140]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	4a22      	ldr	r2, [pc, #136]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bae:	4b20      	ldr	r3, [pc, #128]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	60bb      	str	r3, [r7, #8]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	607b      	str	r3, [r7, #4]
 8005bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bc4:	f043 0302 	orr.w	r3, r3, #2
 8005bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8005bca:	4b19      	ldr	r3, [pc, #100]	@ (8005c30 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	607b      	str	r3, [r7, #4]
 8005bd4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, M1_INA_Pin | M2_INA_Pin | M3_INA_Pin | M4_INA_Pin, GPIO_PIN_RESET);
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	210f      	movs	r1, #15
 8005bda:	4816      	ldr	r0, [pc, #88]	@ (8005c34 <_ZL12MX_GPIO_Initv+0xe4>)
 8005bdc:	f004 f85e 	bl	8009c9c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8005be0:	2200      	movs	r2, #0
 8005be2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8005be6:	4814      	ldr	r0, [pc, #80]	@ (8005c38 <_ZL12MX_GPIO_Initv+0xe8>)
 8005be8:	f004 f858 	bl	8009c9c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M1_INA_Pin M2_INA_Pin M3_INA_Pin M4_INA_Pin */
	GPIO_InitStruct.Pin = M1_INA_Pin | M2_INA_Pin | M3_INA_Pin | M4_INA_Pin;
 8005bec:	230f      	movs	r3, #15
 8005bee:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bfc:	f107 0314 	add.w	r3, r7, #20
 8005c00:	4619      	mov	r1, r3
 8005c02:	480c      	ldr	r0, [pc, #48]	@ (8005c34 <_ZL12MX_GPIO_Initv+0xe4>)
 8005c04:	f003 feb6 	bl	8009974 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8005c08:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8005c0c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c16:	2300      	movs	r3, #0
 8005c18:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c1a:	f107 0314 	add.w	r3, r7, #20
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4805      	ldr	r0, [pc, #20]	@ (8005c38 <_ZL12MX_GPIO_Initv+0xe8>)
 8005c22:	f003 fea7 	bl	8009974 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005c26:	bf00      	nop
 8005c28:	3728      	adds	r7, #40	@ 0x28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	40023800 	.word	0x40023800
 8005c34:	40020800 	.word	0x40020800
 8005c38:	40020400 	.word	0x40020400
 8005c3c:	00000000 	.word	0x00000000

08005c40 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* Encoder */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4aaa      	ldr	r2, [pc, #680]	@ (8005ef8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	f040 8148 	bne.w	8005ee4 <HAL_TIM_PeriodElapsedCallback+0x2a4>
		motor_front_left_.delta_encoder = -1 * (htim1.Instance->CNT - 30000);
 8005c54:	4ba9      	ldr	r3, [pc, #676]	@ (8005efc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f5c3 43ea 	rsb	r3, r3, #29952	@ 0x7500
 8005c60:	3330      	adds	r3, #48	@ 0x30
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	b21a      	sxth	r2, r3
 8005c66:	4ba6      	ldr	r3, [pc, #664]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005c68:	801a      	strh	r2, [r3, #0]
		motor_front_right_.delta_encoder = -1 * (htim3.Instance->CNT - 30000);
 8005c6a:	4ba6      	ldr	r3, [pc, #664]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f5c3 43ea 	rsb	r3, r3, #29952	@ 0x7500
 8005c76:	3330      	adds	r3, #48	@ 0x30
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	b21a      	sxth	r2, r3
 8005c7c:	4ba2      	ldr	r3, [pc, #648]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005c7e:	801a      	strh	r2, [r3, #0]
		motor_rear_left_.delta_encoder = -1 * (htim5.Instance->CNT - 30000);
 8005c80:	4ba2      	ldr	r3, [pc, #648]	@ (8005f0c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	f5c3 43ea 	rsb	r3, r3, #29952	@ 0x7500
 8005c8c:	3330      	adds	r3, #48	@ 0x30
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	b21a      	sxth	r2, r3
 8005c92:	4b9f      	ldr	r3, [pc, #636]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005c94:	801a      	strh	r2, [r3, #0]
		motor_rear_right_.delta_encoder = -1 * (htim8.Instance->CNT - 30000);
 8005c96:	4b9f      	ldr	r3, [pc, #636]	@ (8005f14 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f5c3 43ea 	rsb	r3, r3, #29952	@ 0x7500
 8005ca2:	3330      	adds	r3, #48	@ 0x30
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	b21a      	sxth	r2, r3
 8005ca8:	4b9b      	ldr	r3, [pc, #620]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005caa:	801a      	strh	r2, [r3, #0]

		motor_front_left_.pps = (double) motor_front_left_.delta_encoder * 100.0f;
 8005cac:	4b94      	ldr	r3, [pc, #592]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fa fc56 	bl	8000564 <__aeabi_i2d>
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	4b97      	ldr	r3, [pc, #604]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005cbe:	f7fa fcbb 	bl	8000638 <__aeabi_dmul>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	498e      	ldr	r1, [pc, #568]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005cc8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_front_right_.pps = (double) motor_front_right_.delta_encoder * 100.0f;
 8005ccc:	4b8e      	ldr	r3, [pc, #568]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005cce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fa fc46 	bl	8000564 <__aeabi_i2d>
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	4b8f      	ldr	r3, [pc, #572]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005cde:	f7fa fcab 	bl	8000638 <__aeabi_dmul>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4988      	ldr	r1, [pc, #544]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005ce8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_rear_left_.pps = (double) motor_rear_left_.delta_encoder * 100.0f;
 8005cec:	4b88      	ldr	r3, [pc, #544]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005cee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fa fc36 	bl	8000564 <__aeabi_i2d>
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	4b87      	ldr	r3, [pc, #540]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005cfe:	f7fa fc9b 	bl	8000638 <__aeabi_dmul>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4982      	ldr	r1, [pc, #520]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005d08:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_rear_right_.pps = (double) motor_rear_right_.delta_encoder * 100.0f;
 8005d0c:	4b82      	ldr	r3, [pc, #520]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7fa fc26 	bl	8000564 <__aeabi_i2d>
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	4b7f      	ldr	r3, [pc, #508]	@ (8005f1c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8005d1e:	f7fa fc8b 	bl	8000638 <__aeabi_dmul>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	497c      	ldr	r1, [pc, #496]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005d28:	e9c1 2302 	strd	r2, r3, [r1, #8]

		motor_front_left_.rpm = motor_front_left_.pps * 60 / (500.0f * 4.0f);
 8005d2c:	4b74      	ldr	r3, [pc, #464]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005d2e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	4b7a      	ldr	r3, [pc, #488]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005d38:	f7fa fc7e 	bl	8000638 <__aeabi_dmul>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	460b      	mov	r3, r1
 8005d40:	4610      	mov	r0, r2
 8005d42:	4619      	mov	r1, r3
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	4b76      	ldr	r3, [pc, #472]	@ (8005f24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005d4a:	f7fa fd9f 	bl	800088c <__aeabi_ddiv>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	496b      	ldr	r1, [pc, #428]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005d54:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_front_left_.rpm = (motor_front_left_.rpm / 45.0f) * 1.068f;
 8005d58:	4b69      	ldr	r3, [pc, #420]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005d5a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	4b71      	ldr	r3, [pc, #452]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005d64:	f7fa fd92 	bl	800088c <__aeabi_ddiv>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4619      	mov	r1, r3
 8005d70:	a35f      	add	r3, pc, #380	@ (adr r3, 8005ef0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8005d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d76:	f7fa fc5f 	bl	8000638 <__aeabi_dmul>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4960      	ldr	r1, [pc, #384]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005d80:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_front_right_.rpm = motor_front_right_.pps * 60 / (500.0f * 4.0f);
 8005d84:	4b60      	ldr	r3, [pc, #384]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005d86:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005d8a:	f04f 0200 	mov.w	r2, #0
 8005d8e:	4b64      	ldr	r3, [pc, #400]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005d90:	f7fa fc52 	bl	8000638 <__aeabi_dmul>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4610      	mov	r0, r2
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	f04f 0200 	mov.w	r2, #0
 8005da0:	4b60      	ldr	r3, [pc, #384]	@ (8005f24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005da2:	f7fa fd73 	bl	800088c <__aeabi_ddiv>
 8005da6:	4602      	mov	r2, r0
 8005da8:	460b      	mov	r3, r1
 8005daa:	4957      	ldr	r1, [pc, #348]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005dac:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_front_right_.rpm = (motor_front_right_.rpm / 45.0f) * 1.068f;
 8005db0:	4b55      	ldr	r3, [pc, #340]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005db2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	4b5b      	ldr	r3, [pc, #364]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005dbc:	f7fa fd66 	bl	800088c <__aeabi_ddiv>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	a349      	add	r3, pc, #292	@ (adr r3, 8005ef0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f7fa fc33 	bl	8000638 <__aeabi_dmul>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	494c      	ldr	r1, [pc, #304]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005dd8:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_rear_left_.rpm = motor_rear_left_.pps * 60 / (500.0f * 4.0f);
 8005ddc:	4b4c      	ldr	r3, [pc, #304]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005dde:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	4b4e      	ldr	r3, [pc, #312]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005de8:	f7fa fc26 	bl	8000638 <__aeabi_dmul>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4610      	mov	r0, r2
 8005df2:	4619      	mov	r1, r3
 8005df4:	f04f 0200 	mov.w	r2, #0
 8005df8:	4b4a      	ldr	r3, [pc, #296]	@ (8005f24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005dfa:	f7fa fd47 	bl	800088c <__aeabi_ddiv>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	460b      	mov	r3, r1
 8005e02:	4943      	ldr	r1, [pc, #268]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005e04:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_rear_left_.rpm = (motor_rear_left_.rpm / 45.0f) * 1.068f;
 8005e08:	4b41      	ldr	r3, [pc, #260]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005e0a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	4b45      	ldr	r3, [pc, #276]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005e14:	f7fa fd3a 	bl	800088c <__aeabi_ddiv>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4610      	mov	r0, r2
 8005e1e:	4619      	mov	r1, r3
 8005e20:	a333      	add	r3, pc, #204	@ (adr r3, 8005ef0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	f7fa fc07 	bl	8000638 <__aeabi_dmul>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4938      	ldr	r1, [pc, #224]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005e30:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_rear_right_.rpm = motor_rear_right_.pps * 60 / (500.0f * 4.0f);
 8005e34:	4b38      	ldr	r3, [pc, #224]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005e36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	4b38      	ldr	r3, [pc, #224]	@ (8005f20 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8005e40:	f7fa fbfa 	bl	8000638 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	4b34      	ldr	r3, [pc, #208]	@ (8005f24 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8005e52:	f7fa fd1b 	bl	800088c <__aeabi_ddiv>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	492f      	ldr	r1, [pc, #188]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005e5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_rear_right_.rpm = (motor_rear_right_.rpm / 45.0f) * 1.068f;
 8005e60:	4b2d      	ldr	r3, [pc, #180]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005e62:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005f28 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8005e6c:	f7fa fd0e 	bl	800088c <__aeabi_ddiv>
 8005e70:	4602      	mov	r2, r0
 8005e72:	460b      	mov	r3, r1
 8005e74:	4610      	mov	r0, r2
 8005e76:	4619      	mov	r1, r3
 8005e78:	a31d      	add	r3, pc, #116	@ (adr r3, 8005ef0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	f7fa fbdb 	bl	8000638 <__aeabi_dmul>
 8005e82:	4602      	mov	r2, r0
 8005e84:	460b      	mov	r3, r1
 8005e86:	4924      	ldr	r1, [pc, #144]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005e88:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_front_left_.speed_pv = motor_front_left_.rpm;
 8005e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005e8e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e92:	491b      	ldr	r1, [pc, #108]	@ (8005f00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8005e94:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_front_right_.speed_pv = motor_front_right_.rpm;
 8005e98:	4b1b      	ldr	r3, [pc, #108]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005e9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e9e:	491a      	ldr	r1, [pc, #104]	@ (8005f08 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8005ea0:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_rear_left_.speed_pv = motor_rear_left_.rpm;
 8005ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005ea6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005eaa:	4919      	ldr	r1, [pc, #100]	@ (8005f10 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8005eac:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_rear_right_.speed_pv = motor_rear_right_.rpm;
 8005eb0:	4b19      	ldr	r3, [pc, #100]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005eb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005eb6:	4918      	ldr	r1, [pc, #96]	@ (8005f18 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8005eb8:	e9c1 2306 	strd	r2, r3, [r1, #24]

		htim1.Instance->CNT = 30000;
 8005ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8005efc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005ec4:	625a      	str	r2, [r3, #36]	@ 0x24
		htim3.Instance->CNT = 30000;
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005ece:	625a      	str	r2, [r3, #36]	@ 0x24
		htim5.Instance->CNT = 30000;
 8005ed0:	4b0e      	ldr	r3, [pc, #56]	@ (8005f0c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005ed8:	625a      	str	r2, [r3, #36]	@ 0x24
		htim8.Instance->CNT = 30000;
 8005eda:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f247 5230 	movw	r2, #30000	@ 0x7530
 8005ee2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	f3af 8000 	nop.w
 8005ef0:	20000000 	.word	0x20000000
 8005ef4:	3ff11687 	.word	0x3ff11687
 8005ef8:	40000800 	.word	0x40000800
 8005efc:	2000025c 	.word	0x2000025c
 8005f00:	200005d8 	.word	0x200005d8
 8005f04:	200002ec 	.word	0x200002ec
 8005f08:	20000608 	.word	0x20000608
 8005f0c:	2000037c 	.word	0x2000037c
 8005f10:	20000638 	.word	0x20000638
 8005f14:	200003c4 	.word	0x200003c4
 8005f18:	20000668 	.word	0x20000668
 8005f1c:	40590000 	.word	0x40590000
 8005f20:	404e0000 	.word	0x404e0000
 8005f24:	409f4000 	.word	0x409f4000
 8005f28:	40468000 	.word	0x40468000
 8005f2c:	00000000 	.word	0x00000000

08005f30 <_Z22motor_front_left_drived>:

/* Motor */
void motor_front_left_drive(double dt) {
 8005f30:	b5b0      	push	{r4, r5, r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_front_left_.speed_sp, motor_front_left_.speed_pv, &pid_data_front_left_, dt);
 8005f46:	4b5a      	ldr	r3, [pc, #360]	@ (80060b0 <_Z22motor_front_left_drived+0x180>)
 8005f48:	ed93 7b08 	vldr	d7, [r3, #32]
 8005f4c:	4b58      	ldr	r3, [pc, #352]	@ (80060b0 <_Z22motor_front_left_drived+0x180>)
 8005f4e:	ed93 6b06 	vldr	d6, [r3, #24]
 8005f52:	ed97 2b00 	vldr	d2, [r7]
 8005f56:	4857      	ldr	r0, [pc, #348]	@ (80060b4 <_Z22motor_front_left_drived+0x184>)
 8005f58:	eeb0 1a46 	vmov.f32	s2, s12
 8005f5c:	eef0 1a66 	vmov.f32	s3, s13
 8005f60:	eeb0 0a47 	vmov.f32	s0, s14
 8005f64:	eef0 0a67 	vmov.f32	s1, s15
 8005f68:	f001 fc2a 	bl	80077c0 <_Z12calculatePIDddP16PID_Data_Typedefd>
 8005f6c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	4b50      	ldr	r3, [pc, #320]	@ (80060b8 <_Z22motor_front_left_drived+0x188>)
 8005f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f7a:	f7fa fded 	bl	8000b58 <__aeabi_dcmpgt>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d004      	beq.n	8005f8e <_Z22motor_front_left_drived+0x5e>
		speed_command = 1000.0;
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	4b4b      	ldr	r3, [pc, #300]	@ (80060b8 <_Z22motor_front_left_drived+0x188>)
 8005f8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 8005f8e:	a346      	add	r3, pc, #280	@ (adr r3, 80060a8 <_Z22motor_front_left_drived+0x178>)
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f98:	f7fa fdc0 	bl	8000b1c <__aeabi_dcmplt>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <_Z22motor_front_left_drived+0x7c>
		speed_command = -1000.0;
 8005fa2:	a341      	add	r3, pc, #260	@ (adr r3, 80060a8 <_Z22motor_front_left_drived+0x178>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_front_left_.speed_command = speed_command;
 8005fac:	4940      	ldr	r1, [pc, #256]	@ (80060b0 <_Z22motor_front_left_drived+0x180>)
 8005fae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fb2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	if (speed_command > 0.0 && motor_front_left_.speed_sp > 0.0) {
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fc2:	f7fa fdc9 	bl	8000b58 <__aeabi_dcmpgt>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d019      	beq.n	8006000 <_Z22motor_front_left_drived+0xd0>
 8005fcc:	4b38      	ldr	r3, [pc, #224]	@ (80060b0 <_Z22motor_front_left_drived+0x180>)
 8005fce:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	f7fa fdbd 	bl	8000b58 <__aeabi_dcmpgt>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00d      	beq.n	8006000 <_Z22motor_front_left_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	4834      	ldr	r0, [pc, #208]	@ (80060bc <_Z22motor_front_left_drived+0x18c>)
 8005fea:	f003 fe57 	bl	8009c9c <HAL_GPIO_WritePin>
		TIM2->CCR1 = (int) speed_command;
 8005fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ff2:	f7fa fdd1 	bl	8000b98 <__aeabi_d2iz>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005ffc:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ffe:	e04f      	b.n	80060a0 <_Z22motor_front_left_drived+0x170>
	} else if (speed_command < 0.0 && motor_front_left_.speed_sp < 0.0) {
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800600c:	f7fa fd86 	bl	8000b1c <__aeabi_dcmplt>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01f      	beq.n	8006056 <_Z22motor_front_left_drived+0x126>
 8006016:	4b26      	ldr	r3, [pc, #152]	@ (80060b0 <_Z22motor_front_left_drived+0x180>)
 8006018:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	f7fa fd7a 	bl	8000b1c <__aeabi_dcmplt>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d013      	beq.n	8006056 <_Z22motor_front_left_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 800602e:	2201      	movs	r2, #1
 8006030:	2101      	movs	r1, #1
 8006032:	4822      	ldr	r0, [pc, #136]	@ (80060bc <_Z22motor_front_left_drived+0x18c>)
 8006034:	f003 fe32 	bl	8009c9c <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8006038:	68bc      	ldr	r4, [r7, #8]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8006040:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR1 = (int) speed_command;
 8006044:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006048:	f7fa fda6 	bl	8000b98 <__aeabi_d2iz>
 800604c:	4602      	mov	r2, r0
 800604e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006052:	635a      	str	r2, [r3, #52]	@ 0x34
 8006054:	e024      	b.n	80060a0 <_Z22motor_front_left_drived+0x170>
	} else if (speed_command == 0) {
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006062:	f7fa fd51 	bl	8000b08 <__aeabi_dcmpeq>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00c      	beq.n	8006086 <_Z22motor_front_left_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800606c:	2200      	movs	r2, #0
 800606e:	2101      	movs	r1, #1
 8006070:	4812      	ldr	r0, [pc, #72]	@ (80060bc <_Z22motor_front_left_drived+0x18c>)
 8006072:	f003 fe13 	bl	8009c9c <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_left_);
 8006076:	480f      	ldr	r0, [pc, #60]	@ (80060b4 <_Z22motor_front_left_drived+0x184>)
 8006078:	f001 fc88 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR1 = 0;
 800607c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006080:	2200      	movs	r2, #0
 8006082:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
		resetPIDData(&pid_data_front_left_);
		TIM2->CCR1 = 0;
	}
}
 8006084:	e00c      	b.n	80060a0 <_Z22motor_front_left_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8006086:	2200      	movs	r2, #0
 8006088:	2101      	movs	r1, #1
 800608a:	480c      	ldr	r0, [pc, #48]	@ (80060bc <_Z22motor_front_left_drived+0x18c>)
 800608c:	f003 fe06 	bl	8009c9c <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_left_);
 8006090:	4808      	ldr	r0, [pc, #32]	@ (80060b4 <_Z22motor_front_left_drived+0x184>)
 8006092:	f001 fc7b 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR1 = 0;
 8006096:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800609a:	2200      	movs	r2, #0
 800609c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800609e:	e7ff      	b.n	80060a0 <_Z22motor_front_left_drived+0x170>
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bdb0      	pop	{r4, r5, r7, pc}
 80060a8:	00000000 	.word	0x00000000
 80060ac:	c08f4000 	.word	0xc08f4000
 80060b0:	200005d8 	.word	0x200005d8
 80060b4:	20000698 	.word	0x20000698
 80060b8:	408f4000 	.word	0x408f4000
 80060bc:	40020800 	.word	0x40020800

080060c0 <_Z23motor_front_right_drived>:

void motor_front_right_drive(double dt) {
 80060c0:	b5b0      	push	{r4, r5, r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_front_right_.speed_sp, motor_front_right_.speed_pv, &pid_data_front_right_, dt);
 80060d6:	4b5a      	ldr	r3, [pc, #360]	@ (8006240 <_Z23motor_front_right_drived+0x180>)
 80060d8:	ed93 7b08 	vldr	d7, [r3, #32]
 80060dc:	4b58      	ldr	r3, [pc, #352]	@ (8006240 <_Z23motor_front_right_drived+0x180>)
 80060de:	ed93 6b06 	vldr	d6, [r3, #24]
 80060e2:	ed97 2b00 	vldr	d2, [r7]
 80060e6:	4857      	ldr	r0, [pc, #348]	@ (8006244 <_Z23motor_front_right_drived+0x184>)
 80060e8:	eeb0 1a46 	vmov.f32	s2, s12
 80060ec:	eef0 1a66 	vmov.f32	s3, s13
 80060f0:	eeb0 0a47 	vmov.f32	s0, s14
 80060f4:	eef0 0a67 	vmov.f32	s1, s15
 80060f8:	f001 fb62 	bl	80077c0 <_Z12calculatePIDddP16PID_Data_Typedefd>
 80060fc:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	4b50      	ldr	r3, [pc, #320]	@ (8006248 <_Z23motor_front_right_drived+0x188>)
 8006106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800610a:	f7fa fd25 	bl	8000b58 <__aeabi_dcmpgt>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d004      	beq.n	800611e <_Z23motor_front_right_drived+0x5e>
		speed_command = 1000.0;
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	4b4b      	ldr	r3, [pc, #300]	@ (8006248 <_Z23motor_front_right_drived+0x188>)
 800611a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 800611e:	a346      	add	r3, pc, #280	@ (adr r3, 8006238 <_Z23motor_front_right_drived+0x178>)
 8006120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006128:	f7fa fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800612c:	4603      	mov	r3, r0
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <_Z23motor_front_right_drived+0x7c>
		speed_command = -1000.0;
 8006132:	a341      	add	r3, pc, #260	@ (adr r3, 8006238 <_Z23motor_front_right_drived+0x178>)
 8006134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006138:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_front_right_.speed_command = speed_command;
 800613c:	4940      	ldr	r1, [pc, #256]	@ (8006240 <_Z23motor_front_right_drived+0x180>)
 800613e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006142:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	if (speed_command > 0.0 && motor_front_right_.speed_sp > 0.0) {
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006152:	f7fa fd01 	bl	8000b58 <__aeabi_dcmpgt>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d019      	beq.n	8006190 <_Z23motor_front_right_drived+0xd0>
 800615c:	4b38      	ldr	r3, [pc, #224]	@ (8006240 <_Z23motor_front_right_drived+0x180>)
 800615e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	f7fa fcf5 	bl	8000b58 <__aeabi_dcmpgt>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00d      	beq.n	8006190 <_Z23motor_front_right_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8006174:	2200      	movs	r2, #0
 8006176:	2102      	movs	r1, #2
 8006178:	4834      	ldr	r0, [pc, #208]	@ (800624c <_Z23motor_front_right_drived+0x18c>)
 800617a:	f003 fd8f 	bl	8009c9c <HAL_GPIO_WritePin>
		TIM2->CCR2 = (int) speed_command;
 800617e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006182:	f7fa fd09 	bl	8000b98 <__aeabi_d2iz>
 8006186:	4602      	mov	r2, r0
 8006188:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800618c:	639a      	str	r2, [r3, #56]	@ 0x38
 800618e:	e04f      	b.n	8006230 <_Z23motor_front_right_drived+0x170>
	} else if (speed_command < 0.0 && motor_front_right_.speed_sp < 0.0) {
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800619c:	f7fa fcbe 	bl	8000b1c <__aeabi_dcmplt>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01f      	beq.n	80061e6 <_Z23motor_front_right_drived+0x126>
 80061a6:	4b26      	ldr	r3, [pc, #152]	@ (8006240 <_Z23motor_front_right_drived+0x180>)
 80061a8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80061ac:	f04f 0200 	mov.w	r2, #0
 80061b0:	f04f 0300 	mov.w	r3, #0
 80061b4:	f7fa fcb2 	bl	8000b1c <__aeabi_dcmplt>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d013      	beq.n	80061e6 <_Z23motor_front_right_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80061be:	2201      	movs	r2, #1
 80061c0:	2102      	movs	r1, #2
 80061c2:	4822      	ldr	r0, [pc, #136]	@ (800624c <_Z23motor_front_right_drived+0x18c>)
 80061c4:	f003 fd6a 	bl	8009c9c <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 80061c8:	68bc      	ldr	r4, [r7, #8]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80061d0:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR2 = (int) speed_command;
 80061d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061d8:	f7fa fcde 	bl	8000b98 <__aeabi_d2iz>
 80061dc:	4602      	mov	r2, r0
 80061de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80061e2:	639a      	str	r2, [r3, #56]	@ 0x38
 80061e4:	e024      	b.n	8006230 <_Z23motor_front_right_drived+0x170>
	} else if (speed_command == 0) {
 80061e6:	f04f 0200 	mov.w	r2, #0
 80061ea:	f04f 0300 	mov.w	r3, #0
 80061ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061f2:	f7fa fc89 	bl	8000b08 <__aeabi_dcmpeq>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <_Z23motor_front_right_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80061fc:	2200      	movs	r2, #0
 80061fe:	2102      	movs	r1, #2
 8006200:	4812      	ldr	r0, [pc, #72]	@ (800624c <_Z23motor_front_right_drived+0x18c>)
 8006202:	f003 fd4b 	bl	8009c9c <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_right_);
 8006206:	480f      	ldr	r0, [pc, #60]	@ (8006244 <_Z23motor_front_right_drived+0x184>)
 8006208:	f001 fbc0 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR2 = 0;
 800620c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006210:	2200      	movs	r2, #0
 8006212:	639a      	str	r2, [r3, #56]	@ 0x38
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
		resetPIDData(&pid_data_front_right_);
		TIM2->CCR2 = 0;
	}
}
 8006214:	e00c      	b.n	8006230 <_Z23motor_front_right_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8006216:	2200      	movs	r2, #0
 8006218:	2102      	movs	r1, #2
 800621a:	480c      	ldr	r0, [pc, #48]	@ (800624c <_Z23motor_front_right_drived+0x18c>)
 800621c:	f003 fd3e 	bl	8009c9c <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_right_);
 8006220:	4808      	ldr	r0, [pc, #32]	@ (8006244 <_Z23motor_front_right_drived+0x184>)
 8006222:	f001 fbb3 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR2 = 0;
 8006226:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800622a:	2200      	movs	r2, #0
 800622c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800622e:	e7ff      	b.n	8006230 <_Z23motor_front_right_drived+0x170>
 8006230:	bf00      	nop
 8006232:	3710      	adds	r7, #16
 8006234:	46bd      	mov	sp, r7
 8006236:	bdb0      	pop	{r4, r5, r7, pc}
 8006238:	00000000 	.word	0x00000000
 800623c:	c08f4000 	.word	0xc08f4000
 8006240:	20000608 	.word	0x20000608
 8006244:	200006c8 	.word	0x200006c8
 8006248:	408f4000 	.word	0x408f4000
 800624c:	40020800 	.word	0x40020800

08006250 <_Z21motor_rear_left_drived>:

void motor_rear_left_drive(double dt) {
 8006250:	b5b0      	push	{r4, r5, r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_rear_left_.speed_sp, motor_rear_left_.speed_pv, &pid_data_rear_left_, dt);
 8006266:	4b5a      	ldr	r3, [pc, #360]	@ (80063d0 <_Z21motor_rear_left_drived+0x180>)
 8006268:	ed93 7b08 	vldr	d7, [r3, #32]
 800626c:	4b58      	ldr	r3, [pc, #352]	@ (80063d0 <_Z21motor_rear_left_drived+0x180>)
 800626e:	ed93 6b06 	vldr	d6, [r3, #24]
 8006272:	ed97 2b00 	vldr	d2, [r7]
 8006276:	4857      	ldr	r0, [pc, #348]	@ (80063d4 <_Z21motor_rear_left_drived+0x184>)
 8006278:	eeb0 1a46 	vmov.f32	s2, s12
 800627c:	eef0 1a66 	vmov.f32	s3, s13
 8006280:	eeb0 0a47 	vmov.f32	s0, s14
 8006284:	eef0 0a67 	vmov.f32	s1, s15
 8006288:	f001 fa9a 	bl	80077c0 <_Z12calculatePIDddP16PID_Data_Typedefd>
 800628c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	4b50      	ldr	r3, [pc, #320]	@ (80063d8 <_Z21motor_rear_left_drived+0x188>)
 8006296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800629a:	f7fa fc5d 	bl	8000b58 <__aeabi_dcmpgt>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <_Z21motor_rear_left_drived+0x5e>
		speed_command = 1000.0;
 80062a4:	f04f 0200 	mov.w	r2, #0
 80062a8:	4b4b      	ldr	r3, [pc, #300]	@ (80063d8 <_Z21motor_rear_left_drived+0x188>)
 80062aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 80062ae:	a346      	add	r3, pc, #280	@ (adr r3, 80063c8 <_Z21motor_rear_left_drived+0x178>)
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062b8:	f7fa fc30 	bl	8000b1c <__aeabi_dcmplt>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d004      	beq.n	80062cc <_Z21motor_rear_left_drived+0x7c>
		speed_command = -1000.0;
 80062c2:	a341      	add	r3, pc, #260	@ (adr r3, 80063c8 <_Z21motor_rear_left_drived+0x178>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_rear_left_.speed_command = speed_command;
 80062cc:	4940      	ldr	r1, [pc, #256]	@ (80063d0 <_Z21motor_rear_left_drived+0x180>)
 80062ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062d2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	if (speed_command > 0.0 && motor_rear_left_.speed_sp > 0.0) {
 80062d6:	f04f 0200 	mov.w	r2, #0
 80062da:	f04f 0300 	mov.w	r3, #0
 80062de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062e2:	f7fa fc39 	bl	8000b58 <__aeabi_dcmpgt>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d019      	beq.n	8006320 <_Z21motor_rear_left_drived+0xd0>
 80062ec:	4b38      	ldr	r3, [pc, #224]	@ (80063d0 <_Z21motor_rear_left_drived+0x180>)
 80062ee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80062f2:	f04f 0200 	mov.w	r2, #0
 80062f6:	f04f 0300 	mov.w	r3, #0
 80062fa:	f7fa fc2d 	bl	8000b58 <__aeabi_dcmpgt>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00d      	beq.n	8006320 <_Z21motor_rear_left_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8006304:	2200      	movs	r2, #0
 8006306:	2104      	movs	r1, #4
 8006308:	4834      	ldr	r0, [pc, #208]	@ (80063dc <_Z21motor_rear_left_drived+0x18c>)
 800630a:	f003 fcc7 	bl	8009c9c <HAL_GPIO_WritePin>
		TIM2->CCR3 = (int) speed_command;
 800630e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006312:	f7fa fc41 	bl	8000b98 <__aeabi_d2iz>
 8006316:	4602      	mov	r2, r0
 8006318:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800631c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800631e:	e04f      	b.n	80063c0 <_Z21motor_rear_left_drived+0x170>
	} else if (speed_command < 0.0 && motor_rear_left_.speed_sp < 0.0) {
 8006320:	f04f 0200 	mov.w	r2, #0
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800632c:	f7fa fbf6 	bl	8000b1c <__aeabi_dcmplt>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d01f      	beq.n	8006376 <_Z21motor_rear_left_drived+0x126>
 8006336:	4b26      	ldr	r3, [pc, #152]	@ (80063d0 <_Z21motor_rear_left_drived+0x180>)
 8006338:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800633c:	f04f 0200 	mov.w	r2, #0
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	f7fa fbea 	bl	8000b1c <__aeabi_dcmplt>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d013      	beq.n	8006376 <_Z21motor_rear_left_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800634e:	2201      	movs	r2, #1
 8006350:	2104      	movs	r1, #4
 8006352:	4822      	ldr	r0, [pc, #136]	@ (80063dc <_Z21motor_rear_left_drived+0x18c>)
 8006354:	f003 fca2 	bl	8009c9c <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8006358:	68bc      	ldr	r4, [r7, #8]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8006360:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR3 = (int) speed_command;
 8006364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006368:	f7fa fc16 	bl	8000b98 <__aeabi_d2iz>
 800636c:	4602      	mov	r2, r0
 800636e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006372:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006374:	e024      	b.n	80063c0 <_Z21motor_rear_left_drived+0x170>
	} else if (speed_command == 0) {
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006382:	f7fa fbc1 	bl	8000b08 <__aeabi_dcmpeq>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00c      	beq.n	80063a6 <_Z21motor_rear_left_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800638c:	2200      	movs	r2, #0
 800638e:	2104      	movs	r1, #4
 8006390:	4812      	ldr	r0, [pc, #72]	@ (80063dc <_Z21motor_rear_left_drived+0x18c>)
 8006392:	f003 fc83 	bl	8009c9c <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_left_);
 8006396:	480f      	ldr	r0, [pc, #60]	@ (80063d4 <_Z21motor_rear_left_drived+0x184>)
 8006398:	f001 faf8 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR3 = 0;
 800639c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063a0:	2200      	movs	r2, #0
 80063a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
		resetPIDData(&pid_data_rear_left_);
		TIM2->CCR3 = 0;
	}
}
 80063a4:	e00c      	b.n	80063c0 <_Z21motor_rear_left_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80063a6:	2200      	movs	r2, #0
 80063a8:	2104      	movs	r1, #4
 80063aa:	480c      	ldr	r0, [pc, #48]	@ (80063dc <_Z21motor_rear_left_drived+0x18c>)
 80063ac:	f003 fc76 	bl	8009c9c <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_left_);
 80063b0:	4808      	ldr	r0, [pc, #32]	@ (80063d4 <_Z21motor_rear_left_drived+0x184>)
 80063b2:	f001 faeb 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR3 = 0;
 80063b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80063ba:	2200      	movs	r2, #0
 80063bc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80063be:	e7ff      	b.n	80063c0 <_Z21motor_rear_left_drived+0x170>
 80063c0:	bf00      	nop
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bdb0      	pop	{r4, r5, r7, pc}
 80063c8:	00000000 	.word	0x00000000
 80063cc:	c08f4000 	.word	0xc08f4000
 80063d0:	20000638 	.word	0x20000638
 80063d4:	200006f8 	.word	0x200006f8
 80063d8:	408f4000 	.word	0x408f4000
 80063dc:	40020800 	.word	0x40020800

080063e0 <_Z22motor_rear_right_drived>:

void motor_rear_right_drive(double dt) {
 80063e0:	b5b0      	push	{r4, r5, r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 80063ea:	f04f 0200 	mov.w	r2, #0
 80063ee:	f04f 0300 	mov.w	r3, #0
 80063f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_rear_right_.speed_sp, motor_rear_right_.speed_pv, &pid_data_rear_right_, dt);
 80063f6:	4b5a      	ldr	r3, [pc, #360]	@ (8006560 <_Z22motor_rear_right_drived+0x180>)
 80063f8:	ed93 7b08 	vldr	d7, [r3, #32]
 80063fc:	4b58      	ldr	r3, [pc, #352]	@ (8006560 <_Z22motor_rear_right_drived+0x180>)
 80063fe:	ed93 6b06 	vldr	d6, [r3, #24]
 8006402:	ed97 2b00 	vldr	d2, [r7]
 8006406:	4857      	ldr	r0, [pc, #348]	@ (8006564 <_Z22motor_rear_right_drived+0x184>)
 8006408:	eeb0 1a46 	vmov.f32	s2, s12
 800640c:	eef0 1a66 	vmov.f32	s3, s13
 8006410:	eeb0 0a47 	vmov.f32	s0, s14
 8006414:	eef0 0a67 	vmov.f32	s1, s15
 8006418:	f001 f9d2 	bl	80077c0 <_Z12calculatePIDddP16PID_Data_Typedefd>
 800641c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	4b50      	ldr	r3, [pc, #320]	@ (8006568 <_Z22motor_rear_right_drived+0x188>)
 8006426:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800642a:	f7fa fb95 	bl	8000b58 <__aeabi_dcmpgt>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <_Z22motor_rear_right_drived+0x5e>
		speed_command = 1000.0;
 8006434:	f04f 0200 	mov.w	r2, #0
 8006438:	4b4b      	ldr	r3, [pc, #300]	@ (8006568 <_Z22motor_rear_right_drived+0x188>)
 800643a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 800643e:	a346      	add	r3, pc, #280	@ (adr r3, 8006558 <_Z22motor_rear_right_drived+0x178>)
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006448:	f7fa fb68 	bl	8000b1c <__aeabi_dcmplt>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d004      	beq.n	800645c <_Z22motor_rear_right_drived+0x7c>
		speed_command = -1000.0;
 8006452:	a341      	add	r3, pc, #260	@ (adr r3, 8006558 <_Z22motor_rear_right_drived+0x178>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_rear_right_.speed_command = speed_command;
 800645c:	4940      	ldr	r1, [pc, #256]	@ (8006560 <_Z22motor_rear_right_drived+0x180>)
 800645e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006462:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	if (speed_command > 0.0 && motor_rear_right_.speed_sp > 0.0) {
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006472:	f7fa fb71 	bl	8000b58 <__aeabi_dcmpgt>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d019      	beq.n	80064b0 <_Z22motor_rear_right_drived+0xd0>
 800647c:	4b38      	ldr	r3, [pc, #224]	@ (8006560 <_Z22motor_rear_right_drived+0x180>)
 800647e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	f7fa fb65 	bl	8000b58 <__aeabi_dcmpgt>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00d      	beq.n	80064b0 <_Z22motor_rear_right_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8006494:	2200      	movs	r2, #0
 8006496:	2108      	movs	r1, #8
 8006498:	4834      	ldr	r0, [pc, #208]	@ (800656c <_Z22motor_rear_right_drived+0x18c>)
 800649a:	f003 fbff 	bl	8009c9c <HAL_GPIO_WritePin>
		TIM2->CCR4 = (int) speed_command;
 800649e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064a2:	f7fa fb79 	bl	8000b98 <__aeabi_d2iz>
 80064a6:	4602      	mov	r2, r0
 80064a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80064ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80064ae:	e04f      	b.n	8006550 <_Z22motor_rear_right_drived+0x170>
	} else if (speed_command < 0.0 && motor_rear_right_.speed_sp < 0.0) {
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064bc:	f7fa fb2e 	bl	8000b1c <__aeabi_dcmplt>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d01f      	beq.n	8006506 <_Z22motor_rear_right_drived+0x126>
 80064c6:	4b26      	ldr	r3, [pc, #152]	@ (8006560 <_Z22motor_rear_right_drived+0x180>)
 80064c8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	f7fa fb22 	bl	8000b1c <__aeabi_dcmplt>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d013      	beq.n	8006506 <_Z22motor_rear_right_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80064de:	2201      	movs	r2, #1
 80064e0:	2108      	movs	r1, #8
 80064e2:	4822      	ldr	r0, [pc, #136]	@ (800656c <_Z22motor_rear_right_drived+0x18c>)
 80064e4:	f003 fbda 	bl	8009c9c <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 80064e8:	68bc      	ldr	r4, [r7, #8]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80064f0:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR4 = (int) speed_command;
 80064f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064f8:	f7fa fb4e 	bl	8000b98 <__aeabi_d2iz>
 80064fc:	4602      	mov	r2, r0
 80064fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006502:	641a      	str	r2, [r3, #64]	@ 0x40
 8006504:	e024      	b.n	8006550 <_Z22motor_rear_right_drived+0x170>
	} else if (speed_command == 0) {
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006512:	f7fa faf9 	bl	8000b08 <__aeabi_dcmpeq>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00c      	beq.n	8006536 <_Z22motor_rear_right_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800651c:	2200      	movs	r2, #0
 800651e:	2108      	movs	r1, #8
 8006520:	4812      	ldr	r0, [pc, #72]	@ (800656c <_Z22motor_rear_right_drived+0x18c>)
 8006522:	f003 fbbb 	bl	8009c9c <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_right_);
 8006526:	480f      	ldr	r0, [pc, #60]	@ (8006564 <_Z22motor_rear_right_drived+0x184>)
 8006528:	f001 fa30 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR4 = 0;
 800652c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006530:	2200      	movs	r2, #0
 8006532:	641a      	str	r2, [r3, #64]	@ 0x40
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
		resetPIDData(&pid_data_rear_right_);
		TIM2->CCR4 = 0;
	}
}
 8006534:	e00c      	b.n	8006550 <_Z22motor_rear_right_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8006536:	2200      	movs	r2, #0
 8006538:	2108      	movs	r1, #8
 800653a:	480c      	ldr	r0, [pc, #48]	@ (800656c <_Z22motor_rear_right_drived+0x18c>)
 800653c:	f003 fbae 	bl	8009c9c <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_right_);
 8006540:	4808      	ldr	r0, [pc, #32]	@ (8006564 <_Z22motor_rear_right_drived+0x184>)
 8006542:	f001 fa23 	bl	800798c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR4 = 0;
 8006546:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800654a:	2200      	movs	r2, #0
 800654c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800654e:	e7ff      	b.n	8006550 <_Z22motor_rear_right_drived+0x170>
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bdb0      	pop	{r4, r5, r7, pc}
 8006558:	00000000 	.word	0x00000000
 800655c:	c08f4000 	.word	0xc08f4000
 8006560:	20000668 	.word	0x20000668
 8006564:	20000728 	.word	0x20000728
 8006568:	408f4000 	.word	0x408f4000
 800656c:	40020800 	.word	0x40020800

08006570 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>:

void motor_initData(Motor_Speed_Data_Typedef *_motor) {
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	_motor->delta_encoder = 0;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	801a      	strh	r2, [r3, #0]
	_motor->pps = 0.0;
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_motor->rpm = 0.0;
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_motor->speed_command = 0.0;
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	f04f 0200 	mov.w	r2, #0
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	_motor->speed_pv = 0.0;
 80065a8:	6879      	ldr	r1, [r7, #4]
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_motor->speed_sp = 0.0;
 80065b6:	6879      	ldr	r1, [r7, #4]
 80065b8:	f04f 0200 	mov.w	r2, #0
 80065bc:	f04f 0300 	mov.w	r3, #0
 80065c0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <_Z20commandResetCallbackRKN8std_msgs5EmptyE>:

/* ROS */
void commandResetCallback(const std_msgs::Empty &msg) {
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b090      	sub	sp, #64	@ 0x40
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	char log_msg[50];
	(void) (msg);

	sprintf(log_msg, "Start Calibration of MPU6050");
 80065d8:	f107 030c 	add.w	r3, r7, #12
 80065dc:	4918      	ldr	r1, [pc, #96]	@ (8006640 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x70>)
 80065de:	4618      	mov	r0, r3
 80065e0:	f008 ff66 	bl	800f4b0 <siprintf>
	nh_.loginfo(log_msg);
 80065e4:	f107 030c 	add.w	r3, r7, #12
 80065e8:	4619      	mov	r1, r3
 80065ea:	4816      	ldr	r0, [pc, #88]	@ (8006644 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x74>)
 80065ec:	f000 fd22 	bl	8007034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80065f0:	2201      	movs	r2, #1
 80065f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80065f6:	4814      	ldr	r0, [pc, #80]	@ (8006648 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x78>)
 80065f8:	f003 fb50 	bl	8009c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80065fc:	2201      	movs	r2, #1
 80065fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006602:	4811      	ldr	r0, [pc, #68]	@ (8006648 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x78>)
 8006604:	f003 fb4a 	bl	8009c9c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8006608:	2200      	movs	r2, #0
 800660a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800660e:	480e      	ldr	r0, [pc, #56]	@ (8006648 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x78>)
 8006610:	f003 fb44 	bl	8009c9c <HAL_GPIO_WritePin>

	mpu.calcOffsets();
 8006614:	2201      	movs	r2, #1
 8006616:	2101      	movs	r1, #1
 8006618:	480c      	ldr	r0, [pc, #48]	@ (800664c <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x7c>)
 800661a:	f001 fc11 	bl	8007e40 <_ZN7MPU925011calcOffsetsEbb>

	sprintf(log_msg, "Calibration End");
 800661e:	f107 030c 	add.w	r3, r7, #12
 8006622:	490b      	ldr	r1, [pc, #44]	@ (8006650 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x80>)
 8006624:	4618      	mov	r0, r3
 8006626:	f008 ff43 	bl	800f4b0 <siprintf>
	nh_.loginfo(log_msg);
 800662a:	f107 030c 	add.w	r3, r7, #12
 800662e:	4619      	mov	r1, r3
 8006630:	4804      	ldr	r0, [pc, #16]	@ (8006644 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x74>)
 8006632:	f000 fcff 	bl	8007034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
}
 8006636:	bf00      	nop
 8006638:	3740      	adds	r7, #64	@ 0x40
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	08012ec4 	.word	0x08012ec4
 8006644:	20000758 	.word	0x20000758
 8006648:	40020400 	.word	0x40020400
 800664c:	20000518 	.word	0x20000518
 8006650:	08012ee4 	.word	0x08012ee4
 8006654:	00000000 	.word	0x00000000

08006658 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:

void commandVelocityCallback(const geometry_msgs::Twist &msg) {
 8006658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800665c:	b088      	sub	sp, #32
 800665e:	af00      	add	r7, sp, #0
 8006660:	61f8      	str	r0, [r7, #28]
	last_time_cmd_vel_ = nh_.now();
 8006662:	4cab      	ldr	r4, [pc, #684]	@ (8006910 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2b8>)
 8006664:	f107 0310 	add.w	r3, r7, #16
 8006668:	49aa      	ldr	r1, [pc, #680]	@ (8006914 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2bc>)
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fab8 	bl	8006be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8006670:	4622      	mov	r2, r4
 8006672:	f107 0310 	add.w	r3, r7, #16
 8006676:	e893 0003 	ldmia.w	r3, {r0, r1}
 800667a:	e882 0003 	stmia.w	r2, {r0, r1}
	goal_linear_x_velocity_ = msg.linear.x;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006684:	49a4      	ldr	r1, [pc, #656]	@ (8006918 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c0>)
 8006686:	e9c1 2300 	strd	r2, r3, [r1]
	goal_linear_y_velocity_ = msg.linear.y;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006690:	49a2      	ldr	r1, [pc, #648]	@ (800691c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c4>)
 8006692:	e9c1 2300 	strd	r2, r3, [r1]
	goal_angular_velocity_ = msg.angular.z;
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800669c:	49a0      	ldr	r1, [pc, #640]	@ (8006920 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c8>)
 800669e:	e9c1 2300 	strd	r2, r3, [r1]

	wheel_speed_cmd_[FRONT_LEFT] = -1 * (goal_linear_y_velocity_ * cos(DEG2RAD(45.0))
 80066a2:	4b9e      	ldr	r3, [pc, #632]	@ (800691c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c4>)
 80066a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066a8:	a385      	add	r3, pc, #532	@ (adr r3, 80068c0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x268>)
 80066aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ae:	f7f9 ffc3 	bl	8000638 <__aeabi_dmul>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4614      	mov	r4, r2
 80066b8:	461d      	mov	r5, r3
			- goal_linear_x_velocity_ * sin(DEG2RAD(45.0)) + goal_angular_velocity_ * ROBOT_RADUIS);
 80066ba:	4b97      	ldr	r3, [pc, #604]	@ (8006918 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c0>)
 80066bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066c0:	a381      	add	r3, pc, #516	@ (adr r3, 80068c8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x270>)
 80066c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c6:	f7f9 ffb7 	bl	8000638 <__aeabi_dmul>
 80066ca:	4602      	mov	r2, r0
 80066cc:	460b      	mov	r3, r1
 80066ce:	4620      	mov	r0, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	f7f9 fdf9 	bl	80002c8 <__aeabi_dsub>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4614      	mov	r4, r2
 80066dc:	461d      	mov	r5, r3
 80066de:	4b90      	ldr	r3, [pc, #576]	@ (8006920 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c8>)
 80066e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066e4:	a37a      	add	r3, pc, #488	@ (adr r3, 80068d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x278>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f7f9 ffa5 	bl	8000638 <__aeabi_dmul>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4620      	mov	r0, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	f7f9 fde9 	bl	80002cc <__adddf3>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
	wheel_speed_cmd_[FRONT_LEFT] = -1 * (goal_linear_y_velocity_ * cos(DEG2RAD(45.0))
 80066fe:	4690      	mov	r8, r2
 8006700:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8006704:	4b87      	ldr	r3, [pc, #540]	@ (8006924 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2cc>)
 8006706:	e9c3 8900 	strd	r8, r9, [r3]
	wheel_speed_cmd_[FRONT_RIGHT] = -1 * (goal_linear_y_velocity_ * cos(DEG2RAD(315.0))
 800670a:	4b84      	ldr	r3, [pc, #528]	@ (800691c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c4>)
 800670c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006710:	a371      	add	r3, pc, #452	@ (adr r3, 80068d8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x280>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 ff8f 	bl	8000638 <__aeabi_dmul>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4614      	mov	r4, r2
 8006720:	461d      	mov	r5, r3
			- goal_linear_x_velocity_ * sin(DEG2RAD(315.0)) + goal_angular_velocity_ * ROBOT_RADUIS);
 8006722:	4b7d      	ldr	r3, [pc, #500]	@ (8006918 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c0>)
 8006724:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006728:	a36d      	add	r3, pc, #436	@ (adr r3, 80068e0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x288>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7f9 ff83 	bl	8000638 <__aeabi_dmul>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	4620      	mov	r0, r4
 8006738:	4629      	mov	r1, r5
 800673a:	f7f9 fdc7 	bl	80002cc <__adddf3>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4614      	mov	r4, r2
 8006744:	461d      	mov	r5, r3
 8006746:	4b76      	ldr	r3, [pc, #472]	@ (8006920 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c8>)
 8006748:	e9d3 0100 	ldrd	r0, r1, [r3]
 800674c:	a360      	add	r3, pc, #384	@ (adr r3, 80068d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x278>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f7f9 ff71 	bl	8000638 <__aeabi_dmul>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	4620      	mov	r0, r4
 800675c:	4629      	mov	r1, r5
 800675e:	f7f9 fdb5 	bl	80002cc <__adddf3>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
	wheel_speed_cmd_[FRONT_RIGHT] = -1 * (goal_linear_y_velocity_ * cos(DEG2RAD(315.0))
 8006766:	60ba      	str	r2, [r7, #8]
 8006768:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	4b6d      	ldr	r3, [pc, #436]	@ (8006924 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2cc>)
 8006770:	ed97 7b02 	vldr	d7, [r7, #8]
 8006774:	ed83 7b02 	vstr	d7, [r3, #8]
	wheel_speed_cmd_[REAR_LEFT] = -1 * (goal_linear_y_velocity_ * cos(DEG2RAD(135.0))
 8006778:	4b68      	ldr	r3, [pc, #416]	@ (800691c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c4>)
 800677a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800677e:	a35a      	add	r3, pc, #360	@ (adr r3, 80068e8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x290>)
 8006780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006784:	f7f9 ff58 	bl	8000638 <__aeabi_dmul>
 8006788:	4602      	mov	r2, r0
 800678a:	460b      	mov	r3, r1
 800678c:	4614      	mov	r4, r2
 800678e:	461d      	mov	r5, r3
			- goal_linear_x_velocity_ * sin(DEG2RAD(135.0)) + goal_angular_velocity_ * ROBOT_RADUIS);
 8006790:	4b61      	ldr	r3, [pc, #388]	@ (8006918 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c0>)
 8006792:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006796:	a356      	add	r3, pc, #344	@ (adr r3, 80068f0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x298>)
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7f9 ff4c 	bl	8000638 <__aeabi_dmul>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4620      	mov	r0, r4
 80067a6:	4629      	mov	r1, r5
 80067a8:	f7f9 fd8e 	bl	80002c8 <__aeabi_dsub>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4614      	mov	r4, r2
 80067b2:	461d      	mov	r5, r3
 80067b4:	4b5a      	ldr	r3, [pc, #360]	@ (8006920 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c8>)
 80067b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067ba:	a345      	add	r3, pc, #276	@ (adr r3, 80068d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x278>)
 80067bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c0:	f7f9 ff3a 	bl	8000638 <__aeabi_dmul>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4620      	mov	r0, r4
 80067ca:	4629      	mov	r1, r5
 80067cc:	f7f9 fd7e 	bl	80002cc <__adddf3>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
	wheel_speed_cmd_[REAR_LEFT] = -1 * (goal_linear_y_velocity_ * cos(DEG2RAD(135.0))
 80067d4:	603a      	str	r2, [r7, #0]
 80067d6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80067da:	607b      	str	r3, [r7, #4]
 80067dc:	4b51      	ldr	r3, [pc, #324]	@ (8006924 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2cc>)
 80067de:	ed97 7b00 	vldr	d7, [r7]
 80067e2:	ed83 7b04 	vstr	d7, [r3, #16]
	wheel_speed_cmd_[REAR_RIGHT] = -1 * (goal_linear_y_velocity_ * cos(DEG2RAD(225.0))
 80067e6:	4b4d      	ldr	r3, [pc, #308]	@ (800691c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c4>)
 80067e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80067ec:	a342      	add	r3, pc, #264	@ (adr r3, 80068f8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a0>)
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	f7f9 ff21 	bl	8000638 <__aeabi_dmul>
 80067f6:	4602      	mov	r2, r0
 80067f8:	460b      	mov	r3, r1
 80067fa:	4614      	mov	r4, r2
 80067fc:	461d      	mov	r5, r3
			- goal_linear_x_velocity_ * sin(DEG2RAD(225.0)) + goal_angular_velocity_ * ROBOT_RADUIS);
 80067fe:	4b46      	ldr	r3, [pc, #280]	@ (8006918 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c0>)
 8006800:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006804:	a33e      	add	r3, pc, #248	@ (adr r3, 8006900 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a8>)
 8006806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680a:	f7f9 ff15 	bl	8000638 <__aeabi_dmul>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	4620      	mov	r0, r4
 8006814:	4629      	mov	r1, r5
 8006816:	f7f9 fd59 	bl	80002cc <__adddf3>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4614      	mov	r4, r2
 8006820:	461d      	mov	r5, r3
 8006822:	4b3f      	ldr	r3, [pc, #252]	@ (8006920 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2c8>)
 8006824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006828:	a329      	add	r3, pc, #164	@ (adr r3, 80068d0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x278>)
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f7f9 ff03 	bl	8000638 <__aeabi_dmul>
 8006832:	4602      	mov	r2, r0
 8006834:	460b      	mov	r3, r1
 8006836:	4620      	mov	r0, r4
 8006838:	4629      	mov	r1, r5
 800683a:	f7f9 fd47 	bl	80002cc <__adddf3>
 800683e:	4602      	mov	r2, r0
 8006840:	460b      	mov	r3, r1
	wheel_speed_cmd_[REAR_RIGHT] = -1 * (goal_linear_y_velocity_ * cos(DEG2RAD(225.0))
 8006842:	4692      	mov	sl, r2
 8006844:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8006848:	4b36      	ldr	r3, [pc, #216]	@ (8006924 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2cc>)
 800684a:	e9c3 ab06 	strd	sl, fp, [r3, #24]

	set_speed_motor_[FRONT_LEFT] = MPS2RPM(wheel_speed_cmd_[FRONT_LEFT]);
 800684e:	4b35      	ldr	r3, [pc, #212]	@ (8006924 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2cc>)
 8006850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006854:	a32c      	add	r3, pc, #176	@ (adr r3, 8006908 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2b0>)
 8006856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685a:	f7f9 feed 	bl	8000638 <__aeabi_dmul>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4931      	ldr	r1, [pc, #196]	@ (8006928 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2d0>)
 8006864:	e9c1 2300 	strd	r2, r3, [r1]
	set_speed_motor_[FRONT_RIGHT] = MPS2RPM(wheel_speed_cmd_[FRONT_RIGHT]);
 8006868:	4b2e      	ldr	r3, [pc, #184]	@ (8006924 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2cc>)
 800686a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800686e:	a326      	add	r3, pc, #152	@ (adr r3, 8006908 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2b0>)
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	f7f9 fee0 	bl	8000638 <__aeabi_dmul>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	492a      	ldr	r1, [pc, #168]	@ (8006928 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2d0>)
 800687e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	set_speed_motor_[REAR_LEFT] = MPS2RPM(wheel_speed_cmd_[REAR_LEFT]);
 8006882:	4b28      	ldr	r3, [pc, #160]	@ (8006924 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2cc>)
 8006884:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006888:	a31f      	add	r3, pc, #124	@ (adr r3, 8006908 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2b0>)
 800688a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688e:	f7f9 fed3 	bl	8000638 <__aeabi_dmul>
 8006892:	4602      	mov	r2, r0
 8006894:	460b      	mov	r3, r1
 8006896:	4924      	ldr	r1, [pc, #144]	@ (8006928 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2d0>)
 8006898:	e9c1 2304 	strd	r2, r3, [r1, #16]
	set_speed_motor_[REAR_RIGHT] = MPS2RPM(wheel_speed_cmd_[REAR_RIGHT]);
 800689c:	4b21      	ldr	r3, [pc, #132]	@ (8006924 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2cc>)
 800689e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80068a2:	a319      	add	r3, pc, #100	@ (adr r3, 8006908 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2b0>)
 80068a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a8:	f7f9 fec6 	bl	8000638 <__aeabi_dmul>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	491d      	ldr	r1, [pc, #116]	@ (8006928 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2d0>)
 80068b2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80068b6:	bf00      	nop
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068c0:	66d67384 	.word	0x66d67384
 80068c4:	3fe6a09e 	.word	0x3fe6a09e
 80068c8:	66280416 	.word	0x66280416
 80068cc:	3fe6a09e 	.word	0x3fe6a09e
 80068d0:	e0000000 	.word	0xe0000000
 80068d4:	3fda5603 	.word	0x3fda5603
 80068d8:	641cb5cb 	.word	0x641cb5cb
 80068dc:	3fe6a09e 	.word	0x3fe6a09e
 80068e0:	68e1c1ce 	.word	0x68e1c1ce
 80068e4:	3fe6a09e 	.word	0x3fe6a09e
 80068e8:	657994a7 	.word	0x657994a7
 80068ec:	bfe6a09e 	.word	0xbfe6a09e
 80068f0:	6784e2f2 	.word	0x6784e2f2
 80068f4:	3fe6a09e 	.word	0x3fe6a09e
 80068f8:	68335260 	.word	0x68335260
 80068fc:	bfe6a09e 	.word	0xbfe6a09e
 8006900:	64cb2539 	.word	0x64cb2539
 8006904:	3fe6a09e 	.word	0x3fe6a09e
 8006908:	736a6f85 	.word	0x736a6f85
 800690c:	4062cc3e 	.word	0x4062cc3e
 8006910:	20001094 	.word	0x20001094
 8006914:	20000758 	.word	0x20000758
 8006918:	20001208 	.word	0x20001208
 800691c:	20001210 	.word	0x20001210
 8006920:	20001218 	.word	0x20001218
 8006924:	20001220 	.word	0x20001220
 8006928:	20001240 	.word	0x20001240

0800692c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
	nh_.getHardware()->flush();
 8006934:	4805      	ldr	r0, [pc, #20]	@ (800694c <HAL_UART_TxCpltCallback+0x20>)
 8006936:	f000 fb8b 	bl	8007050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800693a:	4603      	mov	r3, r0
 800693c:	4618      	mov	r0, r3
 800693e:	f7fb fb69 	bl	8002014 <_ZN13STM32Hardware5flushEv>
}
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20000758 	.word	0x20000758

08006950 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
	nh_.getHardware()->reset_rbuf();
 8006958:	4805      	ldr	r0, [pc, #20]	@ (8006970 <HAL_UART_RxCpltCallback+0x20>)
 800695a:	f000 fb79 	bl	8007050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800695e:	4603      	mov	r3, r0
 8006960:	4618      	mov	r0, r3
 8006962:	f7fb fb18 	bl	8001f96 <_ZN13STM32Hardware10reset_rbufEv>
}
 8006966:	bf00      	nop
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	20000758 	.word	0x20000758

08006974 <_Z9ROS_setupv>:

void ROS_setup(void) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
	nh_.initNode();
 800697a:	4840      	ldr	r0, [pc, #256]	@ (8006a7c <_Z9ROS_setupv+0x108>)
 800697c:	f000 fb74 	bl	8007068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh_.advertise(imu_pub_);
 8006980:	493f      	ldr	r1, [pc, #252]	@ (8006a80 <_Z9ROS_setupv+0x10c>)
 8006982:	483e      	ldr	r0, [pc, #248]	@ (8006a7c <_Z9ROS_setupv+0x108>)
 8006984:	f000 fb8d 	bl	80070a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh_.advertise(motor_pub_);
 8006988:	493e      	ldr	r1, [pc, #248]	@ (8006a84 <_Z9ROS_setupv+0x110>)
 800698a:	483c      	ldr	r0, [pc, #240]	@ (8006a7c <_Z9ROS_setupv+0x108>)
 800698c:	f000 fb89 	bl	80070a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh_.subscribe(cmd_vel_sub_);
 8006990:	493d      	ldr	r1, [pc, #244]	@ (8006a88 <_Z9ROS_setupv+0x114>)
 8006992:	483a      	ldr	r0, [pc, #232]	@ (8006a7c <_Z9ROS_setupv+0x108>)
 8006994:	f000 fbb5 	bl	8007102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh_.subscribe(reset_sub_);
 8006998:	493c      	ldr	r1, [pc, #240]	@ (8006a8c <_Z9ROS_setupv+0x118>)
 800699a:	4838      	ldr	r0, [pc, #224]	@ (8006a7c <_Z9ROS_setupv+0x108>)
 800699c:	f000 fbb1 	bl	8007102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

	/* ired_msgs/IMU */
	imu_.roll = 0.0;
 80069a0:	493b      	ldr	r1, [pc, #236]	@ (8006a90 <_Z9ROS_setupv+0x11c>)
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	imu_.pitch = 0.0;
 80069ae:	4938      	ldr	r1, [pc, #224]	@ (8006a90 <_Z9ROS_setupv+0x11c>)
 80069b0:	f04f 0200 	mov.w	r2, #0
 80069b4:	f04f 0300 	mov.w	r3, #0
 80069b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	imu_.yaw = 0.0;
 80069bc:	4934      	ldr	r1, [pc, #208]	@ (8006a90 <_Z9ROS_setupv+0x11c>)
 80069be:	f04f 0200 	mov.w	r2, #0
 80069c2:	f04f 0300 	mov.w	r3, #0
 80069c6:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/* ired_msgs/Motor */
	for (int i = 0; i < 4; i++) {
 80069ca:	2300      	movs	r3, #0
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	e018      	b.n	8006a02 <_Z9ROS_setupv+0x8e>
		motor_.speed_fb[i] = 0.0;
 80069d0:	4a30      	ldr	r2, [pc, #192]	@ (8006a94 <_Z9ROS_setupv+0x120>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	3305      	adds	r3, #5
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	18d1      	adds	r1, r2, r3
 80069da:	f04f 0200 	mov.w	r2, #0
 80069de:	f04f 0300 	mov.w	r3, #0
 80069e2:	e9c1 2300 	strd	r2, r3, [r1]
		motor_.speed_sp[i] = 0.0;
 80069e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006a94 <_Z9ROS_setupv+0x120>)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3301      	adds	r3, #1
 80069ec:	00db      	lsls	r3, r3, #3
 80069ee:	18d1      	adds	r1, r2, r3
 80069f0:	f04f 0200 	mov.w	r2, #0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 4; i++) {
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3301      	adds	r3, #1
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b03      	cmp	r3, #3
 8006a06:	dde3      	ble.n	80069d0 <_Z9ROS_setupv+0x5c>
	}
	for (int i = 0; i < 3; i++) {
 8006a08:	2300      	movs	r3, #0
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	e02e      	b.n	8006a6c <_Z9ROS_setupv+0xf8>
		motor_.pid_motor_front_left[i] = 0.0;
 8006a0e:	4a21      	ldr	r2, [pc, #132]	@ (8006a94 <_Z9ROS_setupv+0x120>)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	3309      	adds	r3, #9
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	18d1      	adds	r1, r2, r3
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9c1 2300 	strd	r2, r3, [r1]
		motor_.pid_motor_front_right[i] = 0.0;
 8006a24:	4a1b      	ldr	r2, [pc, #108]	@ (8006a94 <_Z9ROS_setupv+0x120>)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	18d1      	adds	r1, r2, r3
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	f04f 0300 	mov.w	r3, #0
 8006a36:	e9c1 2300 	strd	r2, r3, [r1]
		motor_.pid_motor_rear_left[i] = 0.0;
 8006a3a:	4a16      	ldr	r2, [pc, #88]	@ (8006a94 <_Z9ROS_setupv+0x120>)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	330f      	adds	r3, #15
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	18d1      	adds	r1, r2, r3
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	e9c1 2300 	strd	r2, r3, [r1]
		motor_.pid_motor_rear_right[i] = 0.0;
 8006a50:	4a10      	ldr	r2, [pc, #64]	@ (8006a94 <_Z9ROS_setupv+0x120>)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	3312      	adds	r3, #18
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	18d1      	adds	r1, r2, r3
 8006a5a:	f04f 0200 	mov.w	r2, #0
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; i++) {
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	ddcd      	ble.n	8006a0e <_Z9ROS_setupv+0x9a>
	}
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	20000758 	.word	0x20000758
 8006a80:	20001168 	.word	0x20001168
 8006a84:	2000117c 	.word	0x2000117c
 8006a88:	20001190 	.word	0x20001190
 8006a8c:	200011f0 	.word	0x200011f0
 8006a90:	200010a0 	.word	0x200010a0
 8006a94:	200010c0 	.word	0x200010c0

08006a98 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006a9c:	b672      	cpsid	i
}
 8006a9e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <Error_Handler+0x8>

08006aa4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	e00c      	b.n	8006ace <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	fa22 f103 	lsr.w	r1, r2, r3
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	b2ca      	uxtb	r2, r1
 8006ac6:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	3301      	adds	r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b03      	cmp	r3, #3
 8006ad2:	d9ef      	bls.n	8006ab4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop
 8006ad8:	3714      	adds	r7, #20
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr

08006ae2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
 8006af6:	e010      	b.n	8006b1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6839      	ldr	r1, [r7, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	440a      	add	r2, r1
 8006b02:	7812      	ldrb	r2, [r2, #0]
 8006b04:	4611      	mov	r1, r2
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	00d2      	lsls	r2, r2, #3
 8006b0a:	fa01 f202 	lsl.w	r2, r1, r2
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3301      	adds	r3, #1
 8006b18:	60fb      	str	r3, [r7, #12]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	2b03      	cmp	r3, #3
 8006b1e:	d9eb      	bls.n	8006af8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
	...

08006b30 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	4a04      	ldr	r2, [pc, #16]	@ (8006b4c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	08013050 	.word	0x08013050

08006b50 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	60f8      	str	r0, [r7, #12]
 8006b58:	60b9      	str	r1, [r7, #8]
 8006b5a:	607a      	str	r2, [r7, #4]
 8006b5c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff ffe5 	bl	8006b30 <_ZN3ros11Subscriber_C1Ev>
 8006b66:	4a0b      	ldr	r2, [pc, #44]	@ (8006b94 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	3310      	adds	r3, #16
 8006b70:	4618      	mov	r0, r3
 8006b72:	f7fc f815 	bl	8002ba0 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	659a      	str	r2, [r3, #88]	@ 0x58
    endpoint_(endpoint)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	65da      	str	r2, [r3, #92]	@ 0x5c
  {
    topic_ = topic_name;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	609a      	str	r2, [r3, #8]
  };
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	08012fac 	.word	0x08012fac

08006b98 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff ffc1 	bl	8006b30 <_ZN3ros11Subscriber_C1Ev>
 8006bae:	4a0b      	ldr	r2, [pc, #44]	@ (8006bdc <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	330c      	adds	r3, #12
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7fe f88f 	bl	8004cdc <_ZN8std_msgs5EmptyC1Ev>
    cb_(cb),
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	611a      	str	r2, [r3, #16]
    endpoint_(endpoint)
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	615a      	str	r2, [r3, #20]
    topic_ = topic_name;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	609a      	str	r2, [r3, #8]
  };
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	08012f94 	.word	0x08012f94

08006be0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:

    this->setNow(t.data);
    last_sync_receive_time = hardware_.time();
  }

  Time now()
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  {
    uint32_t ms = hardware_.time();
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fb fab5 	bl	800215e <_ZN13STM32Hardware4timeEv>
 8006bf4:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7fa fb0a 	bl	8001210 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4a14      	ldr	r2, [pc, #80]	@ (8006c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8006c00:	fba2 2303 	umull	r2, r3, r2, r3
 8006c04:	099a      	lsrs	r2, r3, #6
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	f8d3 3418 	ldr.w	r3, [r3, #1048]	@ 0x418
 8006c0c:	441a      	add	r2, r3
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	4b0e      	ldr	r3, [pc, #56]	@ (8006c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8006c16:	fba3 1302 	umull	r1, r3, r3, r2
 8006c1a:	099b      	lsrs	r3, r3, #6
 8006c1c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006c20:	fb01 f303 	mul.w	r3, r1, r3
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	4a0b      	ldr	r2, [pc, #44]	@ (8006c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 8006c28:	fb03 f202 	mul.w	r2, r3, r2
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 8006c32:	441a      	add	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	3304      	adds	r3, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7fa fa34 	bl	80010ac <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8006c44:	bf00      	nop
  }
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	10624dd3 	.word	0x10624dd3
 8006c54:	000f4240 	.word	0x000f4240

08006c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fb fa7a 	bl	800215e <_ZN13STM32Hardware4timeEv>
 8006c6a:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	1ad3      	subs	r3, r2, r3
 8006c76:	f642 22f8 	movw	r2, #11000	@ 0x2af8
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d903      	bls.n	8006c86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
    if (mode_ != MODE_FIRST_FF)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d009      	beq.n	8006ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 390c 	ldr.w	r3, [r3, #2316]	@ 0x90c
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d903      	bls.n	8006ca4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bool tx_stop_requested = false;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d014      	beq.n	8006ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	3304      	adds	r3, #4
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fb fa4f 	bl	800215e <_ZN13STM32Hardware4timeEv>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad2      	subs	r2, r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	bf8c      	ite	hi
 8006cd0:	2301      	movhi	r3, #1
 8006cd2:	2300      	movls	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
          return SPIN_TIMEOUT;
 8006cda:	f06f 0301 	mvn.w	r3, #1
 8006cde:	e1a5      	b.n	800702c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      int data = hardware_.read();
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3304      	adds	r3, #4
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fb f967 	bl	8001fb8 <_ZN13STM32Hardware4readEv>
 8006cea:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f2c0 8178 	blt.w	8006fe4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>
      checksum_ += data;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	@ 0x8fc
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	441a      	add	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006d0a:	2b07      	cmp	r3, #7
 8006d0c:	d11e      	bne.n	8006d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xf4>
        message_in[index_++] = data;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	@ 0x8f8
 8006d14:	1c59      	adds	r1, r3, #1
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	f8c2 18f8 	str.w	r1, [r2, #2296]	@ 0x8f8
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	b2d1      	uxtb	r1, r2
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	460a      	mov	r2, r1
 8006d26:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
        bytes_--;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8006d30:	1e5a      	subs	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d1b4      	bne.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2208      	movs	r2, #8
 8006d46:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8006d4a:	e7af      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_FIRST_FF)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d128      	bne.n	8006da8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x150>
        if (data == 0xff)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2bff      	cmp	r3, #255	@ 0xff
 8006d5a:	d10d      	bne.n	8006d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
          mode_++;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006d62:	1c5a      	adds	r2, r3, #1
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f103 0214 	add.w	r2, r3, #20
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8c3 290c 	str.w	r2, [r3, #2316]	@ 0x90c
 8006d76:	e799      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	3304      	adds	r3, #4
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fb f9ee 	bl	800215e <_ZN13STM32Hardware4timeEv>
 8006d82:	4602      	mov	r2, r0
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	bf8c      	ite	hi
 8006d90:	2301      	movhi	r3, #1
 8006d92:	2300      	movls	r3, #0
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d088      	beq.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          configured_ = false;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
          return SPIN_TIMEOUT;
 8006da2:	f06f 0301 	mvn.w	r3, #1
 8006da6:	e141      	b.n	800702c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d118      	bne.n	8006de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18c>
        if (data == PROTOCOL_VER)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2bfe      	cmp	r3, #254	@ 0xfe
 8006db6:	d107      	bne.n	8006dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x170>
          mode_++;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8006dc6:	e771      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
          if (configured_ == false)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f47f af68 	bne.w	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f9bb 	bl	8007158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8006de2:	e763      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d113      	bne.n	8006e16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
        bytes_ = data;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        index_ = 0;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
        mode_++;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68fa      	ldr	r2, [r7, #12]
 8006e10:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8006e14:	e74a      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d110      	bne.n	8006e42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ea>
        bytes_ += data << 8;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	@ 0x8f0
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	441a      	add	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
        mode_++;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8006e40:	e734      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006e48:	2b04      	cmp	r3, #4
 8006e4a:	d116      	bne.n	8006e7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x222>
        if ((checksum_ % 256) == 255)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8006e52:	425a      	negs	r2, r3
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	b2d2      	uxtb	r2, r2
 8006e58:	bf58      	it	pl
 8006e5a:	4253      	negpl	r3, r2
 8006e5c:	2bff      	cmp	r3, #255	@ 0xff
 8006e5e:	d107      	bne.n	8006e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
          mode_++;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006e66:	1c5a      	adds	r2, r3, #1
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8006e6e:	e71d      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8006e78:	e718      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006e80:	2b05      	cmp	r3, #5
 8006e82:	d10f      	bne.n	8006ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24c>
        topic_ = data;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_++;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	f8c3 28fc 	str.w	r2, [r3, #2300]	@ 0x8fc
 8006ea2:	e703      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006eaa:	2b06      	cmp	r3, #6
 8006eac:	d117      	bne.n	8006ede <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x286>
        topic_ += data << 8;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	@ 0x8f4
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	441a      	add	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
        mode_ = MODE_MESSAGE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2207      	movs	r2, #7
 8006ec4:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if (bytes_ == 0)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	@ 0x8f0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f47f aeec 	bne.w	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2208      	movs	r2, #8
 8006ed8:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
 8006edc:	e6e6      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	@ 0x8ec
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	f47f aee1 	bne.w	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        mode_ = MODE_FIRST_FF;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
        if ((checksum_ % 256) == 255)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	@ 0x8fc
 8006ef8:	425a      	negs	r2, r3
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	bf58      	it	pl
 8006f00:	4253      	negpl	r3, r2
 8006f02:	2bff      	cmp	r3, #255	@ 0xff
 8006f04:	f47f aed2 	bne.w	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d110      	bne.n	8006f34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2dc>
            requestSyncTime();
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f920 	bl	8007158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f93b 	bl	8007194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
            last_sync_receive_time = c_time;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
            return SPIN_ERR;
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f32:	e07b      	b.n	800702c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
          else if (topic_ == TopicInfo::ID_TIME)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8006f3a:	2b0a      	cmp	r3, #10
 8006f3c:	d109      	bne.n	8006f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2fa>
            saw_time_msg = true;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8006f48:	4619      	mov	r1, r3
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa02 	bl	8007354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8006f50:	e6ac      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	d10e      	bne.n	8006f7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x322>
            req_param_resp.deserialize(message_in);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f603 1214 	addw	r2, r3, #2324	@ 0x914
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8006f68:	4619      	mov	r1, r3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	f7fa fe15 	bl	8001b9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2910 	strb.w	r2, [r3, #2320]	@ 0x910
 8006f78:	e698      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8006f80:	2b0b      	cmp	r3, #11
 8006f82:	d106      	bne.n	8006f92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33a>
            configured_ = false;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
            tx_stop_requested = true;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	75fb      	strb	r3, [r7, #23]
 8006f90:	e68c      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            if (subscribers[topic_ - 100])
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8006f98:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8006fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f43f ae80 	beq.w	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8006fb2:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8006fbc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	@ 0x8f4
 8006fc6:	f1a3 0264 	sub.w	r2, r3, #100	@ 0x64
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8006fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4798      	blx	r3
    while (true)
 8006fe2:	e663      	b.n	8006cac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        break;
 8006fe4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00f      	beq.n	8007010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 8006ff6:	693a      	ldr	r2, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d906      	bls.n	8007010 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
      requestSyncTime();
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 f8a8 	bl	8007158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	f8c3 2904 	str.w	r2, [r3, #2308]	@ 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8007010:	7dbb      	ldrb	r3, [r7, #22]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c4>
 8007016:	f06f 0303 	mvn.w	r3, #3
 800701a:	e006      	b.n	800702a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d002      	beq.n	8007028 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d0>
 8007022:	f06f 0302 	mvn.w	r3, #2
 8007026:	e000      	b.n	800702a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8007028:	2300      	movs	r3, #0
 800702a:	bf00      	nop
  }
 800702c:	4618      	mov	r0, r3
 800702e:	3718      	adds	r7, #24
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	2101      	movs	r1, #1
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f9d2 	bl	80073ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8007048:	bf00      	nop
 800704a:	3708      	adds	r7, #8
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	3304      	adds	r3, #4
  }
 800705c:	4618      	mov	r0, r3
 800705e:	370c      	adds	r7, #12
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr

08007068 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3304      	adds	r3, #4
 8007074:	4618      	mov	r0, r3
 8007076:	f7fa ff83 	bl	8001f80 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f8c3 28ec 	str.w	r2, [r3, #2284]	@ 0x8ec
    bytes_ = 0;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 28f0 	str.w	r2, [r3, #2288]	@ 0x8f0
    index_ = 0;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 28f8 	str.w	r2, [r3, #2296]	@ 0x8f8
    topic_ = 0;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f8c3 28f4 	str.w	r2, [r3, #2292]	@ 0x8f4
  };
 800709a:	bf00      	nop
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80070a2:	b480      	push	{r7}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	e01d      	b.n	80070ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d111      	bne.n	80070e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	683a      	ldr	r2, [r7, #0]
 80070d2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f103 027d 	add.w	r2, r3, #125	@ 0x7d
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	60da      	str	r2, [r3, #12]
        return true;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e006      	b.n	80070f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2b18      	cmp	r3, #24
 80070f2:	ddde      	ble.n	80070b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 80070f4:	2300      	movs	r3, #0
  }
 80070f6:	4618      	mov	r0, r3
 80070f8:	3714      	adds	r7, #20
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr

08007102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
  bool subscribe(Subscriber_& s)
 8007102:	b480      	push	{r7}
 8007104:	b085      	sub	sp, #20
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]
 8007110:	e018      	b.n	8007144 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
      if (subscribers[i] == 0) // empty slot
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800711a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10d      	bne.n	800713e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
        subscribers[i] = &s;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f103 0264 	add.w	r2, r3, #100	@ 0x64
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	605a      	str	r2, [r3, #4]
        return true;
 800713a:	2301      	movs	r3, #1
 800713c:	e006      	b.n	800714c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	3301      	adds	r3, #1
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b18      	cmp	r3, #24
 8007148:	dde3      	ble.n	8007112 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
    return false;
 800714a:	2300      	movs	r3, #0
  }
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8007160:	f107 030c 	add.w	r3, r7, #12
 8007164:	4618      	mov	r0, r3
 8007166:	f7fa f875 	bl	8001254 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f107 020c 	add.w	r2, r7, #12
 8007174:	210a      	movs	r1, #10
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
    rt_time = hardware_.time();
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	3304      	adds	r3, #4
 800717e:	4618      	mov	r0, r3
 8007180:	f7fa ffed 	bl	800215e <_ZN13STM32Hardware4timeEv>
 8007184:	4602      	mov	r2, r0
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f8c3 2414 	str.w	r2, [r3, #1044]	@ 0x414
  }
 800718c:	bf00      	nop
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b08b      	sub	sp, #44	@ 0x2c
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 800719c:	f107 030c 	add.w	r3, r7, #12
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fa f947 	bl	8001434 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80071a6:	2300      	movs	r3, #0
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80071aa:	e062      	b.n	8007272 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
      if (publishers[i] != 0) // non-empty slot
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d056      	beq.n	800726c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
        ti.topic_id = publishers[i]->id_;
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	4413      	add	r3, r2
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	6859      	ldr	r1, [r3, #4]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	4413      	add	r3, r2
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	3308      	adds	r3, #8
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4608      	mov	r0, r1
 800720c:	4798      	blx	r3
 800720e:	4603      	mov	r3, r0
 8007210:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007216:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	6859      	ldr	r1, [r3, #4]
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	330c      	adds	r3, #12
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4608      	mov	r0, r1
 800723a:	4798      	blx	r3
 800723c:	4603      	mov	r3, r0
 800723e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8007240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007244:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681c      	ldr	r4, [r3, #0]
 800724c:	687a      	ldr	r2, [r7, #4]
 800724e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007250:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	4618      	mov	r0, r3
 800725c:	f7fa fe55 	bl	8001f0a <_ZN3ros9Publisher15getEndpointTypeEv>
 8007260:	4601      	mov	r1, r0
 8007262:	f107 030c 	add.w	r3, r7, #12
 8007266:	461a      	mov	r2, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	3301      	adds	r3, #1
 8007270:	627b      	str	r3, [r7, #36]	@ 0x24
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	2b18      	cmp	r3, #24
 8007276:	dd99      	ble.n	80071ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007278:	2300      	movs	r3, #0
 800727a:	627b      	str	r3, [r7, #36]	@ 0x24
 800727c:	e05e      	b.n	800733c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      if (subscribers[i] != 0) // non-empty slot
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007282:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d053      	beq.n	8007336 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
        ti.topic_id = subscribers[i]->id_;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007292:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	b29b      	uxth	r3, r3
 800729e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072a4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80072a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072b4:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80072b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c0:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80072c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	3308      	adds	r3, #8
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4608      	mov	r0, r1
 80072d0:	4798      	blx	r3
 80072d2:	4603      	mov	r3, r0
 80072d4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072da:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80072de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e6:	f202 2222 	addw	r2, r2, #546	@ 0x222
 80072ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	330c      	adds	r3, #12
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4608      	mov	r0, r1
 80072f6:	4798      	blx	r3
 80072f8:	4603      	mov	r3, r0
 80072fa:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80072fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007300:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681c      	ldr	r4, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800730c:	f202 2222 	addw	r2, r2, #546	@ 0x222
 8007310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007318:	f202 2222 	addw	r2, r2, #546	@ 0x222
 800731c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	3304      	adds	r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4608      	mov	r0, r1
 8007328:	4798      	blx	r3
 800732a:	4601      	mov	r1, r0
 800732c:	f107 030c 	add.w	r3, r7, #12
 8007330:	461a      	mov	r2, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	3301      	adds	r3, #1
 800733a:	627b      	str	r3, [r7, #36]	@ 0x24
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	2b18      	cmp	r3, #24
 8007340:	dd9d      	ble.n	800727e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
    configured_ = true;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2900 	strb.w	r2, [r3, #2304]	@ 0x900
  }
 800734a:	bf00      	nop
 800734c:	372c      	adds	r7, #44	@ 0x2c
 800734e:	46bd      	mov	sp, r7
 8007350:	bd90      	pop	{r4, r7, pc}
	...

08007354 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800735e:	f107 0308 	add.w	r3, r7, #8
 8007362:	4618      	mov	r0, r3
 8007364:	f7f9 ff76 	bl	8001254 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3304      	adds	r3, #4
 800736c:	4618      	mov	r0, r3
 800736e:	f7fa fef6 	bl	800215e <_ZN13STM32Hardware4timeEv>
 8007372:	4602      	mov	r2, r0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3414 	ldr.w	r3, [r3, #1044]	@ 0x414
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800737e:	f107 0308 	add.w	r3, r7, #8
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f7f9 ffd5 	bl	8001334 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	4915      	ldr	r1, [pc, #84]	@ (80073e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8007390:	fba1 1303 	umull	r1, r3, r1, r3
 8007394:	099b      	lsrs	r3, r3, #6
 8007396:	4413      	add	r3, r2
 8007398:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 800739a:	6939      	ldr	r1, [r7, #16]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	4b11      	ldr	r3, [pc, #68]	@ (80073e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80073a0:	fba3 0302 	umull	r0, r3, r3, r2
 80073a4:	099b      	lsrs	r3, r3, #6
 80073a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80073aa:	fb00 f303 	mul.w	r3, r0, r3
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	4a0d      	ldr	r2, [pc, #52]	@ (80073e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80073b2:	fb02 f303 	mul.w	r3, r2, r3
 80073b6:	440b      	add	r3, r1
 80073b8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80073ba:	f107 0308 	add.w	r3, r7, #8
 80073be:	3304      	adds	r3, #4
 80073c0:	4619      	mov	r1, r3
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f8c2 	bl	800754c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fa fec6 	bl	800215e <_ZN13STM32Hardware4timeEv>
 80073d2:	4602      	mov	r2, r0
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8c3 2908 	str.w	r2, [r3, #2312]	@ 0x908
  }
 80073da:	bf00      	nop
 80073dc:	3718      	adds	r7, #24
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	10624dd3 	.word	0x10624dd3
 80073e8:	000f4240 	.word	0x000f4240

080073ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	460b      	mov	r3, r1
 80073f6:	607a      	str	r2, [r7, #4]
 80073f8:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 80073fa:	f107 0314 	add.w	r3, r7, #20
 80073fe:	4618      	mov	r0, r3
 8007400:	f7fa f9dc 	bl	80017bc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8007404:	7afb      	ldrb	r3, [r7, #11]
 8007406:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f107 0214 	add.w	r2, r7, #20
 8007416:	2107      	movs	r1, #7
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	4798      	blx	r3
  }
 800741c:	bf00      	nop
 800741e:	3720      	adds	r7, #32
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg) override
 8007424:	b580      	push	{r7, lr}
 8007426:	b088      	sub	sp, #32
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b63      	cmp	r3, #99	@ 0x63
 8007434:	dd09      	ble.n	800744a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
 800743c:	f083 0301 	eor.w	r3, r3, #1
 8007440:	b2db      	uxtb	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8007446:	2300      	movs	r3, #0
 8007448:	e079      	b.n	800753e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    int l = msg->serialize(message_out + 7);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	f202 6224 	addw	r2, r2, #1572	@ 0x624
 8007456:	3207      	adds	r2, #7
 8007458:	4611      	mov	r1, r2
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	4798      	blx	r3
 800745e:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	22ff      	movs	r2, #255	@ 0xff
 8007464:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    message_out[1] = PROTOCOL_VER;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	22fe      	movs	r2, #254	@ 0xfe
 800746c:	f883 2625 	strb.w	r2, [r3, #1573]	@ 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	b2da      	uxtb	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f883 2626 	strb.w	r2, [r3, #1574]	@ 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	b29b      	uxth	r3, r3
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	b29b      	uxth	r3, r3
 8007482:	b2da      	uxtb	r2, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f883 2627 	strb.w	r2, [r3, #1575]	@ 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 2626 	ldrb.w	r2, [r3, #1574]	@ 0x626
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f893 3627 	ldrb.w	r3, [r3, #1575]	@ 0x627
 8007496:	4413      	add	r3, r2
 8007498:	b2db      	uxtb	r3, r3
 800749a:	43db      	mvns	r3, r3
 800749c:	b2da      	uxtb	r2, r3
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f883 2628 	strb.w	r2, [r3, #1576]	@ 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f883 2629 	strb.w	r2, [r3, #1577]	@ 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	b21b      	sxth	r3, r3
 80074b2:	121b      	asrs	r3, r3, #8
 80074b4:	b21b      	sxth	r3, r3
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f883 262a 	strb.w	r2, [r3, #1578]	@ 0x62a
    int chk = 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80074c2:	2305      	movs	r3, #5
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	e00c      	b.n	80074e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	4413      	add	r3, r2
 80074ce:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4413      	add	r3, r2
 80074da:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	3301      	adds	r3, #1
 80074e0:	61bb      	str	r3, [r7, #24]
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	3306      	adds	r3, #6
 80074e6:	69ba      	ldr	r2, [r7, #24]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	dded      	ble.n	80074c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	3307      	adds	r3, #7
 80074f0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	425a      	negs	r2, r3
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	b2d2      	uxtb	r2, r2
 80074fa:	bf58      	it	pl
 80074fc:	4253      	negpl	r3, r2
 80074fe:	b2da      	uxtb	r2, r3
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	1c59      	adds	r1, r3, #1
 8007504:	6179      	str	r1, [r7, #20]
 8007506:	43d2      	mvns	r2, r2
 8007508:	b2d1      	uxtb	r1, r2
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4413      	add	r3, r2
 800750e:	460a      	mov	r2, r1
 8007510:	f883 2624 	strb.w	r2, [r3, #1572]	@ 0x624
    if (l <= OUTPUT_SIZE)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800751a:	dc0a      	bgt.n	8007532 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
      hardware_.write(message_out, l);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	1d18      	adds	r0, r3, #4
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f203 6324 	addw	r3, r3, #1572	@ 0x624
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	4619      	mov	r1, r3
 800752a:	f7fa fdd1 	bl	80020d0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	e005      	b.n	800753e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
      logerror("Message from device dropped: message larger than buffer.");
 8007532:	4905      	ldr	r1, [pc, #20]	@ (8007548 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f849 	bl	80075cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800753a:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800753e:	4618      	mov	r0, r3
 8007540:	3720      	adds	r7, #32
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	08012ef4 	.word	0x08012ef4

0800754c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3304      	adds	r3, #4
 800755a:	4618      	mov	r0, r3
 800755c:	f7fa fdff 	bl	800215e <_ZN13STM32Hardware4timeEv>
 8007560:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4915      	ldr	r1, [pc, #84]	@ (80075c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800756a:	fba1 1303 	umull	r1, r3, r1, r3
 800756e:	099b      	lsrs	r3, r3, #6
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	1e5a      	subs	r2, r3, #1
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	6859      	ldr	r1, [r3, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	4b0f      	ldr	r3, [pc, #60]	@ (80075c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8007582:	fba3 0302 	umull	r0, r3, r3, r2
 8007586:	099b      	lsrs	r3, r3, #6
 8007588:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800758c:	fb00 f303 	mul.w	r3, r0, r3
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	4a0c      	ldr	r2, [pc, #48]	@ (80075c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8007594:	fb02 f303 	mul.w	r3, r2, r3
 8007598:	1aca      	subs	r2, r1, r3
 800759a:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 800759c:	4413      	add	r3, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	f8c2 341c 	str.w	r3, [r2, #1052]	@ 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f503 6283 	add.w	r2, r3, #1048	@ 0x418
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80075b0:	4619      	mov	r1, r3
 80075b2:	4610      	mov	r0, r2
 80075b4:	f7f9 fd7a 	bl	80010ac <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	10624dd3 	.word	0x10624dd3
 80075c4:	000f4240 	.word	0x000f4240
 80075c8:	3b9aca00 	.word	0x3b9aca00

080075cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80075d6:	683a      	ldr	r2, [r7, #0]
 80075d8:	2103      	movs	r1, #3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff ff06 	bl	80073ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 80075e0:	bf00      	nop
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b082      	sub	sp, #8
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d12c      	bne.n	8007652 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80075fe:	4293      	cmp	r3, r2
 8007600:	d127      	bne.n	8007652 <_Z41__static_initialization_and_destruction_0ii+0x6a>
MPU9250 mpu(hi2c1);
 8007602:	4916      	ldr	r1, [pc, #88]	@ (800765c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8007604:	4816      	ldr	r0, [pc, #88]	@ (8007660 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007606:	f000 fa4b 	bl	8007aa0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef>
ros::NodeHandle nh_;
 800760a:	4816      	ldr	r0, [pc, #88]	@ (8007664 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800760c:	f7fd fbc0 	bl	8004d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Time last_time_cmd_vel_;
 8007610:	4815      	ldr	r0, [pc, #84]	@ (8007668 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007612:	f7f9 fdfd 	bl	8001210 <_ZN3ros4TimeC1Ev>
ired_msgs::IMU imu_;
 8007616:	4815      	ldr	r0, [pc, #84]	@ (800766c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007618:	f7fb fb46 	bl	8002ca8 <_ZN9ired_msgs3IMUC1Ev>
ired_msgs::Motor motor_;
 800761c:	4814      	ldr	r0, [pc, #80]	@ (8007670 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800761e:	f7fc f859 	bl	80036d4 <_ZN9ired_msgs5MotorC1Ev>
ros::Publisher imu_pub_("/ired/rollpitchyaw", &imu_);
 8007622:	2300      	movs	r3, #0
 8007624:	4a11      	ldr	r2, [pc, #68]	@ (800766c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007626:	4913      	ldr	r1, [pc, #76]	@ (8007674 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8007628:	4813      	ldr	r0, [pc, #76]	@ (8007678 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800762a:	f7fa fc43 	bl	8001eb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher motor_pub_("/ired/motor/speed", &motor_);
 800762e:	2300      	movs	r3, #0
 8007630:	4a0f      	ldr	r2, [pc, #60]	@ (8007670 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007632:	4912      	ldr	r1, [pc, #72]	@ (800767c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007634:	4812      	ldr	r0, [pc, #72]	@ (8007680 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007636:	f7fa fc3d 	bl	8001eb4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> cmd_vel_sub_("/cmd_vel", &commandVelocityCallback);
 800763a:	2301      	movs	r3, #1
 800763c:	4a11      	ldr	r2, [pc, #68]	@ (8007684 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800763e:	4912      	ldr	r1, [pc, #72]	@ (8007688 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007640:	4812      	ldr	r0, [pc, #72]	@ (800768c <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007642:	f7ff fa85 	bl	8006b50 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Empty> reset_sub_("/ired/reset", commandResetCallback);
 8007646:	2301      	movs	r3, #1
 8007648:	4a11      	ldr	r2, [pc, #68]	@ (8007690 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800764a:	4912      	ldr	r1, [pc, #72]	@ (8007694 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800764c:	4812      	ldr	r0, [pc, #72]	@ (8007698 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800764e:	f7ff faa3 	bl	8006b98 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000208 	.word	0x20000208
 8007660:	20000518 	.word	0x20000518
 8007664:	20000758 	.word	0x20000758
 8007668:	20001094 	.word	0x20001094
 800766c:	200010a0 	.word	0x200010a0
 8007670:	200010c0 	.word	0x200010c0
 8007674:	08012f30 	.word	0x08012f30
 8007678:	20001168 	.word	0x20001168
 800767c:	08012f44 	.word	0x08012f44
 8007680:	2000117c 	.word	0x2000117c
 8007684:	08006659 	.word	0x08006659
 8007688:	08012f58 	.word	0x08012f58
 800768c:	20001190 	.word	0x20001190
 8007690:	080065d1 	.word	0x080065d1
 8007694:	08012f64 	.word	0x08012f64
 8007698:	200011f0 	.word	0x200011f0

0800769c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	330c      	adds	r3, #12
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fd fb35 	bl	8004d1c <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	320c      	adds	r2, #12
 80076ba:	4610      	mov	r0, r2
 80076bc:	4798      	blx	r3
  }
 80076be:	bf00      	nop
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	695b      	ldr	r3, [r3, #20]
  }
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	330c      	adds	r3, #12
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fd fb24 	bl	8004d38 <_ZN8std_msgs5Empty7getTypeEv>
 80076f0:	4603      	mov	r3, r0
  }
 80076f2:	4618      	mov	r0, r3
 80076f4:	3708      	adds	r7, #8
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b082      	sub	sp, #8
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	330c      	adds	r3, #12
 8007706:	4618      	mov	r0, r3
 8007708:	f7fd fb24 	bl	8004d54 <_ZN8std_msgs5Empty6getMD5Ev>
 800770c:	4603      	mov	r3, r0
  }
 800770e:	4618      	mov	r0, r3
 8007710:	3708      	adds	r7, #8
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}

08007716 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
 800771e:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3310      	adds	r3, #16
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	4618      	mov	r0, r3
 8007728:	f7fb fa7c 	bl	8002c24 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	3210      	adds	r2, #16
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
  }
 8007738:	bf00      	nop
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
  }
 800774c:	4618      	mov	r0, r3
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	3310      	adds	r3, #16
 8007764:	4618      	mov	r0, r3
 8007766:	f7fb fa83 	bl	8002c70 <_ZN13geometry_msgs5Twist7getTypeEv>
 800776a:	4603      	mov	r3, r0
  }
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3310      	adds	r3, #16
 8007780:	4618      	mov	r0, r3
 8007782:	f7fb fa83 	bl	8002c8c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8007786:	4603      	mov	r3, r0
  }
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
    return configured_;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 3900 	ldrb.w	r3, [r3, #2304]	@ 0x900
  };
 800779e:	4618      	mov	r0, r3
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <_GLOBAL__sub_I_hi2c1>:
 80077aa:	b580      	push	{r7, lr}
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80077b2:	2001      	movs	r0, #1
 80077b4:	f7ff ff18 	bl	80075e8 <_Z41__static_initialization_and_destruction_0ii>
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	0000      	movs	r0, r0
 80077bc:	0000      	movs	r0, r0
	...

080077c0 <_Z12calculatePIDddP16PID_Data_Typedefd>:
#include "motor_pid.h"

double calculatePID(double _sp, double _pv, PID_Data_Typedef *_pid_data, double _dt) {
 80077c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80077c4:	b08a      	sub	sp, #40	@ 0x28
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	ed87 0b06 	vstr	d0, [r7, #24]
 80077cc:	ed87 1b04 	vstr	d1, [r7, #16]
 80077d0:	60f8      	str	r0, [r7, #12]
 80077d2:	ed87 2b00 	vstr	d2, [r7]
	_pid_data->err = _sp - _pv;
 80077d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80077de:	f7f8 fd73 	bl	80002c8 <__aeabi_dsub>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	68f9      	ldr	r1, [r7, #12]
 80077e8:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if (_pid_data->err > 1000.0)
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80077f2:	f04f 0200 	mov.w	r2, #0
 80077f6:	4b64      	ldr	r3, [pc, #400]	@ (8007988 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 80077f8:	f7f9 f9ae 	bl	8000b58 <__aeabi_dcmpgt>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <_Z12calculatePIDddP16PID_Data_Typedefd+0x4e>
		_pid_data->err = 1000.0;
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	f04f 0200 	mov.w	r2, #0
 8007808:	4b5f      	ldr	r3, [pc, #380]	@ (8007988 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 800780a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (_pid_data->err < -1000.0)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007814:	a35a      	add	r3, pc, #360	@ (adr r3, 8007980 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	f7f9 f97f 	bl	8000b1c <__aeabi_dcmplt>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <_Z12calculatePIDddP16PID_Data_Typedefd+0x70>
		_pid_data->err = -1000.0;
 8007824:	68f9      	ldr	r1, [r7, #12]
 8007826:	a356      	add	r3, pc, #344	@ (adr r3, 8007980 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	e9c1 2306 	strd	r2, r3, [r1, #24]

	_pid_data->sum_err += _pid_data->err;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800783c:	f7f8 fd46 	bl	80002cc <__adddf3>
 8007840:	4602      	mov	r2, r0
 8007842:	460b      	mov	r3, r1
 8007844:	68f9      	ldr	r1, [r7, #12]
 8007846:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	if (_pid_data->sum_err < -1000) {
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007850:	a34b      	add	r3, pc, #300	@ (adr r3, 8007980 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 8007852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007856:	f7f9 f961 	bl	8000b1c <__aeabi_dcmplt>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d005      	beq.n	800786c <_Z12calculatePIDddP16PID_Data_Typedefd+0xac>
		_pid_data->sum_err = -1000;
 8007860:	68f9      	ldr	r1, [r7, #12]
 8007862:	a347      	add	r3, pc, #284	@ (adr r3, 8007980 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	}
	if (_pid_data->sum_err > 1000) {
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	4b44      	ldr	r3, [pc, #272]	@ (8007988 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 8007878:	f7f9 f96e 	bl	8000b58 <__aeabi_dcmpgt>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d005      	beq.n	800788e <_Z12calculatePIDddP16PID_Data_Typedefd+0xce>
		_pid_data->sum_err = 1000;
 8007882:	68f9      	ldr	r1, [r7, #12]
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	4b3f      	ldr	r3, [pc, #252]	@ (8007988 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 800788a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	}

	double ret = (_pid_data->kp * _pid_data->err) + (_pid_data->ki * _pid_data->sum_err * _dt)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800789a:	f7f8 fecd 	bl	8000638 <__aeabi_dmul>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4614      	mov	r4, r2
 80078a4:	461d      	mov	r5, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80078b2:	f7f8 fec1 	bl	8000638 <__aeabi_dmul>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4610      	mov	r0, r2
 80078bc:	4619      	mov	r1, r3
 80078be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c2:	f7f8 feb9 	bl	8000638 <__aeabi_dmul>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4620      	mov	r0, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	f7f8 fcfd 	bl	80002cc <__adddf3>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	4690      	mov	r8, r2
 80078d8:	4699      	mov	r9, r3
			+ (_pid_data->kd * ((_pid_data->err - _pid_data->err_l) / _dt));
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078ec:	f7f8 fcec 	bl	80002c8 <__aeabi_dsub>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	4610      	mov	r0, r2
 80078f6:	4619      	mov	r1, r3
 80078f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fc:	f7f8 ffc6 	bl	800088c <__aeabi_ddiv>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4620      	mov	r0, r4
 8007906:	4629      	mov	r1, r5
 8007908:	f7f8 fe96 	bl	8000638 <__aeabi_dmul>
 800790c:	4602      	mov	r2, r0
 800790e:	460b      	mov	r3, r1
	double ret = (_pid_data->kp * _pid_data->err) + (_pid_data->ki * _pid_data->sum_err * _dt)
 8007910:	4640      	mov	r0, r8
 8007912:	4649      	mov	r1, r9
 8007914:	f7f8 fcda 	bl	80002cc <__adddf3>
 8007918:	4602      	mov	r2, r0
 800791a:	460b      	mov	r3, r1
 800791c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	_pid_data->err_l = _pid_data->err;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007926:	68f9      	ldr	r1, [r7, #12]
 8007928:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if (ret > 1000.0)
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	4b15      	ldr	r3, [pc, #84]	@ (8007988 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 8007932:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007936:	f7f9 f90f 	bl	8000b58 <__aeabi_dcmpgt>
 800793a:	4603      	mov	r3, r0
 800793c:	2b00      	cmp	r3, #0
 800793e:	d004      	beq.n	800794a <_Z12calculatePIDddP16PID_Data_Typedefd+0x18a>
		ret = 1000.0;
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	4b10      	ldr	r3, [pc, #64]	@ (8007988 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 8007946:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ret < -1000.0)
 800794a:	a30d      	add	r3, pc, #52	@ (adr r3, 8007980 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 800794c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007950:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007954:	f7f9 f8e2 	bl	8000b1c <__aeabi_dcmplt>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d004      	beq.n	8007968 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1a8>
		ret = 1000.0;
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	4b09      	ldr	r3, [pc, #36]	@ (8007988 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 8007964:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return ret;
 8007968:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800796c:	ec43 2b17 	vmov	d7, r2, r3
}
 8007970:	eeb0 0a47 	vmov.f32	s0, s14
 8007974:	eef0 0a67 	vmov.f32	s1, s15
 8007978:	3728      	adds	r7, #40	@ 0x28
 800797a:	46bd      	mov	sp, r7
 800797c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007980:	00000000 	.word	0x00000000
 8007984:	c08f4000 	.word	0xc08f4000
 8007988:	408f4000 	.word	0x408f4000

0800798c <_Z12resetPIDDataP16PID_Data_Typedef>:

void resetPIDData(PID_Data_Typedef *_pid_data) {
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
	_pid_data->err = 0.0;
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	f04f 0200 	mov.w	r2, #0
 800799a:	f04f 0300 	mov.w	r3, #0
 800799e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_pid_data->err_l = 0.0;
 80079a2:	6879      	ldr	r1, [r7, #4]
 80079a4:	f04f 0200 	mov.w	r2, #0
 80079a8:	f04f 0300 	mov.w	r3, #0
 80079ac:	e9c1 2308 	strd	r2, r3, [r1, #32]
	_pid_data->sum_err = 0.0;
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	f04f 0200 	mov.w	r2, #0
 80079b6:	f04f 0300 	mov.w	r3, #0
 80079ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 80079be:	bf00      	nop
 80079c0:	370c      	adds	r7, #12
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <_Z17setupPIDParameterP16PID_Data_Typedefddd>:

void setupPIDParameter(PID_Data_Typedef *_pid_data, double _kp, double _ki, double _kd) {
 80079ca:	b480      	push	{r7}
 80079cc:	b089      	sub	sp, #36	@ 0x24
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	61f8      	str	r0, [r7, #28]
 80079d2:	ed87 0b04 	vstr	d0, [r7, #16]
 80079d6:	ed87 1b02 	vstr	d1, [r7, #8]
 80079da:	ed87 2b00 	vstr	d2, [r7]
	_pid_data->kp = _kp;
 80079de:	69f9      	ldr	r1, [r7, #28]
 80079e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079e4:	e9c1 2300 	strd	r2, r3, [r1]
	_pid_data->ki = _ki;
 80079e8:	69f9      	ldr	r1, [r7, #28]
 80079ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_pid_data->kd = _kd;
 80079f2:	69f9      	ldr	r1, [r7, #28]
 80079f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80079fc:	bf00      	nop
 80079fe:	3724      	adds	r7, #36	@ 0x24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <_ZL4wrapdd>:
#include "mpu9250.h"

static double wrap(double angle, double limit) {
 8007a08:	b5b0      	push	{r4, r5, r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	ed87 0b02 	vstr	d0, [r7, #8]
 8007a12:	ed87 1b00 	vstr	d1, [r7]
	while (angle > limit)
 8007a16:	e00f      	b.n	8007a38 <_ZL4wrapdd+0x30>
		angle -= 2 * limit;
 8007a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	f7f8 fc54 	bl	80002cc <__adddf3>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a2c:	f7f8 fc4c 	bl	80002c8 <__aeabi_dsub>
 8007a30:	4602      	mov	r2, r0
 8007a32:	460b      	mov	r3, r1
 8007a34:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (angle > limit)
 8007a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a40:	f7f9 f88a 	bl	8000b58 <__aeabi_dcmpgt>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e6      	bne.n	8007a18 <_ZL4wrapdd+0x10>
	while (angle < -limit)
 8007a4a:	e00f      	b.n	8007a6c <_ZL4wrapdd+0x64>
		angle += 2 * limit;
 8007a4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	f7f8 fc3a 	bl	80002cc <__adddf3>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a60:	f7f8 fc34 	bl	80002cc <__adddf3>
 8007a64:	4602      	mov	r2, r0
 8007a66:	460b      	mov	r3, r1
 8007a68:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (angle < -limit)
 8007a6c:	683c      	ldr	r4, [r7, #0]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8007a74:	4622      	mov	r2, r4
 8007a76:	462b      	mov	r3, r5
 8007a78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a7c:	f7f9 f84e 	bl	8000b1c <__aeabi_dcmplt>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e2      	bne.n	8007a4c <_ZL4wrapdd+0x44>
	return angle;
 8007a86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a8a:	ec43 2b17 	vmov	d7, r2, r3
}
 8007a8e:	eeb0 0a47 	vmov.f32	s0, s14
 8007a92:	eef0 0a67 	vmov.f32	s1, s15
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8007a9c:	0000      	movs	r0, r0
	...

08007aa0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef>:

MPU9250::MPU9250(I2C_HandleTypeDef &w) {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	22d0      	movs	r2, #208	@ 0xd0
 8007ab4:	721a      	strb	r2, [r3, #8]
	wire = &w;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	683a      	ldr	r2, [r7, #0]
 8007aba:	605a      	str	r2, [r3, #4]
	setFilterGyroCoef(DEFAULT_GYRO_COEFF);
 8007abc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8007af8 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x58>
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f000 f989 	bl	8007dd8 <_ZN7MPU925017setFilterGyroCoefEd>
	setGyroOffsets(0, 0, 0);
 8007ac6:	ed9f 2b0e 	vldr	d2, [pc, #56]	@ 8007b00 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8007aca:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8007b00 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8007ace:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 8007b00 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f940 	bl	8007d58 <_ZN7MPU925014setGyroOffsetsEddd>
	setAccOffsets(0, 0, 0);
 8007ad8:	ed9f 2b09 	vldr	d2, [pc, #36]	@ 8007b00 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8007adc:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 8007b00 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8007ae0:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8007b00 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f956 	bl	8007d96 <_ZN7MPU925013setAccOffsetsEddd>
}
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	f3af 8000 	nop.w
 8007af8:	f5c28f5c 	.word	0xf5c28f5c
 8007afc:	3fef5c28 	.word	0x3fef5c28
	...

08007b08 <_ZN7MPU92505beginEii>:

uint8_t MPU9250::begin(int gyro_config_num, int acc_config_num) {
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b08a      	sub	sp, #40	@ 0x28
 8007b0c:	af04      	add	r7, sp, #16
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
	uint8_t check, status;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8007b14:	2201      	movs	r2, #1
 8007b16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b1a:	481d      	ldr	r0, [pc, #116]	@ (8007b90 <_ZN7MPU92505beginEii+0x88>)
 8007b1c:	f002 f8be 	bl	8009c9c <HAL_GPIO_WritePin>
	status = HAL_I2C_Mem_Read(wire, address, MPU9250_ADDR_CHECK, 1, &check, 1, 1000);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	6858      	ldr	r0, [r3, #4]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	7a1b      	ldrb	r3, [r3, #8]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007b2e:	9302      	str	r3, [sp, #8]
 8007b30:	2301      	movs	r3, #1
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	f107 0316 	add.w	r3, r7, #22
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	2275      	movs	r2, #117	@ 0x75
 8007b3e:	f002 fb1f 	bl	800a180 <HAL_I2C_Mem_Read>
 8007b42:	4603      	mov	r3, r0
 8007b44:	75fb      	strb	r3, [r7, #23]
	if (check == 113) {
 8007b46:	7dbb      	ldrb	r3, [r7, #22]
 8007b48:	2b71      	cmp	r3, #113	@ 0x71
 8007b4a:	d11c      	bne.n	8007b86 <_ZN7MPU92505beginEii+0x7e>
		writeData(MPU9250_PWR_MGMT_1_REGISTER, 0x01);
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	216b      	movs	r1, #107	@ 0x6b
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 f81f 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
		writeData(MPU9250_SMPLRT_DIV_REGISTER, 0x00);
 8007b56:	2200      	movs	r2, #0
 8007b58:	2119      	movs	r1, #25
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f000 f81a 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
		writeData(MPU9250_CONFIG_REGISTER, 0x00);
 8007b60:	2200      	movs	r2, #0
 8007b62:	211a      	movs	r1, #26
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 f815 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
		setGyroConfig(gyro_config_num);
 8007b6a:	68b9      	ldr	r1, [r7, #8]
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f000 f833 	bl	8007bd8 <_ZN7MPU925013setGyroConfigEi>
		setAccConfig(acc_config_num);
 8007b72:	6879      	ldr	r1, [r7, #4]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f893 	bl	8007ca0 <_ZN7MPU925012setAccConfigEi>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b80:	4803      	ldr	r0, [pc, #12]	@ (8007b90 <_ZN7MPU92505beginEii+0x88>)
 8007b82:	f002 f88b 	bl	8009c9c <HAL_GPIO_WritePin>
	}
	return status;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	40020400 	.word	0x40020400

08007b94 <_ZN7MPU92509writeDataEhh>:

uint8_t MPU9250::writeData(uint8_t reg, uint8_t data) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b088      	sub	sp, #32
 8007b98:	af04      	add	r7, sp, #16
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	70bb      	strb	r3, [r7, #2]
	uint8_t status = HAL_I2C_Mem_Write(wire, address, reg, 1, &data, 1, 1000);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6858      	ldr	r0, [r3, #4]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	7a1b      	ldrb	r3, [r3, #8]
 8007bac:	4619      	mov	r1, r3
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007bb6:	9302      	str	r3, [sp, #8]
 8007bb8:	2301      	movs	r3, #1
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	1cbb      	adds	r3, r7, #2
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f002 f9e3 	bl	8009f8c <HAL_I2C_Mem_Write>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73fb      	strb	r3, [r7, #15]
	return status;
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	0000      	movs	r0, r0
	...

08007bd8 <_ZN7MPU925013setGyroConfigEi>:

uint8_t MPU9250::setGyroConfig(int config_num) {
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
	uint8_t status;
	switch (config_num) {
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d843      	bhi.n	8007c70 <_ZN7MPU925013setGyroConfigEi+0x98>
 8007be8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bf0 <_ZN7MPU925013setGyroConfigEi+0x18>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c1d 	.word	0x08007c1d
 8007bf8:	08007c39 	.word	0x08007c39
 8007bfc:	08007c55 	.word	0x08007c55
		case 0: // range = +- 250 deg/s
			gyro_lsb_to_degsec = 131.0;
 8007c00:	6879      	ldr	r1, [r7, #4]
 8007c02:	a31f      	add	r3, pc, #124	@ (adr r3, 8007c80 <_ZN7MPU925013setGyroConfigEi+0xa8>)
 8007c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c08:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x00);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	211b      	movs	r1, #27
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff ffbf 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
 8007c16:	4603      	mov	r3, r0
 8007c18:	73fb      	strb	r3, [r7, #15]
			break;
 8007c1a:	e02c      	b.n	8007c76 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 1: // range = +- 500 deg/s
			gyro_lsb_to_degsec = 65.5;
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8007c88 <_ZN7MPU925013setGyroConfigEi+0xb0>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x08);
 8007c28:	2208      	movs	r2, #8
 8007c2a:	211b      	movs	r1, #27
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff ffb1 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
 8007c32:	4603      	mov	r3, r0
 8007c34:	73fb      	strb	r3, [r7, #15]
			break;
 8007c36:	e01e      	b.n	8007c76 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 2: // range = +- 1000 deg/s
			gyro_lsb_to_degsec = 32.8;
 8007c38:	6879      	ldr	r1, [r7, #4]
 8007c3a:	a315      	add	r3, pc, #84	@ (adr r3, 8007c90 <_ZN7MPU925013setGyroConfigEi+0xb8>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x10);
 8007c44:	2210      	movs	r2, #16
 8007c46:	211b      	movs	r1, #27
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f7ff ffa3 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73fb      	strb	r3, [r7, #15]
			break;
 8007c52:	e010      	b.n	8007c76 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 3: // range = +- 2000 deg/s
			gyro_lsb_to_degsec = 16.4;
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	a310      	add	r3, pc, #64	@ (adr r3, 8007c98 <_ZN7MPU925013setGyroConfigEi+0xc0>)
 8007c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x18);
 8007c60:	2218      	movs	r2, #24
 8007c62:	211b      	movs	r1, #27
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7ff ff95 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	73fb      	strb	r3, [r7, #15]
			break;
 8007c6e:	e002      	b.n	8007c76 <_ZN7MPU925013setGyroConfigEi+0x9e>
		default: // error
			status = 1;
 8007c70:	2301      	movs	r3, #1
 8007c72:	73fb      	strb	r3, [r7, #15]
			break;
 8007c74:	bf00      	nop
	}
	return status;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	00000000 	.word	0x00000000
 8007c84:	40606000 	.word	0x40606000
 8007c88:	00000000 	.word	0x00000000
 8007c8c:	40506000 	.word	0x40506000
 8007c90:	66666666 	.word	0x66666666
 8007c94:	40406666 	.word	0x40406666
 8007c98:	66666666 	.word	0x66666666
 8007c9c:	40306666 	.word	0x40306666

08007ca0 <_ZN7MPU925012setAccConfigEi>:

uint8_t MPU9250::setAccConfig(int config_num) {
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
	uint8_t status;
	switch (config_num) {
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b03      	cmp	r3, #3
 8007cae:	d843      	bhi.n	8007d38 <_ZN7MPU925012setAccConfigEi+0x98>
 8007cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <_ZN7MPU925012setAccConfigEi+0x18>)
 8007cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb6:	bf00      	nop
 8007cb8:	08007cc9 	.word	0x08007cc9
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007d01 	.word	0x08007d01
 8007cc4:	08007d1d 	.word	0x08007d1d
		case 0: // range = +- 2 g
			acc_lsb_to_g = 16384.0;
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	f04f 0200 	mov.w	r2, #0
 8007cce:	4b1e      	ldr	r3, [pc, #120]	@ (8007d48 <_ZN7MPU925012setAccConfigEi+0xa8>)
 8007cd0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x00);
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	211c      	movs	r1, #28
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff ff5b 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
			break;
 8007ce2:	e02c      	b.n	8007d3e <_ZN7MPU925012setAccConfigEi+0x9e>
		case 1: // range = +- 4 g
			acc_lsb_to_g = 8192.0;
 8007ce4:	6879      	ldr	r1, [r7, #4]
 8007ce6:	f04f 0200 	mov.w	r2, #0
 8007cea:	4b18      	ldr	r3, [pc, #96]	@ (8007d4c <_ZN7MPU925012setAccConfigEi+0xac>)
 8007cec:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x08);
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	211c      	movs	r1, #28
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff ff4d 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	73fb      	strb	r3, [r7, #15]
			break;
 8007cfe:	e01e      	b.n	8007d3e <_ZN7MPU925012setAccConfigEi+0x9e>
		case 2: // range = +- 8 g
			acc_lsb_to_g = 4096.0;
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	4b12      	ldr	r3, [pc, #72]	@ (8007d50 <_ZN7MPU925012setAccConfigEi+0xb0>)
 8007d08:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x10);
 8007d0c:	2210      	movs	r2, #16
 8007d0e:	211c      	movs	r1, #28
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7ff ff3f 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73fb      	strb	r3, [r7, #15]
			break;
 8007d1a:	e010      	b.n	8007d3e <_ZN7MPU925012setAccConfigEi+0x9e>
		case 3: // range = +- 16 g
			acc_lsb_to_g = 2048.0;
 8007d1c:	6879      	ldr	r1, [r7, #4]
 8007d1e:	f04f 0200 	mov.w	r2, #0
 8007d22:	4b0c      	ldr	r3, [pc, #48]	@ (8007d54 <_ZN7MPU925012setAccConfigEi+0xb4>)
 8007d24:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x18);
 8007d28:	2218      	movs	r2, #24
 8007d2a:	211c      	movs	r1, #28
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff ff31 	bl	8007b94 <_ZN7MPU92509writeDataEhh>
 8007d32:	4603      	mov	r3, r0
 8007d34:	73fb      	strb	r3, [r7, #15]
			break;
 8007d36:	e002      	b.n	8007d3e <_ZN7MPU925012setAccConfigEi+0x9e>
		default: // error
			status = 1;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
			break;
 8007d3c:	bf00      	nop
	}
	return status;
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	40d00000 	.word	0x40d00000
 8007d4c:	40c00000 	.word	0x40c00000
 8007d50:	40b00000 	.word	0x40b00000
 8007d54:	40a00000 	.word	0x40a00000

08007d58 <_ZN7MPU925014setGyroOffsetsEddd>:

void MPU9250::setGyroOffsets(double x, double y, double z) {
 8007d58:	b480      	push	{r7}
 8007d5a:	b089      	sub	sp, #36	@ 0x24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	61f8      	str	r0, [r7, #28]
 8007d60:	ed87 0b04 	vstr	d0, [r7, #16]
 8007d64:	ed87 1b02 	vstr	d1, [r7, #8]
 8007d68:	ed87 2b00 	vstr	d2, [r7]
	gyroXoffset = x;
 8007d6c:	69f9      	ldr	r1, [r7, #28]
 8007d6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007d72:	e9c1 2308 	strd	r2, r3, [r1, #32]
	gyroYoffset = y;
 8007d76:	69f9      	ldr	r1, [r7, #28]
 8007d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d7c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	gyroZoffset = z;
 8007d80:	69f9      	ldr	r1, [r7, #28]
 8007d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d86:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 8007d8a:	bf00      	nop
 8007d8c:	3724      	adds	r7, #36	@ 0x24
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <_ZN7MPU925013setAccOffsetsEddd>:

void MPU9250::setAccOffsets(double x, double y, double z) {
 8007d96:	b480      	push	{r7}
 8007d98:	b089      	sub	sp, #36	@ 0x24
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	61f8      	str	r0, [r7, #28]
 8007d9e:	ed87 0b04 	vstr	d0, [r7, #16]
 8007da2:	ed87 1b02 	vstr	d1, [r7, #8]
 8007da6:	ed87 2b00 	vstr	d2, [r7]
	accXoffset = x;
 8007daa:	69f9      	ldr	r1, [r7, #28]
 8007dac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007db0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	accYoffset = y;
 8007db4:	69f9      	ldr	r1, [r7, #28]
 8007db6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dba:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	accZoffset = z;
 8007dbe:	69f9      	ldr	r1, [r7, #28]
 8007dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dc4:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8007dc8:	bf00      	nop
 8007dca:	3724      	adds	r7, #36	@ 0x24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	0000      	movs	r0, r0
	...

08007dd8 <_ZN7MPU925017setFilterGyroCoefEd>:

void MPU9250::setFilterGyroCoef(double gyro_coeff) {
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	ed87 0b00 	vstr	d0, [r7]
	if ((gyro_coeff < 0) or (gyro_coeff > 1)) {
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	f04f 0300 	mov.w	r3, #0
 8007dec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007df0:	f7f8 fe94 	bl	8000b1c <__aeabi_dcmplt>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d109      	bne.n	8007e0e <_ZN7MPU925017setFilterGyroCoefEd+0x36>
 8007dfa:	f04f 0200 	mov.w	r2, #0
 8007dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007e38 <_ZN7MPU925017setFilterGyroCoefEd+0x60>)
 8007e00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007e04:	f7f8 fea8 	bl	8000b58 <__aeabi_dcmpgt>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d004      	beq.n	8007e18 <_ZN7MPU925017setFilterGyroCoefEd+0x40>
		gyro_coeff = DEFAULT_GYRO_COEFF;
 8007e0e:	a308      	add	r3, pc, #32	@ (adr r3, 8007e30 <_ZN7MPU925017setFilterGyroCoefEd+0x58>)
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	e9c7 2300 	strd	r2, r3, [r7]
	}
	filterGyroCoef = gyro_coeff;
 8007e18:	68f9      	ldr	r1, [r7, #12]
 8007e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e1e:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
}
 8007e22:	bf00      	nop
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	f3af 8000 	nop.w
 8007e30:	f5c28f5c 	.word	0xf5c28f5c
 8007e34:	3fef5c28 	.word	0x3fef5c28
 8007e38:	3ff00000 	.word	0x3ff00000
 8007e3c:	00000000 	.word	0x00000000

08007e40 <_ZN7MPU925011calcOffsetsEbb>:

void MPU9250::setFilterAccCoef(double acc_coeff) {
	setFilterGyroCoef(1.0 - acc_coeff);
}

void MPU9250::calcOffsets(bool is_calc_gyro, bool is_calc_acc) {
 8007e40:	b5b0      	push	{r4, r5, r7, lr}
 8007e42:	b090      	sub	sp, #64	@ 0x40
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
 8007e4c:	4613      	mov	r3, r2
 8007e4e:	70bb      	strb	r3, [r7, #2]
	if (is_calc_gyro) {
 8007e50:	78fb      	ldrb	r3, [r7, #3]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d008      	beq.n	8007e68 <_ZN7MPU925011calcOffsetsEbb+0x28>
		setGyroOffsets(0, 0, 0);
 8007e56:	ed9f 2b64 	vldr	d2, [pc, #400]	@ 8007fe8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007e5a:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 8007fe8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007e5e:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 8007fe8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7ff ff78 	bl	8007d58 <_ZN7MPU925014setGyroOffsetsEddd>
	}
	if (is_calc_acc) {
 8007e68:	78bb      	ldrb	r3, [r7, #2]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d008      	beq.n	8007e80 <_ZN7MPU925011calcOffsetsEbb+0x40>
		setAccOffsets(0, 0, 0);
 8007e6e:	ed9f 2b5e 	vldr	d2, [pc, #376]	@ 8007fe8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007e72:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8007fe8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007e76:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8007fe8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff ff8b 	bl	8007d96 <_ZN7MPU925013setAccOffsetsEddd>
	}
	double ag[6] = { 0, 0, 0, 0, 0, 0 };
 8007e80:	f107 0308 	add.w	r3, r7, #8
 8007e84:	2230      	movs	r2, #48	@ 0x30
 8007e86:	2100      	movs	r1, #0
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f007 fb74 	bl	800f576 <memset>

	for (int i = 0; i < CALIB_OFFSET_NB_MES; i++) {
 8007e8e:	2300      	movs	r3, #0
 8007e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e92:	e053      	b.n	8007f3c <_ZN7MPU925011calcOffsetsEbb+0xfc>
		this->fetchData();
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f8af 	bl	8007ff8 <_ZN7MPU92509fetchDataEv>
		ag[0] += accX;
 8007e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8007ea4:	f7f8 fa12 	bl	80002cc <__adddf3>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	460b      	mov	r3, r1
 8007eac:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ag[1] += accY;
 8007eb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8007eba:	f7f8 fa07 	bl	80002cc <__adddf3>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ag[2] += (accZ - 1.0);
 8007ec6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8007ed0:	f04f 0200 	mov.w	r2, #0
 8007ed4:	4b46      	ldr	r3, [pc, #280]	@ (8007ff0 <_ZN7MPU925011calcOffsetsEbb+0x1b0>)
 8007ed6:	f7f8 f9f7 	bl	80002c8 <__aeabi_dsub>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4620      	mov	r0, r4
 8007ee0:	4629      	mov	r1, r5
 8007ee2:	f7f8 f9f3 	bl	80002cc <__adddf3>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ag[3] += gyroX;
 8007eee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8007ef8:	f7f8 f9e8 	bl	80002cc <__adddf3>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ag[4] += gyroY;
 8007f04:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8007f0e:	f7f8 f9dd 	bl	80002cc <__adddf3>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		ag[5] += gyroZ;
 8007f1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8007f24:	f7f8 f9d2 	bl	80002cc <__adddf3>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		HAL_Delay(1);
 8007f30:	2001      	movs	r0, #1
 8007f32:	f000 ffe7 	bl	8008f04 <HAL_Delay>
	for (int i = 0; i < CALIB_OFFSET_NB_MES; i++) {
 8007f36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f38:	3301      	adds	r3, #1
 8007f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007f42:	dba7      	blt.n	8007e94 <_ZN7MPU925011calcOffsetsEbb+0x54>
	}

	if (is_calc_acc) {
 8007f44:	78bb      	ldrb	r3, [r7, #2]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d023      	beq.n	8007f92 <_ZN7MPU925011calcOffsetsEbb+0x152>
		accXoffset = ag[0] / CALIB_OFFSET_NB_MES;
 8007f4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	4b28      	ldr	r3, [pc, #160]	@ (8007ff4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007f54:	f7f8 fc9a 	bl	800088c <__aeabi_ddiv>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	6879      	ldr	r1, [r7, #4]
 8007f5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		accYoffset = ag[1] / CALIB_OFFSET_NB_MES;
 8007f62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	4b22      	ldr	r3, [pc, #136]	@ (8007ff4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007f6c:	f7f8 fc8e 	bl	800088c <__aeabi_ddiv>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	6879      	ldr	r1, [r7, #4]
 8007f76:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		accZoffset = ag[2] / CALIB_OFFSET_NB_MES;
 8007f7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	4b1c      	ldr	r3, [pc, #112]	@ (8007ff4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007f84:	f7f8 fc82 	bl	800088c <__aeabi_ddiv>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	}

	if (is_calc_gyro) {
 8007f92:	78fb      	ldrb	r3, [r7, #3]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d023      	beq.n	8007fe0 <_ZN7MPU925011calcOffsetsEbb+0x1a0>
		gyroXoffset = ag[3] / CALIB_OFFSET_NB_MES;
 8007f98:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007f9c:	f04f 0200 	mov.w	r2, #0
 8007fa0:	4b14      	ldr	r3, [pc, #80]	@ (8007ff4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007fa2:	f7f8 fc73 	bl	800088c <__aeabi_ddiv>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	e9c1 2308 	strd	r2, r3, [r1, #32]
		gyroYoffset = ag[4] / CALIB_OFFSET_NB_MES;
 8007fb0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8007ff4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007fba:	f7f8 fc67 	bl	800088c <__aeabi_ddiv>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	6879      	ldr	r1, [r7, #4]
 8007fc4:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		gyroZoffset = ag[5] / CALIB_OFFSET_NB_MES;
 8007fc8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	4b08      	ldr	r3, [pc, #32]	@ (8007ff4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007fd2:	f7f8 fc5b 	bl	800088c <__aeabi_ddiv>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	6879      	ldr	r1, [r7, #4]
 8007fdc:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	}
}
 8007fe0:	bf00      	nop
 8007fe2:	3740      	adds	r7, #64	@ 0x40
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8007ff0:	3ff00000 	.word	0x3ff00000
 8007ff4:	407f4000 	.word	0x407f4000

08007ff8 <_ZN7MPU92509fetchDataEv>:

uint8_t MPU9250::fetchData() {
 8007ff8:	b5b0      	push	{r4, r5, r7, lr}
 8007ffa:	b090      	sub	sp, #64	@ 0x40
 8007ffc:	af04      	add	r7, sp, #16
 8007ffe:	6078      	str	r0, [r7, #4]
	uint8_t i2cData[14], status;
	status = HAL_I2C_Mem_Read(wire, address, MPU9250_ACCEL_OUT_REGISTER, 1, i2cData, 14, 1000);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6858      	ldr	r0, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	7a1b      	ldrb	r3, [r3, #8]
 8008008:	4619      	mov	r1, r3
 800800a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800800e:	9302      	str	r3, [sp, #8]
 8008010:	230e      	movs	r3, #14
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	f107 0318 	add.w	r3, r7, #24
 8008018:	9300      	str	r3, [sp, #0]
 800801a:	2301      	movs	r3, #1
 800801c:	223b      	movs	r2, #59	@ 0x3b
 800801e:	f002 f8af 	bl	800a180 <HAL_I2C_Mem_Read>
 8008022:	4603      	mov	r3, r0
 8008024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	int16_t rawData[7];
	int j = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i < 14; i += 2) {
 800802c:	2300      	movs	r3, #0
 800802e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008030:	e01a      	b.n	8008068 <_ZN7MPU92509fetchDataEv+0x70>
		rawData[j++] = (int16_t) (i2cData[i] << 8 | i2cData[i + 1]);
 8008032:	f107 0218 	add.w	r2, r7, #24
 8008036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008038:	4413      	add	r3, r2
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	021b      	lsls	r3, r3, #8
 800803e:	b219      	sxth	r1, r3
 8008040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008042:	3301      	adds	r3, #1
 8008044:	3330      	adds	r3, #48	@ 0x30
 8008046:	443b      	add	r3, r7
 8008048:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800804c:	b21a      	sxth	r2, r3
 800804e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008050:	1c58      	adds	r0, r3, #1
 8008052:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008054:	430a      	orrs	r2, r1
 8008056:	b212      	sxth	r2, r2
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	3330      	adds	r3, #48	@ 0x30
 800805c:	443b      	add	r3, r7
 800805e:	f823 2c28 	strh.w	r2, [r3, #-40]
	for (int i = 0; i < 14; i += 2) {
 8008062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008064:	3302      	adds	r3, #2
 8008066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	2b0d      	cmp	r3, #13
 800806c:	dde1      	ble.n	8008032 <_ZN7MPU92509fetchDataEv+0x3a>
	}

	accX = ((double) rawData[0]) / acc_lsb_to_g - accXoffset;
 800806e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008072:	4618      	mov	r0, r3
 8008074:	f7f8 fa76 	bl	8000564 <__aeabi_i2d>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800807e:	f7f8 fc05 	bl	800088c <__aeabi_ddiv>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4610      	mov	r0, r2
 8008088:	4619      	mov	r1, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008090:	f7f8 f91a 	bl	80002c8 <__aeabi_dsub>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	accY = ((double) rawData[1]) / acc_lsb_to_g - accYoffset;
 800809e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7f8 fa5e 	bl	8000564 <__aeabi_i2d>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80080ae:	f7f8 fbed 	bl	800088c <__aeabi_ddiv>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4610      	mov	r0, r2
 80080b8:	4619      	mov	r1, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80080c0:	f7f8 f902 	bl	80002c8 <__aeabi_dsub>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	accZ = (!upsideDownMounting - upsideDownMounting) * ((double) rawData[2]) / acc_lsb_to_g - accZoffset;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f083 0301 	eor.w	r3, r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	461a      	mov	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7f8 fa3f 	bl	8000564 <__aeabi_i2d>
 80080e6:	4604      	mov	r4, r0
 80080e8:	460d      	mov	r5, r1
 80080ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f8 fa38 	bl	8000564 <__aeabi_i2d>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4620      	mov	r0, r4
 80080fa:	4629      	mov	r1, r5
 80080fc:	f7f8 fa9c 	bl	8000638 <__aeabi_dmul>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	4610      	mov	r0, r2
 8008106:	4619      	mov	r1, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800810e:	f7f8 fbbd 	bl	800088c <__aeabi_ddiv>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4610      	mov	r0, r2
 8008118:	4619      	mov	r1, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8008120:	f7f8 f8d2 	bl	80002c8 <__aeabi_dsub>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	temp = (rawData[3] + TEMP_LSB_OFFSET) / TEMP_LSB_2_DEGREE;
 800812e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008132:	4618      	mov	r0, r3
 8008134:	f7f8 fa16 	bl	8000564 <__aeabi_i2d>
 8008138:	a332      	add	r3, pc, #200	@ (adr r3, 8008204 <_ZN7MPU92509fetchDataEv+0x20c>)
 800813a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813e:	f7f8 f8c5 	bl	80002cc <__adddf3>
 8008142:	4602      	mov	r2, r0
 8008144:	460b      	mov	r3, r1
 8008146:	4610      	mov	r0, r2
 8008148:	4619      	mov	r1, r3
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	4b2c      	ldr	r3, [pc, #176]	@ (8008200 <_ZN7MPU92509fetchDataEv+0x208>)
 8008150:	f7f8 fb9c 	bl	800088c <__aeabi_ddiv>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	6879      	ldr	r1, [r7, #4]
 800815a:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	gyroX = ((double) rawData[4]) / gyro_lsb_to_degsec - gyroXoffset;
 800815e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008162:	4618      	mov	r0, r3
 8008164:	f7f8 f9fe 	bl	8000564 <__aeabi_i2d>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800816e:	f7f8 fb8d 	bl	800088c <__aeabi_ddiv>
 8008172:	4602      	mov	r2, r0
 8008174:	460b      	mov	r3, r1
 8008176:	4610      	mov	r0, r2
 8008178:	4619      	mov	r1, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008180:	f7f8 f8a2 	bl	80002c8 <__aeabi_dsub>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	6879      	ldr	r1, [r7, #4]
 800818a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	gyroY = ((double) rawData[5]) / gyro_lsb_to_degsec - gyroYoffset;
 800818e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008192:	4618      	mov	r0, r3
 8008194:	f7f8 f9e6 	bl	8000564 <__aeabi_i2d>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800819e:	f7f8 fb75 	bl	800088c <__aeabi_ddiv>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4610      	mov	r0, r2
 80081a8:	4619      	mov	r1, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80081b0:	f7f8 f88a 	bl	80002c8 <__aeabi_dsub>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	6879      	ldr	r1, [r7, #4]
 80081ba:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	gyroZ = ((double) rawData[6]) / gyro_lsb_to_degsec - gyroZoffset;
 80081be:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7f8 f9ce 	bl	8000564 <__aeabi_i2d>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80081ce:	f7f8 fb5d 	bl	800088c <__aeabi_ddiv>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4610      	mov	r0, r2
 80081d8:	4619      	mov	r1, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80081e0:	f7f8 f872 	bl	80002c8 <__aeabi_dsub>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

	return status;
 80081ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3730      	adds	r7, #48	@ 0x30
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bdb0      	pop	{r4, r5, r7, pc}
 80081fa:	bf00      	nop
 80081fc:	f3af 8000 	nop.w
 8008200:	40754000 	.word	0x40754000
 8008204:	00000000 	.word	0x00000000
 8008208:	40c83e00 	.word	0x40c83e00
 800820c:	00000000 	.word	0x00000000

08008210 <_ZN7MPU92506updateEv>:

uint8_t MPU9250::update() {
 8008210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008214:	ed2d 8b02 	vpush	{d8}
 8008218:	b08b      	sub	sp, #44	@ 0x2c
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
	uint8_t status = this->fetchData();
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff feea 	bl	8007ff8 <_ZN7MPU92509fetchDataEv>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	double sgZ = (accZ >= 0) - (accZ < 0);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8008230:	2301      	movs	r3, #1
 8008232:	461e      	mov	r6, r3
 8008234:	f04f 0200 	mov.w	r2, #0
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	f7f8 fc82 	bl	8000b44 <__aeabi_dcmpge>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <_ZN7MPU92506updateEv+0x3a>
 8008246:	2300      	movs	r3, #0
 8008248:	461e      	mov	r6, r3
 800824a:	b2f3      	uxtb	r3, r6
 800824c:	461e      	mov	r6, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8008254:	2301      	movs	r3, #1
 8008256:	4698      	mov	r8, r3
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	f04f 0300 	mov.w	r3, #0
 8008260:	f7f8 fc5c 	bl	8000b1c <__aeabi_dcmplt>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <_ZN7MPU92506updateEv+0x5e>
 800826a:	2300      	movs	r3, #0
 800826c:	4698      	mov	r8, r3
 800826e:	fa5f f388 	uxtb.w	r3, r8
 8008272:	1af3      	subs	r3, r6, r3
 8008274:	4618      	mov	r0, r3
 8008276:	f7f8 f975 	bl	8000564 <__aeabi_i2d>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	angleAccX = atan2(accY, sgZ * sqrt(accZ * accZ + accX * accX)) * RAD_2_DEG;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	ed93 8b18 	vldr	d8, [r3, #96]	@ 0x60
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8008294:	f7f8 f9d0 	bl	8000638 <__aeabi_dmul>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4690      	mov	r8, r2
 800829e:	4699      	mov	r9, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80082ac:	f7f8 f9c4 	bl	8000638 <__aeabi_dmul>
 80082b0:	4602      	mov	r2, r0
 80082b2:	460b      	mov	r3, r1
 80082b4:	4640      	mov	r0, r8
 80082b6:	4649      	mov	r1, r9
 80082b8:	f7f8 f808 	bl	80002cc <__adddf3>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	ec43 2b17 	vmov	d7, r2, r3
 80082c4:	eeb0 0a47 	vmov.f32	s0, s14
 80082c8:	eef0 0a67 	vmov.f32	s1, s15
 80082cc:	f005 fe1c 	bl	800df08 <sqrt>
 80082d0:	ec51 0b10 	vmov	r0, r1, d0
 80082d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082d8:	f7f8 f9ae 	bl	8000638 <__aeabi_dmul>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	ec43 2b17 	vmov	d7, r2, r3
 80082e4:	eeb0 1a47 	vmov.f32	s2, s14
 80082e8:	eef0 1a67 	vmov.f32	s3, s15
 80082ec:	eeb0 0a48 	vmov.f32	s0, s16
 80082f0:	eef0 0a68 	vmov.f32	s1, s17
 80082f4:	f005 fe06 	bl	800df04 <atan2>
 80082f8:	ec51 0b10 	vmov	r0, r1, d0
 80082fc:	a3b1      	add	r3, pc, #708	@ (adr r3, 80085c4 <_ZN7MPU92506updateEv+0x3b4>)
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f7f8 f999 	bl	8000638 <__aeabi_dmul>
 8008306:	4602      	mov	r2, r0
 8008308:	460b      	mov	r3, r1
 800830a:	6879      	ldr	r1, [r7, #4]
 800830c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	angleAccY = -atan2(accX, sqrt(accZ * accZ + accY * accY)) * RAD_2_DEG;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	ed93 8b16 	vldr	d8, [r3, #88]	@ 0x58
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8008322:	f7f8 f989 	bl	8000638 <__aeabi_dmul>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	4690      	mov	r8, r2
 800832c:	4699      	mov	r9, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800833a:	f7f8 f97d 	bl	8000638 <__aeabi_dmul>
 800833e:	4602      	mov	r2, r0
 8008340:	460b      	mov	r3, r1
 8008342:	4640      	mov	r0, r8
 8008344:	4649      	mov	r1, r9
 8008346:	f7f7 ffc1 	bl	80002cc <__adddf3>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	ec43 2b17 	vmov	d7, r2, r3
 8008352:	eeb0 0a47 	vmov.f32	s0, s14
 8008356:	eef0 0a67 	vmov.f32	s1, s15
 800835a:	f005 fdd5 	bl	800df08 <sqrt>
 800835e:	eeb0 7a40 	vmov.f32	s14, s0
 8008362:	eef0 7a60 	vmov.f32	s15, s1
 8008366:	eeb0 1a47 	vmov.f32	s2, s14
 800836a:	eef0 1a67 	vmov.f32	s3, s15
 800836e:	eeb0 0a48 	vmov.f32	s0, s16
 8008372:	eef0 0a68 	vmov.f32	s1, s17
 8008376:	f005 fdc5 	bl	800df04 <atan2>
 800837a:	ec53 2b10 	vmov	r2, r3, d0
 800837e:	4614      	mov	r4, r2
 8008380:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8008384:	a38f      	add	r3, pc, #572	@ (adr r3, 80085c4 <_ZN7MPU92506updateEv+0x3b4>)
 8008386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800838a:	4620      	mov	r0, r4
 800838c:	4629      	mov	r1, r5
 800838e:	f7f8 f953 	bl	8000638 <__aeabi_dmul>
 8008392:	4602      	mov	r2, r0
 8008394:	460b      	mov	r3, r1
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	uint32_t Tnew = HAL_GetTick();
 800839c:	f000 fda6 	bl	8008eec <HAL_GetTick>
 80083a0:	6178      	str	r0, [r7, #20]
	double dt = (Tnew - preInterval) * 1e-3;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7f8 f8c9 	bl	8000544 <__aeabi_ui2d>
 80083b2:	a386      	add	r3, pc, #536	@ (adr r3, 80085cc <_ZN7MPU92506updateEv+0x3bc>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f7f8 f93e 	bl	8000638 <__aeabi_dmul>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	preInterval = Tnew;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

	angleX = wrap(
			filterGyroCoef * (angleAccX + wrap(angleX + gyroX * dt - angleAccX, 180)) + (1.0 - filterGyroCoef) * angleAccX,
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	@ 0xb8
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	e9d3 8922 	ldrd	r8, r9, [r3, #136]	@ 0x88
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	e9d3 ab26 	ldrd	sl, fp, [r3, #152]	@ 0x98
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 80083e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083e8:	f7f8 f926 	bl	8000638 <__aeabi_dmul>
 80083ec:	4602      	mov	r2, r0
 80083ee:	460b      	mov	r3, r1
 80083f0:	4650      	mov	r0, sl
 80083f2:	4659      	mov	r1, fp
 80083f4:	f7f7 ff6a 	bl	80002cc <__adddf3>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4610      	mov	r0, r2
 80083fe:	4619      	mov	r1, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8008406:	f7f7 ff5f 	bl	80002c8 <__aeabi_dsub>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	ec43 2b17 	vmov	d7, r2, r3
 8008412:	ed9f 1b67 	vldr	d1, [pc, #412]	@ 80085b0 <_ZN7MPU92506updateEv+0x3a0>
 8008416:	eeb0 0a47 	vmov.f32	s0, s14
 800841a:	eef0 0a67 	vmov.f32	s1, s15
 800841e:	f7ff faf3 	bl	8007a08 <_ZL4wrapdd>
 8008422:	ec53 2b10 	vmov	r2, r3, d0
 8008426:	4640      	mov	r0, r8
 8008428:	4649      	mov	r1, r9
 800842a:	f7f7 ff4f 	bl	80002cc <__adddf3>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	4620      	mov	r0, r4
 8008434:	4629      	mov	r1, r5
 8008436:	f7f8 f8ff 	bl	8000638 <__aeabi_dmul>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4614      	mov	r4, r2
 8008440:	461d      	mov	r5, r3
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8008448:	f04f 0000 	mov.w	r0, #0
 800844c:	495c      	ldr	r1, [pc, #368]	@ (80085c0 <_ZN7MPU92506updateEv+0x3b0>)
 800844e:	f7f7 ff3b 	bl	80002c8 <__aeabi_dsub>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	4610      	mov	r0, r2
 8008458:	4619      	mov	r1, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8008460:	f7f8 f8ea 	bl	8000638 <__aeabi_dmul>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
	angleX = wrap(
 8008468:	4620      	mov	r0, r4
 800846a:	4629      	mov	r1, r5
 800846c:	f7f7 ff2e 	bl	80002cc <__adddf3>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	ec43 2b17 	vmov	d7, r2, r3
 8008478:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 80085b0 <_ZN7MPU92506updateEv+0x3a0>
 800847c:	eeb0 0a47 	vmov.f32	s0, s14
 8008480:	eef0 0a67 	vmov.f32	s1, s15
 8008484:	f7ff fac0 	bl	8007a08 <_ZL4wrapdd>
 8008488:	eeb0 7a40 	vmov.f32	s14, s0
 800848c:	eef0 7a60 	vmov.f32	s15, s1
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
			180);
	angleY = wrap(
			filterGyroCoef * (angleAccY + wrap(angleY + sgZ * gyroY * dt - angleAccY, 90))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	@ 0xb8
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	e9d3 8924 	ldrd	r8, r9, [r3, #144]	@ 0x90
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	e9d3 ab28 	ldrd	sl, fp, [r3, #160]	@ 0xa0
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80084ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084b2:	f7f8 f8c1 	bl	8000638 <__aeabi_dmul>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4610      	mov	r0, r2
 80084bc:	4619      	mov	r1, r3
 80084be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80084c2:	f7f8 f8b9 	bl	8000638 <__aeabi_dmul>
 80084c6:	4602      	mov	r2, r0
 80084c8:	460b      	mov	r3, r1
 80084ca:	4650      	mov	r0, sl
 80084cc:	4659      	mov	r1, fp
 80084ce:	f7f7 fefd 	bl	80002cc <__adddf3>
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	4610      	mov	r0, r2
 80084d8:	4619      	mov	r1, r3
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 80084e0:	f7f7 fef2 	bl	80002c8 <__aeabi_dsub>
 80084e4:	4602      	mov	r2, r0
 80084e6:	460b      	mov	r3, r1
 80084e8:	ec43 2b17 	vmov	d7, r2, r3
 80084ec:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 80085b8 <_ZN7MPU92506updateEv+0x3a8>
 80084f0:	eeb0 0a47 	vmov.f32	s0, s14
 80084f4:	eef0 0a67 	vmov.f32	s1, s15
 80084f8:	f7ff fa86 	bl	8007a08 <_ZL4wrapdd>
 80084fc:	ec53 2b10 	vmov	r2, r3, d0
 8008500:	4640      	mov	r0, r8
 8008502:	4649      	mov	r1, r9
 8008504:	f7f7 fee2 	bl	80002cc <__adddf3>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4620      	mov	r0, r4
 800850e:	4629      	mov	r1, r5
 8008510:	f7f8 f892 	bl	8000638 <__aeabi_dmul>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4614      	mov	r4, r2
 800851a:	461d      	mov	r5, r3
					+ (1.0 - filterGyroCoef) * angleAccY, 90);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8008522:	f04f 0000 	mov.w	r0, #0
 8008526:	4926      	ldr	r1, [pc, #152]	@ (80085c0 <_ZN7MPU92506updateEv+0x3b0>)
 8008528:	f7f7 fece 	bl	80002c8 <__aeabi_dsub>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4610      	mov	r0, r2
 8008532:	4619      	mov	r1, r3
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800853a:	f7f8 f87d 	bl	8000638 <__aeabi_dmul>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
	angleY = wrap(
 8008542:	4620      	mov	r0, r4
 8008544:	4629      	mov	r1, r5
 8008546:	f7f7 fec1 	bl	80002cc <__adddf3>
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	ec43 2b17 	vmov	d7, r2, r3
 8008552:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 80085b8 <_ZN7MPU92506updateEv+0x3a8>
 8008556:	eeb0 0a47 	vmov.f32	s0, s14
 800855a:	eef0 0a67 	vmov.f32	s1, s15
 800855e:	f7ff fa53 	bl	8007a08 <_ZL4wrapdd>
 8008562:	eeb0 7a40 	vmov.f32	s14, s0
 8008566:	eef0 7a60 	vmov.f32	s15, s1
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
	angleZ += gyroZ * dt;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	@ 0xa8
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 800857c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008580:	f7f8 f85a 	bl	8000638 <__aeabi_dmul>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4620      	mov	r0, r4
 800858a:	4629      	mov	r1, r5
 800858c:	f7f7 fe9e 	bl	80002cc <__adddf3>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8

	return status;
 800859a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800859e:	4618      	mov	r0, r3
 80085a0:	372c      	adds	r7, #44	@ 0x2c
 80085a2:	46bd      	mov	sp, r7
 80085a4:	ecbd 8b02 	vpop	{d8}
 80085a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ac:	f3af 8000 	nop.w
 80085b0:	00000000 	.word	0x00000000
 80085b4:	40668000 	.word	0x40668000
 80085b8:	00000000 	.word	0x00000000
 80085bc:	40568000 	.word	0x40568000
 80085c0:	3ff00000 	.word	0x3ff00000
 80085c4:	1e7967cb 	.word	0x1e7967cb
 80085c8:	404ca5dc 	.word	0x404ca5dc
 80085cc:	d2f1a9fc 	.word	0xd2f1a9fc
 80085d0:	3f50624d 	.word	0x3f50624d

080085d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80085da:	2300      	movs	r3, #0
 80085dc:	607b      	str	r3, [r7, #4]
 80085de:	4b10      	ldr	r3, [pc, #64]	@ (8008620 <HAL_MspInit+0x4c>)
 80085e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e2:	4a0f      	ldr	r2, [pc, #60]	@ (8008620 <HAL_MspInit+0x4c>)
 80085e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80085ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008620 <HAL_MspInit+0x4c>)
 80085ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085f2:	607b      	str	r3, [r7, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085f6:	2300      	movs	r3, #0
 80085f8:	603b      	str	r3, [r7, #0]
 80085fa:	4b09      	ldr	r3, [pc, #36]	@ (8008620 <HAL_MspInit+0x4c>)
 80085fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085fe:	4a08      	ldr	r2, [pc, #32]	@ (8008620 <HAL_MspInit+0x4c>)
 8008600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008604:	6413      	str	r3, [r2, #64]	@ 0x40
 8008606:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <HAL_MspInit+0x4c>)
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800860e:	603b      	str	r3, [r7, #0]
 8008610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008612:	bf00      	nop
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	40023800 	.word	0x40023800

08008624 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b08a      	sub	sp, #40	@ 0x28
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800862c:	f107 0314 	add.w	r3, r7, #20
 8008630:	2200      	movs	r2, #0
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	605a      	str	r2, [r3, #4]
 8008636:	609a      	str	r2, [r3, #8]
 8008638:	60da      	str	r2, [r3, #12]
 800863a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a19      	ldr	r2, [pc, #100]	@ (80086a8 <HAL_I2C_MspInit+0x84>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d12c      	bne.n	80086a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008646:	2300      	movs	r3, #0
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	4b18      	ldr	r3, [pc, #96]	@ (80086ac <HAL_I2C_MspInit+0x88>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864e:	4a17      	ldr	r2, [pc, #92]	@ (80086ac <HAL_I2C_MspInit+0x88>)
 8008650:	f043 0302 	orr.w	r3, r3, #2
 8008654:	6313      	str	r3, [r2, #48]	@ 0x30
 8008656:	4b15      	ldr	r3, [pc, #84]	@ (80086ac <HAL_I2C_MspInit+0x88>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800865a:	f003 0302 	and.w	r3, r3, #2
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = SDA_Pin|SCL_Pin;
 8008662:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8008666:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008668:	2312      	movs	r3, #18
 800866a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800866c:	2300      	movs	r3, #0
 800866e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008670:	2303      	movs	r3, #3
 8008672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008674:	2304      	movs	r3, #4
 8008676:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008678:	f107 0314 	add.w	r3, r7, #20
 800867c:	4619      	mov	r1, r3
 800867e:	480c      	ldr	r0, [pc, #48]	@ (80086b0 <HAL_I2C_MspInit+0x8c>)
 8008680:	f001 f978 	bl	8009974 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	4b08      	ldr	r3, [pc, #32]	@ (80086ac <HAL_I2C_MspInit+0x88>)
 800868a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868c:	4a07      	ldr	r2, [pc, #28]	@ (80086ac <HAL_I2C_MspInit+0x88>)
 800868e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008692:	6413      	str	r3, [r2, #64]	@ 0x40
 8008694:	4b05      	ldr	r3, [pc, #20]	@ (80086ac <HAL_I2C_MspInit+0x88>)
 8008696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008698:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80086a0:	bf00      	nop
 80086a2:	3728      	adds	r7, #40	@ 0x28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	40005400 	.word	0x40005400
 80086ac:	40023800 	.word	0x40023800
 80086b0:	40020400 	.word	0x40020400

080086b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b090      	sub	sp, #64	@ 0x40
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	605a      	str	r2, [r3, #4]
 80086c6:	609a      	str	r2, [r3, #8]
 80086c8:	60da      	str	r2, [r3, #12]
 80086ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a64      	ldr	r2, [pc, #400]	@ (8008864 <HAL_TIM_Encoder_MspInit+0x1b0>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d12d      	bne.n	8008732 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80086d6:	2300      	movs	r3, #0
 80086d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086da:	4b63      	ldr	r3, [pc, #396]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086de:	4a62      	ldr	r2, [pc, #392]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086e0:	f043 0301 	orr.w	r3, r3, #1
 80086e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80086e6:	4b60      	ldr	r3, [pc, #384]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80086f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086f2:	2300      	movs	r3, #0
 80086f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80086f6:	4b5c      	ldr	r3, [pc, #368]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086fa:	4a5b      	ldr	r2, [pc, #364]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086fc:	f043 0301 	orr.w	r3, r3, #1
 8008700:	6313      	str	r3, [r2, #48]	@ 0x30
 8008702:	4b59      	ldr	r3, [pc, #356]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	627b      	str	r3, [r7, #36]	@ 0x24
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_M1_A_Pin|Encoder_M1_B_Pin;
 800870e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008712:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008714:	2302      	movs	r3, #2
 8008716:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008718:	2300      	movs	r3, #0
 800871a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800871c:	2300      	movs	r3, #0
 800871e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008720:	2301      	movs	r3, #1
 8008722:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008724:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008728:	4619      	mov	r1, r3
 800872a:	4850      	ldr	r0, [pc, #320]	@ (800886c <HAL_TIM_Encoder_MspInit+0x1b8>)
 800872c:	f001 f922 	bl	8009974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8008730:	e094      	b.n	800885c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a4e      	ldr	r2, [pc, #312]	@ (8008870 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d12c      	bne.n	8008796 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800873c:	2300      	movs	r3, #0
 800873e:	623b      	str	r3, [r7, #32]
 8008740:	4b49      	ldr	r3, [pc, #292]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008744:	4a48      	ldr	r2, [pc, #288]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008746:	f043 0302 	orr.w	r3, r3, #2
 800874a:	6413      	str	r3, [r2, #64]	@ 0x40
 800874c:	4b46      	ldr	r3, [pc, #280]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800874e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	623b      	str	r3, [r7, #32]
 8008756:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008758:	2300      	movs	r3, #0
 800875a:	61fb      	str	r3, [r7, #28]
 800875c:	4b42      	ldr	r3, [pc, #264]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800875e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008760:	4a41      	ldr	r2, [pc, #260]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008762:	f043 0301 	orr.w	r3, r3, #1
 8008766:	6313      	str	r3, [r2, #48]	@ 0x30
 8008768:	4b3f      	ldr	r3, [pc, #252]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800876a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876c:	f003 0301 	and.w	r3, r3, #1
 8008770:	61fb      	str	r3, [r7, #28]
 8008772:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Encoder_M2_A_Pin|Encoder_M2_B_Pin;
 8008774:	23c0      	movs	r3, #192	@ 0xc0
 8008776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008778:	2302      	movs	r3, #2
 800877a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800877c:	2300      	movs	r3, #0
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008780:	2300      	movs	r3, #0
 8008782:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008784:	2302      	movs	r3, #2
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008788:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800878c:	4619      	mov	r1, r3
 800878e:	4837      	ldr	r0, [pc, #220]	@ (800886c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8008790:	f001 f8f0 	bl	8009974 <HAL_GPIO_Init>
}
 8008794:	e062      	b.n	800885c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a36      	ldr	r2, [pc, #216]	@ (8008874 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d12c      	bne.n	80087fa <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80087a0:	2300      	movs	r3, #0
 80087a2:	61bb      	str	r3, [r7, #24]
 80087a4:	4b30      	ldr	r3, [pc, #192]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80087a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087a8:	4a2f      	ldr	r2, [pc, #188]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80087aa:	f043 0308 	orr.w	r3, r3, #8
 80087ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80087b0:	4b2d      	ldr	r3, [pc, #180]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80087b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b4:	f003 0308 	and.w	r3, r3, #8
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087bc:	2300      	movs	r3, #0
 80087be:	617b      	str	r3, [r7, #20]
 80087c0:	4b29      	ldr	r3, [pc, #164]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80087c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c4:	4a28      	ldr	r2, [pc, #160]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80087c6:	f043 0301 	orr.w	r3, r3, #1
 80087ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80087cc:	4b26      	ldr	r3, [pc, #152]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80087ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	617b      	str	r3, [r7, #20]
 80087d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_M3_A_Pin|Encoder_M3_B_Pin;
 80087d8:	2303      	movs	r3, #3
 80087da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087dc:	2302      	movs	r3, #2
 80087de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087e0:	2300      	movs	r3, #0
 80087e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087e4:	2300      	movs	r3, #0
 80087e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80087e8:	2302      	movs	r3, #2
 80087ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80087f0:	4619      	mov	r1, r3
 80087f2:	481e      	ldr	r0, [pc, #120]	@ (800886c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80087f4:	f001 f8be 	bl	8009974 <HAL_GPIO_Init>
}
 80087f8:	e030      	b.n	800885c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d12b      	bne.n	800885c <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008804:	2300      	movs	r3, #0
 8008806:	613b      	str	r3, [r7, #16]
 8008808:	4b17      	ldr	r3, [pc, #92]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800880a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800880c:	4a16      	ldr	r2, [pc, #88]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800880e:	f043 0302 	orr.w	r3, r3, #2
 8008812:	6453      	str	r3, [r2, #68]	@ 0x44
 8008814:	4b14      	ldr	r3, [pc, #80]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008818:	f003 0302 	and.w	r3, r3, #2
 800881c:	613b      	str	r3, [r7, #16]
 800881e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008820:	2300      	movs	r3, #0
 8008822:	60fb      	str	r3, [r7, #12]
 8008824:	4b10      	ldr	r3, [pc, #64]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008828:	4a0f      	ldr	r2, [pc, #60]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800882a:	f043 0304 	orr.w	r3, r3, #4
 800882e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008830:	4b0d      	ldr	r3, [pc, #52]	@ (8008868 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_M4_A_Pin|Encoder_M4_B_Pin;
 800883c:	23c0      	movs	r3, #192	@ 0xc0
 800883e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008840:	2302      	movs	r3, #2
 8008842:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008844:	2300      	movs	r3, #0
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008848:	2300      	movs	r3, #0
 800884a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800884c:	2303      	movs	r3, #3
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008850:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008854:	4619      	mov	r1, r3
 8008856:	4809      	ldr	r0, [pc, #36]	@ (800887c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8008858:	f001 f88c 	bl	8009974 <HAL_GPIO_Init>
}
 800885c:	bf00      	nop
 800885e:	3740      	adds	r7, #64	@ 0x40
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	40010000 	.word	0x40010000
 8008868:	40023800 	.word	0x40023800
 800886c:	40020000 	.word	0x40020000
 8008870:	40000400 	.word	0x40000400
 8008874:	40000c00 	.word	0x40000c00
 8008878:	40010400 	.word	0x40010400
 800887c:	40020800 	.word	0x40020800

08008880 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008890:	d10d      	bne.n	80088ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	4b09      	ldr	r3, [pc, #36]	@ (80088bc <HAL_TIM_PWM_MspInit+0x3c>)
 8008898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889a:	4a08      	ldr	r2, [pc, #32]	@ (80088bc <HAL_TIM_PWM_MspInit+0x3c>)
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80088a2:	4b06      	ldr	r3, [pc, #24]	@ (80088bc <HAL_TIM_PWM_MspInit+0x3c>)
 80088a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80088ae:	bf00      	nop
 80088b0:	3714      	adds	r7, #20
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop
 80088bc:	40023800 	.word	0x40023800

080088c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a0e      	ldr	r2, [pc, #56]	@ (8008908 <HAL_TIM_Base_MspInit+0x48>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d115      	bne.n	80088fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80088d2:	2300      	movs	r3, #0
 80088d4:	60fb      	str	r3, [r7, #12]
 80088d6:	4b0d      	ldr	r3, [pc, #52]	@ (800890c <HAL_TIM_Base_MspInit+0x4c>)
 80088d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088da:	4a0c      	ldr	r2, [pc, #48]	@ (800890c <HAL_TIM_Base_MspInit+0x4c>)
 80088dc:	f043 0304 	orr.w	r3, r3, #4
 80088e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80088e2:	4b0a      	ldr	r3, [pc, #40]	@ (800890c <HAL_TIM_Base_MspInit+0x4c>)
 80088e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088e6:	f003 0304 	and.w	r3, r3, #4
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80088ee:	2200      	movs	r2, #0
 80088f0:	2100      	movs	r1, #0
 80088f2:	201e      	movs	r0, #30
 80088f4:	f000 fc05 	bl	8009102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80088f8:	201e      	movs	r0, #30
 80088fa:	f000 fc1e 	bl	800913a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80088fe:	bf00      	nop
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	40000800 	.word	0x40000800
 800890c:	40023800 	.word	0x40023800

08008910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	@ 0x28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008918:	f107 0314 	add.w	r3, r7, #20
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]
 8008920:	605a      	str	r2, [r3, #4]
 8008922:	609a      	str	r2, [r3, #8]
 8008924:	60da      	str	r2, [r3, #12]
 8008926:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008930:	d13c      	bne.n	80089ac <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	4b1f      	ldr	r3, [pc, #124]	@ (80089b4 <HAL_TIM_MspPostInit+0xa4>)
 8008938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893a:	4a1e      	ldr	r2, [pc, #120]	@ (80089b4 <HAL_TIM_MspPostInit+0xa4>)
 800893c:	f043 0301 	orr.w	r3, r3, #1
 8008940:	6313      	str	r3, [r2, #48]	@ 0x30
 8008942:	4b1c      	ldr	r3, [pc, #112]	@ (80089b4 <HAL_TIM_MspPostInit+0xa4>)
 8008944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
 8008952:	4b18      	ldr	r3, [pc, #96]	@ (80089b4 <HAL_TIM_MspPostInit+0xa4>)
 8008954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008956:	4a17      	ldr	r2, [pc, #92]	@ (80089b4 <HAL_TIM_MspPostInit+0xa4>)
 8008958:	f043 0302 	orr.w	r3, r3, #2
 800895c:	6313      	str	r3, [r2, #48]	@ 0x30
 800895e:	4b15      	ldr	r3, [pc, #84]	@ (80089b4 <HAL_TIM_MspPostInit+0xa4>)
 8008960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_M3_Pin|PWM_M4_Pin|PWM_M1_Pin;
 800896a:	232c      	movs	r3, #44	@ 0x2c
 800896c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800896e:	2302      	movs	r3, #2
 8008970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008972:	2300      	movs	r3, #0
 8008974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008976:	2300      	movs	r3, #0
 8008978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800897a:	2301      	movs	r3, #1
 800897c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800897e:	f107 0314 	add.w	r3, r7, #20
 8008982:	4619      	mov	r1, r3
 8008984:	480c      	ldr	r0, [pc, #48]	@ (80089b8 <HAL_TIM_MspPostInit+0xa8>)
 8008986:	f000 fff5 	bl	8009974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_M2_Pin;
 800898a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800898e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008990:	2302      	movs	r3, #2
 8008992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008994:	2300      	movs	r3, #0
 8008996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008998:	2300      	movs	r3, #0
 800899a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800899c:	2301      	movs	r3, #1
 800899e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_M2_GPIO_Port, &GPIO_InitStruct);
 80089a0:	f107 0314 	add.w	r3, r7, #20
 80089a4:	4619      	mov	r1, r3
 80089a6:	4805      	ldr	r0, [pc, #20]	@ (80089bc <HAL_TIM_MspPostInit+0xac>)
 80089a8:	f000 ffe4 	bl	8009974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80089ac:	bf00      	nop
 80089ae:	3728      	adds	r7, #40	@ 0x28
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	40023800 	.word	0x40023800
 80089b8:	40020000 	.word	0x40020000
 80089bc:	40020400 	.word	0x40020400

080089c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b08a      	sub	sp, #40	@ 0x28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089c8:	f107 0314 	add.w	r3, r7, #20
 80089cc:	2200      	movs	r2, #0
 80089ce:	601a      	str	r2, [r3, #0]
 80089d0:	605a      	str	r2, [r3, #4]
 80089d2:	609a      	str	r2, [r3, #8]
 80089d4:	60da      	str	r2, [r3, #12]
 80089d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a5b      	ldr	r2, [pc, #364]	@ (8008b4c <HAL_UART_MspInit+0x18c>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	f040 80af 	bne.w	8008b42 <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80089e4:	2300      	movs	r3, #0
 80089e6:	613b      	str	r3, [r7, #16]
 80089e8:	4b59      	ldr	r3, [pc, #356]	@ (8008b50 <HAL_UART_MspInit+0x190>)
 80089ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ec:	4a58      	ldr	r2, [pc, #352]	@ (8008b50 <HAL_UART_MspInit+0x190>)
 80089ee:	f043 0310 	orr.w	r3, r3, #16
 80089f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80089f4:	4b56      	ldr	r3, [pc, #344]	@ (8008b50 <HAL_UART_MspInit+0x190>)
 80089f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089f8:	f003 0310 	and.w	r3, r3, #16
 80089fc:	613b      	str	r3, [r7, #16]
 80089fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a00:	2300      	movs	r3, #0
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	4b52      	ldr	r3, [pc, #328]	@ (8008b50 <HAL_UART_MspInit+0x190>)
 8008a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a08:	4a51      	ldr	r2, [pc, #324]	@ (8008b50 <HAL_UART_MspInit+0x190>)
 8008a0a:	f043 0301 	orr.w	r3, r3, #1
 8008a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a10:	4b4f      	ldr	r3, [pc, #316]	@ (8008b50 <HAL_UART_MspInit+0x190>)
 8008a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a14:	f003 0301 	and.w	r3, r3, #1
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	60bb      	str	r3, [r7, #8]
 8008a20:	4b4b      	ldr	r3, [pc, #300]	@ (8008b50 <HAL_UART_MspInit+0x190>)
 8008a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a24:	4a4a      	ldr	r2, [pc, #296]	@ (8008b50 <HAL_UART_MspInit+0x190>)
 8008a26:	f043 0302 	orr.w	r3, r3, #2
 8008a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a2c:	4b48      	ldr	r3, [pc, #288]	@ (8008b50 <HAL_UART_MspInit+0x190>)
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	60bb      	str	r3, [r7, #8]
 8008a36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008a38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a3e:	2302      	movs	r3, #2
 8008a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a46:	2303      	movs	r3, #3
 8008a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008a4a:	2307      	movs	r3, #7
 8008a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a4e:	f107 0314 	add.w	r3, r7, #20
 8008a52:	4619      	mov	r1, r3
 8008a54:	483f      	ldr	r0, [pc, #252]	@ (8008b54 <HAL_UART_MspInit+0x194>)
 8008a56:	f000 ff8d 	bl	8009974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008a5a:	2340      	movs	r3, #64	@ 0x40
 8008a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a66:	2303      	movs	r3, #3
 8008a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008a6a:	2307      	movs	r3, #7
 8008a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a6e:	f107 0314 	add.w	r3, r7, #20
 8008a72:	4619      	mov	r1, r3
 8008a74:	4838      	ldr	r0, [pc, #224]	@ (8008b58 <HAL_UART_MspInit+0x198>)
 8008a76:	f000 ff7d 	bl	8009974 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8008a7a:	4b38      	ldr	r3, [pc, #224]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008a7c:	4a38      	ldr	r2, [pc, #224]	@ (8008b60 <HAL_UART_MspInit+0x1a0>)
 8008a7e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008a80:	4b36      	ldr	r3, [pc, #216]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008a82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008a86:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a88:	4b34      	ldr	r3, [pc, #208]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a8e:	4b33      	ldr	r3, [pc, #204]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008a94:	4b31      	ldr	r3, [pc, #196]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008a96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008a9a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a9c:	4b2f      	ldr	r3, [pc, #188]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008aa2:	4b2e      	ldr	r3, [pc, #184]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008aae:	4b2b      	ldr	r3, [pc, #172]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008ab4:	4b29      	ldr	r3, [pc, #164]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008aba:	4828      	ldr	r0, [pc, #160]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008abc:	f000 fb58 	bl	8009170 <HAL_DMA_Init>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8008ac6:	f7fd ffe7 	bl	8006a98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a23      	ldr	r2, [pc, #140]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008ace:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008ad0:	4a22      	ldr	r2, [pc, #136]	@ (8008b5c <HAL_UART_MspInit+0x19c>)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8008ad6:	4b23      	ldr	r3, [pc, #140]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008ad8:	4a23      	ldr	r2, [pc, #140]	@ (8008b68 <HAL_UART_MspInit+0x1a8>)
 8008ada:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8008adc:	4b21      	ldr	r3, [pc, #132]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008ade:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8008ae2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008ae6:	2240      	movs	r2, #64	@ 0x40
 8008ae8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008aea:	4b1e      	ldr	r3, [pc, #120]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008aec:	2200      	movs	r2, #0
 8008aee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008af0:	4b1c      	ldr	r3, [pc, #112]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008af2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008af6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008af8:	4b1a      	ldr	r3, [pc, #104]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008afe:	4b19      	ldr	r3, [pc, #100]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008b04:	4b17      	ldr	r3, [pc, #92]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008b0a:	4b16      	ldr	r3, [pc, #88]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b10:	4b14      	ldr	r3, [pc, #80]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008b12:	2200      	movs	r2, #0
 8008b14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008b16:	4813      	ldr	r0, [pc, #76]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008b18:	f000 fb2a 	bl	8009170 <HAL_DMA_Init>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d001      	beq.n	8008b26 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8008b22:	f7fd ffb9 	bl	8006a98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a0e      	ldr	r2, [pc, #56]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008b2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8008b64 <HAL_UART_MspInit+0x1a4>)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008b32:	2200      	movs	r2, #0
 8008b34:	2100      	movs	r1, #0
 8008b36:	2025      	movs	r0, #37	@ 0x25
 8008b38:	f000 fae3 	bl	8009102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008b3c:	2025      	movs	r0, #37	@ 0x25
 8008b3e:	f000 fafc 	bl	800913a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008b42:	bf00      	nop
 8008b44:	3728      	adds	r7, #40	@ 0x28
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40011000 	.word	0x40011000
 8008b50:	40023800 	.word	0x40023800
 8008b54:	40020000 	.word	0x40020000
 8008b58:	40020400 	.word	0x40020400
 8008b5c:	20000454 	.word	0x20000454
 8008b60:	40026440 	.word	0x40026440
 8008b64:	200004b4 	.word	0x200004b4
 8008b68:	400264b8 	.word	0x400264b8

08008b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008b70:	bf00      	nop
 8008b72:	e7fd      	b.n	8008b70 <NMI_Handler+0x4>

08008b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b74:	b480      	push	{r7}
 8008b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b78:	bf00      	nop
 8008b7a:	e7fd      	b.n	8008b78 <HardFault_Handler+0x4>

08008b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b80:	bf00      	nop
 8008b82:	e7fd      	b.n	8008b80 <MemManage_Handler+0x4>

08008b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b84:	b480      	push	{r7}
 8008b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b88:	bf00      	nop
 8008b8a:	e7fd      	b.n	8008b88 <BusFault_Handler+0x4>

08008b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b90:	bf00      	nop
 8008b92:	e7fd      	b.n	8008b90 <UsageFault_Handler+0x4>

08008b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b94:	b480      	push	{r7}
 8008b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b98:	bf00      	nop
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ba6:	bf00      	nop
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008bb4:	bf00      	nop
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008bc2:	f000 f97f 	bl	8008ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008bc6:	bf00      	nop
 8008bc8:	bd80      	pop	{r7, pc}
	...

08008bcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008bd0:	4802      	ldr	r0, [pc, #8]	@ (8008bdc <TIM4_IRQHandler+0x10>)
 8008bd2:	f003 f979 	bl	800bec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008bd6:	bf00      	nop
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000334 	.word	0x20000334

08008be0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008be4:	4802      	ldr	r0, [pc, #8]	@ (8008bf0 <USART1_IRQHandler+0x10>)
 8008be6:	f004 f8a3 	bl	800cd30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008bea:	bf00      	nop
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	2000040c 	.word	0x2000040c

08008bf4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008bf8:	4802      	ldr	r0, [pc, #8]	@ (8008c04 <DMA2_Stream2_IRQHandler+0x10>)
 8008bfa:	f000 fc51 	bl	80094a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008bfe:	bf00      	nop
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000454 	.word	0x20000454

08008c08 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008c0c:	4802      	ldr	r0, [pc, #8]	@ (8008c18 <DMA2_Stream7_IRQHandler+0x10>)
 8008c0e:	f000 fc47 	bl	80094a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008c12:	bf00      	nop
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	200004b4 	.word	0x200004b4

08008c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  return 1;
 8008c20:	2301      	movs	r3, #1
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <_kill>:

int _kill(int pid, int sig)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008c36:	f006 fcf1 	bl	800f61c <__errno>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2216      	movs	r2, #22
 8008c3e:	601a      	str	r2, [r3, #0]
  return -1;
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <_exit>:

void _exit (int status)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008c54:	f04f 31ff 	mov.w	r1, #4294967295
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f7ff ffe7 	bl	8008c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8008c5e:	bf00      	nop
 8008c60:	e7fd      	b.n	8008c5e <_exit+0x12>

08008c62 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b086      	sub	sp, #24
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]
 8008c72:	e00a      	b.n	8008c8a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008c74:	f3af 8000 	nop.w
 8008c78:	4601      	mov	r1, r0
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	60ba      	str	r2, [r7, #8]
 8008c80:	b2ca      	uxtb	r2, r1
 8008c82:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	3301      	adds	r3, #1
 8008c88:	617b      	str	r3, [r7, #20]
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	dbf0      	blt.n	8008c74 <_read+0x12>
  }

  return len;
 8008c92:	687b      	ldr	r3, [r7, #4]
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3718      	adds	r7, #24
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}

08008c9c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b086      	sub	sp, #24
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	60f8      	str	r0, [r7, #12]
 8008ca4:	60b9      	str	r1, [r7, #8]
 8008ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	617b      	str	r3, [r7, #20]
 8008cac:	e009      	b.n	8008cc2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	60ba      	str	r2, [r7, #8]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	617b      	str	r3, [r7, #20]
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	dbf1      	blt.n	8008cae <_write+0x12>
  }
  return len;
 8008cca:	687b      	ldr	r3, [r7, #4]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3718      	adds	r7, #24
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <_close>:

int _close(int file)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008cdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008cfc:	605a      	str	r2, [r3, #4]
  return 0;
 8008cfe:	2300      	movs	r3, #0
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <_isatty>:

int _isatty(int file)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008d14:	2301      	movs	r3, #1
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	370c      	adds	r7, #12
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	60f8      	str	r0, [r7, #12]
 8008d2a:	60b9      	str	r1, [r7, #8]
 8008d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b086      	sub	sp, #24
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d44:	4a14      	ldr	r2, [pc, #80]	@ (8008d98 <_sbrk+0x5c>)
 8008d46:	4b15      	ldr	r3, [pc, #84]	@ (8008d9c <_sbrk+0x60>)
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d50:	4b13      	ldr	r3, [pc, #76]	@ (8008da0 <_sbrk+0x64>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d102      	bne.n	8008d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d58:	4b11      	ldr	r3, [pc, #68]	@ (8008da0 <_sbrk+0x64>)
 8008d5a:	4a12      	ldr	r2, [pc, #72]	@ (8008da4 <_sbrk+0x68>)
 8008d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d5e:	4b10      	ldr	r3, [pc, #64]	@ (8008da0 <_sbrk+0x64>)
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4413      	add	r3, r2
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d207      	bcs.n	8008d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d6c:	f006 fc56 	bl	800f61c <__errno>
 8008d70:	4603      	mov	r3, r0
 8008d72:	220c      	movs	r2, #12
 8008d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d76:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7a:	e009      	b.n	8008d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d7c:	4b08      	ldr	r3, [pc, #32]	@ (8008da0 <_sbrk+0x64>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d82:	4b07      	ldr	r3, [pc, #28]	@ (8008da0 <_sbrk+0x64>)
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4413      	add	r3, r2
 8008d8a:	4a05      	ldr	r2, [pc, #20]	@ (8008da0 <_sbrk+0x64>)
 8008d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20020000 	.word	0x20020000
 8008d9c:	00000400 	.word	0x00000400
 8008da0:	20001260 	.word	0x20001260
 8008da4:	200013b8 	.word	0x200013b8

08008da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008da8:	b480      	push	{r7}
 8008daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008dac:	4b06      	ldr	r3, [pc, #24]	@ (8008dc8 <SystemInit+0x20>)
 8008dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008db2:	4a05      	ldr	r2, [pc, #20]	@ (8008dc8 <SystemInit+0x20>)
 8008db4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008db8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008dbc:	bf00      	nop
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
 8008dc6:	bf00      	nop
 8008dc8:	e000ed00 	.word	0xe000ed00

08008dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008dcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8008e04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008dd0:	f7ff ffea 	bl	8008da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008dd4:	480c      	ldr	r0, [pc, #48]	@ (8008e08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008dd6:	490d      	ldr	r1, [pc, #52]	@ (8008e0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008dd8:	4a0d      	ldr	r2, [pc, #52]	@ (8008e10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008ddc:	e002      	b.n	8008de4 <LoopCopyDataInit>

08008dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008de2:	3304      	adds	r3, #4

08008de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008de8:	d3f9      	bcc.n	8008dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008dea:	4a0a      	ldr	r2, [pc, #40]	@ (8008e14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008dec:	4c0a      	ldr	r4, [pc, #40]	@ (8008e18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008df0:	e001      	b.n	8008df6 <LoopFillZerobss>

08008df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008df4:	3204      	adds	r2, #4

08008df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008df8:	d3fb      	bcc.n	8008df2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8008dfa:	f006 fc15 	bl	800f628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008dfe:	f7fc f83f 	bl	8004e80 <main>
  bx  lr    
 8008e02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008e04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e0c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8008e10:	080135c4 	.word	0x080135c4
  ldr r2, =_sbss
 8008e14:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8008e18:	200013b4 	.word	0x200013b4

08008e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e1c:	e7fe      	b.n	8008e1c <ADC_IRQHandler>
	...

08008e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e24:	4b0e      	ldr	r3, [pc, #56]	@ (8008e60 <HAL_Init+0x40>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a0d      	ldr	r2, [pc, #52]	@ (8008e60 <HAL_Init+0x40>)
 8008e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e30:	4b0b      	ldr	r3, [pc, #44]	@ (8008e60 <HAL_Init+0x40>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a0a      	ldr	r2, [pc, #40]	@ (8008e60 <HAL_Init+0x40>)
 8008e36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e3c:	4b08      	ldr	r3, [pc, #32]	@ (8008e60 <HAL_Init+0x40>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a07      	ldr	r2, [pc, #28]	@ (8008e60 <HAL_Init+0x40>)
 8008e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e48:	2003      	movs	r0, #3
 8008e4a:	f000 f94f 	bl	80090ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e4e:	200f      	movs	r0, #15
 8008e50:	f000 f808 	bl	8008e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e54:	f7ff fbbe 	bl	80085d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	40023c00 	.word	0x40023c00

08008e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e6c:	4b12      	ldr	r3, [pc, #72]	@ (8008eb8 <HAL_InitTick+0x54>)
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	4b12      	ldr	r3, [pc, #72]	@ (8008ebc <HAL_InitTick+0x58>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	4619      	mov	r1, r3
 8008e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 f967 	bl	8009156 <HAL_SYSTICK_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d001      	beq.n	8008e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	e00e      	b.n	8008eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b0f      	cmp	r3, #15
 8008e96:	d80a      	bhi.n	8008eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e98:	2200      	movs	r2, #0
 8008e9a:	6879      	ldr	r1, [r7, #4]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	f000 f92f 	bl	8009102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ea4:	4a06      	ldr	r2, [pc, #24]	@ (8008ec0 <HAL_InitTick+0x5c>)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e000      	b.n	8008eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000000 	.word	0x20000000
 8008ebc:	20000008 	.word	0x20000008
 8008ec0:	20000004 	.word	0x20000004

08008ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008ec8:	4b06      	ldr	r3, [pc, #24]	@ (8008ee4 <HAL_IncTick+0x20>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	4b06      	ldr	r3, [pc, #24]	@ (8008ee8 <HAL_IncTick+0x24>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	4a04      	ldr	r2, [pc, #16]	@ (8008ee8 <HAL_IncTick+0x24>)
 8008ed6:	6013      	str	r3, [r2, #0]
}
 8008ed8:	bf00      	nop
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20000008 	.word	0x20000008
 8008ee8:	20001264 	.word	0x20001264

08008eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
  return uwTick;
 8008ef0:	4b03      	ldr	r3, [pc, #12]	@ (8008f00 <HAL_GetTick+0x14>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20001264 	.word	0x20001264

08008f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f0c:	f7ff ffee 	bl	8008eec <HAL_GetTick>
 8008f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f1c:	d005      	beq.n	8008f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f48 <HAL_Delay+0x44>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	461a      	mov	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f2a:	bf00      	nop
 8008f2c:	f7ff ffde 	bl	8008eec <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d8f7      	bhi.n	8008f2c <HAL_Delay+0x28>
  {
  }
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20000008 	.word	0x20000008

08008f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f003 0307 	and.w	r3, r3, #7
 8008f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f90 <__NVIC_SetPriorityGrouping+0x44>)
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008f68:	4013      	ands	r3, r2
 8008f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008f7e:	4a04      	ldr	r2, [pc, #16]	@ (8008f90 <__NVIC_SetPriorityGrouping+0x44>)
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	60d3      	str	r3, [r2, #12]
}
 8008f84:	bf00      	nop
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	e000ed00 	.word	0xe000ed00

08008f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008f94:	b480      	push	{r7}
 8008f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008f98:	4b04      	ldr	r3, [pc, #16]	@ (8008fac <__NVIC_GetPriorityGrouping+0x18>)
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	0a1b      	lsrs	r3, r3, #8
 8008f9e:	f003 0307 	and.w	r3, r3, #7
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	e000ed00 	.word	0xe000ed00

08008fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	db0b      	blt.n	8008fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	f003 021f 	and.w	r2, r3, #31
 8008fc8:	4907      	ldr	r1, [pc, #28]	@ (8008fe8 <__NVIC_EnableIRQ+0x38>)
 8008fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008fce:	095b      	lsrs	r3, r3, #5
 8008fd0:	2001      	movs	r0, #1
 8008fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8008fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	e000e100 	.word	0xe000e100

08008fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	6039      	str	r1, [r7, #0]
 8008ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	db0a      	blt.n	8009016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	b2da      	uxtb	r2, r3
 8009004:	490c      	ldr	r1, [pc, #48]	@ (8009038 <__NVIC_SetPriority+0x4c>)
 8009006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800900a:	0112      	lsls	r2, r2, #4
 800900c:	b2d2      	uxtb	r2, r2
 800900e:	440b      	add	r3, r1
 8009010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009014:	e00a      	b.n	800902c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	b2da      	uxtb	r2, r3
 800901a:	4908      	ldr	r1, [pc, #32]	@ (800903c <__NVIC_SetPriority+0x50>)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	f003 030f 	and.w	r3, r3, #15
 8009022:	3b04      	subs	r3, #4
 8009024:	0112      	lsls	r2, r2, #4
 8009026:	b2d2      	uxtb	r2, r2
 8009028:	440b      	add	r3, r1
 800902a:	761a      	strb	r2, [r3, #24]
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	e000e100 	.word	0xe000e100
 800903c:	e000ed00 	.word	0xe000ed00

08009040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009040:	b480      	push	{r7}
 8009042:	b089      	sub	sp, #36	@ 0x24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	f1c3 0307 	rsb	r3, r3, #7
 800905a:	2b04      	cmp	r3, #4
 800905c:	bf28      	it	cs
 800905e:	2304      	movcs	r3, #4
 8009060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	3304      	adds	r3, #4
 8009066:	2b06      	cmp	r3, #6
 8009068:	d902      	bls.n	8009070 <NVIC_EncodePriority+0x30>
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	3b03      	subs	r3, #3
 800906e:	e000      	b.n	8009072 <NVIC_EncodePriority+0x32>
 8009070:	2300      	movs	r3, #0
 8009072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009074:	f04f 32ff 	mov.w	r2, #4294967295
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	43da      	mvns	r2, r3
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	401a      	ands	r2, r3
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009088:	f04f 31ff 	mov.w	r1, #4294967295
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	fa01 f303 	lsl.w	r3, r1, r3
 8009092:	43d9      	mvns	r1, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009098:	4313      	orrs	r3, r2
         );
}
 800909a:	4618      	mov	r0, r3
 800909c:	3724      	adds	r7, #36	@ 0x24
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
	...

080090a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80090b8:	d301      	bcc.n	80090be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80090ba:	2301      	movs	r3, #1
 80090bc:	e00f      	b.n	80090de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090be:	4a0a      	ldr	r2, [pc, #40]	@ (80090e8 <SysTick_Config+0x40>)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80090c6:	210f      	movs	r1, #15
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295
 80090cc:	f7ff ff8e 	bl	8008fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090d0:	4b05      	ldr	r3, [pc, #20]	@ (80090e8 <SysTick_Config+0x40>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090d6:	4b04      	ldr	r3, [pc, #16]	@ (80090e8 <SysTick_Config+0x40>)
 80090d8:	2207      	movs	r2, #7
 80090da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	e000e010 	.word	0xe000e010

080090ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7ff ff29 	bl	8008f4c <__NVIC_SetPriorityGrouping>
}
 80090fa:	bf00      	nop
 80090fc:	3708      	adds	r7, #8
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009102:	b580      	push	{r7, lr}
 8009104:	b086      	sub	sp, #24
 8009106:	af00      	add	r7, sp, #0
 8009108:	4603      	mov	r3, r0
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	607a      	str	r2, [r7, #4]
 800910e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009110:	2300      	movs	r3, #0
 8009112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009114:	f7ff ff3e 	bl	8008f94 <__NVIC_GetPriorityGrouping>
 8009118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	68b9      	ldr	r1, [r7, #8]
 800911e:	6978      	ldr	r0, [r7, #20]
 8009120:	f7ff ff8e 	bl	8009040 <NVIC_EncodePriority>
 8009124:	4602      	mov	r2, r0
 8009126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800912a:	4611      	mov	r1, r2
 800912c:	4618      	mov	r0, r3
 800912e:	f7ff ff5d 	bl	8008fec <__NVIC_SetPriority>
}
 8009132:	bf00      	nop
 8009134:	3718      	adds	r7, #24
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	4603      	mov	r3, r0
 8009142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009148:	4618      	mov	r0, r3
 800914a:	f7ff ff31 	bl	8008fb0 <__NVIC_EnableIRQ>
}
 800914e:	bf00      	nop
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b082      	sub	sp, #8
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff ffa2 	bl	80090a8 <SysTick_Config>
 8009164:	4603      	mov	r3, r0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3708      	adds	r7, #8
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800917c:	f7ff feb6 	bl	8008eec <HAL_GetTick>
 8009180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e099      	b.n	80092c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0201 	bic.w	r2, r2, #1
 80091aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091ac:	e00f      	b.n	80091ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80091ae:	f7ff fe9d 	bl	8008eec <HAL_GetTick>
 80091b2:	4602      	mov	r2, r0
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	1ad3      	subs	r3, r2, r3
 80091b8:	2b05      	cmp	r3, #5
 80091ba:	d908      	bls.n	80091ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2203      	movs	r2, #3
 80091c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e078      	b.n	80092c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e8      	bne.n	80091ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	4b38      	ldr	r3, [pc, #224]	@ (80092c8 <HAL_DMA_Init+0x158>)
 80091e8:	4013      	ands	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	685a      	ldr	r2, [r3, #4]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80091fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	691b      	ldr	r3, [r3, #16]
 8009200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	4313      	orrs	r3, r2
 800921e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009224:	2b04      	cmp	r3, #4
 8009226:	d107      	bne.n	8009238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009230:	4313      	orrs	r3, r2
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	4313      	orrs	r3, r2
 8009236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	695b      	ldr	r3, [r3, #20]
 8009246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f023 0307 	bic.w	r3, r3, #7
 800924e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	4313      	orrs	r3, r2
 8009258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800925e:	2b04      	cmp	r3, #4
 8009260:	d117      	bne.n	8009292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d00e      	beq.n	8009292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fb01 	bl	800987c <DMA_CheckFifoParam>
 800927a:	4603      	mov	r3, r0
 800927c:	2b00      	cmp	r3, #0
 800927e:	d008      	beq.n	8009292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2240      	movs	r2, #64	@ 0x40
 8009284:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800928e:	2301      	movs	r3, #1
 8009290:	e016      	b.n	80092c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fab8 	bl	8009810 <DMA_CalcBaseAndBitshift>
 80092a0:	4603      	mov	r3, r0
 80092a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092a8:	223f      	movs	r2, #63	@ 0x3f
 80092aa:	409a      	lsls	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3718      	adds	r7, #24
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	f010803f 	.word	0xf010803f

080092cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
 80092d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d101      	bne.n	80092f2 <HAL_DMA_Start_IT+0x26>
 80092ee:	2302      	movs	r3, #2
 80092f0:	e040      	b.n	8009374 <HAL_DMA_Start_IT+0xa8>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009300:	b2db      	uxtb	r3, r3
 8009302:	2b01      	cmp	r3, #1
 8009304:	d12f      	bne.n	8009366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2202      	movs	r2, #2
 800930a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	68b9      	ldr	r1, [r7, #8]
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fa4a 	bl	80097b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009324:	223f      	movs	r2, #63	@ 0x3f
 8009326:	409a      	lsls	r2, r3
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f042 0216 	orr.w	r2, r2, #22
 800933a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0208 	orr.w	r2, r2, #8
 8009352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f042 0201 	orr.w	r2, r2, #1
 8009362:	601a      	str	r2, [r3, #0]
 8009364:	e005      	b.n	8009372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800936e:	2302      	movs	r3, #2
 8009370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009372:	7dfb      	ldrb	r3, [r7, #23]
}
 8009374:	4618      	mov	r0, r3
 8009376:	3718      	adds	r7, #24
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009388:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800938a:	f7ff fdaf 	bl	8008eec <HAL_GetTick>
 800938e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b02      	cmp	r3, #2
 800939a:	d008      	beq.n	80093ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2280      	movs	r2, #128	@ 0x80
 80093a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e052      	b.n	8009454 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0216 	bic.w	r2, r2, #22
 80093bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	695a      	ldr	r2, [r3, #20]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d103      	bne.n	80093de <HAL_DMA_Abort+0x62>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0208 	bic.w	r2, r2, #8
 80093ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f022 0201 	bic.w	r2, r2, #1
 80093fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80093fe:	e013      	b.n	8009428 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009400:	f7ff fd74 	bl	8008eec <HAL_GetTick>
 8009404:	4602      	mov	r2, r0
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	1ad3      	subs	r3, r2, r3
 800940a:	2b05      	cmp	r3, #5
 800940c:	d90c      	bls.n	8009428 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2220      	movs	r2, #32
 8009412:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2203      	movs	r2, #3
 8009418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2200      	movs	r2, #0
 8009420:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8009424:	2303      	movs	r3, #3
 8009426:	e015      	b.n	8009454 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0301 	and.w	r3, r3, #1
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1e4      	bne.n	8009400 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800943a:	223f      	movs	r2, #63	@ 0x3f
 800943c:	409a      	lsls	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b02      	cmp	r3, #2
 800946e:	d004      	beq.n	800947a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2280      	movs	r2, #128	@ 0x80
 8009474:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e00c      	b.n	8009494 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2205      	movs	r2, #5
 800947e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f022 0201 	bic.w	r2, r2, #1
 8009490:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80094ac:	4b8e      	ldr	r3, [pc, #568]	@ (80096e8 <HAL_DMA_IRQHandler+0x248>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a8e      	ldr	r2, [pc, #568]	@ (80096ec <HAL_DMA_IRQHandler+0x24c>)
 80094b2:	fba2 2303 	umull	r2, r3, r2, r3
 80094b6:	0a9b      	lsrs	r3, r3, #10
 80094b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094ca:	2208      	movs	r2, #8
 80094cc:	409a      	lsls	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	4013      	ands	r3, r2
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d01a      	beq.n	800950c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f003 0304 	and.w	r3, r3, #4
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d013      	beq.n	800950c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f022 0204 	bic.w	r2, r2, #4
 80094f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094f8:	2208      	movs	r2, #8
 80094fa:	409a      	lsls	r2, r3
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009504:	f043 0201 	orr.w	r2, r3, #1
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009510:	2201      	movs	r2, #1
 8009512:	409a      	lsls	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4013      	ands	r3, r2
 8009518:	2b00      	cmp	r3, #0
 800951a:	d012      	beq.n	8009542 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	695b      	ldr	r3, [r3, #20]
 8009522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009526:	2b00      	cmp	r3, #0
 8009528:	d00b      	beq.n	8009542 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800952e:	2201      	movs	r2, #1
 8009530:	409a      	lsls	r2, r3
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800953a:	f043 0202 	orr.w	r2, r3, #2
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009546:	2204      	movs	r2, #4
 8009548:	409a      	lsls	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4013      	ands	r3, r2
 800954e:	2b00      	cmp	r3, #0
 8009550:	d012      	beq.n	8009578 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0302 	and.w	r3, r3, #2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00b      	beq.n	8009578 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009564:	2204      	movs	r2, #4
 8009566:	409a      	lsls	r2, r3
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009570:	f043 0204 	orr.w	r2, r3, #4
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800957c:	2210      	movs	r2, #16
 800957e:	409a      	lsls	r2, r3
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4013      	ands	r3, r2
 8009584:	2b00      	cmp	r3, #0
 8009586:	d043      	beq.n	8009610 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f003 0308 	and.w	r3, r3, #8
 8009592:	2b00      	cmp	r3, #0
 8009594:	d03c      	beq.n	8009610 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800959a:	2210      	movs	r2, #16
 800959c:	409a      	lsls	r2, r3
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d018      	beq.n	80095e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d108      	bne.n	80095d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d024      	beq.n	8009610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4798      	blx	r3
 80095ce:	e01f      	b.n	8009610 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d01b      	beq.n	8009610 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	4798      	blx	r3
 80095e0:	e016      	b.n	8009610 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d107      	bne.n	8009600 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f022 0208 	bic.w	r2, r2, #8
 80095fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009614:	2220      	movs	r2, #32
 8009616:	409a      	lsls	r2, r3
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	4013      	ands	r3, r2
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 808f 	beq.w	8009740 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0310 	and.w	r3, r3, #16
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 8087 	beq.w	8009740 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009636:	2220      	movs	r2, #32
 8009638:	409a      	lsls	r2, r3
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b05      	cmp	r3, #5
 8009648:	d136      	bne.n	80096b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f022 0216 	bic.w	r2, r2, #22
 8009658:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	695a      	ldr	r2, [r3, #20]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009668:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d103      	bne.n	800967a <HAL_DMA_IRQHandler+0x1da>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009676:	2b00      	cmp	r3, #0
 8009678:	d007      	beq.n	800968a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0208 	bic.w	r2, r2, #8
 8009688:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800968e:	223f      	movs	r2, #63	@ 0x3f
 8009690:	409a      	lsls	r2, r3
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d07e      	beq.n	80097ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	4798      	blx	r3
        }
        return;
 80096b6:	e079      	b.n	80097ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d01d      	beq.n	8009702 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10d      	bne.n	80096f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d031      	beq.n	8009740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	4798      	blx	r3
 80096e4:	e02c      	b.n	8009740 <HAL_DMA_IRQHandler+0x2a0>
 80096e6:	bf00      	nop
 80096e8:	20000000 	.word	0x20000000
 80096ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d023      	beq.n	8009740 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	4798      	blx	r3
 8009700:	e01e      	b.n	8009740 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10f      	bne.n	8009730 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0210 	bic.w	r2, r2, #16
 800971e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009734:	2b00      	cmp	r3, #0
 8009736:	d003      	beq.n	8009740 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009744:	2b00      	cmp	r3, #0
 8009746:	d032      	beq.n	80097ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	2b00      	cmp	r3, #0
 8009752:	d022      	beq.n	800979a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2205      	movs	r2, #5
 8009758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0201 	bic.w	r2, r2, #1
 800976a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	3301      	adds	r3, #1
 8009770:	60bb      	str	r3, [r7, #8]
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	429a      	cmp	r2, r3
 8009776:	d307      	bcc.n	8009788 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 0301 	and.w	r3, r3, #1
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1f2      	bne.n	800976c <HAL_DMA_IRQHandler+0x2cc>
 8009786:	e000      	b.n	800978a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8009788:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d005      	beq.n	80097ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	4798      	blx	r3
 80097aa:	e000      	b.n	80097ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80097ac:	bf00      	nop
    }
  }
}
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80097d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	2b40      	cmp	r3, #64	@ 0x40
 80097e0:	d108      	bne.n	80097f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	687a      	ldr	r2, [r7, #4]
 80097e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68ba      	ldr	r2, [r7, #8]
 80097f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80097f2:	e007      	b.n	8009804 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	60da      	str	r2, [r3, #12]
}
 8009804:	bf00      	nop
 8009806:	3714      	adds	r7, #20
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009810:	b480      	push	{r7}
 8009812:	b085      	sub	sp, #20
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	b2db      	uxtb	r3, r3
 800981e:	3b10      	subs	r3, #16
 8009820:	4a14      	ldr	r2, [pc, #80]	@ (8009874 <DMA_CalcBaseAndBitshift+0x64>)
 8009822:	fba2 2303 	umull	r2, r3, r2, r3
 8009826:	091b      	lsrs	r3, r3, #4
 8009828:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800982a:	4a13      	ldr	r2, [pc, #76]	@ (8009878 <DMA_CalcBaseAndBitshift+0x68>)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2b03      	cmp	r3, #3
 800983c:	d909      	bls.n	8009852 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8009846:	f023 0303 	bic.w	r3, r3, #3
 800984a:	1d1a      	adds	r2, r3, #4
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	659a      	str	r2, [r3, #88]	@ 0x58
 8009850:	e007      	b.n	8009862 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800985a:	f023 0303 	bic.w	r3, r3, #3
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009870:	4770      	bx	lr
 8009872:	bf00      	nop
 8009874:	aaaaaaab 	.word	0xaaaaaaab
 8009878:	08013104 	.word	0x08013104

0800987c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800987c:	b480      	push	{r7}
 800987e:	b085      	sub	sp, #20
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800988c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	699b      	ldr	r3, [r3, #24]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d11f      	bne.n	80098d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	2b03      	cmp	r3, #3
 800989a:	d856      	bhi.n	800994a <DMA_CheckFifoParam+0xce>
 800989c:	a201      	add	r2, pc, #4	@ (adr r2, 80098a4 <DMA_CheckFifoParam+0x28>)
 800989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a2:	bf00      	nop
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098c7 	.word	0x080098c7
 80098ac:	080098b5 	.word	0x080098b5
 80098b0:	0800994b 	.word	0x0800994b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d046      	beq.n	800994e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098c4:	e043      	b.n	800994e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80098ce:	d140      	bne.n	8009952 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80098d0:	2301      	movs	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80098d4:	e03d      	b.n	8009952 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	699b      	ldr	r3, [r3, #24]
 80098da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098de:	d121      	bne.n	8009924 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b03      	cmp	r3, #3
 80098e4:	d837      	bhi.n	8009956 <DMA_CheckFifoParam+0xda>
 80098e6:	a201      	add	r2, pc, #4	@ (adr r2, 80098ec <DMA_CheckFifoParam+0x70>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	080098fd 	.word	0x080098fd
 80098f0:	08009903 	.word	0x08009903
 80098f4:	080098fd 	.word	0x080098fd
 80098f8:	08009915 	.word	0x08009915
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	73fb      	strb	r3, [r7, #15]
      break;
 8009900:	e030      	b.n	8009964 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009906:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d025      	beq.n	800995a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009912:	e022      	b.n	800995a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009918:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800991c:	d11f      	bne.n	800995e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009922:	e01c      	b.n	800995e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b02      	cmp	r3, #2
 8009928:	d903      	bls.n	8009932 <DMA_CheckFifoParam+0xb6>
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2b03      	cmp	r3, #3
 800992e:	d003      	beq.n	8009938 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009930:	e018      	b.n	8009964 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	73fb      	strb	r3, [r7, #15]
      break;
 8009936:	e015      	b.n	8009964 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800993c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d00e      	beq.n	8009962 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	73fb      	strb	r3, [r7, #15]
      break;
 8009948:	e00b      	b.n	8009962 <DMA_CheckFifoParam+0xe6>
      break;
 800994a:	bf00      	nop
 800994c:	e00a      	b.n	8009964 <DMA_CheckFifoParam+0xe8>
      break;
 800994e:	bf00      	nop
 8009950:	e008      	b.n	8009964 <DMA_CheckFifoParam+0xe8>
      break;
 8009952:	bf00      	nop
 8009954:	e006      	b.n	8009964 <DMA_CheckFifoParam+0xe8>
      break;
 8009956:	bf00      	nop
 8009958:	e004      	b.n	8009964 <DMA_CheckFifoParam+0xe8>
      break;
 800995a:	bf00      	nop
 800995c:	e002      	b.n	8009964 <DMA_CheckFifoParam+0xe8>
      break;   
 800995e:	bf00      	nop
 8009960:	e000      	b.n	8009964 <DMA_CheckFifoParam+0xe8>
      break;
 8009962:	bf00      	nop
    }
  } 
  
  return status; 
 8009964:	7bfb      	ldrb	r3, [r7, #15]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop

08009974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009974:	b480      	push	{r7}
 8009976:	b089      	sub	sp, #36	@ 0x24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800997e:	2300      	movs	r3, #0
 8009980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009982:	2300      	movs	r3, #0
 8009984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009986:	2300      	movs	r3, #0
 8009988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800998a:	2300      	movs	r3, #0
 800998c:	61fb      	str	r3, [r7, #28]
 800998e:	e165      	b.n	8009c5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009990:	2201      	movs	r2, #1
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	fa02 f303 	lsl.w	r3, r2, r3
 8009998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	4013      	ands	r3, r2
 80099a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	f040 8154 	bne.w	8009c56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f003 0303 	and.w	r3, r3, #3
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d005      	beq.n	80099c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d130      	bne.n	8009a28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689b      	ldr	r3, [r3, #8]
 80099ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	005b      	lsls	r3, r3, #1
 80099d0:	2203      	movs	r2, #3
 80099d2:	fa02 f303 	lsl.w	r3, r2, r3
 80099d6:	43db      	mvns	r3, r3
 80099d8:	69ba      	ldr	r2, [r7, #24]
 80099da:	4013      	ands	r3, r2
 80099dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ea:	69ba      	ldr	r2, [r7, #24]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	69ba      	ldr	r2, [r7, #24]
 80099f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80099fc:	2201      	movs	r2, #1
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	fa02 f303 	lsl.w	r3, r2, r3
 8009a04:	43db      	mvns	r3, r3
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	4013      	ands	r3, r2
 8009a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	091b      	lsrs	r3, r3, #4
 8009a12:	f003 0201 	and.w	r2, r3, #1
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	69ba      	ldr	r2, [r7, #24]
 8009a26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f003 0303 	and.w	r3, r3, #3
 8009a30:	2b03      	cmp	r3, #3
 8009a32:	d017      	beq.n	8009a64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	005b      	lsls	r3, r3, #1
 8009a3e:	2203      	movs	r2, #3
 8009a40:	fa02 f303 	lsl.w	r3, r2, r3
 8009a44:	43db      	mvns	r3, r3
 8009a46:	69ba      	ldr	r2, [r7, #24]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	fa02 f303 	lsl.w	r3, r2, r3
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	f003 0303 	and.w	r3, r3, #3
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d123      	bne.n	8009ab8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	08da      	lsrs	r2, r3, #3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	3208      	adds	r2, #8
 8009a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	f003 0307 	and.w	r3, r3, #7
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	220f      	movs	r2, #15
 8009a88:	fa02 f303 	lsl.w	r3, r2, r3
 8009a8c:	43db      	mvns	r3, r3
 8009a8e:	69ba      	ldr	r2, [r7, #24]
 8009a90:	4013      	ands	r3, r2
 8009a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	691a      	ldr	r2, [r3, #16]
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	08da      	lsrs	r2, r3, #3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3208      	adds	r2, #8
 8009ab2:	69b9      	ldr	r1, [r7, #24]
 8009ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	005b      	lsls	r3, r3, #1
 8009ac2:	2203      	movs	r2, #3
 8009ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	4013      	ands	r3, r2
 8009ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	f003 0203 	and.w	r2, r3, #3
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	005b      	lsls	r3, r3, #1
 8009adc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	69ba      	ldr	r2, [r7, #24]
 8009aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f000 80ae 	beq.w	8009c56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
 8009afe:	4b5d      	ldr	r3, [pc, #372]	@ (8009c74 <HAL_GPIO_Init+0x300>)
 8009b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b02:	4a5c      	ldr	r2, [pc, #368]	@ (8009c74 <HAL_GPIO_Init+0x300>)
 8009b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b08:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b0a:	4b5a      	ldr	r3, [pc, #360]	@ (8009c74 <HAL_GPIO_Init+0x300>)
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009b16:	4a58      	ldr	r2, [pc, #352]	@ (8009c78 <HAL_GPIO_Init+0x304>)
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	089b      	lsrs	r3, r3, #2
 8009b1c:	3302      	adds	r3, #2
 8009b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	f003 0303 	and.w	r3, r3, #3
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	220f      	movs	r2, #15
 8009b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b32:	43db      	mvns	r3, r3
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	4013      	ands	r3, r2
 8009b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	4a4f      	ldr	r2, [pc, #316]	@ (8009c7c <HAL_GPIO_Init+0x308>)
 8009b3e:	4293      	cmp	r3, r2
 8009b40:	d025      	beq.n	8009b8e <HAL_GPIO_Init+0x21a>
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	4a4e      	ldr	r2, [pc, #312]	@ (8009c80 <HAL_GPIO_Init+0x30c>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d01f      	beq.n	8009b8a <HAL_GPIO_Init+0x216>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a4d      	ldr	r2, [pc, #308]	@ (8009c84 <HAL_GPIO_Init+0x310>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d019      	beq.n	8009b86 <HAL_GPIO_Init+0x212>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a4c      	ldr	r2, [pc, #304]	@ (8009c88 <HAL_GPIO_Init+0x314>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d013      	beq.n	8009b82 <HAL_GPIO_Init+0x20e>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	4a4b      	ldr	r2, [pc, #300]	@ (8009c8c <HAL_GPIO_Init+0x318>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d00d      	beq.n	8009b7e <HAL_GPIO_Init+0x20a>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	4a4a      	ldr	r2, [pc, #296]	@ (8009c90 <HAL_GPIO_Init+0x31c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d007      	beq.n	8009b7a <HAL_GPIO_Init+0x206>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	4a49      	ldr	r2, [pc, #292]	@ (8009c94 <HAL_GPIO_Init+0x320>)
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	d101      	bne.n	8009b76 <HAL_GPIO_Init+0x202>
 8009b72:	2306      	movs	r3, #6
 8009b74:	e00c      	b.n	8009b90 <HAL_GPIO_Init+0x21c>
 8009b76:	2307      	movs	r3, #7
 8009b78:	e00a      	b.n	8009b90 <HAL_GPIO_Init+0x21c>
 8009b7a:	2305      	movs	r3, #5
 8009b7c:	e008      	b.n	8009b90 <HAL_GPIO_Init+0x21c>
 8009b7e:	2304      	movs	r3, #4
 8009b80:	e006      	b.n	8009b90 <HAL_GPIO_Init+0x21c>
 8009b82:	2303      	movs	r3, #3
 8009b84:	e004      	b.n	8009b90 <HAL_GPIO_Init+0x21c>
 8009b86:	2302      	movs	r3, #2
 8009b88:	e002      	b.n	8009b90 <HAL_GPIO_Init+0x21c>
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e000      	b.n	8009b90 <HAL_GPIO_Init+0x21c>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	69fa      	ldr	r2, [r7, #28]
 8009b92:	f002 0203 	and.w	r2, r2, #3
 8009b96:	0092      	lsls	r2, r2, #2
 8009b98:	4093      	lsls	r3, r2
 8009b9a:	69ba      	ldr	r2, [r7, #24]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009ba0:	4935      	ldr	r1, [pc, #212]	@ (8009c78 <HAL_GPIO_Init+0x304>)
 8009ba2:	69fb      	ldr	r3, [r7, #28]
 8009ba4:	089b      	lsrs	r3, r3, #2
 8009ba6:	3302      	adds	r3, #2
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009bae:	4b3a      	ldr	r3, [pc, #232]	@ (8009c98 <HAL_GPIO_Init+0x324>)
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	43db      	mvns	r3, r3
 8009bb8:	69ba      	ldr	r2, [r7, #24]
 8009bba:	4013      	ands	r3, r2
 8009bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009bd2:	4a31      	ldr	r2, [pc, #196]	@ (8009c98 <HAL_GPIO_Init+0x324>)
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8009c98 <HAL_GPIO_Init+0x324>)
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	43db      	mvns	r3, r3
 8009be2:	69ba      	ldr	r2, [r7, #24]
 8009be4:	4013      	ands	r3, r2
 8009be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009bf4:	69ba      	ldr	r2, [r7, #24]
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	4313      	orrs	r3, r2
 8009bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009bfc:	4a26      	ldr	r2, [pc, #152]	@ (8009c98 <HAL_GPIO_Init+0x324>)
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009c02:	4b25      	ldr	r3, [pc, #148]	@ (8009c98 <HAL_GPIO_Init+0x324>)
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	43db      	mvns	r3, r3
 8009c0c:	69ba      	ldr	r2, [r7, #24]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	685b      	ldr	r3, [r3, #4]
 8009c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009c1e:	69ba      	ldr	r2, [r7, #24]
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	4313      	orrs	r3, r2
 8009c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009c26:	4a1c      	ldr	r2, [pc, #112]	@ (8009c98 <HAL_GPIO_Init+0x324>)
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009c98 <HAL_GPIO_Init+0x324>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	43db      	mvns	r3, r3
 8009c36:	69ba      	ldr	r2, [r7, #24]
 8009c38:	4013      	ands	r3, r2
 8009c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009c48:	69ba      	ldr	r2, [r7, #24]
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009c50:	4a11      	ldr	r2, [pc, #68]	@ (8009c98 <HAL_GPIO_Init+0x324>)
 8009c52:	69bb      	ldr	r3, [r7, #24]
 8009c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	61fb      	str	r3, [r7, #28]
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	2b0f      	cmp	r3, #15
 8009c60:	f67f ae96 	bls.w	8009990 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop
 8009c68:	3724      	adds	r7, #36	@ 0x24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	40023800 	.word	0x40023800
 8009c78:	40013800 	.word	0x40013800
 8009c7c:	40020000 	.word	0x40020000
 8009c80:	40020400 	.word	0x40020400
 8009c84:	40020800 	.word	0x40020800
 8009c88:	40020c00 	.word	0x40020c00
 8009c8c:	40021000 	.word	0x40021000
 8009c90:	40021400 	.word	0x40021400
 8009c94:	40021800 	.word	0x40021800
 8009c98:	40013c00 	.word	0x40013c00

08009c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	460b      	mov	r3, r1
 8009ca6:	807b      	strh	r3, [r7, #2]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009cac:	787b      	ldrb	r3, [r7, #1]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d003      	beq.n	8009cba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cb2:	887a      	ldrh	r2, [r7, #2]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009cb8:	e003      	b.n	8009cc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009cba:	887b      	ldrh	r3, [r7, #2]
 8009cbc:	041a      	lsls	r2, r3, #16
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	619a      	str	r2, [r3, #24]
}
 8009cc2:	bf00      	nop
 8009cc4:	370c      	adds	r7, #12
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b085      	sub	sp, #20
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ce0:	887a      	ldrh	r2, [r7, #2]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	4013      	ands	r3, r2
 8009ce6:	041a      	lsls	r2, r3, #16
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	43d9      	mvns	r1, r3
 8009cec:	887b      	ldrh	r3, [r7, #2]
 8009cee:	400b      	ands	r3, r1
 8009cf0:	431a      	orrs	r2, r3
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	619a      	str	r2, [r3, #24]
}
 8009cf6:	bf00      	nop
 8009cf8:	3714      	adds	r7, #20
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr
	...

08009d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e12b      	b.n	8009f6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d106      	bne.n	8009d30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7fe fc7a 	bl	8008624 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2224      	movs	r2, #36	@ 0x24
 8009d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f022 0201 	bic.w	r2, r2, #1
 8009d46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009d66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d68:	f001 f932 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 8009d6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	4a81      	ldr	r2, [pc, #516]	@ (8009f78 <HAL_I2C_Init+0x274>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d807      	bhi.n	8009d88 <HAL_I2C_Init+0x84>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	4a80      	ldr	r2, [pc, #512]	@ (8009f7c <HAL_I2C_Init+0x278>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	bf94      	ite	ls
 8009d80:	2301      	movls	r3, #1
 8009d82:	2300      	movhi	r3, #0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	e006      	b.n	8009d96 <HAL_I2C_Init+0x92>
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8009f80 <HAL_I2C_Init+0x27c>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	bf94      	ite	ls
 8009d90:	2301      	movls	r3, #1
 8009d92:	2300      	movhi	r3, #0
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e0e7      	b.n	8009f6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	4a78      	ldr	r2, [pc, #480]	@ (8009f84 <HAL_I2C_Init+0x280>)
 8009da2:	fba2 2303 	umull	r2, r3, r2, r3
 8009da6:	0c9b      	lsrs	r3, r3, #18
 8009da8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	430a      	orrs	r2, r1
 8009dbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	4a6a      	ldr	r2, [pc, #424]	@ (8009f78 <HAL_I2C_Init+0x274>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d802      	bhi.n	8009dd8 <HAL_I2C_Init+0xd4>
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	e009      	b.n	8009dec <HAL_I2C_Init+0xe8>
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009dde:	fb02 f303 	mul.w	r3, r2, r3
 8009de2:	4a69      	ldr	r2, [pc, #420]	@ (8009f88 <HAL_I2C_Init+0x284>)
 8009de4:	fba2 2303 	umull	r2, r3, r2, r3
 8009de8:	099b      	lsrs	r3, r3, #6
 8009dea:	3301      	adds	r3, #1
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	430b      	orrs	r3, r1
 8009df2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009dfe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	495c      	ldr	r1, [pc, #368]	@ (8009f78 <HAL_I2C_Init+0x274>)
 8009e08:	428b      	cmp	r3, r1
 8009e0a:	d819      	bhi.n	8009e40 <HAL_I2C_Init+0x13c>
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	1e59      	subs	r1, r3, #1
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e1a:	1c59      	adds	r1, r3, #1
 8009e1c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009e20:	400b      	ands	r3, r1
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d00a      	beq.n	8009e3c <HAL_I2C_Init+0x138>
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	1e59      	subs	r1, r3, #1
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e34:	3301      	adds	r3, #1
 8009e36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e3a:	e051      	b.n	8009ee0 <HAL_I2C_Init+0x1dc>
 8009e3c:	2304      	movs	r3, #4
 8009e3e:	e04f      	b.n	8009ee0 <HAL_I2C_Init+0x1dc>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d111      	bne.n	8009e6c <HAL_I2C_Init+0x168>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	1e58      	subs	r0, r3, #1
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6859      	ldr	r1, [r3, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	005b      	lsls	r3, r3, #1
 8009e54:	440b      	add	r3, r1
 8009e56:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e5a:	3301      	adds	r3, #1
 8009e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	bf0c      	ite	eq
 8009e64:	2301      	moveq	r3, #1
 8009e66:	2300      	movne	r3, #0
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	e012      	b.n	8009e92 <HAL_I2C_Init+0x18e>
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	1e58      	subs	r0, r3, #1
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6859      	ldr	r1, [r3, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	440b      	add	r3, r1
 8009e7a:	0099      	lsls	r1, r3, #2
 8009e7c:	440b      	add	r3, r1
 8009e7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e82:	3301      	adds	r3, #1
 8009e84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bf0c      	ite	eq
 8009e8c:	2301      	moveq	r3, #1
 8009e8e:	2300      	movne	r3, #0
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <HAL_I2C_Init+0x196>
 8009e96:	2301      	movs	r3, #1
 8009e98:	e022      	b.n	8009ee0 <HAL_I2C_Init+0x1dc>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	689b      	ldr	r3, [r3, #8]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d10e      	bne.n	8009ec0 <HAL_I2C_Init+0x1bc>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	1e58      	subs	r0, r3, #1
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6859      	ldr	r1, [r3, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	005b      	lsls	r3, r3, #1
 8009eae:	440b      	add	r3, r1
 8009eb0:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ebe:	e00f      	b.n	8009ee0 <HAL_I2C_Init+0x1dc>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	1e58      	subs	r0, r3, #1
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6859      	ldr	r1, [r3, #4]
 8009ec8:	460b      	mov	r3, r1
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	440b      	add	r3, r1
 8009ece:	0099      	lsls	r1, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009edc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009ee0:	6879      	ldr	r1, [r7, #4]
 8009ee2:	6809      	ldr	r1, [r1, #0]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	69da      	ldr	r2, [r3, #28]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	430a      	orrs	r2, r1
 8009f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8009f0e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6911      	ldr	r1, [r2, #16]
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	68d2      	ldr	r2, [r2, #12]
 8009f1a:	4311      	orrs	r1, r2
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	6812      	ldr	r2, [r2, #0]
 8009f20:	430b      	orrs	r3, r1
 8009f22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	695a      	ldr	r2, [r3, #20]
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	431a      	orrs	r2, r3
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	430a      	orrs	r2, r1
 8009f3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0201 	orr.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2220      	movs	r2, #32
 8009f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8009f6c:	2300      	movs	r3, #0
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	000186a0 	.word	0x000186a0
 8009f7c:	001e847f 	.word	0x001e847f
 8009f80:	003d08ff 	.word	0x003d08ff
 8009f84:	431bde83 	.word	0x431bde83
 8009f88:	10624dd3 	.word	0x10624dd3

08009f8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af02      	add	r7, sp, #8
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	4608      	mov	r0, r1
 8009f96:	4611      	mov	r1, r2
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	817b      	strh	r3, [r7, #10]
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	813b      	strh	r3, [r7, #8]
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009fa6:	f7fe ffa1 	bl	8008eec <HAL_GetTick>
 8009faa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	2b20      	cmp	r3, #32
 8009fb6:	f040 80d9 	bne.w	800a16c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	9300      	str	r3, [sp, #0]
 8009fbe:	2319      	movs	r3, #25
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	496d      	ldr	r1, [pc, #436]	@ (800a178 <HAL_I2C_Mem_Write+0x1ec>)
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 fc8b 	bl	800a8e0 <I2C_WaitOnFlagUntilTimeout>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d001      	beq.n	8009fd4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	e0cc      	b.n	800a16e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d101      	bne.n	8009fe2 <HAL_I2C_Mem_Write+0x56>
 8009fde:	2302      	movs	r3, #2
 8009fe0:	e0c5      	b.n	800a16e <HAL_I2C_Mem_Write+0x1e2>
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f003 0301 	and.w	r3, r3, #1
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d007      	beq.n	800a008 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a016:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2221      	movs	r2, #33	@ 0x21
 800a01c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2240      	movs	r2, #64	@ 0x40
 800a024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a3a      	ldr	r2, [r7, #32]
 800a032:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a03e:	b29a      	uxth	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	4a4d      	ldr	r2, [pc, #308]	@ (800a17c <HAL_I2C_Mem_Write+0x1f0>)
 800a048:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a04a:	88f8      	ldrh	r0, [r7, #6]
 800a04c:	893a      	ldrh	r2, [r7, #8]
 800a04e:	8979      	ldrh	r1, [r7, #10]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	9301      	str	r3, [sp, #4]
 800a054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	4603      	mov	r3, r0
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 fac2 	bl	800a5e4 <I2C_RequestMemoryWrite>
 800a060:	4603      	mov	r3, r0
 800a062:	2b00      	cmp	r3, #0
 800a064:	d052      	beq.n	800a10c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e081      	b.n	800a16e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f000 fd50 	bl	800ab14 <I2C_WaitOnTXEFlagUntilTimeout>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d00d      	beq.n	800a096 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a07e:	2b04      	cmp	r3, #4
 800a080:	d107      	bne.n	800a092 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a090:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a092:	2301      	movs	r3, #1
 800a094:	e06b      	b.n	800a16e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a09a:	781a      	ldrb	r2, [r3, #0]
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0a6:	1c5a      	adds	r2, r3, #1
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	3b01      	subs	r3, #1
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	695b      	ldr	r3, [r3, #20]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	d11b      	bne.n	800a10c <HAL_I2C_Mem_Write+0x180>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d017      	beq.n	800a10c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0e0:	781a      	ldrb	r2, [r3, #0]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ec:	1c5a      	adds	r2, r3, #1
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a0f6:	3b01      	subs	r3, #1
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a102:	b29b      	uxth	r3, r3
 800a104:	3b01      	subs	r3, #1
 800a106:	b29a      	uxth	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1aa      	bne.n	800a06a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f000 fd43 	bl	800aba4 <I2C_WaitOnBTFFlagUntilTimeout>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d00d      	beq.n	800a140 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a128:	2b04      	cmp	r3, #4
 800a12a:	d107      	bne.n	800a13c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a13a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	e016      	b.n	800a16e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a14e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2220      	movs	r2, #32
 800a154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	e000      	b.n	800a16e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a16c:	2302      	movs	r3, #2
  }
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3718      	adds	r7, #24
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	00100002 	.word	0x00100002
 800a17c:	ffff0000 	.word	0xffff0000

0800a180 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b08c      	sub	sp, #48	@ 0x30
 800a184:	af02      	add	r7, sp, #8
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	4608      	mov	r0, r1
 800a18a:	4611      	mov	r1, r2
 800a18c:	461a      	mov	r2, r3
 800a18e:	4603      	mov	r3, r0
 800a190:	817b      	strh	r3, [r7, #10]
 800a192:	460b      	mov	r3, r1
 800a194:	813b      	strh	r3, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a19a:	f7fe fea7 	bl	8008eec <HAL_GetTick>
 800a19e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b20      	cmp	r3, #32
 800a1aa:	f040 8214 	bne.w	800a5d6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	2319      	movs	r3, #25
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	497b      	ldr	r1, [pc, #492]	@ (800a3a4 <HAL_I2C_Mem_Read+0x224>)
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f000 fb91 	bl	800a8e0 <I2C_WaitOnFlagUntilTimeout>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a1c4:	2302      	movs	r3, #2
 800a1c6:	e207      	b.n	800a5d8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d101      	bne.n	800a1d6 <HAL_I2C_Mem_Read+0x56>
 800a1d2:	2302      	movs	r3, #2
 800a1d4:	e200      	b.n	800a5d8 <HAL_I2C_Mem_Read+0x458>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d007      	beq.n	800a1fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f042 0201 	orr.w	r2, r2, #1
 800a1fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a20a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2222      	movs	r2, #34	@ 0x22
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2240      	movs	r2, #64	@ 0x40
 800a218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a226:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a22c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a232:	b29a      	uxth	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4a5b      	ldr	r2, [pc, #364]	@ (800a3a8 <HAL_I2C_Mem_Read+0x228>)
 800a23c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a23e:	88f8      	ldrh	r0, [r7, #6]
 800a240:	893a      	ldrh	r2, [r7, #8]
 800a242:	8979      	ldrh	r1, [r7, #10]
 800a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24a:	9300      	str	r3, [sp, #0]
 800a24c:	4603      	mov	r3, r0
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 fa5e 	bl	800a710 <I2C_RequestMemoryRead>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e1bc      	b.n	800a5d8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a262:	2b00      	cmp	r3, #0
 800a264:	d113      	bne.n	800a28e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a266:	2300      	movs	r3, #0
 800a268:	623b      	str	r3, [r7, #32]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	623b      	str	r3, [r7, #32]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	623b      	str	r3, [r7, #32]
 800a27a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	e190      	b.n	800a5b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a292:	2b01      	cmp	r3, #1
 800a294:	d11b      	bne.n	800a2ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	61fb      	str	r3, [r7, #28]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	695b      	ldr	r3, [r3, #20]
 800a2b0:	61fb      	str	r3, [r7, #28]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	61fb      	str	r3, [r7, #28]
 800a2ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2ca:	601a      	str	r2, [r3, #0]
 800a2cc:	e170      	b.n	800a5b0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	d11b      	bne.n	800a30e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a2e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a2f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	61bb      	str	r3, [r7, #24]
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	61bb      	str	r3, [r7, #24]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	61bb      	str	r3, [r7, #24]
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	e150      	b.n	800a5b0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	617b      	str	r3, [r7, #20]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	617b      	str	r3, [r7, #20]
 800a322:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a324:	e144      	b.n	800a5b0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	f200 80f1 	bhi.w	800a512 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a334:	2b01      	cmp	r3, #1
 800a336:	d123      	bne.n	800a380 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a338:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a33a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a33c:	68f8      	ldr	r0, [r7, #12]
 800a33e:	f000 fc79 	bl	800ac34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	e145      	b.n	800a5d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	691a      	ldr	r2, [r3, #16]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a356:	b2d2      	uxtb	r2, r2
 800a358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a368:	3b01      	subs	r3, #1
 800a36a:	b29a      	uxth	r2, r3
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a374:	b29b      	uxth	r3, r3
 800a376:	3b01      	subs	r3, #1
 800a378:	b29a      	uxth	r2, r3
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a37e:	e117      	b.n	800a5b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a384:	2b02      	cmp	r3, #2
 800a386:	d14e      	bne.n	800a426 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a38a:	9300      	str	r3, [sp, #0]
 800a38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38e:	2200      	movs	r2, #0
 800a390:	4906      	ldr	r1, [pc, #24]	@ (800a3ac <HAL_I2C_Mem_Read+0x22c>)
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 faa4 	bl	800a8e0 <I2C_WaitOnFlagUntilTimeout>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d008      	beq.n	800a3b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e11a      	b.n	800a5d8 <HAL_I2C_Mem_Read+0x458>
 800a3a2:	bf00      	nop
 800a3a4:	00100002 	.word	0x00100002
 800a3a8:	ffff0000 	.word	0xffff0000
 800a3ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	681a      	ldr	r2, [r3, #0]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	691a      	ldr	r2, [r3, #16]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ca:	b2d2      	uxtb	r2, r2
 800a3cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3e8:	b29b      	uxth	r3, r3
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	691a      	ldr	r2, [r3, #16]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fc:	b2d2      	uxtb	r2, r2
 800a3fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a404:	1c5a      	adds	r2, r3, #1
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a40e:	3b01      	subs	r3, #1
 800a410:	b29a      	uxth	r2, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	3b01      	subs	r3, #1
 800a41e:	b29a      	uxth	r2, r3
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a424:	e0c4      	b.n	800a5b0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42c:	2200      	movs	r2, #0
 800a42e:	496c      	ldr	r1, [pc, #432]	@ (800a5e0 <HAL_I2C_Mem_Read+0x460>)
 800a430:	68f8      	ldr	r0, [r7, #12]
 800a432:	f000 fa55 	bl	800a8e0 <I2C_WaitOnFlagUntilTimeout>
 800a436:	4603      	mov	r3, r0
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d001      	beq.n	800a440 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	e0cb      	b.n	800a5d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a44e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691a      	ldr	r2, [r3, #16]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45a:	b2d2      	uxtb	r2, r2
 800a45c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a46c:	3b01      	subs	r3, #1
 800a46e:	b29a      	uxth	r2, r3
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a478:	b29b      	uxth	r3, r3
 800a47a:	3b01      	subs	r3, #1
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a488:	2200      	movs	r2, #0
 800a48a:	4955      	ldr	r1, [pc, #340]	@ (800a5e0 <HAL_I2C_Mem_Read+0x460>)
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f000 fa27 	bl	800a8e0 <I2C_WaitOnFlagUntilTimeout>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e09d      	b.n	800a5d8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691a      	ldr	r2, [r3, #16]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b6:	b2d2      	uxtb	r2, r2
 800a4b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	b29a      	uxth	r2, r3
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	b29a      	uxth	r2, r3
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	691a      	ldr	r2, [r3, #16]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e8:	b2d2      	uxtb	r2, r2
 800a4ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a506:	b29b      	uxth	r3, r3
 800a508:	3b01      	subs	r3, #1
 800a50a:	b29a      	uxth	r2, r3
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a510:	e04e      	b.n	800a5b0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a514:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f000 fb8c 	bl	800ac34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a51c:	4603      	mov	r3, r0
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e058      	b.n	800a5d8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	691a      	ldr	r2, [r3, #16]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a530:	b2d2      	uxtb	r2, r2
 800a532:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a538:	1c5a      	adds	r2, r3, #1
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a542:	3b01      	subs	r3, #1
 800a544:	b29a      	uxth	r2, r3
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a54e:	b29b      	uxth	r3, r3
 800a550:	3b01      	subs	r3, #1
 800a552:	b29a      	uxth	r2, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	695b      	ldr	r3, [r3, #20]
 800a55e:	f003 0304 	and.w	r3, r3, #4
 800a562:	2b04      	cmp	r3, #4
 800a564:	d124      	bne.n	800a5b0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d107      	bne.n	800a57e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a57c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	691a      	ldr	r2, [r3, #16]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a588:	b2d2      	uxtb	r2, r2
 800a58a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a59a:	3b01      	subs	r3, #1
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f47f aeb6 	bne.w	800a326 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2220      	movs	r2, #32
 800a5be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	e000      	b.n	800a5d8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a5d6:	2302      	movs	r3, #2
  }
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3728      	adds	r7, #40	@ 0x28
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	00010004 	.word	0x00010004

0800a5e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b088      	sub	sp, #32
 800a5e8:	af02      	add	r7, sp, #8
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	4608      	mov	r0, r1
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	817b      	strh	r3, [r7, #10]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	813b      	strh	r3, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a60c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	6a3b      	ldr	r3, [r7, #32]
 800a614:	2200      	movs	r2, #0
 800a616:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 f960 	bl	800a8e0 <I2C_WaitOnFlagUntilTimeout>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d00d      	beq.n	800a642 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a630:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a634:	d103      	bne.n	800a63e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a63c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e05f      	b.n	800a702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a642:	897b      	ldrh	r3, [r7, #10]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	461a      	mov	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a650:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a654:	6a3a      	ldr	r2, [r7, #32]
 800a656:	492d      	ldr	r1, [pc, #180]	@ (800a70c <I2C_RequestMemoryWrite+0x128>)
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f9bb 	bl	800a9d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	e04c      	b.n	800a702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a668:	2300      	movs	r3, #0
 800a66a:	617b      	str	r3, [r7, #20]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	617b      	str	r3, [r7, #20]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	699b      	ldr	r3, [r3, #24]
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a67e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a680:	6a39      	ldr	r1, [r7, #32]
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 fa46 	bl	800ab14 <I2C_WaitOnTXEFlagUntilTimeout>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d00d      	beq.n	800a6aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a692:	2b04      	cmp	r3, #4
 800a694:	d107      	bne.n	800a6a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e02b      	b.n	800a702 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6aa:	88fb      	ldrh	r3, [r7, #6]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d105      	bne.n	800a6bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6b0:	893b      	ldrh	r3, [r7, #8]
 800a6b2:	b2da      	uxtb	r2, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	611a      	str	r2, [r3, #16]
 800a6ba:	e021      	b.n	800a700 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a6bc:	893b      	ldrh	r3, [r7, #8]
 800a6be:	0a1b      	lsrs	r3, r3, #8
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6cc:	6a39      	ldr	r1, [r7, #32]
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 fa20 	bl	800ab14 <I2C_WaitOnTXEFlagUntilTimeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d00d      	beq.n	800a6f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6de:	2b04      	cmp	r3, #4
 800a6e0:	d107      	bne.n	800a6f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e005      	b.n	800a702 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6f6:	893b      	ldrh	r3, [r7, #8]
 800a6f8:	b2da      	uxtb	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	00010002 	.word	0x00010002

0800a710 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b088      	sub	sp, #32
 800a714:	af02      	add	r7, sp, #8
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	4608      	mov	r0, r1
 800a71a:	4611      	mov	r1, r2
 800a71c:	461a      	mov	r2, r3
 800a71e:	4603      	mov	r3, r0
 800a720:	817b      	strh	r3, [r7, #10]
 800a722:	460b      	mov	r3, r1
 800a724:	813b      	strh	r3, [r7, #8]
 800a726:	4613      	mov	r3, r2
 800a728:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a738:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	681a      	ldr	r2, [r3, #0]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a748:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	2200      	movs	r2, #0
 800a752:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 f8c2 	bl	800a8e0 <I2C_WaitOnFlagUntilTimeout>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00d      	beq.n	800a77e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a76c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a770:	d103      	bne.n	800a77a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a778:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e0aa      	b.n	800a8d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a77e:	897b      	ldrh	r3, [r7, #10]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	461a      	mov	r2, r3
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800a78c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a790:	6a3a      	ldr	r2, [r7, #32]
 800a792:	4952      	ldr	r1, [pc, #328]	@ (800a8dc <I2C_RequestMemoryRead+0x1cc>)
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f000 f91d 	bl	800a9d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d001      	beq.n	800a7a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	e097      	b.n	800a8d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	617b      	str	r3, [r7, #20]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	617b      	str	r3, [r7, #20]
 800a7b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7bc:	6a39      	ldr	r1, [r7, #32]
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 f9a8 	bl	800ab14 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00d      	beq.n	800a7e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ce:	2b04      	cmp	r3, #4
 800a7d0:	d107      	bne.n	800a7e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e076      	b.n	800a8d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a7e6:	88fb      	ldrh	r3, [r7, #6]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d105      	bne.n	800a7f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a7ec:	893b      	ldrh	r3, [r7, #8]
 800a7ee:	b2da      	uxtb	r2, r3
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	611a      	str	r2, [r3, #16]
 800a7f6:	e021      	b.n	800a83c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a7f8:	893b      	ldrh	r3, [r7, #8]
 800a7fa:	0a1b      	lsrs	r3, r3, #8
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	b2da      	uxtb	r2, r3
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a808:	6a39      	ldr	r1, [r7, #32]
 800a80a:	68f8      	ldr	r0, [r7, #12]
 800a80c:	f000 f982 	bl	800ab14 <I2C_WaitOnTXEFlagUntilTimeout>
 800a810:	4603      	mov	r3, r0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00d      	beq.n	800a832 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a81a:	2b04      	cmp	r3, #4
 800a81c:	d107      	bne.n	800a82e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a82c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e050      	b.n	800a8d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a832:	893b      	ldrh	r3, [r7, #8]
 800a834:	b2da      	uxtb	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a83c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a83e:	6a39      	ldr	r1, [r7, #32]
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f000 f967 	bl	800ab14 <I2C_WaitOnTXEFlagUntilTimeout>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d00d      	beq.n	800a868 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a850:	2b04      	cmp	r3, #4
 800a852:	d107      	bne.n	800a864 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a862:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e035      	b.n	800a8d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a876:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	2200      	movs	r2, #0
 800a880:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f000 f82b 	bl	800a8e0 <I2C_WaitOnFlagUntilTimeout>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d00d      	beq.n	800a8ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a89a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a89e:	d103      	bne.n	800a8a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	e013      	b.n	800a8d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a8ac:	897b      	ldrh	r3, [r7, #10]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	f043 0301 	orr.w	r3, r3, #1
 800a8b4:	b2da      	uxtb	r2, r3
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8be:	6a3a      	ldr	r2, [r7, #32]
 800a8c0:	4906      	ldr	r1, [pc, #24]	@ (800a8dc <I2C_RequestMemoryRead+0x1cc>)
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f886 	bl	800a9d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e000      	b.n	800a8d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3718      	adds	r7, #24
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	00010002 	.word	0x00010002

0800a8e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a8f0:	e048      	b.n	800a984 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f8:	d044      	beq.n	800a984 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8fa:	f7fe faf7 	bl	8008eec <HAL_GetTick>
 800a8fe:	4602      	mov	r2, r0
 800a900:	69bb      	ldr	r3, [r7, #24]
 800a902:	1ad3      	subs	r3, r2, r3
 800a904:	683a      	ldr	r2, [r7, #0]
 800a906:	429a      	cmp	r2, r3
 800a908:	d302      	bcc.n	800a910 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d139      	bne.n	800a984 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	0c1b      	lsrs	r3, r3, #16
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b01      	cmp	r3, #1
 800a918:	d10d      	bne.n	800a936 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	43da      	mvns	r2, r3
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	4013      	ands	r3, r2
 800a926:	b29b      	uxth	r3, r3
 800a928:	2b00      	cmp	r3, #0
 800a92a:	bf0c      	ite	eq
 800a92c:	2301      	moveq	r3, #1
 800a92e:	2300      	movne	r3, #0
 800a930:	b2db      	uxtb	r3, r3
 800a932:	461a      	mov	r2, r3
 800a934:	e00c      	b.n	800a950 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	43da      	mvns	r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	4013      	ands	r3, r2
 800a942:	b29b      	uxth	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	bf0c      	ite	eq
 800a948:	2301      	moveq	r3, #1
 800a94a:	2300      	movne	r3, #0
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	461a      	mov	r2, r3
 800a950:	79fb      	ldrb	r3, [r7, #7]
 800a952:	429a      	cmp	r2, r3
 800a954:	d116      	bne.n	800a984 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2220      	movs	r2, #32
 800a960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a970:	f043 0220 	orr.w	r2, r3, #32
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e023      	b.n	800a9cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	0c1b      	lsrs	r3, r3, #16
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d10d      	bne.n	800a9aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	695b      	ldr	r3, [r3, #20]
 800a994:	43da      	mvns	r2, r3
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	4013      	ands	r3, r2
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	bf0c      	ite	eq
 800a9a0:	2301      	moveq	r3, #1
 800a9a2:	2300      	movne	r3, #0
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	e00c      	b.n	800a9c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	699b      	ldr	r3, [r3, #24]
 800a9b0:	43da      	mvns	r2, r3
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	bf0c      	ite	eq
 800a9bc:	2301      	moveq	r3, #1
 800a9be:	2300      	movne	r3, #0
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d093      	beq.n	800a8f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a9ca:	2300      	movs	r3, #0
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}

0800a9d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b084      	sub	sp, #16
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	60b9      	str	r1, [r7, #8]
 800a9de:	607a      	str	r2, [r7, #4]
 800a9e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a9e2:	e071      	b.n	800aac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	695b      	ldr	r3, [r3, #20]
 800a9ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a9ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9f2:	d123      	bne.n	800aa3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa02:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aa0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2200      	movs	r2, #0
 800aa12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2220      	movs	r2, #32
 800aa18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa28:	f043 0204 	orr.w	r2, r3, #4
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e067      	b.n	800ab0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa42:	d041      	beq.n	800aac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa44:	f7fe fa52 	bl	8008eec <HAL_GetTick>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	1ad3      	subs	r3, r2, r3
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d302      	bcc.n	800aa5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d136      	bne.n	800aac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	0c1b      	lsrs	r3, r3, #16
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d10c      	bne.n	800aa7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	43da      	mvns	r2, r3
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	4013      	ands	r3, r2
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	bf14      	ite	ne
 800aa76:	2301      	movne	r3, #1
 800aa78:	2300      	moveq	r3, #0
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	e00b      	b.n	800aa96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	699b      	ldr	r3, [r3, #24]
 800aa84:	43da      	mvns	r2, r3
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	bf14      	ite	ne
 800aa90:	2301      	movne	r3, #1
 800aa92:	2300      	moveq	r3, #0
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d016      	beq.n	800aac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2220      	movs	r2, #32
 800aaa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab4:	f043 0220 	orr.w	r2, r3, #32
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2200      	movs	r2, #0
 800aac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	e021      	b.n	800ab0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	0c1b      	lsrs	r3, r3, #16
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d10c      	bne.n	800aaec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	695b      	ldr	r3, [r3, #20]
 800aad8:	43da      	mvns	r2, r3
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	4013      	ands	r3, r2
 800aade:	b29b      	uxth	r3, r3
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	bf14      	ite	ne
 800aae4:	2301      	movne	r3, #1
 800aae6:	2300      	moveq	r3, #0
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	e00b      	b.n	800ab04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	43da      	mvns	r2, r3
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	bf14      	ite	ne
 800aafe:	2301      	movne	r3, #1
 800ab00:	2300      	moveq	r3, #0
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f47f af6d 	bne.w	800a9e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab20:	e034      	b.n	800ab8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f000 f8e3 	bl	800acee <I2C_IsAcknowledgeFailed>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e034      	b.n	800ab9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab38:	d028      	beq.n	800ab8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab3a:	f7fe f9d7 	bl	8008eec <HAL_GetTick>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	1ad3      	subs	r3, r2, r3
 800ab44:	68ba      	ldr	r2, [r7, #8]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d302      	bcc.n	800ab50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d11d      	bne.n	800ab8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab5a:	2b80      	cmp	r3, #128	@ 0x80
 800ab5c:	d016      	beq.n	800ab8c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2220      	movs	r2, #32
 800ab68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab78:	f043 0220 	orr.w	r2, r3, #32
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e007      	b.n	800ab9c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	695b      	ldr	r3, [r3, #20]
 800ab92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab96:	2b80      	cmp	r3, #128	@ 0x80
 800ab98:	d1c3      	bne.n	800ab22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	60f8      	str	r0, [r7, #12]
 800abac:	60b9      	str	r1, [r7, #8]
 800abae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800abb0:	e034      	b.n	800ac1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f000 f89b 	bl	800acee <I2C_IsAcknowledgeFailed>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d001      	beq.n	800abc2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	e034      	b.n	800ac2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc8:	d028      	beq.n	800ac1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abca:	f7fe f98f 	bl	8008eec <HAL_GetTick>
 800abce:	4602      	mov	r2, r0
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d302      	bcc.n	800abe0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d11d      	bne.n	800ac1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	695b      	ldr	r3, [r3, #20]
 800abe6:	f003 0304 	and.w	r3, r3, #4
 800abea:	2b04      	cmp	r3, #4
 800abec:	d016      	beq.n	800ac1c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2200      	movs	r2, #0
 800abf2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2220      	movs	r2, #32
 800abf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac08:	f043 0220 	orr.w	r2, r3, #32
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2200      	movs	r2, #0
 800ac14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e007      	b.n	800ac2c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	f003 0304 	and.w	r3, r3, #4
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d1c3      	bne.n	800abb2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ac2a:	2300      	movs	r3, #0
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3710      	adds	r7, #16
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}

0800ac34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b084      	sub	sp, #16
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	60f8      	str	r0, [r7, #12]
 800ac3c:	60b9      	str	r1, [r7, #8]
 800ac3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ac40:	e049      	b.n	800acd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	695b      	ldr	r3, [r3, #20]
 800ac48:	f003 0310 	and.w	r3, r3, #16
 800ac4c:	2b10      	cmp	r3, #16
 800ac4e:	d119      	bne.n	800ac84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f06f 0210 	mvn.w	r2, #16
 800ac58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	2220      	movs	r2, #32
 800ac64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e030      	b.n	800ace6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac84:	f7fe f932 	bl	8008eec <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	68ba      	ldr	r2, [r7, #8]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d302      	bcc.n	800ac9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d11d      	bne.n	800acd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aca4:	2b40      	cmp	r3, #64	@ 0x40
 800aca6:	d016      	beq.n	800acd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2220      	movs	r2, #32
 800acb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc2:	f043 0220 	orr.w	r2, r3, #32
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e007      	b.n	800ace6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	695b      	ldr	r3, [r3, #20]
 800acdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ace0:	2b40      	cmp	r3, #64	@ 0x40
 800ace2:	d1ae      	bne.n	800ac42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}

0800acee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800acee:	b480      	push	{r7}
 800acf0:	b083      	sub	sp, #12
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	695b      	ldr	r3, [r3, #20]
 800acfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad04:	d11b      	bne.n	800ad3e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ad0e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2220      	movs	r2, #32
 800ad1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2a:	f043 0204 	orr.w	r2, r3, #4
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e000      	b.n	800ad40 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ad56:	2300      	movs	r3, #0
 800ad58:	603b      	str	r3, [r7, #0]
 800ad5a:	4b20      	ldr	r3, [pc, #128]	@ (800addc <HAL_PWREx_EnableOverDrive+0x90>)
 800ad5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5e:	4a1f      	ldr	r2, [pc, #124]	@ (800addc <HAL_PWREx_EnableOverDrive+0x90>)
 800ad60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad64:	6413      	str	r3, [r2, #64]	@ 0x40
 800ad66:	4b1d      	ldr	r3, [pc, #116]	@ (800addc <HAL_PWREx_EnableOverDrive+0x90>)
 800ad68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ad6e:	603b      	str	r3, [r7, #0]
 800ad70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ad72:	4b1b      	ldr	r3, [pc, #108]	@ (800ade0 <HAL_PWREx_EnableOverDrive+0x94>)
 800ad74:	2201      	movs	r2, #1
 800ad76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad78:	f7fe f8b8 	bl	8008eec <HAL_GetTick>
 800ad7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ad7e:	e009      	b.n	800ad94 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ad80:	f7fe f8b4 	bl	8008eec <HAL_GetTick>
 800ad84:	4602      	mov	r2, r0
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	1ad3      	subs	r3, r2, r3
 800ad8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ad8e:	d901      	bls.n	800ad94 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e01f      	b.n	800add4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ad94:	4b13      	ldr	r3, [pc, #76]	@ (800ade4 <HAL_PWREx_EnableOverDrive+0x98>)
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ada0:	d1ee      	bne.n	800ad80 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ada2:	4b11      	ldr	r3, [pc, #68]	@ (800ade8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ada4:	2201      	movs	r2, #1
 800ada6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ada8:	f7fe f8a0 	bl	8008eec <HAL_GetTick>
 800adac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800adae:	e009      	b.n	800adc4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800adb0:	f7fe f89c 	bl	8008eec <HAL_GetTick>
 800adb4:	4602      	mov	r2, r0
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	1ad3      	subs	r3, r2, r3
 800adba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800adbe:	d901      	bls.n	800adc4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800adc0:	2303      	movs	r3, #3
 800adc2:	e007      	b.n	800add4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800adc4:	4b07      	ldr	r3, [pc, #28]	@ (800ade4 <HAL_PWREx_EnableOverDrive+0x98>)
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adcc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800add0:	d1ee      	bne.n	800adb0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	40023800 	.word	0x40023800
 800ade0:	420e0040 	.word	0x420e0040
 800ade4:	40007000 	.word	0x40007000
 800ade8:	420e0044 	.word	0x420e0044

0800adec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b084      	sub	sp, #16
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e0cc      	b.n	800af9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ae00:	4b68      	ldr	r3, [pc, #416]	@ (800afa4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 030f 	and.w	r3, r3, #15
 800ae08:	683a      	ldr	r2, [r7, #0]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d90c      	bls.n	800ae28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae0e:	4b65      	ldr	r3, [pc, #404]	@ (800afa4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	b2d2      	uxtb	r2, r2
 800ae14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae16:	4b63      	ldr	r3, [pc, #396]	@ (800afa4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 030f 	and.w	r3, r3, #15
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d001      	beq.n	800ae28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ae24:	2301      	movs	r3, #1
 800ae26:	e0b8      	b.n	800af9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 0302 	and.w	r3, r3, #2
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d020      	beq.n	800ae76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f003 0304 	and.w	r3, r3, #4
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d005      	beq.n	800ae4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae40:	4b59      	ldr	r3, [pc, #356]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	4a58      	ldr	r2, [pc, #352]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ae4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 0308 	and.w	r3, r3, #8
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d005      	beq.n	800ae64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae58:	4b53      	ldr	r3, [pc, #332]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	4a52      	ldr	r2, [pc, #328]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ae62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae64:	4b50      	ldr	r3, [pc, #320]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	494d      	ldr	r1, [pc, #308]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0301 	and.w	r3, r3, #1
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d044      	beq.n	800af0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d107      	bne.n	800ae9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae8a:	4b47      	ldr	r3, [pc, #284]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d119      	bne.n	800aeca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e07f      	b.n	800af9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d003      	beq.n	800aeaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d107      	bne.n	800aeba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aeaa:	4b3f      	ldr	r3, [pc, #252]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d109      	bne.n	800aeca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e06f      	b.n	800af9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeba:	4b3b      	ldr	r3, [pc, #236]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0302 	and.w	r3, r3, #2
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d101      	bne.n	800aeca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e067      	b.n	800af9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aeca:	4b37      	ldr	r3, [pc, #220]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800aecc:	689b      	ldr	r3, [r3, #8]
 800aece:	f023 0203 	bic.w	r2, r3, #3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	4934      	ldr	r1, [pc, #208]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800aed8:	4313      	orrs	r3, r2
 800aeda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aedc:	f7fe f806 	bl	8008eec <HAL_GetTick>
 800aee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aee2:	e00a      	b.n	800aefa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aee4:	f7fe f802 	bl	8008eec <HAL_GetTick>
 800aee8:	4602      	mov	r2, r0
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	1ad3      	subs	r3, r2, r3
 800aeee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d901      	bls.n	800aefa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e04f      	b.n	800af9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aefa:	4b2b      	ldr	r3, [pc, #172]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f003 020c 	and.w	r2, r3, #12
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	429a      	cmp	r2, r3
 800af0a:	d1eb      	bne.n	800aee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af0c:	4b25      	ldr	r3, [pc, #148]	@ (800afa4 <HAL_RCC_ClockConfig+0x1b8>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 030f 	and.w	r3, r3, #15
 800af14:	683a      	ldr	r2, [r7, #0]
 800af16:	429a      	cmp	r2, r3
 800af18:	d20c      	bcs.n	800af34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af1a:	4b22      	ldr	r3, [pc, #136]	@ (800afa4 <HAL_RCC_ClockConfig+0x1b8>)
 800af1c:	683a      	ldr	r2, [r7, #0]
 800af1e:	b2d2      	uxtb	r2, r2
 800af20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af22:	4b20      	ldr	r3, [pc, #128]	@ (800afa4 <HAL_RCC_ClockConfig+0x1b8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 030f 	and.w	r3, r3, #15
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d001      	beq.n	800af34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e032      	b.n	800af9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f003 0304 	and.w	r3, r3, #4
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d008      	beq.n	800af52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af40:	4b19      	ldr	r3, [pc, #100]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	4916      	ldr	r1, [pc, #88]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800af4e:	4313      	orrs	r3, r2
 800af50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f003 0308 	and.w	r3, r3, #8
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d009      	beq.n	800af72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af5e:	4b12      	ldr	r3, [pc, #72]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	691b      	ldr	r3, [r3, #16]
 800af6a:	00db      	lsls	r3, r3, #3
 800af6c:	490e      	ldr	r1, [pc, #56]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800af6e:	4313      	orrs	r3, r2
 800af70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af72:	f000 f855 	bl	800b020 <HAL_RCC_GetSysClockFreq>
 800af76:	4602      	mov	r2, r0
 800af78:	4b0b      	ldr	r3, [pc, #44]	@ (800afa8 <HAL_RCC_ClockConfig+0x1bc>)
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	091b      	lsrs	r3, r3, #4
 800af7e:	f003 030f 	and.w	r3, r3, #15
 800af82:	490a      	ldr	r1, [pc, #40]	@ (800afac <HAL_RCC_ClockConfig+0x1c0>)
 800af84:	5ccb      	ldrb	r3, [r1, r3]
 800af86:	fa22 f303 	lsr.w	r3, r2, r3
 800af8a:	4a09      	ldr	r2, [pc, #36]	@ (800afb0 <HAL_RCC_ClockConfig+0x1c4>)
 800af8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800af8e:	4b09      	ldr	r3, [pc, #36]	@ (800afb4 <HAL_RCC_ClockConfig+0x1c8>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4618      	mov	r0, r3
 800af94:	f7fd ff66 	bl	8008e64 <HAL_InitTick>

  return HAL_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	40023c00 	.word	0x40023c00
 800afa8:	40023800 	.word	0x40023800
 800afac:	080130ec 	.word	0x080130ec
 800afb0:	20000000 	.word	0x20000000
 800afb4:	20000004 	.word	0x20000004

0800afb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afb8:	b480      	push	{r7}
 800afba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afbc:	4b03      	ldr	r3, [pc, #12]	@ (800afcc <HAL_RCC_GetHCLKFreq+0x14>)
 800afbe:	681b      	ldr	r3, [r3, #0]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	46bd      	mov	sp, r7
 800afc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	20000000 	.word	0x20000000

0800afd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800afd4:	f7ff fff0 	bl	800afb8 <HAL_RCC_GetHCLKFreq>
 800afd8:	4602      	mov	r2, r0
 800afda:	4b05      	ldr	r3, [pc, #20]	@ (800aff0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	0a9b      	lsrs	r3, r3, #10
 800afe0:	f003 0307 	and.w	r3, r3, #7
 800afe4:	4903      	ldr	r1, [pc, #12]	@ (800aff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800afe6:	5ccb      	ldrb	r3, [r1, r3]
 800afe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800afec:	4618      	mov	r0, r3
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	40023800 	.word	0x40023800
 800aff4:	080130fc 	.word	0x080130fc

0800aff8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800affc:	f7ff ffdc 	bl	800afb8 <HAL_RCC_GetHCLKFreq>
 800b000:	4602      	mov	r2, r0
 800b002:	4b05      	ldr	r3, [pc, #20]	@ (800b018 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b004:	689b      	ldr	r3, [r3, #8]
 800b006:	0b5b      	lsrs	r3, r3, #13
 800b008:	f003 0307 	and.w	r3, r3, #7
 800b00c:	4903      	ldr	r1, [pc, #12]	@ (800b01c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b00e:	5ccb      	ldrb	r3, [r1, r3]
 800b010:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b014:	4618      	mov	r0, r3
 800b016:	bd80      	pop	{r7, pc}
 800b018:	40023800 	.word	0x40023800
 800b01c:	080130fc 	.word	0x080130fc

0800b020 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b024:	b0a6      	sub	sp, #152	@ 0x98
 800b026:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800b02e:	2300      	movs	r3, #0
 800b030:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b046:	4bc8      	ldr	r3, [pc, #800]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f003 030c 	and.w	r3, r3, #12
 800b04e:	2b0c      	cmp	r3, #12
 800b050:	f200 817e 	bhi.w	800b350 <HAL_RCC_GetSysClockFreq+0x330>
 800b054:	a201      	add	r2, pc, #4	@ (adr r2, 800b05c <HAL_RCC_GetSysClockFreq+0x3c>)
 800b056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05a:	bf00      	nop
 800b05c:	0800b091 	.word	0x0800b091
 800b060:	0800b351 	.word	0x0800b351
 800b064:	0800b351 	.word	0x0800b351
 800b068:	0800b351 	.word	0x0800b351
 800b06c:	0800b099 	.word	0x0800b099
 800b070:	0800b351 	.word	0x0800b351
 800b074:	0800b351 	.word	0x0800b351
 800b078:	0800b351 	.word	0x0800b351
 800b07c:	0800b0a1 	.word	0x0800b0a1
 800b080:	0800b351 	.word	0x0800b351
 800b084:	0800b351 	.word	0x0800b351
 800b088:	0800b351 	.word	0x0800b351
 800b08c:	0800b20b 	.word	0x0800b20b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b090:	4bb6      	ldr	r3, [pc, #728]	@ (800b36c <HAL_RCC_GetSysClockFreq+0x34c>)
 800b092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 800b096:	e15f      	b.n	800b358 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b098:	4bb5      	ldr	r3, [pc, #724]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x350>)
 800b09a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800b09e:	e15b      	b.n	800b358 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b0a0:	4bb1      	ldr	r3, [pc, #708]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b0a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b0ac:	4bae      	ldr	r3, [pc, #696]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d031      	beq.n	800b11c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0b8:	4bab      	ldr	r3, [pc, #684]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	099b      	lsrs	r3, r3, #6
 800b0be:	2200      	movs	r2, #0
 800b0c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b0c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b0c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ca:	663b      	str	r3, [r7, #96]	@ 0x60
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	667b      	str	r3, [r7, #100]	@ 0x64
 800b0d0:	4ba7      	ldr	r3, [pc, #668]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x350>)
 800b0d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	fb03 f202 	mul.w	r2, r3, r2
 800b0dc:	2300      	movs	r3, #0
 800b0de:	4621      	mov	r1, r4
 800b0e0:	fb01 f303 	mul.w	r3, r1, r3
 800b0e4:	4413      	add	r3, r2
 800b0e6:	4aa2      	ldr	r2, [pc, #648]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x350>)
 800b0e8:	4621      	mov	r1, r4
 800b0ea:	fba1 1202 	umull	r1, r2, r1, r2
 800b0ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b0f0:	460a      	mov	r2, r1
 800b0f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 800b0f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800b0f6:	4413      	add	r3, r2
 800b0f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b0fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0fe:	2200      	movs	r2, #0
 800b100:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b102:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800b104:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800b108:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800b10c:	f7f5 fddc 	bl	8000cc8 <__aeabi_uldivmod>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	4613      	mov	r3, r2
 800b116:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b11a:	e064      	b.n	800b1e6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b11c:	4b92      	ldr	r3, [pc, #584]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	099b      	lsrs	r3, r3, #6
 800b122:	2200      	movs	r2, #0
 800b124:	653b      	str	r3, [r7, #80]	@ 0x50
 800b126:	657a      	str	r2, [r7, #84]	@ 0x54
 800b128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b130:	2300      	movs	r3, #0
 800b132:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b134:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800b138:	4622      	mov	r2, r4
 800b13a:	462b      	mov	r3, r5
 800b13c:	f04f 0000 	mov.w	r0, #0
 800b140:	f04f 0100 	mov.w	r1, #0
 800b144:	0159      	lsls	r1, r3, #5
 800b146:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b14a:	0150      	lsls	r0, r2, #5
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	4621      	mov	r1, r4
 800b152:	1a51      	subs	r1, r2, r1
 800b154:	6139      	str	r1, [r7, #16]
 800b156:	4629      	mov	r1, r5
 800b158:	eb63 0301 	sbc.w	r3, r3, r1
 800b15c:	617b      	str	r3, [r7, #20]
 800b15e:	f04f 0200 	mov.w	r2, #0
 800b162:	f04f 0300 	mov.w	r3, #0
 800b166:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b16a:	4659      	mov	r1, fp
 800b16c:	018b      	lsls	r3, r1, #6
 800b16e:	4651      	mov	r1, sl
 800b170:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b174:	4651      	mov	r1, sl
 800b176:	018a      	lsls	r2, r1, #6
 800b178:	4651      	mov	r1, sl
 800b17a:	ebb2 0801 	subs.w	r8, r2, r1
 800b17e:	4659      	mov	r1, fp
 800b180:	eb63 0901 	sbc.w	r9, r3, r1
 800b184:	f04f 0200 	mov.w	r2, #0
 800b188:	f04f 0300 	mov.w	r3, #0
 800b18c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b190:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b194:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b198:	4690      	mov	r8, r2
 800b19a:	4699      	mov	r9, r3
 800b19c:	4623      	mov	r3, r4
 800b19e:	eb18 0303 	adds.w	r3, r8, r3
 800b1a2:	60bb      	str	r3, [r7, #8]
 800b1a4:	462b      	mov	r3, r5
 800b1a6:	eb49 0303 	adc.w	r3, r9, r3
 800b1aa:	60fb      	str	r3, [r7, #12]
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	f04f 0300 	mov.w	r3, #0
 800b1b4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b1b8:	4629      	mov	r1, r5
 800b1ba:	028b      	lsls	r3, r1, #10
 800b1bc:	4621      	mov	r1, r4
 800b1be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	028a      	lsls	r2, r1, #10
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800b1d2:	647a      	str	r2, [r7, #68]	@ 0x44
 800b1d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800b1d8:	f7f5 fd76 	bl	8000cc8 <__aeabi_uldivmod>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b1e6:	4b60      	ldr	r3, [pc, #384]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	0c1b      	lsrs	r3, r3, #16
 800b1ec:	f003 0303 	and.w	r3, r3, #3
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 800b1f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b1fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b200:	fbb2 f3f3 	udiv	r3, r2, r3
 800b204:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800b208:	e0a6      	b.n	800b358 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b20a:	4b57      	ldr	r3, [pc, #348]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b216:	4b54      	ldr	r3, [pc, #336]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d02a      	beq.n	800b278 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b222:	4b51      	ldr	r3, [pc, #324]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	099b      	lsrs	r3, r3, #6
 800b228:	2200      	movs	r2, #0
 800b22a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b22c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b234:	2100      	movs	r1, #0
 800b236:	4b4e      	ldr	r3, [pc, #312]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x350>)
 800b238:	fb03 f201 	mul.w	r2, r3, r1
 800b23c:	2300      	movs	r3, #0
 800b23e:	fb00 f303 	mul.w	r3, r0, r3
 800b242:	4413      	add	r3, r2
 800b244:	4a4a      	ldr	r2, [pc, #296]	@ (800b370 <HAL_RCC_GetSysClockFreq+0x350>)
 800b246:	fba0 1202 	umull	r1, r2, r0, r2
 800b24a:	677a      	str	r2, [r7, #116]	@ 0x74
 800b24c:	460a      	mov	r2, r1
 800b24e:	673a      	str	r2, [r7, #112]	@ 0x70
 800b250:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b252:	4413      	add	r3, r2
 800b254:	677b      	str	r3, [r7, #116]	@ 0x74
 800b256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b25a:	2200      	movs	r2, #0
 800b25c:	633b      	str	r3, [r7, #48]	@ 0x30
 800b25e:	637a      	str	r2, [r7, #52]	@ 0x34
 800b260:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800b264:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800b268:	f7f5 fd2e 	bl	8000cc8 <__aeabi_uldivmod>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4613      	mov	r3, r2
 800b272:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b276:	e05b      	b.n	800b330 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b278:	4b3b      	ldr	r3, [pc, #236]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	099b      	lsrs	r3, r3, #6
 800b27e:	2200      	movs	r2, #0
 800b280:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b28a:	623b      	str	r3, [r7, #32]
 800b28c:	2300      	movs	r3, #0
 800b28e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b290:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b294:	4642      	mov	r2, r8
 800b296:	464b      	mov	r3, r9
 800b298:	f04f 0000 	mov.w	r0, #0
 800b29c:	f04f 0100 	mov.w	r1, #0
 800b2a0:	0159      	lsls	r1, r3, #5
 800b2a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b2a6:	0150      	lsls	r0, r2, #5
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4641      	mov	r1, r8
 800b2ae:	ebb2 0a01 	subs.w	sl, r2, r1
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	eb63 0b01 	sbc.w	fp, r3, r1
 800b2b8:	f04f 0200 	mov.w	r2, #0
 800b2bc:	f04f 0300 	mov.w	r3, #0
 800b2c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b2c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b2c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b2cc:	ebb2 040a 	subs.w	r4, r2, sl
 800b2d0:	eb63 050b 	sbc.w	r5, r3, fp
 800b2d4:	f04f 0200 	mov.w	r2, #0
 800b2d8:	f04f 0300 	mov.w	r3, #0
 800b2dc:	00eb      	lsls	r3, r5, #3
 800b2de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b2e2:	00e2      	lsls	r2, r4, #3
 800b2e4:	4614      	mov	r4, r2
 800b2e6:	461d      	mov	r5, r3
 800b2e8:	4643      	mov	r3, r8
 800b2ea:	18e3      	adds	r3, r4, r3
 800b2ec:	603b      	str	r3, [r7, #0]
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	eb45 0303 	adc.w	r3, r5, r3
 800b2f4:	607b      	str	r3, [r7, #4]
 800b2f6:	f04f 0200 	mov.w	r2, #0
 800b2fa:	f04f 0300 	mov.w	r3, #0
 800b2fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b302:	4629      	mov	r1, r5
 800b304:	028b      	lsls	r3, r1, #10
 800b306:	4621      	mov	r1, r4
 800b308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b30c:	4621      	mov	r1, r4
 800b30e:	028a      	lsls	r2, r1, #10
 800b310:	4610      	mov	r0, r2
 800b312:	4619      	mov	r1, r3
 800b314:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b318:	2200      	movs	r2, #0
 800b31a:	61bb      	str	r3, [r7, #24]
 800b31c:	61fa      	str	r2, [r7, #28]
 800b31e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b322:	f7f5 fcd1 	bl	8000cc8 <__aeabi_uldivmod>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4613      	mov	r3, r2
 800b32c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b330:	4b0d      	ldr	r3, [pc, #52]	@ (800b368 <HAL_RCC_GetSysClockFreq+0x348>)
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	0f1b      	lsrs	r3, r3, #28
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 800b33e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b342:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b346:	fbb2 f3f3 	udiv	r3, r2, r3
 800b34a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800b34e:	e003      	b.n	800b358 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b350:	4b06      	ldr	r3, [pc, #24]	@ (800b36c <HAL_RCC_GetSysClockFreq+0x34c>)
 800b352:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800b356:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b358:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3798      	adds	r7, #152	@ 0x98
 800b360:	46bd      	mov	sp, r7
 800b362:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b366:	bf00      	nop
 800b368:	40023800 	.word	0x40023800
 800b36c:	00f42400 	.word	0x00f42400
 800b370:	017d7840 	.word	0x017d7840

0800b374 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d101      	bne.n	800b386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e28d      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0301 	and.w	r3, r3, #1
 800b38e:	2b00      	cmp	r3, #0
 800b390:	f000 8083 	beq.w	800b49a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b394:	4b94      	ldr	r3, [pc, #592]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	f003 030c 	and.w	r3, r3, #12
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	d019      	beq.n	800b3d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b3a0:	4b91      	ldr	r3, [pc, #580]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b3a8:	2b08      	cmp	r3, #8
 800b3aa:	d106      	bne.n	800b3ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b3ac:	4b8e      	ldr	r3, [pc, #568]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3b8:	d00c      	beq.n	800b3d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3ba:	4b8b      	ldr	r3, [pc, #556]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b3bc:	689b      	ldr	r3, [r3, #8]
 800b3be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b3c2:	2b0c      	cmp	r3, #12
 800b3c4:	d112      	bne.n	800b3ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b3c6:	4b88      	ldr	r3, [pc, #544]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b3ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b3d2:	d10b      	bne.n	800b3ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3d4:	4b84      	ldr	r3, [pc, #528]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d05b      	beq.n	800b498 <HAL_RCC_OscConfig+0x124>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d157      	bne.n	800b498 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e25a      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b3f4:	d106      	bne.n	800b404 <HAL_RCC_OscConfig+0x90>
 800b3f6:	4b7c      	ldr	r3, [pc, #496]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a7b      	ldr	r2, [pc, #492]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b3fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b400:	6013      	str	r3, [r2, #0]
 800b402:	e01d      	b.n	800b440 <HAL_RCC_OscConfig+0xcc>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b40c:	d10c      	bne.n	800b428 <HAL_RCC_OscConfig+0xb4>
 800b40e:	4b76      	ldr	r3, [pc, #472]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4a75      	ldr	r2, [pc, #468]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b418:	6013      	str	r3, [r2, #0]
 800b41a:	4b73      	ldr	r3, [pc, #460]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a72      	ldr	r2, [pc, #456]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b424:	6013      	str	r3, [r2, #0]
 800b426:	e00b      	b.n	800b440 <HAL_RCC_OscConfig+0xcc>
 800b428:	4b6f      	ldr	r3, [pc, #444]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a6e      	ldr	r2, [pc, #440]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b42e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b432:	6013      	str	r3, [r2, #0]
 800b434:	4b6c      	ldr	r3, [pc, #432]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a6b      	ldr	r2, [pc, #428]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b43a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b43e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d013      	beq.n	800b470 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b448:	f7fd fd50 	bl	8008eec <HAL_GetTick>
 800b44c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b44e:	e008      	b.n	800b462 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b450:	f7fd fd4c 	bl	8008eec <HAL_GetTick>
 800b454:	4602      	mov	r2, r0
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	2b64      	cmp	r3, #100	@ 0x64
 800b45c:	d901      	bls.n	800b462 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b45e:	2303      	movs	r3, #3
 800b460:	e21f      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b462:	4b61      	ldr	r3, [pc, #388]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d0f0      	beq.n	800b450 <HAL_RCC_OscConfig+0xdc>
 800b46e:	e014      	b.n	800b49a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b470:	f7fd fd3c 	bl	8008eec <HAL_GetTick>
 800b474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b476:	e008      	b.n	800b48a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b478:	f7fd fd38 	bl	8008eec <HAL_GetTick>
 800b47c:	4602      	mov	r2, r0
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	2b64      	cmp	r3, #100	@ 0x64
 800b484:	d901      	bls.n	800b48a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b486:	2303      	movs	r3, #3
 800b488:	e20b      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b48a:	4b57      	ldr	r3, [pc, #348]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1f0      	bne.n	800b478 <HAL_RCC_OscConfig+0x104>
 800b496:	e000      	b.n	800b49a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0302 	and.w	r3, r3, #2
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d06f      	beq.n	800b586 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b4a6:	4b50      	ldr	r3, [pc, #320]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b4a8:	689b      	ldr	r3, [r3, #8]
 800b4aa:	f003 030c 	and.w	r3, r3, #12
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d017      	beq.n	800b4e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b4b2:	4b4d      	ldr	r3, [pc, #308]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b4ba:	2b08      	cmp	r3, #8
 800b4bc:	d105      	bne.n	800b4ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b4be:	4b4a      	ldr	r3, [pc, #296]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00b      	beq.n	800b4e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4ca:	4b47      	ldr	r3, [pc, #284]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b4cc:	689b      	ldr	r3, [r3, #8]
 800b4ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b4d2:	2b0c      	cmp	r3, #12
 800b4d4:	d11c      	bne.n	800b510 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b4d6:	4b44      	ldr	r3, [pc, #272]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d116      	bne.n	800b510 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4e2:	4b41      	ldr	r3, [pc, #260]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 0302 	and.w	r3, r3, #2
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d005      	beq.n	800b4fa <HAL_RCC_OscConfig+0x186>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d001      	beq.n	800b4fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e1d3      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4fa:	4b3b      	ldr	r3, [pc, #236]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	691b      	ldr	r3, [r3, #16]
 800b506:	00db      	lsls	r3, r3, #3
 800b508:	4937      	ldr	r1, [pc, #220]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b50a:	4313      	orrs	r3, r2
 800b50c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b50e:	e03a      	b.n	800b586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d020      	beq.n	800b55a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b518:	4b34      	ldr	r3, [pc, #208]	@ (800b5ec <HAL_RCC_OscConfig+0x278>)
 800b51a:	2201      	movs	r2, #1
 800b51c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b51e:	f7fd fce5 	bl	8008eec <HAL_GetTick>
 800b522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b524:	e008      	b.n	800b538 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b526:	f7fd fce1 	bl	8008eec <HAL_GetTick>
 800b52a:	4602      	mov	r2, r0
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	2b02      	cmp	r3, #2
 800b532:	d901      	bls.n	800b538 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b534:	2303      	movs	r3, #3
 800b536:	e1b4      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b538:	4b2b      	ldr	r3, [pc, #172]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0302 	and.w	r3, r3, #2
 800b540:	2b00      	cmp	r3, #0
 800b542:	d0f0      	beq.n	800b526 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b544:	4b28      	ldr	r3, [pc, #160]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	691b      	ldr	r3, [r3, #16]
 800b550:	00db      	lsls	r3, r3, #3
 800b552:	4925      	ldr	r1, [pc, #148]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b554:	4313      	orrs	r3, r2
 800b556:	600b      	str	r3, [r1, #0]
 800b558:	e015      	b.n	800b586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b55a:	4b24      	ldr	r3, [pc, #144]	@ (800b5ec <HAL_RCC_OscConfig+0x278>)
 800b55c:	2200      	movs	r2, #0
 800b55e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b560:	f7fd fcc4 	bl	8008eec <HAL_GetTick>
 800b564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b566:	e008      	b.n	800b57a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b568:	f7fd fcc0 	bl	8008eec <HAL_GetTick>
 800b56c:	4602      	mov	r2, r0
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	2b02      	cmp	r3, #2
 800b574:	d901      	bls.n	800b57a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e193      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b57a:	4b1b      	ldr	r3, [pc, #108]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f003 0302 	and.w	r3, r3, #2
 800b582:	2b00      	cmp	r3, #0
 800b584:	d1f0      	bne.n	800b568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f003 0308 	and.w	r3, r3, #8
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d036      	beq.n	800b600 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	695b      	ldr	r3, [r3, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d016      	beq.n	800b5c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b59a:	4b15      	ldr	r3, [pc, #84]	@ (800b5f0 <HAL_RCC_OscConfig+0x27c>)
 800b59c:	2201      	movs	r2, #1
 800b59e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5a0:	f7fd fca4 	bl	8008eec <HAL_GetTick>
 800b5a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5a6:	e008      	b.n	800b5ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b5a8:	f7fd fca0 	bl	8008eec <HAL_GetTick>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d901      	bls.n	800b5ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e173      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b5ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e8 <HAL_RCC_OscConfig+0x274>)
 800b5bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0f0      	beq.n	800b5a8 <HAL_RCC_OscConfig+0x234>
 800b5c6:	e01b      	b.n	800b600 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b5c8:	4b09      	ldr	r3, [pc, #36]	@ (800b5f0 <HAL_RCC_OscConfig+0x27c>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5ce:	f7fd fc8d 	bl	8008eec <HAL_GetTick>
 800b5d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5d4:	e00e      	b.n	800b5f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b5d6:	f7fd fc89 	bl	8008eec <HAL_GetTick>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d907      	bls.n	800b5f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b5e4:	2303      	movs	r3, #3
 800b5e6:	e15c      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
 800b5e8:	40023800 	.word	0x40023800
 800b5ec:	42470000 	.word	0x42470000
 800b5f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5f4:	4b8a      	ldr	r3, [pc, #552]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b5f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b5f8:	f003 0302 	and.w	r3, r3, #2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d1ea      	bne.n	800b5d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 0304 	and.w	r3, r3, #4
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 8097 	beq.w	800b73c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b60e:	2300      	movs	r3, #0
 800b610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b612:	4b83      	ldr	r3, [pc, #524]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10f      	bne.n	800b63e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b61e:	2300      	movs	r3, #0
 800b620:	60bb      	str	r3, [r7, #8]
 800b622:	4b7f      	ldr	r3, [pc, #508]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b626:	4a7e      	ldr	r2, [pc, #504]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b62c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b62e:	4b7c      	ldr	r3, [pc, #496]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b636:	60bb      	str	r3, [r7, #8]
 800b638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b63a:	2301      	movs	r3, #1
 800b63c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b63e:	4b79      	ldr	r3, [pc, #484]	@ (800b824 <HAL_RCC_OscConfig+0x4b0>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b646:	2b00      	cmp	r3, #0
 800b648:	d118      	bne.n	800b67c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b64a:	4b76      	ldr	r3, [pc, #472]	@ (800b824 <HAL_RCC_OscConfig+0x4b0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a75      	ldr	r2, [pc, #468]	@ (800b824 <HAL_RCC_OscConfig+0x4b0>)
 800b650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b656:	f7fd fc49 	bl	8008eec <HAL_GetTick>
 800b65a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b65c:	e008      	b.n	800b670 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b65e:	f7fd fc45 	bl	8008eec <HAL_GetTick>
 800b662:	4602      	mov	r2, r0
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	2b02      	cmp	r3, #2
 800b66a:	d901      	bls.n	800b670 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b66c:	2303      	movs	r3, #3
 800b66e:	e118      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b670:	4b6c      	ldr	r3, [pc, #432]	@ (800b824 <HAL_RCC_OscConfig+0x4b0>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d0f0      	beq.n	800b65e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d106      	bne.n	800b692 <HAL_RCC_OscConfig+0x31e>
 800b684:	4b66      	ldr	r3, [pc, #408]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b688:	4a65      	ldr	r2, [pc, #404]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b68a:	f043 0301 	orr.w	r3, r3, #1
 800b68e:	6713      	str	r3, [r2, #112]	@ 0x70
 800b690:	e01c      	b.n	800b6cc <HAL_RCC_OscConfig+0x358>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	2b05      	cmp	r3, #5
 800b698:	d10c      	bne.n	800b6b4 <HAL_RCC_OscConfig+0x340>
 800b69a:	4b61      	ldr	r3, [pc, #388]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b69c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b69e:	4a60      	ldr	r2, [pc, #384]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b6a0:	f043 0304 	orr.w	r3, r3, #4
 800b6a4:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6a6:	4b5e      	ldr	r3, [pc, #376]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b6a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6aa:	4a5d      	ldr	r2, [pc, #372]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b6ac:	f043 0301 	orr.w	r3, r3, #1
 800b6b0:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6b2:	e00b      	b.n	800b6cc <HAL_RCC_OscConfig+0x358>
 800b6b4:	4b5a      	ldr	r3, [pc, #360]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b6b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6b8:	4a59      	ldr	r2, [pc, #356]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b6ba:	f023 0301 	bic.w	r3, r3, #1
 800b6be:	6713      	str	r3, [r2, #112]	@ 0x70
 800b6c0:	4b57      	ldr	r3, [pc, #348]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b6c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6c4:	4a56      	ldr	r2, [pc, #344]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b6c6:	f023 0304 	bic.w	r3, r3, #4
 800b6ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d015      	beq.n	800b700 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6d4:	f7fd fc0a 	bl	8008eec <HAL_GetTick>
 800b6d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6da:	e00a      	b.n	800b6f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b6dc:	f7fd fc06 	bl	8008eec <HAL_GetTick>
 800b6e0:	4602      	mov	r2, r0
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	1ad3      	subs	r3, r2, r3
 800b6e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d901      	bls.n	800b6f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b6ee:	2303      	movs	r3, #3
 800b6f0:	e0d7      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6f2:	4b4b      	ldr	r3, [pc, #300]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b6f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6f6:	f003 0302 	and.w	r3, r3, #2
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d0ee      	beq.n	800b6dc <HAL_RCC_OscConfig+0x368>
 800b6fe:	e014      	b.n	800b72a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b700:	f7fd fbf4 	bl	8008eec <HAL_GetTick>
 800b704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b706:	e00a      	b.n	800b71e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b708:	f7fd fbf0 	bl	8008eec <HAL_GetTick>
 800b70c:	4602      	mov	r2, r0
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b716:	4293      	cmp	r3, r2
 800b718:	d901      	bls.n	800b71e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b71a:	2303      	movs	r3, #3
 800b71c:	e0c1      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b71e:	4b40      	ldr	r3, [pc, #256]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b722:	f003 0302 	and.w	r3, r3, #2
 800b726:	2b00      	cmp	r3, #0
 800b728:	d1ee      	bne.n	800b708 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d105      	bne.n	800b73c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b730:	4b3b      	ldr	r3, [pc, #236]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b734:	4a3a      	ldr	r2, [pc, #232]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b73a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 80ad 	beq.w	800b8a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b746:	4b36      	ldr	r3, [pc, #216]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	f003 030c 	and.w	r3, r3, #12
 800b74e:	2b08      	cmp	r3, #8
 800b750:	d060      	beq.n	800b814 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	699b      	ldr	r3, [r3, #24]
 800b756:	2b02      	cmp	r3, #2
 800b758:	d145      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b75a:	4b33      	ldr	r3, [pc, #204]	@ (800b828 <HAL_RCC_OscConfig+0x4b4>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b760:	f7fd fbc4 	bl	8008eec <HAL_GetTick>
 800b764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b766:	e008      	b.n	800b77a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b768:	f7fd fbc0 	bl	8008eec <HAL_GetTick>
 800b76c:	4602      	mov	r2, r0
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	1ad3      	subs	r3, r2, r3
 800b772:	2b02      	cmp	r3, #2
 800b774:	d901      	bls.n	800b77a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b776:	2303      	movs	r3, #3
 800b778:	e093      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b77a:	4b29      	ldr	r3, [pc, #164]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1f0      	bne.n	800b768 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	69da      	ldr	r2, [r3, #28]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	431a      	orrs	r2, r3
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b794:	019b      	lsls	r3, r3, #6
 800b796:	431a      	orrs	r2, r3
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b79c:	085b      	lsrs	r3, r3, #1
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	041b      	lsls	r3, r3, #16
 800b7a2:	431a      	orrs	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a8:	061b      	lsls	r3, r3, #24
 800b7aa:	431a      	orrs	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7b0:	071b      	lsls	r3, r3, #28
 800b7b2:	491b      	ldr	r1, [pc, #108]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b7b8:	4b1b      	ldr	r3, [pc, #108]	@ (800b828 <HAL_RCC_OscConfig+0x4b4>)
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7be:	f7fd fb95 	bl	8008eec <HAL_GetTick>
 800b7c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7c4:	e008      	b.n	800b7d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7c6:	f7fd fb91 	bl	8008eec <HAL_GetTick>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	1ad3      	subs	r3, r2, r3
 800b7d0:	2b02      	cmp	r3, #2
 800b7d2:	d901      	bls.n	800b7d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b7d4:	2303      	movs	r3, #3
 800b7d6:	e064      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b7d8:	4b11      	ldr	r3, [pc, #68]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0f0      	beq.n	800b7c6 <HAL_RCC_OscConfig+0x452>
 800b7e4:	e05c      	b.n	800b8a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7e6:	4b10      	ldr	r3, [pc, #64]	@ (800b828 <HAL_RCC_OscConfig+0x4b4>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7ec:	f7fd fb7e 	bl	8008eec <HAL_GetTick>
 800b7f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b7f2:	e008      	b.n	800b806 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b7f4:	f7fd fb7a 	bl	8008eec <HAL_GetTick>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d901      	bls.n	800b806 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b802:	2303      	movs	r3, #3
 800b804:	e04d      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b806:	4b06      	ldr	r3, [pc, #24]	@ (800b820 <HAL_RCC_OscConfig+0x4ac>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d1f0      	bne.n	800b7f4 <HAL_RCC_OscConfig+0x480>
 800b812:	e045      	b.n	800b8a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d107      	bne.n	800b82c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b81c:	2301      	movs	r3, #1
 800b81e:	e040      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
 800b820:	40023800 	.word	0x40023800
 800b824:	40007000 	.word	0x40007000
 800b828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b82c:	4b1f      	ldr	r3, [pc, #124]	@ (800b8ac <HAL_RCC_OscConfig+0x538>)
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	699b      	ldr	r3, [r3, #24]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d030      	beq.n	800b89c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b844:	429a      	cmp	r2, r3
 800b846:	d129      	bne.n	800b89c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b852:	429a      	cmp	r2, r3
 800b854:	d122      	bne.n	800b89c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b85c:	4013      	ands	r3, r2
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b864:	4293      	cmp	r3, r2
 800b866:	d119      	bne.n	800b89c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b872:	085b      	lsrs	r3, r3, #1
 800b874:	3b01      	subs	r3, #1
 800b876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b878:	429a      	cmp	r2, r3
 800b87a:	d10f      	bne.n	800b89c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b888:	429a      	cmp	r2, r3
 800b88a:	d107      	bne.n	800b89c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b896:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b898:	429a      	cmp	r2, r3
 800b89a:	d001      	beq.n	800b8a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e000      	b.n	800b8a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	40023800 	.word	0x40023800

0800b8b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d101      	bne.n	800b8c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e041      	b.n	800b946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d106      	bne.n	800b8dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f7fc fff2 	bl	80088c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2202      	movs	r2, #2
 800b8e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	3304      	adds	r3, #4
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	f000 fd8c 	bl	800c40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2201      	movs	r2, #1
 800b900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2201      	movs	r2, #1
 800b908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2201      	movs	r2, #1
 800b920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2201      	movs	r2, #1
 800b930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2201      	movs	r2, #1
 800b938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2201      	movs	r2, #1
 800b940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
	...

0800b950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	2b01      	cmp	r3, #1
 800b962:	d001      	beq.n	800b968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b964:	2301      	movs	r3, #1
 800b966:	e04e      	b.n	800ba06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2202      	movs	r2, #2
 800b96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68da      	ldr	r2, [r3, #12]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f042 0201 	orr.w	r2, r2, #1
 800b97e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a23      	ldr	r2, [pc, #140]	@ (800ba14 <HAL_TIM_Base_Start_IT+0xc4>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d022      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b992:	d01d      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a1f      	ldr	r2, [pc, #124]	@ (800ba18 <HAL_TIM_Base_Start_IT+0xc8>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d018      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a1e      	ldr	r2, [pc, #120]	@ (800ba1c <HAL_TIM_Base_Start_IT+0xcc>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d013      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a1c      	ldr	r2, [pc, #112]	@ (800ba20 <HAL_TIM_Base_Start_IT+0xd0>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d00e      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a1b      	ldr	r2, [pc, #108]	@ (800ba24 <HAL_TIM_Base_Start_IT+0xd4>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d009      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a19      	ldr	r2, [pc, #100]	@ (800ba28 <HAL_TIM_Base_Start_IT+0xd8>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d004      	beq.n	800b9d0 <HAL_TIM_Base_Start_IT+0x80>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	4a18      	ldr	r2, [pc, #96]	@ (800ba2c <HAL_TIM_Base_Start_IT+0xdc>)
 800b9cc:	4293      	cmp	r3, r2
 800b9ce:	d111      	bne.n	800b9f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	f003 0307 	and.w	r3, r3, #7
 800b9da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2b06      	cmp	r3, #6
 800b9e0:	d010      	beq.n	800ba04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f042 0201 	orr.w	r2, r2, #1
 800b9f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9f2:	e007      	b.n	800ba04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f042 0201 	orr.w	r2, r2, #1
 800ba02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3714      	adds	r7, #20
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop
 800ba14:	40010000 	.word	0x40010000
 800ba18:	40000400 	.word	0x40000400
 800ba1c:	40000800 	.word	0x40000800
 800ba20:	40000c00 	.word	0x40000c00
 800ba24:	40010400 	.word	0x40010400
 800ba28:	40014000 	.word	0x40014000
 800ba2c:	40001800 	.word	0x40001800

0800ba30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d101      	bne.n	800ba42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e041      	b.n	800bac6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d106      	bne.n	800ba5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7fc ff12 	bl	8008880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	3304      	adds	r3, #4
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	4610      	mov	r0, r2
 800ba70:	f000 fccc 	bl	800c40c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2201      	movs	r2, #1
 800ba78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2201      	movs	r2, #1
 800ba80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2201      	movs	r2, #1
 800bac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
	...

0800bad0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b084      	sub	sp, #16
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d109      	bne.n	800baf4 <HAL_TIM_PWM_Start+0x24>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	2b01      	cmp	r3, #1
 800baea:	bf14      	ite	ne
 800baec:	2301      	movne	r3, #1
 800baee:	2300      	moveq	r3, #0
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	e022      	b.n	800bb3a <HAL_TIM_PWM_Start+0x6a>
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	d109      	bne.n	800bb0e <HAL_TIM_PWM_Start+0x3e>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	bf14      	ite	ne
 800bb06:	2301      	movne	r3, #1
 800bb08:	2300      	moveq	r3, #0
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	e015      	b.n	800bb3a <HAL_TIM_PWM_Start+0x6a>
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b08      	cmp	r3, #8
 800bb12:	d109      	bne.n	800bb28 <HAL_TIM_PWM_Start+0x58>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	bf14      	ite	ne
 800bb20:	2301      	movne	r3, #1
 800bb22:	2300      	moveq	r3, #0
 800bb24:	b2db      	uxtb	r3, r3
 800bb26:	e008      	b.n	800bb3a <HAL_TIM_PWM_Start+0x6a>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	bf14      	ite	ne
 800bb34:	2301      	movne	r3, #1
 800bb36:	2300      	moveq	r3, #0
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d001      	beq.n	800bb42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800bb3e:	2301      	movs	r3, #1
 800bb40:	e07c      	b.n	800bc3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d104      	bne.n	800bb52 <HAL_TIM_PWM_Start+0x82>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2202      	movs	r2, #2
 800bb4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb50:	e013      	b.n	800bb7a <HAL_TIM_PWM_Start+0xaa>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	2b04      	cmp	r3, #4
 800bb56:	d104      	bne.n	800bb62 <HAL_TIM_PWM_Start+0x92>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2202      	movs	r2, #2
 800bb5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb60:	e00b      	b.n	800bb7a <HAL_TIM_PWM_Start+0xaa>
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	2b08      	cmp	r3, #8
 800bb66:	d104      	bne.n	800bb72 <HAL_TIM_PWM_Start+0xa2>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb70:	e003      	b.n	800bb7a <HAL_TIM_PWM_Start+0xaa>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2202      	movs	r2, #2
 800bb76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	6839      	ldr	r1, [r7, #0]
 800bb82:	4618      	mov	r0, r3
 800bb84:	f000 ff38 	bl	800c9f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a2d      	ldr	r2, [pc, #180]	@ (800bc44 <HAL_TIM_PWM_Start+0x174>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d004      	beq.n	800bb9c <HAL_TIM_PWM_Start+0xcc>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a2c      	ldr	r2, [pc, #176]	@ (800bc48 <HAL_TIM_PWM_Start+0x178>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d101      	bne.n	800bba0 <HAL_TIM_PWM_Start+0xd0>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e000      	b.n	800bba2 <HAL_TIM_PWM_Start+0xd2>
 800bba0:	2300      	movs	r3, #0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d007      	beq.n	800bbb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bbb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a22      	ldr	r2, [pc, #136]	@ (800bc44 <HAL_TIM_PWM_Start+0x174>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d022      	beq.n	800bc06 <HAL_TIM_PWM_Start+0x136>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbc8:	d01d      	beq.n	800bc06 <HAL_TIM_PWM_Start+0x136>
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	4a1f      	ldr	r2, [pc, #124]	@ (800bc4c <HAL_TIM_PWM_Start+0x17c>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d018      	beq.n	800bc06 <HAL_TIM_PWM_Start+0x136>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a1d      	ldr	r2, [pc, #116]	@ (800bc50 <HAL_TIM_PWM_Start+0x180>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d013      	beq.n	800bc06 <HAL_TIM_PWM_Start+0x136>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a1c      	ldr	r2, [pc, #112]	@ (800bc54 <HAL_TIM_PWM_Start+0x184>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d00e      	beq.n	800bc06 <HAL_TIM_PWM_Start+0x136>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a16      	ldr	r2, [pc, #88]	@ (800bc48 <HAL_TIM_PWM_Start+0x178>)
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	d009      	beq.n	800bc06 <HAL_TIM_PWM_Start+0x136>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	4a18      	ldr	r2, [pc, #96]	@ (800bc58 <HAL_TIM_PWM_Start+0x188>)
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d004      	beq.n	800bc06 <HAL_TIM_PWM_Start+0x136>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a16      	ldr	r2, [pc, #88]	@ (800bc5c <HAL_TIM_PWM_Start+0x18c>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d111      	bne.n	800bc2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	f003 0307 	and.w	r3, r3, #7
 800bc10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2b06      	cmp	r3, #6
 800bc16:	d010      	beq.n	800bc3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f042 0201 	orr.w	r2, r2, #1
 800bc26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc28:	e007      	b.n	800bc3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f042 0201 	orr.w	r2, r2, #1
 800bc38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc3a:	2300      	movs	r3, #0
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3710      	adds	r7, #16
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	40010000 	.word	0x40010000
 800bc48:	40010400 	.word	0x40010400
 800bc4c:	40000400 	.word	0x40000400
 800bc50:	40000800 	.word	0x40000800
 800bc54:	40000c00 	.word	0x40000c00
 800bc58:	40014000 	.word	0x40014000
 800bc5c:	40001800 	.word	0x40001800

0800bc60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d101      	bne.n	800bc74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e097      	b.n	800bda4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc7a:	b2db      	uxtb	r3, r3
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d106      	bne.n	800bc8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7fc fd13 	bl	80086b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2202      	movs	r2, #2
 800bc92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	689b      	ldr	r3, [r3, #8]
 800bc9c:	687a      	ldr	r2, [r7, #4]
 800bc9e:	6812      	ldr	r2, [r2, #0]
 800bca0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bca4:	f023 0307 	bic.w	r3, r3, #7
 800bca8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681a      	ldr	r2, [r3, #0]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	3304      	adds	r3, #4
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4610      	mov	r0, r2
 800bcb6:	f000 fba9 	bl	800c40c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	6a1b      	ldr	r3, [r3, #32]
 800bcd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bce2:	f023 0303 	bic.w	r3, r3, #3
 800bce6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	689a      	ldr	r2, [r3, #8]
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	021b      	lsls	r3, r3, #8
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800bd00:	f023 030c 	bic.w	r3, r3, #12
 800bd04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bd0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bd10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	68da      	ldr	r2, [r3, #12]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	69db      	ldr	r3, [r3, #28]
 800bd1a:	021b      	lsls	r3, r3, #8
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	4313      	orrs	r3, r2
 800bd22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	691b      	ldr	r3, [r3, #16]
 800bd28:	011a      	lsls	r2, r3, #4
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	6a1b      	ldr	r3, [r3, #32]
 800bd2e:	031b      	lsls	r3, r3, #12
 800bd30:	4313      	orrs	r3, r2
 800bd32:	693a      	ldr	r2, [r7, #16]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bd3e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800bd46:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	695b      	ldr	r3, [r3, #20]
 800bd50:	011b      	lsls	r3, r3, #4
 800bd52:	4313      	orrs	r3, r2
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	693a      	ldr	r2, [r7, #16]
 800bd68:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	68fa      	ldr	r2, [r7, #12]
 800bd70:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2201      	movs	r2, #1
 800bd96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2201      	movs	r2, #1
 800bd9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
 800bdb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bdbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bdc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bdcc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bdd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d110      	bne.n	800bdfe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d102      	bne.n	800bde8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bde2:	7b7b      	ldrb	r3, [r7, #13]
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	d001      	beq.n	800bdec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	e069      	b.n	800bec0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2202      	movs	r2, #2
 800bdf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bdfc:	e031      	b.n	800be62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2b04      	cmp	r3, #4
 800be02:	d110      	bne.n	800be26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800be04:	7bbb      	ldrb	r3, [r7, #14]
 800be06:	2b01      	cmp	r3, #1
 800be08:	d102      	bne.n	800be10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800be0a:	7b3b      	ldrb	r3, [r7, #12]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d001      	beq.n	800be14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e055      	b.n	800bec0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2202      	movs	r2, #2
 800be18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2202      	movs	r2, #2
 800be20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800be24:	e01d      	b.n	800be62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be26:	7bfb      	ldrb	r3, [r7, #15]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d108      	bne.n	800be3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800be2c:	7bbb      	ldrb	r3, [r7, #14]
 800be2e:	2b01      	cmp	r3, #1
 800be30:	d105      	bne.n	800be3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800be32:	7b7b      	ldrb	r3, [r7, #13]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d102      	bne.n	800be3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800be38:	7b3b      	ldrb	r3, [r7, #12]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d001      	beq.n	800be42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	e03e      	b.n	800bec0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2202      	movs	r2, #2
 800be46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2202      	movs	r2, #2
 800be4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2202      	movs	r2, #2
 800be56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2202      	movs	r2, #2
 800be5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d003      	beq.n	800be70 <HAL_TIM_Encoder_Start+0xc4>
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	2b04      	cmp	r3, #4
 800be6c:	d008      	beq.n	800be80 <HAL_TIM_Encoder_Start+0xd4>
 800be6e:	e00f      	b.n	800be90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	2201      	movs	r2, #1
 800be76:	2100      	movs	r1, #0
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 fdbd 	bl	800c9f8 <TIM_CCxChannelCmd>
      break;
 800be7e:	e016      	b.n	800beae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2201      	movs	r2, #1
 800be86:	2104      	movs	r1, #4
 800be88:	4618      	mov	r0, r3
 800be8a:	f000 fdb5 	bl	800c9f8 <TIM_CCxChannelCmd>
      break;
 800be8e:	e00e      	b.n	800beae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2201      	movs	r2, #1
 800be96:	2100      	movs	r1, #0
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fdad 	bl	800c9f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2201      	movs	r2, #1
 800bea4:	2104      	movs	r1, #4
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fda6 	bl	800c9f8 <TIM_CCxChannelCmd>
      break;
 800beac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f042 0201 	orr.w	r2, r2, #1
 800bebc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3710      	adds	r7, #16
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	f003 0302 	and.w	r3, r3, #2
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d020      	beq.n	800bf2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f003 0302 	and.w	r3, r3, #2
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d01b      	beq.n	800bf2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f06f 0202 	mvn.w	r2, #2
 800befc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2201      	movs	r2, #1
 800bf02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	f003 0303 	and.w	r3, r3, #3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fa5b 	bl	800c3ce <HAL_TIM_IC_CaptureCallback>
 800bf18:	e005      	b.n	800bf26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fa4d 	bl	800c3ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fa5e 	bl	800c3e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	f003 0304 	and.w	r3, r3, #4
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d020      	beq.n	800bf78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f003 0304 	and.w	r3, r3, #4
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01b      	beq.n	800bf78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f06f 0204 	mvn.w	r2, #4
 800bf48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2202      	movs	r2, #2
 800bf4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	699b      	ldr	r3, [r3, #24]
 800bf56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fa35 	bl	800c3ce <HAL_TIM_IC_CaptureCallback>
 800bf64:	e005      	b.n	800bf72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa27 	bl	800c3ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fa38 	bl	800c3e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f003 0308 	and.w	r3, r3, #8
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d020      	beq.n	800bfc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f003 0308 	and.w	r3, r3, #8
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d01b      	beq.n	800bfc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f06f 0208 	mvn.w	r2, #8
 800bf94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2204      	movs	r2, #4
 800bf9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	f003 0303 	and.w	r3, r3, #3
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fa0f 	bl	800c3ce <HAL_TIM_IC_CaptureCallback>
 800bfb0:	e005      	b.n	800bfbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fa01 	bl	800c3ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa12 	bl	800c3e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	f003 0310 	and.w	r3, r3, #16
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d020      	beq.n	800c010 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f003 0310 	and.w	r3, r3, #16
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01b      	beq.n	800c010 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f06f 0210 	mvn.w	r2, #16
 800bfe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2208      	movs	r2, #8
 800bfe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	69db      	ldr	r3, [r3, #28]
 800bfee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 f9e9 	bl	800c3ce <HAL_TIM_IC_CaptureCallback>
 800bffc:	e005      	b.n	800c00a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 f9db 	bl	800c3ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f9ec 	bl	800c3e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	2200      	movs	r2, #0
 800c00e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00c      	beq.n	800c034 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f003 0301 	and.w	r3, r3, #1
 800c020:	2b00      	cmp	r3, #0
 800c022:	d007      	beq.n	800c034 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f06f 0201 	mvn.w	r2, #1
 800c02c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7f9 fe06 	bl	8005c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00c      	beq.n	800c058 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c044:	2b00      	cmp	r3, #0
 800c046:	d007      	beq.n	800c058 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c052:	6878      	ldr	r0, [r7, #4]
 800c054:	f000 fd7c 	bl	800cb50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00c      	beq.n	800c07c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d007      	beq.n	800c07c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 f9bd 	bl	800c3f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00c      	beq.n	800c0a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f003 0320 	and.w	r3, r3, #32
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d007      	beq.n	800c0a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	f06f 0220 	mvn.w	r2, #32
 800c098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 fd4e 	bl	800cb3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c0a0:	bf00      	nop
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b086      	sub	sp, #24
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d101      	bne.n	800c0c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c0c2:	2302      	movs	r3, #2
 800c0c4:	e0ae      	b.n	800c224 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2201      	movs	r2, #1
 800c0ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b0c      	cmp	r3, #12
 800c0d2:	f200 809f 	bhi.w	800c214 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c0d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0dc:	0800c111 	.word	0x0800c111
 800c0e0:	0800c215 	.word	0x0800c215
 800c0e4:	0800c215 	.word	0x0800c215
 800c0e8:	0800c215 	.word	0x0800c215
 800c0ec:	0800c151 	.word	0x0800c151
 800c0f0:	0800c215 	.word	0x0800c215
 800c0f4:	0800c215 	.word	0x0800c215
 800c0f8:	0800c215 	.word	0x0800c215
 800c0fc:	0800c193 	.word	0x0800c193
 800c100:	0800c215 	.word	0x0800c215
 800c104:	0800c215 	.word	0x0800c215
 800c108:	0800c215 	.word	0x0800c215
 800c10c:	0800c1d3 	.word	0x0800c1d3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68b9      	ldr	r1, [r7, #8]
 800c116:	4618      	mov	r0, r3
 800c118:	f000 fa24 	bl	800c564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	699a      	ldr	r2, [r3, #24]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f042 0208 	orr.w	r2, r2, #8
 800c12a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	699a      	ldr	r2, [r3, #24]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f022 0204 	bic.w	r2, r2, #4
 800c13a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	6999      	ldr	r1, [r3, #24]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	691a      	ldr	r2, [r3, #16]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	430a      	orrs	r2, r1
 800c14c:	619a      	str	r2, [r3, #24]
      break;
 800c14e:	e064      	b.n	800c21a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68b9      	ldr	r1, [r7, #8]
 800c156:	4618      	mov	r0, r3
 800c158:	f000 fa74 	bl	800c644 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	699a      	ldr	r2, [r3, #24]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c16a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	699a      	ldr	r2, [r3, #24]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c17a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	6999      	ldr	r1, [r3, #24]
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	691b      	ldr	r3, [r3, #16]
 800c186:	021a      	lsls	r2, r3, #8
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	430a      	orrs	r2, r1
 800c18e:	619a      	str	r2, [r3, #24]
      break;
 800c190:	e043      	b.n	800c21a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68b9      	ldr	r1, [r7, #8]
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 fac9 	bl	800c730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	69da      	ldr	r2, [r3, #28]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f042 0208 	orr.w	r2, r2, #8
 800c1ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69da      	ldr	r2, [r3, #28]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f022 0204 	bic.w	r2, r2, #4
 800c1bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	69d9      	ldr	r1, [r3, #28]
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	691a      	ldr	r2, [r3, #16]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	430a      	orrs	r2, r1
 800c1ce:	61da      	str	r2, [r3, #28]
      break;
 800c1d0:	e023      	b.n	800c21a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	68b9      	ldr	r1, [r7, #8]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fb1d 	bl	800c818 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	69da      	ldr	r2, [r3, #28]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c1ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	69da      	ldr	r2, [r3, #28]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c1fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	69d9      	ldr	r1, [r3, #28]
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	691b      	ldr	r3, [r3, #16]
 800c208:	021a      	lsls	r2, r3, #8
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	430a      	orrs	r2, r1
 800c210:	61da      	str	r2, [r3, #28]
      break;
 800c212:	e002      	b.n	800c21a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c214:	2301      	movs	r3, #1
 800c216:	75fb      	strb	r3, [r7, #23]
      break;
 800c218:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c222:	7dfb      	ldrb	r3, [r7, #23]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3718      	adds	r7, #24
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c240:	2b01      	cmp	r3, #1
 800c242:	d101      	bne.n	800c248 <HAL_TIM_ConfigClockSource+0x1c>
 800c244:	2302      	movs	r3, #2
 800c246:	e0b4      	b.n	800c3b2 <HAL_TIM_ConfigClockSource+0x186>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2202      	movs	r2, #2
 800c254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c268:	68bb      	ldr	r3, [r7, #8]
 800c26a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c26e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68ba      	ldr	r2, [r7, #8]
 800c276:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c280:	d03e      	beq.n	800c300 <HAL_TIM_ConfigClockSource+0xd4>
 800c282:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c286:	f200 8087 	bhi.w	800c398 <HAL_TIM_ConfigClockSource+0x16c>
 800c28a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c28e:	f000 8086 	beq.w	800c39e <HAL_TIM_ConfigClockSource+0x172>
 800c292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c296:	d87f      	bhi.n	800c398 <HAL_TIM_ConfigClockSource+0x16c>
 800c298:	2b70      	cmp	r3, #112	@ 0x70
 800c29a:	d01a      	beq.n	800c2d2 <HAL_TIM_ConfigClockSource+0xa6>
 800c29c:	2b70      	cmp	r3, #112	@ 0x70
 800c29e:	d87b      	bhi.n	800c398 <HAL_TIM_ConfigClockSource+0x16c>
 800c2a0:	2b60      	cmp	r3, #96	@ 0x60
 800c2a2:	d050      	beq.n	800c346 <HAL_TIM_ConfigClockSource+0x11a>
 800c2a4:	2b60      	cmp	r3, #96	@ 0x60
 800c2a6:	d877      	bhi.n	800c398 <HAL_TIM_ConfigClockSource+0x16c>
 800c2a8:	2b50      	cmp	r3, #80	@ 0x50
 800c2aa:	d03c      	beq.n	800c326 <HAL_TIM_ConfigClockSource+0xfa>
 800c2ac:	2b50      	cmp	r3, #80	@ 0x50
 800c2ae:	d873      	bhi.n	800c398 <HAL_TIM_ConfigClockSource+0x16c>
 800c2b0:	2b40      	cmp	r3, #64	@ 0x40
 800c2b2:	d058      	beq.n	800c366 <HAL_TIM_ConfigClockSource+0x13a>
 800c2b4:	2b40      	cmp	r3, #64	@ 0x40
 800c2b6:	d86f      	bhi.n	800c398 <HAL_TIM_ConfigClockSource+0x16c>
 800c2b8:	2b30      	cmp	r3, #48	@ 0x30
 800c2ba:	d064      	beq.n	800c386 <HAL_TIM_ConfigClockSource+0x15a>
 800c2bc:	2b30      	cmp	r3, #48	@ 0x30
 800c2be:	d86b      	bhi.n	800c398 <HAL_TIM_ConfigClockSource+0x16c>
 800c2c0:	2b20      	cmp	r3, #32
 800c2c2:	d060      	beq.n	800c386 <HAL_TIM_ConfigClockSource+0x15a>
 800c2c4:	2b20      	cmp	r3, #32
 800c2c6:	d867      	bhi.n	800c398 <HAL_TIM_ConfigClockSource+0x16c>
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d05c      	beq.n	800c386 <HAL_TIM_ConfigClockSource+0x15a>
 800c2cc:	2b10      	cmp	r3, #16
 800c2ce:	d05a      	beq.n	800c386 <HAL_TIM_ConfigClockSource+0x15a>
 800c2d0:	e062      	b.n	800c398 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c2e2:	f000 fb69 	bl	800c9b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c2f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	609a      	str	r2, [r3, #8]
      break;
 800c2fe:	e04f      	b.n	800c3a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c310:	f000 fb52 	bl	800c9b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	689a      	ldr	r2, [r3, #8]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c322:	609a      	str	r2, [r3, #8]
      break;
 800c324:	e03c      	b.n	800c3a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c332:	461a      	mov	r2, r3
 800c334:	f000 fac6 	bl	800c8c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	2150      	movs	r1, #80	@ 0x50
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 fb1f 	bl	800c982 <TIM_ITRx_SetConfig>
      break;
 800c344:	e02c      	b.n	800c3a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c352:	461a      	mov	r2, r3
 800c354:	f000 fae5 	bl	800c922 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2160      	movs	r1, #96	@ 0x60
 800c35e:	4618      	mov	r0, r3
 800c360:	f000 fb0f 	bl	800c982 <TIM_ITRx_SetConfig>
      break;
 800c364:	e01c      	b.n	800c3a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c372:	461a      	mov	r2, r3
 800c374:	f000 faa6 	bl	800c8c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2140      	movs	r1, #64	@ 0x40
 800c37e:	4618      	mov	r0, r3
 800c380:	f000 faff 	bl	800c982 <TIM_ITRx_SetConfig>
      break;
 800c384:	e00c      	b.n	800c3a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4619      	mov	r1, r3
 800c390:	4610      	mov	r0, r2
 800c392:	f000 faf6 	bl	800c982 <TIM_ITRx_SetConfig>
      break;
 800c396:	e003      	b.n	800c3a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c398:	2301      	movs	r3, #1
 800c39a:	73fb      	strb	r3, [r7, #15]
      break;
 800c39c:	e000      	b.n	800c3a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c39e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b083      	sub	sp, #12
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b083      	sub	sp, #12
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c3d6:	bf00      	nop
 800c3d8:	370c      	adds	r7, #12
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr

0800c3e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c3e2:	b480      	push	{r7}
 800c3e4:	b083      	sub	sp, #12
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c3ea:	bf00      	nop
 800c3ec:	370c      	adds	r7, #12
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f4:	4770      	bx	lr

0800c3f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c3f6:	b480      	push	{r7}
 800c3f8:	b083      	sub	sp, #12
 800c3fa:	af00      	add	r7, sp, #0
 800c3fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c3fe:	bf00      	nop
 800c400:	370c      	adds	r7, #12
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
	...

0800c40c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a46      	ldr	r2, [pc, #280]	@ (800c538 <TIM_Base_SetConfig+0x12c>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d013      	beq.n	800c44c <TIM_Base_SetConfig+0x40>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c42a:	d00f      	beq.n	800c44c <TIM_Base_SetConfig+0x40>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a43      	ldr	r2, [pc, #268]	@ (800c53c <TIM_Base_SetConfig+0x130>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d00b      	beq.n	800c44c <TIM_Base_SetConfig+0x40>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a42      	ldr	r2, [pc, #264]	@ (800c540 <TIM_Base_SetConfig+0x134>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d007      	beq.n	800c44c <TIM_Base_SetConfig+0x40>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a41      	ldr	r2, [pc, #260]	@ (800c544 <TIM_Base_SetConfig+0x138>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d003      	beq.n	800c44c <TIM_Base_SetConfig+0x40>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a40      	ldr	r2, [pc, #256]	@ (800c548 <TIM_Base_SetConfig+0x13c>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d108      	bne.n	800c45e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c452:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	68fa      	ldr	r2, [r7, #12]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a35      	ldr	r2, [pc, #212]	@ (800c538 <TIM_Base_SetConfig+0x12c>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d02b      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c46c:	d027      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a32      	ldr	r2, [pc, #200]	@ (800c53c <TIM_Base_SetConfig+0x130>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d023      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a31      	ldr	r2, [pc, #196]	@ (800c540 <TIM_Base_SetConfig+0x134>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d01f      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a30      	ldr	r2, [pc, #192]	@ (800c544 <TIM_Base_SetConfig+0x138>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d01b      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a2f      	ldr	r2, [pc, #188]	@ (800c548 <TIM_Base_SetConfig+0x13c>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d017      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a2e      	ldr	r2, [pc, #184]	@ (800c54c <TIM_Base_SetConfig+0x140>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d013      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a2d      	ldr	r2, [pc, #180]	@ (800c550 <TIM_Base_SetConfig+0x144>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00f      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a2c      	ldr	r2, [pc, #176]	@ (800c554 <TIM_Base_SetConfig+0x148>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d00b      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a2b      	ldr	r2, [pc, #172]	@ (800c558 <TIM_Base_SetConfig+0x14c>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d007      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	4a2a      	ldr	r2, [pc, #168]	@ (800c55c <TIM_Base_SetConfig+0x150>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d003      	beq.n	800c4be <TIM_Base_SetConfig+0xb2>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a29      	ldr	r2, [pc, #164]	@ (800c560 <TIM_Base_SetConfig+0x154>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d108      	bne.n	800c4d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	68db      	ldr	r3, [r3, #12]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	695b      	ldr	r3, [r3, #20]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	689a      	ldr	r2, [r3, #8]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a10      	ldr	r2, [pc, #64]	@ (800c538 <TIM_Base_SetConfig+0x12c>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d003      	beq.n	800c504 <TIM_Base_SetConfig+0xf8>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4a12      	ldr	r2, [pc, #72]	@ (800c548 <TIM_Base_SetConfig+0x13c>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d103      	bne.n	800c50c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	691a      	ldr	r2, [r3, #16]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	691b      	ldr	r3, [r3, #16]
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d105      	bne.n	800c52a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	f023 0201 	bic.w	r2, r3, #1
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	611a      	str	r2, [r3, #16]
  }
}
 800c52a:	bf00      	nop
 800c52c:	3714      	adds	r7, #20
 800c52e:	46bd      	mov	sp, r7
 800c530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop
 800c538:	40010000 	.word	0x40010000
 800c53c:	40000400 	.word	0x40000400
 800c540:	40000800 	.word	0x40000800
 800c544:	40000c00 	.word	0x40000c00
 800c548:	40010400 	.word	0x40010400
 800c54c:	40014000 	.word	0x40014000
 800c550:	40014400 	.word	0x40014400
 800c554:	40014800 	.word	0x40014800
 800c558:	40001800 	.word	0x40001800
 800c55c:	40001c00 	.word	0x40001c00
 800c560:	40002000 	.word	0x40002000

0800c564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c564:	b480      	push	{r7}
 800c566:	b087      	sub	sp, #28
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a1b      	ldr	r3, [r3, #32]
 800c572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6a1b      	ldr	r3, [r3, #32]
 800c578:	f023 0201 	bic.w	r2, r3, #1
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	685b      	ldr	r3, [r3, #4]
 800c584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	699b      	ldr	r3, [r3, #24]
 800c58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	f023 0303 	bic.w	r3, r3, #3
 800c59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f023 0302 	bic.w	r3, r3, #2
 800c5ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	689b      	ldr	r3, [r3, #8]
 800c5b2:	697a      	ldr	r2, [r7, #20]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4a20      	ldr	r2, [pc, #128]	@ (800c63c <TIM_OC1_SetConfig+0xd8>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d003      	beq.n	800c5c8 <TIM_OC1_SetConfig+0x64>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4a1f      	ldr	r2, [pc, #124]	@ (800c640 <TIM_OC1_SetConfig+0xdc>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d10c      	bne.n	800c5e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	f023 0308 	bic.w	r3, r3, #8
 800c5ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	697a      	ldr	r2, [r7, #20]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	f023 0304 	bic.w	r3, r3, #4
 800c5e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	4a15      	ldr	r2, [pc, #84]	@ (800c63c <TIM_OC1_SetConfig+0xd8>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d003      	beq.n	800c5f2 <TIM_OC1_SetConfig+0x8e>
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	4a14      	ldr	r2, [pc, #80]	@ (800c640 <TIM_OC1_SetConfig+0xdc>)
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	d111      	bne.n	800c616 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	695b      	ldr	r3, [r3, #20]
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	4313      	orrs	r3, r2
 800c60a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	699b      	ldr	r3, [r3, #24]
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	4313      	orrs	r3, r2
 800c614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	693a      	ldr	r2, [r7, #16]
 800c61a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	68fa      	ldr	r2, [r7, #12]
 800c620:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	685a      	ldr	r2, [r3, #4]
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	697a      	ldr	r2, [r7, #20]
 800c62e:	621a      	str	r2, [r3, #32]
}
 800c630:	bf00      	nop
 800c632:	371c      	adds	r7, #28
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr
 800c63c:	40010000 	.word	0x40010000
 800c640:	40010400 	.word	0x40010400

0800c644 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c644:	b480      	push	{r7}
 800c646:	b087      	sub	sp, #28
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	f023 0210 	bic.w	r2, r3, #16
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	685b      	ldr	r3, [r3, #4]
 800c664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c67a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	021b      	lsls	r3, r3, #8
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	4313      	orrs	r3, r2
 800c686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	f023 0320 	bic.w	r3, r3, #32
 800c68e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	011b      	lsls	r3, r3, #4
 800c696:	697a      	ldr	r2, [r7, #20]
 800c698:	4313      	orrs	r3, r2
 800c69a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a22      	ldr	r2, [pc, #136]	@ (800c728 <TIM_OC2_SetConfig+0xe4>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d003      	beq.n	800c6ac <TIM_OC2_SetConfig+0x68>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a21      	ldr	r2, [pc, #132]	@ (800c72c <TIM_OC2_SetConfig+0xe8>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d10d      	bne.n	800c6c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c6b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	011b      	lsls	r3, r3, #4
 800c6ba:	697a      	ldr	r2, [r7, #20]
 800c6bc:	4313      	orrs	r3, r2
 800c6be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c6c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4a17      	ldr	r2, [pc, #92]	@ (800c728 <TIM_OC2_SetConfig+0xe4>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d003      	beq.n	800c6d8 <TIM_OC2_SetConfig+0x94>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4a16      	ldr	r2, [pc, #88]	@ (800c72c <TIM_OC2_SetConfig+0xe8>)
 800c6d4:	4293      	cmp	r3, r2
 800c6d6:	d113      	bne.n	800c700 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c6de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c6e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	695b      	ldr	r3, [r3, #20]
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	693a      	ldr	r2, [r7, #16]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	693a      	ldr	r2, [r7, #16]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	693a      	ldr	r2, [r7, #16]
 800c704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	685a      	ldr	r2, [r3, #4]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	621a      	str	r2, [r3, #32]
}
 800c71a:	bf00      	nop
 800c71c:	371c      	adds	r7, #28
 800c71e:	46bd      	mov	sp, r7
 800c720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	40010000 	.word	0x40010000
 800c72c:	40010400 	.word	0x40010400

0800c730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c730:	b480      	push	{r7}
 800c732:	b087      	sub	sp, #28
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a1b      	ldr	r3, [r3, #32]
 800c73e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6a1b      	ldr	r3, [r3, #32]
 800c744:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	69db      	ldr	r3, [r3, #28]
 800c756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c75e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	f023 0303 	bic.w	r3, r3, #3
 800c766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	4313      	orrs	r3, r2
 800c770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	689b      	ldr	r3, [r3, #8]
 800c77e:	021b      	lsls	r3, r3, #8
 800c780:	697a      	ldr	r2, [r7, #20]
 800c782:	4313      	orrs	r3, r2
 800c784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	4a21      	ldr	r2, [pc, #132]	@ (800c810 <TIM_OC3_SetConfig+0xe0>)
 800c78a:	4293      	cmp	r3, r2
 800c78c:	d003      	beq.n	800c796 <TIM_OC3_SetConfig+0x66>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	4a20      	ldr	r2, [pc, #128]	@ (800c814 <TIM_OC3_SetConfig+0xe4>)
 800c792:	4293      	cmp	r3, r2
 800c794:	d10d      	bne.n	800c7b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c79c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	021b      	lsls	r3, r3, #8
 800c7a4:	697a      	ldr	r2, [r7, #20]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c7b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a16      	ldr	r2, [pc, #88]	@ (800c810 <TIM_OC3_SetConfig+0xe0>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d003      	beq.n	800c7c2 <TIM_OC3_SetConfig+0x92>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	4a15      	ldr	r2, [pc, #84]	@ (800c814 <TIM_OC3_SetConfig+0xe4>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d113      	bne.n	800c7ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c7c2:	693b      	ldr	r3, [r7, #16]
 800c7c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c7d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	011b      	lsls	r3, r3, #4
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	699b      	ldr	r3, [r3, #24]
 800c7e2:	011b      	lsls	r3, r3, #4
 800c7e4:	693a      	ldr	r2, [r7, #16]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	685a      	ldr	r2, [r3, #4]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	697a      	ldr	r2, [r7, #20]
 800c802:	621a      	str	r2, [r3, #32]
}
 800c804:	bf00      	nop
 800c806:	371c      	adds	r7, #28
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr
 800c810:	40010000 	.word	0x40010000
 800c814:	40010400 	.word	0x40010400

0800c818 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c818:	b480      	push	{r7}
 800c81a:	b087      	sub	sp, #28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a1b      	ldr	r3, [r3, #32]
 800c826:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6a1b      	ldr	r3, [r3, #32]
 800c82c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	69db      	ldr	r3, [r3, #28]
 800c83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c84e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	021b      	lsls	r3, r3, #8
 800c856:	68fa      	ldr	r2, [r7, #12]
 800c858:	4313      	orrs	r3, r2
 800c85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c862:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	031b      	lsls	r3, r3, #12
 800c86a:	693a      	ldr	r2, [r7, #16]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a12      	ldr	r2, [pc, #72]	@ (800c8bc <TIM_OC4_SetConfig+0xa4>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d003      	beq.n	800c880 <TIM_OC4_SetConfig+0x68>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a11      	ldr	r2, [pc, #68]	@ (800c8c0 <TIM_OC4_SetConfig+0xa8>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d109      	bne.n	800c894 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c886:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	695b      	ldr	r3, [r3, #20]
 800c88c:	019b      	lsls	r3, r3, #6
 800c88e:	697a      	ldr	r2, [r7, #20]
 800c890:	4313      	orrs	r3, r2
 800c892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	697a      	ldr	r2, [r7, #20]
 800c898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	685a      	ldr	r2, [r3, #4]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	621a      	str	r2, [r3, #32]
}
 800c8ae:	bf00      	nop
 800c8b0:	371c      	adds	r7, #28
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop
 800c8bc:	40010000 	.word	0x40010000
 800c8c0:	40010400 	.word	0x40010400

0800c8c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8c4:	b480      	push	{r7}
 800c8c6:	b087      	sub	sp, #28
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	f023 0201 	bic.w	r2, r3, #1
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	699b      	ldr	r3, [r3, #24]
 800c8e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c8ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	011b      	lsls	r3, r3, #4
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	4313      	orrs	r3, r2
 800c8f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	f023 030a 	bic.w	r3, r3, #10
 800c900:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	4313      	orrs	r3, r2
 800c908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	621a      	str	r2, [r3, #32]
}
 800c916:	bf00      	nop
 800c918:	371c      	adds	r7, #28
 800c91a:	46bd      	mov	sp, r7
 800c91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c920:	4770      	bx	lr

0800c922 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c922:	b480      	push	{r7}
 800c924:	b087      	sub	sp, #28
 800c926:	af00      	add	r7, sp, #0
 800c928:	60f8      	str	r0, [r7, #12]
 800c92a:	60b9      	str	r1, [r7, #8]
 800c92c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6a1b      	ldr	r3, [r3, #32]
 800c932:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	6a1b      	ldr	r3, [r3, #32]
 800c938:	f023 0210 	bic.w	r2, r3, #16
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	699b      	ldr	r3, [r3, #24]
 800c944:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c94c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	031b      	lsls	r3, r3, #12
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	4313      	orrs	r3, r2
 800c956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c95e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	011b      	lsls	r3, r3, #4
 800c964:	697a      	ldr	r2, [r7, #20]
 800c966:	4313      	orrs	r3, r2
 800c968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	621a      	str	r2, [r3, #32]
}
 800c976:	bf00      	nop
 800c978:	371c      	adds	r7, #28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c982:	b480      	push	{r7}
 800c984:	b085      	sub	sp, #20
 800c986:	af00      	add	r7, sp, #0
 800c988:	6078      	str	r0, [r7, #4]
 800c98a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c998:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c99a:	683a      	ldr	r2, [r7, #0]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	f043 0307 	orr.w	r3, r3, #7
 800c9a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	609a      	str	r2, [r3, #8]
}
 800c9ac:	bf00      	nop
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b087      	sub	sp, #28
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
 800c9c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	689b      	ldr	r3, [r3, #8]
 800c9ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	021a      	lsls	r2, r3, #8
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	431a      	orrs	r2, r3
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	4313      	orrs	r3, r2
 800c9e0:	697a      	ldr	r2, [r7, #20]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	697a      	ldr	r2, [r7, #20]
 800c9ea:	609a      	str	r2, [r3, #8]
}
 800c9ec:	bf00      	nop
 800c9ee:	371c      	adds	r7, #28
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	f003 031f 	and.w	r3, r3, #31
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	6a1a      	ldr	r2, [r3, #32]
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	43db      	mvns	r3, r3
 800ca1a:	401a      	ands	r2, r3
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6a1a      	ldr	r2, [r3, #32]
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	f003 031f 	and.w	r3, r3, #31
 800ca2a:	6879      	ldr	r1, [r7, #4]
 800ca2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ca30:	431a      	orrs	r2, r3
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	621a      	str	r2, [r3, #32]
}
 800ca36:	bf00      	nop
 800ca38:	371c      	adds	r7, #28
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca40:	4770      	bx	lr
	...

0800ca44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d101      	bne.n	800ca5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca58:	2302      	movs	r3, #2
 800ca5a:	e05a      	b.n	800cb12 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2202      	movs	r2, #2
 800ca68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	689b      	ldr	r3, [r3, #8]
 800ca7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68fa      	ldr	r2, [r7, #12]
 800ca94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a21      	ldr	r2, [pc, #132]	@ (800cb20 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d022      	beq.n	800cae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caa8:	d01d      	beq.n	800cae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a1d      	ldr	r2, [pc, #116]	@ (800cb24 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d018      	beq.n	800cae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a1b      	ldr	r2, [pc, #108]	@ (800cb28 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d013      	beq.n	800cae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	4a1a      	ldr	r2, [pc, #104]	@ (800cb2c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d00e      	beq.n	800cae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a18      	ldr	r2, [pc, #96]	@ (800cb30 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800cace:	4293      	cmp	r3, r2
 800cad0:	d009      	beq.n	800cae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	4a17      	ldr	r2, [pc, #92]	@ (800cb34 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800cad8:	4293      	cmp	r3, r2
 800cada:	d004      	beq.n	800cae6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a15      	ldr	r2, [pc, #84]	@ (800cb38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d10c      	bne.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800caec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	4313      	orrs	r3, r2
 800caf6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3714      	adds	r7, #20
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr
 800cb1e:	bf00      	nop
 800cb20:	40010000 	.word	0x40010000
 800cb24:	40000400 	.word	0x40000400
 800cb28:	40000800 	.word	0x40000800
 800cb2c:	40000c00 	.word	0x40000c00
 800cb30:	40010400 	.word	0x40010400
 800cb34:	40014000 	.word	0x40014000
 800cb38:	40001800 	.word	0x40001800

0800cb3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb44:	bf00      	nop
 800cb46:	370c      	adds	r7, #12
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb50:	b480      	push	{r7}
 800cb52:	b083      	sub	sp, #12
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr

0800cb64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b082      	sub	sp, #8
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e042      	b.n	800cbfc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d106      	bne.n	800cb90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7fb ff18 	bl	80089c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2224      	movs	r2, #36	@ 0x24
 800cb94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	68da      	ldr	r2, [r3, #12]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cba6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 ff37 	bl	800da1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	691a      	ldr	r2, [r3, #16]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	695a      	ldr	r2, [r3, #20]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cbcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	68da      	ldr	r2, [r3, #12]
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cbdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2220      	movs	r2, #32
 800cbe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2220      	movs	r2, #32
 800cbf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b08c      	sub	sp, #48	@ 0x30
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	60f8      	str	r0, [r7, #12]
 800cc0c:	60b9      	str	r1, [r7, #8]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	2b20      	cmp	r3, #32
 800cc1c:	d156      	bne.n	800cccc <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d002      	beq.n	800cc2a <HAL_UART_Transmit_DMA+0x26>
 800cc24:	88fb      	ldrh	r3, [r7, #6]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d101      	bne.n	800cc2e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e04f      	b.n	800ccce <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	88fa      	ldrh	r2, [r7, #6]
 800cc38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	88fa      	ldrh	r2, [r7, #6]
 800cc3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	2200      	movs	r2, #0
 800cc44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2221      	movs	r2, #33	@ 0x21
 800cc4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc52:	4a21      	ldr	r2, [pc, #132]	@ (800ccd8 <HAL_UART_Transmit_DMA+0xd4>)
 800cc54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc5a:	4a20      	ldr	r2, [pc, #128]	@ (800ccdc <HAL_UART_Transmit_DMA+0xd8>)
 800cc5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc62:	4a1f      	ldr	r2, [pc, #124]	@ (800cce0 <HAL_UART_Transmit_DMA+0xdc>)
 800cc64:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800cc6e:	f107 0308 	add.w	r3, r7, #8
 800cc72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7a:	6819      	ldr	r1, [r3, #0]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	3304      	adds	r3, #4
 800cc82:	461a      	mov	r2, r3
 800cc84:	88fb      	ldrh	r3, [r7, #6]
 800cc86:	f7fc fb21 	bl	80092cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cc92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	3314      	adds	r3, #20
 800cc9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9c:	69bb      	ldr	r3, [r7, #24]
 800cc9e:	e853 3f00 	ldrex	r3, [r3]
 800cca2:	617b      	str	r3, [r7, #20]
   return(result);
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	3314      	adds	r3, #20
 800ccb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccb4:	627a      	str	r2, [r7, #36]	@ 0x24
 800ccb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccb8:	6a39      	ldr	r1, [r7, #32]
 800ccba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccbc:	e841 2300 	strex	r3, r2, [r1]
 800ccc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d1e5      	bne.n	800cc94 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	e000      	b.n	800ccce <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800cccc:	2302      	movs	r3, #2
  }
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3730      	adds	r7, #48	@ 0x30
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	0800d2a9 	.word	0x0800d2a9
 800ccdc:	0800d343 	.word	0x0800d343
 800cce0:	0800d4c7 	.word	0x0800d4c7

0800cce4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	2b20      	cmp	r3, #32
 800ccfc:	d112      	bne.n	800cd24 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d002      	beq.n	800cd0a <HAL_UART_Receive_DMA+0x26>
 800cd04:	88fb      	ldrh	r3, [r7, #6]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e00b      	b.n	800cd26 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cd14:	88fb      	ldrh	r3, [r7, #6]
 800cd16:	461a      	mov	r2, r3
 800cd18:	68b9      	ldr	r1, [r7, #8]
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f000 fc1e 	bl	800d55c <UART_Start_Receive_DMA>
 800cd20:	4603      	mov	r3, r0
 800cd22:	e000      	b.n	800cd26 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cd24:	2302      	movs	r3, #2
  }
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3710      	adds	r7, #16
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}
	...

0800cd30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b0ba      	sub	sp, #232	@ 0xe8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	68db      	ldr	r3, [r3, #12]
 800cd48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cd56:	2300      	movs	r3, #0
 800cd58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cd62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd66:	f003 030f 	and.w	r3, r3, #15
 800cd6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cd6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10f      	bne.n	800cd96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd7a:	f003 0320 	and.w	r3, r3, #32
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d009      	beq.n	800cd96 <HAL_UART_IRQHandler+0x66>
 800cd82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd86:	f003 0320 	and.w	r3, r3, #32
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 fd85 	bl	800d89e <UART_Receive_IT>
      return;
 800cd94:	e25b      	b.n	800d24e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cd96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	f000 80de 	beq.w	800cf5c <HAL_UART_IRQHandler+0x22c>
 800cda0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cda4:	f003 0301 	and.w	r3, r3, #1
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d106      	bne.n	800cdba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cdac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdb0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 80d1 	beq.w	800cf5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cdba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00b      	beq.n	800cdde <HAL_UART_IRQHandler+0xae>
 800cdc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cdca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d005      	beq.n	800cdde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdd6:	f043 0201 	orr.w	r2, r3, #1
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cdde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cde2:	f003 0304 	and.w	r3, r3, #4
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d00b      	beq.n	800ce02 <HAL_UART_IRQHandler+0xd2>
 800cdea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cdee:	f003 0301 	and.w	r3, r3, #1
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d005      	beq.n	800ce02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdfa:	f043 0202 	orr.w	r2, r3, #2
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ce02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce06:	f003 0302 	and.w	r3, r3, #2
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00b      	beq.n	800ce26 <HAL_UART_IRQHandler+0xf6>
 800ce0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d005      	beq.n	800ce26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce1e:	f043 0204 	orr.w	r2, r3, #4
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ce26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce2a:	f003 0308 	and.w	r3, r3, #8
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d011      	beq.n	800ce56 <HAL_UART_IRQHandler+0x126>
 800ce32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce36:	f003 0320 	and.w	r3, r3, #32
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d105      	bne.n	800ce4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ce3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce42:	f003 0301 	and.w	r3, r3, #1
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d005      	beq.n	800ce56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce4e:	f043 0208 	orr.w	r2, r3, #8
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	f000 81f2 	beq.w	800d244 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ce60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce64:	f003 0320 	and.w	r3, r3, #32
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d008      	beq.n	800ce7e <HAL_UART_IRQHandler+0x14e>
 800ce6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce70:	f003 0320 	and.w	r3, r3, #32
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f000 fd10 	bl	800d89e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	695b      	ldr	r3, [r3, #20]
 800ce84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce88:	2b40      	cmp	r3, #64	@ 0x40
 800ce8a:	bf0c      	ite	eq
 800ce8c:	2301      	moveq	r3, #1
 800ce8e:	2300      	movne	r3, #0
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ce9a:	f003 0308 	and.w	r3, r3, #8
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d103      	bne.n	800ceaa <HAL_UART_IRQHandler+0x17a>
 800cea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d04f      	beq.n	800cf4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fc18 	bl	800d6e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	695b      	ldr	r3, [r3, #20]
 800ceb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceba:	2b40      	cmp	r3, #64	@ 0x40
 800cebc:	d141      	bne.n	800cf42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	3314      	adds	r3, #20
 800cec4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cecc:	e853 3f00 	ldrex	r3, [r3]
 800ced0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ced4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ced8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cedc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	3314      	adds	r3, #20
 800cee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ceea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ceee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cefa:	e841 2300 	strex	r3, r2, [r1]
 800cefe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cf02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d1d9      	bne.n	800cebe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d013      	beq.n	800cf3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf16:	4a7e      	ldr	r2, [pc, #504]	@ (800d110 <HAL_UART_IRQHandler+0x3e0>)
 800cf18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7fc fa9c 	bl	800945c <HAL_DMA_Abort_IT>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d016      	beq.n	800cf58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf30:	687a      	ldr	r2, [r7, #4]
 800cf32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800cf34:	4610      	mov	r0, r2
 800cf36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf38:	e00e      	b.n	800cf58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 f99e 	bl	800d27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf40:	e00a      	b.n	800cf58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f000 f99a 	bl	800d27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf48:	e006      	b.n	800cf58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 f996 	bl	800d27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2200      	movs	r2, #0
 800cf54:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800cf56:	e175      	b.n	800d244 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf58:	bf00      	nop
    return;
 800cf5a:	e173      	b.n	800d244 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	f040 814f 	bne.w	800d204 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cf66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf6a:	f003 0310 	and.w	r3, r3, #16
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	f000 8148 	beq.w	800d204 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cf74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf78:	f003 0310 	and.w	r3, r3, #16
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	f000 8141 	beq.w	800d204 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cf82:	2300      	movs	r3, #0
 800cf84:	60bb      	str	r3, [r7, #8]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	60bb      	str	r3, [r7, #8]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	60bb      	str	r3, [r7, #8]
 800cf96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	695b      	ldr	r3, [r3, #20]
 800cf9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfa2:	2b40      	cmp	r3, #64	@ 0x40
 800cfa4:	f040 80b6 	bne.w	800d114 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cfb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 8145 	beq.w	800d248 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cfc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	f080 813e 	bcs.w	800d248 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cfd2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfd8:	69db      	ldr	r3, [r3, #28]
 800cfda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cfde:	f000 8088 	beq.w	800d0f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	330c      	adds	r3, #12
 800cfe8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cff0:	e853 3f00 	ldrex	r3, [r3]
 800cff4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cffc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d000:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	330c      	adds	r3, #12
 800d00a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d00e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d012:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d016:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d01a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d01e:	e841 2300 	strex	r3, r2, [r1]
 800d022:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d026:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d1d9      	bne.n	800cfe2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	3314      	adds	r3, #20
 800d034:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d038:	e853 3f00 	ldrex	r3, [r3]
 800d03c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d03e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d040:	f023 0301 	bic.w	r3, r3, #1
 800d044:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	3314      	adds	r3, #20
 800d04e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d052:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d056:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d058:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d05a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d05e:	e841 2300 	strex	r3, r2, [r1]
 800d062:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d064:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d066:	2b00      	cmp	r3, #0
 800d068:	d1e1      	bne.n	800d02e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	3314      	adds	r3, #20
 800d070:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d072:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d074:	e853 3f00 	ldrex	r3, [r3]
 800d078:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d07a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d07c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d080:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	3314      	adds	r3, #20
 800d08a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d08e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d090:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d092:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d094:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d096:	e841 2300 	strex	r3, r2, [r1]
 800d09a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d09c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1e3      	bne.n	800d06a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2220      	movs	r2, #32
 800d0a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	330c      	adds	r3, #12
 800d0b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0ba:	e853 3f00 	ldrex	r3, [r3]
 800d0be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d0c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d0c2:	f023 0310 	bic.w	r3, r3, #16
 800d0c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	330c      	adds	r3, #12
 800d0d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d0d4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d0d6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d0da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d0dc:	e841 2300 	strex	r3, r2, [r1]
 800d0e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d0e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d1e3      	bne.n	800d0b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7fc f945 	bl	800937c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2202      	movs	r2, #2
 800d0f6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d100:	b29b      	uxth	r3, r3
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	b29b      	uxth	r3, r3
 800d106:	4619      	mov	r1, r3
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 f8c1 	bl	800d290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d10e:	e09b      	b.n	800d248 <HAL_UART_IRQHandler+0x518>
 800d110:	0800d7a7 	.word	0x0800d7a7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	1ad3      	subs	r3, r2, r3
 800d120:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d128:	b29b      	uxth	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f000 808e 	beq.w	800d24c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d130:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 8089 	beq.w	800d24c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	330c      	adds	r3, #12
 800d140:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d144:	e853 3f00 	ldrex	r3, [r3]
 800d148:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d14a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d14c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d150:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	330c      	adds	r3, #12
 800d15a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d15e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d160:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d162:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d164:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d166:	e841 2300 	strex	r3, r2, [r1]
 800d16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1e3      	bne.n	800d13a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	3314      	adds	r3, #20
 800d178:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17c:	e853 3f00 	ldrex	r3, [r3]
 800d180:	623b      	str	r3, [r7, #32]
   return(result);
 800d182:	6a3b      	ldr	r3, [r7, #32]
 800d184:	f023 0301 	bic.w	r3, r3, #1
 800d188:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	3314      	adds	r3, #20
 800d192:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d196:	633a      	str	r2, [r7, #48]	@ 0x30
 800d198:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d19a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d19c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d19e:	e841 2300 	strex	r3, r2, [r1]
 800d1a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d1e3      	bne.n	800d172 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2220      	movs	r2, #32
 800d1ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	330c      	adds	r3, #12
 800d1be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c0:	693b      	ldr	r3, [r7, #16]
 800d1c2:	e853 3f00 	ldrex	r3, [r3]
 800d1c6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f023 0310 	bic.w	r3, r3, #16
 800d1ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	330c      	adds	r3, #12
 800d1d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d1dc:	61fa      	str	r2, [r7, #28]
 800d1de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e0:	69b9      	ldr	r1, [r7, #24]
 800d1e2:	69fa      	ldr	r2, [r7, #28]
 800d1e4:	e841 2300 	strex	r3, r2, [r1]
 800d1e8:	617b      	str	r3, [r7, #20]
   return(result);
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1e3      	bne.n	800d1b8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d1f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 f847 	bl	800d290 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d202:	e023      	b.n	800d24c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d009      	beq.n	800d224 <HAL_UART_IRQHandler+0x4f4>
 800d210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d003      	beq.n	800d224 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f000 fad6 	bl	800d7ce <UART_Transmit_IT>
    return;
 800d222:	e014      	b.n	800d24e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00e      	beq.n	800d24e <HAL_UART_IRQHandler+0x51e>
 800d230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d008      	beq.n	800d24e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fb16 	bl	800d86e <UART_EndTransmit_IT>
    return;
 800d242:	e004      	b.n	800d24e <HAL_UART_IRQHandler+0x51e>
    return;
 800d244:	bf00      	nop
 800d246:	e002      	b.n	800d24e <HAL_UART_IRQHandler+0x51e>
      return;
 800d248:	bf00      	nop
 800d24a:	e000      	b.n	800d24e <HAL_UART_IRQHandler+0x51e>
      return;
 800d24c:	bf00      	nop
  }
}
 800d24e:	37e8      	adds	r7, #232	@ 0xe8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d254:	b480      	push	{r7}
 800d256:	b083      	sub	sp, #12
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d25c:	bf00      	nop
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d284:	bf00      	nop
 800d286:	370c      	adds	r7, #12
 800d288:	46bd      	mov	sp, r7
 800d28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28e:	4770      	bx	lr

0800d290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a6:	4770      	bx	lr

0800d2a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b090      	sub	sp, #64	@ 0x40
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d137      	bne.n	800d334 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d2c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	3314      	adds	r3, #20
 800d2d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d4:	e853 3f00 	ldrex	r3, [r3]
 800d2d8:	623b      	str	r3, [r7, #32]
   return(result);
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	3314      	adds	r3, #20
 800d2e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d2ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800d2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d2f2:	e841 2300 	strex	r3, r2, [r1]
 800d2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d1e5      	bne.n	800d2ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d2fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	330c      	adds	r3, #12
 800d304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d306:	693b      	ldr	r3, [r7, #16]
 800d308:	e853 3f00 	ldrex	r3, [r3]
 800d30c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d314:	637b      	str	r3, [r7, #52]	@ 0x34
 800d316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	330c      	adds	r3, #12
 800d31c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d31e:	61fa      	str	r2, [r7, #28]
 800d320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d322:	69b9      	ldr	r1, [r7, #24]
 800d324:	69fa      	ldr	r2, [r7, #28]
 800d326:	e841 2300 	strex	r3, r2, [r1]
 800d32a:	617b      	str	r3, [r7, #20]
   return(result);
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1e5      	bne.n	800d2fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d332:	e002      	b.n	800d33a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d334:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d336:	f7f9 faf9 	bl	800692c <HAL_UART_TxCpltCallback>
}
 800d33a:	bf00      	nop
 800d33c:	3740      	adds	r7, #64	@ 0x40
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b084      	sub	sp, #16
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d34e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d350:	68f8      	ldr	r0, [r7, #12]
 800d352:	f7ff ff7f 	bl	800d254 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d356:	bf00      	nop
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b09c      	sub	sp, #112	@ 0x70
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d36a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d376:	2b00      	cmp	r3, #0
 800d378:	d172      	bne.n	800d460 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d37a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d37c:	2200      	movs	r2, #0
 800d37e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	330c      	adds	r3, #12
 800d386:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d38a:	e853 3f00 	ldrex	r3, [r3]
 800d38e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d392:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d396:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	330c      	adds	r3, #12
 800d39e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d3a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d3a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d3a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3a8:	e841 2300 	strex	r3, r2, [r1]
 800d3ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d3ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d1e5      	bne.n	800d380 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	3314      	adds	r3, #20
 800d3ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3be:	e853 3f00 	ldrex	r3, [r3]
 800d3c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d3c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3c6:	f023 0301 	bic.w	r3, r3, #1
 800d3ca:	667b      	str	r3, [r7, #100]	@ 0x64
 800d3cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	3314      	adds	r3, #20
 800d3d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d3d4:	647a      	str	r2, [r7, #68]	@ 0x44
 800d3d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d3da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3dc:	e841 2300 	strex	r3, r2, [r1]
 800d3e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d3e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1e5      	bne.n	800d3b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d3e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	3314      	adds	r3, #20
 800d3ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3f2:	e853 3f00 	ldrex	r3, [r3]
 800d3f6:	623b      	str	r3, [r7, #32]
   return(result);
 800d3f8:	6a3b      	ldr	r3, [r7, #32]
 800d3fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800d400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	3314      	adds	r3, #20
 800d406:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d408:	633a      	str	r2, [r7, #48]	@ 0x30
 800d40a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d40e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d410:	e841 2300 	strex	r3, r2, [r1]
 800d414:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1e5      	bne.n	800d3e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d41c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d41e:	2220      	movs	r2, #32
 800d420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d119      	bne.n	800d460 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d42c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	330c      	adds	r3, #12
 800d432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	e853 3f00 	ldrex	r3, [r3]
 800d43a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	f023 0310 	bic.w	r3, r3, #16
 800d442:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d444:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	330c      	adds	r3, #12
 800d44a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d44c:	61fa      	str	r2, [r7, #28]
 800d44e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d450:	69b9      	ldr	r1, [r7, #24]
 800d452:	69fa      	ldr	r2, [r7, #28]
 800d454:	e841 2300 	strex	r3, r2, [r1]
 800d458:	617b      	str	r3, [r7, #20]
   return(result);
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d1e5      	bne.n	800d42c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d462:	2200      	movs	r2, #0
 800d464:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d46a:	2b01      	cmp	r3, #1
 800d46c:	d106      	bne.n	800d47c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d46e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d470:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d472:	4619      	mov	r1, r3
 800d474:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d476:	f7ff ff0b 	bl	800d290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d47a:	e002      	b.n	800d482 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d47c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d47e:	f7f9 fa67 	bl	8006950 <HAL_UART_RxCpltCallback>
}
 800d482:	bf00      	nop
 800d484:	3770      	adds	r7, #112	@ 0x70
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b084      	sub	sp, #16
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d496:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2201      	movs	r2, #1
 800d49c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4a2:	2b01      	cmp	r3, #1
 800d4a4:	d108      	bne.n	800d4b8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d4aa:	085b      	lsrs	r3, r3, #1
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f7ff feed 	bl	800d290 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4b6:	e002      	b.n	800d4be <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7ff fed5 	bl	800d268 <HAL_UART_RxHalfCpltCallback>
}
 800d4be:	bf00      	nop
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b084      	sub	sp, #16
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4e2:	2b80      	cmp	r3, #128	@ 0x80
 800d4e4:	bf0c      	ite	eq
 800d4e6:	2301      	moveq	r3, #1
 800d4e8:	2300      	movne	r3, #0
 800d4ea:	b2db      	uxtb	r3, r3
 800d4ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d4f4:	b2db      	uxtb	r3, r3
 800d4f6:	2b21      	cmp	r3, #33	@ 0x21
 800d4f8:	d108      	bne.n	800d50c <UART_DMAError+0x46>
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d005      	beq.n	800d50c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	2200      	movs	r2, #0
 800d504:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800d506:	68b8      	ldr	r0, [r7, #8]
 800d508:	f000 f8c2 	bl	800d690 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	695b      	ldr	r3, [r3, #20]
 800d512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d516:	2b40      	cmp	r3, #64	@ 0x40
 800d518:	bf0c      	ite	eq
 800d51a:	2301      	moveq	r3, #1
 800d51c:	2300      	movne	r3, #0
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b22      	cmp	r3, #34	@ 0x22
 800d52c:	d108      	bne.n	800d540 <UART_DMAError+0x7a>
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d005      	beq.n	800d540 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	2200      	movs	r2, #0
 800d538:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800d53a:	68b8      	ldr	r0, [r7, #8]
 800d53c:	f000 f8d0 	bl	800d6e0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d544:	f043 0210 	orr.w	r2, r3, #16
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d54c:	68b8      	ldr	r0, [r7, #8]
 800d54e:	f7ff fe95 	bl	800d27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d552:	bf00      	nop
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
	...

0800d55c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b098      	sub	sp, #96	@ 0x60
 800d560:	af00      	add	r7, sp, #0
 800d562:	60f8      	str	r0, [r7, #12]
 800d564:	60b9      	str	r1, [r7, #8]
 800d566:	4613      	mov	r3, r2
 800d568:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d56a:	68ba      	ldr	r2, [r7, #8]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	88fa      	ldrh	r2, [r7, #6]
 800d574:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2200      	movs	r2, #0
 800d57a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	2222      	movs	r2, #34	@ 0x22
 800d580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d588:	4a3e      	ldr	r2, [pc, #248]	@ (800d684 <UART_Start_Receive_DMA+0x128>)
 800d58a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d590:	4a3d      	ldr	r2, [pc, #244]	@ (800d688 <UART_Start_Receive_DMA+0x12c>)
 800d592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d598:	4a3c      	ldr	r2, [pc, #240]	@ (800d68c <UART_Start_Receive_DMA+0x130>)
 800d59a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d5a4:	f107 0308 	add.w	r3, r7, #8
 800d5a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	3304      	adds	r3, #4
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	88fb      	ldrh	r3, [r7, #6]
 800d5bc:	f7fb fe86 	bl	80092cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	613b      	str	r3, [r7, #16]
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	613b      	str	r3, [r7, #16]
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	685b      	ldr	r3, [r3, #4]
 800d5d2:	613b      	str	r3, [r7, #16]
 800d5d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	691b      	ldr	r3, [r3, #16]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d019      	beq.n	800d612 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	330c      	adds	r3, #12
 800d5e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5e8:	e853 3f00 	ldrex	r3, [r3]
 800d5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d5ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	330c      	adds	r3, #12
 800d5fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d5fe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d600:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d602:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d604:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d606:	e841 2300 	strex	r3, r2, [r1]
 800d60a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d60c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1e5      	bne.n	800d5de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	3314      	adds	r3, #20
 800d618:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61c:	e853 3f00 	ldrex	r3, [r3]
 800d620:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d624:	f043 0301 	orr.w	r3, r3, #1
 800d628:	657b      	str	r3, [r7, #84]	@ 0x54
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	3314      	adds	r3, #20
 800d630:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d632:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d634:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d636:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d63a:	e841 2300 	strex	r3, r2, [r1]
 800d63e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1e5      	bne.n	800d612 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3314      	adds	r3, #20
 800d64c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d64e:	69bb      	ldr	r3, [r7, #24]
 800d650:	e853 3f00 	ldrex	r3, [r3]
 800d654:	617b      	str	r3, [r7, #20]
   return(result);
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d65c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	3314      	adds	r3, #20
 800d664:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d666:	627a      	str	r2, [r7, #36]	@ 0x24
 800d668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d66a:	6a39      	ldr	r1, [r7, #32]
 800d66c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d66e:	e841 2300 	strex	r3, r2, [r1]
 800d672:	61fb      	str	r3, [r7, #28]
   return(result);
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1e5      	bne.n	800d646 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3760      	adds	r7, #96	@ 0x60
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	0800d35f 	.word	0x0800d35f
 800d688:	0800d48b 	.word	0x0800d48b
 800d68c:	0800d4c7 	.word	0x0800d4c7

0800d690 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d690:	b480      	push	{r7}
 800d692:	b089      	sub	sp, #36	@ 0x24
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	330c      	adds	r3, #12
 800d69e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	e853 3f00 	ldrex	r3, [r3]
 800d6a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d6ae:	61fb      	str	r3, [r7, #28]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	330c      	adds	r3, #12
 800d6b6:	69fa      	ldr	r2, [r7, #28]
 800d6b8:	61ba      	str	r2, [r7, #24]
 800d6ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6bc:	6979      	ldr	r1, [r7, #20]
 800d6be:	69ba      	ldr	r2, [r7, #24]
 800d6c0:	e841 2300 	strex	r3, r2, [r1]
 800d6c4:	613b      	str	r3, [r7, #16]
   return(result);
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1e5      	bne.n	800d698 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	2220      	movs	r2, #32
 800d6d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d6d4:	bf00      	nop
 800d6d6:	3724      	adds	r7, #36	@ 0x24
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b095      	sub	sp, #84	@ 0x54
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	330c      	adds	r3, #12
 800d6ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6f2:	e853 3f00 	ldrex	r3, [r3]
 800d6f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	330c      	adds	r3, #12
 800d706:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d708:	643a      	str	r2, [r7, #64]	@ 0x40
 800d70a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d70e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d710:	e841 2300 	strex	r3, r2, [r1]
 800d714:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1e5      	bne.n	800d6e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	3314      	adds	r3, #20
 800d722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	e853 3f00 	ldrex	r3, [r3]
 800d72a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d72c:	69fb      	ldr	r3, [r7, #28]
 800d72e:	f023 0301 	bic.w	r3, r3, #1
 800d732:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	3314      	adds	r3, #20
 800d73a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d73c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d73e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d740:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d742:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d744:	e841 2300 	strex	r3, r2, [r1]
 800d748:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d1e5      	bne.n	800d71c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d754:	2b01      	cmp	r3, #1
 800d756:	d119      	bne.n	800d78c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	330c      	adds	r3, #12
 800d75e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	e853 3f00 	ldrex	r3, [r3]
 800d766:	60bb      	str	r3, [r7, #8]
   return(result);
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	f023 0310 	bic.w	r3, r3, #16
 800d76e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	330c      	adds	r3, #12
 800d776:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d778:	61ba      	str	r2, [r7, #24]
 800d77a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d77c:	6979      	ldr	r1, [r7, #20]
 800d77e:	69ba      	ldr	r2, [r7, #24]
 800d780:	e841 2300 	strex	r3, r2, [r1]
 800d784:	613b      	str	r3, [r7, #16]
   return(result);
 800d786:	693b      	ldr	r3, [r7, #16]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d1e5      	bne.n	800d758 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2220      	movs	r2, #32
 800d790:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d79a:	bf00      	nop
 800d79c:	3754      	adds	r7, #84	@ 0x54
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a4:	4770      	bx	lr

0800d7a6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7b2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f7ff fd5b 	bl	800d27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7c6:	bf00      	nop
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d7ce:	b480      	push	{r7}
 800d7d0:	b085      	sub	sp, #20
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	2b21      	cmp	r3, #33	@ 0x21
 800d7e0:	d13e      	bne.n	800d860 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d7ea:	d114      	bne.n	800d816 <UART_Transmit_IT+0x48>
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d110      	bne.n	800d816 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6a1b      	ldr	r3, [r3, #32]
 800d7f8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	461a      	mov	r2, r3
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d808:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6a1b      	ldr	r3, [r3, #32]
 800d80e:	1c9a      	adds	r2, r3, #2
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	621a      	str	r2, [r3, #32]
 800d814:	e008      	b.n	800d828 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6a1b      	ldr	r3, [r3, #32]
 800d81a:	1c59      	adds	r1, r3, #1
 800d81c:	687a      	ldr	r2, [r7, #4]
 800d81e:	6211      	str	r1, [r2, #32]
 800d820:	781a      	ldrb	r2, [r3, #0]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d82c:	b29b      	uxth	r3, r3
 800d82e:	3b01      	subs	r3, #1
 800d830:	b29b      	uxth	r3, r3
 800d832:	687a      	ldr	r2, [r7, #4]
 800d834:	4619      	mov	r1, r3
 800d836:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10f      	bne.n	800d85c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	68da      	ldr	r2, [r3, #12]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d84a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d85a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d85c:	2300      	movs	r3, #0
 800d85e:	e000      	b.n	800d862 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d860:	2302      	movs	r3, #2
  }
}
 800d862:	4618      	mov	r0, r3
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
 800d874:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	68da      	ldr	r2, [r3, #12]
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d884:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2220      	movs	r2, #32
 800d88a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f7f9 f84c 	bl	800692c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}

0800d89e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d89e:	b580      	push	{r7, lr}
 800d8a0:	b08c      	sub	sp, #48	@ 0x30
 800d8a2:	af00      	add	r7, sp, #0
 800d8a4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	2b22      	cmp	r3, #34	@ 0x22
 800d8b0:	f040 80ae 	bne.w	800da10 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8bc:	d117      	bne.n	800d8ee <UART_Receive_IT+0x50>
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	691b      	ldr	r3, [r3, #16]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d113      	bne.n	800d8ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e6:	1c9a      	adds	r2, r3, #2
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	629a      	str	r2, [r3, #40]	@ 0x28
 800d8ec:	e026      	b.n	800d93c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	689b      	ldr	r3, [r3, #8]
 800d8fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d900:	d007      	beq.n	800d912 <UART_Receive_IT+0x74>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	689b      	ldr	r3, [r3, #8]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d10a      	bne.n	800d920 <UART_Receive_IT+0x82>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	691b      	ldr	r3, [r3, #16]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d106      	bne.n	800d920 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	685b      	ldr	r3, [r3, #4]
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91c:	701a      	strb	r2, [r3, #0]
 800d91e:	e008      	b.n	800d932 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d92c:	b2da      	uxtb	r2, r3
 800d92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d930:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d940:	b29b      	uxth	r3, r3
 800d942:	3b01      	subs	r3, #1
 800d944:	b29b      	uxth	r3, r3
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	4619      	mov	r1, r3
 800d94a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d15d      	bne.n	800da0c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	68da      	ldr	r2, [r3, #12]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f022 0220 	bic.w	r2, r2, #32
 800d95e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	68da      	ldr	r2, [r3, #12]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d96e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	695a      	ldr	r2, [r3, #20]
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	f022 0201 	bic.w	r2, r2, #1
 800d97e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2220      	movs	r2, #32
 800d984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2200      	movs	r2, #0
 800d98c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d992:	2b01      	cmp	r3, #1
 800d994:	d135      	bne.n	800da02 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	330c      	adds	r3, #12
 800d9a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	e853 3f00 	ldrex	r3, [r3]
 800d9aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	f023 0310 	bic.w	r3, r3, #16
 800d9b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	330c      	adds	r3, #12
 800d9ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d9bc:	623a      	str	r2, [r7, #32]
 800d9be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c0:	69f9      	ldr	r1, [r7, #28]
 800d9c2:	6a3a      	ldr	r2, [r7, #32]
 800d9c4:	e841 2300 	strex	r3, r2, [r1]
 800d9c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800d9ca:	69bb      	ldr	r3, [r7, #24]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d1e5      	bne.n	800d99c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	f003 0310 	and.w	r3, r3, #16
 800d9da:	2b10      	cmp	r3, #16
 800d9dc:	d10a      	bne.n	800d9f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d9de:	2300      	movs	r3, #0
 800d9e0:	60fb      	str	r3, [r7, #12]
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	60fb      	str	r3, [r7, #12]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	685b      	ldr	r3, [r3, #4]
 800d9f0:	60fb      	str	r3, [r7, #12]
 800d9f2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f7ff fc48 	bl	800d290 <HAL_UARTEx_RxEventCallback>
 800da00:	e002      	b.n	800da08 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f7f8 ffa4 	bl	8006950 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800da08:	2300      	movs	r3, #0
 800da0a:	e002      	b.n	800da12 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800da0c:	2300      	movs	r3, #0
 800da0e:	e000      	b.n	800da12 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800da10:	2302      	movs	r3, #2
  }
}
 800da12:	4618      	mov	r0, r3
 800da14:	3730      	adds	r7, #48	@ 0x30
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
	...

0800da1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800da1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800da20:	b0c0      	sub	sp, #256	@ 0x100
 800da22:	af00      	add	r7, sp, #0
 800da24:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800da28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	691b      	ldr	r3, [r3, #16]
 800da30:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800da34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da38:	68d9      	ldr	r1, [r3, #12]
 800da3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da3e:	681a      	ldr	r2, [r3, #0]
 800da40:	ea40 0301 	orr.w	r3, r0, r1
 800da44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800da46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da4a:	689a      	ldr	r2, [r3, #8]
 800da4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da50:	691b      	ldr	r3, [r3, #16]
 800da52:	431a      	orrs	r2, r3
 800da54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da58:	695b      	ldr	r3, [r3, #20]
 800da5a:	431a      	orrs	r2, r3
 800da5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da60:	69db      	ldr	r3, [r3, #28]
 800da62:	4313      	orrs	r3, r2
 800da64:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800da68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	68db      	ldr	r3, [r3, #12]
 800da70:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800da74:	f021 010c 	bic.w	r1, r1, #12
 800da78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da7c:	681a      	ldr	r2, [r3, #0]
 800da7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800da82:	430b      	orrs	r3, r1
 800da84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800da86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	695b      	ldr	r3, [r3, #20]
 800da8e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800da92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da96:	6999      	ldr	r1, [r3, #24]
 800da98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	ea40 0301 	orr.w	r3, r0, r1
 800daa2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800daa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	4b8f      	ldr	r3, [pc, #572]	@ (800dce8 <UART_SetConfig+0x2cc>)
 800daac:	429a      	cmp	r2, r3
 800daae:	d005      	beq.n	800dabc <UART_SetConfig+0xa0>
 800dab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	4b8d      	ldr	r3, [pc, #564]	@ (800dcec <UART_SetConfig+0x2d0>)
 800dab8:	429a      	cmp	r2, r3
 800daba:	d104      	bne.n	800dac6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dabc:	f7fd fa9c 	bl	800aff8 <HAL_RCC_GetPCLK2Freq>
 800dac0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800dac4:	e003      	b.n	800dace <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dac6:	f7fd fa83 	bl	800afd0 <HAL_RCC_GetPCLK1Freq>
 800daca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dad2:	69db      	ldr	r3, [r3, #28]
 800dad4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dad8:	f040 810c 	bne.w	800dcf4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dadc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dae0:	2200      	movs	r2, #0
 800dae2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dae6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800daea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800daee:	4622      	mov	r2, r4
 800daf0:	462b      	mov	r3, r5
 800daf2:	1891      	adds	r1, r2, r2
 800daf4:	65b9      	str	r1, [r7, #88]	@ 0x58
 800daf6:	415b      	adcs	r3, r3
 800daf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800dafa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800dafe:	4621      	mov	r1, r4
 800db00:	eb12 0801 	adds.w	r8, r2, r1
 800db04:	4629      	mov	r1, r5
 800db06:	eb43 0901 	adc.w	r9, r3, r1
 800db0a:	f04f 0200 	mov.w	r2, #0
 800db0e:	f04f 0300 	mov.w	r3, #0
 800db12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800db16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800db1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800db1e:	4690      	mov	r8, r2
 800db20:	4699      	mov	r9, r3
 800db22:	4623      	mov	r3, r4
 800db24:	eb18 0303 	adds.w	r3, r8, r3
 800db28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db2c:	462b      	mov	r3, r5
 800db2e:	eb49 0303 	adc.w	r3, r9, r3
 800db32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800db36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800db42:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800db46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800db4a:	460b      	mov	r3, r1
 800db4c:	18db      	adds	r3, r3, r3
 800db4e:	653b      	str	r3, [r7, #80]	@ 0x50
 800db50:	4613      	mov	r3, r2
 800db52:	eb42 0303 	adc.w	r3, r2, r3
 800db56:	657b      	str	r3, [r7, #84]	@ 0x54
 800db58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800db5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800db60:	f7f3 f8b2 	bl	8000cc8 <__aeabi_uldivmod>
 800db64:	4602      	mov	r2, r0
 800db66:	460b      	mov	r3, r1
 800db68:	4b61      	ldr	r3, [pc, #388]	@ (800dcf0 <UART_SetConfig+0x2d4>)
 800db6a:	fba3 2302 	umull	r2, r3, r3, r2
 800db6e:	095b      	lsrs	r3, r3, #5
 800db70:	011c      	lsls	r4, r3, #4
 800db72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800db76:	2200      	movs	r2, #0
 800db78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800db7c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800db80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800db84:	4642      	mov	r2, r8
 800db86:	464b      	mov	r3, r9
 800db88:	1891      	adds	r1, r2, r2
 800db8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800db8c:	415b      	adcs	r3, r3
 800db8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800db94:	4641      	mov	r1, r8
 800db96:	eb12 0a01 	adds.w	sl, r2, r1
 800db9a:	4649      	mov	r1, r9
 800db9c:	eb43 0b01 	adc.w	fp, r3, r1
 800dba0:	f04f 0200 	mov.w	r2, #0
 800dba4:	f04f 0300 	mov.w	r3, #0
 800dba8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800dbac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800dbb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800dbb4:	4692      	mov	sl, r2
 800dbb6:	469b      	mov	fp, r3
 800dbb8:	4643      	mov	r3, r8
 800dbba:	eb1a 0303 	adds.w	r3, sl, r3
 800dbbe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dbc2:	464b      	mov	r3, r9
 800dbc4:	eb4b 0303 	adc.w	r3, fp, r3
 800dbc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dbd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800dbdc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	18db      	adds	r3, r3, r3
 800dbe4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	eb42 0303 	adc.w	r3, r2, r3
 800dbec:	647b      	str	r3, [r7, #68]	@ 0x44
 800dbee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800dbf2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800dbf6:	f7f3 f867 	bl	8000cc8 <__aeabi_uldivmod>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	4611      	mov	r1, r2
 800dc00:	4b3b      	ldr	r3, [pc, #236]	@ (800dcf0 <UART_SetConfig+0x2d4>)
 800dc02:	fba3 2301 	umull	r2, r3, r3, r1
 800dc06:	095b      	lsrs	r3, r3, #5
 800dc08:	2264      	movs	r2, #100	@ 0x64
 800dc0a:	fb02 f303 	mul.w	r3, r2, r3
 800dc0e:	1acb      	subs	r3, r1, r3
 800dc10:	00db      	lsls	r3, r3, #3
 800dc12:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800dc16:	4b36      	ldr	r3, [pc, #216]	@ (800dcf0 <UART_SetConfig+0x2d4>)
 800dc18:	fba3 2302 	umull	r2, r3, r3, r2
 800dc1c:	095b      	lsrs	r3, r3, #5
 800dc1e:	005b      	lsls	r3, r3, #1
 800dc20:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800dc24:	441c      	add	r4, r3
 800dc26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dc30:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800dc34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800dc38:	4642      	mov	r2, r8
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	1891      	adds	r1, r2, r2
 800dc3e:	63b9      	str	r1, [r7, #56]	@ 0x38
 800dc40:	415b      	adcs	r3, r3
 800dc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800dc48:	4641      	mov	r1, r8
 800dc4a:	1851      	adds	r1, r2, r1
 800dc4c:	6339      	str	r1, [r7, #48]	@ 0x30
 800dc4e:	4649      	mov	r1, r9
 800dc50:	414b      	adcs	r3, r1
 800dc52:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc54:	f04f 0200 	mov.w	r2, #0
 800dc58:	f04f 0300 	mov.w	r3, #0
 800dc5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800dc60:	4659      	mov	r1, fp
 800dc62:	00cb      	lsls	r3, r1, #3
 800dc64:	4651      	mov	r1, sl
 800dc66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc6a:	4651      	mov	r1, sl
 800dc6c:	00ca      	lsls	r2, r1, #3
 800dc6e:	4610      	mov	r0, r2
 800dc70:	4619      	mov	r1, r3
 800dc72:	4603      	mov	r3, r0
 800dc74:	4642      	mov	r2, r8
 800dc76:	189b      	adds	r3, r3, r2
 800dc78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dc7c:	464b      	mov	r3, r9
 800dc7e:	460a      	mov	r2, r1
 800dc80:	eb42 0303 	adc.w	r3, r2, r3
 800dc84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dc88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800dc94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800dc98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800dc9c:	460b      	mov	r3, r1
 800dc9e:	18db      	adds	r3, r3, r3
 800dca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dca2:	4613      	mov	r3, r2
 800dca4:	eb42 0303 	adc.w	r3, r2, r3
 800dca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dcaa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800dcae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800dcb2:	f7f3 f809 	bl	8000cc8 <__aeabi_uldivmod>
 800dcb6:	4602      	mov	r2, r0
 800dcb8:	460b      	mov	r3, r1
 800dcba:	4b0d      	ldr	r3, [pc, #52]	@ (800dcf0 <UART_SetConfig+0x2d4>)
 800dcbc:	fba3 1302 	umull	r1, r3, r3, r2
 800dcc0:	095b      	lsrs	r3, r3, #5
 800dcc2:	2164      	movs	r1, #100	@ 0x64
 800dcc4:	fb01 f303 	mul.w	r3, r1, r3
 800dcc8:	1ad3      	subs	r3, r2, r3
 800dcca:	00db      	lsls	r3, r3, #3
 800dccc:	3332      	adds	r3, #50	@ 0x32
 800dcce:	4a08      	ldr	r2, [pc, #32]	@ (800dcf0 <UART_SetConfig+0x2d4>)
 800dcd0:	fba2 2303 	umull	r2, r3, r2, r3
 800dcd4:	095b      	lsrs	r3, r3, #5
 800dcd6:	f003 0207 	and.w	r2, r3, #7
 800dcda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4422      	add	r2, r4
 800dce2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dce4:	e106      	b.n	800def4 <UART_SetConfig+0x4d8>
 800dce6:	bf00      	nop
 800dce8:	40011000 	.word	0x40011000
 800dcec:	40011400 	.word	0x40011400
 800dcf0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dcf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dcfe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800dd02:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800dd06:	4642      	mov	r2, r8
 800dd08:	464b      	mov	r3, r9
 800dd0a:	1891      	adds	r1, r2, r2
 800dd0c:	6239      	str	r1, [r7, #32]
 800dd0e:	415b      	adcs	r3, r3
 800dd10:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dd16:	4641      	mov	r1, r8
 800dd18:	1854      	adds	r4, r2, r1
 800dd1a:	4649      	mov	r1, r9
 800dd1c:	eb43 0501 	adc.w	r5, r3, r1
 800dd20:	f04f 0200 	mov.w	r2, #0
 800dd24:	f04f 0300 	mov.w	r3, #0
 800dd28:	00eb      	lsls	r3, r5, #3
 800dd2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dd2e:	00e2      	lsls	r2, r4, #3
 800dd30:	4614      	mov	r4, r2
 800dd32:	461d      	mov	r5, r3
 800dd34:	4643      	mov	r3, r8
 800dd36:	18e3      	adds	r3, r4, r3
 800dd38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dd3c:	464b      	mov	r3, r9
 800dd3e:	eb45 0303 	adc.w	r3, r5, r3
 800dd42:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dd46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dd52:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800dd56:	f04f 0200 	mov.w	r2, #0
 800dd5a:	f04f 0300 	mov.w	r3, #0
 800dd5e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800dd62:	4629      	mov	r1, r5
 800dd64:	008b      	lsls	r3, r1, #2
 800dd66:	4621      	mov	r1, r4
 800dd68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dd6c:	4621      	mov	r1, r4
 800dd6e:	008a      	lsls	r2, r1, #2
 800dd70:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800dd74:	f7f2 ffa8 	bl	8000cc8 <__aeabi_uldivmod>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4b60      	ldr	r3, [pc, #384]	@ (800df00 <UART_SetConfig+0x4e4>)
 800dd7e:	fba3 2302 	umull	r2, r3, r3, r2
 800dd82:	095b      	lsrs	r3, r3, #5
 800dd84:	011c      	lsls	r4, r3, #4
 800dd86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dd90:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800dd94:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800dd98:	4642      	mov	r2, r8
 800dd9a:	464b      	mov	r3, r9
 800dd9c:	1891      	adds	r1, r2, r2
 800dd9e:	61b9      	str	r1, [r7, #24]
 800dda0:	415b      	adcs	r3, r3
 800dda2:	61fb      	str	r3, [r7, #28]
 800dda4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dda8:	4641      	mov	r1, r8
 800ddaa:	1851      	adds	r1, r2, r1
 800ddac:	6139      	str	r1, [r7, #16]
 800ddae:	4649      	mov	r1, r9
 800ddb0:	414b      	adcs	r3, r1
 800ddb2:	617b      	str	r3, [r7, #20]
 800ddb4:	f04f 0200 	mov.w	r2, #0
 800ddb8:	f04f 0300 	mov.w	r3, #0
 800ddbc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ddc0:	4659      	mov	r1, fp
 800ddc2:	00cb      	lsls	r3, r1, #3
 800ddc4:	4651      	mov	r1, sl
 800ddc6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ddca:	4651      	mov	r1, sl
 800ddcc:	00ca      	lsls	r2, r1, #3
 800ddce:	4610      	mov	r0, r2
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	4642      	mov	r2, r8
 800ddd6:	189b      	adds	r3, r3, r2
 800ddd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dddc:	464b      	mov	r3, r9
 800ddde:	460a      	mov	r2, r1
 800dde0:	eb42 0303 	adc.w	r3, r2, r3
 800dde4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dde8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ddf2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800ddf4:	f04f 0200 	mov.w	r2, #0
 800ddf8:	f04f 0300 	mov.w	r3, #0
 800ddfc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800de00:	4649      	mov	r1, r9
 800de02:	008b      	lsls	r3, r1, #2
 800de04:	4641      	mov	r1, r8
 800de06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800de0a:	4641      	mov	r1, r8
 800de0c:	008a      	lsls	r2, r1, #2
 800de0e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800de12:	f7f2 ff59 	bl	8000cc8 <__aeabi_uldivmod>
 800de16:	4602      	mov	r2, r0
 800de18:	460b      	mov	r3, r1
 800de1a:	4611      	mov	r1, r2
 800de1c:	4b38      	ldr	r3, [pc, #224]	@ (800df00 <UART_SetConfig+0x4e4>)
 800de1e:	fba3 2301 	umull	r2, r3, r3, r1
 800de22:	095b      	lsrs	r3, r3, #5
 800de24:	2264      	movs	r2, #100	@ 0x64
 800de26:	fb02 f303 	mul.w	r3, r2, r3
 800de2a:	1acb      	subs	r3, r1, r3
 800de2c:	011b      	lsls	r3, r3, #4
 800de2e:	3332      	adds	r3, #50	@ 0x32
 800de30:	4a33      	ldr	r2, [pc, #204]	@ (800df00 <UART_SetConfig+0x4e4>)
 800de32:	fba2 2303 	umull	r2, r3, r2, r3
 800de36:	095b      	lsrs	r3, r3, #5
 800de38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800de3c:	441c      	add	r4, r3
 800de3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800de42:	2200      	movs	r2, #0
 800de44:	673b      	str	r3, [r7, #112]	@ 0x70
 800de46:	677a      	str	r2, [r7, #116]	@ 0x74
 800de48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800de4c:	4642      	mov	r2, r8
 800de4e:	464b      	mov	r3, r9
 800de50:	1891      	adds	r1, r2, r2
 800de52:	60b9      	str	r1, [r7, #8]
 800de54:	415b      	adcs	r3, r3
 800de56:	60fb      	str	r3, [r7, #12]
 800de58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800de5c:	4641      	mov	r1, r8
 800de5e:	1851      	adds	r1, r2, r1
 800de60:	6039      	str	r1, [r7, #0]
 800de62:	4649      	mov	r1, r9
 800de64:	414b      	adcs	r3, r1
 800de66:	607b      	str	r3, [r7, #4]
 800de68:	f04f 0200 	mov.w	r2, #0
 800de6c:	f04f 0300 	mov.w	r3, #0
 800de70:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800de74:	4659      	mov	r1, fp
 800de76:	00cb      	lsls	r3, r1, #3
 800de78:	4651      	mov	r1, sl
 800de7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800de7e:	4651      	mov	r1, sl
 800de80:	00ca      	lsls	r2, r1, #3
 800de82:	4610      	mov	r0, r2
 800de84:	4619      	mov	r1, r3
 800de86:	4603      	mov	r3, r0
 800de88:	4642      	mov	r2, r8
 800de8a:	189b      	adds	r3, r3, r2
 800de8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de8e:	464b      	mov	r3, r9
 800de90:	460a      	mov	r2, r1
 800de92:	eb42 0303 	adc.w	r3, r2, r3
 800de96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800de98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	2200      	movs	r2, #0
 800dea0:	663b      	str	r3, [r7, #96]	@ 0x60
 800dea2:	667a      	str	r2, [r7, #100]	@ 0x64
 800dea4:	f04f 0200 	mov.w	r2, #0
 800dea8:	f04f 0300 	mov.w	r3, #0
 800deac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800deb0:	4649      	mov	r1, r9
 800deb2:	008b      	lsls	r3, r1, #2
 800deb4:	4641      	mov	r1, r8
 800deb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800deba:	4641      	mov	r1, r8
 800debc:	008a      	lsls	r2, r1, #2
 800debe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800dec2:	f7f2 ff01 	bl	8000cc8 <__aeabi_uldivmod>
 800dec6:	4602      	mov	r2, r0
 800dec8:	460b      	mov	r3, r1
 800deca:	4b0d      	ldr	r3, [pc, #52]	@ (800df00 <UART_SetConfig+0x4e4>)
 800decc:	fba3 1302 	umull	r1, r3, r3, r2
 800ded0:	095b      	lsrs	r3, r3, #5
 800ded2:	2164      	movs	r1, #100	@ 0x64
 800ded4:	fb01 f303 	mul.w	r3, r1, r3
 800ded8:	1ad3      	subs	r3, r2, r3
 800deda:	011b      	lsls	r3, r3, #4
 800dedc:	3332      	adds	r3, #50	@ 0x32
 800dede:	4a08      	ldr	r2, [pc, #32]	@ (800df00 <UART_SetConfig+0x4e4>)
 800dee0:	fba2 2303 	umull	r2, r3, r2, r3
 800dee4:	095b      	lsrs	r3, r3, #5
 800dee6:	f003 020f 	and.w	r2, r3, #15
 800deea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4422      	add	r2, r4
 800def2:	609a      	str	r2, [r3, #8]
}
 800def4:	bf00      	nop
 800def6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800defa:	46bd      	mov	sp, r7
 800defc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df00:	51eb851f 	.word	0x51eb851f

0800df04 <atan2>:
 800df04:	f000 b908 	b.w	800e118 <__ieee754_atan2>

0800df08 <sqrt>:
 800df08:	b538      	push	{r3, r4, r5, lr}
 800df0a:	ed2d 8b02 	vpush	{d8}
 800df0e:	ec55 4b10 	vmov	r4, r5, d0
 800df12:	f000 f825 	bl	800df60 <__ieee754_sqrt>
 800df16:	4622      	mov	r2, r4
 800df18:	462b      	mov	r3, r5
 800df1a:	4620      	mov	r0, r4
 800df1c:	4629      	mov	r1, r5
 800df1e:	eeb0 8a40 	vmov.f32	s16, s0
 800df22:	eef0 8a60 	vmov.f32	s17, s1
 800df26:	f7f2 fe21 	bl	8000b6c <__aeabi_dcmpun>
 800df2a:	b990      	cbnz	r0, 800df52 <sqrt+0x4a>
 800df2c:	2200      	movs	r2, #0
 800df2e:	2300      	movs	r3, #0
 800df30:	4620      	mov	r0, r4
 800df32:	4629      	mov	r1, r5
 800df34:	f7f2 fdf2 	bl	8000b1c <__aeabi_dcmplt>
 800df38:	b158      	cbz	r0, 800df52 <sqrt+0x4a>
 800df3a:	f001 fb6f 	bl	800f61c <__errno>
 800df3e:	2321      	movs	r3, #33	@ 0x21
 800df40:	6003      	str	r3, [r0, #0]
 800df42:	2200      	movs	r2, #0
 800df44:	2300      	movs	r3, #0
 800df46:	4610      	mov	r0, r2
 800df48:	4619      	mov	r1, r3
 800df4a:	f7f2 fc9f 	bl	800088c <__aeabi_ddiv>
 800df4e:	ec41 0b18 	vmov	d8, r0, r1
 800df52:	eeb0 0a48 	vmov.f32	s0, s16
 800df56:	eef0 0a68 	vmov.f32	s1, s17
 800df5a:	ecbd 8b02 	vpop	{d8}
 800df5e:	bd38      	pop	{r3, r4, r5, pc}

0800df60 <__ieee754_sqrt>:
 800df60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df64:	4a68      	ldr	r2, [pc, #416]	@ (800e108 <__ieee754_sqrt+0x1a8>)
 800df66:	ec55 4b10 	vmov	r4, r5, d0
 800df6a:	43aa      	bics	r2, r5
 800df6c:	462b      	mov	r3, r5
 800df6e:	4621      	mov	r1, r4
 800df70:	d110      	bne.n	800df94 <__ieee754_sqrt+0x34>
 800df72:	4622      	mov	r2, r4
 800df74:	4620      	mov	r0, r4
 800df76:	4629      	mov	r1, r5
 800df78:	f7f2 fb5e 	bl	8000638 <__aeabi_dmul>
 800df7c:	4602      	mov	r2, r0
 800df7e:	460b      	mov	r3, r1
 800df80:	4620      	mov	r0, r4
 800df82:	4629      	mov	r1, r5
 800df84:	f7f2 f9a2 	bl	80002cc <__adddf3>
 800df88:	4604      	mov	r4, r0
 800df8a:	460d      	mov	r5, r1
 800df8c:	ec45 4b10 	vmov	d0, r4, r5
 800df90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df94:	2d00      	cmp	r5, #0
 800df96:	dc0e      	bgt.n	800dfb6 <__ieee754_sqrt+0x56>
 800df98:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800df9c:	4322      	orrs	r2, r4
 800df9e:	d0f5      	beq.n	800df8c <__ieee754_sqrt+0x2c>
 800dfa0:	b19d      	cbz	r5, 800dfca <__ieee754_sqrt+0x6a>
 800dfa2:	4622      	mov	r2, r4
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	4629      	mov	r1, r5
 800dfa8:	f7f2 f98e 	bl	80002c8 <__aeabi_dsub>
 800dfac:	4602      	mov	r2, r0
 800dfae:	460b      	mov	r3, r1
 800dfb0:	f7f2 fc6c 	bl	800088c <__aeabi_ddiv>
 800dfb4:	e7e8      	b.n	800df88 <__ieee754_sqrt+0x28>
 800dfb6:	152a      	asrs	r2, r5, #20
 800dfb8:	d115      	bne.n	800dfe6 <__ieee754_sqrt+0x86>
 800dfba:	2000      	movs	r0, #0
 800dfbc:	e009      	b.n	800dfd2 <__ieee754_sqrt+0x72>
 800dfbe:	0acb      	lsrs	r3, r1, #11
 800dfc0:	3a15      	subs	r2, #21
 800dfc2:	0549      	lsls	r1, r1, #21
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d0fa      	beq.n	800dfbe <__ieee754_sqrt+0x5e>
 800dfc8:	e7f7      	b.n	800dfba <__ieee754_sqrt+0x5a>
 800dfca:	462a      	mov	r2, r5
 800dfcc:	e7fa      	b.n	800dfc4 <__ieee754_sqrt+0x64>
 800dfce:	005b      	lsls	r3, r3, #1
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	02dc      	lsls	r4, r3, #11
 800dfd4:	d5fb      	bpl.n	800dfce <__ieee754_sqrt+0x6e>
 800dfd6:	1e44      	subs	r4, r0, #1
 800dfd8:	1b12      	subs	r2, r2, r4
 800dfda:	f1c0 0420 	rsb	r4, r0, #32
 800dfde:	fa21 f404 	lsr.w	r4, r1, r4
 800dfe2:	4323      	orrs	r3, r4
 800dfe4:	4081      	lsls	r1, r0
 800dfe6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dfee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dff2:	07d2      	lsls	r2, r2, #31
 800dff4:	bf5c      	itt	pl
 800dff6:	005b      	lslpl	r3, r3, #1
 800dff8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dffc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e000:	bf58      	it	pl
 800e002:	0049      	lslpl	r1, r1, #1
 800e004:	2600      	movs	r6, #0
 800e006:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e00a:	106d      	asrs	r5, r5, #1
 800e00c:	0049      	lsls	r1, r1, #1
 800e00e:	2016      	movs	r0, #22
 800e010:	4632      	mov	r2, r6
 800e012:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e016:	1917      	adds	r7, r2, r4
 800e018:	429f      	cmp	r7, r3
 800e01a:	bfde      	ittt	le
 800e01c:	193a      	addle	r2, r7, r4
 800e01e:	1bdb      	suble	r3, r3, r7
 800e020:	1936      	addle	r6, r6, r4
 800e022:	0fcf      	lsrs	r7, r1, #31
 800e024:	3801      	subs	r0, #1
 800e026:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e02a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e02e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e032:	d1f0      	bne.n	800e016 <__ieee754_sqrt+0xb6>
 800e034:	4604      	mov	r4, r0
 800e036:	2720      	movs	r7, #32
 800e038:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e03c:	429a      	cmp	r2, r3
 800e03e:	eb00 0e0c 	add.w	lr, r0, ip
 800e042:	db02      	blt.n	800e04a <__ieee754_sqrt+0xea>
 800e044:	d113      	bne.n	800e06e <__ieee754_sqrt+0x10e>
 800e046:	458e      	cmp	lr, r1
 800e048:	d811      	bhi.n	800e06e <__ieee754_sqrt+0x10e>
 800e04a:	f1be 0f00 	cmp.w	lr, #0
 800e04e:	eb0e 000c 	add.w	r0, lr, ip
 800e052:	da42      	bge.n	800e0da <__ieee754_sqrt+0x17a>
 800e054:	2800      	cmp	r0, #0
 800e056:	db40      	blt.n	800e0da <__ieee754_sqrt+0x17a>
 800e058:	f102 0801 	add.w	r8, r2, #1
 800e05c:	1a9b      	subs	r3, r3, r2
 800e05e:	458e      	cmp	lr, r1
 800e060:	bf88      	it	hi
 800e062:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e066:	eba1 010e 	sub.w	r1, r1, lr
 800e06a:	4464      	add	r4, ip
 800e06c:	4642      	mov	r2, r8
 800e06e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e072:	3f01      	subs	r7, #1
 800e074:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e078:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e07c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e080:	d1dc      	bne.n	800e03c <__ieee754_sqrt+0xdc>
 800e082:	4319      	orrs	r1, r3
 800e084:	d01b      	beq.n	800e0be <__ieee754_sqrt+0x15e>
 800e086:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e10c <__ieee754_sqrt+0x1ac>
 800e08a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e110 <__ieee754_sqrt+0x1b0>
 800e08e:	e9da 0100 	ldrd	r0, r1, [sl]
 800e092:	e9db 2300 	ldrd	r2, r3, [fp]
 800e096:	f7f2 f917 	bl	80002c8 <__aeabi_dsub>
 800e09a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e09e:	4602      	mov	r2, r0
 800e0a0:	460b      	mov	r3, r1
 800e0a2:	4640      	mov	r0, r8
 800e0a4:	4649      	mov	r1, r9
 800e0a6:	f7f2 fd43 	bl	8000b30 <__aeabi_dcmple>
 800e0aa:	b140      	cbz	r0, 800e0be <__ieee754_sqrt+0x15e>
 800e0ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e0b0:	e9da 0100 	ldrd	r0, r1, [sl]
 800e0b4:	e9db 2300 	ldrd	r2, r3, [fp]
 800e0b8:	d111      	bne.n	800e0de <__ieee754_sqrt+0x17e>
 800e0ba:	3601      	adds	r6, #1
 800e0bc:	463c      	mov	r4, r7
 800e0be:	1072      	asrs	r2, r6, #1
 800e0c0:	0863      	lsrs	r3, r4, #1
 800e0c2:	07f1      	lsls	r1, r6, #31
 800e0c4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e0c8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e0cc:	bf48      	it	mi
 800e0ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e0d2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	e756      	b.n	800df88 <__ieee754_sqrt+0x28>
 800e0da:	4690      	mov	r8, r2
 800e0dc:	e7be      	b.n	800e05c <__ieee754_sqrt+0xfc>
 800e0de:	f7f2 f8f5 	bl	80002cc <__adddf3>
 800e0e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	f7f2 fd15 	bl	8000b1c <__aeabi_dcmplt>
 800e0f2:	b120      	cbz	r0, 800e0fe <__ieee754_sqrt+0x19e>
 800e0f4:	1ca0      	adds	r0, r4, #2
 800e0f6:	bf08      	it	eq
 800e0f8:	3601      	addeq	r6, #1
 800e0fa:	3402      	adds	r4, #2
 800e0fc:	e7df      	b.n	800e0be <__ieee754_sqrt+0x15e>
 800e0fe:	1c63      	adds	r3, r4, #1
 800e100:	f023 0401 	bic.w	r4, r3, #1
 800e104:	e7db      	b.n	800e0be <__ieee754_sqrt+0x15e>
 800e106:	bf00      	nop
 800e108:	7ff00000 	.word	0x7ff00000
 800e10c:	20000018 	.word	0x20000018
 800e110:	20000010 	.word	0x20000010
 800e114:	00000000 	.word	0x00000000

0800e118 <__ieee754_atan2>:
 800e118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e11c:	ec57 6b11 	vmov	r6, r7, d1
 800e120:	4273      	negs	r3, r6
 800e122:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e2a0 <__ieee754_atan2+0x188>
 800e126:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e12a:	4333      	orrs	r3, r6
 800e12c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e130:	4543      	cmp	r3, r8
 800e132:	ec51 0b10 	vmov	r0, r1, d0
 800e136:	4635      	mov	r5, r6
 800e138:	d809      	bhi.n	800e14e <__ieee754_atan2+0x36>
 800e13a:	4244      	negs	r4, r0
 800e13c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e140:	4304      	orrs	r4, r0
 800e142:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e146:	4544      	cmp	r4, r8
 800e148:	468e      	mov	lr, r1
 800e14a:	4681      	mov	r9, r0
 800e14c:	d907      	bls.n	800e15e <__ieee754_atan2+0x46>
 800e14e:	4632      	mov	r2, r6
 800e150:	463b      	mov	r3, r7
 800e152:	f7f2 f8bb 	bl	80002cc <__adddf3>
 800e156:	ec41 0b10 	vmov	d0, r0, r1
 800e15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e15e:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e162:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e166:	4334      	orrs	r4, r6
 800e168:	d103      	bne.n	800e172 <__ieee754_atan2+0x5a>
 800e16a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e16e:	f000 b89b 	b.w	800e2a8 <atan>
 800e172:	17bc      	asrs	r4, r7, #30
 800e174:	f004 0402 	and.w	r4, r4, #2
 800e178:	ea53 0909 	orrs.w	r9, r3, r9
 800e17c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e180:	d107      	bne.n	800e192 <__ieee754_atan2+0x7a>
 800e182:	2c02      	cmp	r4, #2
 800e184:	d05f      	beq.n	800e246 <__ieee754_atan2+0x12e>
 800e186:	2c03      	cmp	r4, #3
 800e188:	d1e5      	bne.n	800e156 <__ieee754_atan2+0x3e>
 800e18a:	a141      	add	r1, pc, #260	@ (adr r1, 800e290 <__ieee754_atan2+0x178>)
 800e18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e190:	e7e1      	b.n	800e156 <__ieee754_atan2+0x3e>
 800e192:	4315      	orrs	r5, r2
 800e194:	d106      	bne.n	800e1a4 <__ieee754_atan2+0x8c>
 800e196:	f1be 0f00 	cmp.w	lr, #0
 800e19a:	da5f      	bge.n	800e25c <__ieee754_atan2+0x144>
 800e19c:	a13e      	add	r1, pc, #248	@ (adr r1, 800e298 <__ieee754_atan2+0x180>)
 800e19e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1a2:	e7d8      	b.n	800e156 <__ieee754_atan2+0x3e>
 800e1a4:	4542      	cmp	r2, r8
 800e1a6:	d10f      	bne.n	800e1c8 <__ieee754_atan2+0xb0>
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	f104 34ff 	add.w	r4, r4, #4294967295
 800e1ae:	d107      	bne.n	800e1c0 <__ieee754_atan2+0xa8>
 800e1b0:	2c02      	cmp	r4, #2
 800e1b2:	d84c      	bhi.n	800e24e <__ieee754_atan2+0x136>
 800e1b4:	4b34      	ldr	r3, [pc, #208]	@ (800e288 <__ieee754_atan2+0x170>)
 800e1b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e1ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e1be:	e7ca      	b.n	800e156 <__ieee754_atan2+0x3e>
 800e1c0:	2c02      	cmp	r4, #2
 800e1c2:	d848      	bhi.n	800e256 <__ieee754_atan2+0x13e>
 800e1c4:	4b31      	ldr	r3, [pc, #196]	@ (800e28c <__ieee754_atan2+0x174>)
 800e1c6:	e7f6      	b.n	800e1b6 <__ieee754_atan2+0x9e>
 800e1c8:	4543      	cmp	r3, r8
 800e1ca:	d0e4      	beq.n	800e196 <__ieee754_atan2+0x7e>
 800e1cc:	1a9b      	subs	r3, r3, r2
 800e1ce:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e1d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e1d6:	da1e      	bge.n	800e216 <__ieee754_atan2+0xfe>
 800e1d8:	2f00      	cmp	r7, #0
 800e1da:	da01      	bge.n	800e1e0 <__ieee754_atan2+0xc8>
 800e1dc:	323c      	adds	r2, #60	@ 0x3c
 800e1de:	db1e      	blt.n	800e21e <__ieee754_atan2+0x106>
 800e1e0:	4632      	mov	r2, r6
 800e1e2:	463b      	mov	r3, r7
 800e1e4:	f7f2 fb52 	bl	800088c <__aeabi_ddiv>
 800e1e8:	ec41 0b10 	vmov	d0, r0, r1
 800e1ec:	f000 f9f4 	bl	800e5d8 <fabs>
 800e1f0:	f000 f85a 	bl	800e2a8 <atan>
 800e1f4:	ec51 0b10 	vmov	r0, r1, d0
 800e1f8:	2c01      	cmp	r4, #1
 800e1fa:	d013      	beq.n	800e224 <__ieee754_atan2+0x10c>
 800e1fc:	2c02      	cmp	r4, #2
 800e1fe:	d015      	beq.n	800e22c <__ieee754_atan2+0x114>
 800e200:	2c00      	cmp	r4, #0
 800e202:	d0a8      	beq.n	800e156 <__ieee754_atan2+0x3e>
 800e204:	a318      	add	r3, pc, #96	@ (adr r3, 800e268 <__ieee754_atan2+0x150>)
 800e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20a:	f7f2 f85d 	bl	80002c8 <__aeabi_dsub>
 800e20e:	a318      	add	r3, pc, #96	@ (adr r3, 800e270 <__ieee754_atan2+0x158>)
 800e210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e214:	e014      	b.n	800e240 <__ieee754_atan2+0x128>
 800e216:	a118      	add	r1, pc, #96	@ (adr r1, 800e278 <__ieee754_atan2+0x160>)
 800e218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e21c:	e7ec      	b.n	800e1f8 <__ieee754_atan2+0xe0>
 800e21e:	2000      	movs	r0, #0
 800e220:	2100      	movs	r1, #0
 800e222:	e7e9      	b.n	800e1f8 <__ieee754_atan2+0xe0>
 800e224:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e228:	4619      	mov	r1, r3
 800e22a:	e794      	b.n	800e156 <__ieee754_atan2+0x3e>
 800e22c:	a30e      	add	r3, pc, #56	@ (adr r3, 800e268 <__ieee754_atan2+0x150>)
 800e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e232:	f7f2 f849 	bl	80002c8 <__aeabi_dsub>
 800e236:	4602      	mov	r2, r0
 800e238:	460b      	mov	r3, r1
 800e23a:	a10d      	add	r1, pc, #52	@ (adr r1, 800e270 <__ieee754_atan2+0x158>)
 800e23c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e240:	f7f2 f842 	bl	80002c8 <__aeabi_dsub>
 800e244:	e787      	b.n	800e156 <__ieee754_atan2+0x3e>
 800e246:	a10a      	add	r1, pc, #40	@ (adr r1, 800e270 <__ieee754_atan2+0x158>)
 800e248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e24c:	e783      	b.n	800e156 <__ieee754_atan2+0x3e>
 800e24e:	a10c      	add	r1, pc, #48	@ (adr r1, 800e280 <__ieee754_atan2+0x168>)
 800e250:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e254:	e77f      	b.n	800e156 <__ieee754_atan2+0x3e>
 800e256:	2000      	movs	r0, #0
 800e258:	2100      	movs	r1, #0
 800e25a:	e77c      	b.n	800e156 <__ieee754_atan2+0x3e>
 800e25c:	a106      	add	r1, pc, #24	@ (adr r1, 800e278 <__ieee754_atan2+0x160>)
 800e25e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e262:	e778      	b.n	800e156 <__ieee754_atan2+0x3e>
 800e264:	f3af 8000 	nop.w
 800e268:	33145c07 	.word	0x33145c07
 800e26c:	3ca1a626 	.word	0x3ca1a626
 800e270:	54442d18 	.word	0x54442d18
 800e274:	400921fb 	.word	0x400921fb
 800e278:	54442d18 	.word	0x54442d18
 800e27c:	3ff921fb 	.word	0x3ff921fb
 800e280:	54442d18 	.word	0x54442d18
 800e284:	3fe921fb 	.word	0x3fe921fb
 800e288:	08013128 	.word	0x08013128
 800e28c:	08013110 	.word	0x08013110
 800e290:	54442d18 	.word	0x54442d18
 800e294:	c00921fb 	.word	0xc00921fb
 800e298:	54442d18 	.word	0x54442d18
 800e29c:	bff921fb 	.word	0xbff921fb
 800e2a0:	7ff00000 	.word	0x7ff00000
 800e2a4:	00000000 	.word	0x00000000

0800e2a8 <atan>:
 800e2a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	ec55 4b10 	vmov	r4, r5, d0
 800e2b0:	4bbf      	ldr	r3, [pc, #764]	@ (800e5b0 <atan+0x308>)
 800e2b2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e2b6:	429e      	cmp	r6, r3
 800e2b8:	46ab      	mov	fp, r5
 800e2ba:	d918      	bls.n	800e2ee <atan+0x46>
 800e2bc:	4bbd      	ldr	r3, [pc, #756]	@ (800e5b4 <atan+0x30c>)
 800e2be:	429e      	cmp	r6, r3
 800e2c0:	d801      	bhi.n	800e2c6 <atan+0x1e>
 800e2c2:	d109      	bne.n	800e2d8 <atan+0x30>
 800e2c4:	b144      	cbz	r4, 800e2d8 <atan+0x30>
 800e2c6:	4622      	mov	r2, r4
 800e2c8:	462b      	mov	r3, r5
 800e2ca:	4620      	mov	r0, r4
 800e2cc:	4629      	mov	r1, r5
 800e2ce:	f7f1 fffd 	bl	80002cc <__adddf3>
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	460d      	mov	r5, r1
 800e2d6:	e006      	b.n	800e2e6 <atan+0x3e>
 800e2d8:	f1bb 0f00 	cmp.w	fp, #0
 800e2dc:	f340 812b 	ble.w	800e536 <atan+0x28e>
 800e2e0:	a597      	add	r5, pc, #604	@ (adr r5, 800e540 <atan+0x298>)
 800e2e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e2e6:	ec45 4b10 	vmov	d0, r4, r5
 800e2ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ee:	4bb2      	ldr	r3, [pc, #712]	@ (800e5b8 <atan+0x310>)
 800e2f0:	429e      	cmp	r6, r3
 800e2f2:	d813      	bhi.n	800e31c <atan+0x74>
 800e2f4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800e2f8:	429e      	cmp	r6, r3
 800e2fa:	d80c      	bhi.n	800e316 <atan+0x6e>
 800e2fc:	a392      	add	r3, pc, #584	@ (adr r3, 800e548 <atan+0x2a0>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	4620      	mov	r0, r4
 800e304:	4629      	mov	r1, r5
 800e306:	f7f1 ffe1 	bl	80002cc <__adddf3>
 800e30a:	4bac      	ldr	r3, [pc, #688]	@ (800e5bc <atan+0x314>)
 800e30c:	2200      	movs	r2, #0
 800e30e:	f7f2 fc23 	bl	8000b58 <__aeabi_dcmpgt>
 800e312:	2800      	cmp	r0, #0
 800e314:	d1e7      	bne.n	800e2e6 <atan+0x3e>
 800e316:	f04f 3aff 	mov.w	sl, #4294967295
 800e31a:	e029      	b.n	800e370 <atan+0xc8>
 800e31c:	f000 f95c 	bl	800e5d8 <fabs>
 800e320:	4ba7      	ldr	r3, [pc, #668]	@ (800e5c0 <atan+0x318>)
 800e322:	429e      	cmp	r6, r3
 800e324:	ec55 4b10 	vmov	r4, r5, d0
 800e328:	f200 80bc 	bhi.w	800e4a4 <atan+0x1fc>
 800e32c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800e330:	429e      	cmp	r6, r3
 800e332:	f200 809e 	bhi.w	800e472 <atan+0x1ca>
 800e336:	4622      	mov	r2, r4
 800e338:	462b      	mov	r3, r5
 800e33a:	4620      	mov	r0, r4
 800e33c:	4629      	mov	r1, r5
 800e33e:	f7f1 ffc5 	bl	80002cc <__adddf3>
 800e342:	4b9e      	ldr	r3, [pc, #632]	@ (800e5bc <atan+0x314>)
 800e344:	2200      	movs	r2, #0
 800e346:	f7f1 ffbf 	bl	80002c8 <__aeabi_dsub>
 800e34a:	2200      	movs	r2, #0
 800e34c:	4606      	mov	r6, r0
 800e34e:	460f      	mov	r7, r1
 800e350:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e354:	4620      	mov	r0, r4
 800e356:	4629      	mov	r1, r5
 800e358:	f7f1 ffb8 	bl	80002cc <__adddf3>
 800e35c:	4602      	mov	r2, r0
 800e35e:	460b      	mov	r3, r1
 800e360:	4630      	mov	r0, r6
 800e362:	4639      	mov	r1, r7
 800e364:	f7f2 fa92 	bl	800088c <__aeabi_ddiv>
 800e368:	f04f 0a00 	mov.w	sl, #0
 800e36c:	4604      	mov	r4, r0
 800e36e:	460d      	mov	r5, r1
 800e370:	4622      	mov	r2, r4
 800e372:	462b      	mov	r3, r5
 800e374:	4620      	mov	r0, r4
 800e376:	4629      	mov	r1, r5
 800e378:	f7f2 f95e 	bl	8000638 <__aeabi_dmul>
 800e37c:	4602      	mov	r2, r0
 800e37e:	460b      	mov	r3, r1
 800e380:	4680      	mov	r8, r0
 800e382:	4689      	mov	r9, r1
 800e384:	f7f2 f958 	bl	8000638 <__aeabi_dmul>
 800e388:	a371      	add	r3, pc, #452	@ (adr r3, 800e550 <atan+0x2a8>)
 800e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38e:	4606      	mov	r6, r0
 800e390:	460f      	mov	r7, r1
 800e392:	f7f2 f951 	bl	8000638 <__aeabi_dmul>
 800e396:	a370      	add	r3, pc, #448	@ (adr r3, 800e558 <atan+0x2b0>)
 800e398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e39c:	f7f1 ff96 	bl	80002cc <__adddf3>
 800e3a0:	4632      	mov	r2, r6
 800e3a2:	463b      	mov	r3, r7
 800e3a4:	f7f2 f948 	bl	8000638 <__aeabi_dmul>
 800e3a8:	a36d      	add	r3, pc, #436	@ (adr r3, 800e560 <atan+0x2b8>)
 800e3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3ae:	f7f1 ff8d 	bl	80002cc <__adddf3>
 800e3b2:	4632      	mov	r2, r6
 800e3b4:	463b      	mov	r3, r7
 800e3b6:	f7f2 f93f 	bl	8000638 <__aeabi_dmul>
 800e3ba:	a36b      	add	r3, pc, #428	@ (adr r3, 800e568 <atan+0x2c0>)
 800e3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c0:	f7f1 ff84 	bl	80002cc <__adddf3>
 800e3c4:	4632      	mov	r2, r6
 800e3c6:	463b      	mov	r3, r7
 800e3c8:	f7f2 f936 	bl	8000638 <__aeabi_dmul>
 800e3cc:	a368      	add	r3, pc, #416	@ (adr r3, 800e570 <atan+0x2c8>)
 800e3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d2:	f7f1 ff7b 	bl	80002cc <__adddf3>
 800e3d6:	4632      	mov	r2, r6
 800e3d8:	463b      	mov	r3, r7
 800e3da:	f7f2 f92d 	bl	8000638 <__aeabi_dmul>
 800e3de:	a366      	add	r3, pc, #408	@ (adr r3, 800e578 <atan+0x2d0>)
 800e3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e4:	f7f1 ff72 	bl	80002cc <__adddf3>
 800e3e8:	4642      	mov	r2, r8
 800e3ea:	464b      	mov	r3, r9
 800e3ec:	f7f2 f924 	bl	8000638 <__aeabi_dmul>
 800e3f0:	a363      	add	r3, pc, #396	@ (adr r3, 800e580 <atan+0x2d8>)
 800e3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f6:	4680      	mov	r8, r0
 800e3f8:	4689      	mov	r9, r1
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	4639      	mov	r1, r7
 800e3fe:	f7f2 f91b 	bl	8000638 <__aeabi_dmul>
 800e402:	a361      	add	r3, pc, #388	@ (adr r3, 800e588 <atan+0x2e0>)
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	f7f1 ff5e 	bl	80002c8 <__aeabi_dsub>
 800e40c:	4632      	mov	r2, r6
 800e40e:	463b      	mov	r3, r7
 800e410:	f7f2 f912 	bl	8000638 <__aeabi_dmul>
 800e414:	a35e      	add	r3, pc, #376	@ (adr r3, 800e590 <atan+0x2e8>)
 800e416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41a:	f7f1 ff55 	bl	80002c8 <__aeabi_dsub>
 800e41e:	4632      	mov	r2, r6
 800e420:	463b      	mov	r3, r7
 800e422:	f7f2 f909 	bl	8000638 <__aeabi_dmul>
 800e426:	a35c      	add	r3, pc, #368	@ (adr r3, 800e598 <atan+0x2f0>)
 800e428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42c:	f7f1 ff4c 	bl	80002c8 <__aeabi_dsub>
 800e430:	4632      	mov	r2, r6
 800e432:	463b      	mov	r3, r7
 800e434:	f7f2 f900 	bl	8000638 <__aeabi_dmul>
 800e438:	a359      	add	r3, pc, #356	@ (adr r3, 800e5a0 <atan+0x2f8>)
 800e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43e:	f7f1 ff43 	bl	80002c8 <__aeabi_dsub>
 800e442:	4632      	mov	r2, r6
 800e444:	463b      	mov	r3, r7
 800e446:	f7f2 f8f7 	bl	8000638 <__aeabi_dmul>
 800e44a:	4602      	mov	r2, r0
 800e44c:	460b      	mov	r3, r1
 800e44e:	4640      	mov	r0, r8
 800e450:	4649      	mov	r1, r9
 800e452:	f7f1 ff3b 	bl	80002cc <__adddf3>
 800e456:	4622      	mov	r2, r4
 800e458:	462b      	mov	r3, r5
 800e45a:	f7f2 f8ed 	bl	8000638 <__aeabi_dmul>
 800e45e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e462:	4602      	mov	r2, r0
 800e464:	460b      	mov	r3, r1
 800e466:	d148      	bne.n	800e4fa <atan+0x252>
 800e468:	4620      	mov	r0, r4
 800e46a:	4629      	mov	r1, r5
 800e46c:	f7f1 ff2c 	bl	80002c8 <__aeabi_dsub>
 800e470:	e72f      	b.n	800e2d2 <atan+0x2a>
 800e472:	4b52      	ldr	r3, [pc, #328]	@ (800e5bc <atan+0x314>)
 800e474:	2200      	movs	r2, #0
 800e476:	4620      	mov	r0, r4
 800e478:	4629      	mov	r1, r5
 800e47a:	f7f1 ff25 	bl	80002c8 <__aeabi_dsub>
 800e47e:	4b4f      	ldr	r3, [pc, #316]	@ (800e5bc <atan+0x314>)
 800e480:	4606      	mov	r6, r0
 800e482:	460f      	mov	r7, r1
 800e484:	2200      	movs	r2, #0
 800e486:	4620      	mov	r0, r4
 800e488:	4629      	mov	r1, r5
 800e48a:	f7f1 ff1f 	bl	80002cc <__adddf3>
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	4630      	mov	r0, r6
 800e494:	4639      	mov	r1, r7
 800e496:	f7f2 f9f9 	bl	800088c <__aeabi_ddiv>
 800e49a:	f04f 0a01 	mov.w	sl, #1
 800e49e:	4604      	mov	r4, r0
 800e4a0:	460d      	mov	r5, r1
 800e4a2:	e765      	b.n	800e370 <atan+0xc8>
 800e4a4:	4b47      	ldr	r3, [pc, #284]	@ (800e5c4 <atan+0x31c>)
 800e4a6:	429e      	cmp	r6, r3
 800e4a8:	d21c      	bcs.n	800e4e4 <atan+0x23c>
 800e4aa:	4b47      	ldr	r3, [pc, #284]	@ (800e5c8 <atan+0x320>)
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	f7f1 ff09 	bl	80002c8 <__aeabi_dsub>
 800e4b6:	4b44      	ldr	r3, [pc, #272]	@ (800e5c8 <atan+0x320>)
 800e4b8:	4606      	mov	r6, r0
 800e4ba:	460f      	mov	r7, r1
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4620      	mov	r0, r4
 800e4c0:	4629      	mov	r1, r5
 800e4c2:	f7f2 f8b9 	bl	8000638 <__aeabi_dmul>
 800e4c6:	4b3d      	ldr	r3, [pc, #244]	@ (800e5bc <atan+0x314>)
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	f7f1 feff 	bl	80002cc <__adddf3>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	4639      	mov	r1, r7
 800e4d6:	f7f2 f9d9 	bl	800088c <__aeabi_ddiv>
 800e4da:	f04f 0a02 	mov.w	sl, #2
 800e4de:	4604      	mov	r4, r0
 800e4e0:	460d      	mov	r5, r1
 800e4e2:	e745      	b.n	800e370 <atan+0xc8>
 800e4e4:	4622      	mov	r2, r4
 800e4e6:	462b      	mov	r3, r5
 800e4e8:	4938      	ldr	r1, [pc, #224]	@ (800e5cc <atan+0x324>)
 800e4ea:	2000      	movs	r0, #0
 800e4ec:	f7f2 f9ce 	bl	800088c <__aeabi_ddiv>
 800e4f0:	f04f 0a03 	mov.w	sl, #3
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	460d      	mov	r5, r1
 800e4f8:	e73a      	b.n	800e370 <atan+0xc8>
 800e4fa:	4b35      	ldr	r3, [pc, #212]	@ (800e5d0 <atan+0x328>)
 800e4fc:	4e35      	ldr	r6, [pc, #212]	@ (800e5d4 <atan+0x32c>)
 800e4fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e506:	f7f1 fedf 	bl	80002c8 <__aeabi_dsub>
 800e50a:	4622      	mov	r2, r4
 800e50c:	462b      	mov	r3, r5
 800e50e:	f7f1 fedb 	bl	80002c8 <__aeabi_dsub>
 800e512:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e51e:	f7f1 fed3 	bl	80002c8 <__aeabi_dsub>
 800e522:	f1bb 0f00 	cmp.w	fp, #0
 800e526:	4604      	mov	r4, r0
 800e528:	460d      	mov	r5, r1
 800e52a:	f6bf aedc 	bge.w	800e2e6 <atan+0x3e>
 800e52e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e532:	461d      	mov	r5, r3
 800e534:	e6d7      	b.n	800e2e6 <atan+0x3e>
 800e536:	a51c      	add	r5, pc, #112	@ (adr r5, 800e5a8 <atan+0x300>)
 800e538:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e53c:	e6d3      	b.n	800e2e6 <atan+0x3e>
 800e53e:	bf00      	nop
 800e540:	54442d18 	.word	0x54442d18
 800e544:	3ff921fb 	.word	0x3ff921fb
 800e548:	8800759c 	.word	0x8800759c
 800e54c:	7e37e43c 	.word	0x7e37e43c
 800e550:	e322da11 	.word	0xe322da11
 800e554:	3f90ad3a 	.word	0x3f90ad3a
 800e558:	24760deb 	.word	0x24760deb
 800e55c:	3fa97b4b 	.word	0x3fa97b4b
 800e560:	a0d03d51 	.word	0xa0d03d51
 800e564:	3fb10d66 	.word	0x3fb10d66
 800e568:	c54c206e 	.word	0xc54c206e
 800e56c:	3fb745cd 	.word	0x3fb745cd
 800e570:	920083ff 	.word	0x920083ff
 800e574:	3fc24924 	.word	0x3fc24924
 800e578:	5555550d 	.word	0x5555550d
 800e57c:	3fd55555 	.word	0x3fd55555
 800e580:	2c6a6c2f 	.word	0x2c6a6c2f
 800e584:	bfa2b444 	.word	0xbfa2b444
 800e588:	52defd9a 	.word	0x52defd9a
 800e58c:	3fadde2d 	.word	0x3fadde2d
 800e590:	af749a6d 	.word	0xaf749a6d
 800e594:	3fb3b0f2 	.word	0x3fb3b0f2
 800e598:	fe231671 	.word	0xfe231671
 800e59c:	3fbc71c6 	.word	0x3fbc71c6
 800e5a0:	9998ebc4 	.word	0x9998ebc4
 800e5a4:	3fc99999 	.word	0x3fc99999
 800e5a8:	54442d18 	.word	0x54442d18
 800e5ac:	bff921fb 	.word	0xbff921fb
 800e5b0:	440fffff 	.word	0x440fffff
 800e5b4:	7ff00000 	.word	0x7ff00000
 800e5b8:	3fdbffff 	.word	0x3fdbffff
 800e5bc:	3ff00000 	.word	0x3ff00000
 800e5c0:	3ff2ffff 	.word	0x3ff2ffff
 800e5c4:	40038000 	.word	0x40038000
 800e5c8:	3ff80000 	.word	0x3ff80000
 800e5cc:	bff00000 	.word	0xbff00000
 800e5d0:	08013140 	.word	0x08013140
 800e5d4:	08013160 	.word	0x08013160

0800e5d8 <fabs>:
 800e5d8:	ec51 0b10 	vmov	r0, r1, d0
 800e5dc:	4602      	mov	r2, r0
 800e5de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e5e2:	ec43 2b10 	vmov	d0, r2, r3
 800e5e6:	4770      	bx	lr

0800e5e8 <realloc>:
 800e5e8:	4b02      	ldr	r3, [pc, #8]	@ (800e5f4 <realloc+0xc>)
 800e5ea:	460a      	mov	r2, r1
 800e5ec:	4601      	mov	r1, r0
 800e5ee:	6818      	ldr	r0, [r3, #0]
 800e5f0:	f000 b802 	b.w	800e5f8 <_realloc_r>
 800e5f4:	2000002c 	.word	0x2000002c

0800e5f8 <_realloc_r>:
 800e5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5fc:	4680      	mov	r8, r0
 800e5fe:	4615      	mov	r5, r2
 800e600:	460c      	mov	r4, r1
 800e602:	b921      	cbnz	r1, 800e60e <_realloc_r+0x16>
 800e604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e608:	4611      	mov	r1, r2
 800e60a:	f001 bf09 	b.w	8010420 <_malloc_r>
 800e60e:	b92a      	cbnz	r2, 800e61c <_realloc_r+0x24>
 800e610:	f001 fe92 	bl	8010338 <_free_r>
 800e614:	2400      	movs	r4, #0
 800e616:	4620      	mov	r0, r4
 800e618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e61c:	f002 fc3e 	bl	8010e9c <_malloc_usable_size_r>
 800e620:	4285      	cmp	r5, r0
 800e622:	4606      	mov	r6, r0
 800e624:	d802      	bhi.n	800e62c <_realloc_r+0x34>
 800e626:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e62a:	d8f4      	bhi.n	800e616 <_realloc_r+0x1e>
 800e62c:	4629      	mov	r1, r5
 800e62e:	4640      	mov	r0, r8
 800e630:	f001 fef6 	bl	8010420 <_malloc_r>
 800e634:	4607      	mov	r7, r0
 800e636:	2800      	cmp	r0, #0
 800e638:	d0ec      	beq.n	800e614 <_realloc_r+0x1c>
 800e63a:	42b5      	cmp	r5, r6
 800e63c:	462a      	mov	r2, r5
 800e63e:	4621      	mov	r1, r4
 800e640:	bf28      	it	cs
 800e642:	4632      	movcs	r2, r6
 800e644:	f001 f817 	bl	800f676 <memcpy>
 800e648:	4621      	mov	r1, r4
 800e64a:	4640      	mov	r0, r8
 800e64c:	f001 fe74 	bl	8010338 <_free_r>
 800e650:	463c      	mov	r4, r7
 800e652:	e7e0      	b.n	800e616 <_realloc_r+0x1e>

0800e654 <__cvt>:
 800e654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e658:	ec57 6b10 	vmov	r6, r7, d0
 800e65c:	2f00      	cmp	r7, #0
 800e65e:	460c      	mov	r4, r1
 800e660:	4619      	mov	r1, r3
 800e662:	463b      	mov	r3, r7
 800e664:	bfbb      	ittet	lt
 800e666:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e66a:	461f      	movlt	r7, r3
 800e66c:	2300      	movge	r3, #0
 800e66e:	232d      	movlt	r3, #45	@ 0x2d
 800e670:	700b      	strb	r3, [r1, #0]
 800e672:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e674:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e678:	4691      	mov	r9, r2
 800e67a:	f023 0820 	bic.w	r8, r3, #32
 800e67e:	bfbc      	itt	lt
 800e680:	4632      	movlt	r2, r6
 800e682:	4616      	movlt	r6, r2
 800e684:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e688:	d005      	beq.n	800e696 <__cvt+0x42>
 800e68a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e68e:	d100      	bne.n	800e692 <__cvt+0x3e>
 800e690:	3401      	adds	r4, #1
 800e692:	2102      	movs	r1, #2
 800e694:	e000      	b.n	800e698 <__cvt+0x44>
 800e696:	2103      	movs	r1, #3
 800e698:	ab03      	add	r3, sp, #12
 800e69a:	9301      	str	r3, [sp, #4]
 800e69c:	ab02      	add	r3, sp, #8
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	ec47 6b10 	vmov	d0, r6, r7
 800e6a4:	4653      	mov	r3, sl
 800e6a6:	4622      	mov	r2, r4
 800e6a8:	f001 f882 	bl	800f7b0 <_dtoa_r>
 800e6ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e6b0:	4605      	mov	r5, r0
 800e6b2:	d119      	bne.n	800e6e8 <__cvt+0x94>
 800e6b4:	f019 0f01 	tst.w	r9, #1
 800e6b8:	d00e      	beq.n	800e6d8 <__cvt+0x84>
 800e6ba:	eb00 0904 	add.w	r9, r0, r4
 800e6be:	2200      	movs	r2, #0
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	f7f2 fa1f 	bl	8000b08 <__aeabi_dcmpeq>
 800e6ca:	b108      	cbz	r0, 800e6d0 <__cvt+0x7c>
 800e6cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6d0:	2230      	movs	r2, #48	@ 0x30
 800e6d2:	9b03      	ldr	r3, [sp, #12]
 800e6d4:	454b      	cmp	r3, r9
 800e6d6:	d31e      	bcc.n	800e716 <__cvt+0xc2>
 800e6d8:	9b03      	ldr	r3, [sp, #12]
 800e6da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e6dc:	1b5b      	subs	r3, r3, r5
 800e6de:	4628      	mov	r0, r5
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	b004      	add	sp, #16
 800e6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e6ec:	eb00 0904 	add.w	r9, r0, r4
 800e6f0:	d1e5      	bne.n	800e6be <__cvt+0x6a>
 800e6f2:	7803      	ldrb	r3, [r0, #0]
 800e6f4:	2b30      	cmp	r3, #48	@ 0x30
 800e6f6:	d10a      	bne.n	800e70e <__cvt+0xba>
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	4639      	mov	r1, r7
 800e700:	f7f2 fa02 	bl	8000b08 <__aeabi_dcmpeq>
 800e704:	b918      	cbnz	r0, 800e70e <__cvt+0xba>
 800e706:	f1c4 0401 	rsb	r4, r4, #1
 800e70a:	f8ca 4000 	str.w	r4, [sl]
 800e70e:	f8da 3000 	ldr.w	r3, [sl]
 800e712:	4499      	add	r9, r3
 800e714:	e7d3      	b.n	800e6be <__cvt+0x6a>
 800e716:	1c59      	adds	r1, r3, #1
 800e718:	9103      	str	r1, [sp, #12]
 800e71a:	701a      	strb	r2, [r3, #0]
 800e71c:	e7d9      	b.n	800e6d2 <__cvt+0x7e>

0800e71e <__exponent>:
 800e71e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e720:	2900      	cmp	r1, #0
 800e722:	bfba      	itte	lt
 800e724:	4249      	neglt	r1, r1
 800e726:	232d      	movlt	r3, #45	@ 0x2d
 800e728:	232b      	movge	r3, #43	@ 0x2b
 800e72a:	2909      	cmp	r1, #9
 800e72c:	7002      	strb	r2, [r0, #0]
 800e72e:	7043      	strb	r3, [r0, #1]
 800e730:	dd29      	ble.n	800e786 <__exponent+0x68>
 800e732:	f10d 0307 	add.w	r3, sp, #7
 800e736:	461d      	mov	r5, r3
 800e738:	270a      	movs	r7, #10
 800e73a:	461a      	mov	r2, r3
 800e73c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e740:	fb07 1416 	mls	r4, r7, r6, r1
 800e744:	3430      	adds	r4, #48	@ 0x30
 800e746:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e74a:	460c      	mov	r4, r1
 800e74c:	2c63      	cmp	r4, #99	@ 0x63
 800e74e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e752:	4631      	mov	r1, r6
 800e754:	dcf1      	bgt.n	800e73a <__exponent+0x1c>
 800e756:	3130      	adds	r1, #48	@ 0x30
 800e758:	1e94      	subs	r4, r2, #2
 800e75a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e75e:	1c41      	adds	r1, r0, #1
 800e760:	4623      	mov	r3, r4
 800e762:	42ab      	cmp	r3, r5
 800e764:	d30a      	bcc.n	800e77c <__exponent+0x5e>
 800e766:	f10d 0309 	add.w	r3, sp, #9
 800e76a:	1a9b      	subs	r3, r3, r2
 800e76c:	42ac      	cmp	r4, r5
 800e76e:	bf88      	it	hi
 800e770:	2300      	movhi	r3, #0
 800e772:	3302      	adds	r3, #2
 800e774:	4403      	add	r3, r0
 800e776:	1a18      	subs	r0, r3, r0
 800e778:	b003      	add	sp, #12
 800e77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e77c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e780:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e784:	e7ed      	b.n	800e762 <__exponent+0x44>
 800e786:	2330      	movs	r3, #48	@ 0x30
 800e788:	3130      	adds	r1, #48	@ 0x30
 800e78a:	7083      	strb	r3, [r0, #2]
 800e78c:	70c1      	strb	r1, [r0, #3]
 800e78e:	1d03      	adds	r3, r0, #4
 800e790:	e7f1      	b.n	800e776 <__exponent+0x58>
	...

0800e794 <_printf_float>:
 800e794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e798:	b08d      	sub	sp, #52	@ 0x34
 800e79a:	460c      	mov	r4, r1
 800e79c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e7a0:	4616      	mov	r6, r2
 800e7a2:	461f      	mov	r7, r3
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	f000 feef 	bl	800f588 <_localeconv_r>
 800e7aa:	6803      	ldr	r3, [r0, #0]
 800e7ac:	9304      	str	r3, [sp, #16]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f7f1 fd7e 	bl	80002b0 <strlen>
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e7b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e7bc:	9005      	str	r0, [sp, #20]
 800e7be:	3307      	adds	r3, #7
 800e7c0:	f023 0307 	bic.w	r3, r3, #7
 800e7c4:	f103 0208 	add.w	r2, r3, #8
 800e7c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e7cc:	f8d4 b000 	ldr.w	fp, [r4]
 800e7d0:	f8c8 2000 	str.w	r2, [r8]
 800e7d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e7d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e7dc:	9307      	str	r3, [sp, #28]
 800e7de:	f8cd 8018 	str.w	r8, [sp, #24]
 800e7e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e7e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7ea:	4b9c      	ldr	r3, [pc, #624]	@ (800ea5c <_printf_float+0x2c8>)
 800e7ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f0:	f7f2 f9bc 	bl	8000b6c <__aeabi_dcmpun>
 800e7f4:	bb70      	cbnz	r0, 800e854 <_printf_float+0xc0>
 800e7f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7fa:	4b98      	ldr	r3, [pc, #608]	@ (800ea5c <_printf_float+0x2c8>)
 800e7fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e800:	f7f2 f996 	bl	8000b30 <__aeabi_dcmple>
 800e804:	bb30      	cbnz	r0, 800e854 <_printf_float+0xc0>
 800e806:	2200      	movs	r2, #0
 800e808:	2300      	movs	r3, #0
 800e80a:	4640      	mov	r0, r8
 800e80c:	4649      	mov	r1, r9
 800e80e:	f7f2 f985 	bl	8000b1c <__aeabi_dcmplt>
 800e812:	b110      	cbz	r0, 800e81a <_printf_float+0x86>
 800e814:	232d      	movs	r3, #45	@ 0x2d
 800e816:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e81a:	4a91      	ldr	r2, [pc, #580]	@ (800ea60 <_printf_float+0x2cc>)
 800e81c:	4b91      	ldr	r3, [pc, #580]	@ (800ea64 <_printf_float+0x2d0>)
 800e81e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e822:	bf94      	ite	ls
 800e824:	4690      	movls	r8, r2
 800e826:	4698      	movhi	r8, r3
 800e828:	2303      	movs	r3, #3
 800e82a:	6123      	str	r3, [r4, #16]
 800e82c:	f02b 0304 	bic.w	r3, fp, #4
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	f04f 0900 	mov.w	r9, #0
 800e836:	9700      	str	r7, [sp, #0]
 800e838:	4633      	mov	r3, r6
 800e83a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e83c:	4621      	mov	r1, r4
 800e83e:	4628      	mov	r0, r5
 800e840:	f000 f9d2 	bl	800ebe8 <_printf_common>
 800e844:	3001      	adds	r0, #1
 800e846:	f040 808d 	bne.w	800e964 <_printf_float+0x1d0>
 800e84a:	f04f 30ff 	mov.w	r0, #4294967295
 800e84e:	b00d      	add	sp, #52	@ 0x34
 800e850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e854:	4642      	mov	r2, r8
 800e856:	464b      	mov	r3, r9
 800e858:	4640      	mov	r0, r8
 800e85a:	4649      	mov	r1, r9
 800e85c:	f7f2 f986 	bl	8000b6c <__aeabi_dcmpun>
 800e860:	b140      	cbz	r0, 800e874 <_printf_float+0xe0>
 800e862:	464b      	mov	r3, r9
 800e864:	2b00      	cmp	r3, #0
 800e866:	bfbc      	itt	lt
 800e868:	232d      	movlt	r3, #45	@ 0x2d
 800e86a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e86e:	4a7e      	ldr	r2, [pc, #504]	@ (800ea68 <_printf_float+0x2d4>)
 800e870:	4b7e      	ldr	r3, [pc, #504]	@ (800ea6c <_printf_float+0x2d8>)
 800e872:	e7d4      	b.n	800e81e <_printf_float+0x8a>
 800e874:	6863      	ldr	r3, [r4, #4]
 800e876:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e87a:	9206      	str	r2, [sp, #24]
 800e87c:	1c5a      	adds	r2, r3, #1
 800e87e:	d13b      	bne.n	800e8f8 <_printf_float+0x164>
 800e880:	2306      	movs	r3, #6
 800e882:	6063      	str	r3, [r4, #4]
 800e884:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e888:	2300      	movs	r3, #0
 800e88a:	6022      	str	r2, [r4, #0]
 800e88c:	9303      	str	r3, [sp, #12]
 800e88e:	ab0a      	add	r3, sp, #40	@ 0x28
 800e890:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e894:	ab09      	add	r3, sp, #36	@ 0x24
 800e896:	9300      	str	r3, [sp, #0]
 800e898:	6861      	ldr	r1, [r4, #4]
 800e89a:	ec49 8b10 	vmov	d0, r8, r9
 800e89e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e8a2:	4628      	mov	r0, r5
 800e8a4:	f7ff fed6 	bl	800e654 <__cvt>
 800e8a8:	9b06      	ldr	r3, [sp, #24]
 800e8aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e8ac:	2b47      	cmp	r3, #71	@ 0x47
 800e8ae:	4680      	mov	r8, r0
 800e8b0:	d129      	bne.n	800e906 <_printf_float+0x172>
 800e8b2:	1cc8      	adds	r0, r1, #3
 800e8b4:	db02      	blt.n	800e8bc <_printf_float+0x128>
 800e8b6:	6863      	ldr	r3, [r4, #4]
 800e8b8:	4299      	cmp	r1, r3
 800e8ba:	dd41      	ble.n	800e940 <_printf_float+0x1ac>
 800e8bc:	f1aa 0a02 	sub.w	sl, sl, #2
 800e8c0:	fa5f fa8a 	uxtb.w	sl, sl
 800e8c4:	3901      	subs	r1, #1
 800e8c6:	4652      	mov	r2, sl
 800e8c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e8cc:	9109      	str	r1, [sp, #36]	@ 0x24
 800e8ce:	f7ff ff26 	bl	800e71e <__exponent>
 800e8d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e8d4:	1813      	adds	r3, r2, r0
 800e8d6:	2a01      	cmp	r2, #1
 800e8d8:	4681      	mov	r9, r0
 800e8da:	6123      	str	r3, [r4, #16]
 800e8dc:	dc02      	bgt.n	800e8e4 <_printf_float+0x150>
 800e8de:	6822      	ldr	r2, [r4, #0]
 800e8e0:	07d2      	lsls	r2, r2, #31
 800e8e2:	d501      	bpl.n	800e8e8 <_printf_float+0x154>
 800e8e4:	3301      	adds	r3, #1
 800e8e6:	6123      	str	r3, [r4, #16]
 800e8e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d0a2      	beq.n	800e836 <_printf_float+0xa2>
 800e8f0:	232d      	movs	r3, #45	@ 0x2d
 800e8f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8f6:	e79e      	b.n	800e836 <_printf_float+0xa2>
 800e8f8:	9a06      	ldr	r2, [sp, #24]
 800e8fa:	2a47      	cmp	r2, #71	@ 0x47
 800e8fc:	d1c2      	bne.n	800e884 <_printf_float+0xf0>
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d1c0      	bne.n	800e884 <_printf_float+0xf0>
 800e902:	2301      	movs	r3, #1
 800e904:	e7bd      	b.n	800e882 <_printf_float+0xee>
 800e906:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e90a:	d9db      	bls.n	800e8c4 <_printf_float+0x130>
 800e90c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e910:	d118      	bne.n	800e944 <_printf_float+0x1b0>
 800e912:	2900      	cmp	r1, #0
 800e914:	6863      	ldr	r3, [r4, #4]
 800e916:	dd0b      	ble.n	800e930 <_printf_float+0x19c>
 800e918:	6121      	str	r1, [r4, #16]
 800e91a:	b913      	cbnz	r3, 800e922 <_printf_float+0x18e>
 800e91c:	6822      	ldr	r2, [r4, #0]
 800e91e:	07d0      	lsls	r0, r2, #31
 800e920:	d502      	bpl.n	800e928 <_printf_float+0x194>
 800e922:	3301      	adds	r3, #1
 800e924:	440b      	add	r3, r1
 800e926:	6123      	str	r3, [r4, #16]
 800e928:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e92a:	f04f 0900 	mov.w	r9, #0
 800e92e:	e7db      	b.n	800e8e8 <_printf_float+0x154>
 800e930:	b913      	cbnz	r3, 800e938 <_printf_float+0x1a4>
 800e932:	6822      	ldr	r2, [r4, #0]
 800e934:	07d2      	lsls	r2, r2, #31
 800e936:	d501      	bpl.n	800e93c <_printf_float+0x1a8>
 800e938:	3302      	adds	r3, #2
 800e93a:	e7f4      	b.n	800e926 <_printf_float+0x192>
 800e93c:	2301      	movs	r3, #1
 800e93e:	e7f2      	b.n	800e926 <_printf_float+0x192>
 800e940:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e946:	4299      	cmp	r1, r3
 800e948:	db05      	blt.n	800e956 <_printf_float+0x1c2>
 800e94a:	6823      	ldr	r3, [r4, #0]
 800e94c:	6121      	str	r1, [r4, #16]
 800e94e:	07d8      	lsls	r0, r3, #31
 800e950:	d5ea      	bpl.n	800e928 <_printf_float+0x194>
 800e952:	1c4b      	adds	r3, r1, #1
 800e954:	e7e7      	b.n	800e926 <_printf_float+0x192>
 800e956:	2900      	cmp	r1, #0
 800e958:	bfd4      	ite	le
 800e95a:	f1c1 0202 	rsble	r2, r1, #2
 800e95e:	2201      	movgt	r2, #1
 800e960:	4413      	add	r3, r2
 800e962:	e7e0      	b.n	800e926 <_printf_float+0x192>
 800e964:	6823      	ldr	r3, [r4, #0]
 800e966:	055a      	lsls	r2, r3, #21
 800e968:	d407      	bmi.n	800e97a <_printf_float+0x1e6>
 800e96a:	6923      	ldr	r3, [r4, #16]
 800e96c:	4642      	mov	r2, r8
 800e96e:	4631      	mov	r1, r6
 800e970:	4628      	mov	r0, r5
 800e972:	47b8      	blx	r7
 800e974:	3001      	adds	r0, #1
 800e976:	d12b      	bne.n	800e9d0 <_printf_float+0x23c>
 800e978:	e767      	b.n	800e84a <_printf_float+0xb6>
 800e97a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e97e:	f240 80dd 	bls.w	800eb3c <_printf_float+0x3a8>
 800e982:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e986:	2200      	movs	r2, #0
 800e988:	2300      	movs	r3, #0
 800e98a:	f7f2 f8bd 	bl	8000b08 <__aeabi_dcmpeq>
 800e98e:	2800      	cmp	r0, #0
 800e990:	d033      	beq.n	800e9fa <_printf_float+0x266>
 800e992:	4a37      	ldr	r2, [pc, #220]	@ (800ea70 <_printf_float+0x2dc>)
 800e994:	2301      	movs	r3, #1
 800e996:	4631      	mov	r1, r6
 800e998:	4628      	mov	r0, r5
 800e99a:	47b8      	blx	r7
 800e99c:	3001      	adds	r0, #1
 800e99e:	f43f af54 	beq.w	800e84a <_printf_float+0xb6>
 800e9a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e9a6:	4543      	cmp	r3, r8
 800e9a8:	db02      	blt.n	800e9b0 <_printf_float+0x21c>
 800e9aa:	6823      	ldr	r3, [r4, #0]
 800e9ac:	07d8      	lsls	r0, r3, #31
 800e9ae:	d50f      	bpl.n	800e9d0 <_printf_float+0x23c>
 800e9b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9b4:	4631      	mov	r1, r6
 800e9b6:	4628      	mov	r0, r5
 800e9b8:	47b8      	blx	r7
 800e9ba:	3001      	adds	r0, #1
 800e9bc:	f43f af45 	beq.w	800e84a <_printf_float+0xb6>
 800e9c0:	f04f 0900 	mov.w	r9, #0
 800e9c4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e9c8:	f104 0a1a 	add.w	sl, r4, #26
 800e9cc:	45c8      	cmp	r8, r9
 800e9ce:	dc09      	bgt.n	800e9e4 <_printf_float+0x250>
 800e9d0:	6823      	ldr	r3, [r4, #0]
 800e9d2:	079b      	lsls	r3, r3, #30
 800e9d4:	f100 8103 	bmi.w	800ebde <_printf_float+0x44a>
 800e9d8:	68e0      	ldr	r0, [r4, #12]
 800e9da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9dc:	4298      	cmp	r0, r3
 800e9de:	bfb8      	it	lt
 800e9e0:	4618      	movlt	r0, r3
 800e9e2:	e734      	b.n	800e84e <_printf_float+0xba>
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	4652      	mov	r2, sl
 800e9e8:	4631      	mov	r1, r6
 800e9ea:	4628      	mov	r0, r5
 800e9ec:	47b8      	blx	r7
 800e9ee:	3001      	adds	r0, #1
 800e9f0:	f43f af2b 	beq.w	800e84a <_printf_float+0xb6>
 800e9f4:	f109 0901 	add.w	r9, r9, #1
 800e9f8:	e7e8      	b.n	800e9cc <_printf_float+0x238>
 800e9fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	dc39      	bgt.n	800ea74 <_printf_float+0x2e0>
 800ea00:	4a1b      	ldr	r2, [pc, #108]	@ (800ea70 <_printf_float+0x2dc>)
 800ea02:	2301      	movs	r3, #1
 800ea04:	4631      	mov	r1, r6
 800ea06:	4628      	mov	r0, r5
 800ea08:	47b8      	blx	r7
 800ea0a:	3001      	adds	r0, #1
 800ea0c:	f43f af1d 	beq.w	800e84a <_printf_float+0xb6>
 800ea10:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ea14:	ea59 0303 	orrs.w	r3, r9, r3
 800ea18:	d102      	bne.n	800ea20 <_printf_float+0x28c>
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	07d9      	lsls	r1, r3, #31
 800ea1e:	d5d7      	bpl.n	800e9d0 <_printf_float+0x23c>
 800ea20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea24:	4631      	mov	r1, r6
 800ea26:	4628      	mov	r0, r5
 800ea28:	47b8      	blx	r7
 800ea2a:	3001      	adds	r0, #1
 800ea2c:	f43f af0d 	beq.w	800e84a <_printf_float+0xb6>
 800ea30:	f04f 0a00 	mov.w	sl, #0
 800ea34:	f104 0b1a 	add.w	fp, r4, #26
 800ea38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea3a:	425b      	negs	r3, r3
 800ea3c:	4553      	cmp	r3, sl
 800ea3e:	dc01      	bgt.n	800ea44 <_printf_float+0x2b0>
 800ea40:	464b      	mov	r3, r9
 800ea42:	e793      	b.n	800e96c <_printf_float+0x1d8>
 800ea44:	2301      	movs	r3, #1
 800ea46:	465a      	mov	r2, fp
 800ea48:	4631      	mov	r1, r6
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	47b8      	blx	r7
 800ea4e:	3001      	adds	r0, #1
 800ea50:	f43f aefb 	beq.w	800e84a <_printf_float+0xb6>
 800ea54:	f10a 0a01 	add.w	sl, sl, #1
 800ea58:	e7ee      	b.n	800ea38 <_printf_float+0x2a4>
 800ea5a:	bf00      	nop
 800ea5c:	7fefffff 	.word	0x7fefffff
 800ea60:	08013180 	.word	0x08013180
 800ea64:	08013184 	.word	0x08013184
 800ea68:	08013188 	.word	0x08013188
 800ea6c:	0801318c 	.word	0x0801318c
 800ea70:	08013190 	.word	0x08013190
 800ea74:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ea76:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ea7a:	4553      	cmp	r3, sl
 800ea7c:	bfa8      	it	ge
 800ea7e:	4653      	movge	r3, sl
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	4699      	mov	r9, r3
 800ea84:	dc36      	bgt.n	800eaf4 <_printf_float+0x360>
 800ea86:	f04f 0b00 	mov.w	fp, #0
 800ea8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea8e:	f104 021a 	add.w	r2, r4, #26
 800ea92:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ea94:	9306      	str	r3, [sp, #24]
 800ea96:	eba3 0309 	sub.w	r3, r3, r9
 800ea9a:	455b      	cmp	r3, fp
 800ea9c:	dc31      	bgt.n	800eb02 <_printf_float+0x36e>
 800ea9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaa0:	459a      	cmp	sl, r3
 800eaa2:	dc3a      	bgt.n	800eb1a <_printf_float+0x386>
 800eaa4:	6823      	ldr	r3, [r4, #0]
 800eaa6:	07da      	lsls	r2, r3, #31
 800eaa8:	d437      	bmi.n	800eb1a <_printf_float+0x386>
 800eaaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaac:	ebaa 0903 	sub.w	r9, sl, r3
 800eab0:	9b06      	ldr	r3, [sp, #24]
 800eab2:	ebaa 0303 	sub.w	r3, sl, r3
 800eab6:	4599      	cmp	r9, r3
 800eab8:	bfa8      	it	ge
 800eaba:	4699      	movge	r9, r3
 800eabc:	f1b9 0f00 	cmp.w	r9, #0
 800eac0:	dc33      	bgt.n	800eb2a <_printf_float+0x396>
 800eac2:	f04f 0800 	mov.w	r8, #0
 800eac6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eaca:	f104 0b1a 	add.w	fp, r4, #26
 800eace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ead0:	ebaa 0303 	sub.w	r3, sl, r3
 800ead4:	eba3 0309 	sub.w	r3, r3, r9
 800ead8:	4543      	cmp	r3, r8
 800eada:	f77f af79 	ble.w	800e9d0 <_printf_float+0x23c>
 800eade:	2301      	movs	r3, #1
 800eae0:	465a      	mov	r2, fp
 800eae2:	4631      	mov	r1, r6
 800eae4:	4628      	mov	r0, r5
 800eae6:	47b8      	blx	r7
 800eae8:	3001      	adds	r0, #1
 800eaea:	f43f aeae 	beq.w	800e84a <_printf_float+0xb6>
 800eaee:	f108 0801 	add.w	r8, r8, #1
 800eaf2:	e7ec      	b.n	800eace <_printf_float+0x33a>
 800eaf4:	4642      	mov	r2, r8
 800eaf6:	4631      	mov	r1, r6
 800eaf8:	4628      	mov	r0, r5
 800eafa:	47b8      	blx	r7
 800eafc:	3001      	adds	r0, #1
 800eafe:	d1c2      	bne.n	800ea86 <_printf_float+0x2f2>
 800eb00:	e6a3      	b.n	800e84a <_printf_float+0xb6>
 800eb02:	2301      	movs	r3, #1
 800eb04:	4631      	mov	r1, r6
 800eb06:	4628      	mov	r0, r5
 800eb08:	9206      	str	r2, [sp, #24]
 800eb0a:	47b8      	blx	r7
 800eb0c:	3001      	adds	r0, #1
 800eb0e:	f43f ae9c 	beq.w	800e84a <_printf_float+0xb6>
 800eb12:	9a06      	ldr	r2, [sp, #24]
 800eb14:	f10b 0b01 	add.w	fp, fp, #1
 800eb18:	e7bb      	b.n	800ea92 <_printf_float+0x2fe>
 800eb1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb1e:	4631      	mov	r1, r6
 800eb20:	4628      	mov	r0, r5
 800eb22:	47b8      	blx	r7
 800eb24:	3001      	adds	r0, #1
 800eb26:	d1c0      	bne.n	800eaaa <_printf_float+0x316>
 800eb28:	e68f      	b.n	800e84a <_printf_float+0xb6>
 800eb2a:	9a06      	ldr	r2, [sp, #24]
 800eb2c:	464b      	mov	r3, r9
 800eb2e:	4442      	add	r2, r8
 800eb30:	4631      	mov	r1, r6
 800eb32:	4628      	mov	r0, r5
 800eb34:	47b8      	blx	r7
 800eb36:	3001      	adds	r0, #1
 800eb38:	d1c3      	bne.n	800eac2 <_printf_float+0x32e>
 800eb3a:	e686      	b.n	800e84a <_printf_float+0xb6>
 800eb3c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb40:	f1ba 0f01 	cmp.w	sl, #1
 800eb44:	dc01      	bgt.n	800eb4a <_printf_float+0x3b6>
 800eb46:	07db      	lsls	r3, r3, #31
 800eb48:	d536      	bpl.n	800ebb8 <_printf_float+0x424>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	4642      	mov	r2, r8
 800eb4e:	4631      	mov	r1, r6
 800eb50:	4628      	mov	r0, r5
 800eb52:	47b8      	blx	r7
 800eb54:	3001      	adds	r0, #1
 800eb56:	f43f ae78 	beq.w	800e84a <_printf_float+0xb6>
 800eb5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb5e:	4631      	mov	r1, r6
 800eb60:	4628      	mov	r0, r5
 800eb62:	47b8      	blx	r7
 800eb64:	3001      	adds	r0, #1
 800eb66:	f43f ae70 	beq.w	800e84a <_printf_float+0xb6>
 800eb6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eb6e:	2200      	movs	r2, #0
 800eb70:	2300      	movs	r3, #0
 800eb72:	f10a 3aff 	add.w	sl, sl, #4294967295
 800eb76:	f7f1 ffc7 	bl	8000b08 <__aeabi_dcmpeq>
 800eb7a:	b9c0      	cbnz	r0, 800ebae <_printf_float+0x41a>
 800eb7c:	4653      	mov	r3, sl
 800eb7e:	f108 0201 	add.w	r2, r8, #1
 800eb82:	4631      	mov	r1, r6
 800eb84:	4628      	mov	r0, r5
 800eb86:	47b8      	blx	r7
 800eb88:	3001      	adds	r0, #1
 800eb8a:	d10c      	bne.n	800eba6 <_printf_float+0x412>
 800eb8c:	e65d      	b.n	800e84a <_printf_float+0xb6>
 800eb8e:	2301      	movs	r3, #1
 800eb90:	465a      	mov	r2, fp
 800eb92:	4631      	mov	r1, r6
 800eb94:	4628      	mov	r0, r5
 800eb96:	47b8      	blx	r7
 800eb98:	3001      	adds	r0, #1
 800eb9a:	f43f ae56 	beq.w	800e84a <_printf_float+0xb6>
 800eb9e:	f108 0801 	add.w	r8, r8, #1
 800eba2:	45d0      	cmp	r8, sl
 800eba4:	dbf3      	blt.n	800eb8e <_printf_float+0x3fa>
 800eba6:	464b      	mov	r3, r9
 800eba8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ebac:	e6df      	b.n	800e96e <_printf_float+0x1da>
 800ebae:	f04f 0800 	mov.w	r8, #0
 800ebb2:	f104 0b1a 	add.w	fp, r4, #26
 800ebb6:	e7f4      	b.n	800eba2 <_printf_float+0x40e>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	4642      	mov	r2, r8
 800ebbc:	e7e1      	b.n	800eb82 <_printf_float+0x3ee>
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	464a      	mov	r2, r9
 800ebc2:	4631      	mov	r1, r6
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	47b8      	blx	r7
 800ebc8:	3001      	adds	r0, #1
 800ebca:	f43f ae3e 	beq.w	800e84a <_printf_float+0xb6>
 800ebce:	f108 0801 	add.w	r8, r8, #1
 800ebd2:	68e3      	ldr	r3, [r4, #12]
 800ebd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ebd6:	1a5b      	subs	r3, r3, r1
 800ebd8:	4543      	cmp	r3, r8
 800ebda:	dcf0      	bgt.n	800ebbe <_printf_float+0x42a>
 800ebdc:	e6fc      	b.n	800e9d8 <_printf_float+0x244>
 800ebde:	f04f 0800 	mov.w	r8, #0
 800ebe2:	f104 0919 	add.w	r9, r4, #25
 800ebe6:	e7f4      	b.n	800ebd2 <_printf_float+0x43e>

0800ebe8 <_printf_common>:
 800ebe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebec:	4616      	mov	r6, r2
 800ebee:	4698      	mov	r8, r3
 800ebf0:	688a      	ldr	r2, [r1, #8]
 800ebf2:	690b      	ldr	r3, [r1, #16]
 800ebf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ebf8:	4293      	cmp	r3, r2
 800ebfa:	bfb8      	it	lt
 800ebfc:	4613      	movlt	r3, r2
 800ebfe:	6033      	str	r3, [r6, #0]
 800ec00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ec04:	4607      	mov	r7, r0
 800ec06:	460c      	mov	r4, r1
 800ec08:	b10a      	cbz	r2, 800ec0e <_printf_common+0x26>
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	6033      	str	r3, [r6, #0]
 800ec0e:	6823      	ldr	r3, [r4, #0]
 800ec10:	0699      	lsls	r1, r3, #26
 800ec12:	bf42      	ittt	mi
 800ec14:	6833      	ldrmi	r3, [r6, #0]
 800ec16:	3302      	addmi	r3, #2
 800ec18:	6033      	strmi	r3, [r6, #0]
 800ec1a:	6825      	ldr	r5, [r4, #0]
 800ec1c:	f015 0506 	ands.w	r5, r5, #6
 800ec20:	d106      	bne.n	800ec30 <_printf_common+0x48>
 800ec22:	f104 0a19 	add.w	sl, r4, #25
 800ec26:	68e3      	ldr	r3, [r4, #12]
 800ec28:	6832      	ldr	r2, [r6, #0]
 800ec2a:	1a9b      	subs	r3, r3, r2
 800ec2c:	42ab      	cmp	r3, r5
 800ec2e:	dc26      	bgt.n	800ec7e <_printf_common+0x96>
 800ec30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ec34:	6822      	ldr	r2, [r4, #0]
 800ec36:	3b00      	subs	r3, #0
 800ec38:	bf18      	it	ne
 800ec3a:	2301      	movne	r3, #1
 800ec3c:	0692      	lsls	r2, r2, #26
 800ec3e:	d42b      	bmi.n	800ec98 <_printf_common+0xb0>
 800ec40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ec44:	4641      	mov	r1, r8
 800ec46:	4638      	mov	r0, r7
 800ec48:	47c8      	blx	r9
 800ec4a:	3001      	adds	r0, #1
 800ec4c:	d01e      	beq.n	800ec8c <_printf_common+0xa4>
 800ec4e:	6823      	ldr	r3, [r4, #0]
 800ec50:	6922      	ldr	r2, [r4, #16]
 800ec52:	f003 0306 	and.w	r3, r3, #6
 800ec56:	2b04      	cmp	r3, #4
 800ec58:	bf02      	ittt	eq
 800ec5a:	68e5      	ldreq	r5, [r4, #12]
 800ec5c:	6833      	ldreq	r3, [r6, #0]
 800ec5e:	1aed      	subeq	r5, r5, r3
 800ec60:	68a3      	ldr	r3, [r4, #8]
 800ec62:	bf0c      	ite	eq
 800ec64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec68:	2500      	movne	r5, #0
 800ec6a:	4293      	cmp	r3, r2
 800ec6c:	bfc4      	itt	gt
 800ec6e:	1a9b      	subgt	r3, r3, r2
 800ec70:	18ed      	addgt	r5, r5, r3
 800ec72:	2600      	movs	r6, #0
 800ec74:	341a      	adds	r4, #26
 800ec76:	42b5      	cmp	r5, r6
 800ec78:	d11a      	bne.n	800ecb0 <_printf_common+0xc8>
 800ec7a:	2000      	movs	r0, #0
 800ec7c:	e008      	b.n	800ec90 <_printf_common+0xa8>
 800ec7e:	2301      	movs	r3, #1
 800ec80:	4652      	mov	r2, sl
 800ec82:	4641      	mov	r1, r8
 800ec84:	4638      	mov	r0, r7
 800ec86:	47c8      	blx	r9
 800ec88:	3001      	adds	r0, #1
 800ec8a:	d103      	bne.n	800ec94 <_printf_common+0xac>
 800ec8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec94:	3501      	adds	r5, #1
 800ec96:	e7c6      	b.n	800ec26 <_printf_common+0x3e>
 800ec98:	18e1      	adds	r1, r4, r3
 800ec9a:	1c5a      	adds	r2, r3, #1
 800ec9c:	2030      	movs	r0, #48	@ 0x30
 800ec9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eca2:	4422      	add	r2, r4
 800eca4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eca8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ecac:	3302      	adds	r3, #2
 800ecae:	e7c7      	b.n	800ec40 <_printf_common+0x58>
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	4641      	mov	r1, r8
 800ecb6:	4638      	mov	r0, r7
 800ecb8:	47c8      	blx	r9
 800ecba:	3001      	adds	r0, #1
 800ecbc:	d0e6      	beq.n	800ec8c <_printf_common+0xa4>
 800ecbe:	3601      	adds	r6, #1
 800ecc0:	e7d9      	b.n	800ec76 <_printf_common+0x8e>
	...

0800ecc4 <_printf_i>:
 800ecc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecc8:	7e0f      	ldrb	r7, [r1, #24]
 800ecca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eccc:	2f78      	cmp	r7, #120	@ 0x78
 800ecce:	4691      	mov	r9, r2
 800ecd0:	4680      	mov	r8, r0
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	469a      	mov	sl, r3
 800ecd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ecda:	d807      	bhi.n	800ecec <_printf_i+0x28>
 800ecdc:	2f62      	cmp	r7, #98	@ 0x62
 800ecde:	d80a      	bhi.n	800ecf6 <_printf_i+0x32>
 800ece0:	2f00      	cmp	r7, #0
 800ece2:	f000 80d2 	beq.w	800ee8a <_printf_i+0x1c6>
 800ece6:	2f58      	cmp	r7, #88	@ 0x58
 800ece8:	f000 80b9 	beq.w	800ee5e <_printf_i+0x19a>
 800ecec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ecf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ecf4:	e03a      	b.n	800ed6c <_printf_i+0xa8>
 800ecf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ecfa:	2b15      	cmp	r3, #21
 800ecfc:	d8f6      	bhi.n	800ecec <_printf_i+0x28>
 800ecfe:	a101      	add	r1, pc, #4	@ (adr r1, 800ed04 <_printf_i+0x40>)
 800ed00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed04:	0800ed5d 	.word	0x0800ed5d
 800ed08:	0800ed71 	.word	0x0800ed71
 800ed0c:	0800eced 	.word	0x0800eced
 800ed10:	0800eced 	.word	0x0800eced
 800ed14:	0800eced 	.word	0x0800eced
 800ed18:	0800eced 	.word	0x0800eced
 800ed1c:	0800ed71 	.word	0x0800ed71
 800ed20:	0800eced 	.word	0x0800eced
 800ed24:	0800eced 	.word	0x0800eced
 800ed28:	0800eced 	.word	0x0800eced
 800ed2c:	0800eced 	.word	0x0800eced
 800ed30:	0800ee71 	.word	0x0800ee71
 800ed34:	0800ed9b 	.word	0x0800ed9b
 800ed38:	0800ee2b 	.word	0x0800ee2b
 800ed3c:	0800eced 	.word	0x0800eced
 800ed40:	0800eced 	.word	0x0800eced
 800ed44:	0800ee93 	.word	0x0800ee93
 800ed48:	0800eced 	.word	0x0800eced
 800ed4c:	0800ed9b 	.word	0x0800ed9b
 800ed50:	0800eced 	.word	0x0800eced
 800ed54:	0800eced 	.word	0x0800eced
 800ed58:	0800ee33 	.word	0x0800ee33
 800ed5c:	6833      	ldr	r3, [r6, #0]
 800ed5e:	1d1a      	adds	r2, r3, #4
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	6032      	str	r2, [r6, #0]
 800ed64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ed68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	e09d      	b.n	800eeac <_printf_i+0x1e8>
 800ed70:	6833      	ldr	r3, [r6, #0]
 800ed72:	6820      	ldr	r0, [r4, #0]
 800ed74:	1d19      	adds	r1, r3, #4
 800ed76:	6031      	str	r1, [r6, #0]
 800ed78:	0606      	lsls	r6, r0, #24
 800ed7a:	d501      	bpl.n	800ed80 <_printf_i+0xbc>
 800ed7c:	681d      	ldr	r5, [r3, #0]
 800ed7e:	e003      	b.n	800ed88 <_printf_i+0xc4>
 800ed80:	0645      	lsls	r5, r0, #25
 800ed82:	d5fb      	bpl.n	800ed7c <_printf_i+0xb8>
 800ed84:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ed88:	2d00      	cmp	r5, #0
 800ed8a:	da03      	bge.n	800ed94 <_printf_i+0xd0>
 800ed8c:	232d      	movs	r3, #45	@ 0x2d
 800ed8e:	426d      	negs	r5, r5
 800ed90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed94:	4859      	ldr	r0, [pc, #356]	@ (800eefc <_printf_i+0x238>)
 800ed96:	230a      	movs	r3, #10
 800ed98:	e011      	b.n	800edbe <_printf_i+0xfa>
 800ed9a:	6821      	ldr	r1, [r4, #0]
 800ed9c:	6833      	ldr	r3, [r6, #0]
 800ed9e:	0608      	lsls	r0, r1, #24
 800eda0:	f853 5b04 	ldr.w	r5, [r3], #4
 800eda4:	d402      	bmi.n	800edac <_printf_i+0xe8>
 800eda6:	0649      	lsls	r1, r1, #25
 800eda8:	bf48      	it	mi
 800edaa:	b2ad      	uxthmi	r5, r5
 800edac:	2f6f      	cmp	r7, #111	@ 0x6f
 800edae:	4853      	ldr	r0, [pc, #332]	@ (800eefc <_printf_i+0x238>)
 800edb0:	6033      	str	r3, [r6, #0]
 800edb2:	bf14      	ite	ne
 800edb4:	230a      	movne	r3, #10
 800edb6:	2308      	moveq	r3, #8
 800edb8:	2100      	movs	r1, #0
 800edba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800edbe:	6866      	ldr	r6, [r4, #4]
 800edc0:	60a6      	str	r6, [r4, #8]
 800edc2:	2e00      	cmp	r6, #0
 800edc4:	bfa2      	ittt	ge
 800edc6:	6821      	ldrge	r1, [r4, #0]
 800edc8:	f021 0104 	bicge.w	r1, r1, #4
 800edcc:	6021      	strge	r1, [r4, #0]
 800edce:	b90d      	cbnz	r5, 800edd4 <_printf_i+0x110>
 800edd0:	2e00      	cmp	r6, #0
 800edd2:	d04b      	beq.n	800ee6c <_printf_i+0x1a8>
 800edd4:	4616      	mov	r6, r2
 800edd6:	fbb5 f1f3 	udiv	r1, r5, r3
 800edda:	fb03 5711 	mls	r7, r3, r1, r5
 800edde:	5dc7      	ldrb	r7, [r0, r7]
 800ede0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ede4:	462f      	mov	r7, r5
 800ede6:	42bb      	cmp	r3, r7
 800ede8:	460d      	mov	r5, r1
 800edea:	d9f4      	bls.n	800edd6 <_printf_i+0x112>
 800edec:	2b08      	cmp	r3, #8
 800edee:	d10b      	bne.n	800ee08 <_printf_i+0x144>
 800edf0:	6823      	ldr	r3, [r4, #0]
 800edf2:	07df      	lsls	r7, r3, #31
 800edf4:	d508      	bpl.n	800ee08 <_printf_i+0x144>
 800edf6:	6923      	ldr	r3, [r4, #16]
 800edf8:	6861      	ldr	r1, [r4, #4]
 800edfa:	4299      	cmp	r1, r3
 800edfc:	bfde      	ittt	le
 800edfe:	2330      	movle	r3, #48	@ 0x30
 800ee00:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee04:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee08:	1b92      	subs	r2, r2, r6
 800ee0a:	6122      	str	r2, [r4, #16]
 800ee0c:	f8cd a000 	str.w	sl, [sp]
 800ee10:	464b      	mov	r3, r9
 800ee12:	aa03      	add	r2, sp, #12
 800ee14:	4621      	mov	r1, r4
 800ee16:	4640      	mov	r0, r8
 800ee18:	f7ff fee6 	bl	800ebe8 <_printf_common>
 800ee1c:	3001      	adds	r0, #1
 800ee1e:	d14a      	bne.n	800eeb6 <_printf_i+0x1f2>
 800ee20:	f04f 30ff 	mov.w	r0, #4294967295
 800ee24:	b004      	add	sp, #16
 800ee26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee2a:	6823      	ldr	r3, [r4, #0]
 800ee2c:	f043 0320 	orr.w	r3, r3, #32
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	4833      	ldr	r0, [pc, #204]	@ (800ef00 <_printf_i+0x23c>)
 800ee34:	2778      	movs	r7, #120	@ 0x78
 800ee36:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ee3a:	6823      	ldr	r3, [r4, #0]
 800ee3c:	6831      	ldr	r1, [r6, #0]
 800ee3e:	061f      	lsls	r7, r3, #24
 800ee40:	f851 5b04 	ldr.w	r5, [r1], #4
 800ee44:	d402      	bmi.n	800ee4c <_printf_i+0x188>
 800ee46:	065f      	lsls	r7, r3, #25
 800ee48:	bf48      	it	mi
 800ee4a:	b2ad      	uxthmi	r5, r5
 800ee4c:	6031      	str	r1, [r6, #0]
 800ee4e:	07d9      	lsls	r1, r3, #31
 800ee50:	bf44      	itt	mi
 800ee52:	f043 0320 	orrmi.w	r3, r3, #32
 800ee56:	6023      	strmi	r3, [r4, #0]
 800ee58:	b11d      	cbz	r5, 800ee62 <_printf_i+0x19e>
 800ee5a:	2310      	movs	r3, #16
 800ee5c:	e7ac      	b.n	800edb8 <_printf_i+0xf4>
 800ee5e:	4827      	ldr	r0, [pc, #156]	@ (800eefc <_printf_i+0x238>)
 800ee60:	e7e9      	b.n	800ee36 <_printf_i+0x172>
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	f023 0320 	bic.w	r3, r3, #32
 800ee68:	6023      	str	r3, [r4, #0]
 800ee6a:	e7f6      	b.n	800ee5a <_printf_i+0x196>
 800ee6c:	4616      	mov	r6, r2
 800ee6e:	e7bd      	b.n	800edec <_printf_i+0x128>
 800ee70:	6833      	ldr	r3, [r6, #0]
 800ee72:	6825      	ldr	r5, [r4, #0]
 800ee74:	6961      	ldr	r1, [r4, #20]
 800ee76:	1d18      	adds	r0, r3, #4
 800ee78:	6030      	str	r0, [r6, #0]
 800ee7a:	062e      	lsls	r6, r5, #24
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	d501      	bpl.n	800ee84 <_printf_i+0x1c0>
 800ee80:	6019      	str	r1, [r3, #0]
 800ee82:	e002      	b.n	800ee8a <_printf_i+0x1c6>
 800ee84:	0668      	lsls	r0, r5, #25
 800ee86:	d5fb      	bpl.n	800ee80 <_printf_i+0x1bc>
 800ee88:	8019      	strh	r1, [r3, #0]
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	6123      	str	r3, [r4, #16]
 800ee8e:	4616      	mov	r6, r2
 800ee90:	e7bc      	b.n	800ee0c <_printf_i+0x148>
 800ee92:	6833      	ldr	r3, [r6, #0]
 800ee94:	1d1a      	adds	r2, r3, #4
 800ee96:	6032      	str	r2, [r6, #0]
 800ee98:	681e      	ldr	r6, [r3, #0]
 800ee9a:	6862      	ldr	r2, [r4, #4]
 800ee9c:	2100      	movs	r1, #0
 800ee9e:	4630      	mov	r0, r6
 800eea0:	f7f1 f9b6 	bl	8000210 <memchr>
 800eea4:	b108      	cbz	r0, 800eeaa <_printf_i+0x1e6>
 800eea6:	1b80      	subs	r0, r0, r6
 800eea8:	6060      	str	r0, [r4, #4]
 800eeaa:	6863      	ldr	r3, [r4, #4]
 800eeac:	6123      	str	r3, [r4, #16]
 800eeae:	2300      	movs	r3, #0
 800eeb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eeb4:	e7aa      	b.n	800ee0c <_printf_i+0x148>
 800eeb6:	6923      	ldr	r3, [r4, #16]
 800eeb8:	4632      	mov	r2, r6
 800eeba:	4649      	mov	r1, r9
 800eebc:	4640      	mov	r0, r8
 800eebe:	47d0      	blx	sl
 800eec0:	3001      	adds	r0, #1
 800eec2:	d0ad      	beq.n	800ee20 <_printf_i+0x15c>
 800eec4:	6823      	ldr	r3, [r4, #0]
 800eec6:	079b      	lsls	r3, r3, #30
 800eec8:	d413      	bmi.n	800eef2 <_printf_i+0x22e>
 800eeca:	68e0      	ldr	r0, [r4, #12]
 800eecc:	9b03      	ldr	r3, [sp, #12]
 800eece:	4298      	cmp	r0, r3
 800eed0:	bfb8      	it	lt
 800eed2:	4618      	movlt	r0, r3
 800eed4:	e7a6      	b.n	800ee24 <_printf_i+0x160>
 800eed6:	2301      	movs	r3, #1
 800eed8:	4632      	mov	r2, r6
 800eeda:	4649      	mov	r1, r9
 800eedc:	4640      	mov	r0, r8
 800eede:	47d0      	blx	sl
 800eee0:	3001      	adds	r0, #1
 800eee2:	d09d      	beq.n	800ee20 <_printf_i+0x15c>
 800eee4:	3501      	adds	r5, #1
 800eee6:	68e3      	ldr	r3, [r4, #12]
 800eee8:	9903      	ldr	r1, [sp, #12]
 800eeea:	1a5b      	subs	r3, r3, r1
 800eeec:	42ab      	cmp	r3, r5
 800eeee:	dcf2      	bgt.n	800eed6 <_printf_i+0x212>
 800eef0:	e7eb      	b.n	800eeca <_printf_i+0x206>
 800eef2:	2500      	movs	r5, #0
 800eef4:	f104 0619 	add.w	r6, r4, #25
 800eef8:	e7f5      	b.n	800eee6 <_printf_i+0x222>
 800eefa:	bf00      	nop
 800eefc:	08013192 	.word	0x08013192
 800ef00:	080131a3 	.word	0x080131a3

0800ef04 <_scanf_float>:
 800ef04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef08:	b087      	sub	sp, #28
 800ef0a:	4617      	mov	r7, r2
 800ef0c:	9303      	str	r3, [sp, #12]
 800ef0e:	688b      	ldr	r3, [r1, #8]
 800ef10:	1e5a      	subs	r2, r3, #1
 800ef12:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800ef16:	bf81      	itttt	hi
 800ef18:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800ef1c:	eb03 0b05 	addhi.w	fp, r3, r5
 800ef20:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800ef24:	608b      	strhi	r3, [r1, #8]
 800ef26:	680b      	ldr	r3, [r1, #0]
 800ef28:	460a      	mov	r2, r1
 800ef2a:	f04f 0500 	mov.w	r5, #0
 800ef2e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ef32:	f842 3b1c 	str.w	r3, [r2], #28
 800ef36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ef3a:	4680      	mov	r8, r0
 800ef3c:	460c      	mov	r4, r1
 800ef3e:	bf98      	it	ls
 800ef40:	f04f 0b00 	movls.w	fp, #0
 800ef44:	9201      	str	r2, [sp, #4]
 800ef46:	4616      	mov	r6, r2
 800ef48:	46aa      	mov	sl, r5
 800ef4a:	46a9      	mov	r9, r5
 800ef4c:	9502      	str	r5, [sp, #8]
 800ef4e:	68a2      	ldr	r2, [r4, #8]
 800ef50:	b152      	cbz	r2, 800ef68 <_scanf_float+0x64>
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	2b4e      	cmp	r3, #78	@ 0x4e
 800ef58:	d864      	bhi.n	800f024 <_scanf_float+0x120>
 800ef5a:	2b40      	cmp	r3, #64	@ 0x40
 800ef5c:	d83c      	bhi.n	800efd8 <_scanf_float+0xd4>
 800ef5e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ef62:	b2c8      	uxtb	r0, r1
 800ef64:	280e      	cmp	r0, #14
 800ef66:	d93a      	bls.n	800efde <_scanf_float+0xda>
 800ef68:	f1b9 0f00 	cmp.w	r9, #0
 800ef6c:	d003      	beq.n	800ef76 <_scanf_float+0x72>
 800ef6e:	6823      	ldr	r3, [r4, #0]
 800ef70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ef74:	6023      	str	r3, [r4, #0]
 800ef76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ef7a:	f1ba 0f01 	cmp.w	sl, #1
 800ef7e:	f200 8117 	bhi.w	800f1b0 <_scanf_float+0x2ac>
 800ef82:	9b01      	ldr	r3, [sp, #4]
 800ef84:	429e      	cmp	r6, r3
 800ef86:	f200 8108 	bhi.w	800f19a <_scanf_float+0x296>
 800ef8a:	2001      	movs	r0, #1
 800ef8c:	b007      	add	sp, #28
 800ef8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef92:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800ef96:	2a0d      	cmp	r2, #13
 800ef98:	d8e6      	bhi.n	800ef68 <_scanf_float+0x64>
 800ef9a:	a101      	add	r1, pc, #4	@ (adr r1, 800efa0 <_scanf_float+0x9c>)
 800ef9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800efa0:	0800f0e7 	.word	0x0800f0e7
 800efa4:	0800ef69 	.word	0x0800ef69
 800efa8:	0800ef69 	.word	0x0800ef69
 800efac:	0800ef69 	.word	0x0800ef69
 800efb0:	0800f147 	.word	0x0800f147
 800efb4:	0800f11f 	.word	0x0800f11f
 800efb8:	0800ef69 	.word	0x0800ef69
 800efbc:	0800ef69 	.word	0x0800ef69
 800efc0:	0800f0f5 	.word	0x0800f0f5
 800efc4:	0800ef69 	.word	0x0800ef69
 800efc8:	0800ef69 	.word	0x0800ef69
 800efcc:	0800ef69 	.word	0x0800ef69
 800efd0:	0800ef69 	.word	0x0800ef69
 800efd4:	0800f0ad 	.word	0x0800f0ad
 800efd8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800efdc:	e7db      	b.n	800ef96 <_scanf_float+0x92>
 800efde:	290e      	cmp	r1, #14
 800efe0:	d8c2      	bhi.n	800ef68 <_scanf_float+0x64>
 800efe2:	a001      	add	r0, pc, #4	@ (adr r0, 800efe8 <_scanf_float+0xe4>)
 800efe4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800efe8:	0800f09d 	.word	0x0800f09d
 800efec:	0800ef69 	.word	0x0800ef69
 800eff0:	0800f09d 	.word	0x0800f09d
 800eff4:	0800f133 	.word	0x0800f133
 800eff8:	0800ef69 	.word	0x0800ef69
 800effc:	0800f045 	.word	0x0800f045
 800f000:	0800f083 	.word	0x0800f083
 800f004:	0800f083 	.word	0x0800f083
 800f008:	0800f083 	.word	0x0800f083
 800f00c:	0800f083 	.word	0x0800f083
 800f010:	0800f083 	.word	0x0800f083
 800f014:	0800f083 	.word	0x0800f083
 800f018:	0800f083 	.word	0x0800f083
 800f01c:	0800f083 	.word	0x0800f083
 800f020:	0800f083 	.word	0x0800f083
 800f024:	2b6e      	cmp	r3, #110	@ 0x6e
 800f026:	d809      	bhi.n	800f03c <_scanf_float+0x138>
 800f028:	2b60      	cmp	r3, #96	@ 0x60
 800f02a:	d8b2      	bhi.n	800ef92 <_scanf_float+0x8e>
 800f02c:	2b54      	cmp	r3, #84	@ 0x54
 800f02e:	d07b      	beq.n	800f128 <_scanf_float+0x224>
 800f030:	2b59      	cmp	r3, #89	@ 0x59
 800f032:	d199      	bne.n	800ef68 <_scanf_float+0x64>
 800f034:	2d07      	cmp	r5, #7
 800f036:	d197      	bne.n	800ef68 <_scanf_float+0x64>
 800f038:	2508      	movs	r5, #8
 800f03a:	e02c      	b.n	800f096 <_scanf_float+0x192>
 800f03c:	2b74      	cmp	r3, #116	@ 0x74
 800f03e:	d073      	beq.n	800f128 <_scanf_float+0x224>
 800f040:	2b79      	cmp	r3, #121	@ 0x79
 800f042:	e7f6      	b.n	800f032 <_scanf_float+0x12e>
 800f044:	6821      	ldr	r1, [r4, #0]
 800f046:	05c8      	lsls	r0, r1, #23
 800f048:	d51b      	bpl.n	800f082 <_scanf_float+0x17e>
 800f04a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800f04e:	6021      	str	r1, [r4, #0]
 800f050:	f109 0901 	add.w	r9, r9, #1
 800f054:	f1bb 0f00 	cmp.w	fp, #0
 800f058:	d003      	beq.n	800f062 <_scanf_float+0x15e>
 800f05a:	3201      	adds	r2, #1
 800f05c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f060:	60a2      	str	r2, [r4, #8]
 800f062:	68a3      	ldr	r3, [r4, #8]
 800f064:	3b01      	subs	r3, #1
 800f066:	60a3      	str	r3, [r4, #8]
 800f068:	6923      	ldr	r3, [r4, #16]
 800f06a:	3301      	adds	r3, #1
 800f06c:	6123      	str	r3, [r4, #16]
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	3b01      	subs	r3, #1
 800f072:	2b00      	cmp	r3, #0
 800f074:	607b      	str	r3, [r7, #4]
 800f076:	f340 8087 	ble.w	800f188 <_scanf_float+0x284>
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	3301      	adds	r3, #1
 800f07e:	603b      	str	r3, [r7, #0]
 800f080:	e765      	b.n	800ef4e <_scanf_float+0x4a>
 800f082:	eb1a 0105 	adds.w	r1, sl, r5
 800f086:	f47f af6f 	bne.w	800ef68 <_scanf_float+0x64>
 800f08a:	6822      	ldr	r2, [r4, #0]
 800f08c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800f090:	6022      	str	r2, [r4, #0]
 800f092:	460d      	mov	r5, r1
 800f094:	468a      	mov	sl, r1
 800f096:	f806 3b01 	strb.w	r3, [r6], #1
 800f09a:	e7e2      	b.n	800f062 <_scanf_float+0x15e>
 800f09c:	6822      	ldr	r2, [r4, #0]
 800f09e:	0610      	lsls	r0, r2, #24
 800f0a0:	f57f af62 	bpl.w	800ef68 <_scanf_float+0x64>
 800f0a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800f0a8:	6022      	str	r2, [r4, #0]
 800f0aa:	e7f4      	b.n	800f096 <_scanf_float+0x192>
 800f0ac:	f1ba 0f00 	cmp.w	sl, #0
 800f0b0:	d10e      	bne.n	800f0d0 <_scanf_float+0x1cc>
 800f0b2:	f1b9 0f00 	cmp.w	r9, #0
 800f0b6:	d10e      	bne.n	800f0d6 <_scanf_float+0x1d2>
 800f0b8:	6822      	ldr	r2, [r4, #0]
 800f0ba:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f0be:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f0c2:	d108      	bne.n	800f0d6 <_scanf_float+0x1d2>
 800f0c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f0c8:	6022      	str	r2, [r4, #0]
 800f0ca:	f04f 0a01 	mov.w	sl, #1
 800f0ce:	e7e2      	b.n	800f096 <_scanf_float+0x192>
 800f0d0:	f1ba 0f02 	cmp.w	sl, #2
 800f0d4:	d055      	beq.n	800f182 <_scanf_float+0x27e>
 800f0d6:	2d01      	cmp	r5, #1
 800f0d8:	d002      	beq.n	800f0e0 <_scanf_float+0x1dc>
 800f0da:	2d04      	cmp	r5, #4
 800f0dc:	f47f af44 	bne.w	800ef68 <_scanf_float+0x64>
 800f0e0:	3501      	adds	r5, #1
 800f0e2:	b2ed      	uxtb	r5, r5
 800f0e4:	e7d7      	b.n	800f096 <_scanf_float+0x192>
 800f0e6:	f1ba 0f01 	cmp.w	sl, #1
 800f0ea:	f47f af3d 	bne.w	800ef68 <_scanf_float+0x64>
 800f0ee:	f04f 0a02 	mov.w	sl, #2
 800f0f2:	e7d0      	b.n	800f096 <_scanf_float+0x192>
 800f0f4:	b97d      	cbnz	r5, 800f116 <_scanf_float+0x212>
 800f0f6:	f1b9 0f00 	cmp.w	r9, #0
 800f0fa:	f47f af38 	bne.w	800ef6e <_scanf_float+0x6a>
 800f0fe:	6822      	ldr	r2, [r4, #0]
 800f100:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800f104:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800f108:	f040 8108 	bne.w	800f31c <_scanf_float+0x418>
 800f10c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f110:	6022      	str	r2, [r4, #0]
 800f112:	2501      	movs	r5, #1
 800f114:	e7bf      	b.n	800f096 <_scanf_float+0x192>
 800f116:	2d03      	cmp	r5, #3
 800f118:	d0e2      	beq.n	800f0e0 <_scanf_float+0x1dc>
 800f11a:	2d05      	cmp	r5, #5
 800f11c:	e7de      	b.n	800f0dc <_scanf_float+0x1d8>
 800f11e:	2d02      	cmp	r5, #2
 800f120:	f47f af22 	bne.w	800ef68 <_scanf_float+0x64>
 800f124:	2503      	movs	r5, #3
 800f126:	e7b6      	b.n	800f096 <_scanf_float+0x192>
 800f128:	2d06      	cmp	r5, #6
 800f12a:	f47f af1d 	bne.w	800ef68 <_scanf_float+0x64>
 800f12e:	2507      	movs	r5, #7
 800f130:	e7b1      	b.n	800f096 <_scanf_float+0x192>
 800f132:	6822      	ldr	r2, [r4, #0]
 800f134:	0591      	lsls	r1, r2, #22
 800f136:	f57f af17 	bpl.w	800ef68 <_scanf_float+0x64>
 800f13a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800f13e:	6022      	str	r2, [r4, #0]
 800f140:	f8cd 9008 	str.w	r9, [sp, #8]
 800f144:	e7a7      	b.n	800f096 <_scanf_float+0x192>
 800f146:	6822      	ldr	r2, [r4, #0]
 800f148:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800f14c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800f150:	d006      	beq.n	800f160 <_scanf_float+0x25c>
 800f152:	0550      	lsls	r0, r2, #21
 800f154:	f57f af08 	bpl.w	800ef68 <_scanf_float+0x64>
 800f158:	f1b9 0f00 	cmp.w	r9, #0
 800f15c:	f000 80de 	beq.w	800f31c <_scanf_float+0x418>
 800f160:	0591      	lsls	r1, r2, #22
 800f162:	bf58      	it	pl
 800f164:	9902      	ldrpl	r1, [sp, #8]
 800f166:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800f16a:	bf58      	it	pl
 800f16c:	eba9 0101 	subpl.w	r1, r9, r1
 800f170:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800f174:	bf58      	it	pl
 800f176:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f17a:	6022      	str	r2, [r4, #0]
 800f17c:	f04f 0900 	mov.w	r9, #0
 800f180:	e789      	b.n	800f096 <_scanf_float+0x192>
 800f182:	f04f 0a03 	mov.w	sl, #3
 800f186:	e786      	b.n	800f096 <_scanf_float+0x192>
 800f188:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800f18c:	4639      	mov	r1, r7
 800f18e:	4640      	mov	r0, r8
 800f190:	4798      	blx	r3
 800f192:	2800      	cmp	r0, #0
 800f194:	f43f aedb 	beq.w	800ef4e <_scanf_float+0x4a>
 800f198:	e6e6      	b.n	800ef68 <_scanf_float+0x64>
 800f19a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f19e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f1a2:	463a      	mov	r2, r7
 800f1a4:	4640      	mov	r0, r8
 800f1a6:	4798      	blx	r3
 800f1a8:	6923      	ldr	r3, [r4, #16]
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	6123      	str	r3, [r4, #16]
 800f1ae:	e6e8      	b.n	800ef82 <_scanf_float+0x7e>
 800f1b0:	1e6b      	subs	r3, r5, #1
 800f1b2:	2b06      	cmp	r3, #6
 800f1b4:	d824      	bhi.n	800f200 <_scanf_float+0x2fc>
 800f1b6:	2d02      	cmp	r5, #2
 800f1b8:	d836      	bhi.n	800f228 <_scanf_float+0x324>
 800f1ba:	9b01      	ldr	r3, [sp, #4]
 800f1bc:	429e      	cmp	r6, r3
 800f1be:	f67f aee4 	bls.w	800ef8a <_scanf_float+0x86>
 800f1c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f1ca:	463a      	mov	r2, r7
 800f1cc:	4640      	mov	r0, r8
 800f1ce:	4798      	blx	r3
 800f1d0:	6923      	ldr	r3, [r4, #16]
 800f1d2:	3b01      	subs	r3, #1
 800f1d4:	6123      	str	r3, [r4, #16]
 800f1d6:	e7f0      	b.n	800f1ba <_scanf_float+0x2b6>
 800f1d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f1dc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800f1e0:	463a      	mov	r2, r7
 800f1e2:	4640      	mov	r0, r8
 800f1e4:	4798      	blx	r3
 800f1e6:	6923      	ldr	r3, [r4, #16]
 800f1e8:	3b01      	subs	r3, #1
 800f1ea:	6123      	str	r3, [r4, #16]
 800f1ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f1f0:	fa5f fa8a 	uxtb.w	sl, sl
 800f1f4:	f1ba 0f02 	cmp.w	sl, #2
 800f1f8:	d1ee      	bne.n	800f1d8 <_scanf_float+0x2d4>
 800f1fa:	3d03      	subs	r5, #3
 800f1fc:	b2ed      	uxtb	r5, r5
 800f1fe:	1b76      	subs	r6, r6, r5
 800f200:	6823      	ldr	r3, [r4, #0]
 800f202:	05da      	lsls	r2, r3, #23
 800f204:	d530      	bpl.n	800f268 <_scanf_float+0x364>
 800f206:	055b      	lsls	r3, r3, #21
 800f208:	d511      	bpl.n	800f22e <_scanf_float+0x32a>
 800f20a:	9b01      	ldr	r3, [sp, #4]
 800f20c:	429e      	cmp	r6, r3
 800f20e:	f67f aebc 	bls.w	800ef8a <_scanf_float+0x86>
 800f212:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f216:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f21a:	463a      	mov	r2, r7
 800f21c:	4640      	mov	r0, r8
 800f21e:	4798      	blx	r3
 800f220:	6923      	ldr	r3, [r4, #16]
 800f222:	3b01      	subs	r3, #1
 800f224:	6123      	str	r3, [r4, #16]
 800f226:	e7f0      	b.n	800f20a <_scanf_float+0x306>
 800f228:	46aa      	mov	sl, r5
 800f22a:	46b3      	mov	fp, r6
 800f22c:	e7de      	b.n	800f1ec <_scanf_float+0x2e8>
 800f22e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f232:	6923      	ldr	r3, [r4, #16]
 800f234:	2965      	cmp	r1, #101	@ 0x65
 800f236:	f103 33ff 	add.w	r3, r3, #4294967295
 800f23a:	f106 35ff 	add.w	r5, r6, #4294967295
 800f23e:	6123      	str	r3, [r4, #16]
 800f240:	d00c      	beq.n	800f25c <_scanf_float+0x358>
 800f242:	2945      	cmp	r1, #69	@ 0x45
 800f244:	d00a      	beq.n	800f25c <_scanf_float+0x358>
 800f246:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f24a:	463a      	mov	r2, r7
 800f24c:	4640      	mov	r0, r8
 800f24e:	4798      	blx	r3
 800f250:	6923      	ldr	r3, [r4, #16]
 800f252:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f256:	3b01      	subs	r3, #1
 800f258:	1eb5      	subs	r5, r6, #2
 800f25a:	6123      	str	r3, [r4, #16]
 800f25c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800f260:	463a      	mov	r2, r7
 800f262:	4640      	mov	r0, r8
 800f264:	4798      	blx	r3
 800f266:	462e      	mov	r6, r5
 800f268:	6822      	ldr	r2, [r4, #0]
 800f26a:	f012 0210 	ands.w	r2, r2, #16
 800f26e:	d001      	beq.n	800f274 <_scanf_float+0x370>
 800f270:	2000      	movs	r0, #0
 800f272:	e68b      	b.n	800ef8c <_scanf_float+0x88>
 800f274:	7032      	strb	r2, [r6, #0]
 800f276:	6823      	ldr	r3, [r4, #0]
 800f278:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800f27c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f280:	d11c      	bne.n	800f2bc <_scanf_float+0x3b8>
 800f282:	9b02      	ldr	r3, [sp, #8]
 800f284:	454b      	cmp	r3, r9
 800f286:	eba3 0209 	sub.w	r2, r3, r9
 800f28a:	d123      	bne.n	800f2d4 <_scanf_float+0x3d0>
 800f28c:	9901      	ldr	r1, [sp, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	4640      	mov	r0, r8
 800f292:	f002 fc0d 	bl	8011ab0 <_strtod_r>
 800f296:	9b03      	ldr	r3, [sp, #12]
 800f298:	6821      	ldr	r1, [r4, #0]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	f011 0f02 	tst.w	r1, #2
 800f2a0:	ec57 6b10 	vmov	r6, r7, d0
 800f2a4:	f103 0204 	add.w	r2, r3, #4
 800f2a8:	d01f      	beq.n	800f2ea <_scanf_float+0x3e6>
 800f2aa:	9903      	ldr	r1, [sp, #12]
 800f2ac:	600a      	str	r2, [r1, #0]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	e9c3 6700 	strd	r6, r7, [r3]
 800f2b4:	68e3      	ldr	r3, [r4, #12]
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	60e3      	str	r3, [r4, #12]
 800f2ba:	e7d9      	b.n	800f270 <_scanf_float+0x36c>
 800f2bc:	9b04      	ldr	r3, [sp, #16]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d0e4      	beq.n	800f28c <_scanf_float+0x388>
 800f2c2:	9905      	ldr	r1, [sp, #20]
 800f2c4:	230a      	movs	r3, #10
 800f2c6:	3101      	adds	r1, #1
 800f2c8:	4640      	mov	r0, r8
 800f2ca:	f002 fc71 	bl	8011bb0 <_strtol_r>
 800f2ce:	9b04      	ldr	r3, [sp, #16]
 800f2d0:	9e05      	ldr	r6, [sp, #20]
 800f2d2:	1ac2      	subs	r2, r0, r3
 800f2d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800f2d8:	429e      	cmp	r6, r3
 800f2da:	bf28      	it	cs
 800f2dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800f2e0:	4910      	ldr	r1, [pc, #64]	@ (800f324 <_scanf_float+0x420>)
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	f000 f8e4 	bl	800f4b0 <siprintf>
 800f2e8:	e7d0      	b.n	800f28c <_scanf_float+0x388>
 800f2ea:	f011 0f04 	tst.w	r1, #4
 800f2ee:	9903      	ldr	r1, [sp, #12]
 800f2f0:	600a      	str	r2, [r1, #0]
 800f2f2:	d1dc      	bne.n	800f2ae <_scanf_float+0x3aa>
 800f2f4:	681d      	ldr	r5, [r3, #0]
 800f2f6:	4632      	mov	r2, r6
 800f2f8:	463b      	mov	r3, r7
 800f2fa:	4630      	mov	r0, r6
 800f2fc:	4639      	mov	r1, r7
 800f2fe:	f7f1 fc35 	bl	8000b6c <__aeabi_dcmpun>
 800f302:	b128      	cbz	r0, 800f310 <_scanf_float+0x40c>
 800f304:	4808      	ldr	r0, [pc, #32]	@ (800f328 <_scanf_float+0x424>)
 800f306:	f000 f9c5 	bl	800f694 <nanf>
 800f30a:	ed85 0a00 	vstr	s0, [r5]
 800f30e:	e7d1      	b.n	800f2b4 <_scanf_float+0x3b0>
 800f310:	4630      	mov	r0, r6
 800f312:	4639      	mov	r1, r7
 800f314:	f7f1 fc88 	bl	8000c28 <__aeabi_d2f>
 800f318:	6028      	str	r0, [r5, #0]
 800f31a:	e7cb      	b.n	800f2b4 <_scanf_float+0x3b0>
 800f31c:	f04f 0900 	mov.w	r9, #0
 800f320:	e629      	b.n	800ef76 <_scanf_float+0x72>
 800f322:	bf00      	nop
 800f324:	080131b4 	.word	0x080131b4
 800f328:	0801354d 	.word	0x0801354d

0800f32c <std>:
 800f32c:	2300      	movs	r3, #0
 800f32e:	b510      	push	{r4, lr}
 800f330:	4604      	mov	r4, r0
 800f332:	e9c0 3300 	strd	r3, r3, [r0]
 800f336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f33a:	6083      	str	r3, [r0, #8]
 800f33c:	8181      	strh	r1, [r0, #12]
 800f33e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f340:	81c2      	strh	r2, [r0, #14]
 800f342:	6183      	str	r3, [r0, #24]
 800f344:	4619      	mov	r1, r3
 800f346:	2208      	movs	r2, #8
 800f348:	305c      	adds	r0, #92	@ 0x5c
 800f34a:	f000 f914 	bl	800f576 <memset>
 800f34e:	4b0d      	ldr	r3, [pc, #52]	@ (800f384 <std+0x58>)
 800f350:	6263      	str	r3, [r4, #36]	@ 0x24
 800f352:	4b0d      	ldr	r3, [pc, #52]	@ (800f388 <std+0x5c>)
 800f354:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f356:	4b0d      	ldr	r3, [pc, #52]	@ (800f38c <std+0x60>)
 800f358:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f35a:	4b0d      	ldr	r3, [pc, #52]	@ (800f390 <std+0x64>)
 800f35c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f35e:	4b0d      	ldr	r3, [pc, #52]	@ (800f394 <std+0x68>)
 800f360:	6224      	str	r4, [r4, #32]
 800f362:	429c      	cmp	r4, r3
 800f364:	d006      	beq.n	800f374 <std+0x48>
 800f366:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f36a:	4294      	cmp	r4, r2
 800f36c:	d002      	beq.n	800f374 <std+0x48>
 800f36e:	33d0      	adds	r3, #208	@ 0xd0
 800f370:	429c      	cmp	r4, r3
 800f372:	d105      	bne.n	800f380 <std+0x54>
 800f374:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f37c:	f000 b978 	b.w	800f670 <__retarget_lock_init_recursive>
 800f380:	bd10      	pop	{r4, pc}
 800f382:	bf00      	nop
 800f384:	0800f4f1 	.word	0x0800f4f1
 800f388:	0800f513 	.word	0x0800f513
 800f38c:	0800f54b 	.word	0x0800f54b
 800f390:	0800f56f 	.word	0x0800f56f
 800f394:	20001268 	.word	0x20001268

0800f398 <stdio_exit_handler>:
 800f398:	4a02      	ldr	r2, [pc, #8]	@ (800f3a4 <stdio_exit_handler+0xc>)
 800f39a:	4903      	ldr	r1, [pc, #12]	@ (800f3a8 <stdio_exit_handler+0x10>)
 800f39c:	4803      	ldr	r0, [pc, #12]	@ (800f3ac <stdio_exit_handler+0x14>)
 800f39e:	f000 b869 	b.w	800f474 <_fwalk_sglue>
 800f3a2:	bf00      	nop
 800f3a4:	20000020 	.word	0x20000020
 800f3a8:	08011f6d 	.word	0x08011f6d
 800f3ac:	20000030 	.word	0x20000030

0800f3b0 <cleanup_stdio>:
 800f3b0:	6841      	ldr	r1, [r0, #4]
 800f3b2:	4b0c      	ldr	r3, [pc, #48]	@ (800f3e4 <cleanup_stdio+0x34>)
 800f3b4:	4299      	cmp	r1, r3
 800f3b6:	b510      	push	{r4, lr}
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	d001      	beq.n	800f3c0 <cleanup_stdio+0x10>
 800f3bc:	f002 fdd6 	bl	8011f6c <_fflush_r>
 800f3c0:	68a1      	ldr	r1, [r4, #8]
 800f3c2:	4b09      	ldr	r3, [pc, #36]	@ (800f3e8 <cleanup_stdio+0x38>)
 800f3c4:	4299      	cmp	r1, r3
 800f3c6:	d002      	beq.n	800f3ce <cleanup_stdio+0x1e>
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f002 fdcf 	bl	8011f6c <_fflush_r>
 800f3ce:	68e1      	ldr	r1, [r4, #12]
 800f3d0:	4b06      	ldr	r3, [pc, #24]	@ (800f3ec <cleanup_stdio+0x3c>)
 800f3d2:	4299      	cmp	r1, r3
 800f3d4:	d004      	beq.n	800f3e0 <cleanup_stdio+0x30>
 800f3d6:	4620      	mov	r0, r4
 800f3d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f3dc:	f002 bdc6 	b.w	8011f6c <_fflush_r>
 800f3e0:	bd10      	pop	{r4, pc}
 800f3e2:	bf00      	nop
 800f3e4:	20001268 	.word	0x20001268
 800f3e8:	200012d0 	.word	0x200012d0
 800f3ec:	20001338 	.word	0x20001338

0800f3f0 <global_stdio_init.part.0>:
 800f3f0:	b510      	push	{r4, lr}
 800f3f2:	4b0b      	ldr	r3, [pc, #44]	@ (800f420 <global_stdio_init.part.0+0x30>)
 800f3f4:	4c0b      	ldr	r4, [pc, #44]	@ (800f424 <global_stdio_init.part.0+0x34>)
 800f3f6:	4a0c      	ldr	r2, [pc, #48]	@ (800f428 <global_stdio_init.part.0+0x38>)
 800f3f8:	601a      	str	r2, [r3, #0]
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	2104      	movs	r1, #4
 800f400:	f7ff ff94 	bl	800f32c <std>
 800f404:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f408:	2201      	movs	r2, #1
 800f40a:	2109      	movs	r1, #9
 800f40c:	f7ff ff8e 	bl	800f32c <std>
 800f410:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f414:	2202      	movs	r2, #2
 800f416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f41a:	2112      	movs	r1, #18
 800f41c:	f7ff bf86 	b.w	800f32c <std>
 800f420:	200013a0 	.word	0x200013a0
 800f424:	20001268 	.word	0x20001268
 800f428:	0800f399 	.word	0x0800f399

0800f42c <__sfp_lock_acquire>:
 800f42c:	4801      	ldr	r0, [pc, #4]	@ (800f434 <__sfp_lock_acquire+0x8>)
 800f42e:	f000 b920 	b.w	800f672 <__retarget_lock_acquire_recursive>
 800f432:	bf00      	nop
 800f434:	200013a9 	.word	0x200013a9

0800f438 <__sfp_lock_release>:
 800f438:	4801      	ldr	r0, [pc, #4]	@ (800f440 <__sfp_lock_release+0x8>)
 800f43a:	f000 b91b 	b.w	800f674 <__retarget_lock_release_recursive>
 800f43e:	bf00      	nop
 800f440:	200013a9 	.word	0x200013a9

0800f444 <__sinit>:
 800f444:	b510      	push	{r4, lr}
 800f446:	4604      	mov	r4, r0
 800f448:	f7ff fff0 	bl	800f42c <__sfp_lock_acquire>
 800f44c:	6a23      	ldr	r3, [r4, #32]
 800f44e:	b11b      	cbz	r3, 800f458 <__sinit+0x14>
 800f450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f454:	f7ff bff0 	b.w	800f438 <__sfp_lock_release>
 800f458:	4b04      	ldr	r3, [pc, #16]	@ (800f46c <__sinit+0x28>)
 800f45a:	6223      	str	r3, [r4, #32]
 800f45c:	4b04      	ldr	r3, [pc, #16]	@ (800f470 <__sinit+0x2c>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1f5      	bne.n	800f450 <__sinit+0xc>
 800f464:	f7ff ffc4 	bl	800f3f0 <global_stdio_init.part.0>
 800f468:	e7f2      	b.n	800f450 <__sinit+0xc>
 800f46a:	bf00      	nop
 800f46c:	0800f3b1 	.word	0x0800f3b1
 800f470:	200013a0 	.word	0x200013a0

0800f474 <_fwalk_sglue>:
 800f474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f478:	4607      	mov	r7, r0
 800f47a:	4688      	mov	r8, r1
 800f47c:	4614      	mov	r4, r2
 800f47e:	2600      	movs	r6, #0
 800f480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f484:	f1b9 0901 	subs.w	r9, r9, #1
 800f488:	d505      	bpl.n	800f496 <_fwalk_sglue+0x22>
 800f48a:	6824      	ldr	r4, [r4, #0]
 800f48c:	2c00      	cmp	r4, #0
 800f48e:	d1f7      	bne.n	800f480 <_fwalk_sglue+0xc>
 800f490:	4630      	mov	r0, r6
 800f492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f496:	89ab      	ldrh	r3, [r5, #12]
 800f498:	2b01      	cmp	r3, #1
 800f49a:	d907      	bls.n	800f4ac <_fwalk_sglue+0x38>
 800f49c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	d003      	beq.n	800f4ac <_fwalk_sglue+0x38>
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	4638      	mov	r0, r7
 800f4a8:	47c0      	blx	r8
 800f4aa:	4306      	orrs	r6, r0
 800f4ac:	3568      	adds	r5, #104	@ 0x68
 800f4ae:	e7e9      	b.n	800f484 <_fwalk_sglue+0x10>

0800f4b0 <siprintf>:
 800f4b0:	b40e      	push	{r1, r2, r3}
 800f4b2:	b500      	push	{lr}
 800f4b4:	b09c      	sub	sp, #112	@ 0x70
 800f4b6:	ab1d      	add	r3, sp, #116	@ 0x74
 800f4b8:	9002      	str	r0, [sp, #8]
 800f4ba:	9006      	str	r0, [sp, #24]
 800f4bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f4c0:	4809      	ldr	r0, [pc, #36]	@ (800f4e8 <siprintf+0x38>)
 800f4c2:	9107      	str	r1, [sp, #28]
 800f4c4:	9104      	str	r1, [sp, #16]
 800f4c6:	4909      	ldr	r1, [pc, #36]	@ (800f4ec <siprintf+0x3c>)
 800f4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4cc:	9105      	str	r1, [sp, #20]
 800f4ce:	6800      	ldr	r0, [r0, #0]
 800f4d0:	9301      	str	r3, [sp, #4]
 800f4d2:	a902      	add	r1, sp, #8
 800f4d4:	f002 fbca 	bl	8011c6c <_svfiprintf_r>
 800f4d8:	9b02      	ldr	r3, [sp, #8]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	701a      	strb	r2, [r3, #0]
 800f4de:	b01c      	add	sp, #112	@ 0x70
 800f4e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4e4:	b003      	add	sp, #12
 800f4e6:	4770      	bx	lr
 800f4e8:	2000002c 	.word	0x2000002c
 800f4ec:	ffff0208 	.word	0xffff0208

0800f4f0 <__sread>:
 800f4f0:	b510      	push	{r4, lr}
 800f4f2:	460c      	mov	r4, r1
 800f4f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4f8:	f000 f86c 	bl	800f5d4 <_read_r>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	bfab      	itete	ge
 800f500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f502:	89a3      	ldrhlt	r3, [r4, #12]
 800f504:	181b      	addge	r3, r3, r0
 800f506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f50a:	bfac      	ite	ge
 800f50c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f50e:	81a3      	strhlt	r3, [r4, #12]
 800f510:	bd10      	pop	{r4, pc}

0800f512 <__swrite>:
 800f512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f516:	461f      	mov	r7, r3
 800f518:	898b      	ldrh	r3, [r1, #12]
 800f51a:	05db      	lsls	r3, r3, #23
 800f51c:	4605      	mov	r5, r0
 800f51e:	460c      	mov	r4, r1
 800f520:	4616      	mov	r6, r2
 800f522:	d505      	bpl.n	800f530 <__swrite+0x1e>
 800f524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f528:	2302      	movs	r3, #2
 800f52a:	2200      	movs	r2, #0
 800f52c:	f000 f840 	bl	800f5b0 <_lseek_r>
 800f530:	89a3      	ldrh	r3, [r4, #12]
 800f532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f53a:	81a3      	strh	r3, [r4, #12]
 800f53c:	4632      	mov	r2, r6
 800f53e:	463b      	mov	r3, r7
 800f540:	4628      	mov	r0, r5
 800f542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f546:	f000 b857 	b.w	800f5f8 <_write_r>

0800f54a <__sseek>:
 800f54a:	b510      	push	{r4, lr}
 800f54c:	460c      	mov	r4, r1
 800f54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f552:	f000 f82d 	bl	800f5b0 <_lseek_r>
 800f556:	1c43      	adds	r3, r0, #1
 800f558:	89a3      	ldrh	r3, [r4, #12]
 800f55a:	bf15      	itete	ne
 800f55c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f55e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f566:	81a3      	strheq	r3, [r4, #12]
 800f568:	bf18      	it	ne
 800f56a:	81a3      	strhne	r3, [r4, #12]
 800f56c:	bd10      	pop	{r4, pc}

0800f56e <__sclose>:
 800f56e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f572:	f000 b80d 	b.w	800f590 <_close_r>

0800f576 <memset>:
 800f576:	4402      	add	r2, r0
 800f578:	4603      	mov	r3, r0
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d100      	bne.n	800f580 <memset+0xa>
 800f57e:	4770      	bx	lr
 800f580:	f803 1b01 	strb.w	r1, [r3], #1
 800f584:	e7f9      	b.n	800f57a <memset+0x4>
	...

0800f588 <_localeconv_r>:
 800f588:	4800      	ldr	r0, [pc, #0]	@ (800f58c <_localeconv_r+0x4>)
 800f58a:	4770      	bx	lr
 800f58c:	2000016c 	.word	0x2000016c

0800f590 <_close_r>:
 800f590:	b538      	push	{r3, r4, r5, lr}
 800f592:	4d06      	ldr	r5, [pc, #24]	@ (800f5ac <_close_r+0x1c>)
 800f594:	2300      	movs	r3, #0
 800f596:	4604      	mov	r4, r0
 800f598:	4608      	mov	r0, r1
 800f59a:	602b      	str	r3, [r5, #0]
 800f59c:	f7f9 fb9a 	bl	8008cd4 <_close>
 800f5a0:	1c43      	adds	r3, r0, #1
 800f5a2:	d102      	bne.n	800f5aa <_close_r+0x1a>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	b103      	cbz	r3, 800f5aa <_close_r+0x1a>
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	200013a4 	.word	0x200013a4

0800f5b0 <_lseek_r>:
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	4d07      	ldr	r5, [pc, #28]	@ (800f5d0 <_lseek_r+0x20>)
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	4608      	mov	r0, r1
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	602a      	str	r2, [r5, #0]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	f7f9 fbaf 	bl	8008d22 <_lseek>
 800f5c4:	1c43      	adds	r3, r0, #1
 800f5c6:	d102      	bne.n	800f5ce <_lseek_r+0x1e>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	b103      	cbz	r3, 800f5ce <_lseek_r+0x1e>
 800f5cc:	6023      	str	r3, [r4, #0]
 800f5ce:	bd38      	pop	{r3, r4, r5, pc}
 800f5d0:	200013a4 	.word	0x200013a4

0800f5d4 <_read_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d07      	ldr	r5, [pc, #28]	@ (800f5f4 <_read_r+0x20>)
 800f5d8:	4604      	mov	r4, r0
 800f5da:	4608      	mov	r0, r1
 800f5dc:	4611      	mov	r1, r2
 800f5de:	2200      	movs	r2, #0
 800f5e0:	602a      	str	r2, [r5, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	f7f9 fb3d 	bl	8008c62 <_read>
 800f5e8:	1c43      	adds	r3, r0, #1
 800f5ea:	d102      	bne.n	800f5f2 <_read_r+0x1e>
 800f5ec:	682b      	ldr	r3, [r5, #0]
 800f5ee:	b103      	cbz	r3, 800f5f2 <_read_r+0x1e>
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	bd38      	pop	{r3, r4, r5, pc}
 800f5f4:	200013a4 	.word	0x200013a4

0800f5f8 <_write_r>:
 800f5f8:	b538      	push	{r3, r4, r5, lr}
 800f5fa:	4d07      	ldr	r5, [pc, #28]	@ (800f618 <_write_r+0x20>)
 800f5fc:	4604      	mov	r4, r0
 800f5fe:	4608      	mov	r0, r1
 800f600:	4611      	mov	r1, r2
 800f602:	2200      	movs	r2, #0
 800f604:	602a      	str	r2, [r5, #0]
 800f606:	461a      	mov	r2, r3
 800f608:	f7f9 fb48 	bl	8008c9c <_write>
 800f60c:	1c43      	adds	r3, r0, #1
 800f60e:	d102      	bne.n	800f616 <_write_r+0x1e>
 800f610:	682b      	ldr	r3, [r5, #0]
 800f612:	b103      	cbz	r3, 800f616 <_write_r+0x1e>
 800f614:	6023      	str	r3, [r4, #0]
 800f616:	bd38      	pop	{r3, r4, r5, pc}
 800f618:	200013a4 	.word	0x200013a4

0800f61c <__errno>:
 800f61c:	4b01      	ldr	r3, [pc, #4]	@ (800f624 <__errno+0x8>)
 800f61e:	6818      	ldr	r0, [r3, #0]
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	2000002c 	.word	0x2000002c

0800f628 <__libc_init_array>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	4d0d      	ldr	r5, [pc, #52]	@ (800f660 <__libc_init_array+0x38>)
 800f62c:	4c0d      	ldr	r4, [pc, #52]	@ (800f664 <__libc_init_array+0x3c>)
 800f62e:	1b64      	subs	r4, r4, r5
 800f630:	10a4      	asrs	r4, r4, #2
 800f632:	2600      	movs	r6, #0
 800f634:	42a6      	cmp	r6, r4
 800f636:	d109      	bne.n	800f64c <__libc_init_array+0x24>
 800f638:	4d0b      	ldr	r5, [pc, #44]	@ (800f668 <__libc_init_array+0x40>)
 800f63a:	4c0c      	ldr	r4, [pc, #48]	@ (800f66c <__libc_init_array+0x44>)
 800f63c:	f003 fb44 	bl	8012cc8 <_init>
 800f640:	1b64      	subs	r4, r4, r5
 800f642:	10a4      	asrs	r4, r4, #2
 800f644:	2600      	movs	r6, #0
 800f646:	42a6      	cmp	r6, r4
 800f648:	d105      	bne.n	800f656 <__libc_init_array+0x2e>
 800f64a:	bd70      	pop	{r4, r5, r6, pc}
 800f64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f650:	4798      	blx	r3
 800f652:	3601      	adds	r6, #1
 800f654:	e7ee      	b.n	800f634 <__libc_init_array+0xc>
 800f656:	f855 3b04 	ldr.w	r3, [r5], #4
 800f65a:	4798      	blx	r3
 800f65c:	3601      	adds	r6, #1
 800f65e:	e7f2      	b.n	800f646 <__libc_init_array+0x1e>
 800f660:	080135b8 	.word	0x080135b8
 800f664:	080135b8 	.word	0x080135b8
 800f668:	080135b8 	.word	0x080135b8
 800f66c:	080135c0 	.word	0x080135c0

0800f670 <__retarget_lock_init_recursive>:
 800f670:	4770      	bx	lr

0800f672 <__retarget_lock_acquire_recursive>:
 800f672:	4770      	bx	lr

0800f674 <__retarget_lock_release_recursive>:
 800f674:	4770      	bx	lr

0800f676 <memcpy>:
 800f676:	440a      	add	r2, r1
 800f678:	4291      	cmp	r1, r2
 800f67a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f67e:	d100      	bne.n	800f682 <memcpy+0xc>
 800f680:	4770      	bx	lr
 800f682:	b510      	push	{r4, lr}
 800f684:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f68c:	4291      	cmp	r1, r2
 800f68e:	d1f9      	bne.n	800f684 <memcpy+0xe>
 800f690:	bd10      	pop	{r4, pc}
	...

0800f694 <nanf>:
 800f694:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f69c <nanf+0x8>
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop
 800f69c:	7fc00000 	.word	0x7fc00000

0800f6a0 <quorem>:
 800f6a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6a4:	6903      	ldr	r3, [r0, #16]
 800f6a6:	690c      	ldr	r4, [r1, #16]
 800f6a8:	42a3      	cmp	r3, r4
 800f6aa:	4607      	mov	r7, r0
 800f6ac:	db7e      	blt.n	800f7ac <quorem+0x10c>
 800f6ae:	3c01      	subs	r4, #1
 800f6b0:	f101 0814 	add.w	r8, r1, #20
 800f6b4:	00a3      	lsls	r3, r4, #2
 800f6b6:	f100 0514 	add.w	r5, r0, #20
 800f6ba:	9300      	str	r3, [sp, #0]
 800f6bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f6c0:	9301      	str	r3, [sp, #4]
 800f6c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f6c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f6d2:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6d6:	d32e      	bcc.n	800f736 <quorem+0x96>
 800f6d8:	f04f 0a00 	mov.w	sl, #0
 800f6dc:	46c4      	mov	ip, r8
 800f6de:	46ae      	mov	lr, r5
 800f6e0:	46d3      	mov	fp, sl
 800f6e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f6e6:	b298      	uxth	r0, r3
 800f6e8:	fb06 a000 	mla	r0, r6, r0, sl
 800f6ec:	0c02      	lsrs	r2, r0, #16
 800f6ee:	0c1b      	lsrs	r3, r3, #16
 800f6f0:	fb06 2303 	mla	r3, r6, r3, r2
 800f6f4:	f8de 2000 	ldr.w	r2, [lr]
 800f6f8:	b280      	uxth	r0, r0
 800f6fa:	b292      	uxth	r2, r2
 800f6fc:	1a12      	subs	r2, r2, r0
 800f6fe:	445a      	add	r2, fp
 800f700:	f8de 0000 	ldr.w	r0, [lr]
 800f704:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f708:	b29b      	uxth	r3, r3
 800f70a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f70e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f712:	b292      	uxth	r2, r2
 800f714:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f718:	45e1      	cmp	r9, ip
 800f71a:	f84e 2b04 	str.w	r2, [lr], #4
 800f71e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f722:	d2de      	bcs.n	800f6e2 <quorem+0x42>
 800f724:	9b00      	ldr	r3, [sp, #0]
 800f726:	58eb      	ldr	r3, [r5, r3]
 800f728:	b92b      	cbnz	r3, 800f736 <quorem+0x96>
 800f72a:	9b01      	ldr	r3, [sp, #4]
 800f72c:	3b04      	subs	r3, #4
 800f72e:	429d      	cmp	r5, r3
 800f730:	461a      	mov	r2, r3
 800f732:	d32f      	bcc.n	800f794 <quorem+0xf4>
 800f734:	613c      	str	r4, [r7, #16]
 800f736:	4638      	mov	r0, r7
 800f738:	f001 f9c2 	bl	8010ac0 <__mcmp>
 800f73c:	2800      	cmp	r0, #0
 800f73e:	db25      	blt.n	800f78c <quorem+0xec>
 800f740:	4629      	mov	r1, r5
 800f742:	2000      	movs	r0, #0
 800f744:	f858 2b04 	ldr.w	r2, [r8], #4
 800f748:	f8d1 c000 	ldr.w	ip, [r1]
 800f74c:	fa1f fe82 	uxth.w	lr, r2
 800f750:	fa1f f38c 	uxth.w	r3, ip
 800f754:	eba3 030e 	sub.w	r3, r3, lr
 800f758:	4403      	add	r3, r0
 800f75a:	0c12      	lsrs	r2, r2, #16
 800f75c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f760:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f764:	b29b      	uxth	r3, r3
 800f766:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f76a:	45c1      	cmp	r9, r8
 800f76c:	f841 3b04 	str.w	r3, [r1], #4
 800f770:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f774:	d2e6      	bcs.n	800f744 <quorem+0xa4>
 800f776:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f77a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f77e:	b922      	cbnz	r2, 800f78a <quorem+0xea>
 800f780:	3b04      	subs	r3, #4
 800f782:	429d      	cmp	r5, r3
 800f784:	461a      	mov	r2, r3
 800f786:	d30b      	bcc.n	800f7a0 <quorem+0x100>
 800f788:	613c      	str	r4, [r7, #16]
 800f78a:	3601      	adds	r6, #1
 800f78c:	4630      	mov	r0, r6
 800f78e:	b003      	add	sp, #12
 800f790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f794:	6812      	ldr	r2, [r2, #0]
 800f796:	3b04      	subs	r3, #4
 800f798:	2a00      	cmp	r2, #0
 800f79a:	d1cb      	bne.n	800f734 <quorem+0x94>
 800f79c:	3c01      	subs	r4, #1
 800f79e:	e7c6      	b.n	800f72e <quorem+0x8e>
 800f7a0:	6812      	ldr	r2, [r2, #0]
 800f7a2:	3b04      	subs	r3, #4
 800f7a4:	2a00      	cmp	r2, #0
 800f7a6:	d1ef      	bne.n	800f788 <quorem+0xe8>
 800f7a8:	3c01      	subs	r4, #1
 800f7aa:	e7ea      	b.n	800f782 <quorem+0xe2>
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	e7ee      	b.n	800f78e <quorem+0xee>

0800f7b0 <_dtoa_r>:
 800f7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b4:	69c7      	ldr	r7, [r0, #28]
 800f7b6:	b099      	sub	sp, #100	@ 0x64
 800f7b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f7bc:	ec55 4b10 	vmov	r4, r5, d0
 800f7c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f7c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f7c4:	4683      	mov	fp, r0
 800f7c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f7ca:	b97f      	cbnz	r7, 800f7ec <_dtoa_r+0x3c>
 800f7cc:	2010      	movs	r0, #16
 800f7ce:	f000 fdfd 	bl	80103cc <malloc>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800f7d8:	b920      	cbnz	r0, 800f7e4 <_dtoa_r+0x34>
 800f7da:	4ba7      	ldr	r3, [pc, #668]	@ (800fa78 <_dtoa_r+0x2c8>)
 800f7dc:	21ef      	movs	r1, #239	@ 0xef
 800f7de:	48a7      	ldr	r0, [pc, #668]	@ (800fa7c <_dtoa_r+0x2cc>)
 800f7e0:	f002 fc32 	bl	8012048 <__assert_func>
 800f7e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f7e8:	6007      	str	r7, [r0, #0]
 800f7ea:	60c7      	str	r7, [r0, #12]
 800f7ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f7f0:	6819      	ldr	r1, [r3, #0]
 800f7f2:	b159      	cbz	r1, 800f80c <_dtoa_r+0x5c>
 800f7f4:	685a      	ldr	r2, [r3, #4]
 800f7f6:	604a      	str	r2, [r1, #4]
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	4093      	lsls	r3, r2
 800f7fc:	608b      	str	r3, [r1, #8]
 800f7fe:	4658      	mov	r0, fp
 800f800:	f000 feda 	bl	80105b8 <_Bfree>
 800f804:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f808:	2200      	movs	r2, #0
 800f80a:	601a      	str	r2, [r3, #0]
 800f80c:	1e2b      	subs	r3, r5, #0
 800f80e:	bfb9      	ittee	lt
 800f810:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f814:	9303      	strlt	r3, [sp, #12]
 800f816:	2300      	movge	r3, #0
 800f818:	6033      	strge	r3, [r6, #0]
 800f81a:	9f03      	ldr	r7, [sp, #12]
 800f81c:	4b98      	ldr	r3, [pc, #608]	@ (800fa80 <_dtoa_r+0x2d0>)
 800f81e:	bfbc      	itt	lt
 800f820:	2201      	movlt	r2, #1
 800f822:	6032      	strlt	r2, [r6, #0]
 800f824:	43bb      	bics	r3, r7
 800f826:	d112      	bne.n	800f84e <_dtoa_r+0x9e>
 800f828:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f82a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f82e:	6013      	str	r3, [r2, #0]
 800f830:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f834:	4323      	orrs	r3, r4
 800f836:	f000 854d 	beq.w	80102d4 <_dtoa_r+0xb24>
 800f83a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f83c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fa94 <_dtoa_r+0x2e4>
 800f840:	2b00      	cmp	r3, #0
 800f842:	f000 854f 	beq.w	80102e4 <_dtoa_r+0xb34>
 800f846:	f10a 0303 	add.w	r3, sl, #3
 800f84a:	f000 bd49 	b.w	80102e0 <_dtoa_r+0xb30>
 800f84e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f852:	2200      	movs	r2, #0
 800f854:	ec51 0b17 	vmov	r0, r1, d7
 800f858:	2300      	movs	r3, #0
 800f85a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f85e:	f7f1 f953 	bl	8000b08 <__aeabi_dcmpeq>
 800f862:	4680      	mov	r8, r0
 800f864:	b158      	cbz	r0, 800f87e <_dtoa_r+0xce>
 800f866:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f868:	2301      	movs	r3, #1
 800f86a:	6013      	str	r3, [r2, #0]
 800f86c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f86e:	b113      	cbz	r3, 800f876 <_dtoa_r+0xc6>
 800f870:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f872:	4b84      	ldr	r3, [pc, #528]	@ (800fa84 <_dtoa_r+0x2d4>)
 800f874:	6013      	str	r3, [r2, #0]
 800f876:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fa98 <_dtoa_r+0x2e8>
 800f87a:	f000 bd33 	b.w	80102e4 <_dtoa_r+0xb34>
 800f87e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f882:	aa16      	add	r2, sp, #88	@ 0x58
 800f884:	a917      	add	r1, sp, #92	@ 0x5c
 800f886:	4658      	mov	r0, fp
 800f888:	f001 fa3a 	bl	8010d00 <__d2b>
 800f88c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f890:	4681      	mov	r9, r0
 800f892:	2e00      	cmp	r6, #0
 800f894:	d077      	beq.n	800f986 <_dtoa_r+0x1d6>
 800f896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f898:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f8a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f8a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f8ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	4b74      	ldr	r3, [pc, #464]	@ (800fa88 <_dtoa_r+0x2d8>)
 800f8b6:	f7f0 fd07 	bl	80002c8 <__aeabi_dsub>
 800f8ba:	a369      	add	r3, pc, #420	@ (adr r3, 800fa60 <_dtoa_r+0x2b0>)
 800f8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c0:	f7f0 feba 	bl	8000638 <__aeabi_dmul>
 800f8c4:	a368      	add	r3, pc, #416	@ (adr r3, 800fa68 <_dtoa_r+0x2b8>)
 800f8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ca:	f7f0 fcff 	bl	80002cc <__adddf3>
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	4630      	mov	r0, r6
 800f8d2:	460d      	mov	r5, r1
 800f8d4:	f7f0 fe46 	bl	8000564 <__aeabi_i2d>
 800f8d8:	a365      	add	r3, pc, #404	@ (adr r3, 800fa70 <_dtoa_r+0x2c0>)
 800f8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8de:	f7f0 feab 	bl	8000638 <__aeabi_dmul>
 800f8e2:	4602      	mov	r2, r0
 800f8e4:	460b      	mov	r3, r1
 800f8e6:	4620      	mov	r0, r4
 800f8e8:	4629      	mov	r1, r5
 800f8ea:	f7f0 fcef 	bl	80002cc <__adddf3>
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	460d      	mov	r5, r1
 800f8f2:	f7f1 f951 	bl	8000b98 <__aeabi_d2iz>
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	4607      	mov	r7, r0
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	4620      	mov	r0, r4
 800f8fe:	4629      	mov	r1, r5
 800f900:	f7f1 f90c 	bl	8000b1c <__aeabi_dcmplt>
 800f904:	b140      	cbz	r0, 800f918 <_dtoa_r+0x168>
 800f906:	4638      	mov	r0, r7
 800f908:	f7f0 fe2c 	bl	8000564 <__aeabi_i2d>
 800f90c:	4622      	mov	r2, r4
 800f90e:	462b      	mov	r3, r5
 800f910:	f7f1 f8fa 	bl	8000b08 <__aeabi_dcmpeq>
 800f914:	b900      	cbnz	r0, 800f918 <_dtoa_r+0x168>
 800f916:	3f01      	subs	r7, #1
 800f918:	2f16      	cmp	r7, #22
 800f91a:	d851      	bhi.n	800f9c0 <_dtoa_r+0x210>
 800f91c:	4b5b      	ldr	r3, [pc, #364]	@ (800fa8c <_dtoa_r+0x2dc>)
 800f91e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f92a:	f7f1 f8f7 	bl	8000b1c <__aeabi_dcmplt>
 800f92e:	2800      	cmp	r0, #0
 800f930:	d048      	beq.n	800f9c4 <_dtoa_r+0x214>
 800f932:	3f01      	subs	r7, #1
 800f934:	2300      	movs	r3, #0
 800f936:	9312      	str	r3, [sp, #72]	@ 0x48
 800f938:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f93a:	1b9b      	subs	r3, r3, r6
 800f93c:	1e5a      	subs	r2, r3, #1
 800f93e:	bf44      	itt	mi
 800f940:	f1c3 0801 	rsbmi	r8, r3, #1
 800f944:	2300      	movmi	r3, #0
 800f946:	9208      	str	r2, [sp, #32]
 800f948:	bf54      	ite	pl
 800f94a:	f04f 0800 	movpl.w	r8, #0
 800f94e:	9308      	strmi	r3, [sp, #32]
 800f950:	2f00      	cmp	r7, #0
 800f952:	db39      	blt.n	800f9c8 <_dtoa_r+0x218>
 800f954:	9b08      	ldr	r3, [sp, #32]
 800f956:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f958:	443b      	add	r3, r7
 800f95a:	9308      	str	r3, [sp, #32]
 800f95c:	2300      	movs	r3, #0
 800f95e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f962:	2b09      	cmp	r3, #9
 800f964:	d864      	bhi.n	800fa30 <_dtoa_r+0x280>
 800f966:	2b05      	cmp	r3, #5
 800f968:	bfc4      	itt	gt
 800f96a:	3b04      	subgt	r3, #4
 800f96c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f970:	f1a3 0302 	sub.w	r3, r3, #2
 800f974:	bfcc      	ite	gt
 800f976:	2400      	movgt	r4, #0
 800f978:	2401      	movle	r4, #1
 800f97a:	2b03      	cmp	r3, #3
 800f97c:	d863      	bhi.n	800fa46 <_dtoa_r+0x296>
 800f97e:	e8df f003 	tbb	[pc, r3]
 800f982:	372a      	.short	0x372a
 800f984:	5535      	.short	0x5535
 800f986:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f98a:	441e      	add	r6, r3
 800f98c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f990:	2b20      	cmp	r3, #32
 800f992:	bfc1      	itttt	gt
 800f994:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f998:	409f      	lslgt	r7, r3
 800f99a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f99e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f9a2:	bfd6      	itet	le
 800f9a4:	f1c3 0320 	rsble	r3, r3, #32
 800f9a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800f9ac:	fa04 f003 	lslle.w	r0, r4, r3
 800f9b0:	f7f0 fdc8 	bl	8000544 <__aeabi_ui2d>
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f9ba:	3e01      	subs	r6, #1
 800f9bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800f9be:	e777      	b.n	800f8b0 <_dtoa_r+0x100>
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	e7b8      	b.n	800f936 <_dtoa_r+0x186>
 800f9c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800f9c6:	e7b7      	b.n	800f938 <_dtoa_r+0x188>
 800f9c8:	427b      	negs	r3, r7
 800f9ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	eba8 0807 	sub.w	r8, r8, r7
 800f9d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f9d4:	e7c4      	b.n	800f960 <_dtoa_r+0x1b0>
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	dc35      	bgt.n	800fa4c <_dtoa_r+0x29c>
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	9300      	str	r3, [sp, #0]
 800f9e4:	9307      	str	r3, [sp, #28]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9ea:	e00b      	b.n	800fa04 <_dtoa_r+0x254>
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	e7f3      	b.n	800f9d8 <_dtoa_r+0x228>
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9f6:	18fb      	adds	r3, r7, r3
 800f9f8:	9300      	str	r3, [sp, #0]
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	9307      	str	r3, [sp, #28]
 800fa00:	bfb8      	it	lt
 800fa02:	2301      	movlt	r3, #1
 800fa04:	f8db 001c 	ldr.w	r0, [fp, #28]
 800fa08:	2100      	movs	r1, #0
 800fa0a:	2204      	movs	r2, #4
 800fa0c:	f102 0514 	add.w	r5, r2, #20
 800fa10:	429d      	cmp	r5, r3
 800fa12:	d91f      	bls.n	800fa54 <_dtoa_r+0x2a4>
 800fa14:	6041      	str	r1, [r0, #4]
 800fa16:	4658      	mov	r0, fp
 800fa18:	f000 fd8e 	bl	8010538 <_Balloc>
 800fa1c:	4682      	mov	sl, r0
 800fa1e:	2800      	cmp	r0, #0
 800fa20:	d13c      	bne.n	800fa9c <_dtoa_r+0x2ec>
 800fa22:	4b1b      	ldr	r3, [pc, #108]	@ (800fa90 <_dtoa_r+0x2e0>)
 800fa24:	4602      	mov	r2, r0
 800fa26:	f240 11af 	movw	r1, #431	@ 0x1af
 800fa2a:	e6d8      	b.n	800f7de <_dtoa_r+0x2e>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e7e0      	b.n	800f9f2 <_dtoa_r+0x242>
 800fa30:	2401      	movs	r4, #1
 800fa32:	2300      	movs	r3, #0
 800fa34:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa36:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fa38:	f04f 33ff 	mov.w	r3, #4294967295
 800fa3c:	9300      	str	r3, [sp, #0]
 800fa3e:	9307      	str	r3, [sp, #28]
 800fa40:	2200      	movs	r2, #0
 800fa42:	2312      	movs	r3, #18
 800fa44:	e7d0      	b.n	800f9e8 <_dtoa_r+0x238>
 800fa46:	2301      	movs	r3, #1
 800fa48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa4a:	e7f5      	b.n	800fa38 <_dtoa_r+0x288>
 800fa4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa4e:	9300      	str	r3, [sp, #0]
 800fa50:	9307      	str	r3, [sp, #28]
 800fa52:	e7d7      	b.n	800fa04 <_dtoa_r+0x254>
 800fa54:	3101      	adds	r1, #1
 800fa56:	0052      	lsls	r2, r2, #1
 800fa58:	e7d8      	b.n	800fa0c <_dtoa_r+0x25c>
 800fa5a:	bf00      	nop
 800fa5c:	f3af 8000 	nop.w
 800fa60:	636f4361 	.word	0x636f4361
 800fa64:	3fd287a7 	.word	0x3fd287a7
 800fa68:	8b60c8b3 	.word	0x8b60c8b3
 800fa6c:	3fc68a28 	.word	0x3fc68a28
 800fa70:	509f79fb 	.word	0x509f79fb
 800fa74:	3fd34413 	.word	0x3fd34413
 800fa78:	080131c6 	.word	0x080131c6
 800fa7c:	080131dd 	.word	0x080131dd
 800fa80:	7ff00000 	.word	0x7ff00000
 800fa84:	08013191 	.word	0x08013191
 800fa88:	3ff80000 	.word	0x3ff80000
 800fa8c:	080132d8 	.word	0x080132d8
 800fa90:	08013235 	.word	0x08013235
 800fa94:	080131c2 	.word	0x080131c2
 800fa98:	08013190 	.word	0x08013190
 800fa9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800faa0:	6018      	str	r0, [r3, #0]
 800faa2:	9b07      	ldr	r3, [sp, #28]
 800faa4:	2b0e      	cmp	r3, #14
 800faa6:	f200 80a4 	bhi.w	800fbf2 <_dtoa_r+0x442>
 800faaa:	2c00      	cmp	r4, #0
 800faac:	f000 80a1 	beq.w	800fbf2 <_dtoa_r+0x442>
 800fab0:	2f00      	cmp	r7, #0
 800fab2:	dd33      	ble.n	800fb1c <_dtoa_r+0x36c>
 800fab4:	4bad      	ldr	r3, [pc, #692]	@ (800fd6c <_dtoa_r+0x5bc>)
 800fab6:	f007 020f 	and.w	r2, r7, #15
 800faba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fabe:	ed93 7b00 	vldr	d7, [r3]
 800fac2:	05f8      	lsls	r0, r7, #23
 800fac4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800fac8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800facc:	d516      	bpl.n	800fafc <_dtoa_r+0x34c>
 800face:	4ba8      	ldr	r3, [pc, #672]	@ (800fd70 <_dtoa_r+0x5c0>)
 800fad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fad4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fad8:	f7f0 fed8 	bl	800088c <__aeabi_ddiv>
 800fadc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fae0:	f004 040f 	and.w	r4, r4, #15
 800fae4:	2603      	movs	r6, #3
 800fae6:	4da2      	ldr	r5, [pc, #648]	@ (800fd70 <_dtoa_r+0x5c0>)
 800fae8:	b954      	cbnz	r4, 800fb00 <_dtoa_r+0x350>
 800faea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800faee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800faf2:	f7f0 fecb 	bl	800088c <__aeabi_ddiv>
 800faf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fafa:	e028      	b.n	800fb4e <_dtoa_r+0x39e>
 800fafc:	2602      	movs	r6, #2
 800fafe:	e7f2      	b.n	800fae6 <_dtoa_r+0x336>
 800fb00:	07e1      	lsls	r1, r4, #31
 800fb02:	d508      	bpl.n	800fb16 <_dtoa_r+0x366>
 800fb04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb08:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb0c:	f7f0 fd94 	bl	8000638 <__aeabi_dmul>
 800fb10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb14:	3601      	adds	r6, #1
 800fb16:	1064      	asrs	r4, r4, #1
 800fb18:	3508      	adds	r5, #8
 800fb1a:	e7e5      	b.n	800fae8 <_dtoa_r+0x338>
 800fb1c:	f000 80d2 	beq.w	800fcc4 <_dtoa_r+0x514>
 800fb20:	427c      	negs	r4, r7
 800fb22:	4b92      	ldr	r3, [pc, #584]	@ (800fd6c <_dtoa_r+0x5bc>)
 800fb24:	4d92      	ldr	r5, [pc, #584]	@ (800fd70 <_dtoa_r+0x5c0>)
 800fb26:	f004 020f 	and.w	r2, r4, #15
 800fb2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb36:	f7f0 fd7f 	bl	8000638 <__aeabi_dmul>
 800fb3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb3e:	1124      	asrs	r4, r4, #4
 800fb40:	2300      	movs	r3, #0
 800fb42:	2602      	movs	r6, #2
 800fb44:	2c00      	cmp	r4, #0
 800fb46:	f040 80b2 	bne.w	800fcae <_dtoa_r+0x4fe>
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d1d3      	bne.n	800faf6 <_dtoa_r+0x346>
 800fb4e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fb50:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f000 80b7 	beq.w	800fcc8 <_dtoa_r+0x518>
 800fb5a:	4b86      	ldr	r3, [pc, #536]	@ (800fd74 <_dtoa_r+0x5c4>)
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	4620      	mov	r0, r4
 800fb60:	4629      	mov	r1, r5
 800fb62:	f7f0 ffdb 	bl	8000b1c <__aeabi_dcmplt>
 800fb66:	2800      	cmp	r0, #0
 800fb68:	f000 80ae 	beq.w	800fcc8 <_dtoa_r+0x518>
 800fb6c:	9b07      	ldr	r3, [sp, #28]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f000 80aa 	beq.w	800fcc8 <_dtoa_r+0x518>
 800fb74:	9b00      	ldr	r3, [sp, #0]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	dd37      	ble.n	800fbea <_dtoa_r+0x43a>
 800fb7a:	1e7b      	subs	r3, r7, #1
 800fb7c:	9304      	str	r3, [sp, #16]
 800fb7e:	4620      	mov	r0, r4
 800fb80:	4b7d      	ldr	r3, [pc, #500]	@ (800fd78 <_dtoa_r+0x5c8>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	4629      	mov	r1, r5
 800fb86:	f7f0 fd57 	bl	8000638 <__aeabi_dmul>
 800fb8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb8e:	9c00      	ldr	r4, [sp, #0]
 800fb90:	3601      	adds	r6, #1
 800fb92:	4630      	mov	r0, r6
 800fb94:	f7f0 fce6 	bl	8000564 <__aeabi_i2d>
 800fb98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb9c:	f7f0 fd4c 	bl	8000638 <__aeabi_dmul>
 800fba0:	4b76      	ldr	r3, [pc, #472]	@ (800fd7c <_dtoa_r+0x5cc>)
 800fba2:	2200      	movs	r2, #0
 800fba4:	f7f0 fb92 	bl	80002cc <__adddf3>
 800fba8:	4605      	mov	r5, r0
 800fbaa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fbae:	2c00      	cmp	r4, #0
 800fbb0:	f040 808d 	bne.w	800fcce <_dtoa_r+0x51e>
 800fbb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbb8:	4b71      	ldr	r3, [pc, #452]	@ (800fd80 <_dtoa_r+0x5d0>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	f7f0 fb84 	bl	80002c8 <__aeabi_dsub>
 800fbc0:	4602      	mov	r2, r0
 800fbc2:	460b      	mov	r3, r1
 800fbc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fbc8:	462a      	mov	r2, r5
 800fbca:	4633      	mov	r3, r6
 800fbcc:	f7f0 ffc4 	bl	8000b58 <__aeabi_dcmpgt>
 800fbd0:	2800      	cmp	r0, #0
 800fbd2:	f040 828b 	bne.w	80100ec <_dtoa_r+0x93c>
 800fbd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbda:	462a      	mov	r2, r5
 800fbdc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fbe0:	f7f0 ff9c 	bl	8000b1c <__aeabi_dcmplt>
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	f040 8128 	bne.w	800fe3a <_dtoa_r+0x68a>
 800fbea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fbee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fbf2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	f2c0 815a 	blt.w	800feae <_dtoa_r+0x6fe>
 800fbfa:	2f0e      	cmp	r7, #14
 800fbfc:	f300 8157 	bgt.w	800feae <_dtoa_r+0x6fe>
 800fc00:	4b5a      	ldr	r3, [pc, #360]	@ (800fd6c <_dtoa_r+0x5bc>)
 800fc02:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fc06:	ed93 7b00 	vldr	d7, [r3]
 800fc0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	ed8d 7b00 	vstr	d7, [sp]
 800fc12:	da03      	bge.n	800fc1c <_dtoa_r+0x46c>
 800fc14:	9b07      	ldr	r3, [sp, #28]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f340 8101 	ble.w	800fe1e <_dtoa_r+0x66e>
 800fc1c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fc20:	4656      	mov	r6, sl
 800fc22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc26:	4620      	mov	r0, r4
 800fc28:	4629      	mov	r1, r5
 800fc2a:	f7f0 fe2f 	bl	800088c <__aeabi_ddiv>
 800fc2e:	f7f0 ffb3 	bl	8000b98 <__aeabi_d2iz>
 800fc32:	4680      	mov	r8, r0
 800fc34:	f7f0 fc96 	bl	8000564 <__aeabi_i2d>
 800fc38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc3c:	f7f0 fcfc 	bl	8000638 <__aeabi_dmul>
 800fc40:	4602      	mov	r2, r0
 800fc42:	460b      	mov	r3, r1
 800fc44:	4620      	mov	r0, r4
 800fc46:	4629      	mov	r1, r5
 800fc48:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fc4c:	f7f0 fb3c 	bl	80002c8 <__aeabi_dsub>
 800fc50:	f806 4b01 	strb.w	r4, [r6], #1
 800fc54:	9d07      	ldr	r5, [sp, #28]
 800fc56:	eba6 040a 	sub.w	r4, r6, sl
 800fc5a:	42a5      	cmp	r5, r4
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	460b      	mov	r3, r1
 800fc60:	f040 8117 	bne.w	800fe92 <_dtoa_r+0x6e2>
 800fc64:	f7f0 fb32 	bl	80002cc <__adddf3>
 800fc68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc6c:	4604      	mov	r4, r0
 800fc6e:	460d      	mov	r5, r1
 800fc70:	f7f0 ff72 	bl	8000b58 <__aeabi_dcmpgt>
 800fc74:	2800      	cmp	r0, #0
 800fc76:	f040 80f9 	bne.w	800fe6c <_dtoa_r+0x6bc>
 800fc7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc7e:	4620      	mov	r0, r4
 800fc80:	4629      	mov	r1, r5
 800fc82:	f7f0 ff41 	bl	8000b08 <__aeabi_dcmpeq>
 800fc86:	b118      	cbz	r0, 800fc90 <_dtoa_r+0x4e0>
 800fc88:	f018 0f01 	tst.w	r8, #1
 800fc8c:	f040 80ee 	bne.w	800fe6c <_dtoa_r+0x6bc>
 800fc90:	4649      	mov	r1, r9
 800fc92:	4658      	mov	r0, fp
 800fc94:	f000 fc90 	bl	80105b8 <_Bfree>
 800fc98:	2300      	movs	r3, #0
 800fc9a:	7033      	strb	r3, [r6, #0]
 800fc9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc9e:	3701      	adds	r7, #1
 800fca0:	601f      	str	r7, [r3, #0]
 800fca2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	f000 831d 	beq.w	80102e4 <_dtoa_r+0xb34>
 800fcaa:	601e      	str	r6, [r3, #0]
 800fcac:	e31a      	b.n	80102e4 <_dtoa_r+0xb34>
 800fcae:	07e2      	lsls	r2, r4, #31
 800fcb0:	d505      	bpl.n	800fcbe <_dtoa_r+0x50e>
 800fcb2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fcb6:	f7f0 fcbf 	bl	8000638 <__aeabi_dmul>
 800fcba:	3601      	adds	r6, #1
 800fcbc:	2301      	movs	r3, #1
 800fcbe:	1064      	asrs	r4, r4, #1
 800fcc0:	3508      	adds	r5, #8
 800fcc2:	e73f      	b.n	800fb44 <_dtoa_r+0x394>
 800fcc4:	2602      	movs	r6, #2
 800fcc6:	e742      	b.n	800fb4e <_dtoa_r+0x39e>
 800fcc8:	9c07      	ldr	r4, [sp, #28]
 800fcca:	9704      	str	r7, [sp, #16]
 800fccc:	e761      	b.n	800fb92 <_dtoa_r+0x3e2>
 800fcce:	4b27      	ldr	r3, [pc, #156]	@ (800fd6c <_dtoa_r+0x5bc>)
 800fcd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fcd2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fcd6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fcda:	4454      	add	r4, sl
 800fcdc:	2900      	cmp	r1, #0
 800fcde:	d053      	beq.n	800fd88 <_dtoa_r+0x5d8>
 800fce0:	4928      	ldr	r1, [pc, #160]	@ (800fd84 <_dtoa_r+0x5d4>)
 800fce2:	2000      	movs	r0, #0
 800fce4:	f7f0 fdd2 	bl	800088c <__aeabi_ddiv>
 800fce8:	4633      	mov	r3, r6
 800fcea:	462a      	mov	r2, r5
 800fcec:	f7f0 faec 	bl	80002c8 <__aeabi_dsub>
 800fcf0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fcf4:	4656      	mov	r6, sl
 800fcf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcfa:	f7f0 ff4d 	bl	8000b98 <__aeabi_d2iz>
 800fcfe:	4605      	mov	r5, r0
 800fd00:	f7f0 fc30 	bl	8000564 <__aeabi_i2d>
 800fd04:	4602      	mov	r2, r0
 800fd06:	460b      	mov	r3, r1
 800fd08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd0c:	f7f0 fadc 	bl	80002c8 <__aeabi_dsub>
 800fd10:	3530      	adds	r5, #48	@ 0x30
 800fd12:	4602      	mov	r2, r0
 800fd14:	460b      	mov	r3, r1
 800fd16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fd1a:	f806 5b01 	strb.w	r5, [r6], #1
 800fd1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fd22:	f7f0 fefb 	bl	8000b1c <__aeabi_dcmplt>
 800fd26:	2800      	cmp	r0, #0
 800fd28:	d171      	bne.n	800fe0e <_dtoa_r+0x65e>
 800fd2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd2e:	4911      	ldr	r1, [pc, #68]	@ (800fd74 <_dtoa_r+0x5c4>)
 800fd30:	2000      	movs	r0, #0
 800fd32:	f7f0 fac9 	bl	80002c8 <__aeabi_dsub>
 800fd36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fd3a:	f7f0 feef 	bl	8000b1c <__aeabi_dcmplt>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	f040 8095 	bne.w	800fe6e <_dtoa_r+0x6be>
 800fd44:	42a6      	cmp	r6, r4
 800fd46:	f43f af50 	beq.w	800fbea <_dtoa_r+0x43a>
 800fd4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fd4e:	4b0a      	ldr	r3, [pc, #40]	@ (800fd78 <_dtoa_r+0x5c8>)
 800fd50:	2200      	movs	r2, #0
 800fd52:	f7f0 fc71 	bl	8000638 <__aeabi_dmul>
 800fd56:	4b08      	ldr	r3, [pc, #32]	@ (800fd78 <_dtoa_r+0x5c8>)
 800fd58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd62:	f7f0 fc69 	bl	8000638 <__aeabi_dmul>
 800fd66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd6a:	e7c4      	b.n	800fcf6 <_dtoa_r+0x546>
 800fd6c:	080132d8 	.word	0x080132d8
 800fd70:	080132b0 	.word	0x080132b0
 800fd74:	3ff00000 	.word	0x3ff00000
 800fd78:	40240000 	.word	0x40240000
 800fd7c:	401c0000 	.word	0x401c0000
 800fd80:	40140000 	.word	0x40140000
 800fd84:	3fe00000 	.word	0x3fe00000
 800fd88:	4631      	mov	r1, r6
 800fd8a:	4628      	mov	r0, r5
 800fd8c:	f7f0 fc54 	bl	8000638 <__aeabi_dmul>
 800fd90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fd94:	9415      	str	r4, [sp, #84]	@ 0x54
 800fd96:	4656      	mov	r6, sl
 800fd98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd9c:	f7f0 fefc 	bl	8000b98 <__aeabi_d2iz>
 800fda0:	4605      	mov	r5, r0
 800fda2:	f7f0 fbdf 	bl	8000564 <__aeabi_i2d>
 800fda6:	4602      	mov	r2, r0
 800fda8:	460b      	mov	r3, r1
 800fdaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdae:	f7f0 fa8b 	bl	80002c8 <__aeabi_dsub>
 800fdb2:	3530      	adds	r5, #48	@ 0x30
 800fdb4:	f806 5b01 	strb.w	r5, [r6], #1
 800fdb8:	4602      	mov	r2, r0
 800fdba:	460b      	mov	r3, r1
 800fdbc:	42a6      	cmp	r6, r4
 800fdbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fdc2:	f04f 0200 	mov.w	r2, #0
 800fdc6:	d124      	bne.n	800fe12 <_dtoa_r+0x662>
 800fdc8:	4bac      	ldr	r3, [pc, #688]	@ (801007c <_dtoa_r+0x8cc>)
 800fdca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fdce:	f7f0 fa7d 	bl	80002cc <__adddf3>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdda:	f7f0 febd 	bl	8000b58 <__aeabi_dcmpgt>
 800fdde:	2800      	cmp	r0, #0
 800fde0:	d145      	bne.n	800fe6e <_dtoa_r+0x6be>
 800fde2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fde6:	49a5      	ldr	r1, [pc, #660]	@ (801007c <_dtoa_r+0x8cc>)
 800fde8:	2000      	movs	r0, #0
 800fdea:	f7f0 fa6d 	bl	80002c8 <__aeabi_dsub>
 800fdee:	4602      	mov	r2, r0
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdf6:	f7f0 fe91 	bl	8000b1c <__aeabi_dcmplt>
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	f43f aef5 	beq.w	800fbea <_dtoa_r+0x43a>
 800fe00:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fe02:	1e73      	subs	r3, r6, #1
 800fe04:	9315      	str	r3, [sp, #84]	@ 0x54
 800fe06:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fe0a:	2b30      	cmp	r3, #48	@ 0x30
 800fe0c:	d0f8      	beq.n	800fe00 <_dtoa_r+0x650>
 800fe0e:	9f04      	ldr	r7, [sp, #16]
 800fe10:	e73e      	b.n	800fc90 <_dtoa_r+0x4e0>
 800fe12:	4b9b      	ldr	r3, [pc, #620]	@ (8010080 <_dtoa_r+0x8d0>)
 800fe14:	f7f0 fc10 	bl	8000638 <__aeabi_dmul>
 800fe18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe1c:	e7bc      	b.n	800fd98 <_dtoa_r+0x5e8>
 800fe1e:	d10c      	bne.n	800fe3a <_dtoa_r+0x68a>
 800fe20:	4b98      	ldr	r3, [pc, #608]	@ (8010084 <_dtoa_r+0x8d4>)
 800fe22:	2200      	movs	r2, #0
 800fe24:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe28:	f7f0 fc06 	bl	8000638 <__aeabi_dmul>
 800fe2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe30:	f7f0 fe88 	bl	8000b44 <__aeabi_dcmpge>
 800fe34:	2800      	cmp	r0, #0
 800fe36:	f000 8157 	beq.w	80100e8 <_dtoa_r+0x938>
 800fe3a:	2400      	movs	r4, #0
 800fe3c:	4625      	mov	r5, r4
 800fe3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe40:	43db      	mvns	r3, r3
 800fe42:	9304      	str	r3, [sp, #16]
 800fe44:	4656      	mov	r6, sl
 800fe46:	2700      	movs	r7, #0
 800fe48:	4621      	mov	r1, r4
 800fe4a:	4658      	mov	r0, fp
 800fe4c:	f000 fbb4 	bl	80105b8 <_Bfree>
 800fe50:	2d00      	cmp	r5, #0
 800fe52:	d0dc      	beq.n	800fe0e <_dtoa_r+0x65e>
 800fe54:	b12f      	cbz	r7, 800fe62 <_dtoa_r+0x6b2>
 800fe56:	42af      	cmp	r7, r5
 800fe58:	d003      	beq.n	800fe62 <_dtoa_r+0x6b2>
 800fe5a:	4639      	mov	r1, r7
 800fe5c:	4658      	mov	r0, fp
 800fe5e:	f000 fbab 	bl	80105b8 <_Bfree>
 800fe62:	4629      	mov	r1, r5
 800fe64:	4658      	mov	r0, fp
 800fe66:	f000 fba7 	bl	80105b8 <_Bfree>
 800fe6a:	e7d0      	b.n	800fe0e <_dtoa_r+0x65e>
 800fe6c:	9704      	str	r7, [sp, #16]
 800fe6e:	4633      	mov	r3, r6
 800fe70:	461e      	mov	r6, r3
 800fe72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe76:	2a39      	cmp	r2, #57	@ 0x39
 800fe78:	d107      	bne.n	800fe8a <_dtoa_r+0x6da>
 800fe7a:	459a      	cmp	sl, r3
 800fe7c:	d1f8      	bne.n	800fe70 <_dtoa_r+0x6c0>
 800fe7e:	9a04      	ldr	r2, [sp, #16]
 800fe80:	3201      	adds	r2, #1
 800fe82:	9204      	str	r2, [sp, #16]
 800fe84:	2230      	movs	r2, #48	@ 0x30
 800fe86:	f88a 2000 	strb.w	r2, [sl]
 800fe8a:	781a      	ldrb	r2, [r3, #0]
 800fe8c:	3201      	adds	r2, #1
 800fe8e:	701a      	strb	r2, [r3, #0]
 800fe90:	e7bd      	b.n	800fe0e <_dtoa_r+0x65e>
 800fe92:	4b7b      	ldr	r3, [pc, #492]	@ (8010080 <_dtoa_r+0x8d0>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	f7f0 fbcf 	bl	8000638 <__aeabi_dmul>
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	4604      	mov	r4, r0
 800fea0:	460d      	mov	r5, r1
 800fea2:	f7f0 fe31 	bl	8000b08 <__aeabi_dcmpeq>
 800fea6:	2800      	cmp	r0, #0
 800fea8:	f43f aebb 	beq.w	800fc22 <_dtoa_r+0x472>
 800feac:	e6f0      	b.n	800fc90 <_dtoa_r+0x4e0>
 800feae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800feb0:	2a00      	cmp	r2, #0
 800feb2:	f000 80db 	beq.w	801006c <_dtoa_r+0x8bc>
 800feb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800feb8:	2a01      	cmp	r2, #1
 800feba:	f300 80bf 	bgt.w	801003c <_dtoa_r+0x88c>
 800febe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fec0:	2a00      	cmp	r2, #0
 800fec2:	f000 80b7 	beq.w	8010034 <_dtoa_r+0x884>
 800fec6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800feca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fecc:	4646      	mov	r6, r8
 800fece:	9a08      	ldr	r2, [sp, #32]
 800fed0:	2101      	movs	r1, #1
 800fed2:	441a      	add	r2, r3
 800fed4:	4658      	mov	r0, fp
 800fed6:	4498      	add	r8, r3
 800fed8:	9208      	str	r2, [sp, #32]
 800feda:	f000 fc6b 	bl	80107b4 <__i2b>
 800fede:	4605      	mov	r5, r0
 800fee0:	b15e      	cbz	r6, 800fefa <_dtoa_r+0x74a>
 800fee2:	9b08      	ldr	r3, [sp, #32]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	dd08      	ble.n	800fefa <_dtoa_r+0x74a>
 800fee8:	42b3      	cmp	r3, r6
 800feea:	9a08      	ldr	r2, [sp, #32]
 800feec:	bfa8      	it	ge
 800feee:	4633      	movge	r3, r6
 800fef0:	eba8 0803 	sub.w	r8, r8, r3
 800fef4:	1af6      	subs	r6, r6, r3
 800fef6:	1ad3      	subs	r3, r2, r3
 800fef8:	9308      	str	r3, [sp, #32]
 800fefa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fefc:	b1f3      	cbz	r3, 800ff3c <_dtoa_r+0x78c>
 800fefe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 80b7 	beq.w	8010074 <_dtoa_r+0x8c4>
 800ff06:	b18c      	cbz	r4, 800ff2c <_dtoa_r+0x77c>
 800ff08:	4629      	mov	r1, r5
 800ff0a:	4622      	mov	r2, r4
 800ff0c:	4658      	mov	r0, fp
 800ff0e:	f000 fd11 	bl	8010934 <__pow5mult>
 800ff12:	464a      	mov	r2, r9
 800ff14:	4601      	mov	r1, r0
 800ff16:	4605      	mov	r5, r0
 800ff18:	4658      	mov	r0, fp
 800ff1a:	f000 fc61 	bl	80107e0 <__multiply>
 800ff1e:	4649      	mov	r1, r9
 800ff20:	9004      	str	r0, [sp, #16]
 800ff22:	4658      	mov	r0, fp
 800ff24:	f000 fb48 	bl	80105b8 <_Bfree>
 800ff28:	9b04      	ldr	r3, [sp, #16]
 800ff2a:	4699      	mov	r9, r3
 800ff2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff2e:	1b1a      	subs	r2, r3, r4
 800ff30:	d004      	beq.n	800ff3c <_dtoa_r+0x78c>
 800ff32:	4649      	mov	r1, r9
 800ff34:	4658      	mov	r0, fp
 800ff36:	f000 fcfd 	bl	8010934 <__pow5mult>
 800ff3a:	4681      	mov	r9, r0
 800ff3c:	2101      	movs	r1, #1
 800ff3e:	4658      	mov	r0, fp
 800ff40:	f000 fc38 	bl	80107b4 <__i2b>
 800ff44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff46:	4604      	mov	r4, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f000 81cf 	beq.w	80102ec <_dtoa_r+0xb3c>
 800ff4e:	461a      	mov	r2, r3
 800ff50:	4601      	mov	r1, r0
 800ff52:	4658      	mov	r0, fp
 800ff54:	f000 fcee 	bl	8010934 <__pow5mult>
 800ff58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff5a:	2b01      	cmp	r3, #1
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	f300 8095 	bgt.w	801008c <_dtoa_r+0x8dc>
 800ff62:	9b02      	ldr	r3, [sp, #8]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f040 8087 	bne.w	8010078 <_dtoa_r+0x8c8>
 800ff6a:	9b03      	ldr	r3, [sp, #12]
 800ff6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	f040 8089 	bne.w	8010088 <_dtoa_r+0x8d8>
 800ff76:	9b03      	ldr	r3, [sp, #12]
 800ff78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff7c:	0d1b      	lsrs	r3, r3, #20
 800ff7e:	051b      	lsls	r3, r3, #20
 800ff80:	b12b      	cbz	r3, 800ff8e <_dtoa_r+0x7de>
 800ff82:	9b08      	ldr	r3, [sp, #32]
 800ff84:	3301      	adds	r3, #1
 800ff86:	9308      	str	r3, [sp, #32]
 800ff88:	f108 0801 	add.w	r8, r8, #1
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	f000 81b0 	beq.w	80102f8 <_dtoa_r+0xb48>
 800ff98:	6923      	ldr	r3, [r4, #16]
 800ff9a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff9e:	6918      	ldr	r0, [r3, #16]
 800ffa0:	f000 fbbc 	bl	801071c <__hi0bits>
 800ffa4:	f1c0 0020 	rsb	r0, r0, #32
 800ffa8:	9b08      	ldr	r3, [sp, #32]
 800ffaa:	4418      	add	r0, r3
 800ffac:	f010 001f 	ands.w	r0, r0, #31
 800ffb0:	d077      	beq.n	80100a2 <_dtoa_r+0x8f2>
 800ffb2:	f1c0 0320 	rsb	r3, r0, #32
 800ffb6:	2b04      	cmp	r3, #4
 800ffb8:	dd6b      	ble.n	8010092 <_dtoa_r+0x8e2>
 800ffba:	9b08      	ldr	r3, [sp, #32]
 800ffbc:	f1c0 001c 	rsb	r0, r0, #28
 800ffc0:	4403      	add	r3, r0
 800ffc2:	4480      	add	r8, r0
 800ffc4:	4406      	add	r6, r0
 800ffc6:	9308      	str	r3, [sp, #32]
 800ffc8:	f1b8 0f00 	cmp.w	r8, #0
 800ffcc:	dd05      	ble.n	800ffda <_dtoa_r+0x82a>
 800ffce:	4649      	mov	r1, r9
 800ffd0:	4642      	mov	r2, r8
 800ffd2:	4658      	mov	r0, fp
 800ffd4:	f000 fd08 	bl	80109e8 <__lshift>
 800ffd8:	4681      	mov	r9, r0
 800ffda:	9b08      	ldr	r3, [sp, #32]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	dd05      	ble.n	800ffec <_dtoa_r+0x83c>
 800ffe0:	4621      	mov	r1, r4
 800ffe2:	461a      	mov	r2, r3
 800ffe4:	4658      	mov	r0, fp
 800ffe6:	f000 fcff 	bl	80109e8 <__lshift>
 800ffea:	4604      	mov	r4, r0
 800ffec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d059      	beq.n	80100a6 <_dtoa_r+0x8f6>
 800fff2:	4621      	mov	r1, r4
 800fff4:	4648      	mov	r0, r9
 800fff6:	f000 fd63 	bl	8010ac0 <__mcmp>
 800fffa:	2800      	cmp	r0, #0
 800fffc:	da53      	bge.n	80100a6 <_dtoa_r+0x8f6>
 800fffe:	1e7b      	subs	r3, r7, #1
 8010000:	9304      	str	r3, [sp, #16]
 8010002:	4649      	mov	r1, r9
 8010004:	2300      	movs	r3, #0
 8010006:	220a      	movs	r2, #10
 8010008:	4658      	mov	r0, fp
 801000a:	f000 faf7 	bl	80105fc <__multadd>
 801000e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010010:	4681      	mov	r9, r0
 8010012:	2b00      	cmp	r3, #0
 8010014:	f000 8172 	beq.w	80102fc <_dtoa_r+0xb4c>
 8010018:	2300      	movs	r3, #0
 801001a:	4629      	mov	r1, r5
 801001c:	220a      	movs	r2, #10
 801001e:	4658      	mov	r0, fp
 8010020:	f000 faec 	bl	80105fc <__multadd>
 8010024:	9b00      	ldr	r3, [sp, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	4605      	mov	r5, r0
 801002a:	dc67      	bgt.n	80100fc <_dtoa_r+0x94c>
 801002c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801002e:	2b02      	cmp	r3, #2
 8010030:	dc41      	bgt.n	80100b6 <_dtoa_r+0x906>
 8010032:	e063      	b.n	80100fc <_dtoa_r+0x94c>
 8010034:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010036:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801003a:	e746      	b.n	800feca <_dtoa_r+0x71a>
 801003c:	9b07      	ldr	r3, [sp, #28]
 801003e:	1e5c      	subs	r4, r3, #1
 8010040:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010042:	42a3      	cmp	r3, r4
 8010044:	bfbf      	itttt	lt
 8010046:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010048:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801004a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801004c:	1ae3      	sublt	r3, r4, r3
 801004e:	bfb4      	ite	lt
 8010050:	18d2      	addlt	r2, r2, r3
 8010052:	1b1c      	subge	r4, r3, r4
 8010054:	9b07      	ldr	r3, [sp, #28]
 8010056:	bfbc      	itt	lt
 8010058:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801005a:	2400      	movlt	r4, #0
 801005c:	2b00      	cmp	r3, #0
 801005e:	bfb5      	itete	lt
 8010060:	eba8 0603 	sublt.w	r6, r8, r3
 8010064:	9b07      	ldrge	r3, [sp, #28]
 8010066:	2300      	movlt	r3, #0
 8010068:	4646      	movge	r6, r8
 801006a:	e730      	b.n	800fece <_dtoa_r+0x71e>
 801006c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801006e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010070:	4646      	mov	r6, r8
 8010072:	e735      	b.n	800fee0 <_dtoa_r+0x730>
 8010074:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010076:	e75c      	b.n	800ff32 <_dtoa_r+0x782>
 8010078:	2300      	movs	r3, #0
 801007a:	e788      	b.n	800ff8e <_dtoa_r+0x7de>
 801007c:	3fe00000 	.word	0x3fe00000
 8010080:	40240000 	.word	0x40240000
 8010084:	40140000 	.word	0x40140000
 8010088:	9b02      	ldr	r3, [sp, #8]
 801008a:	e780      	b.n	800ff8e <_dtoa_r+0x7de>
 801008c:	2300      	movs	r3, #0
 801008e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010090:	e782      	b.n	800ff98 <_dtoa_r+0x7e8>
 8010092:	d099      	beq.n	800ffc8 <_dtoa_r+0x818>
 8010094:	9a08      	ldr	r2, [sp, #32]
 8010096:	331c      	adds	r3, #28
 8010098:	441a      	add	r2, r3
 801009a:	4498      	add	r8, r3
 801009c:	441e      	add	r6, r3
 801009e:	9208      	str	r2, [sp, #32]
 80100a0:	e792      	b.n	800ffc8 <_dtoa_r+0x818>
 80100a2:	4603      	mov	r3, r0
 80100a4:	e7f6      	b.n	8010094 <_dtoa_r+0x8e4>
 80100a6:	9b07      	ldr	r3, [sp, #28]
 80100a8:	9704      	str	r7, [sp, #16]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	dc20      	bgt.n	80100f0 <_dtoa_r+0x940>
 80100ae:	9300      	str	r3, [sp, #0]
 80100b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80100b2:	2b02      	cmp	r3, #2
 80100b4:	dd1e      	ble.n	80100f4 <_dtoa_r+0x944>
 80100b6:	9b00      	ldr	r3, [sp, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	f47f aec0 	bne.w	800fe3e <_dtoa_r+0x68e>
 80100be:	4621      	mov	r1, r4
 80100c0:	2205      	movs	r2, #5
 80100c2:	4658      	mov	r0, fp
 80100c4:	f000 fa9a 	bl	80105fc <__multadd>
 80100c8:	4601      	mov	r1, r0
 80100ca:	4604      	mov	r4, r0
 80100cc:	4648      	mov	r0, r9
 80100ce:	f000 fcf7 	bl	8010ac0 <__mcmp>
 80100d2:	2800      	cmp	r0, #0
 80100d4:	f77f aeb3 	ble.w	800fe3e <_dtoa_r+0x68e>
 80100d8:	4656      	mov	r6, sl
 80100da:	2331      	movs	r3, #49	@ 0x31
 80100dc:	f806 3b01 	strb.w	r3, [r6], #1
 80100e0:	9b04      	ldr	r3, [sp, #16]
 80100e2:	3301      	adds	r3, #1
 80100e4:	9304      	str	r3, [sp, #16]
 80100e6:	e6ae      	b.n	800fe46 <_dtoa_r+0x696>
 80100e8:	9c07      	ldr	r4, [sp, #28]
 80100ea:	9704      	str	r7, [sp, #16]
 80100ec:	4625      	mov	r5, r4
 80100ee:	e7f3      	b.n	80100d8 <_dtoa_r+0x928>
 80100f0:	9b07      	ldr	r3, [sp, #28]
 80100f2:	9300      	str	r3, [sp, #0]
 80100f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	f000 8104 	beq.w	8010304 <_dtoa_r+0xb54>
 80100fc:	2e00      	cmp	r6, #0
 80100fe:	dd05      	ble.n	801010c <_dtoa_r+0x95c>
 8010100:	4629      	mov	r1, r5
 8010102:	4632      	mov	r2, r6
 8010104:	4658      	mov	r0, fp
 8010106:	f000 fc6f 	bl	80109e8 <__lshift>
 801010a:	4605      	mov	r5, r0
 801010c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801010e:	2b00      	cmp	r3, #0
 8010110:	d05a      	beq.n	80101c8 <_dtoa_r+0xa18>
 8010112:	6869      	ldr	r1, [r5, #4]
 8010114:	4658      	mov	r0, fp
 8010116:	f000 fa0f 	bl	8010538 <_Balloc>
 801011a:	4606      	mov	r6, r0
 801011c:	b928      	cbnz	r0, 801012a <_dtoa_r+0x97a>
 801011e:	4b84      	ldr	r3, [pc, #528]	@ (8010330 <_dtoa_r+0xb80>)
 8010120:	4602      	mov	r2, r0
 8010122:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010126:	f7ff bb5a 	b.w	800f7de <_dtoa_r+0x2e>
 801012a:	692a      	ldr	r2, [r5, #16]
 801012c:	3202      	adds	r2, #2
 801012e:	0092      	lsls	r2, r2, #2
 8010130:	f105 010c 	add.w	r1, r5, #12
 8010134:	300c      	adds	r0, #12
 8010136:	f7ff fa9e 	bl	800f676 <memcpy>
 801013a:	2201      	movs	r2, #1
 801013c:	4631      	mov	r1, r6
 801013e:	4658      	mov	r0, fp
 8010140:	f000 fc52 	bl	80109e8 <__lshift>
 8010144:	f10a 0301 	add.w	r3, sl, #1
 8010148:	9307      	str	r3, [sp, #28]
 801014a:	9b00      	ldr	r3, [sp, #0]
 801014c:	4453      	add	r3, sl
 801014e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010150:	9b02      	ldr	r3, [sp, #8]
 8010152:	f003 0301 	and.w	r3, r3, #1
 8010156:	462f      	mov	r7, r5
 8010158:	930a      	str	r3, [sp, #40]	@ 0x28
 801015a:	4605      	mov	r5, r0
 801015c:	9b07      	ldr	r3, [sp, #28]
 801015e:	4621      	mov	r1, r4
 8010160:	3b01      	subs	r3, #1
 8010162:	4648      	mov	r0, r9
 8010164:	9300      	str	r3, [sp, #0]
 8010166:	f7ff fa9b 	bl	800f6a0 <quorem>
 801016a:	4639      	mov	r1, r7
 801016c:	9002      	str	r0, [sp, #8]
 801016e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010172:	4648      	mov	r0, r9
 8010174:	f000 fca4 	bl	8010ac0 <__mcmp>
 8010178:	462a      	mov	r2, r5
 801017a:	9008      	str	r0, [sp, #32]
 801017c:	4621      	mov	r1, r4
 801017e:	4658      	mov	r0, fp
 8010180:	f000 fcba 	bl	8010af8 <__mdiff>
 8010184:	68c2      	ldr	r2, [r0, #12]
 8010186:	4606      	mov	r6, r0
 8010188:	bb02      	cbnz	r2, 80101cc <_dtoa_r+0xa1c>
 801018a:	4601      	mov	r1, r0
 801018c:	4648      	mov	r0, r9
 801018e:	f000 fc97 	bl	8010ac0 <__mcmp>
 8010192:	4602      	mov	r2, r0
 8010194:	4631      	mov	r1, r6
 8010196:	4658      	mov	r0, fp
 8010198:	920e      	str	r2, [sp, #56]	@ 0x38
 801019a:	f000 fa0d 	bl	80105b8 <_Bfree>
 801019e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101a2:	9e07      	ldr	r6, [sp, #28]
 80101a4:	ea43 0102 	orr.w	r1, r3, r2
 80101a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80101aa:	4319      	orrs	r1, r3
 80101ac:	d110      	bne.n	80101d0 <_dtoa_r+0xa20>
 80101ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80101b2:	d029      	beq.n	8010208 <_dtoa_r+0xa58>
 80101b4:	9b08      	ldr	r3, [sp, #32]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	dd02      	ble.n	80101c0 <_dtoa_r+0xa10>
 80101ba:	9b02      	ldr	r3, [sp, #8]
 80101bc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80101c0:	9b00      	ldr	r3, [sp, #0]
 80101c2:	f883 8000 	strb.w	r8, [r3]
 80101c6:	e63f      	b.n	800fe48 <_dtoa_r+0x698>
 80101c8:	4628      	mov	r0, r5
 80101ca:	e7bb      	b.n	8010144 <_dtoa_r+0x994>
 80101cc:	2201      	movs	r2, #1
 80101ce:	e7e1      	b.n	8010194 <_dtoa_r+0x9e4>
 80101d0:	9b08      	ldr	r3, [sp, #32]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	db04      	blt.n	80101e0 <_dtoa_r+0xa30>
 80101d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80101d8:	430b      	orrs	r3, r1
 80101da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80101dc:	430b      	orrs	r3, r1
 80101de:	d120      	bne.n	8010222 <_dtoa_r+0xa72>
 80101e0:	2a00      	cmp	r2, #0
 80101e2:	dded      	ble.n	80101c0 <_dtoa_r+0xa10>
 80101e4:	4649      	mov	r1, r9
 80101e6:	2201      	movs	r2, #1
 80101e8:	4658      	mov	r0, fp
 80101ea:	f000 fbfd 	bl	80109e8 <__lshift>
 80101ee:	4621      	mov	r1, r4
 80101f0:	4681      	mov	r9, r0
 80101f2:	f000 fc65 	bl	8010ac0 <__mcmp>
 80101f6:	2800      	cmp	r0, #0
 80101f8:	dc03      	bgt.n	8010202 <_dtoa_r+0xa52>
 80101fa:	d1e1      	bne.n	80101c0 <_dtoa_r+0xa10>
 80101fc:	f018 0f01 	tst.w	r8, #1
 8010200:	d0de      	beq.n	80101c0 <_dtoa_r+0xa10>
 8010202:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010206:	d1d8      	bne.n	80101ba <_dtoa_r+0xa0a>
 8010208:	9a00      	ldr	r2, [sp, #0]
 801020a:	2339      	movs	r3, #57	@ 0x39
 801020c:	7013      	strb	r3, [r2, #0]
 801020e:	4633      	mov	r3, r6
 8010210:	461e      	mov	r6, r3
 8010212:	3b01      	subs	r3, #1
 8010214:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010218:	2a39      	cmp	r2, #57	@ 0x39
 801021a:	d052      	beq.n	80102c2 <_dtoa_r+0xb12>
 801021c:	3201      	adds	r2, #1
 801021e:	701a      	strb	r2, [r3, #0]
 8010220:	e612      	b.n	800fe48 <_dtoa_r+0x698>
 8010222:	2a00      	cmp	r2, #0
 8010224:	dd07      	ble.n	8010236 <_dtoa_r+0xa86>
 8010226:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801022a:	d0ed      	beq.n	8010208 <_dtoa_r+0xa58>
 801022c:	9a00      	ldr	r2, [sp, #0]
 801022e:	f108 0301 	add.w	r3, r8, #1
 8010232:	7013      	strb	r3, [r2, #0]
 8010234:	e608      	b.n	800fe48 <_dtoa_r+0x698>
 8010236:	9b07      	ldr	r3, [sp, #28]
 8010238:	9a07      	ldr	r2, [sp, #28]
 801023a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801023e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010240:	4293      	cmp	r3, r2
 8010242:	d028      	beq.n	8010296 <_dtoa_r+0xae6>
 8010244:	4649      	mov	r1, r9
 8010246:	2300      	movs	r3, #0
 8010248:	220a      	movs	r2, #10
 801024a:	4658      	mov	r0, fp
 801024c:	f000 f9d6 	bl	80105fc <__multadd>
 8010250:	42af      	cmp	r7, r5
 8010252:	4681      	mov	r9, r0
 8010254:	f04f 0300 	mov.w	r3, #0
 8010258:	f04f 020a 	mov.w	r2, #10
 801025c:	4639      	mov	r1, r7
 801025e:	4658      	mov	r0, fp
 8010260:	d107      	bne.n	8010272 <_dtoa_r+0xac2>
 8010262:	f000 f9cb 	bl	80105fc <__multadd>
 8010266:	4607      	mov	r7, r0
 8010268:	4605      	mov	r5, r0
 801026a:	9b07      	ldr	r3, [sp, #28]
 801026c:	3301      	adds	r3, #1
 801026e:	9307      	str	r3, [sp, #28]
 8010270:	e774      	b.n	801015c <_dtoa_r+0x9ac>
 8010272:	f000 f9c3 	bl	80105fc <__multadd>
 8010276:	4629      	mov	r1, r5
 8010278:	4607      	mov	r7, r0
 801027a:	2300      	movs	r3, #0
 801027c:	220a      	movs	r2, #10
 801027e:	4658      	mov	r0, fp
 8010280:	f000 f9bc 	bl	80105fc <__multadd>
 8010284:	4605      	mov	r5, r0
 8010286:	e7f0      	b.n	801026a <_dtoa_r+0xaba>
 8010288:	9b00      	ldr	r3, [sp, #0]
 801028a:	2b00      	cmp	r3, #0
 801028c:	bfcc      	ite	gt
 801028e:	461e      	movgt	r6, r3
 8010290:	2601      	movle	r6, #1
 8010292:	4456      	add	r6, sl
 8010294:	2700      	movs	r7, #0
 8010296:	4649      	mov	r1, r9
 8010298:	2201      	movs	r2, #1
 801029a:	4658      	mov	r0, fp
 801029c:	f000 fba4 	bl	80109e8 <__lshift>
 80102a0:	4621      	mov	r1, r4
 80102a2:	4681      	mov	r9, r0
 80102a4:	f000 fc0c 	bl	8010ac0 <__mcmp>
 80102a8:	2800      	cmp	r0, #0
 80102aa:	dcb0      	bgt.n	801020e <_dtoa_r+0xa5e>
 80102ac:	d102      	bne.n	80102b4 <_dtoa_r+0xb04>
 80102ae:	f018 0f01 	tst.w	r8, #1
 80102b2:	d1ac      	bne.n	801020e <_dtoa_r+0xa5e>
 80102b4:	4633      	mov	r3, r6
 80102b6:	461e      	mov	r6, r3
 80102b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80102bc:	2a30      	cmp	r2, #48	@ 0x30
 80102be:	d0fa      	beq.n	80102b6 <_dtoa_r+0xb06>
 80102c0:	e5c2      	b.n	800fe48 <_dtoa_r+0x698>
 80102c2:	459a      	cmp	sl, r3
 80102c4:	d1a4      	bne.n	8010210 <_dtoa_r+0xa60>
 80102c6:	9b04      	ldr	r3, [sp, #16]
 80102c8:	3301      	adds	r3, #1
 80102ca:	9304      	str	r3, [sp, #16]
 80102cc:	2331      	movs	r3, #49	@ 0x31
 80102ce:	f88a 3000 	strb.w	r3, [sl]
 80102d2:	e5b9      	b.n	800fe48 <_dtoa_r+0x698>
 80102d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102d6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010334 <_dtoa_r+0xb84>
 80102da:	b11b      	cbz	r3, 80102e4 <_dtoa_r+0xb34>
 80102dc:	f10a 0308 	add.w	r3, sl, #8
 80102e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80102e2:	6013      	str	r3, [r2, #0]
 80102e4:	4650      	mov	r0, sl
 80102e6:	b019      	add	sp, #100	@ 0x64
 80102e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	f77f ae37 	ble.w	800ff62 <_dtoa_r+0x7b2>
 80102f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80102f8:	2001      	movs	r0, #1
 80102fa:	e655      	b.n	800ffa8 <_dtoa_r+0x7f8>
 80102fc:	9b00      	ldr	r3, [sp, #0]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f77f aed6 	ble.w	80100b0 <_dtoa_r+0x900>
 8010304:	4656      	mov	r6, sl
 8010306:	4621      	mov	r1, r4
 8010308:	4648      	mov	r0, r9
 801030a:	f7ff f9c9 	bl	800f6a0 <quorem>
 801030e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010312:	f806 8b01 	strb.w	r8, [r6], #1
 8010316:	9b00      	ldr	r3, [sp, #0]
 8010318:	eba6 020a 	sub.w	r2, r6, sl
 801031c:	4293      	cmp	r3, r2
 801031e:	ddb3      	ble.n	8010288 <_dtoa_r+0xad8>
 8010320:	4649      	mov	r1, r9
 8010322:	2300      	movs	r3, #0
 8010324:	220a      	movs	r2, #10
 8010326:	4658      	mov	r0, fp
 8010328:	f000 f968 	bl	80105fc <__multadd>
 801032c:	4681      	mov	r9, r0
 801032e:	e7ea      	b.n	8010306 <_dtoa_r+0xb56>
 8010330:	08013235 	.word	0x08013235
 8010334:	080131b9 	.word	0x080131b9

08010338 <_free_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4605      	mov	r5, r0
 801033c:	2900      	cmp	r1, #0
 801033e:	d041      	beq.n	80103c4 <_free_r+0x8c>
 8010340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010344:	1f0c      	subs	r4, r1, #4
 8010346:	2b00      	cmp	r3, #0
 8010348:	bfb8      	it	lt
 801034a:	18e4      	addlt	r4, r4, r3
 801034c:	f000 f8e8 	bl	8010520 <__malloc_lock>
 8010350:	4a1d      	ldr	r2, [pc, #116]	@ (80103c8 <_free_r+0x90>)
 8010352:	6813      	ldr	r3, [r2, #0]
 8010354:	b933      	cbnz	r3, 8010364 <_free_r+0x2c>
 8010356:	6063      	str	r3, [r4, #4]
 8010358:	6014      	str	r4, [r2, #0]
 801035a:	4628      	mov	r0, r5
 801035c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010360:	f000 b8e4 	b.w	801052c <__malloc_unlock>
 8010364:	42a3      	cmp	r3, r4
 8010366:	d908      	bls.n	801037a <_free_r+0x42>
 8010368:	6820      	ldr	r0, [r4, #0]
 801036a:	1821      	adds	r1, r4, r0
 801036c:	428b      	cmp	r3, r1
 801036e:	bf01      	itttt	eq
 8010370:	6819      	ldreq	r1, [r3, #0]
 8010372:	685b      	ldreq	r3, [r3, #4]
 8010374:	1809      	addeq	r1, r1, r0
 8010376:	6021      	streq	r1, [r4, #0]
 8010378:	e7ed      	b.n	8010356 <_free_r+0x1e>
 801037a:	461a      	mov	r2, r3
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	b10b      	cbz	r3, 8010384 <_free_r+0x4c>
 8010380:	42a3      	cmp	r3, r4
 8010382:	d9fa      	bls.n	801037a <_free_r+0x42>
 8010384:	6811      	ldr	r1, [r2, #0]
 8010386:	1850      	adds	r0, r2, r1
 8010388:	42a0      	cmp	r0, r4
 801038a:	d10b      	bne.n	80103a4 <_free_r+0x6c>
 801038c:	6820      	ldr	r0, [r4, #0]
 801038e:	4401      	add	r1, r0
 8010390:	1850      	adds	r0, r2, r1
 8010392:	4283      	cmp	r3, r0
 8010394:	6011      	str	r1, [r2, #0]
 8010396:	d1e0      	bne.n	801035a <_free_r+0x22>
 8010398:	6818      	ldr	r0, [r3, #0]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	6053      	str	r3, [r2, #4]
 801039e:	4408      	add	r0, r1
 80103a0:	6010      	str	r0, [r2, #0]
 80103a2:	e7da      	b.n	801035a <_free_r+0x22>
 80103a4:	d902      	bls.n	80103ac <_free_r+0x74>
 80103a6:	230c      	movs	r3, #12
 80103a8:	602b      	str	r3, [r5, #0]
 80103aa:	e7d6      	b.n	801035a <_free_r+0x22>
 80103ac:	6820      	ldr	r0, [r4, #0]
 80103ae:	1821      	adds	r1, r4, r0
 80103b0:	428b      	cmp	r3, r1
 80103b2:	bf04      	itt	eq
 80103b4:	6819      	ldreq	r1, [r3, #0]
 80103b6:	685b      	ldreq	r3, [r3, #4]
 80103b8:	6063      	str	r3, [r4, #4]
 80103ba:	bf04      	itt	eq
 80103bc:	1809      	addeq	r1, r1, r0
 80103be:	6021      	streq	r1, [r4, #0]
 80103c0:	6054      	str	r4, [r2, #4]
 80103c2:	e7ca      	b.n	801035a <_free_r+0x22>
 80103c4:	bd38      	pop	{r3, r4, r5, pc}
 80103c6:	bf00      	nop
 80103c8:	200013b0 	.word	0x200013b0

080103cc <malloc>:
 80103cc:	4b02      	ldr	r3, [pc, #8]	@ (80103d8 <malloc+0xc>)
 80103ce:	4601      	mov	r1, r0
 80103d0:	6818      	ldr	r0, [r3, #0]
 80103d2:	f000 b825 	b.w	8010420 <_malloc_r>
 80103d6:	bf00      	nop
 80103d8:	2000002c 	.word	0x2000002c

080103dc <sbrk_aligned>:
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	4e0f      	ldr	r6, [pc, #60]	@ (801041c <sbrk_aligned+0x40>)
 80103e0:	460c      	mov	r4, r1
 80103e2:	6831      	ldr	r1, [r6, #0]
 80103e4:	4605      	mov	r5, r0
 80103e6:	b911      	cbnz	r1, 80103ee <sbrk_aligned+0x12>
 80103e8:	f001 fe14 	bl	8012014 <_sbrk_r>
 80103ec:	6030      	str	r0, [r6, #0]
 80103ee:	4621      	mov	r1, r4
 80103f0:	4628      	mov	r0, r5
 80103f2:	f001 fe0f 	bl	8012014 <_sbrk_r>
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	d103      	bne.n	8010402 <sbrk_aligned+0x26>
 80103fa:	f04f 34ff 	mov.w	r4, #4294967295
 80103fe:	4620      	mov	r0, r4
 8010400:	bd70      	pop	{r4, r5, r6, pc}
 8010402:	1cc4      	adds	r4, r0, #3
 8010404:	f024 0403 	bic.w	r4, r4, #3
 8010408:	42a0      	cmp	r0, r4
 801040a:	d0f8      	beq.n	80103fe <sbrk_aligned+0x22>
 801040c:	1a21      	subs	r1, r4, r0
 801040e:	4628      	mov	r0, r5
 8010410:	f001 fe00 	bl	8012014 <_sbrk_r>
 8010414:	3001      	adds	r0, #1
 8010416:	d1f2      	bne.n	80103fe <sbrk_aligned+0x22>
 8010418:	e7ef      	b.n	80103fa <sbrk_aligned+0x1e>
 801041a:	bf00      	nop
 801041c:	200013ac 	.word	0x200013ac

08010420 <_malloc_r>:
 8010420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010424:	1ccd      	adds	r5, r1, #3
 8010426:	f025 0503 	bic.w	r5, r5, #3
 801042a:	3508      	adds	r5, #8
 801042c:	2d0c      	cmp	r5, #12
 801042e:	bf38      	it	cc
 8010430:	250c      	movcc	r5, #12
 8010432:	2d00      	cmp	r5, #0
 8010434:	4606      	mov	r6, r0
 8010436:	db01      	blt.n	801043c <_malloc_r+0x1c>
 8010438:	42a9      	cmp	r1, r5
 801043a:	d904      	bls.n	8010446 <_malloc_r+0x26>
 801043c:	230c      	movs	r3, #12
 801043e:	6033      	str	r3, [r6, #0]
 8010440:	2000      	movs	r0, #0
 8010442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010446:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801051c <_malloc_r+0xfc>
 801044a:	f000 f869 	bl	8010520 <__malloc_lock>
 801044e:	f8d8 3000 	ldr.w	r3, [r8]
 8010452:	461c      	mov	r4, r3
 8010454:	bb44      	cbnz	r4, 80104a8 <_malloc_r+0x88>
 8010456:	4629      	mov	r1, r5
 8010458:	4630      	mov	r0, r6
 801045a:	f7ff ffbf 	bl	80103dc <sbrk_aligned>
 801045e:	1c43      	adds	r3, r0, #1
 8010460:	4604      	mov	r4, r0
 8010462:	d158      	bne.n	8010516 <_malloc_r+0xf6>
 8010464:	f8d8 4000 	ldr.w	r4, [r8]
 8010468:	4627      	mov	r7, r4
 801046a:	2f00      	cmp	r7, #0
 801046c:	d143      	bne.n	80104f6 <_malloc_r+0xd6>
 801046e:	2c00      	cmp	r4, #0
 8010470:	d04b      	beq.n	801050a <_malloc_r+0xea>
 8010472:	6823      	ldr	r3, [r4, #0]
 8010474:	4639      	mov	r1, r7
 8010476:	4630      	mov	r0, r6
 8010478:	eb04 0903 	add.w	r9, r4, r3
 801047c:	f001 fdca 	bl	8012014 <_sbrk_r>
 8010480:	4581      	cmp	r9, r0
 8010482:	d142      	bne.n	801050a <_malloc_r+0xea>
 8010484:	6821      	ldr	r1, [r4, #0]
 8010486:	1a6d      	subs	r5, r5, r1
 8010488:	4629      	mov	r1, r5
 801048a:	4630      	mov	r0, r6
 801048c:	f7ff ffa6 	bl	80103dc <sbrk_aligned>
 8010490:	3001      	adds	r0, #1
 8010492:	d03a      	beq.n	801050a <_malloc_r+0xea>
 8010494:	6823      	ldr	r3, [r4, #0]
 8010496:	442b      	add	r3, r5
 8010498:	6023      	str	r3, [r4, #0]
 801049a:	f8d8 3000 	ldr.w	r3, [r8]
 801049e:	685a      	ldr	r2, [r3, #4]
 80104a0:	bb62      	cbnz	r2, 80104fc <_malloc_r+0xdc>
 80104a2:	f8c8 7000 	str.w	r7, [r8]
 80104a6:	e00f      	b.n	80104c8 <_malloc_r+0xa8>
 80104a8:	6822      	ldr	r2, [r4, #0]
 80104aa:	1b52      	subs	r2, r2, r5
 80104ac:	d420      	bmi.n	80104f0 <_malloc_r+0xd0>
 80104ae:	2a0b      	cmp	r2, #11
 80104b0:	d917      	bls.n	80104e2 <_malloc_r+0xc2>
 80104b2:	1961      	adds	r1, r4, r5
 80104b4:	42a3      	cmp	r3, r4
 80104b6:	6025      	str	r5, [r4, #0]
 80104b8:	bf18      	it	ne
 80104ba:	6059      	strne	r1, [r3, #4]
 80104bc:	6863      	ldr	r3, [r4, #4]
 80104be:	bf08      	it	eq
 80104c0:	f8c8 1000 	streq.w	r1, [r8]
 80104c4:	5162      	str	r2, [r4, r5]
 80104c6:	604b      	str	r3, [r1, #4]
 80104c8:	4630      	mov	r0, r6
 80104ca:	f000 f82f 	bl	801052c <__malloc_unlock>
 80104ce:	f104 000b 	add.w	r0, r4, #11
 80104d2:	1d23      	adds	r3, r4, #4
 80104d4:	f020 0007 	bic.w	r0, r0, #7
 80104d8:	1ac2      	subs	r2, r0, r3
 80104da:	bf1c      	itt	ne
 80104dc:	1a1b      	subne	r3, r3, r0
 80104de:	50a3      	strne	r3, [r4, r2]
 80104e0:	e7af      	b.n	8010442 <_malloc_r+0x22>
 80104e2:	6862      	ldr	r2, [r4, #4]
 80104e4:	42a3      	cmp	r3, r4
 80104e6:	bf0c      	ite	eq
 80104e8:	f8c8 2000 	streq.w	r2, [r8]
 80104ec:	605a      	strne	r2, [r3, #4]
 80104ee:	e7eb      	b.n	80104c8 <_malloc_r+0xa8>
 80104f0:	4623      	mov	r3, r4
 80104f2:	6864      	ldr	r4, [r4, #4]
 80104f4:	e7ae      	b.n	8010454 <_malloc_r+0x34>
 80104f6:	463c      	mov	r4, r7
 80104f8:	687f      	ldr	r7, [r7, #4]
 80104fa:	e7b6      	b.n	801046a <_malloc_r+0x4a>
 80104fc:	461a      	mov	r2, r3
 80104fe:	685b      	ldr	r3, [r3, #4]
 8010500:	42a3      	cmp	r3, r4
 8010502:	d1fb      	bne.n	80104fc <_malloc_r+0xdc>
 8010504:	2300      	movs	r3, #0
 8010506:	6053      	str	r3, [r2, #4]
 8010508:	e7de      	b.n	80104c8 <_malloc_r+0xa8>
 801050a:	230c      	movs	r3, #12
 801050c:	6033      	str	r3, [r6, #0]
 801050e:	4630      	mov	r0, r6
 8010510:	f000 f80c 	bl	801052c <__malloc_unlock>
 8010514:	e794      	b.n	8010440 <_malloc_r+0x20>
 8010516:	6005      	str	r5, [r0, #0]
 8010518:	e7d6      	b.n	80104c8 <_malloc_r+0xa8>
 801051a:	bf00      	nop
 801051c:	200013b0 	.word	0x200013b0

08010520 <__malloc_lock>:
 8010520:	4801      	ldr	r0, [pc, #4]	@ (8010528 <__malloc_lock+0x8>)
 8010522:	f7ff b8a6 	b.w	800f672 <__retarget_lock_acquire_recursive>
 8010526:	bf00      	nop
 8010528:	200013a8 	.word	0x200013a8

0801052c <__malloc_unlock>:
 801052c:	4801      	ldr	r0, [pc, #4]	@ (8010534 <__malloc_unlock+0x8>)
 801052e:	f7ff b8a1 	b.w	800f674 <__retarget_lock_release_recursive>
 8010532:	bf00      	nop
 8010534:	200013a8 	.word	0x200013a8

08010538 <_Balloc>:
 8010538:	b570      	push	{r4, r5, r6, lr}
 801053a:	69c6      	ldr	r6, [r0, #28]
 801053c:	4604      	mov	r4, r0
 801053e:	460d      	mov	r5, r1
 8010540:	b976      	cbnz	r6, 8010560 <_Balloc+0x28>
 8010542:	2010      	movs	r0, #16
 8010544:	f7ff ff42 	bl	80103cc <malloc>
 8010548:	4602      	mov	r2, r0
 801054a:	61e0      	str	r0, [r4, #28]
 801054c:	b920      	cbnz	r0, 8010558 <_Balloc+0x20>
 801054e:	4b18      	ldr	r3, [pc, #96]	@ (80105b0 <_Balloc+0x78>)
 8010550:	4818      	ldr	r0, [pc, #96]	@ (80105b4 <_Balloc+0x7c>)
 8010552:	216b      	movs	r1, #107	@ 0x6b
 8010554:	f001 fd78 	bl	8012048 <__assert_func>
 8010558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801055c:	6006      	str	r6, [r0, #0]
 801055e:	60c6      	str	r6, [r0, #12]
 8010560:	69e6      	ldr	r6, [r4, #28]
 8010562:	68f3      	ldr	r3, [r6, #12]
 8010564:	b183      	cbz	r3, 8010588 <_Balloc+0x50>
 8010566:	69e3      	ldr	r3, [r4, #28]
 8010568:	68db      	ldr	r3, [r3, #12]
 801056a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801056e:	b9b8      	cbnz	r0, 80105a0 <_Balloc+0x68>
 8010570:	2101      	movs	r1, #1
 8010572:	fa01 f605 	lsl.w	r6, r1, r5
 8010576:	1d72      	adds	r2, r6, #5
 8010578:	0092      	lsls	r2, r2, #2
 801057a:	4620      	mov	r0, r4
 801057c:	f001 fd82 	bl	8012084 <_calloc_r>
 8010580:	b160      	cbz	r0, 801059c <_Balloc+0x64>
 8010582:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010586:	e00e      	b.n	80105a6 <_Balloc+0x6e>
 8010588:	2221      	movs	r2, #33	@ 0x21
 801058a:	2104      	movs	r1, #4
 801058c:	4620      	mov	r0, r4
 801058e:	f001 fd79 	bl	8012084 <_calloc_r>
 8010592:	69e3      	ldr	r3, [r4, #28]
 8010594:	60f0      	str	r0, [r6, #12]
 8010596:	68db      	ldr	r3, [r3, #12]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1e4      	bne.n	8010566 <_Balloc+0x2e>
 801059c:	2000      	movs	r0, #0
 801059e:	bd70      	pop	{r4, r5, r6, pc}
 80105a0:	6802      	ldr	r2, [r0, #0]
 80105a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80105a6:	2300      	movs	r3, #0
 80105a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80105ac:	e7f7      	b.n	801059e <_Balloc+0x66>
 80105ae:	bf00      	nop
 80105b0:	080131c6 	.word	0x080131c6
 80105b4:	08013246 	.word	0x08013246

080105b8 <_Bfree>:
 80105b8:	b570      	push	{r4, r5, r6, lr}
 80105ba:	69c6      	ldr	r6, [r0, #28]
 80105bc:	4605      	mov	r5, r0
 80105be:	460c      	mov	r4, r1
 80105c0:	b976      	cbnz	r6, 80105e0 <_Bfree+0x28>
 80105c2:	2010      	movs	r0, #16
 80105c4:	f7ff ff02 	bl	80103cc <malloc>
 80105c8:	4602      	mov	r2, r0
 80105ca:	61e8      	str	r0, [r5, #28]
 80105cc:	b920      	cbnz	r0, 80105d8 <_Bfree+0x20>
 80105ce:	4b09      	ldr	r3, [pc, #36]	@ (80105f4 <_Bfree+0x3c>)
 80105d0:	4809      	ldr	r0, [pc, #36]	@ (80105f8 <_Bfree+0x40>)
 80105d2:	218f      	movs	r1, #143	@ 0x8f
 80105d4:	f001 fd38 	bl	8012048 <__assert_func>
 80105d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80105dc:	6006      	str	r6, [r0, #0]
 80105de:	60c6      	str	r6, [r0, #12]
 80105e0:	b13c      	cbz	r4, 80105f2 <_Bfree+0x3a>
 80105e2:	69eb      	ldr	r3, [r5, #28]
 80105e4:	6862      	ldr	r2, [r4, #4]
 80105e6:	68db      	ldr	r3, [r3, #12]
 80105e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80105ec:	6021      	str	r1, [r4, #0]
 80105ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80105f2:	bd70      	pop	{r4, r5, r6, pc}
 80105f4:	080131c6 	.word	0x080131c6
 80105f8:	08013246 	.word	0x08013246

080105fc <__multadd>:
 80105fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010600:	690d      	ldr	r5, [r1, #16]
 8010602:	4607      	mov	r7, r0
 8010604:	460c      	mov	r4, r1
 8010606:	461e      	mov	r6, r3
 8010608:	f101 0c14 	add.w	ip, r1, #20
 801060c:	2000      	movs	r0, #0
 801060e:	f8dc 3000 	ldr.w	r3, [ip]
 8010612:	b299      	uxth	r1, r3
 8010614:	fb02 6101 	mla	r1, r2, r1, r6
 8010618:	0c1e      	lsrs	r6, r3, #16
 801061a:	0c0b      	lsrs	r3, r1, #16
 801061c:	fb02 3306 	mla	r3, r2, r6, r3
 8010620:	b289      	uxth	r1, r1
 8010622:	3001      	adds	r0, #1
 8010624:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010628:	4285      	cmp	r5, r0
 801062a:	f84c 1b04 	str.w	r1, [ip], #4
 801062e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010632:	dcec      	bgt.n	801060e <__multadd+0x12>
 8010634:	b30e      	cbz	r6, 801067a <__multadd+0x7e>
 8010636:	68a3      	ldr	r3, [r4, #8]
 8010638:	42ab      	cmp	r3, r5
 801063a:	dc19      	bgt.n	8010670 <__multadd+0x74>
 801063c:	6861      	ldr	r1, [r4, #4]
 801063e:	4638      	mov	r0, r7
 8010640:	3101      	adds	r1, #1
 8010642:	f7ff ff79 	bl	8010538 <_Balloc>
 8010646:	4680      	mov	r8, r0
 8010648:	b928      	cbnz	r0, 8010656 <__multadd+0x5a>
 801064a:	4602      	mov	r2, r0
 801064c:	4b0c      	ldr	r3, [pc, #48]	@ (8010680 <__multadd+0x84>)
 801064e:	480d      	ldr	r0, [pc, #52]	@ (8010684 <__multadd+0x88>)
 8010650:	21ba      	movs	r1, #186	@ 0xba
 8010652:	f001 fcf9 	bl	8012048 <__assert_func>
 8010656:	6922      	ldr	r2, [r4, #16]
 8010658:	3202      	adds	r2, #2
 801065a:	f104 010c 	add.w	r1, r4, #12
 801065e:	0092      	lsls	r2, r2, #2
 8010660:	300c      	adds	r0, #12
 8010662:	f7ff f808 	bl	800f676 <memcpy>
 8010666:	4621      	mov	r1, r4
 8010668:	4638      	mov	r0, r7
 801066a:	f7ff ffa5 	bl	80105b8 <_Bfree>
 801066e:	4644      	mov	r4, r8
 8010670:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010674:	3501      	adds	r5, #1
 8010676:	615e      	str	r6, [r3, #20]
 8010678:	6125      	str	r5, [r4, #16]
 801067a:	4620      	mov	r0, r4
 801067c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010680:	08013235 	.word	0x08013235
 8010684:	08013246 	.word	0x08013246

08010688 <__s2b>:
 8010688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801068c:	460c      	mov	r4, r1
 801068e:	4615      	mov	r5, r2
 8010690:	461f      	mov	r7, r3
 8010692:	2209      	movs	r2, #9
 8010694:	3308      	adds	r3, #8
 8010696:	4606      	mov	r6, r0
 8010698:	fb93 f3f2 	sdiv	r3, r3, r2
 801069c:	2100      	movs	r1, #0
 801069e:	2201      	movs	r2, #1
 80106a0:	429a      	cmp	r2, r3
 80106a2:	db09      	blt.n	80106b8 <__s2b+0x30>
 80106a4:	4630      	mov	r0, r6
 80106a6:	f7ff ff47 	bl	8010538 <_Balloc>
 80106aa:	b940      	cbnz	r0, 80106be <__s2b+0x36>
 80106ac:	4602      	mov	r2, r0
 80106ae:	4b19      	ldr	r3, [pc, #100]	@ (8010714 <__s2b+0x8c>)
 80106b0:	4819      	ldr	r0, [pc, #100]	@ (8010718 <__s2b+0x90>)
 80106b2:	21d3      	movs	r1, #211	@ 0xd3
 80106b4:	f001 fcc8 	bl	8012048 <__assert_func>
 80106b8:	0052      	lsls	r2, r2, #1
 80106ba:	3101      	adds	r1, #1
 80106bc:	e7f0      	b.n	80106a0 <__s2b+0x18>
 80106be:	9b08      	ldr	r3, [sp, #32]
 80106c0:	6143      	str	r3, [r0, #20]
 80106c2:	2d09      	cmp	r5, #9
 80106c4:	f04f 0301 	mov.w	r3, #1
 80106c8:	6103      	str	r3, [r0, #16]
 80106ca:	dd16      	ble.n	80106fa <__s2b+0x72>
 80106cc:	f104 0909 	add.w	r9, r4, #9
 80106d0:	46c8      	mov	r8, r9
 80106d2:	442c      	add	r4, r5
 80106d4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80106d8:	4601      	mov	r1, r0
 80106da:	3b30      	subs	r3, #48	@ 0x30
 80106dc:	220a      	movs	r2, #10
 80106de:	4630      	mov	r0, r6
 80106e0:	f7ff ff8c 	bl	80105fc <__multadd>
 80106e4:	45a0      	cmp	r8, r4
 80106e6:	d1f5      	bne.n	80106d4 <__s2b+0x4c>
 80106e8:	f1a5 0408 	sub.w	r4, r5, #8
 80106ec:	444c      	add	r4, r9
 80106ee:	1b2d      	subs	r5, r5, r4
 80106f0:	1963      	adds	r3, r4, r5
 80106f2:	42bb      	cmp	r3, r7
 80106f4:	db04      	blt.n	8010700 <__s2b+0x78>
 80106f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106fa:	340a      	adds	r4, #10
 80106fc:	2509      	movs	r5, #9
 80106fe:	e7f6      	b.n	80106ee <__s2b+0x66>
 8010700:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010704:	4601      	mov	r1, r0
 8010706:	3b30      	subs	r3, #48	@ 0x30
 8010708:	220a      	movs	r2, #10
 801070a:	4630      	mov	r0, r6
 801070c:	f7ff ff76 	bl	80105fc <__multadd>
 8010710:	e7ee      	b.n	80106f0 <__s2b+0x68>
 8010712:	bf00      	nop
 8010714:	08013235 	.word	0x08013235
 8010718:	08013246 	.word	0x08013246

0801071c <__hi0bits>:
 801071c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010720:	4603      	mov	r3, r0
 8010722:	bf36      	itet	cc
 8010724:	0403      	lslcc	r3, r0, #16
 8010726:	2000      	movcs	r0, #0
 8010728:	2010      	movcc	r0, #16
 801072a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801072e:	bf3c      	itt	cc
 8010730:	021b      	lslcc	r3, r3, #8
 8010732:	3008      	addcc	r0, #8
 8010734:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010738:	bf3c      	itt	cc
 801073a:	011b      	lslcc	r3, r3, #4
 801073c:	3004      	addcc	r0, #4
 801073e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010742:	bf3c      	itt	cc
 8010744:	009b      	lslcc	r3, r3, #2
 8010746:	3002      	addcc	r0, #2
 8010748:	2b00      	cmp	r3, #0
 801074a:	db05      	blt.n	8010758 <__hi0bits+0x3c>
 801074c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010750:	f100 0001 	add.w	r0, r0, #1
 8010754:	bf08      	it	eq
 8010756:	2020      	moveq	r0, #32
 8010758:	4770      	bx	lr

0801075a <__lo0bits>:
 801075a:	6803      	ldr	r3, [r0, #0]
 801075c:	4602      	mov	r2, r0
 801075e:	f013 0007 	ands.w	r0, r3, #7
 8010762:	d00b      	beq.n	801077c <__lo0bits+0x22>
 8010764:	07d9      	lsls	r1, r3, #31
 8010766:	d421      	bmi.n	80107ac <__lo0bits+0x52>
 8010768:	0798      	lsls	r0, r3, #30
 801076a:	bf49      	itett	mi
 801076c:	085b      	lsrmi	r3, r3, #1
 801076e:	089b      	lsrpl	r3, r3, #2
 8010770:	2001      	movmi	r0, #1
 8010772:	6013      	strmi	r3, [r2, #0]
 8010774:	bf5c      	itt	pl
 8010776:	6013      	strpl	r3, [r2, #0]
 8010778:	2002      	movpl	r0, #2
 801077a:	4770      	bx	lr
 801077c:	b299      	uxth	r1, r3
 801077e:	b909      	cbnz	r1, 8010784 <__lo0bits+0x2a>
 8010780:	0c1b      	lsrs	r3, r3, #16
 8010782:	2010      	movs	r0, #16
 8010784:	b2d9      	uxtb	r1, r3
 8010786:	b909      	cbnz	r1, 801078c <__lo0bits+0x32>
 8010788:	3008      	adds	r0, #8
 801078a:	0a1b      	lsrs	r3, r3, #8
 801078c:	0719      	lsls	r1, r3, #28
 801078e:	bf04      	itt	eq
 8010790:	091b      	lsreq	r3, r3, #4
 8010792:	3004      	addeq	r0, #4
 8010794:	0799      	lsls	r1, r3, #30
 8010796:	bf04      	itt	eq
 8010798:	089b      	lsreq	r3, r3, #2
 801079a:	3002      	addeq	r0, #2
 801079c:	07d9      	lsls	r1, r3, #31
 801079e:	d403      	bmi.n	80107a8 <__lo0bits+0x4e>
 80107a0:	085b      	lsrs	r3, r3, #1
 80107a2:	f100 0001 	add.w	r0, r0, #1
 80107a6:	d003      	beq.n	80107b0 <__lo0bits+0x56>
 80107a8:	6013      	str	r3, [r2, #0]
 80107aa:	4770      	bx	lr
 80107ac:	2000      	movs	r0, #0
 80107ae:	4770      	bx	lr
 80107b0:	2020      	movs	r0, #32
 80107b2:	4770      	bx	lr

080107b4 <__i2b>:
 80107b4:	b510      	push	{r4, lr}
 80107b6:	460c      	mov	r4, r1
 80107b8:	2101      	movs	r1, #1
 80107ba:	f7ff febd 	bl	8010538 <_Balloc>
 80107be:	4602      	mov	r2, r0
 80107c0:	b928      	cbnz	r0, 80107ce <__i2b+0x1a>
 80107c2:	4b05      	ldr	r3, [pc, #20]	@ (80107d8 <__i2b+0x24>)
 80107c4:	4805      	ldr	r0, [pc, #20]	@ (80107dc <__i2b+0x28>)
 80107c6:	f240 1145 	movw	r1, #325	@ 0x145
 80107ca:	f001 fc3d 	bl	8012048 <__assert_func>
 80107ce:	2301      	movs	r3, #1
 80107d0:	6144      	str	r4, [r0, #20]
 80107d2:	6103      	str	r3, [r0, #16]
 80107d4:	bd10      	pop	{r4, pc}
 80107d6:	bf00      	nop
 80107d8:	08013235 	.word	0x08013235
 80107dc:	08013246 	.word	0x08013246

080107e0 <__multiply>:
 80107e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107e4:	4614      	mov	r4, r2
 80107e6:	690a      	ldr	r2, [r1, #16]
 80107e8:	6923      	ldr	r3, [r4, #16]
 80107ea:	429a      	cmp	r2, r3
 80107ec:	bfa8      	it	ge
 80107ee:	4623      	movge	r3, r4
 80107f0:	460f      	mov	r7, r1
 80107f2:	bfa4      	itt	ge
 80107f4:	460c      	movge	r4, r1
 80107f6:	461f      	movge	r7, r3
 80107f8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80107fc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010800:	68a3      	ldr	r3, [r4, #8]
 8010802:	6861      	ldr	r1, [r4, #4]
 8010804:	eb0a 0609 	add.w	r6, sl, r9
 8010808:	42b3      	cmp	r3, r6
 801080a:	b085      	sub	sp, #20
 801080c:	bfb8      	it	lt
 801080e:	3101      	addlt	r1, #1
 8010810:	f7ff fe92 	bl	8010538 <_Balloc>
 8010814:	b930      	cbnz	r0, 8010824 <__multiply+0x44>
 8010816:	4602      	mov	r2, r0
 8010818:	4b44      	ldr	r3, [pc, #272]	@ (801092c <__multiply+0x14c>)
 801081a:	4845      	ldr	r0, [pc, #276]	@ (8010930 <__multiply+0x150>)
 801081c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010820:	f001 fc12 	bl	8012048 <__assert_func>
 8010824:	f100 0514 	add.w	r5, r0, #20
 8010828:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801082c:	462b      	mov	r3, r5
 801082e:	2200      	movs	r2, #0
 8010830:	4543      	cmp	r3, r8
 8010832:	d321      	bcc.n	8010878 <__multiply+0x98>
 8010834:	f107 0114 	add.w	r1, r7, #20
 8010838:	f104 0214 	add.w	r2, r4, #20
 801083c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010840:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010844:	9302      	str	r3, [sp, #8]
 8010846:	1b13      	subs	r3, r2, r4
 8010848:	3b15      	subs	r3, #21
 801084a:	f023 0303 	bic.w	r3, r3, #3
 801084e:	3304      	adds	r3, #4
 8010850:	f104 0715 	add.w	r7, r4, #21
 8010854:	42ba      	cmp	r2, r7
 8010856:	bf38      	it	cc
 8010858:	2304      	movcc	r3, #4
 801085a:	9301      	str	r3, [sp, #4]
 801085c:	9b02      	ldr	r3, [sp, #8]
 801085e:	9103      	str	r1, [sp, #12]
 8010860:	428b      	cmp	r3, r1
 8010862:	d80c      	bhi.n	801087e <__multiply+0x9e>
 8010864:	2e00      	cmp	r6, #0
 8010866:	dd03      	ble.n	8010870 <__multiply+0x90>
 8010868:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801086c:	2b00      	cmp	r3, #0
 801086e:	d05b      	beq.n	8010928 <__multiply+0x148>
 8010870:	6106      	str	r6, [r0, #16]
 8010872:	b005      	add	sp, #20
 8010874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010878:	f843 2b04 	str.w	r2, [r3], #4
 801087c:	e7d8      	b.n	8010830 <__multiply+0x50>
 801087e:	f8b1 a000 	ldrh.w	sl, [r1]
 8010882:	f1ba 0f00 	cmp.w	sl, #0
 8010886:	d024      	beq.n	80108d2 <__multiply+0xf2>
 8010888:	f104 0e14 	add.w	lr, r4, #20
 801088c:	46a9      	mov	r9, r5
 801088e:	f04f 0c00 	mov.w	ip, #0
 8010892:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010896:	f8d9 3000 	ldr.w	r3, [r9]
 801089a:	fa1f fb87 	uxth.w	fp, r7
 801089e:	b29b      	uxth	r3, r3
 80108a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80108a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80108a8:	f8d9 7000 	ldr.w	r7, [r9]
 80108ac:	4463      	add	r3, ip
 80108ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80108b2:	fb0a c70b 	mla	r7, sl, fp, ip
 80108b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80108ba:	b29b      	uxth	r3, r3
 80108bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80108c0:	4572      	cmp	r2, lr
 80108c2:	f849 3b04 	str.w	r3, [r9], #4
 80108c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80108ca:	d8e2      	bhi.n	8010892 <__multiply+0xb2>
 80108cc:	9b01      	ldr	r3, [sp, #4]
 80108ce:	f845 c003 	str.w	ip, [r5, r3]
 80108d2:	9b03      	ldr	r3, [sp, #12]
 80108d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80108d8:	3104      	adds	r1, #4
 80108da:	f1b9 0f00 	cmp.w	r9, #0
 80108de:	d021      	beq.n	8010924 <__multiply+0x144>
 80108e0:	682b      	ldr	r3, [r5, #0]
 80108e2:	f104 0c14 	add.w	ip, r4, #20
 80108e6:	46ae      	mov	lr, r5
 80108e8:	f04f 0a00 	mov.w	sl, #0
 80108ec:	f8bc b000 	ldrh.w	fp, [ip]
 80108f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80108f4:	fb09 770b 	mla	r7, r9, fp, r7
 80108f8:	4457      	add	r7, sl
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8010900:	f84e 3b04 	str.w	r3, [lr], #4
 8010904:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010908:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801090c:	f8be 3000 	ldrh.w	r3, [lr]
 8010910:	fb09 330a 	mla	r3, r9, sl, r3
 8010914:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010918:	4562      	cmp	r2, ip
 801091a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801091e:	d8e5      	bhi.n	80108ec <__multiply+0x10c>
 8010920:	9f01      	ldr	r7, [sp, #4]
 8010922:	51eb      	str	r3, [r5, r7]
 8010924:	3504      	adds	r5, #4
 8010926:	e799      	b.n	801085c <__multiply+0x7c>
 8010928:	3e01      	subs	r6, #1
 801092a:	e79b      	b.n	8010864 <__multiply+0x84>
 801092c:	08013235 	.word	0x08013235
 8010930:	08013246 	.word	0x08013246

08010934 <__pow5mult>:
 8010934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010938:	4615      	mov	r5, r2
 801093a:	f012 0203 	ands.w	r2, r2, #3
 801093e:	4607      	mov	r7, r0
 8010940:	460e      	mov	r6, r1
 8010942:	d007      	beq.n	8010954 <__pow5mult+0x20>
 8010944:	4c25      	ldr	r4, [pc, #148]	@ (80109dc <__pow5mult+0xa8>)
 8010946:	3a01      	subs	r2, #1
 8010948:	2300      	movs	r3, #0
 801094a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801094e:	f7ff fe55 	bl	80105fc <__multadd>
 8010952:	4606      	mov	r6, r0
 8010954:	10ad      	asrs	r5, r5, #2
 8010956:	d03d      	beq.n	80109d4 <__pow5mult+0xa0>
 8010958:	69fc      	ldr	r4, [r7, #28]
 801095a:	b97c      	cbnz	r4, 801097c <__pow5mult+0x48>
 801095c:	2010      	movs	r0, #16
 801095e:	f7ff fd35 	bl	80103cc <malloc>
 8010962:	4602      	mov	r2, r0
 8010964:	61f8      	str	r0, [r7, #28]
 8010966:	b928      	cbnz	r0, 8010974 <__pow5mult+0x40>
 8010968:	4b1d      	ldr	r3, [pc, #116]	@ (80109e0 <__pow5mult+0xac>)
 801096a:	481e      	ldr	r0, [pc, #120]	@ (80109e4 <__pow5mult+0xb0>)
 801096c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010970:	f001 fb6a 	bl	8012048 <__assert_func>
 8010974:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010978:	6004      	str	r4, [r0, #0]
 801097a:	60c4      	str	r4, [r0, #12]
 801097c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010980:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010984:	b94c      	cbnz	r4, 801099a <__pow5mult+0x66>
 8010986:	f240 2171 	movw	r1, #625	@ 0x271
 801098a:	4638      	mov	r0, r7
 801098c:	f7ff ff12 	bl	80107b4 <__i2b>
 8010990:	2300      	movs	r3, #0
 8010992:	f8c8 0008 	str.w	r0, [r8, #8]
 8010996:	4604      	mov	r4, r0
 8010998:	6003      	str	r3, [r0, #0]
 801099a:	f04f 0900 	mov.w	r9, #0
 801099e:	07eb      	lsls	r3, r5, #31
 80109a0:	d50a      	bpl.n	80109b8 <__pow5mult+0x84>
 80109a2:	4631      	mov	r1, r6
 80109a4:	4622      	mov	r2, r4
 80109a6:	4638      	mov	r0, r7
 80109a8:	f7ff ff1a 	bl	80107e0 <__multiply>
 80109ac:	4631      	mov	r1, r6
 80109ae:	4680      	mov	r8, r0
 80109b0:	4638      	mov	r0, r7
 80109b2:	f7ff fe01 	bl	80105b8 <_Bfree>
 80109b6:	4646      	mov	r6, r8
 80109b8:	106d      	asrs	r5, r5, #1
 80109ba:	d00b      	beq.n	80109d4 <__pow5mult+0xa0>
 80109bc:	6820      	ldr	r0, [r4, #0]
 80109be:	b938      	cbnz	r0, 80109d0 <__pow5mult+0x9c>
 80109c0:	4622      	mov	r2, r4
 80109c2:	4621      	mov	r1, r4
 80109c4:	4638      	mov	r0, r7
 80109c6:	f7ff ff0b 	bl	80107e0 <__multiply>
 80109ca:	6020      	str	r0, [r4, #0]
 80109cc:	f8c0 9000 	str.w	r9, [r0]
 80109d0:	4604      	mov	r4, r0
 80109d2:	e7e4      	b.n	801099e <__pow5mult+0x6a>
 80109d4:	4630      	mov	r0, r6
 80109d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109da:	bf00      	nop
 80109dc:	080132a0 	.word	0x080132a0
 80109e0:	080131c6 	.word	0x080131c6
 80109e4:	08013246 	.word	0x08013246

080109e8 <__lshift>:
 80109e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109ec:	460c      	mov	r4, r1
 80109ee:	6849      	ldr	r1, [r1, #4]
 80109f0:	6923      	ldr	r3, [r4, #16]
 80109f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80109f6:	68a3      	ldr	r3, [r4, #8]
 80109f8:	4607      	mov	r7, r0
 80109fa:	4691      	mov	r9, r2
 80109fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a00:	f108 0601 	add.w	r6, r8, #1
 8010a04:	42b3      	cmp	r3, r6
 8010a06:	db0b      	blt.n	8010a20 <__lshift+0x38>
 8010a08:	4638      	mov	r0, r7
 8010a0a:	f7ff fd95 	bl	8010538 <_Balloc>
 8010a0e:	4605      	mov	r5, r0
 8010a10:	b948      	cbnz	r0, 8010a26 <__lshift+0x3e>
 8010a12:	4602      	mov	r2, r0
 8010a14:	4b28      	ldr	r3, [pc, #160]	@ (8010ab8 <__lshift+0xd0>)
 8010a16:	4829      	ldr	r0, [pc, #164]	@ (8010abc <__lshift+0xd4>)
 8010a18:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010a1c:	f001 fb14 	bl	8012048 <__assert_func>
 8010a20:	3101      	adds	r1, #1
 8010a22:	005b      	lsls	r3, r3, #1
 8010a24:	e7ee      	b.n	8010a04 <__lshift+0x1c>
 8010a26:	2300      	movs	r3, #0
 8010a28:	f100 0114 	add.w	r1, r0, #20
 8010a2c:	f100 0210 	add.w	r2, r0, #16
 8010a30:	4618      	mov	r0, r3
 8010a32:	4553      	cmp	r3, sl
 8010a34:	db33      	blt.n	8010a9e <__lshift+0xb6>
 8010a36:	6920      	ldr	r0, [r4, #16]
 8010a38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a3c:	f104 0314 	add.w	r3, r4, #20
 8010a40:	f019 091f 	ands.w	r9, r9, #31
 8010a44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a4c:	d02b      	beq.n	8010aa6 <__lshift+0xbe>
 8010a4e:	f1c9 0e20 	rsb	lr, r9, #32
 8010a52:	468a      	mov	sl, r1
 8010a54:	2200      	movs	r2, #0
 8010a56:	6818      	ldr	r0, [r3, #0]
 8010a58:	fa00 f009 	lsl.w	r0, r0, r9
 8010a5c:	4310      	orrs	r0, r2
 8010a5e:	f84a 0b04 	str.w	r0, [sl], #4
 8010a62:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a66:	459c      	cmp	ip, r3
 8010a68:	fa22 f20e 	lsr.w	r2, r2, lr
 8010a6c:	d8f3      	bhi.n	8010a56 <__lshift+0x6e>
 8010a6e:	ebac 0304 	sub.w	r3, ip, r4
 8010a72:	3b15      	subs	r3, #21
 8010a74:	f023 0303 	bic.w	r3, r3, #3
 8010a78:	3304      	adds	r3, #4
 8010a7a:	f104 0015 	add.w	r0, r4, #21
 8010a7e:	4584      	cmp	ip, r0
 8010a80:	bf38      	it	cc
 8010a82:	2304      	movcc	r3, #4
 8010a84:	50ca      	str	r2, [r1, r3]
 8010a86:	b10a      	cbz	r2, 8010a8c <__lshift+0xa4>
 8010a88:	f108 0602 	add.w	r6, r8, #2
 8010a8c:	3e01      	subs	r6, #1
 8010a8e:	4638      	mov	r0, r7
 8010a90:	612e      	str	r6, [r5, #16]
 8010a92:	4621      	mov	r1, r4
 8010a94:	f7ff fd90 	bl	80105b8 <_Bfree>
 8010a98:	4628      	mov	r0, r5
 8010a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	e7c5      	b.n	8010a32 <__lshift+0x4a>
 8010aa6:	3904      	subs	r1, #4
 8010aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aac:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ab0:	459c      	cmp	ip, r3
 8010ab2:	d8f9      	bhi.n	8010aa8 <__lshift+0xc0>
 8010ab4:	e7ea      	b.n	8010a8c <__lshift+0xa4>
 8010ab6:	bf00      	nop
 8010ab8:	08013235 	.word	0x08013235
 8010abc:	08013246 	.word	0x08013246

08010ac0 <__mcmp>:
 8010ac0:	690a      	ldr	r2, [r1, #16]
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	6900      	ldr	r0, [r0, #16]
 8010ac6:	1a80      	subs	r0, r0, r2
 8010ac8:	b530      	push	{r4, r5, lr}
 8010aca:	d10e      	bne.n	8010aea <__mcmp+0x2a>
 8010acc:	3314      	adds	r3, #20
 8010ace:	3114      	adds	r1, #20
 8010ad0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010ad4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010ad8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010adc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010ae0:	4295      	cmp	r5, r2
 8010ae2:	d003      	beq.n	8010aec <__mcmp+0x2c>
 8010ae4:	d205      	bcs.n	8010af2 <__mcmp+0x32>
 8010ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aea:	bd30      	pop	{r4, r5, pc}
 8010aec:	42a3      	cmp	r3, r4
 8010aee:	d3f3      	bcc.n	8010ad8 <__mcmp+0x18>
 8010af0:	e7fb      	b.n	8010aea <__mcmp+0x2a>
 8010af2:	2001      	movs	r0, #1
 8010af4:	e7f9      	b.n	8010aea <__mcmp+0x2a>
	...

08010af8 <__mdiff>:
 8010af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010afc:	4689      	mov	r9, r1
 8010afe:	4606      	mov	r6, r0
 8010b00:	4611      	mov	r1, r2
 8010b02:	4648      	mov	r0, r9
 8010b04:	4614      	mov	r4, r2
 8010b06:	f7ff ffdb 	bl	8010ac0 <__mcmp>
 8010b0a:	1e05      	subs	r5, r0, #0
 8010b0c:	d112      	bne.n	8010b34 <__mdiff+0x3c>
 8010b0e:	4629      	mov	r1, r5
 8010b10:	4630      	mov	r0, r6
 8010b12:	f7ff fd11 	bl	8010538 <_Balloc>
 8010b16:	4602      	mov	r2, r0
 8010b18:	b928      	cbnz	r0, 8010b26 <__mdiff+0x2e>
 8010b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8010c18 <__mdiff+0x120>)
 8010b1c:	f240 2137 	movw	r1, #567	@ 0x237
 8010b20:	483e      	ldr	r0, [pc, #248]	@ (8010c1c <__mdiff+0x124>)
 8010b22:	f001 fa91 	bl	8012048 <__assert_func>
 8010b26:	2301      	movs	r3, #1
 8010b28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010b2c:	4610      	mov	r0, r2
 8010b2e:	b003      	add	sp, #12
 8010b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b34:	bfbc      	itt	lt
 8010b36:	464b      	movlt	r3, r9
 8010b38:	46a1      	movlt	r9, r4
 8010b3a:	4630      	mov	r0, r6
 8010b3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010b40:	bfba      	itte	lt
 8010b42:	461c      	movlt	r4, r3
 8010b44:	2501      	movlt	r5, #1
 8010b46:	2500      	movge	r5, #0
 8010b48:	f7ff fcf6 	bl	8010538 <_Balloc>
 8010b4c:	4602      	mov	r2, r0
 8010b4e:	b918      	cbnz	r0, 8010b58 <__mdiff+0x60>
 8010b50:	4b31      	ldr	r3, [pc, #196]	@ (8010c18 <__mdiff+0x120>)
 8010b52:	f240 2145 	movw	r1, #581	@ 0x245
 8010b56:	e7e3      	b.n	8010b20 <__mdiff+0x28>
 8010b58:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010b5c:	6926      	ldr	r6, [r4, #16]
 8010b5e:	60c5      	str	r5, [r0, #12]
 8010b60:	f109 0310 	add.w	r3, r9, #16
 8010b64:	f109 0514 	add.w	r5, r9, #20
 8010b68:	f104 0e14 	add.w	lr, r4, #20
 8010b6c:	f100 0b14 	add.w	fp, r0, #20
 8010b70:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010b74:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010b78:	9301      	str	r3, [sp, #4]
 8010b7a:	46d9      	mov	r9, fp
 8010b7c:	f04f 0c00 	mov.w	ip, #0
 8010b80:	9b01      	ldr	r3, [sp, #4]
 8010b82:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010b86:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010b8a:	9301      	str	r3, [sp, #4]
 8010b8c:	fa1f f38a 	uxth.w	r3, sl
 8010b90:	4619      	mov	r1, r3
 8010b92:	b283      	uxth	r3, r0
 8010b94:	1acb      	subs	r3, r1, r3
 8010b96:	0c00      	lsrs	r0, r0, #16
 8010b98:	4463      	add	r3, ip
 8010b9a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010b9e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010ba2:	b29b      	uxth	r3, r3
 8010ba4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010ba8:	4576      	cmp	r6, lr
 8010baa:	f849 3b04 	str.w	r3, [r9], #4
 8010bae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010bb2:	d8e5      	bhi.n	8010b80 <__mdiff+0x88>
 8010bb4:	1b33      	subs	r3, r6, r4
 8010bb6:	3b15      	subs	r3, #21
 8010bb8:	f023 0303 	bic.w	r3, r3, #3
 8010bbc:	3415      	adds	r4, #21
 8010bbe:	3304      	adds	r3, #4
 8010bc0:	42a6      	cmp	r6, r4
 8010bc2:	bf38      	it	cc
 8010bc4:	2304      	movcc	r3, #4
 8010bc6:	441d      	add	r5, r3
 8010bc8:	445b      	add	r3, fp
 8010bca:	461e      	mov	r6, r3
 8010bcc:	462c      	mov	r4, r5
 8010bce:	4544      	cmp	r4, r8
 8010bd0:	d30e      	bcc.n	8010bf0 <__mdiff+0xf8>
 8010bd2:	f108 0103 	add.w	r1, r8, #3
 8010bd6:	1b49      	subs	r1, r1, r5
 8010bd8:	f021 0103 	bic.w	r1, r1, #3
 8010bdc:	3d03      	subs	r5, #3
 8010bde:	45a8      	cmp	r8, r5
 8010be0:	bf38      	it	cc
 8010be2:	2100      	movcc	r1, #0
 8010be4:	440b      	add	r3, r1
 8010be6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010bea:	b191      	cbz	r1, 8010c12 <__mdiff+0x11a>
 8010bec:	6117      	str	r7, [r2, #16]
 8010bee:	e79d      	b.n	8010b2c <__mdiff+0x34>
 8010bf0:	f854 1b04 	ldr.w	r1, [r4], #4
 8010bf4:	46e6      	mov	lr, ip
 8010bf6:	0c08      	lsrs	r0, r1, #16
 8010bf8:	fa1c fc81 	uxtah	ip, ip, r1
 8010bfc:	4471      	add	r1, lr
 8010bfe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010c02:	b289      	uxth	r1, r1
 8010c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010c08:	f846 1b04 	str.w	r1, [r6], #4
 8010c0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010c10:	e7dd      	b.n	8010bce <__mdiff+0xd6>
 8010c12:	3f01      	subs	r7, #1
 8010c14:	e7e7      	b.n	8010be6 <__mdiff+0xee>
 8010c16:	bf00      	nop
 8010c18:	08013235 	.word	0x08013235
 8010c1c:	08013246 	.word	0x08013246

08010c20 <__ulp>:
 8010c20:	b082      	sub	sp, #8
 8010c22:	ed8d 0b00 	vstr	d0, [sp]
 8010c26:	9a01      	ldr	r2, [sp, #4]
 8010c28:	4b0f      	ldr	r3, [pc, #60]	@ (8010c68 <__ulp+0x48>)
 8010c2a:	4013      	ands	r3, r2
 8010c2c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	dc08      	bgt.n	8010c46 <__ulp+0x26>
 8010c34:	425b      	negs	r3, r3
 8010c36:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010c3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010c3e:	da04      	bge.n	8010c4a <__ulp+0x2a>
 8010c40:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8010c44:	4113      	asrs	r3, r2
 8010c46:	2200      	movs	r2, #0
 8010c48:	e008      	b.n	8010c5c <__ulp+0x3c>
 8010c4a:	f1a2 0314 	sub.w	r3, r2, #20
 8010c4e:	2b1e      	cmp	r3, #30
 8010c50:	bfda      	itte	le
 8010c52:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8010c56:	40da      	lsrle	r2, r3
 8010c58:	2201      	movgt	r2, #1
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	4610      	mov	r0, r2
 8010c60:	ec41 0b10 	vmov	d0, r0, r1
 8010c64:	b002      	add	sp, #8
 8010c66:	4770      	bx	lr
 8010c68:	7ff00000 	.word	0x7ff00000

08010c6c <__b2d>:
 8010c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c70:	6906      	ldr	r6, [r0, #16]
 8010c72:	f100 0814 	add.w	r8, r0, #20
 8010c76:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010c7a:	1f37      	subs	r7, r6, #4
 8010c7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010c80:	4610      	mov	r0, r2
 8010c82:	f7ff fd4b 	bl	801071c <__hi0bits>
 8010c86:	f1c0 0320 	rsb	r3, r0, #32
 8010c8a:	280a      	cmp	r0, #10
 8010c8c:	600b      	str	r3, [r1, #0]
 8010c8e:	491b      	ldr	r1, [pc, #108]	@ (8010cfc <__b2d+0x90>)
 8010c90:	dc15      	bgt.n	8010cbe <__b2d+0x52>
 8010c92:	f1c0 0c0b 	rsb	ip, r0, #11
 8010c96:	fa22 f30c 	lsr.w	r3, r2, ip
 8010c9a:	45b8      	cmp	r8, r7
 8010c9c:	ea43 0501 	orr.w	r5, r3, r1
 8010ca0:	bf34      	ite	cc
 8010ca2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010ca6:	2300      	movcs	r3, #0
 8010ca8:	3015      	adds	r0, #21
 8010caa:	fa02 f000 	lsl.w	r0, r2, r0
 8010cae:	fa23 f30c 	lsr.w	r3, r3, ip
 8010cb2:	4303      	orrs	r3, r0
 8010cb4:	461c      	mov	r4, r3
 8010cb6:	ec45 4b10 	vmov	d0, r4, r5
 8010cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbe:	45b8      	cmp	r8, r7
 8010cc0:	bf3a      	itte	cc
 8010cc2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010cc6:	f1a6 0708 	subcc.w	r7, r6, #8
 8010cca:	2300      	movcs	r3, #0
 8010ccc:	380b      	subs	r0, #11
 8010cce:	d012      	beq.n	8010cf6 <__b2d+0x8a>
 8010cd0:	f1c0 0120 	rsb	r1, r0, #32
 8010cd4:	fa23 f401 	lsr.w	r4, r3, r1
 8010cd8:	4082      	lsls	r2, r0
 8010cda:	4322      	orrs	r2, r4
 8010cdc:	4547      	cmp	r7, r8
 8010cde:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8010ce2:	bf8c      	ite	hi
 8010ce4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010ce8:	2200      	movls	r2, #0
 8010cea:	4083      	lsls	r3, r0
 8010cec:	40ca      	lsrs	r2, r1
 8010cee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8010cf2:	4313      	orrs	r3, r2
 8010cf4:	e7de      	b.n	8010cb4 <__b2d+0x48>
 8010cf6:	ea42 0501 	orr.w	r5, r2, r1
 8010cfa:	e7db      	b.n	8010cb4 <__b2d+0x48>
 8010cfc:	3ff00000 	.word	0x3ff00000

08010d00 <__d2b>:
 8010d00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d04:	460f      	mov	r7, r1
 8010d06:	2101      	movs	r1, #1
 8010d08:	ec59 8b10 	vmov	r8, r9, d0
 8010d0c:	4616      	mov	r6, r2
 8010d0e:	f7ff fc13 	bl	8010538 <_Balloc>
 8010d12:	4604      	mov	r4, r0
 8010d14:	b930      	cbnz	r0, 8010d24 <__d2b+0x24>
 8010d16:	4602      	mov	r2, r0
 8010d18:	4b23      	ldr	r3, [pc, #140]	@ (8010da8 <__d2b+0xa8>)
 8010d1a:	4824      	ldr	r0, [pc, #144]	@ (8010dac <__d2b+0xac>)
 8010d1c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010d20:	f001 f992 	bl	8012048 <__assert_func>
 8010d24:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010d28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010d2c:	b10d      	cbz	r5, 8010d32 <__d2b+0x32>
 8010d2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010d32:	9301      	str	r3, [sp, #4]
 8010d34:	f1b8 0300 	subs.w	r3, r8, #0
 8010d38:	d023      	beq.n	8010d82 <__d2b+0x82>
 8010d3a:	4668      	mov	r0, sp
 8010d3c:	9300      	str	r3, [sp, #0]
 8010d3e:	f7ff fd0c 	bl	801075a <__lo0bits>
 8010d42:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010d46:	b1d0      	cbz	r0, 8010d7e <__d2b+0x7e>
 8010d48:	f1c0 0320 	rsb	r3, r0, #32
 8010d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d50:	430b      	orrs	r3, r1
 8010d52:	40c2      	lsrs	r2, r0
 8010d54:	6163      	str	r3, [r4, #20]
 8010d56:	9201      	str	r2, [sp, #4]
 8010d58:	9b01      	ldr	r3, [sp, #4]
 8010d5a:	61a3      	str	r3, [r4, #24]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	bf0c      	ite	eq
 8010d60:	2201      	moveq	r2, #1
 8010d62:	2202      	movne	r2, #2
 8010d64:	6122      	str	r2, [r4, #16]
 8010d66:	b1a5      	cbz	r5, 8010d92 <__d2b+0x92>
 8010d68:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010d6c:	4405      	add	r5, r0
 8010d6e:	603d      	str	r5, [r7, #0]
 8010d70:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010d74:	6030      	str	r0, [r6, #0]
 8010d76:	4620      	mov	r0, r4
 8010d78:	b003      	add	sp, #12
 8010d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d7e:	6161      	str	r1, [r4, #20]
 8010d80:	e7ea      	b.n	8010d58 <__d2b+0x58>
 8010d82:	a801      	add	r0, sp, #4
 8010d84:	f7ff fce9 	bl	801075a <__lo0bits>
 8010d88:	9b01      	ldr	r3, [sp, #4]
 8010d8a:	6163      	str	r3, [r4, #20]
 8010d8c:	3020      	adds	r0, #32
 8010d8e:	2201      	movs	r2, #1
 8010d90:	e7e8      	b.n	8010d64 <__d2b+0x64>
 8010d92:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010d96:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010d9a:	6038      	str	r0, [r7, #0]
 8010d9c:	6918      	ldr	r0, [r3, #16]
 8010d9e:	f7ff fcbd 	bl	801071c <__hi0bits>
 8010da2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010da6:	e7e5      	b.n	8010d74 <__d2b+0x74>
 8010da8:	08013235 	.word	0x08013235
 8010dac:	08013246 	.word	0x08013246

08010db0 <__ratio>:
 8010db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010db4:	b085      	sub	sp, #20
 8010db6:	e9cd 1000 	strd	r1, r0, [sp]
 8010dba:	a902      	add	r1, sp, #8
 8010dbc:	f7ff ff56 	bl	8010c6c <__b2d>
 8010dc0:	9800      	ldr	r0, [sp, #0]
 8010dc2:	a903      	add	r1, sp, #12
 8010dc4:	ec55 4b10 	vmov	r4, r5, d0
 8010dc8:	f7ff ff50 	bl	8010c6c <__b2d>
 8010dcc:	9b01      	ldr	r3, [sp, #4]
 8010dce:	6919      	ldr	r1, [r3, #16]
 8010dd0:	9b00      	ldr	r3, [sp, #0]
 8010dd2:	691b      	ldr	r3, [r3, #16]
 8010dd4:	1ac9      	subs	r1, r1, r3
 8010dd6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010dda:	1a9b      	subs	r3, r3, r2
 8010ddc:	ec5b ab10 	vmov	sl, fp, d0
 8010de0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	bfce      	itee	gt
 8010de8:	462a      	movgt	r2, r5
 8010dea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010dee:	465a      	movle	r2, fp
 8010df0:	462f      	mov	r7, r5
 8010df2:	46d9      	mov	r9, fp
 8010df4:	bfcc      	ite	gt
 8010df6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010dfa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010dfe:	464b      	mov	r3, r9
 8010e00:	4652      	mov	r2, sl
 8010e02:	4620      	mov	r0, r4
 8010e04:	4639      	mov	r1, r7
 8010e06:	f7ef fd41 	bl	800088c <__aeabi_ddiv>
 8010e0a:	ec41 0b10 	vmov	d0, r0, r1
 8010e0e:	b005      	add	sp, #20
 8010e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e14 <__copybits>:
 8010e14:	3901      	subs	r1, #1
 8010e16:	b570      	push	{r4, r5, r6, lr}
 8010e18:	1149      	asrs	r1, r1, #5
 8010e1a:	6914      	ldr	r4, [r2, #16]
 8010e1c:	3101      	adds	r1, #1
 8010e1e:	f102 0314 	add.w	r3, r2, #20
 8010e22:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010e26:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010e2a:	1f05      	subs	r5, r0, #4
 8010e2c:	42a3      	cmp	r3, r4
 8010e2e:	d30c      	bcc.n	8010e4a <__copybits+0x36>
 8010e30:	1aa3      	subs	r3, r4, r2
 8010e32:	3b11      	subs	r3, #17
 8010e34:	f023 0303 	bic.w	r3, r3, #3
 8010e38:	3211      	adds	r2, #17
 8010e3a:	42a2      	cmp	r2, r4
 8010e3c:	bf88      	it	hi
 8010e3e:	2300      	movhi	r3, #0
 8010e40:	4418      	add	r0, r3
 8010e42:	2300      	movs	r3, #0
 8010e44:	4288      	cmp	r0, r1
 8010e46:	d305      	bcc.n	8010e54 <__copybits+0x40>
 8010e48:	bd70      	pop	{r4, r5, r6, pc}
 8010e4a:	f853 6b04 	ldr.w	r6, [r3], #4
 8010e4e:	f845 6f04 	str.w	r6, [r5, #4]!
 8010e52:	e7eb      	b.n	8010e2c <__copybits+0x18>
 8010e54:	f840 3b04 	str.w	r3, [r0], #4
 8010e58:	e7f4      	b.n	8010e44 <__copybits+0x30>

08010e5a <__any_on>:
 8010e5a:	f100 0214 	add.w	r2, r0, #20
 8010e5e:	6900      	ldr	r0, [r0, #16]
 8010e60:	114b      	asrs	r3, r1, #5
 8010e62:	4298      	cmp	r0, r3
 8010e64:	b510      	push	{r4, lr}
 8010e66:	db11      	blt.n	8010e8c <__any_on+0x32>
 8010e68:	dd0a      	ble.n	8010e80 <__any_on+0x26>
 8010e6a:	f011 011f 	ands.w	r1, r1, #31
 8010e6e:	d007      	beq.n	8010e80 <__any_on+0x26>
 8010e70:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e74:	fa24 f001 	lsr.w	r0, r4, r1
 8010e78:	fa00 f101 	lsl.w	r1, r0, r1
 8010e7c:	428c      	cmp	r4, r1
 8010e7e:	d10b      	bne.n	8010e98 <__any_on+0x3e>
 8010e80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d803      	bhi.n	8010e90 <__any_on+0x36>
 8010e88:	2000      	movs	r0, #0
 8010e8a:	bd10      	pop	{r4, pc}
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	e7f7      	b.n	8010e80 <__any_on+0x26>
 8010e90:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e94:	2900      	cmp	r1, #0
 8010e96:	d0f5      	beq.n	8010e84 <__any_on+0x2a>
 8010e98:	2001      	movs	r0, #1
 8010e9a:	e7f6      	b.n	8010e8a <__any_on+0x30>

08010e9c <_malloc_usable_size_r>:
 8010e9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ea0:	1f18      	subs	r0, r3, #4
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	bfbc      	itt	lt
 8010ea6:	580b      	ldrlt	r3, [r1, r0]
 8010ea8:	18c0      	addlt	r0, r0, r3
 8010eaa:	4770      	bx	lr

08010eac <sulp>:
 8010eac:	b570      	push	{r4, r5, r6, lr}
 8010eae:	4604      	mov	r4, r0
 8010eb0:	460d      	mov	r5, r1
 8010eb2:	ec45 4b10 	vmov	d0, r4, r5
 8010eb6:	4616      	mov	r6, r2
 8010eb8:	f7ff feb2 	bl	8010c20 <__ulp>
 8010ebc:	ec51 0b10 	vmov	r0, r1, d0
 8010ec0:	b17e      	cbz	r6, 8010ee2 <sulp+0x36>
 8010ec2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010ec6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	dd09      	ble.n	8010ee2 <sulp+0x36>
 8010ece:	051b      	lsls	r3, r3, #20
 8010ed0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8010ed4:	2400      	movs	r4, #0
 8010ed6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8010eda:	4622      	mov	r2, r4
 8010edc:	462b      	mov	r3, r5
 8010ede:	f7ef fbab 	bl	8000638 <__aeabi_dmul>
 8010ee2:	ec41 0b10 	vmov	d0, r0, r1
 8010ee6:	bd70      	pop	{r4, r5, r6, pc}

08010ee8 <_strtod_l>:
 8010ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eec:	b09f      	sub	sp, #124	@ 0x7c
 8010eee:	460c      	mov	r4, r1
 8010ef0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	921a      	str	r2, [sp, #104]	@ 0x68
 8010ef6:	9005      	str	r0, [sp, #20]
 8010ef8:	f04f 0a00 	mov.w	sl, #0
 8010efc:	f04f 0b00 	mov.w	fp, #0
 8010f00:	460a      	mov	r2, r1
 8010f02:	9219      	str	r2, [sp, #100]	@ 0x64
 8010f04:	7811      	ldrb	r1, [r2, #0]
 8010f06:	292b      	cmp	r1, #43	@ 0x2b
 8010f08:	d04a      	beq.n	8010fa0 <_strtod_l+0xb8>
 8010f0a:	d838      	bhi.n	8010f7e <_strtod_l+0x96>
 8010f0c:	290d      	cmp	r1, #13
 8010f0e:	d832      	bhi.n	8010f76 <_strtod_l+0x8e>
 8010f10:	2908      	cmp	r1, #8
 8010f12:	d832      	bhi.n	8010f7a <_strtod_l+0x92>
 8010f14:	2900      	cmp	r1, #0
 8010f16:	d03b      	beq.n	8010f90 <_strtod_l+0xa8>
 8010f18:	2200      	movs	r2, #0
 8010f1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010f1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8010f1e:	782a      	ldrb	r2, [r5, #0]
 8010f20:	2a30      	cmp	r2, #48	@ 0x30
 8010f22:	f040 80b3 	bne.w	801108c <_strtod_l+0x1a4>
 8010f26:	786a      	ldrb	r2, [r5, #1]
 8010f28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010f2c:	2a58      	cmp	r2, #88	@ 0x58
 8010f2e:	d16e      	bne.n	801100e <_strtod_l+0x126>
 8010f30:	9302      	str	r3, [sp, #8]
 8010f32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f34:	9301      	str	r3, [sp, #4]
 8010f36:	ab1a      	add	r3, sp, #104	@ 0x68
 8010f38:	9300      	str	r3, [sp, #0]
 8010f3a:	4a8e      	ldr	r2, [pc, #568]	@ (8011174 <_strtod_l+0x28c>)
 8010f3c:	9805      	ldr	r0, [sp, #20]
 8010f3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010f40:	a919      	add	r1, sp, #100	@ 0x64
 8010f42:	f001 f91b 	bl	801217c <__gethex>
 8010f46:	f010 060f 	ands.w	r6, r0, #15
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	d005      	beq.n	8010f5a <_strtod_l+0x72>
 8010f4e:	2e06      	cmp	r6, #6
 8010f50:	d128      	bne.n	8010fa4 <_strtod_l+0xbc>
 8010f52:	3501      	adds	r5, #1
 8010f54:	2300      	movs	r3, #0
 8010f56:	9519      	str	r5, [sp, #100]	@ 0x64
 8010f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010f5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f040 858e 	bne.w	8011a7e <_strtod_l+0xb96>
 8010f62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010f64:	b1cb      	cbz	r3, 8010f9a <_strtod_l+0xb2>
 8010f66:	4652      	mov	r2, sl
 8010f68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8010f6c:	ec43 2b10 	vmov	d0, r2, r3
 8010f70:	b01f      	add	sp, #124	@ 0x7c
 8010f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f76:	2920      	cmp	r1, #32
 8010f78:	d1ce      	bne.n	8010f18 <_strtod_l+0x30>
 8010f7a:	3201      	adds	r2, #1
 8010f7c:	e7c1      	b.n	8010f02 <_strtod_l+0x1a>
 8010f7e:	292d      	cmp	r1, #45	@ 0x2d
 8010f80:	d1ca      	bne.n	8010f18 <_strtod_l+0x30>
 8010f82:	2101      	movs	r1, #1
 8010f84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010f86:	1c51      	adds	r1, r2, #1
 8010f88:	9119      	str	r1, [sp, #100]	@ 0x64
 8010f8a:	7852      	ldrb	r2, [r2, #1]
 8010f8c:	2a00      	cmp	r2, #0
 8010f8e:	d1c5      	bne.n	8010f1c <_strtod_l+0x34>
 8010f90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8010f92:	9419      	str	r4, [sp, #100]	@ 0x64
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	f040 8570 	bne.w	8011a7a <_strtod_l+0xb92>
 8010f9a:	4652      	mov	r2, sl
 8010f9c:	465b      	mov	r3, fp
 8010f9e:	e7e5      	b.n	8010f6c <_strtod_l+0x84>
 8010fa0:	2100      	movs	r1, #0
 8010fa2:	e7ef      	b.n	8010f84 <_strtod_l+0x9c>
 8010fa4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8010fa6:	b13a      	cbz	r2, 8010fb8 <_strtod_l+0xd0>
 8010fa8:	2135      	movs	r1, #53	@ 0x35
 8010faa:	a81c      	add	r0, sp, #112	@ 0x70
 8010fac:	f7ff ff32 	bl	8010e14 <__copybits>
 8010fb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8010fb2:	9805      	ldr	r0, [sp, #20]
 8010fb4:	f7ff fb00 	bl	80105b8 <_Bfree>
 8010fb8:	3e01      	subs	r6, #1
 8010fba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8010fbc:	2e04      	cmp	r6, #4
 8010fbe:	d806      	bhi.n	8010fce <_strtod_l+0xe6>
 8010fc0:	e8df f006 	tbb	[pc, r6]
 8010fc4:	201d0314 	.word	0x201d0314
 8010fc8:	14          	.byte	0x14
 8010fc9:	00          	.byte	0x00
 8010fca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8010fce:	05e1      	lsls	r1, r4, #23
 8010fd0:	bf48      	it	mi
 8010fd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8010fd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8010fda:	0d1b      	lsrs	r3, r3, #20
 8010fdc:	051b      	lsls	r3, r3, #20
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1bb      	bne.n	8010f5a <_strtod_l+0x72>
 8010fe2:	f7fe fb1b 	bl	800f61c <__errno>
 8010fe6:	2322      	movs	r3, #34	@ 0x22
 8010fe8:	6003      	str	r3, [r0, #0]
 8010fea:	e7b6      	b.n	8010f5a <_strtod_l+0x72>
 8010fec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8010ff0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010ff4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8010ff8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8010ffc:	e7e7      	b.n	8010fce <_strtod_l+0xe6>
 8010ffe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801117c <_strtod_l+0x294>
 8011002:	e7e4      	b.n	8010fce <_strtod_l+0xe6>
 8011004:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8011008:	f04f 3aff 	mov.w	sl, #4294967295
 801100c:	e7df      	b.n	8010fce <_strtod_l+0xe6>
 801100e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011010:	1c5a      	adds	r2, r3, #1
 8011012:	9219      	str	r2, [sp, #100]	@ 0x64
 8011014:	785b      	ldrb	r3, [r3, #1]
 8011016:	2b30      	cmp	r3, #48	@ 0x30
 8011018:	d0f9      	beq.n	801100e <_strtod_l+0x126>
 801101a:	2b00      	cmp	r3, #0
 801101c:	d09d      	beq.n	8010f5a <_strtod_l+0x72>
 801101e:	2301      	movs	r3, #1
 8011020:	9309      	str	r3, [sp, #36]	@ 0x24
 8011022:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011024:	930c      	str	r3, [sp, #48]	@ 0x30
 8011026:	2300      	movs	r3, #0
 8011028:	9308      	str	r3, [sp, #32]
 801102a:	930a      	str	r3, [sp, #40]	@ 0x28
 801102c:	461f      	mov	r7, r3
 801102e:	220a      	movs	r2, #10
 8011030:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8011032:	7805      	ldrb	r5, [r0, #0]
 8011034:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8011038:	b2d9      	uxtb	r1, r3
 801103a:	2909      	cmp	r1, #9
 801103c:	d928      	bls.n	8011090 <_strtod_l+0x1a8>
 801103e:	494e      	ldr	r1, [pc, #312]	@ (8011178 <_strtod_l+0x290>)
 8011040:	2201      	movs	r2, #1
 8011042:	f000 ffd5 	bl	8011ff0 <strncmp>
 8011046:	2800      	cmp	r0, #0
 8011048:	d032      	beq.n	80110b0 <_strtod_l+0x1c8>
 801104a:	2000      	movs	r0, #0
 801104c:	462a      	mov	r2, r5
 801104e:	4681      	mov	r9, r0
 8011050:	463d      	mov	r5, r7
 8011052:	4603      	mov	r3, r0
 8011054:	2a65      	cmp	r2, #101	@ 0x65
 8011056:	d001      	beq.n	801105c <_strtod_l+0x174>
 8011058:	2a45      	cmp	r2, #69	@ 0x45
 801105a:	d114      	bne.n	8011086 <_strtod_l+0x19e>
 801105c:	b91d      	cbnz	r5, 8011066 <_strtod_l+0x17e>
 801105e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011060:	4302      	orrs	r2, r0
 8011062:	d095      	beq.n	8010f90 <_strtod_l+0xa8>
 8011064:	2500      	movs	r5, #0
 8011066:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8011068:	1c62      	adds	r2, r4, #1
 801106a:	9219      	str	r2, [sp, #100]	@ 0x64
 801106c:	7862      	ldrb	r2, [r4, #1]
 801106e:	2a2b      	cmp	r2, #43	@ 0x2b
 8011070:	d077      	beq.n	8011162 <_strtod_l+0x27a>
 8011072:	2a2d      	cmp	r2, #45	@ 0x2d
 8011074:	d07b      	beq.n	801116e <_strtod_l+0x286>
 8011076:	f04f 0c00 	mov.w	ip, #0
 801107a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801107e:	2909      	cmp	r1, #9
 8011080:	f240 8082 	bls.w	8011188 <_strtod_l+0x2a0>
 8011084:	9419      	str	r4, [sp, #100]	@ 0x64
 8011086:	f04f 0800 	mov.w	r8, #0
 801108a:	e0a2      	b.n	80111d2 <_strtod_l+0x2ea>
 801108c:	2300      	movs	r3, #0
 801108e:	e7c7      	b.n	8011020 <_strtod_l+0x138>
 8011090:	2f08      	cmp	r7, #8
 8011092:	bfd5      	itete	le
 8011094:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8011096:	9908      	ldrgt	r1, [sp, #32]
 8011098:	fb02 3301 	mlale	r3, r2, r1, r3
 801109c:	fb02 3301 	mlagt	r3, r2, r1, r3
 80110a0:	f100 0001 	add.w	r0, r0, #1
 80110a4:	bfd4      	ite	le
 80110a6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80110a8:	9308      	strgt	r3, [sp, #32]
 80110aa:	3701      	adds	r7, #1
 80110ac:	9019      	str	r0, [sp, #100]	@ 0x64
 80110ae:	e7bf      	b.n	8011030 <_strtod_l+0x148>
 80110b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110b2:	1c5a      	adds	r2, r3, #1
 80110b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80110b6:	785a      	ldrb	r2, [r3, #1]
 80110b8:	b37f      	cbz	r7, 801111a <_strtod_l+0x232>
 80110ba:	4681      	mov	r9, r0
 80110bc:	463d      	mov	r5, r7
 80110be:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80110c2:	2b09      	cmp	r3, #9
 80110c4:	d912      	bls.n	80110ec <_strtod_l+0x204>
 80110c6:	2301      	movs	r3, #1
 80110c8:	e7c4      	b.n	8011054 <_strtod_l+0x16c>
 80110ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110cc:	1c5a      	adds	r2, r3, #1
 80110ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80110d0:	785a      	ldrb	r2, [r3, #1]
 80110d2:	3001      	adds	r0, #1
 80110d4:	2a30      	cmp	r2, #48	@ 0x30
 80110d6:	d0f8      	beq.n	80110ca <_strtod_l+0x1e2>
 80110d8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80110dc:	2b08      	cmp	r3, #8
 80110de:	f200 84d3 	bhi.w	8011a88 <_strtod_l+0xba0>
 80110e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80110e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80110e6:	4681      	mov	r9, r0
 80110e8:	2000      	movs	r0, #0
 80110ea:	4605      	mov	r5, r0
 80110ec:	3a30      	subs	r2, #48	@ 0x30
 80110ee:	f100 0301 	add.w	r3, r0, #1
 80110f2:	d02a      	beq.n	801114a <_strtod_l+0x262>
 80110f4:	4499      	add	r9, r3
 80110f6:	eb00 0c05 	add.w	ip, r0, r5
 80110fa:	462b      	mov	r3, r5
 80110fc:	210a      	movs	r1, #10
 80110fe:	4563      	cmp	r3, ip
 8011100:	d10d      	bne.n	801111e <_strtod_l+0x236>
 8011102:	1c69      	adds	r1, r5, #1
 8011104:	4401      	add	r1, r0
 8011106:	4428      	add	r0, r5
 8011108:	2808      	cmp	r0, #8
 801110a:	dc16      	bgt.n	801113a <_strtod_l+0x252>
 801110c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801110e:	230a      	movs	r3, #10
 8011110:	fb03 2300 	mla	r3, r3, r0, r2
 8011114:	930a      	str	r3, [sp, #40]	@ 0x28
 8011116:	2300      	movs	r3, #0
 8011118:	e018      	b.n	801114c <_strtod_l+0x264>
 801111a:	4638      	mov	r0, r7
 801111c:	e7da      	b.n	80110d4 <_strtod_l+0x1ec>
 801111e:	2b08      	cmp	r3, #8
 8011120:	f103 0301 	add.w	r3, r3, #1
 8011124:	dc03      	bgt.n	801112e <_strtod_l+0x246>
 8011126:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8011128:	434e      	muls	r6, r1
 801112a:	960a      	str	r6, [sp, #40]	@ 0x28
 801112c:	e7e7      	b.n	80110fe <_strtod_l+0x216>
 801112e:	2b10      	cmp	r3, #16
 8011130:	bfde      	ittt	le
 8011132:	9e08      	ldrle	r6, [sp, #32]
 8011134:	434e      	mulle	r6, r1
 8011136:	9608      	strle	r6, [sp, #32]
 8011138:	e7e1      	b.n	80110fe <_strtod_l+0x216>
 801113a:	280f      	cmp	r0, #15
 801113c:	dceb      	bgt.n	8011116 <_strtod_l+0x22e>
 801113e:	9808      	ldr	r0, [sp, #32]
 8011140:	230a      	movs	r3, #10
 8011142:	fb03 2300 	mla	r3, r3, r0, r2
 8011146:	9308      	str	r3, [sp, #32]
 8011148:	e7e5      	b.n	8011116 <_strtod_l+0x22e>
 801114a:	4629      	mov	r1, r5
 801114c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801114e:	1c50      	adds	r0, r2, #1
 8011150:	9019      	str	r0, [sp, #100]	@ 0x64
 8011152:	7852      	ldrb	r2, [r2, #1]
 8011154:	4618      	mov	r0, r3
 8011156:	460d      	mov	r5, r1
 8011158:	e7b1      	b.n	80110be <_strtod_l+0x1d6>
 801115a:	f04f 0900 	mov.w	r9, #0
 801115e:	2301      	movs	r3, #1
 8011160:	e77d      	b.n	801105e <_strtod_l+0x176>
 8011162:	f04f 0c00 	mov.w	ip, #0
 8011166:	1ca2      	adds	r2, r4, #2
 8011168:	9219      	str	r2, [sp, #100]	@ 0x64
 801116a:	78a2      	ldrb	r2, [r4, #2]
 801116c:	e785      	b.n	801107a <_strtod_l+0x192>
 801116e:	f04f 0c01 	mov.w	ip, #1
 8011172:	e7f8      	b.n	8011166 <_strtod_l+0x27e>
 8011174:	080133b8 	.word	0x080133b8
 8011178:	080133a0 	.word	0x080133a0
 801117c:	7ff00000 	.word	0x7ff00000
 8011180:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8011182:	1c51      	adds	r1, r2, #1
 8011184:	9119      	str	r1, [sp, #100]	@ 0x64
 8011186:	7852      	ldrb	r2, [r2, #1]
 8011188:	2a30      	cmp	r2, #48	@ 0x30
 801118a:	d0f9      	beq.n	8011180 <_strtod_l+0x298>
 801118c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8011190:	2908      	cmp	r1, #8
 8011192:	f63f af78 	bhi.w	8011086 <_strtod_l+0x19e>
 8011196:	3a30      	subs	r2, #48	@ 0x30
 8011198:	920e      	str	r2, [sp, #56]	@ 0x38
 801119a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801119c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801119e:	f04f 080a 	mov.w	r8, #10
 80111a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80111a4:	1c56      	adds	r6, r2, #1
 80111a6:	9619      	str	r6, [sp, #100]	@ 0x64
 80111a8:	7852      	ldrb	r2, [r2, #1]
 80111aa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80111ae:	f1be 0f09 	cmp.w	lr, #9
 80111b2:	d939      	bls.n	8011228 <_strtod_l+0x340>
 80111b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80111b6:	1a76      	subs	r6, r6, r1
 80111b8:	2e08      	cmp	r6, #8
 80111ba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80111be:	dc03      	bgt.n	80111c8 <_strtod_l+0x2e0>
 80111c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80111c2:	4588      	cmp	r8, r1
 80111c4:	bfa8      	it	ge
 80111c6:	4688      	movge	r8, r1
 80111c8:	f1bc 0f00 	cmp.w	ip, #0
 80111cc:	d001      	beq.n	80111d2 <_strtod_l+0x2ea>
 80111ce:	f1c8 0800 	rsb	r8, r8, #0
 80111d2:	2d00      	cmp	r5, #0
 80111d4:	d14e      	bne.n	8011274 <_strtod_l+0x38c>
 80111d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80111d8:	4308      	orrs	r0, r1
 80111da:	f47f aebe 	bne.w	8010f5a <_strtod_l+0x72>
 80111de:	2b00      	cmp	r3, #0
 80111e0:	f47f aed6 	bne.w	8010f90 <_strtod_l+0xa8>
 80111e4:	2a69      	cmp	r2, #105	@ 0x69
 80111e6:	d028      	beq.n	801123a <_strtod_l+0x352>
 80111e8:	dc25      	bgt.n	8011236 <_strtod_l+0x34e>
 80111ea:	2a49      	cmp	r2, #73	@ 0x49
 80111ec:	d025      	beq.n	801123a <_strtod_l+0x352>
 80111ee:	2a4e      	cmp	r2, #78	@ 0x4e
 80111f0:	f47f aece 	bne.w	8010f90 <_strtod_l+0xa8>
 80111f4:	499b      	ldr	r1, [pc, #620]	@ (8011464 <_strtod_l+0x57c>)
 80111f6:	a819      	add	r0, sp, #100	@ 0x64
 80111f8:	f001 f9e2 	bl	80125c0 <__match>
 80111fc:	2800      	cmp	r0, #0
 80111fe:	f43f aec7 	beq.w	8010f90 <_strtod_l+0xa8>
 8011202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011204:	781b      	ldrb	r3, [r3, #0]
 8011206:	2b28      	cmp	r3, #40	@ 0x28
 8011208:	d12e      	bne.n	8011268 <_strtod_l+0x380>
 801120a:	4997      	ldr	r1, [pc, #604]	@ (8011468 <_strtod_l+0x580>)
 801120c:	aa1c      	add	r2, sp, #112	@ 0x70
 801120e:	a819      	add	r0, sp, #100	@ 0x64
 8011210:	f001 f9ea 	bl	80125e8 <__hexnan>
 8011214:	2805      	cmp	r0, #5
 8011216:	d127      	bne.n	8011268 <_strtod_l+0x380>
 8011218:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801121a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801121e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8011222:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8011226:	e698      	b.n	8010f5a <_strtod_l+0x72>
 8011228:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801122a:	fb08 2101 	mla	r1, r8, r1, r2
 801122e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8011232:	920e      	str	r2, [sp, #56]	@ 0x38
 8011234:	e7b5      	b.n	80111a2 <_strtod_l+0x2ba>
 8011236:	2a6e      	cmp	r2, #110	@ 0x6e
 8011238:	e7da      	b.n	80111f0 <_strtod_l+0x308>
 801123a:	498c      	ldr	r1, [pc, #560]	@ (801146c <_strtod_l+0x584>)
 801123c:	a819      	add	r0, sp, #100	@ 0x64
 801123e:	f001 f9bf 	bl	80125c0 <__match>
 8011242:	2800      	cmp	r0, #0
 8011244:	f43f aea4 	beq.w	8010f90 <_strtod_l+0xa8>
 8011248:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801124a:	4989      	ldr	r1, [pc, #548]	@ (8011470 <_strtod_l+0x588>)
 801124c:	3b01      	subs	r3, #1
 801124e:	a819      	add	r0, sp, #100	@ 0x64
 8011250:	9319      	str	r3, [sp, #100]	@ 0x64
 8011252:	f001 f9b5 	bl	80125c0 <__match>
 8011256:	b910      	cbnz	r0, 801125e <_strtod_l+0x376>
 8011258:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801125a:	3301      	adds	r3, #1
 801125c:	9319      	str	r3, [sp, #100]	@ 0x64
 801125e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8011480 <_strtod_l+0x598>
 8011262:	f04f 0a00 	mov.w	sl, #0
 8011266:	e678      	b.n	8010f5a <_strtod_l+0x72>
 8011268:	4882      	ldr	r0, [pc, #520]	@ (8011474 <_strtod_l+0x58c>)
 801126a:	f000 fee5 	bl	8012038 <nan>
 801126e:	ec5b ab10 	vmov	sl, fp, d0
 8011272:	e672      	b.n	8010f5a <_strtod_l+0x72>
 8011274:	eba8 0309 	sub.w	r3, r8, r9
 8011278:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801127a:	9309      	str	r3, [sp, #36]	@ 0x24
 801127c:	2f00      	cmp	r7, #0
 801127e:	bf08      	it	eq
 8011280:	462f      	moveq	r7, r5
 8011282:	2d10      	cmp	r5, #16
 8011284:	462c      	mov	r4, r5
 8011286:	bfa8      	it	ge
 8011288:	2410      	movge	r4, #16
 801128a:	f7ef f95b 	bl	8000544 <__aeabi_ui2d>
 801128e:	2d09      	cmp	r5, #9
 8011290:	4682      	mov	sl, r0
 8011292:	468b      	mov	fp, r1
 8011294:	dc13      	bgt.n	80112be <_strtod_l+0x3d6>
 8011296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011298:	2b00      	cmp	r3, #0
 801129a:	f43f ae5e 	beq.w	8010f5a <_strtod_l+0x72>
 801129e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112a0:	dd78      	ble.n	8011394 <_strtod_l+0x4ac>
 80112a2:	2b16      	cmp	r3, #22
 80112a4:	dc5f      	bgt.n	8011366 <_strtod_l+0x47e>
 80112a6:	4974      	ldr	r1, [pc, #464]	@ (8011478 <_strtod_l+0x590>)
 80112a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80112ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112b0:	4652      	mov	r2, sl
 80112b2:	465b      	mov	r3, fp
 80112b4:	f7ef f9c0 	bl	8000638 <__aeabi_dmul>
 80112b8:	4682      	mov	sl, r0
 80112ba:	468b      	mov	fp, r1
 80112bc:	e64d      	b.n	8010f5a <_strtod_l+0x72>
 80112be:	4b6e      	ldr	r3, [pc, #440]	@ (8011478 <_strtod_l+0x590>)
 80112c0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80112c4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80112c8:	f7ef f9b6 	bl	8000638 <__aeabi_dmul>
 80112cc:	4682      	mov	sl, r0
 80112ce:	9808      	ldr	r0, [sp, #32]
 80112d0:	468b      	mov	fp, r1
 80112d2:	f7ef f937 	bl	8000544 <__aeabi_ui2d>
 80112d6:	4602      	mov	r2, r0
 80112d8:	460b      	mov	r3, r1
 80112da:	4650      	mov	r0, sl
 80112dc:	4659      	mov	r1, fp
 80112de:	f7ee fff5 	bl	80002cc <__adddf3>
 80112e2:	2d0f      	cmp	r5, #15
 80112e4:	4682      	mov	sl, r0
 80112e6:	468b      	mov	fp, r1
 80112e8:	ddd5      	ble.n	8011296 <_strtod_l+0x3ae>
 80112ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112ec:	1b2c      	subs	r4, r5, r4
 80112ee:	441c      	add	r4, r3
 80112f0:	2c00      	cmp	r4, #0
 80112f2:	f340 8096 	ble.w	8011422 <_strtod_l+0x53a>
 80112f6:	f014 030f 	ands.w	r3, r4, #15
 80112fa:	d00a      	beq.n	8011312 <_strtod_l+0x42a>
 80112fc:	495e      	ldr	r1, [pc, #376]	@ (8011478 <_strtod_l+0x590>)
 80112fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011302:	4652      	mov	r2, sl
 8011304:	465b      	mov	r3, fp
 8011306:	e9d1 0100 	ldrd	r0, r1, [r1]
 801130a:	f7ef f995 	bl	8000638 <__aeabi_dmul>
 801130e:	4682      	mov	sl, r0
 8011310:	468b      	mov	fp, r1
 8011312:	f034 040f 	bics.w	r4, r4, #15
 8011316:	d073      	beq.n	8011400 <_strtod_l+0x518>
 8011318:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801131c:	dd48      	ble.n	80113b0 <_strtod_l+0x4c8>
 801131e:	2400      	movs	r4, #0
 8011320:	46a0      	mov	r8, r4
 8011322:	940a      	str	r4, [sp, #40]	@ 0x28
 8011324:	46a1      	mov	r9, r4
 8011326:	9a05      	ldr	r2, [sp, #20]
 8011328:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8011480 <_strtod_l+0x598>
 801132c:	2322      	movs	r3, #34	@ 0x22
 801132e:	6013      	str	r3, [r2, #0]
 8011330:	f04f 0a00 	mov.w	sl, #0
 8011334:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011336:	2b00      	cmp	r3, #0
 8011338:	f43f ae0f 	beq.w	8010f5a <_strtod_l+0x72>
 801133c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801133e:	9805      	ldr	r0, [sp, #20]
 8011340:	f7ff f93a 	bl	80105b8 <_Bfree>
 8011344:	9805      	ldr	r0, [sp, #20]
 8011346:	4649      	mov	r1, r9
 8011348:	f7ff f936 	bl	80105b8 <_Bfree>
 801134c:	9805      	ldr	r0, [sp, #20]
 801134e:	4641      	mov	r1, r8
 8011350:	f7ff f932 	bl	80105b8 <_Bfree>
 8011354:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011356:	9805      	ldr	r0, [sp, #20]
 8011358:	f7ff f92e 	bl	80105b8 <_Bfree>
 801135c:	9805      	ldr	r0, [sp, #20]
 801135e:	4621      	mov	r1, r4
 8011360:	f7ff f92a 	bl	80105b8 <_Bfree>
 8011364:	e5f9      	b.n	8010f5a <_strtod_l+0x72>
 8011366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011368:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801136c:	4293      	cmp	r3, r2
 801136e:	dbbc      	blt.n	80112ea <_strtod_l+0x402>
 8011370:	4c41      	ldr	r4, [pc, #260]	@ (8011478 <_strtod_l+0x590>)
 8011372:	f1c5 050f 	rsb	r5, r5, #15
 8011376:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801137a:	4652      	mov	r2, sl
 801137c:	465b      	mov	r3, fp
 801137e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011382:	f7ef f959 	bl	8000638 <__aeabi_dmul>
 8011386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011388:	1b5d      	subs	r5, r3, r5
 801138a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801138e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011392:	e78f      	b.n	80112b4 <_strtod_l+0x3cc>
 8011394:	3316      	adds	r3, #22
 8011396:	dba8      	blt.n	80112ea <_strtod_l+0x402>
 8011398:	4b37      	ldr	r3, [pc, #220]	@ (8011478 <_strtod_l+0x590>)
 801139a:	eba9 0808 	sub.w	r8, r9, r8
 801139e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80113a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80113a6:	4650      	mov	r0, sl
 80113a8:	4659      	mov	r1, fp
 80113aa:	f7ef fa6f 	bl	800088c <__aeabi_ddiv>
 80113ae:	e783      	b.n	80112b8 <_strtod_l+0x3d0>
 80113b0:	4b32      	ldr	r3, [pc, #200]	@ (801147c <_strtod_l+0x594>)
 80113b2:	9308      	str	r3, [sp, #32]
 80113b4:	2300      	movs	r3, #0
 80113b6:	1124      	asrs	r4, r4, #4
 80113b8:	4650      	mov	r0, sl
 80113ba:	4659      	mov	r1, fp
 80113bc:	461e      	mov	r6, r3
 80113be:	2c01      	cmp	r4, #1
 80113c0:	dc21      	bgt.n	8011406 <_strtod_l+0x51e>
 80113c2:	b10b      	cbz	r3, 80113c8 <_strtod_l+0x4e0>
 80113c4:	4682      	mov	sl, r0
 80113c6:	468b      	mov	fp, r1
 80113c8:	492c      	ldr	r1, [pc, #176]	@ (801147c <_strtod_l+0x594>)
 80113ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80113ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80113d2:	4652      	mov	r2, sl
 80113d4:	465b      	mov	r3, fp
 80113d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113da:	f7ef f92d 	bl	8000638 <__aeabi_dmul>
 80113de:	4b28      	ldr	r3, [pc, #160]	@ (8011480 <_strtod_l+0x598>)
 80113e0:	460a      	mov	r2, r1
 80113e2:	400b      	ands	r3, r1
 80113e4:	4927      	ldr	r1, [pc, #156]	@ (8011484 <_strtod_l+0x59c>)
 80113e6:	428b      	cmp	r3, r1
 80113e8:	4682      	mov	sl, r0
 80113ea:	d898      	bhi.n	801131e <_strtod_l+0x436>
 80113ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80113f0:	428b      	cmp	r3, r1
 80113f2:	bf86      	itte	hi
 80113f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8011488 <_strtod_l+0x5a0>
 80113f8:	f04f 3aff 	movhi.w	sl, #4294967295
 80113fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8011400:	2300      	movs	r3, #0
 8011402:	9308      	str	r3, [sp, #32]
 8011404:	e07a      	b.n	80114fc <_strtod_l+0x614>
 8011406:	07e2      	lsls	r2, r4, #31
 8011408:	d505      	bpl.n	8011416 <_strtod_l+0x52e>
 801140a:	9b08      	ldr	r3, [sp, #32]
 801140c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011410:	f7ef f912 	bl	8000638 <__aeabi_dmul>
 8011414:	2301      	movs	r3, #1
 8011416:	9a08      	ldr	r2, [sp, #32]
 8011418:	3208      	adds	r2, #8
 801141a:	3601      	adds	r6, #1
 801141c:	1064      	asrs	r4, r4, #1
 801141e:	9208      	str	r2, [sp, #32]
 8011420:	e7cd      	b.n	80113be <_strtod_l+0x4d6>
 8011422:	d0ed      	beq.n	8011400 <_strtod_l+0x518>
 8011424:	4264      	negs	r4, r4
 8011426:	f014 020f 	ands.w	r2, r4, #15
 801142a:	d00a      	beq.n	8011442 <_strtod_l+0x55a>
 801142c:	4b12      	ldr	r3, [pc, #72]	@ (8011478 <_strtod_l+0x590>)
 801142e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011432:	4650      	mov	r0, sl
 8011434:	4659      	mov	r1, fp
 8011436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801143a:	f7ef fa27 	bl	800088c <__aeabi_ddiv>
 801143e:	4682      	mov	sl, r0
 8011440:	468b      	mov	fp, r1
 8011442:	1124      	asrs	r4, r4, #4
 8011444:	d0dc      	beq.n	8011400 <_strtod_l+0x518>
 8011446:	2c1f      	cmp	r4, #31
 8011448:	dd20      	ble.n	801148c <_strtod_l+0x5a4>
 801144a:	2400      	movs	r4, #0
 801144c:	46a0      	mov	r8, r4
 801144e:	940a      	str	r4, [sp, #40]	@ 0x28
 8011450:	46a1      	mov	r9, r4
 8011452:	9a05      	ldr	r2, [sp, #20]
 8011454:	2322      	movs	r3, #34	@ 0x22
 8011456:	f04f 0a00 	mov.w	sl, #0
 801145a:	f04f 0b00 	mov.w	fp, #0
 801145e:	6013      	str	r3, [r2, #0]
 8011460:	e768      	b.n	8011334 <_strtod_l+0x44c>
 8011462:	bf00      	nop
 8011464:	0801318d 	.word	0x0801318d
 8011468:	080133a4 	.word	0x080133a4
 801146c:	08013185 	.word	0x08013185
 8011470:	080131bc 	.word	0x080131bc
 8011474:	0801354d 	.word	0x0801354d
 8011478:	080132d8 	.word	0x080132d8
 801147c:	080132b0 	.word	0x080132b0
 8011480:	7ff00000 	.word	0x7ff00000
 8011484:	7ca00000 	.word	0x7ca00000
 8011488:	7fefffff 	.word	0x7fefffff
 801148c:	f014 0310 	ands.w	r3, r4, #16
 8011490:	bf18      	it	ne
 8011492:	236a      	movne	r3, #106	@ 0x6a
 8011494:	4ea9      	ldr	r6, [pc, #676]	@ (801173c <_strtod_l+0x854>)
 8011496:	9308      	str	r3, [sp, #32]
 8011498:	4650      	mov	r0, sl
 801149a:	4659      	mov	r1, fp
 801149c:	2300      	movs	r3, #0
 801149e:	07e2      	lsls	r2, r4, #31
 80114a0:	d504      	bpl.n	80114ac <_strtod_l+0x5c4>
 80114a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80114a6:	f7ef f8c7 	bl	8000638 <__aeabi_dmul>
 80114aa:	2301      	movs	r3, #1
 80114ac:	1064      	asrs	r4, r4, #1
 80114ae:	f106 0608 	add.w	r6, r6, #8
 80114b2:	d1f4      	bne.n	801149e <_strtod_l+0x5b6>
 80114b4:	b10b      	cbz	r3, 80114ba <_strtod_l+0x5d2>
 80114b6:	4682      	mov	sl, r0
 80114b8:	468b      	mov	fp, r1
 80114ba:	9b08      	ldr	r3, [sp, #32]
 80114bc:	b1b3      	cbz	r3, 80114ec <_strtod_l+0x604>
 80114be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80114c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	4659      	mov	r1, fp
 80114ca:	dd0f      	ble.n	80114ec <_strtod_l+0x604>
 80114cc:	2b1f      	cmp	r3, #31
 80114ce:	dd55      	ble.n	801157c <_strtod_l+0x694>
 80114d0:	2b34      	cmp	r3, #52	@ 0x34
 80114d2:	bfde      	ittt	le
 80114d4:	f04f 33ff 	movle.w	r3, #4294967295
 80114d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80114dc:	4093      	lslle	r3, r2
 80114de:	f04f 0a00 	mov.w	sl, #0
 80114e2:	bfcc      	ite	gt
 80114e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80114e8:	ea03 0b01 	andle.w	fp, r3, r1
 80114ec:	2200      	movs	r2, #0
 80114ee:	2300      	movs	r3, #0
 80114f0:	4650      	mov	r0, sl
 80114f2:	4659      	mov	r1, fp
 80114f4:	f7ef fb08 	bl	8000b08 <__aeabi_dcmpeq>
 80114f8:	2800      	cmp	r0, #0
 80114fa:	d1a6      	bne.n	801144a <_strtod_l+0x562>
 80114fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114fe:	9300      	str	r3, [sp, #0]
 8011500:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011502:	9805      	ldr	r0, [sp, #20]
 8011504:	462b      	mov	r3, r5
 8011506:	463a      	mov	r2, r7
 8011508:	f7ff f8be 	bl	8010688 <__s2b>
 801150c:	900a      	str	r0, [sp, #40]	@ 0x28
 801150e:	2800      	cmp	r0, #0
 8011510:	f43f af05 	beq.w	801131e <_strtod_l+0x436>
 8011514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011516:	2a00      	cmp	r2, #0
 8011518:	eba9 0308 	sub.w	r3, r9, r8
 801151c:	bfa8      	it	ge
 801151e:	2300      	movge	r3, #0
 8011520:	9312      	str	r3, [sp, #72]	@ 0x48
 8011522:	2400      	movs	r4, #0
 8011524:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011528:	9316      	str	r3, [sp, #88]	@ 0x58
 801152a:	46a0      	mov	r8, r4
 801152c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801152e:	9805      	ldr	r0, [sp, #20]
 8011530:	6859      	ldr	r1, [r3, #4]
 8011532:	f7ff f801 	bl	8010538 <_Balloc>
 8011536:	4681      	mov	r9, r0
 8011538:	2800      	cmp	r0, #0
 801153a:	f43f aef4 	beq.w	8011326 <_strtod_l+0x43e>
 801153e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011540:	691a      	ldr	r2, [r3, #16]
 8011542:	3202      	adds	r2, #2
 8011544:	f103 010c 	add.w	r1, r3, #12
 8011548:	0092      	lsls	r2, r2, #2
 801154a:	300c      	adds	r0, #12
 801154c:	f7fe f893 	bl	800f676 <memcpy>
 8011550:	ec4b ab10 	vmov	d0, sl, fp
 8011554:	9805      	ldr	r0, [sp, #20]
 8011556:	aa1c      	add	r2, sp, #112	@ 0x70
 8011558:	a91b      	add	r1, sp, #108	@ 0x6c
 801155a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801155e:	f7ff fbcf 	bl	8010d00 <__d2b>
 8011562:	901a      	str	r0, [sp, #104]	@ 0x68
 8011564:	2800      	cmp	r0, #0
 8011566:	f43f aede 	beq.w	8011326 <_strtod_l+0x43e>
 801156a:	9805      	ldr	r0, [sp, #20]
 801156c:	2101      	movs	r1, #1
 801156e:	f7ff f921 	bl	80107b4 <__i2b>
 8011572:	4680      	mov	r8, r0
 8011574:	b948      	cbnz	r0, 801158a <_strtod_l+0x6a2>
 8011576:	f04f 0800 	mov.w	r8, #0
 801157a:	e6d4      	b.n	8011326 <_strtod_l+0x43e>
 801157c:	f04f 32ff 	mov.w	r2, #4294967295
 8011580:	fa02 f303 	lsl.w	r3, r2, r3
 8011584:	ea03 0a0a 	and.w	sl, r3, sl
 8011588:	e7b0      	b.n	80114ec <_strtod_l+0x604>
 801158a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801158c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801158e:	2d00      	cmp	r5, #0
 8011590:	bfab      	itete	ge
 8011592:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8011594:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8011596:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8011598:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801159a:	bfac      	ite	ge
 801159c:	18ef      	addge	r7, r5, r3
 801159e:	1b5e      	sublt	r6, r3, r5
 80115a0:	9b08      	ldr	r3, [sp, #32]
 80115a2:	1aed      	subs	r5, r5, r3
 80115a4:	4415      	add	r5, r2
 80115a6:	4b66      	ldr	r3, [pc, #408]	@ (8011740 <_strtod_l+0x858>)
 80115a8:	3d01      	subs	r5, #1
 80115aa:	429d      	cmp	r5, r3
 80115ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80115b0:	da50      	bge.n	8011654 <_strtod_l+0x76c>
 80115b2:	1b5b      	subs	r3, r3, r5
 80115b4:	2b1f      	cmp	r3, #31
 80115b6:	eba2 0203 	sub.w	r2, r2, r3
 80115ba:	f04f 0101 	mov.w	r1, #1
 80115be:	dc3d      	bgt.n	801163c <_strtod_l+0x754>
 80115c0:	fa01 f303 	lsl.w	r3, r1, r3
 80115c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80115c6:	2300      	movs	r3, #0
 80115c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80115ca:	18bd      	adds	r5, r7, r2
 80115cc:	9b08      	ldr	r3, [sp, #32]
 80115ce:	42af      	cmp	r7, r5
 80115d0:	4416      	add	r6, r2
 80115d2:	441e      	add	r6, r3
 80115d4:	463b      	mov	r3, r7
 80115d6:	bfa8      	it	ge
 80115d8:	462b      	movge	r3, r5
 80115da:	42b3      	cmp	r3, r6
 80115dc:	bfa8      	it	ge
 80115de:	4633      	movge	r3, r6
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	bfc2      	ittt	gt
 80115e4:	1aed      	subgt	r5, r5, r3
 80115e6:	1af6      	subgt	r6, r6, r3
 80115e8:	1aff      	subgt	r7, r7, r3
 80115ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	dd16      	ble.n	801161e <_strtod_l+0x736>
 80115f0:	4641      	mov	r1, r8
 80115f2:	9805      	ldr	r0, [sp, #20]
 80115f4:	461a      	mov	r2, r3
 80115f6:	f7ff f99d 	bl	8010934 <__pow5mult>
 80115fa:	4680      	mov	r8, r0
 80115fc:	2800      	cmp	r0, #0
 80115fe:	d0ba      	beq.n	8011576 <_strtod_l+0x68e>
 8011600:	4601      	mov	r1, r0
 8011602:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8011604:	9805      	ldr	r0, [sp, #20]
 8011606:	f7ff f8eb 	bl	80107e0 <__multiply>
 801160a:	900e      	str	r0, [sp, #56]	@ 0x38
 801160c:	2800      	cmp	r0, #0
 801160e:	f43f ae8a 	beq.w	8011326 <_strtod_l+0x43e>
 8011612:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011614:	9805      	ldr	r0, [sp, #20]
 8011616:	f7fe ffcf 	bl	80105b8 <_Bfree>
 801161a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801161c:	931a      	str	r3, [sp, #104]	@ 0x68
 801161e:	2d00      	cmp	r5, #0
 8011620:	dc1d      	bgt.n	801165e <_strtod_l+0x776>
 8011622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011624:	2b00      	cmp	r3, #0
 8011626:	dd23      	ble.n	8011670 <_strtod_l+0x788>
 8011628:	4649      	mov	r1, r9
 801162a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801162c:	9805      	ldr	r0, [sp, #20]
 801162e:	f7ff f981 	bl	8010934 <__pow5mult>
 8011632:	4681      	mov	r9, r0
 8011634:	b9e0      	cbnz	r0, 8011670 <_strtod_l+0x788>
 8011636:	f04f 0900 	mov.w	r9, #0
 801163a:	e674      	b.n	8011326 <_strtod_l+0x43e>
 801163c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8011640:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8011644:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8011648:	35e2      	adds	r5, #226	@ 0xe2
 801164a:	fa01 f305 	lsl.w	r3, r1, r5
 801164e:	9310      	str	r3, [sp, #64]	@ 0x40
 8011650:	9113      	str	r1, [sp, #76]	@ 0x4c
 8011652:	e7ba      	b.n	80115ca <_strtod_l+0x6e2>
 8011654:	2300      	movs	r3, #0
 8011656:	9310      	str	r3, [sp, #64]	@ 0x40
 8011658:	2301      	movs	r3, #1
 801165a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801165c:	e7b5      	b.n	80115ca <_strtod_l+0x6e2>
 801165e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8011660:	9805      	ldr	r0, [sp, #20]
 8011662:	462a      	mov	r2, r5
 8011664:	f7ff f9c0 	bl	80109e8 <__lshift>
 8011668:	901a      	str	r0, [sp, #104]	@ 0x68
 801166a:	2800      	cmp	r0, #0
 801166c:	d1d9      	bne.n	8011622 <_strtod_l+0x73a>
 801166e:	e65a      	b.n	8011326 <_strtod_l+0x43e>
 8011670:	2e00      	cmp	r6, #0
 8011672:	dd07      	ble.n	8011684 <_strtod_l+0x79c>
 8011674:	4649      	mov	r1, r9
 8011676:	9805      	ldr	r0, [sp, #20]
 8011678:	4632      	mov	r2, r6
 801167a:	f7ff f9b5 	bl	80109e8 <__lshift>
 801167e:	4681      	mov	r9, r0
 8011680:	2800      	cmp	r0, #0
 8011682:	d0d8      	beq.n	8011636 <_strtod_l+0x74e>
 8011684:	2f00      	cmp	r7, #0
 8011686:	dd08      	ble.n	801169a <_strtod_l+0x7b2>
 8011688:	4641      	mov	r1, r8
 801168a:	9805      	ldr	r0, [sp, #20]
 801168c:	463a      	mov	r2, r7
 801168e:	f7ff f9ab 	bl	80109e8 <__lshift>
 8011692:	4680      	mov	r8, r0
 8011694:	2800      	cmp	r0, #0
 8011696:	f43f ae46 	beq.w	8011326 <_strtod_l+0x43e>
 801169a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801169c:	9805      	ldr	r0, [sp, #20]
 801169e:	464a      	mov	r2, r9
 80116a0:	f7ff fa2a 	bl	8010af8 <__mdiff>
 80116a4:	4604      	mov	r4, r0
 80116a6:	2800      	cmp	r0, #0
 80116a8:	f43f ae3d 	beq.w	8011326 <_strtod_l+0x43e>
 80116ac:	68c3      	ldr	r3, [r0, #12]
 80116ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80116b0:	2300      	movs	r3, #0
 80116b2:	60c3      	str	r3, [r0, #12]
 80116b4:	4641      	mov	r1, r8
 80116b6:	f7ff fa03 	bl	8010ac0 <__mcmp>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	da46      	bge.n	801174c <_strtod_l+0x864>
 80116be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80116c0:	ea53 030a 	orrs.w	r3, r3, sl
 80116c4:	d16c      	bne.n	80117a0 <_strtod_l+0x8b8>
 80116c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d168      	bne.n	80117a0 <_strtod_l+0x8b8>
 80116ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80116d2:	0d1b      	lsrs	r3, r3, #20
 80116d4:	051b      	lsls	r3, r3, #20
 80116d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80116da:	d961      	bls.n	80117a0 <_strtod_l+0x8b8>
 80116dc:	6963      	ldr	r3, [r4, #20]
 80116de:	b913      	cbnz	r3, 80116e6 <_strtod_l+0x7fe>
 80116e0:	6923      	ldr	r3, [r4, #16]
 80116e2:	2b01      	cmp	r3, #1
 80116e4:	dd5c      	ble.n	80117a0 <_strtod_l+0x8b8>
 80116e6:	4621      	mov	r1, r4
 80116e8:	2201      	movs	r2, #1
 80116ea:	9805      	ldr	r0, [sp, #20]
 80116ec:	f7ff f97c 	bl	80109e8 <__lshift>
 80116f0:	4641      	mov	r1, r8
 80116f2:	4604      	mov	r4, r0
 80116f4:	f7ff f9e4 	bl	8010ac0 <__mcmp>
 80116f8:	2800      	cmp	r0, #0
 80116fa:	dd51      	ble.n	80117a0 <_strtod_l+0x8b8>
 80116fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011700:	9a08      	ldr	r2, [sp, #32]
 8011702:	0d1b      	lsrs	r3, r3, #20
 8011704:	051b      	lsls	r3, r3, #20
 8011706:	2a00      	cmp	r2, #0
 8011708:	d06b      	beq.n	80117e2 <_strtod_l+0x8fa>
 801170a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801170e:	d868      	bhi.n	80117e2 <_strtod_l+0x8fa>
 8011710:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8011714:	f67f ae9d 	bls.w	8011452 <_strtod_l+0x56a>
 8011718:	4b0a      	ldr	r3, [pc, #40]	@ (8011744 <_strtod_l+0x85c>)
 801171a:	4650      	mov	r0, sl
 801171c:	4659      	mov	r1, fp
 801171e:	2200      	movs	r2, #0
 8011720:	f7ee ff8a 	bl	8000638 <__aeabi_dmul>
 8011724:	4b08      	ldr	r3, [pc, #32]	@ (8011748 <_strtod_l+0x860>)
 8011726:	400b      	ands	r3, r1
 8011728:	4682      	mov	sl, r0
 801172a:	468b      	mov	fp, r1
 801172c:	2b00      	cmp	r3, #0
 801172e:	f47f ae05 	bne.w	801133c <_strtod_l+0x454>
 8011732:	9a05      	ldr	r2, [sp, #20]
 8011734:	2322      	movs	r3, #34	@ 0x22
 8011736:	6013      	str	r3, [r2, #0]
 8011738:	e600      	b.n	801133c <_strtod_l+0x454>
 801173a:	bf00      	nop
 801173c:	080133d0 	.word	0x080133d0
 8011740:	fffffc02 	.word	0xfffffc02
 8011744:	39500000 	.word	0x39500000
 8011748:	7ff00000 	.word	0x7ff00000
 801174c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011750:	d165      	bne.n	801181e <_strtod_l+0x936>
 8011752:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8011754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011758:	b35a      	cbz	r2, 80117b2 <_strtod_l+0x8ca>
 801175a:	4a9f      	ldr	r2, [pc, #636]	@ (80119d8 <_strtod_l+0xaf0>)
 801175c:	4293      	cmp	r3, r2
 801175e:	d12b      	bne.n	80117b8 <_strtod_l+0x8d0>
 8011760:	9b08      	ldr	r3, [sp, #32]
 8011762:	4651      	mov	r1, sl
 8011764:	b303      	cbz	r3, 80117a8 <_strtod_l+0x8c0>
 8011766:	4b9d      	ldr	r3, [pc, #628]	@ (80119dc <_strtod_l+0xaf4>)
 8011768:	465a      	mov	r2, fp
 801176a:	4013      	ands	r3, r2
 801176c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8011770:	f04f 32ff 	mov.w	r2, #4294967295
 8011774:	d81b      	bhi.n	80117ae <_strtod_l+0x8c6>
 8011776:	0d1b      	lsrs	r3, r3, #20
 8011778:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801177c:	fa02 f303 	lsl.w	r3, r2, r3
 8011780:	4299      	cmp	r1, r3
 8011782:	d119      	bne.n	80117b8 <_strtod_l+0x8d0>
 8011784:	4b96      	ldr	r3, [pc, #600]	@ (80119e0 <_strtod_l+0xaf8>)
 8011786:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011788:	429a      	cmp	r2, r3
 801178a:	d102      	bne.n	8011792 <_strtod_l+0x8aa>
 801178c:	3101      	adds	r1, #1
 801178e:	f43f adca 	beq.w	8011326 <_strtod_l+0x43e>
 8011792:	4b92      	ldr	r3, [pc, #584]	@ (80119dc <_strtod_l+0xaf4>)
 8011794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011796:	401a      	ands	r2, r3
 8011798:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801179c:	f04f 0a00 	mov.w	sl, #0
 80117a0:	9b08      	ldr	r3, [sp, #32]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d1b8      	bne.n	8011718 <_strtod_l+0x830>
 80117a6:	e5c9      	b.n	801133c <_strtod_l+0x454>
 80117a8:	f04f 33ff 	mov.w	r3, #4294967295
 80117ac:	e7e8      	b.n	8011780 <_strtod_l+0x898>
 80117ae:	4613      	mov	r3, r2
 80117b0:	e7e6      	b.n	8011780 <_strtod_l+0x898>
 80117b2:	ea53 030a 	orrs.w	r3, r3, sl
 80117b6:	d0a1      	beq.n	80116fc <_strtod_l+0x814>
 80117b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80117ba:	b1db      	cbz	r3, 80117f4 <_strtod_l+0x90c>
 80117bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80117be:	4213      	tst	r3, r2
 80117c0:	d0ee      	beq.n	80117a0 <_strtod_l+0x8b8>
 80117c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80117c4:	9a08      	ldr	r2, [sp, #32]
 80117c6:	4650      	mov	r0, sl
 80117c8:	4659      	mov	r1, fp
 80117ca:	b1bb      	cbz	r3, 80117fc <_strtod_l+0x914>
 80117cc:	f7ff fb6e 	bl	8010eac <sulp>
 80117d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80117d4:	ec53 2b10 	vmov	r2, r3, d0
 80117d8:	f7ee fd78 	bl	80002cc <__adddf3>
 80117dc:	4682      	mov	sl, r0
 80117de:	468b      	mov	fp, r1
 80117e0:	e7de      	b.n	80117a0 <_strtod_l+0x8b8>
 80117e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80117e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80117ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80117ee:	f04f 3aff 	mov.w	sl, #4294967295
 80117f2:	e7d5      	b.n	80117a0 <_strtod_l+0x8b8>
 80117f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80117f6:	ea13 0f0a 	tst.w	r3, sl
 80117fa:	e7e1      	b.n	80117c0 <_strtod_l+0x8d8>
 80117fc:	f7ff fb56 	bl	8010eac <sulp>
 8011800:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011804:	ec53 2b10 	vmov	r2, r3, d0
 8011808:	f7ee fd5e 	bl	80002c8 <__aeabi_dsub>
 801180c:	2200      	movs	r2, #0
 801180e:	2300      	movs	r3, #0
 8011810:	4682      	mov	sl, r0
 8011812:	468b      	mov	fp, r1
 8011814:	f7ef f978 	bl	8000b08 <__aeabi_dcmpeq>
 8011818:	2800      	cmp	r0, #0
 801181a:	d0c1      	beq.n	80117a0 <_strtod_l+0x8b8>
 801181c:	e619      	b.n	8011452 <_strtod_l+0x56a>
 801181e:	4641      	mov	r1, r8
 8011820:	4620      	mov	r0, r4
 8011822:	f7ff fac5 	bl	8010db0 <__ratio>
 8011826:	ec57 6b10 	vmov	r6, r7, d0
 801182a:	2200      	movs	r2, #0
 801182c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011830:	4630      	mov	r0, r6
 8011832:	4639      	mov	r1, r7
 8011834:	f7ef f97c 	bl	8000b30 <__aeabi_dcmple>
 8011838:	2800      	cmp	r0, #0
 801183a:	d06f      	beq.n	801191c <_strtod_l+0xa34>
 801183c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801183e:	2b00      	cmp	r3, #0
 8011840:	d17a      	bne.n	8011938 <_strtod_l+0xa50>
 8011842:	f1ba 0f00 	cmp.w	sl, #0
 8011846:	d158      	bne.n	80118fa <_strtod_l+0xa12>
 8011848:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801184a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801184e:	2b00      	cmp	r3, #0
 8011850:	d15a      	bne.n	8011908 <_strtod_l+0xa20>
 8011852:	4b64      	ldr	r3, [pc, #400]	@ (80119e4 <_strtod_l+0xafc>)
 8011854:	2200      	movs	r2, #0
 8011856:	4630      	mov	r0, r6
 8011858:	4639      	mov	r1, r7
 801185a:	f7ef f95f 	bl	8000b1c <__aeabi_dcmplt>
 801185e:	2800      	cmp	r0, #0
 8011860:	d159      	bne.n	8011916 <_strtod_l+0xa2e>
 8011862:	4630      	mov	r0, r6
 8011864:	4639      	mov	r1, r7
 8011866:	4b60      	ldr	r3, [pc, #384]	@ (80119e8 <_strtod_l+0xb00>)
 8011868:	2200      	movs	r2, #0
 801186a:	f7ee fee5 	bl	8000638 <__aeabi_dmul>
 801186e:	4606      	mov	r6, r0
 8011870:	460f      	mov	r7, r1
 8011872:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8011876:	9606      	str	r6, [sp, #24]
 8011878:	9307      	str	r3, [sp, #28]
 801187a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801187e:	4d57      	ldr	r5, [pc, #348]	@ (80119dc <_strtod_l+0xaf4>)
 8011880:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011886:	401d      	ands	r5, r3
 8011888:	4b58      	ldr	r3, [pc, #352]	@ (80119ec <_strtod_l+0xb04>)
 801188a:	429d      	cmp	r5, r3
 801188c:	f040 80b2 	bne.w	80119f4 <_strtod_l+0xb0c>
 8011890:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011892:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8011896:	ec4b ab10 	vmov	d0, sl, fp
 801189a:	f7ff f9c1 	bl	8010c20 <__ulp>
 801189e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80118a2:	ec51 0b10 	vmov	r0, r1, d0
 80118a6:	f7ee fec7 	bl	8000638 <__aeabi_dmul>
 80118aa:	4652      	mov	r2, sl
 80118ac:	465b      	mov	r3, fp
 80118ae:	f7ee fd0d 	bl	80002cc <__adddf3>
 80118b2:	460b      	mov	r3, r1
 80118b4:	4949      	ldr	r1, [pc, #292]	@ (80119dc <_strtod_l+0xaf4>)
 80118b6:	4a4e      	ldr	r2, [pc, #312]	@ (80119f0 <_strtod_l+0xb08>)
 80118b8:	4019      	ands	r1, r3
 80118ba:	4291      	cmp	r1, r2
 80118bc:	4682      	mov	sl, r0
 80118be:	d942      	bls.n	8011946 <_strtod_l+0xa5e>
 80118c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80118c2:	4b47      	ldr	r3, [pc, #284]	@ (80119e0 <_strtod_l+0xaf8>)
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d103      	bne.n	80118d0 <_strtod_l+0x9e8>
 80118c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118ca:	3301      	adds	r3, #1
 80118cc:	f43f ad2b 	beq.w	8011326 <_strtod_l+0x43e>
 80118d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80119e0 <_strtod_l+0xaf8>
 80118d4:	f04f 3aff 	mov.w	sl, #4294967295
 80118d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80118da:	9805      	ldr	r0, [sp, #20]
 80118dc:	f7fe fe6c 	bl	80105b8 <_Bfree>
 80118e0:	9805      	ldr	r0, [sp, #20]
 80118e2:	4649      	mov	r1, r9
 80118e4:	f7fe fe68 	bl	80105b8 <_Bfree>
 80118e8:	9805      	ldr	r0, [sp, #20]
 80118ea:	4641      	mov	r1, r8
 80118ec:	f7fe fe64 	bl	80105b8 <_Bfree>
 80118f0:	9805      	ldr	r0, [sp, #20]
 80118f2:	4621      	mov	r1, r4
 80118f4:	f7fe fe60 	bl	80105b8 <_Bfree>
 80118f8:	e618      	b.n	801152c <_strtod_l+0x644>
 80118fa:	f1ba 0f01 	cmp.w	sl, #1
 80118fe:	d103      	bne.n	8011908 <_strtod_l+0xa20>
 8011900:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011902:	2b00      	cmp	r3, #0
 8011904:	f43f ada5 	beq.w	8011452 <_strtod_l+0x56a>
 8011908:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80119b8 <_strtod_l+0xad0>
 801190c:	4f35      	ldr	r7, [pc, #212]	@ (80119e4 <_strtod_l+0xafc>)
 801190e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011912:	2600      	movs	r6, #0
 8011914:	e7b1      	b.n	801187a <_strtod_l+0x992>
 8011916:	4f34      	ldr	r7, [pc, #208]	@ (80119e8 <_strtod_l+0xb00>)
 8011918:	2600      	movs	r6, #0
 801191a:	e7aa      	b.n	8011872 <_strtod_l+0x98a>
 801191c:	4b32      	ldr	r3, [pc, #200]	@ (80119e8 <_strtod_l+0xb00>)
 801191e:	4630      	mov	r0, r6
 8011920:	4639      	mov	r1, r7
 8011922:	2200      	movs	r2, #0
 8011924:	f7ee fe88 	bl	8000638 <__aeabi_dmul>
 8011928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801192a:	4606      	mov	r6, r0
 801192c:	460f      	mov	r7, r1
 801192e:	2b00      	cmp	r3, #0
 8011930:	d09f      	beq.n	8011872 <_strtod_l+0x98a>
 8011932:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011936:	e7a0      	b.n	801187a <_strtod_l+0x992>
 8011938:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80119c0 <_strtod_l+0xad8>
 801193c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011940:	ec57 6b17 	vmov	r6, r7, d7
 8011944:	e799      	b.n	801187a <_strtod_l+0x992>
 8011946:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801194a:	9b08      	ldr	r3, [sp, #32]
 801194c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8011950:	2b00      	cmp	r3, #0
 8011952:	d1c1      	bne.n	80118d8 <_strtod_l+0x9f0>
 8011954:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8011958:	0d1b      	lsrs	r3, r3, #20
 801195a:	051b      	lsls	r3, r3, #20
 801195c:	429d      	cmp	r5, r3
 801195e:	d1bb      	bne.n	80118d8 <_strtod_l+0x9f0>
 8011960:	4630      	mov	r0, r6
 8011962:	4639      	mov	r1, r7
 8011964:	f7ef f9c8 	bl	8000cf8 <__aeabi_d2lz>
 8011968:	f7ee fe38 	bl	80005dc <__aeabi_l2d>
 801196c:	4602      	mov	r2, r0
 801196e:	460b      	mov	r3, r1
 8011970:	4630      	mov	r0, r6
 8011972:	4639      	mov	r1, r7
 8011974:	f7ee fca8 	bl	80002c8 <__aeabi_dsub>
 8011978:	460b      	mov	r3, r1
 801197a:	4602      	mov	r2, r0
 801197c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8011980:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8011984:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011986:	ea46 060a 	orr.w	r6, r6, sl
 801198a:	431e      	orrs	r6, r3
 801198c:	d06f      	beq.n	8011a6e <_strtod_l+0xb86>
 801198e:	a30e      	add	r3, pc, #56	@ (adr r3, 80119c8 <_strtod_l+0xae0>)
 8011990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011994:	f7ef f8c2 	bl	8000b1c <__aeabi_dcmplt>
 8011998:	2800      	cmp	r0, #0
 801199a:	f47f accf 	bne.w	801133c <_strtod_l+0x454>
 801199e:	a30c      	add	r3, pc, #48	@ (adr r3, 80119d0 <_strtod_l+0xae8>)
 80119a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80119a8:	f7ef f8d6 	bl	8000b58 <__aeabi_dcmpgt>
 80119ac:	2800      	cmp	r0, #0
 80119ae:	d093      	beq.n	80118d8 <_strtod_l+0x9f0>
 80119b0:	e4c4      	b.n	801133c <_strtod_l+0x454>
 80119b2:	bf00      	nop
 80119b4:	f3af 8000 	nop.w
 80119b8:	00000000 	.word	0x00000000
 80119bc:	bff00000 	.word	0xbff00000
 80119c0:	00000000 	.word	0x00000000
 80119c4:	3ff00000 	.word	0x3ff00000
 80119c8:	94a03595 	.word	0x94a03595
 80119cc:	3fdfffff 	.word	0x3fdfffff
 80119d0:	35afe535 	.word	0x35afe535
 80119d4:	3fe00000 	.word	0x3fe00000
 80119d8:	000fffff 	.word	0x000fffff
 80119dc:	7ff00000 	.word	0x7ff00000
 80119e0:	7fefffff 	.word	0x7fefffff
 80119e4:	3ff00000 	.word	0x3ff00000
 80119e8:	3fe00000 	.word	0x3fe00000
 80119ec:	7fe00000 	.word	0x7fe00000
 80119f0:	7c9fffff 	.word	0x7c9fffff
 80119f4:	9b08      	ldr	r3, [sp, #32]
 80119f6:	b323      	cbz	r3, 8011a42 <_strtod_l+0xb5a>
 80119f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80119fc:	d821      	bhi.n	8011a42 <_strtod_l+0xb5a>
 80119fe:	a328      	add	r3, pc, #160	@ (adr r3, 8011aa0 <_strtod_l+0xbb8>)
 8011a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a04:	4630      	mov	r0, r6
 8011a06:	4639      	mov	r1, r7
 8011a08:	f7ef f892 	bl	8000b30 <__aeabi_dcmple>
 8011a0c:	b1a0      	cbz	r0, 8011a38 <_strtod_l+0xb50>
 8011a0e:	4639      	mov	r1, r7
 8011a10:	4630      	mov	r0, r6
 8011a12:	f7ef f8e9 	bl	8000be8 <__aeabi_d2uiz>
 8011a16:	2801      	cmp	r0, #1
 8011a18:	bf38      	it	cc
 8011a1a:	2001      	movcc	r0, #1
 8011a1c:	f7ee fd92 	bl	8000544 <__aeabi_ui2d>
 8011a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011a22:	4606      	mov	r6, r0
 8011a24:	460f      	mov	r7, r1
 8011a26:	b9fb      	cbnz	r3, 8011a68 <_strtod_l+0xb80>
 8011a28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8011a2c:	9014      	str	r0, [sp, #80]	@ 0x50
 8011a2e:	9315      	str	r3, [sp, #84]	@ 0x54
 8011a30:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8011a34:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8011a38:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8011a3a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8011a3e:	1b5b      	subs	r3, r3, r5
 8011a40:	9311      	str	r3, [sp, #68]	@ 0x44
 8011a42:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8011a46:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8011a4a:	f7ff f8e9 	bl	8010c20 <__ulp>
 8011a4e:	4650      	mov	r0, sl
 8011a50:	ec53 2b10 	vmov	r2, r3, d0
 8011a54:	4659      	mov	r1, fp
 8011a56:	f7ee fdef 	bl	8000638 <__aeabi_dmul>
 8011a5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8011a5e:	f7ee fc35 	bl	80002cc <__adddf3>
 8011a62:	4682      	mov	sl, r0
 8011a64:	468b      	mov	fp, r1
 8011a66:	e770      	b.n	801194a <_strtod_l+0xa62>
 8011a68:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8011a6c:	e7e0      	b.n	8011a30 <_strtod_l+0xb48>
 8011a6e:	a30e      	add	r3, pc, #56	@ (adr r3, 8011aa8 <_strtod_l+0xbc0>)
 8011a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a74:	f7ef f852 	bl	8000b1c <__aeabi_dcmplt>
 8011a78:	e798      	b.n	80119ac <_strtod_l+0xac4>
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a7e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8011a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8011a82:	6013      	str	r3, [r2, #0]
 8011a84:	f7ff ba6d 	b.w	8010f62 <_strtod_l+0x7a>
 8011a88:	2a65      	cmp	r2, #101	@ 0x65
 8011a8a:	f43f ab66 	beq.w	801115a <_strtod_l+0x272>
 8011a8e:	2a45      	cmp	r2, #69	@ 0x45
 8011a90:	f43f ab63 	beq.w	801115a <_strtod_l+0x272>
 8011a94:	2301      	movs	r3, #1
 8011a96:	f7ff bb9e 	b.w	80111d6 <_strtod_l+0x2ee>
 8011a9a:	bf00      	nop
 8011a9c:	f3af 8000 	nop.w
 8011aa0:	ffc00000 	.word	0xffc00000
 8011aa4:	41dfffff 	.word	0x41dfffff
 8011aa8:	94a03595 	.word	0x94a03595
 8011aac:	3fcfffff 	.word	0x3fcfffff

08011ab0 <_strtod_r>:
 8011ab0:	4b01      	ldr	r3, [pc, #4]	@ (8011ab8 <_strtod_r+0x8>)
 8011ab2:	f7ff ba19 	b.w	8010ee8 <_strtod_l>
 8011ab6:	bf00      	nop
 8011ab8:	2000007c 	.word	0x2000007c

08011abc <_strtol_l.constprop.0>:
 8011abc:	2b24      	cmp	r3, #36	@ 0x24
 8011abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ac2:	4686      	mov	lr, r0
 8011ac4:	4690      	mov	r8, r2
 8011ac6:	d801      	bhi.n	8011acc <_strtol_l.constprop.0+0x10>
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d106      	bne.n	8011ada <_strtol_l.constprop.0+0x1e>
 8011acc:	f7fd fda6 	bl	800f61c <__errno>
 8011ad0:	2316      	movs	r3, #22
 8011ad2:	6003      	str	r3, [r0, #0]
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ada:	4834      	ldr	r0, [pc, #208]	@ (8011bac <_strtol_l.constprop.0+0xf0>)
 8011adc:	460d      	mov	r5, r1
 8011ade:	462a      	mov	r2, r5
 8011ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011ae4:	5d06      	ldrb	r6, [r0, r4]
 8011ae6:	f016 0608 	ands.w	r6, r6, #8
 8011aea:	d1f8      	bne.n	8011ade <_strtol_l.constprop.0+0x22>
 8011aec:	2c2d      	cmp	r4, #45	@ 0x2d
 8011aee:	d12d      	bne.n	8011b4c <_strtol_l.constprop.0+0x90>
 8011af0:	782c      	ldrb	r4, [r5, #0]
 8011af2:	2601      	movs	r6, #1
 8011af4:	1c95      	adds	r5, r2, #2
 8011af6:	f033 0210 	bics.w	r2, r3, #16
 8011afa:	d109      	bne.n	8011b10 <_strtol_l.constprop.0+0x54>
 8011afc:	2c30      	cmp	r4, #48	@ 0x30
 8011afe:	d12a      	bne.n	8011b56 <_strtol_l.constprop.0+0x9a>
 8011b00:	782a      	ldrb	r2, [r5, #0]
 8011b02:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8011b06:	2a58      	cmp	r2, #88	@ 0x58
 8011b08:	d125      	bne.n	8011b56 <_strtol_l.constprop.0+0x9a>
 8011b0a:	786c      	ldrb	r4, [r5, #1]
 8011b0c:	2310      	movs	r3, #16
 8011b0e:	3502      	adds	r5, #2
 8011b10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8011b14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011b18:	2200      	movs	r2, #0
 8011b1a:	fbbc f9f3 	udiv	r9, ip, r3
 8011b1e:	4610      	mov	r0, r2
 8011b20:	fb03 ca19 	mls	sl, r3, r9, ip
 8011b24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8011b28:	2f09      	cmp	r7, #9
 8011b2a:	d81b      	bhi.n	8011b64 <_strtol_l.constprop.0+0xa8>
 8011b2c:	463c      	mov	r4, r7
 8011b2e:	42a3      	cmp	r3, r4
 8011b30:	dd27      	ble.n	8011b82 <_strtol_l.constprop.0+0xc6>
 8011b32:	1c57      	adds	r7, r2, #1
 8011b34:	d007      	beq.n	8011b46 <_strtol_l.constprop.0+0x8a>
 8011b36:	4581      	cmp	r9, r0
 8011b38:	d320      	bcc.n	8011b7c <_strtol_l.constprop.0+0xc0>
 8011b3a:	d101      	bne.n	8011b40 <_strtol_l.constprop.0+0x84>
 8011b3c:	45a2      	cmp	sl, r4
 8011b3e:	db1d      	blt.n	8011b7c <_strtol_l.constprop.0+0xc0>
 8011b40:	fb00 4003 	mla	r0, r0, r3, r4
 8011b44:	2201      	movs	r2, #1
 8011b46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011b4a:	e7eb      	b.n	8011b24 <_strtol_l.constprop.0+0x68>
 8011b4c:	2c2b      	cmp	r4, #43	@ 0x2b
 8011b4e:	bf04      	itt	eq
 8011b50:	782c      	ldrbeq	r4, [r5, #0]
 8011b52:	1c95      	addeq	r5, r2, #2
 8011b54:	e7cf      	b.n	8011af6 <_strtol_l.constprop.0+0x3a>
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d1da      	bne.n	8011b10 <_strtol_l.constprop.0+0x54>
 8011b5a:	2c30      	cmp	r4, #48	@ 0x30
 8011b5c:	bf0c      	ite	eq
 8011b5e:	2308      	moveq	r3, #8
 8011b60:	230a      	movne	r3, #10
 8011b62:	e7d5      	b.n	8011b10 <_strtol_l.constprop.0+0x54>
 8011b64:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8011b68:	2f19      	cmp	r7, #25
 8011b6a:	d801      	bhi.n	8011b70 <_strtol_l.constprop.0+0xb4>
 8011b6c:	3c37      	subs	r4, #55	@ 0x37
 8011b6e:	e7de      	b.n	8011b2e <_strtol_l.constprop.0+0x72>
 8011b70:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8011b74:	2f19      	cmp	r7, #25
 8011b76:	d804      	bhi.n	8011b82 <_strtol_l.constprop.0+0xc6>
 8011b78:	3c57      	subs	r4, #87	@ 0x57
 8011b7a:	e7d8      	b.n	8011b2e <_strtol_l.constprop.0+0x72>
 8011b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b80:	e7e1      	b.n	8011b46 <_strtol_l.constprop.0+0x8a>
 8011b82:	1c53      	adds	r3, r2, #1
 8011b84:	d108      	bne.n	8011b98 <_strtol_l.constprop.0+0xdc>
 8011b86:	2322      	movs	r3, #34	@ 0x22
 8011b88:	f8ce 3000 	str.w	r3, [lr]
 8011b8c:	4660      	mov	r0, ip
 8011b8e:	f1b8 0f00 	cmp.w	r8, #0
 8011b92:	d0a0      	beq.n	8011ad6 <_strtol_l.constprop.0+0x1a>
 8011b94:	1e69      	subs	r1, r5, #1
 8011b96:	e006      	b.n	8011ba6 <_strtol_l.constprop.0+0xea>
 8011b98:	b106      	cbz	r6, 8011b9c <_strtol_l.constprop.0+0xe0>
 8011b9a:	4240      	negs	r0, r0
 8011b9c:	f1b8 0f00 	cmp.w	r8, #0
 8011ba0:	d099      	beq.n	8011ad6 <_strtol_l.constprop.0+0x1a>
 8011ba2:	2a00      	cmp	r2, #0
 8011ba4:	d1f6      	bne.n	8011b94 <_strtol_l.constprop.0+0xd8>
 8011ba6:	f8c8 1000 	str.w	r1, [r8]
 8011baa:	e794      	b.n	8011ad6 <_strtol_l.constprop.0+0x1a>
 8011bac:	080133f9 	.word	0x080133f9

08011bb0 <_strtol_r>:
 8011bb0:	f7ff bf84 	b.w	8011abc <_strtol_l.constprop.0>

08011bb4 <__ssputs_r>:
 8011bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bb8:	688e      	ldr	r6, [r1, #8]
 8011bba:	461f      	mov	r7, r3
 8011bbc:	42be      	cmp	r6, r7
 8011bbe:	680b      	ldr	r3, [r1, #0]
 8011bc0:	4682      	mov	sl, r0
 8011bc2:	460c      	mov	r4, r1
 8011bc4:	4690      	mov	r8, r2
 8011bc6:	d82d      	bhi.n	8011c24 <__ssputs_r+0x70>
 8011bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011bcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011bd0:	d026      	beq.n	8011c20 <__ssputs_r+0x6c>
 8011bd2:	6965      	ldr	r5, [r4, #20]
 8011bd4:	6909      	ldr	r1, [r1, #16]
 8011bd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011bda:	eba3 0901 	sub.w	r9, r3, r1
 8011bde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011be2:	1c7b      	adds	r3, r7, #1
 8011be4:	444b      	add	r3, r9
 8011be6:	106d      	asrs	r5, r5, #1
 8011be8:	429d      	cmp	r5, r3
 8011bea:	bf38      	it	cc
 8011bec:	461d      	movcc	r5, r3
 8011bee:	0553      	lsls	r3, r2, #21
 8011bf0:	d527      	bpl.n	8011c42 <__ssputs_r+0x8e>
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	f7fe fc14 	bl	8010420 <_malloc_r>
 8011bf8:	4606      	mov	r6, r0
 8011bfa:	b360      	cbz	r0, 8011c56 <__ssputs_r+0xa2>
 8011bfc:	6921      	ldr	r1, [r4, #16]
 8011bfe:	464a      	mov	r2, r9
 8011c00:	f7fd fd39 	bl	800f676 <memcpy>
 8011c04:	89a3      	ldrh	r3, [r4, #12]
 8011c06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011c0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c0e:	81a3      	strh	r3, [r4, #12]
 8011c10:	6126      	str	r6, [r4, #16]
 8011c12:	6165      	str	r5, [r4, #20]
 8011c14:	444e      	add	r6, r9
 8011c16:	eba5 0509 	sub.w	r5, r5, r9
 8011c1a:	6026      	str	r6, [r4, #0]
 8011c1c:	60a5      	str	r5, [r4, #8]
 8011c1e:	463e      	mov	r6, r7
 8011c20:	42be      	cmp	r6, r7
 8011c22:	d900      	bls.n	8011c26 <__ssputs_r+0x72>
 8011c24:	463e      	mov	r6, r7
 8011c26:	6820      	ldr	r0, [r4, #0]
 8011c28:	4632      	mov	r2, r6
 8011c2a:	4641      	mov	r1, r8
 8011c2c:	f000 f9c6 	bl	8011fbc <memmove>
 8011c30:	68a3      	ldr	r3, [r4, #8]
 8011c32:	1b9b      	subs	r3, r3, r6
 8011c34:	60a3      	str	r3, [r4, #8]
 8011c36:	6823      	ldr	r3, [r4, #0]
 8011c38:	4433      	add	r3, r6
 8011c3a:	6023      	str	r3, [r4, #0]
 8011c3c:	2000      	movs	r0, #0
 8011c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c42:	462a      	mov	r2, r5
 8011c44:	f7fc fcd8 	bl	800e5f8 <_realloc_r>
 8011c48:	4606      	mov	r6, r0
 8011c4a:	2800      	cmp	r0, #0
 8011c4c:	d1e0      	bne.n	8011c10 <__ssputs_r+0x5c>
 8011c4e:	6921      	ldr	r1, [r4, #16]
 8011c50:	4650      	mov	r0, sl
 8011c52:	f7fe fb71 	bl	8010338 <_free_r>
 8011c56:	230c      	movs	r3, #12
 8011c58:	f8ca 3000 	str.w	r3, [sl]
 8011c5c:	89a3      	ldrh	r3, [r4, #12]
 8011c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c62:	81a3      	strh	r3, [r4, #12]
 8011c64:	f04f 30ff 	mov.w	r0, #4294967295
 8011c68:	e7e9      	b.n	8011c3e <__ssputs_r+0x8a>
	...

08011c6c <_svfiprintf_r>:
 8011c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	4698      	mov	r8, r3
 8011c72:	898b      	ldrh	r3, [r1, #12]
 8011c74:	061b      	lsls	r3, r3, #24
 8011c76:	b09d      	sub	sp, #116	@ 0x74
 8011c78:	4607      	mov	r7, r0
 8011c7a:	460d      	mov	r5, r1
 8011c7c:	4614      	mov	r4, r2
 8011c7e:	d510      	bpl.n	8011ca2 <_svfiprintf_r+0x36>
 8011c80:	690b      	ldr	r3, [r1, #16]
 8011c82:	b973      	cbnz	r3, 8011ca2 <_svfiprintf_r+0x36>
 8011c84:	2140      	movs	r1, #64	@ 0x40
 8011c86:	f7fe fbcb 	bl	8010420 <_malloc_r>
 8011c8a:	6028      	str	r0, [r5, #0]
 8011c8c:	6128      	str	r0, [r5, #16]
 8011c8e:	b930      	cbnz	r0, 8011c9e <_svfiprintf_r+0x32>
 8011c90:	230c      	movs	r3, #12
 8011c92:	603b      	str	r3, [r7, #0]
 8011c94:	f04f 30ff 	mov.w	r0, #4294967295
 8011c98:	b01d      	add	sp, #116	@ 0x74
 8011c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c9e:	2340      	movs	r3, #64	@ 0x40
 8011ca0:	616b      	str	r3, [r5, #20]
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011ca6:	2320      	movs	r3, #32
 8011ca8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011cac:	f8cd 800c 	str.w	r8, [sp, #12]
 8011cb0:	2330      	movs	r3, #48	@ 0x30
 8011cb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011e50 <_svfiprintf_r+0x1e4>
 8011cb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011cba:	f04f 0901 	mov.w	r9, #1
 8011cbe:	4623      	mov	r3, r4
 8011cc0:	469a      	mov	sl, r3
 8011cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011cc6:	b10a      	cbz	r2, 8011ccc <_svfiprintf_r+0x60>
 8011cc8:	2a25      	cmp	r2, #37	@ 0x25
 8011cca:	d1f9      	bne.n	8011cc0 <_svfiprintf_r+0x54>
 8011ccc:	ebba 0b04 	subs.w	fp, sl, r4
 8011cd0:	d00b      	beq.n	8011cea <_svfiprintf_r+0x7e>
 8011cd2:	465b      	mov	r3, fp
 8011cd4:	4622      	mov	r2, r4
 8011cd6:	4629      	mov	r1, r5
 8011cd8:	4638      	mov	r0, r7
 8011cda:	f7ff ff6b 	bl	8011bb4 <__ssputs_r>
 8011cde:	3001      	adds	r0, #1
 8011ce0:	f000 80a7 	beq.w	8011e32 <_svfiprintf_r+0x1c6>
 8011ce4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ce6:	445a      	add	r2, fp
 8011ce8:	9209      	str	r2, [sp, #36]	@ 0x24
 8011cea:	f89a 3000 	ldrb.w	r3, [sl]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	f000 809f 	beq.w	8011e32 <_svfiprintf_r+0x1c6>
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8011cfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011cfe:	f10a 0a01 	add.w	sl, sl, #1
 8011d02:	9304      	str	r3, [sp, #16]
 8011d04:	9307      	str	r3, [sp, #28]
 8011d06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011d0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8011d0c:	4654      	mov	r4, sl
 8011d0e:	2205      	movs	r2, #5
 8011d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d14:	484e      	ldr	r0, [pc, #312]	@ (8011e50 <_svfiprintf_r+0x1e4>)
 8011d16:	f7ee fa7b 	bl	8000210 <memchr>
 8011d1a:	9a04      	ldr	r2, [sp, #16]
 8011d1c:	b9d8      	cbnz	r0, 8011d56 <_svfiprintf_r+0xea>
 8011d1e:	06d0      	lsls	r0, r2, #27
 8011d20:	bf44      	itt	mi
 8011d22:	2320      	movmi	r3, #32
 8011d24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d28:	0711      	lsls	r1, r2, #28
 8011d2a:	bf44      	itt	mi
 8011d2c:	232b      	movmi	r3, #43	@ 0x2b
 8011d2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011d32:	f89a 3000 	ldrb.w	r3, [sl]
 8011d36:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d38:	d015      	beq.n	8011d66 <_svfiprintf_r+0xfa>
 8011d3a:	9a07      	ldr	r2, [sp, #28]
 8011d3c:	4654      	mov	r4, sl
 8011d3e:	2000      	movs	r0, #0
 8011d40:	f04f 0c0a 	mov.w	ip, #10
 8011d44:	4621      	mov	r1, r4
 8011d46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d4a:	3b30      	subs	r3, #48	@ 0x30
 8011d4c:	2b09      	cmp	r3, #9
 8011d4e:	d94b      	bls.n	8011de8 <_svfiprintf_r+0x17c>
 8011d50:	b1b0      	cbz	r0, 8011d80 <_svfiprintf_r+0x114>
 8011d52:	9207      	str	r2, [sp, #28]
 8011d54:	e014      	b.n	8011d80 <_svfiprintf_r+0x114>
 8011d56:	eba0 0308 	sub.w	r3, r0, r8
 8011d5a:	fa09 f303 	lsl.w	r3, r9, r3
 8011d5e:	4313      	orrs	r3, r2
 8011d60:	9304      	str	r3, [sp, #16]
 8011d62:	46a2      	mov	sl, r4
 8011d64:	e7d2      	b.n	8011d0c <_svfiprintf_r+0xa0>
 8011d66:	9b03      	ldr	r3, [sp, #12]
 8011d68:	1d19      	adds	r1, r3, #4
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	9103      	str	r1, [sp, #12]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	bfbb      	ittet	lt
 8011d72:	425b      	neglt	r3, r3
 8011d74:	f042 0202 	orrlt.w	r2, r2, #2
 8011d78:	9307      	strge	r3, [sp, #28]
 8011d7a:	9307      	strlt	r3, [sp, #28]
 8011d7c:	bfb8      	it	lt
 8011d7e:	9204      	strlt	r2, [sp, #16]
 8011d80:	7823      	ldrb	r3, [r4, #0]
 8011d82:	2b2e      	cmp	r3, #46	@ 0x2e
 8011d84:	d10a      	bne.n	8011d9c <_svfiprintf_r+0x130>
 8011d86:	7863      	ldrb	r3, [r4, #1]
 8011d88:	2b2a      	cmp	r3, #42	@ 0x2a
 8011d8a:	d132      	bne.n	8011df2 <_svfiprintf_r+0x186>
 8011d8c:	9b03      	ldr	r3, [sp, #12]
 8011d8e:	1d1a      	adds	r2, r3, #4
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	9203      	str	r2, [sp, #12]
 8011d94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011d98:	3402      	adds	r4, #2
 8011d9a:	9305      	str	r3, [sp, #20]
 8011d9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8011e60 <_svfiprintf_r+0x1f4>
 8011da0:	7821      	ldrb	r1, [r4, #0]
 8011da2:	2203      	movs	r2, #3
 8011da4:	4650      	mov	r0, sl
 8011da6:	f7ee fa33 	bl	8000210 <memchr>
 8011daa:	b138      	cbz	r0, 8011dbc <_svfiprintf_r+0x150>
 8011dac:	9b04      	ldr	r3, [sp, #16]
 8011dae:	eba0 000a 	sub.w	r0, r0, sl
 8011db2:	2240      	movs	r2, #64	@ 0x40
 8011db4:	4082      	lsls	r2, r0
 8011db6:	4313      	orrs	r3, r2
 8011db8:	3401      	adds	r4, #1
 8011dba:	9304      	str	r3, [sp, #16]
 8011dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dc0:	4824      	ldr	r0, [pc, #144]	@ (8011e54 <_svfiprintf_r+0x1e8>)
 8011dc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011dc6:	2206      	movs	r2, #6
 8011dc8:	f7ee fa22 	bl	8000210 <memchr>
 8011dcc:	2800      	cmp	r0, #0
 8011dce:	d036      	beq.n	8011e3e <_svfiprintf_r+0x1d2>
 8011dd0:	4b21      	ldr	r3, [pc, #132]	@ (8011e58 <_svfiprintf_r+0x1ec>)
 8011dd2:	bb1b      	cbnz	r3, 8011e1c <_svfiprintf_r+0x1b0>
 8011dd4:	9b03      	ldr	r3, [sp, #12]
 8011dd6:	3307      	adds	r3, #7
 8011dd8:	f023 0307 	bic.w	r3, r3, #7
 8011ddc:	3308      	adds	r3, #8
 8011dde:	9303      	str	r3, [sp, #12]
 8011de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011de2:	4433      	add	r3, r6
 8011de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011de6:	e76a      	b.n	8011cbe <_svfiprintf_r+0x52>
 8011de8:	fb0c 3202 	mla	r2, ip, r2, r3
 8011dec:	460c      	mov	r4, r1
 8011dee:	2001      	movs	r0, #1
 8011df0:	e7a8      	b.n	8011d44 <_svfiprintf_r+0xd8>
 8011df2:	2300      	movs	r3, #0
 8011df4:	3401      	adds	r4, #1
 8011df6:	9305      	str	r3, [sp, #20]
 8011df8:	4619      	mov	r1, r3
 8011dfa:	f04f 0c0a 	mov.w	ip, #10
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e04:	3a30      	subs	r2, #48	@ 0x30
 8011e06:	2a09      	cmp	r2, #9
 8011e08:	d903      	bls.n	8011e12 <_svfiprintf_r+0x1a6>
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d0c6      	beq.n	8011d9c <_svfiprintf_r+0x130>
 8011e0e:	9105      	str	r1, [sp, #20]
 8011e10:	e7c4      	b.n	8011d9c <_svfiprintf_r+0x130>
 8011e12:	fb0c 2101 	mla	r1, ip, r1, r2
 8011e16:	4604      	mov	r4, r0
 8011e18:	2301      	movs	r3, #1
 8011e1a:	e7f0      	b.n	8011dfe <_svfiprintf_r+0x192>
 8011e1c:	ab03      	add	r3, sp, #12
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	462a      	mov	r2, r5
 8011e22:	4b0e      	ldr	r3, [pc, #56]	@ (8011e5c <_svfiprintf_r+0x1f0>)
 8011e24:	a904      	add	r1, sp, #16
 8011e26:	4638      	mov	r0, r7
 8011e28:	f7fc fcb4 	bl	800e794 <_printf_float>
 8011e2c:	1c42      	adds	r2, r0, #1
 8011e2e:	4606      	mov	r6, r0
 8011e30:	d1d6      	bne.n	8011de0 <_svfiprintf_r+0x174>
 8011e32:	89ab      	ldrh	r3, [r5, #12]
 8011e34:	065b      	lsls	r3, r3, #25
 8011e36:	f53f af2d 	bmi.w	8011c94 <_svfiprintf_r+0x28>
 8011e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011e3c:	e72c      	b.n	8011c98 <_svfiprintf_r+0x2c>
 8011e3e:	ab03      	add	r3, sp, #12
 8011e40:	9300      	str	r3, [sp, #0]
 8011e42:	462a      	mov	r2, r5
 8011e44:	4b05      	ldr	r3, [pc, #20]	@ (8011e5c <_svfiprintf_r+0x1f0>)
 8011e46:	a904      	add	r1, sp, #16
 8011e48:	4638      	mov	r0, r7
 8011e4a:	f7fc ff3b 	bl	800ecc4 <_printf_i>
 8011e4e:	e7ed      	b.n	8011e2c <_svfiprintf_r+0x1c0>
 8011e50:	080134f9 	.word	0x080134f9
 8011e54:	08013503 	.word	0x08013503
 8011e58:	0800e795 	.word	0x0800e795
 8011e5c:	08011bb5 	.word	0x08011bb5
 8011e60:	080134ff 	.word	0x080134ff

08011e64 <__sflush_r>:
 8011e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e6c:	0716      	lsls	r6, r2, #28
 8011e6e:	4605      	mov	r5, r0
 8011e70:	460c      	mov	r4, r1
 8011e72:	d454      	bmi.n	8011f1e <__sflush_r+0xba>
 8011e74:	684b      	ldr	r3, [r1, #4]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	dc02      	bgt.n	8011e80 <__sflush_r+0x1c>
 8011e7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	dd48      	ble.n	8011f12 <__sflush_r+0xae>
 8011e80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e82:	2e00      	cmp	r6, #0
 8011e84:	d045      	beq.n	8011f12 <__sflush_r+0xae>
 8011e86:	2300      	movs	r3, #0
 8011e88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011e8c:	682f      	ldr	r7, [r5, #0]
 8011e8e:	6a21      	ldr	r1, [r4, #32]
 8011e90:	602b      	str	r3, [r5, #0]
 8011e92:	d030      	beq.n	8011ef6 <__sflush_r+0x92>
 8011e94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011e96:	89a3      	ldrh	r3, [r4, #12]
 8011e98:	0759      	lsls	r1, r3, #29
 8011e9a:	d505      	bpl.n	8011ea8 <__sflush_r+0x44>
 8011e9c:	6863      	ldr	r3, [r4, #4]
 8011e9e:	1ad2      	subs	r2, r2, r3
 8011ea0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ea2:	b10b      	cbz	r3, 8011ea8 <__sflush_r+0x44>
 8011ea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ea6:	1ad2      	subs	r2, r2, r3
 8011ea8:	2300      	movs	r3, #0
 8011eaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011eac:	6a21      	ldr	r1, [r4, #32]
 8011eae:	4628      	mov	r0, r5
 8011eb0:	47b0      	blx	r6
 8011eb2:	1c43      	adds	r3, r0, #1
 8011eb4:	89a3      	ldrh	r3, [r4, #12]
 8011eb6:	d106      	bne.n	8011ec6 <__sflush_r+0x62>
 8011eb8:	6829      	ldr	r1, [r5, #0]
 8011eba:	291d      	cmp	r1, #29
 8011ebc:	d82b      	bhi.n	8011f16 <__sflush_r+0xb2>
 8011ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8011f68 <__sflush_r+0x104>)
 8011ec0:	410a      	asrs	r2, r1
 8011ec2:	07d6      	lsls	r6, r2, #31
 8011ec4:	d427      	bmi.n	8011f16 <__sflush_r+0xb2>
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	6062      	str	r2, [r4, #4]
 8011eca:	04d9      	lsls	r1, r3, #19
 8011ecc:	6922      	ldr	r2, [r4, #16]
 8011ece:	6022      	str	r2, [r4, #0]
 8011ed0:	d504      	bpl.n	8011edc <__sflush_r+0x78>
 8011ed2:	1c42      	adds	r2, r0, #1
 8011ed4:	d101      	bne.n	8011eda <__sflush_r+0x76>
 8011ed6:	682b      	ldr	r3, [r5, #0]
 8011ed8:	b903      	cbnz	r3, 8011edc <__sflush_r+0x78>
 8011eda:	6560      	str	r0, [r4, #84]	@ 0x54
 8011edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ede:	602f      	str	r7, [r5, #0]
 8011ee0:	b1b9      	cbz	r1, 8011f12 <__sflush_r+0xae>
 8011ee2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ee6:	4299      	cmp	r1, r3
 8011ee8:	d002      	beq.n	8011ef0 <__sflush_r+0x8c>
 8011eea:	4628      	mov	r0, r5
 8011eec:	f7fe fa24 	bl	8010338 <_free_r>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	6363      	str	r3, [r4, #52]	@ 0x34
 8011ef4:	e00d      	b.n	8011f12 <__sflush_r+0xae>
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	4628      	mov	r0, r5
 8011efa:	47b0      	blx	r6
 8011efc:	4602      	mov	r2, r0
 8011efe:	1c50      	adds	r0, r2, #1
 8011f00:	d1c9      	bne.n	8011e96 <__sflush_r+0x32>
 8011f02:	682b      	ldr	r3, [r5, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d0c6      	beq.n	8011e96 <__sflush_r+0x32>
 8011f08:	2b1d      	cmp	r3, #29
 8011f0a:	d001      	beq.n	8011f10 <__sflush_r+0xac>
 8011f0c:	2b16      	cmp	r3, #22
 8011f0e:	d11e      	bne.n	8011f4e <__sflush_r+0xea>
 8011f10:	602f      	str	r7, [r5, #0]
 8011f12:	2000      	movs	r0, #0
 8011f14:	e022      	b.n	8011f5c <__sflush_r+0xf8>
 8011f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f1a:	b21b      	sxth	r3, r3
 8011f1c:	e01b      	b.n	8011f56 <__sflush_r+0xf2>
 8011f1e:	690f      	ldr	r7, [r1, #16]
 8011f20:	2f00      	cmp	r7, #0
 8011f22:	d0f6      	beq.n	8011f12 <__sflush_r+0xae>
 8011f24:	0793      	lsls	r3, r2, #30
 8011f26:	680e      	ldr	r6, [r1, #0]
 8011f28:	bf08      	it	eq
 8011f2a:	694b      	ldreq	r3, [r1, #20]
 8011f2c:	600f      	str	r7, [r1, #0]
 8011f2e:	bf18      	it	ne
 8011f30:	2300      	movne	r3, #0
 8011f32:	eba6 0807 	sub.w	r8, r6, r7
 8011f36:	608b      	str	r3, [r1, #8]
 8011f38:	f1b8 0f00 	cmp.w	r8, #0
 8011f3c:	dde9      	ble.n	8011f12 <__sflush_r+0xae>
 8011f3e:	6a21      	ldr	r1, [r4, #32]
 8011f40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011f42:	4643      	mov	r3, r8
 8011f44:	463a      	mov	r2, r7
 8011f46:	4628      	mov	r0, r5
 8011f48:	47b0      	blx	r6
 8011f4a:	2800      	cmp	r0, #0
 8011f4c:	dc08      	bgt.n	8011f60 <__sflush_r+0xfc>
 8011f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f56:	81a3      	strh	r3, [r4, #12]
 8011f58:	f04f 30ff 	mov.w	r0, #4294967295
 8011f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f60:	4407      	add	r7, r0
 8011f62:	eba8 0800 	sub.w	r8, r8, r0
 8011f66:	e7e7      	b.n	8011f38 <__sflush_r+0xd4>
 8011f68:	dfbffffe 	.word	0xdfbffffe

08011f6c <_fflush_r>:
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	690b      	ldr	r3, [r1, #16]
 8011f70:	4605      	mov	r5, r0
 8011f72:	460c      	mov	r4, r1
 8011f74:	b913      	cbnz	r3, 8011f7c <_fflush_r+0x10>
 8011f76:	2500      	movs	r5, #0
 8011f78:	4628      	mov	r0, r5
 8011f7a:	bd38      	pop	{r3, r4, r5, pc}
 8011f7c:	b118      	cbz	r0, 8011f86 <_fflush_r+0x1a>
 8011f7e:	6a03      	ldr	r3, [r0, #32]
 8011f80:	b90b      	cbnz	r3, 8011f86 <_fflush_r+0x1a>
 8011f82:	f7fd fa5f 	bl	800f444 <__sinit>
 8011f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d0f3      	beq.n	8011f76 <_fflush_r+0xa>
 8011f8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011f90:	07d0      	lsls	r0, r2, #31
 8011f92:	d404      	bmi.n	8011f9e <_fflush_r+0x32>
 8011f94:	0599      	lsls	r1, r3, #22
 8011f96:	d402      	bmi.n	8011f9e <_fflush_r+0x32>
 8011f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f9a:	f7fd fb6a 	bl	800f672 <__retarget_lock_acquire_recursive>
 8011f9e:	4628      	mov	r0, r5
 8011fa0:	4621      	mov	r1, r4
 8011fa2:	f7ff ff5f 	bl	8011e64 <__sflush_r>
 8011fa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011fa8:	07da      	lsls	r2, r3, #31
 8011faa:	4605      	mov	r5, r0
 8011fac:	d4e4      	bmi.n	8011f78 <_fflush_r+0xc>
 8011fae:	89a3      	ldrh	r3, [r4, #12]
 8011fb0:	059b      	lsls	r3, r3, #22
 8011fb2:	d4e1      	bmi.n	8011f78 <_fflush_r+0xc>
 8011fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011fb6:	f7fd fb5d 	bl	800f674 <__retarget_lock_release_recursive>
 8011fba:	e7dd      	b.n	8011f78 <_fflush_r+0xc>

08011fbc <memmove>:
 8011fbc:	4288      	cmp	r0, r1
 8011fbe:	b510      	push	{r4, lr}
 8011fc0:	eb01 0402 	add.w	r4, r1, r2
 8011fc4:	d902      	bls.n	8011fcc <memmove+0x10>
 8011fc6:	4284      	cmp	r4, r0
 8011fc8:	4623      	mov	r3, r4
 8011fca:	d807      	bhi.n	8011fdc <memmove+0x20>
 8011fcc:	1e43      	subs	r3, r0, #1
 8011fce:	42a1      	cmp	r1, r4
 8011fd0:	d008      	beq.n	8011fe4 <memmove+0x28>
 8011fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011fda:	e7f8      	b.n	8011fce <memmove+0x12>
 8011fdc:	4402      	add	r2, r0
 8011fde:	4601      	mov	r1, r0
 8011fe0:	428a      	cmp	r2, r1
 8011fe2:	d100      	bne.n	8011fe6 <memmove+0x2a>
 8011fe4:	bd10      	pop	{r4, pc}
 8011fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011fee:	e7f7      	b.n	8011fe0 <memmove+0x24>

08011ff0 <strncmp>:
 8011ff0:	b510      	push	{r4, lr}
 8011ff2:	b16a      	cbz	r2, 8012010 <strncmp+0x20>
 8011ff4:	3901      	subs	r1, #1
 8011ff6:	1884      	adds	r4, r0, r2
 8011ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011ffc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012000:	429a      	cmp	r2, r3
 8012002:	d103      	bne.n	801200c <strncmp+0x1c>
 8012004:	42a0      	cmp	r0, r4
 8012006:	d001      	beq.n	801200c <strncmp+0x1c>
 8012008:	2a00      	cmp	r2, #0
 801200a:	d1f5      	bne.n	8011ff8 <strncmp+0x8>
 801200c:	1ad0      	subs	r0, r2, r3
 801200e:	bd10      	pop	{r4, pc}
 8012010:	4610      	mov	r0, r2
 8012012:	e7fc      	b.n	801200e <strncmp+0x1e>

08012014 <_sbrk_r>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	4d06      	ldr	r5, [pc, #24]	@ (8012030 <_sbrk_r+0x1c>)
 8012018:	2300      	movs	r3, #0
 801201a:	4604      	mov	r4, r0
 801201c:	4608      	mov	r0, r1
 801201e:	602b      	str	r3, [r5, #0]
 8012020:	f7f6 fe8c 	bl	8008d3c <_sbrk>
 8012024:	1c43      	adds	r3, r0, #1
 8012026:	d102      	bne.n	801202e <_sbrk_r+0x1a>
 8012028:	682b      	ldr	r3, [r5, #0]
 801202a:	b103      	cbz	r3, 801202e <_sbrk_r+0x1a>
 801202c:	6023      	str	r3, [r4, #0]
 801202e:	bd38      	pop	{r3, r4, r5, pc}
 8012030:	200013a4 	.word	0x200013a4
 8012034:	00000000 	.word	0x00000000

08012038 <nan>:
 8012038:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8012040 <nan+0x8>
 801203c:	4770      	bx	lr
 801203e:	bf00      	nop
 8012040:	00000000 	.word	0x00000000
 8012044:	7ff80000 	.word	0x7ff80000

08012048 <__assert_func>:
 8012048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801204a:	4614      	mov	r4, r2
 801204c:	461a      	mov	r2, r3
 801204e:	4b09      	ldr	r3, [pc, #36]	@ (8012074 <__assert_func+0x2c>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	4605      	mov	r5, r0
 8012054:	68d8      	ldr	r0, [r3, #12]
 8012056:	b954      	cbnz	r4, 801206e <__assert_func+0x26>
 8012058:	4b07      	ldr	r3, [pc, #28]	@ (8012078 <__assert_func+0x30>)
 801205a:	461c      	mov	r4, r3
 801205c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8012060:	9100      	str	r1, [sp, #0]
 8012062:	462b      	mov	r3, r5
 8012064:	4905      	ldr	r1, [pc, #20]	@ (801207c <__assert_func+0x34>)
 8012066:	f000 fb79 	bl	801275c <fiprintf>
 801206a:	f000 fb89 	bl	8012780 <abort>
 801206e:	4b04      	ldr	r3, [pc, #16]	@ (8012080 <__assert_func+0x38>)
 8012070:	e7f4      	b.n	801205c <__assert_func+0x14>
 8012072:	bf00      	nop
 8012074:	2000002c 	.word	0x2000002c
 8012078:	0801354d 	.word	0x0801354d
 801207c:	0801351f 	.word	0x0801351f
 8012080:	08013512 	.word	0x08013512

08012084 <_calloc_r>:
 8012084:	b570      	push	{r4, r5, r6, lr}
 8012086:	fba1 5402 	umull	r5, r4, r1, r2
 801208a:	b93c      	cbnz	r4, 801209c <_calloc_r+0x18>
 801208c:	4629      	mov	r1, r5
 801208e:	f7fe f9c7 	bl	8010420 <_malloc_r>
 8012092:	4606      	mov	r6, r0
 8012094:	b928      	cbnz	r0, 80120a2 <_calloc_r+0x1e>
 8012096:	2600      	movs	r6, #0
 8012098:	4630      	mov	r0, r6
 801209a:	bd70      	pop	{r4, r5, r6, pc}
 801209c:	220c      	movs	r2, #12
 801209e:	6002      	str	r2, [r0, #0]
 80120a0:	e7f9      	b.n	8012096 <_calloc_r+0x12>
 80120a2:	462a      	mov	r2, r5
 80120a4:	4621      	mov	r1, r4
 80120a6:	f7fd fa66 	bl	800f576 <memset>
 80120aa:	e7f5      	b.n	8012098 <_calloc_r+0x14>

080120ac <rshift>:
 80120ac:	6903      	ldr	r3, [r0, #16]
 80120ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80120b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80120b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80120ba:	f100 0414 	add.w	r4, r0, #20
 80120be:	dd45      	ble.n	801214c <rshift+0xa0>
 80120c0:	f011 011f 	ands.w	r1, r1, #31
 80120c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80120c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80120cc:	d10c      	bne.n	80120e8 <rshift+0x3c>
 80120ce:	f100 0710 	add.w	r7, r0, #16
 80120d2:	4629      	mov	r1, r5
 80120d4:	42b1      	cmp	r1, r6
 80120d6:	d334      	bcc.n	8012142 <rshift+0x96>
 80120d8:	1a9b      	subs	r3, r3, r2
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	1eea      	subs	r2, r5, #3
 80120de:	4296      	cmp	r6, r2
 80120e0:	bf38      	it	cc
 80120e2:	2300      	movcc	r3, #0
 80120e4:	4423      	add	r3, r4
 80120e6:	e015      	b.n	8012114 <rshift+0x68>
 80120e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80120ec:	f1c1 0820 	rsb	r8, r1, #32
 80120f0:	40cf      	lsrs	r7, r1
 80120f2:	f105 0e04 	add.w	lr, r5, #4
 80120f6:	46a1      	mov	r9, r4
 80120f8:	4576      	cmp	r6, lr
 80120fa:	46f4      	mov	ip, lr
 80120fc:	d815      	bhi.n	801212a <rshift+0x7e>
 80120fe:	1a9a      	subs	r2, r3, r2
 8012100:	0092      	lsls	r2, r2, #2
 8012102:	3a04      	subs	r2, #4
 8012104:	3501      	adds	r5, #1
 8012106:	42ae      	cmp	r6, r5
 8012108:	bf38      	it	cc
 801210a:	2200      	movcc	r2, #0
 801210c:	18a3      	adds	r3, r4, r2
 801210e:	50a7      	str	r7, [r4, r2]
 8012110:	b107      	cbz	r7, 8012114 <rshift+0x68>
 8012112:	3304      	adds	r3, #4
 8012114:	1b1a      	subs	r2, r3, r4
 8012116:	42a3      	cmp	r3, r4
 8012118:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801211c:	bf08      	it	eq
 801211e:	2300      	moveq	r3, #0
 8012120:	6102      	str	r2, [r0, #16]
 8012122:	bf08      	it	eq
 8012124:	6143      	streq	r3, [r0, #20]
 8012126:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801212a:	f8dc c000 	ldr.w	ip, [ip]
 801212e:	fa0c fc08 	lsl.w	ip, ip, r8
 8012132:	ea4c 0707 	orr.w	r7, ip, r7
 8012136:	f849 7b04 	str.w	r7, [r9], #4
 801213a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801213e:	40cf      	lsrs	r7, r1
 8012140:	e7da      	b.n	80120f8 <rshift+0x4c>
 8012142:	f851 cb04 	ldr.w	ip, [r1], #4
 8012146:	f847 cf04 	str.w	ip, [r7, #4]!
 801214a:	e7c3      	b.n	80120d4 <rshift+0x28>
 801214c:	4623      	mov	r3, r4
 801214e:	e7e1      	b.n	8012114 <rshift+0x68>

08012150 <__hexdig_fun>:
 8012150:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8012154:	2b09      	cmp	r3, #9
 8012156:	d802      	bhi.n	801215e <__hexdig_fun+0xe>
 8012158:	3820      	subs	r0, #32
 801215a:	b2c0      	uxtb	r0, r0
 801215c:	4770      	bx	lr
 801215e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8012162:	2b05      	cmp	r3, #5
 8012164:	d801      	bhi.n	801216a <__hexdig_fun+0x1a>
 8012166:	3847      	subs	r0, #71	@ 0x47
 8012168:	e7f7      	b.n	801215a <__hexdig_fun+0xa>
 801216a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801216e:	2b05      	cmp	r3, #5
 8012170:	d801      	bhi.n	8012176 <__hexdig_fun+0x26>
 8012172:	3827      	subs	r0, #39	@ 0x27
 8012174:	e7f1      	b.n	801215a <__hexdig_fun+0xa>
 8012176:	2000      	movs	r0, #0
 8012178:	4770      	bx	lr
	...

0801217c <__gethex>:
 801217c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012180:	b085      	sub	sp, #20
 8012182:	468a      	mov	sl, r1
 8012184:	9302      	str	r3, [sp, #8]
 8012186:	680b      	ldr	r3, [r1, #0]
 8012188:	9001      	str	r0, [sp, #4]
 801218a:	4690      	mov	r8, r2
 801218c:	1c9c      	adds	r4, r3, #2
 801218e:	46a1      	mov	r9, r4
 8012190:	f814 0b01 	ldrb.w	r0, [r4], #1
 8012194:	2830      	cmp	r0, #48	@ 0x30
 8012196:	d0fa      	beq.n	801218e <__gethex+0x12>
 8012198:	eba9 0303 	sub.w	r3, r9, r3
 801219c:	f1a3 0b02 	sub.w	fp, r3, #2
 80121a0:	f7ff ffd6 	bl	8012150 <__hexdig_fun>
 80121a4:	4605      	mov	r5, r0
 80121a6:	2800      	cmp	r0, #0
 80121a8:	d168      	bne.n	801227c <__gethex+0x100>
 80121aa:	49a0      	ldr	r1, [pc, #640]	@ (801242c <__gethex+0x2b0>)
 80121ac:	2201      	movs	r2, #1
 80121ae:	4648      	mov	r0, r9
 80121b0:	f7ff ff1e 	bl	8011ff0 <strncmp>
 80121b4:	4607      	mov	r7, r0
 80121b6:	2800      	cmp	r0, #0
 80121b8:	d167      	bne.n	801228a <__gethex+0x10e>
 80121ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80121be:	4626      	mov	r6, r4
 80121c0:	f7ff ffc6 	bl	8012150 <__hexdig_fun>
 80121c4:	2800      	cmp	r0, #0
 80121c6:	d062      	beq.n	801228e <__gethex+0x112>
 80121c8:	4623      	mov	r3, r4
 80121ca:	7818      	ldrb	r0, [r3, #0]
 80121cc:	2830      	cmp	r0, #48	@ 0x30
 80121ce:	4699      	mov	r9, r3
 80121d0:	f103 0301 	add.w	r3, r3, #1
 80121d4:	d0f9      	beq.n	80121ca <__gethex+0x4e>
 80121d6:	f7ff ffbb 	bl	8012150 <__hexdig_fun>
 80121da:	fab0 f580 	clz	r5, r0
 80121de:	096d      	lsrs	r5, r5, #5
 80121e0:	f04f 0b01 	mov.w	fp, #1
 80121e4:	464a      	mov	r2, r9
 80121e6:	4616      	mov	r6, r2
 80121e8:	3201      	adds	r2, #1
 80121ea:	7830      	ldrb	r0, [r6, #0]
 80121ec:	f7ff ffb0 	bl	8012150 <__hexdig_fun>
 80121f0:	2800      	cmp	r0, #0
 80121f2:	d1f8      	bne.n	80121e6 <__gethex+0x6a>
 80121f4:	498d      	ldr	r1, [pc, #564]	@ (801242c <__gethex+0x2b0>)
 80121f6:	2201      	movs	r2, #1
 80121f8:	4630      	mov	r0, r6
 80121fa:	f7ff fef9 	bl	8011ff0 <strncmp>
 80121fe:	2800      	cmp	r0, #0
 8012200:	d13f      	bne.n	8012282 <__gethex+0x106>
 8012202:	b944      	cbnz	r4, 8012216 <__gethex+0x9a>
 8012204:	1c74      	adds	r4, r6, #1
 8012206:	4622      	mov	r2, r4
 8012208:	4616      	mov	r6, r2
 801220a:	3201      	adds	r2, #1
 801220c:	7830      	ldrb	r0, [r6, #0]
 801220e:	f7ff ff9f 	bl	8012150 <__hexdig_fun>
 8012212:	2800      	cmp	r0, #0
 8012214:	d1f8      	bne.n	8012208 <__gethex+0x8c>
 8012216:	1ba4      	subs	r4, r4, r6
 8012218:	00a7      	lsls	r7, r4, #2
 801221a:	7833      	ldrb	r3, [r6, #0]
 801221c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8012220:	2b50      	cmp	r3, #80	@ 0x50
 8012222:	d13e      	bne.n	80122a2 <__gethex+0x126>
 8012224:	7873      	ldrb	r3, [r6, #1]
 8012226:	2b2b      	cmp	r3, #43	@ 0x2b
 8012228:	d033      	beq.n	8012292 <__gethex+0x116>
 801222a:	2b2d      	cmp	r3, #45	@ 0x2d
 801222c:	d034      	beq.n	8012298 <__gethex+0x11c>
 801222e:	1c71      	adds	r1, r6, #1
 8012230:	2400      	movs	r4, #0
 8012232:	7808      	ldrb	r0, [r1, #0]
 8012234:	f7ff ff8c 	bl	8012150 <__hexdig_fun>
 8012238:	1e43      	subs	r3, r0, #1
 801223a:	b2db      	uxtb	r3, r3
 801223c:	2b18      	cmp	r3, #24
 801223e:	d830      	bhi.n	80122a2 <__gethex+0x126>
 8012240:	f1a0 0210 	sub.w	r2, r0, #16
 8012244:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012248:	f7ff ff82 	bl	8012150 <__hexdig_fun>
 801224c:	f100 3cff 	add.w	ip, r0, #4294967295
 8012250:	fa5f fc8c 	uxtb.w	ip, ip
 8012254:	f1bc 0f18 	cmp.w	ip, #24
 8012258:	f04f 030a 	mov.w	r3, #10
 801225c:	d91e      	bls.n	801229c <__gethex+0x120>
 801225e:	b104      	cbz	r4, 8012262 <__gethex+0xe6>
 8012260:	4252      	negs	r2, r2
 8012262:	4417      	add	r7, r2
 8012264:	f8ca 1000 	str.w	r1, [sl]
 8012268:	b1ed      	cbz	r5, 80122a6 <__gethex+0x12a>
 801226a:	f1bb 0f00 	cmp.w	fp, #0
 801226e:	bf0c      	ite	eq
 8012270:	2506      	moveq	r5, #6
 8012272:	2500      	movne	r5, #0
 8012274:	4628      	mov	r0, r5
 8012276:	b005      	add	sp, #20
 8012278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801227c:	2500      	movs	r5, #0
 801227e:	462c      	mov	r4, r5
 8012280:	e7b0      	b.n	80121e4 <__gethex+0x68>
 8012282:	2c00      	cmp	r4, #0
 8012284:	d1c7      	bne.n	8012216 <__gethex+0x9a>
 8012286:	4627      	mov	r7, r4
 8012288:	e7c7      	b.n	801221a <__gethex+0x9e>
 801228a:	464e      	mov	r6, r9
 801228c:	462f      	mov	r7, r5
 801228e:	2501      	movs	r5, #1
 8012290:	e7c3      	b.n	801221a <__gethex+0x9e>
 8012292:	2400      	movs	r4, #0
 8012294:	1cb1      	adds	r1, r6, #2
 8012296:	e7cc      	b.n	8012232 <__gethex+0xb6>
 8012298:	2401      	movs	r4, #1
 801229a:	e7fb      	b.n	8012294 <__gethex+0x118>
 801229c:	fb03 0002 	mla	r0, r3, r2, r0
 80122a0:	e7ce      	b.n	8012240 <__gethex+0xc4>
 80122a2:	4631      	mov	r1, r6
 80122a4:	e7de      	b.n	8012264 <__gethex+0xe8>
 80122a6:	eba6 0309 	sub.w	r3, r6, r9
 80122aa:	3b01      	subs	r3, #1
 80122ac:	4629      	mov	r1, r5
 80122ae:	2b07      	cmp	r3, #7
 80122b0:	dc0a      	bgt.n	80122c8 <__gethex+0x14c>
 80122b2:	9801      	ldr	r0, [sp, #4]
 80122b4:	f7fe f940 	bl	8010538 <_Balloc>
 80122b8:	4604      	mov	r4, r0
 80122ba:	b940      	cbnz	r0, 80122ce <__gethex+0x152>
 80122bc:	4b5c      	ldr	r3, [pc, #368]	@ (8012430 <__gethex+0x2b4>)
 80122be:	4602      	mov	r2, r0
 80122c0:	21e4      	movs	r1, #228	@ 0xe4
 80122c2:	485c      	ldr	r0, [pc, #368]	@ (8012434 <__gethex+0x2b8>)
 80122c4:	f7ff fec0 	bl	8012048 <__assert_func>
 80122c8:	3101      	adds	r1, #1
 80122ca:	105b      	asrs	r3, r3, #1
 80122cc:	e7ef      	b.n	80122ae <__gethex+0x132>
 80122ce:	f100 0a14 	add.w	sl, r0, #20
 80122d2:	2300      	movs	r3, #0
 80122d4:	4655      	mov	r5, sl
 80122d6:	469b      	mov	fp, r3
 80122d8:	45b1      	cmp	r9, r6
 80122da:	d337      	bcc.n	801234c <__gethex+0x1d0>
 80122dc:	f845 bb04 	str.w	fp, [r5], #4
 80122e0:	eba5 050a 	sub.w	r5, r5, sl
 80122e4:	10ad      	asrs	r5, r5, #2
 80122e6:	6125      	str	r5, [r4, #16]
 80122e8:	4658      	mov	r0, fp
 80122ea:	f7fe fa17 	bl	801071c <__hi0bits>
 80122ee:	016d      	lsls	r5, r5, #5
 80122f0:	f8d8 6000 	ldr.w	r6, [r8]
 80122f4:	1a2d      	subs	r5, r5, r0
 80122f6:	42b5      	cmp	r5, r6
 80122f8:	dd54      	ble.n	80123a4 <__gethex+0x228>
 80122fa:	1bad      	subs	r5, r5, r6
 80122fc:	4629      	mov	r1, r5
 80122fe:	4620      	mov	r0, r4
 8012300:	f7fe fdab 	bl	8010e5a <__any_on>
 8012304:	4681      	mov	r9, r0
 8012306:	b178      	cbz	r0, 8012328 <__gethex+0x1ac>
 8012308:	1e6b      	subs	r3, r5, #1
 801230a:	1159      	asrs	r1, r3, #5
 801230c:	f003 021f 	and.w	r2, r3, #31
 8012310:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8012314:	f04f 0901 	mov.w	r9, #1
 8012318:	fa09 f202 	lsl.w	r2, r9, r2
 801231c:	420a      	tst	r2, r1
 801231e:	d003      	beq.n	8012328 <__gethex+0x1ac>
 8012320:	454b      	cmp	r3, r9
 8012322:	dc36      	bgt.n	8012392 <__gethex+0x216>
 8012324:	f04f 0902 	mov.w	r9, #2
 8012328:	4629      	mov	r1, r5
 801232a:	4620      	mov	r0, r4
 801232c:	f7ff febe 	bl	80120ac <rshift>
 8012330:	442f      	add	r7, r5
 8012332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012336:	42bb      	cmp	r3, r7
 8012338:	da42      	bge.n	80123c0 <__gethex+0x244>
 801233a:	9801      	ldr	r0, [sp, #4]
 801233c:	4621      	mov	r1, r4
 801233e:	f7fe f93b 	bl	80105b8 <_Bfree>
 8012342:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012344:	2300      	movs	r3, #0
 8012346:	6013      	str	r3, [r2, #0]
 8012348:	25a3      	movs	r5, #163	@ 0xa3
 801234a:	e793      	b.n	8012274 <__gethex+0xf8>
 801234c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8012350:	2a2e      	cmp	r2, #46	@ 0x2e
 8012352:	d012      	beq.n	801237a <__gethex+0x1fe>
 8012354:	2b20      	cmp	r3, #32
 8012356:	d104      	bne.n	8012362 <__gethex+0x1e6>
 8012358:	f845 bb04 	str.w	fp, [r5], #4
 801235c:	f04f 0b00 	mov.w	fp, #0
 8012360:	465b      	mov	r3, fp
 8012362:	7830      	ldrb	r0, [r6, #0]
 8012364:	9303      	str	r3, [sp, #12]
 8012366:	f7ff fef3 	bl	8012150 <__hexdig_fun>
 801236a:	9b03      	ldr	r3, [sp, #12]
 801236c:	f000 000f 	and.w	r0, r0, #15
 8012370:	4098      	lsls	r0, r3
 8012372:	ea4b 0b00 	orr.w	fp, fp, r0
 8012376:	3304      	adds	r3, #4
 8012378:	e7ae      	b.n	80122d8 <__gethex+0x15c>
 801237a:	45b1      	cmp	r9, r6
 801237c:	d8ea      	bhi.n	8012354 <__gethex+0x1d8>
 801237e:	492b      	ldr	r1, [pc, #172]	@ (801242c <__gethex+0x2b0>)
 8012380:	9303      	str	r3, [sp, #12]
 8012382:	2201      	movs	r2, #1
 8012384:	4630      	mov	r0, r6
 8012386:	f7ff fe33 	bl	8011ff0 <strncmp>
 801238a:	9b03      	ldr	r3, [sp, #12]
 801238c:	2800      	cmp	r0, #0
 801238e:	d1e1      	bne.n	8012354 <__gethex+0x1d8>
 8012390:	e7a2      	b.n	80122d8 <__gethex+0x15c>
 8012392:	1ea9      	subs	r1, r5, #2
 8012394:	4620      	mov	r0, r4
 8012396:	f7fe fd60 	bl	8010e5a <__any_on>
 801239a:	2800      	cmp	r0, #0
 801239c:	d0c2      	beq.n	8012324 <__gethex+0x1a8>
 801239e:	f04f 0903 	mov.w	r9, #3
 80123a2:	e7c1      	b.n	8012328 <__gethex+0x1ac>
 80123a4:	da09      	bge.n	80123ba <__gethex+0x23e>
 80123a6:	1b75      	subs	r5, r6, r5
 80123a8:	4621      	mov	r1, r4
 80123aa:	9801      	ldr	r0, [sp, #4]
 80123ac:	462a      	mov	r2, r5
 80123ae:	f7fe fb1b 	bl	80109e8 <__lshift>
 80123b2:	1b7f      	subs	r7, r7, r5
 80123b4:	4604      	mov	r4, r0
 80123b6:	f100 0a14 	add.w	sl, r0, #20
 80123ba:	f04f 0900 	mov.w	r9, #0
 80123be:	e7b8      	b.n	8012332 <__gethex+0x1b6>
 80123c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80123c4:	42bd      	cmp	r5, r7
 80123c6:	dd6f      	ble.n	80124a8 <__gethex+0x32c>
 80123c8:	1bed      	subs	r5, r5, r7
 80123ca:	42ae      	cmp	r6, r5
 80123cc:	dc34      	bgt.n	8012438 <__gethex+0x2bc>
 80123ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80123d2:	2b02      	cmp	r3, #2
 80123d4:	d022      	beq.n	801241c <__gethex+0x2a0>
 80123d6:	2b03      	cmp	r3, #3
 80123d8:	d024      	beq.n	8012424 <__gethex+0x2a8>
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d115      	bne.n	801240a <__gethex+0x28e>
 80123de:	42ae      	cmp	r6, r5
 80123e0:	d113      	bne.n	801240a <__gethex+0x28e>
 80123e2:	2e01      	cmp	r6, #1
 80123e4:	d10b      	bne.n	80123fe <__gethex+0x282>
 80123e6:	9a02      	ldr	r2, [sp, #8]
 80123e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80123ec:	6013      	str	r3, [r2, #0]
 80123ee:	2301      	movs	r3, #1
 80123f0:	6123      	str	r3, [r4, #16]
 80123f2:	f8ca 3000 	str.w	r3, [sl]
 80123f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123f8:	2562      	movs	r5, #98	@ 0x62
 80123fa:	601c      	str	r4, [r3, #0]
 80123fc:	e73a      	b.n	8012274 <__gethex+0xf8>
 80123fe:	1e71      	subs	r1, r6, #1
 8012400:	4620      	mov	r0, r4
 8012402:	f7fe fd2a 	bl	8010e5a <__any_on>
 8012406:	2800      	cmp	r0, #0
 8012408:	d1ed      	bne.n	80123e6 <__gethex+0x26a>
 801240a:	9801      	ldr	r0, [sp, #4]
 801240c:	4621      	mov	r1, r4
 801240e:	f7fe f8d3 	bl	80105b8 <_Bfree>
 8012412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012414:	2300      	movs	r3, #0
 8012416:	6013      	str	r3, [r2, #0]
 8012418:	2550      	movs	r5, #80	@ 0x50
 801241a:	e72b      	b.n	8012274 <__gethex+0xf8>
 801241c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801241e:	2b00      	cmp	r3, #0
 8012420:	d1f3      	bne.n	801240a <__gethex+0x28e>
 8012422:	e7e0      	b.n	80123e6 <__gethex+0x26a>
 8012424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012426:	2b00      	cmp	r3, #0
 8012428:	d1dd      	bne.n	80123e6 <__gethex+0x26a>
 801242a:	e7ee      	b.n	801240a <__gethex+0x28e>
 801242c:	080133a0 	.word	0x080133a0
 8012430:	08013235 	.word	0x08013235
 8012434:	0801354e 	.word	0x0801354e
 8012438:	1e6f      	subs	r7, r5, #1
 801243a:	f1b9 0f00 	cmp.w	r9, #0
 801243e:	d130      	bne.n	80124a2 <__gethex+0x326>
 8012440:	b127      	cbz	r7, 801244c <__gethex+0x2d0>
 8012442:	4639      	mov	r1, r7
 8012444:	4620      	mov	r0, r4
 8012446:	f7fe fd08 	bl	8010e5a <__any_on>
 801244a:	4681      	mov	r9, r0
 801244c:	117a      	asrs	r2, r7, #5
 801244e:	2301      	movs	r3, #1
 8012450:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012454:	f007 071f 	and.w	r7, r7, #31
 8012458:	40bb      	lsls	r3, r7
 801245a:	4213      	tst	r3, r2
 801245c:	4629      	mov	r1, r5
 801245e:	4620      	mov	r0, r4
 8012460:	bf18      	it	ne
 8012462:	f049 0902 	orrne.w	r9, r9, #2
 8012466:	f7ff fe21 	bl	80120ac <rshift>
 801246a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801246e:	1b76      	subs	r6, r6, r5
 8012470:	2502      	movs	r5, #2
 8012472:	f1b9 0f00 	cmp.w	r9, #0
 8012476:	d047      	beq.n	8012508 <__gethex+0x38c>
 8012478:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801247c:	2b02      	cmp	r3, #2
 801247e:	d015      	beq.n	80124ac <__gethex+0x330>
 8012480:	2b03      	cmp	r3, #3
 8012482:	d017      	beq.n	80124b4 <__gethex+0x338>
 8012484:	2b01      	cmp	r3, #1
 8012486:	d109      	bne.n	801249c <__gethex+0x320>
 8012488:	f019 0f02 	tst.w	r9, #2
 801248c:	d006      	beq.n	801249c <__gethex+0x320>
 801248e:	f8da 3000 	ldr.w	r3, [sl]
 8012492:	ea49 0903 	orr.w	r9, r9, r3
 8012496:	f019 0f01 	tst.w	r9, #1
 801249a:	d10e      	bne.n	80124ba <__gethex+0x33e>
 801249c:	f045 0510 	orr.w	r5, r5, #16
 80124a0:	e032      	b.n	8012508 <__gethex+0x38c>
 80124a2:	f04f 0901 	mov.w	r9, #1
 80124a6:	e7d1      	b.n	801244c <__gethex+0x2d0>
 80124a8:	2501      	movs	r5, #1
 80124aa:	e7e2      	b.n	8012472 <__gethex+0x2f6>
 80124ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124ae:	f1c3 0301 	rsb	r3, r3, #1
 80124b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80124b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d0f0      	beq.n	801249c <__gethex+0x320>
 80124ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80124be:	f104 0314 	add.w	r3, r4, #20
 80124c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80124c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80124ca:	f04f 0c00 	mov.w	ip, #0
 80124ce:	4618      	mov	r0, r3
 80124d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80124d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80124d8:	d01b      	beq.n	8012512 <__gethex+0x396>
 80124da:	3201      	adds	r2, #1
 80124dc:	6002      	str	r2, [r0, #0]
 80124de:	2d02      	cmp	r5, #2
 80124e0:	f104 0314 	add.w	r3, r4, #20
 80124e4:	d13c      	bne.n	8012560 <__gethex+0x3e4>
 80124e6:	f8d8 2000 	ldr.w	r2, [r8]
 80124ea:	3a01      	subs	r2, #1
 80124ec:	42b2      	cmp	r2, r6
 80124ee:	d109      	bne.n	8012504 <__gethex+0x388>
 80124f0:	1171      	asrs	r1, r6, #5
 80124f2:	2201      	movs	r2, #1
 80124f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80124f8:	f006 061f 	and.w	r6, r6, #31
 80124fc:	fa02 f606 	lsl.w	r6, r2, r6
 8012500:	421e      	tst	r6, r3
 8012502:	d13a      	bne.n	801257a <__gethex+0x3fe>
 8012504:	f045 0520 	orr.w	r5, r5, #32
 8012508:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801250a:	601c      	str	r4, [r3, #0]
 801250c:	9b02      	ldr	r3, [sp, #8]
 801250e:	601f      	str	r7, [r3, #0]
 8012510:	e6b0      	b.n	8012274 <__gethex+0xf8>
 8012512:	4299      	cmp	r1, r3
 8012514:	f843 cc04 	str.w	ip, [r3, #-4]
 8012518:	d8d9      	bhi.n	80124ce <__gethex+0x352>
 801251a:	68a3      	ldr	r3, [r4, #8]
 801251c:	459b      	cmp	fp, r3
 801251e:	db17      	blt.n	8012550 <__gethex+0x3d4>
 8012520:	6861      	ldr	r1, [r4, #4]
 8012522:	9801      	ldr	r0, [sp, #4]
 8012524:	3101      	adds	r1, #1
 8012526:	f7fe f807 	bl	8010538 <_Balloc>
 801252a:	4681      	mov	r9, r0
 801252c:	b918      	cbnz	r0, 8012536 <__gethex+0x3ba>
 801252e:	4b1a      	ldr	r3, [pc, #104]	@ (8012598 <__gethex+0x41c>)
 8012530:	4602      	mov	r2, r0
 8012532:	2184      	movs	r1, #132	@ 0x84
 8012534:	e6c5      	b.n	80122c2 <__gethex+0x146>
 8012536:	6922      	ldr	r2, [r4, #16]
 8012538:	3202      	adds	r2, #2
 801253a:	f104 010c 	add.w	r1, r4, #12
 801253e:	0092      	lsls	r2, r2, #2
 8012540:	300c      	adds	r0, #12
 8012542:	f7fd f898 	bl	800f676 <memcpy>
 8012546:	4621      	mov	r1, r4
 8012548:	9801      	ldr	r0, [sp, #4]
 801254a:	f7fe f835 	bl	80105b8 <_Bfree>
 801254e:	464c      	mov	r4, r9
 8012550:	6923      	ldr	r3, [r4, #16]
 8012552:	1c5a      	adds	r2, r3, #1
 8012554:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012558:	6122      	str	r2, [r4, #16]
 801255a:	2201      	movs	r2, #1
 801255c:	615a      	str	r2, [r3, #20]
 801255e:	e7be      	b.n	80124de <__gethex+0x362>
 8012560:	6922      	ldr	r2, [r4, #16]
 8012562:	455a      	cmp	r2, fp
 8012564:	dd0b      	ble.n	801257e <__gethex+0x402>
 8012566:	2101      	movs	r1, #1
 8012568:	4620      	mov	r0, r4
 801256a:	f7ff fd9f 	bl	80120ac <rshift>
 801256e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012572:	3701      	adds	r7, #1
 8012574:	42bb      	cmp	r3, r7
 8012576:	f6ff aee0 	blt.w	801233a <__gethex+0x1be>
 801257a:	2501      	movs	r5, #1
 801257c:	e7c2      	b.n	8012504 <__gethex+0x388>
 801257e:	f016 061f 	ands.w	r6, r6, #31
 8012582:	d0fa      	beq.n	801257a <__gethex+0x3fe>
 8012584:	4453      	add	r3, sl
 8012586:	f1c6 0620 	rsb	r6, r6, #32
 801258a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801258e:	f7fe f8c5 	bl	801071c <__hi0bits>
 8012592:	42b0      	cmp	r0, r6
 8012594:	dbe7      	blt.n	8012566 <__gethex+0x3ea>
 8012596:	e7f0      	b.n	801257a <__gethex+0x3fe>
 8012598:	08013235 	.word	0x08013235

0801259c <L_shift>:
 801259c:	f1c2 0208 	rsb	r2, r2, #8
 80125a0:	0092      	lsls	r2, r2, #2
 80125a2:	b570      	push	{r4, r5, r6, lr}
 80125a4:	f1c2 0620 	rsb	r6, r2, #32
 80125a8:	6843      	ldr	r3, [r0, #4]
 80125aa:	6804      	ldr	r4, [r0, #0]
 80125ac:	fa03 f506 	lsl.w	r5, r3, r6
 80125b0:	432c      	orrs	r4, r5
 80125b2:	40d3      	lsrs	r3, r2
 80125b4:	6004      	str	r4, [r0, #0]
 80125b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80125ba:	4288      	cmp	r0, r1
 80125bc:	d3f4      	bcc.n	80125a8 <L_shift+0xc>
 80125be:	bd70      	pop	{r4, r5, r6, pc}

080125c0 <__match>:
 80125c0:	b530      	push	{r4, r5, lr}
 80125c2:	6803      	ldr	r3, [r0, #0]
 80125c4:	3301      	adds	r3, #1
 80125c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125ca:	b914      	cbnz	r4, 80125d2 <__match+0x12>
 80125cc:	6003      	str	r3, [r0, #0]
 80125ce:	2001      	movs	r0, #1
 80125d0:	bd30      	pop	{r4, r5, pc}
 80125d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80125d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80125da:	2d19      	cmp	r5, #25
 80125dc:	bf98      	it	ls
 80125de:	3220      	addls	r2, #32
 80125e0:	42a2      	cmp	r2, r4
 80125e2:	d0f0      	beq.n	80125c6 <__match+0x6>
 80125e4:	2000      	movs	r0, #0
 80125e6:	e7f3      	b.n	80125d0 <__match+0x10>

080125e8 <__hexnan>:
 80125e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ec:	680b      	ldr	r3, [r1, #0]
 80125ee:	6801      	ldr	r1, [r0, #0]
 80125f0:	115e      	asrs	r6, r3, #5
 80125f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80125f6:	f013 031f 	ands.w	r3, r3, #31
 80125fa:	b087      	sub	sp, #28
 80125fc:	bf18      	it	ne
 80125fe:	3604      	addne	r6, #4
 8012600:	2500      	movs	r5, #0
 8012602:	1f37      	subs	r7, r6, #4
 8012604:	4682      	mov	sl, r0
 8012606:	4690      	mov	r8, r2
 8012608:	9301      	str	r3, [sp, #4]
 801260a:	f846 5c04 	str.w	r5, [r6, #-4]
 801260e:	46b9      	mov	r9, r7
 8012610:	463c      	mov	r4, r7
 8012612:	9502      	str	r5, [sp, #8]
 8012614:	46ab      	mov	fp, r5
 8012616:	784a      	ldrb	r2, [r1, #1]
 8012618:	1c4b      	adds	r3, r1, #1
 801261a:	9303      	str	r3, [sp, #12]
 801261c:	b342      	cbz	r2, 8012670 <__hexnan+0x88>
 801261e:	4610      	mov	r0, r2
 8012620:	9105      	str	r1, [sp, #20]
 8012622:	9204      	str	r2, [sp, #16]
 8012624:	f7ff fd94 	bl	8012150 <__hexdig_fun>
 8012628:	2800      	cmp	r0, #0
 801262a:	d151      	bne.n	80126d0 <__hexnan+0xe8>
 801262c:	9a04      	ldr	r2, [sp, #16]
 801262e:	9905      	ldr	r1, [sp, #20]
 8012630:	2a20      	cmp	r2, #32
 8012632:	d818      	bhi.n	8012666 <__hexnan+0x7e>
 8012634:	9b02      	ldr	r3, [sp, #8]
 8012636:	459b      	cmp	fp, r3
 8012638:	dd13      	ble.n	8012662 <__hexnan+0x7a>
 801263a:	454c      	cmp	r4, r9
 801263c:	d206      	bcs.n	801264c <__hexnan+0x64>
 801263e:	2d07      	cmp	r5, #7
 8012640:	dc04      	bgt.n	801264c <__hexnan+0x64>
 8012642:	462a      	mov	r2, r5
 8012644:	4649      	mov	r1, r9
 8012646:	4620      	mov	r0, r4
 8012648:	f7ff ffa8 	bl	801259c <L_shift>
 801264c:	4544      	cmp	r4, r8
 801264e:	d952      	bls.n	80126f6 <__hexnan+0x10e>
 8012650:	2300      	movs	r3, #0
 8012652:	f1a4 0904 	sub.w	r9, r4, #4
 8012656:	f844 3c04 	str.w	r3, [r4, #-4]
 801265a:	f8cd b008 	str.w	fp, [sp, #8]
 801265e:	464c      	mov	r4, r9
 8012660:	461d      	mov	r5, r3
 8012662:	9903      	ldr	r1, [sp, #12]
 8012664:	e7d7      	b.n	8012616 <__hexnan+0x2e>
 8012666:	2a29      	cmp	r2, #41	@ 0x29
 8012668:	d157      	bne.n	801271a <__hexnan+0x132>
 801266a:	3102      	adds	r1, #2
 801266c:	f8ca 1000 	str.w	r1, [sl]
 8012670:	f1bb 0f00 	cmp.w	fp, #0
 8012674:	d051      	beq.n	801271a <__hexnan+0x132>
 8012676:	454c      	cmp	r4, r9
 8012678:	d206      	bcs.n	8012688 <__hexnan+0xa0>
 801267a:	2d07      	cmp	r5, #7
 801267c:	dc04      	bgt.n	8012688 <__hexnan+0xa0>
 801267e:	462a      	mov	r2, r5
 8012680:	4649      	mov	r1, r9
 8012682:	4620      	mov	r0, r4
 8012684:	f7ff ff8a 	bl	801259c <L_shift>
 8012688:	4544      	cmp	r4, r8
 801268a:	d936      	bls.n	80126fa <__hexnan+0x112>
 801268c:	f1a8 0204 	sub.w	r2, r8, #4
 8012690:	4623      	mov	r3, r4
 8012692:	f853 1b04 	ldr.w	r1, [r3], #4
 8012696:	f842 1f04 	str.w	r1, [r2, #4]!
 801269a:	429f      	cmp	r7, r3
 801269c:	d2f9      	bcs.n	8012692 <__hexnan+0xaa>
 801269e:	1b3b      	subs	r3, r7, r4
 80126a0:	f023 0303 	bic.w	r3, r3, #3
 80126a4:	3304      	adds	r3, #4
 80126a6:	3401      	adds	r4, #1
 80126a8:	3e03      	subs	r6, #3
 80126aa:	42b4      	cmp	r4, r6
 80126ac:	bf88      	it	hi
 80126ae:	2304      	movhi	r3, #4
 80126b0:	4443      	add	r3, r8
 80126b2:	2200      	movs	r2, #0
 80126b4:	f843 2b04 	str.w	r2, [r3], #4
 80126b8:	429f      	cmp	r7, r3
 80126ba:	d2fb      	bcs.n	80126b4 <__hexnan+0xcc>
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	b91b      	cbnz	r3, 80126c8 <__hexnan+0xe0>
 80126c0:	4547      	cmp	r7, r8
 80126c2:	d128      	bne.n	8012716 <__hexnan+0x12e>
 80126c4:	2301      	movs	r3, #1
 80126c6:	603b      	str	r3, [r7, #0]
 80126c8:	2005      	movs	r0, #5
 80126ca:	b007      	add	sp, #28
 80126cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126d0:	3501      	adds	r5, #1
 80126d2:	2d08      	cmp	r5, #8
 80126d4:	f10b 0b01 	add.w	fp, fp, #1
 80126d8:	dd06      	ble.n	80126e8 <__hexnan+0x100>
 80126da:	4544      	cmp	r4, r8
 80126dc:	d9c1      	bls.n	8012662 <__hexnan+0x7a>
 80126de:	2300      	movs	r3, #0
 80126e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80126e4:	2501      	movs	r5, #1
 80126e6:	3c04      	subs	r4, #4
 80126e8:	6822      	ldr	r2, [r4, #0]
 80126ea:	f000 000f 	and.w	r0, r0, #15
 80126ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80126f2:	6020      	str	r0, [r4, #0]
 80126f4:	e7b5      	b.n	8012662 <__hexnan+0x7a>
 80126f6:	2508      	movs	r5, #8
 80126f8:	e7b3      	b.n	8012662 <__hexnan+0x7a>
 80126fa:	9b01      	ldr	r3, [sp, #4]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d0dd      	beq.n	80126bc <__hexnan+0xd4>
 8012700:	f1c3 0320 	rsb	r3, r3, #32
 8012704:	f04f 32ff 	mov.w	r2, #4294967295
 8012708:	40da      	lsrs	r2, r3
 801270a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801270e:	4013      	ands	r3, r2
 8012710:	f846 3c04 	str.w	r3, [r6, #-4]
 8012714:	e7d2      	b.n	80126bc <__hexnan+0xd4>
 8012716:	3f04      	subs	r7, #4
 8012718:	e7d0      	b.n	80126bc <__hexnan+0xd4>
 801271a:	2004      	movs	r0, #4
 801271c:	e7d5      	b.n	80126ca <__hexnan+0xe2>

0801271e <__ascii_mbtowc>:
 801271e:	b082      	sub	sp, #8
 8012720:	b901      	cbnz	r1, 8012724 <__ascii_mbtowc+0x6>
 8012722:	a901      	add	r1, sp, #4
 8012724:	b142      	cbz	r2, 8012738 <__ascii_mbtowc+0x1a>
 8012726:	b14b      	cbz	r3, 801273c <__ascii_mbtowc+0x1e>
 8012728:	7813      	ldrb	r3, [r2, #0]
 801272a:	600b      	str	r3, [r1, #0]
 801272c:	7812      	ldrb	r2, [r2, #0]
 801272e:	1e10      	subs	r0, r2, #0
 8012730:	bf18      	it	ne
 8012732:	2001      	movne	r0, #1
 8012734:	b002      	add	sp, #8
 8012736:	4770      	bx	lr
 8012738:	4610      	mov	r0, r2
 801273a:	e7fb      	b.n	8012734 <__ascii_mbtowc+0x16>
 801273c:	f06f 0001 	mvn.w	r0, #1
 8012740:	e7f8      	b.n	8012734 <__ascii_mbtowc+0x16>

08012742 <__ascii_wctomb>:
 8012742:	4603      	mov	r3, r0
 8012744:	4608      	mov	r0, r1
 8012746:	b141      	cbz	r1, 801275a <__ascii_wctomb+0x18>
 8012748:	2aff      	cmp	r2, #255	@ 0xff
 801274a:	d904      	bls.n	8012756 <__ascii_wctomb+0x14>
 801274c:	228a      	movs	r2, #138	@ 0x8a
 801274e:	601a      	str	r2, [r3, #0]
 8012750:	f04f 30ff 	mov.w	r0, #4294967295
 8012754:	4770      	bx	lr
 8012756:	700a      	strb	r2, [r1, #0]
 8012758:	2001      	movs	r0, #1
 801275a:	4770      	bx	lr

0801275c <fiprintf>:
 801275c:	b40e      	push	{r1, r2, r3}
 801275e:	b503      	push	{r0, r1, lr}
 8012760:	4601      	mov	r1, r0
 8012762:	ab03      	add	r3, sp, #12
 8012764:	4805      	ldr	r0, [pc, #20]	@ (801277c <fiprintf+0x20>)
 8012766:	f853 2b04 	ldr.w	r2, [r3], #4
 801276a:	6800      	ldr	r0, [r0, #0]
 801276c:	9301      	str	r3, [sp, #4]
 801276e:	f000 f837 	bl	80127e0 <_vfiprintf_r>
 8012772:	b002      	add	sp, #8
 8012774:	f85d eb04 	ldr.w	lr, [sp], #4
 8012778:	b003      	add	sp, #12
 801277a:	4770      	bx	lr
 801277c:	2000002c 	.word	0x2000002c

08012780 <abort>:
 8012780:	b508      	push	{r3, lr}
 8012782:	2006      	movs	r0, #6
 8012784:	f000 fa00 	bl	8012b88 <raise>
 8012788:	2001      	movs	r0, #1
 801278a:	f7f6 fa5f 	bl	8008c4c <_exit>

0801278e <__sfputc_r>:
 801278e:	6893      	ldr	r3, [r2, #8]
 8012790:	3b01      	subs	r3, #1
 8012792:	2b00      	cmp	r3, #0
 8012794:	b410      	push	{r4}
 8012796:	6093      	str	r3, [r2, #8]
 8012798:	da08      	bge.n	80127ac <__sfputc_r+0x1e>
 801279a:	6994      	ldr	r4, [r2, #24]
 801279c:	42a3      	cmp	r3, r4
 801279e:	db01      	blt.n	80127a4 <__sfputc_r+0x16>
 80127a0:	290a      	cmp	r1, #10
 80127a2:	d103      	bne.n	80127ac <__sfputc_r+0x1e>
 80127a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127a8:	f000 b932 	b.w	8012a10 <__swbuf_r>
 80127ac:	6813      	ldr	r3, [r2, #0]
 80127ae:	1c58      	adds	r0, r3, #1
 80127b0:	6010      	str	r0, [r2, #0]
 80127b2:	7019      	strb	r1, [r3, #0]
 80127b4:	4608      	mov	r0, r1
 80127b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127ba:	4770      	bx	lr

080127bc <__sfputs_r>:
 80127bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127be:	4606      	mov	r6, r0
 80127c0:	460f      	mov	r7, r1
 80127c2:	4614      	mov	r4, r2
 80127c4:	18d5      	adds	r5, r2, r3
 80127c6:	42ac      	cmp	r4, r5
 80127c8:	d101      	bne.n	80127ce <__sfputs_r+0x12>
 80127ca:	2000      	movs	r0, #0
 80127cc:	e007      	b.n	80127de <__sfputs_r+0x22>
 80127ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80127d2:	463a      	mov	r2, r7
 80127d4:	4630      	mov	r0, r6
 80127d6:	f7ff ffda 	bl	801278e <__sfputc_r>
 80127da:	1c43      	adds	r3, r0, #1
 80127dc:	d1f3      	bne.n	80127c6 <__sfputs_r+0xa>
 80127de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080127e0 <_vfiprintf_r>:
 80127e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127e4:	460d      	mov	r5, r1
 80127e6:	b09d      	sub	sp, #116	@ 0x74
 80127e8:	4614      	mov	r4, r2
 80127ea:	4698      	mov	r8, r3
 80127ec:	4606      	mov	r6, r0
 80127ee:	b118      	cbz	r0, 80127f8 <_vfiprintf_r+0x18>
 80127f0:	6a03      	ldr	r3, [r0, #32]
 80127f2:	b90b      	cbnz	r3, 80127f8 <_vfiprintf_r+0x18>
 80127f4:	f7fc fe26 	bl	800f444 <__sinit>
 80127f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80127fa:	07d9      	lsls	r1, r3, #31
 80127fc:	d405      	bmi.n	801280a <_vfiprintf_r+0x2a>
 80127fe:	89ab      	ldrh	r3, [r5, #12]
 8012800:	059a      	lsls	r2, r3, #22
 8012802:	d402      	bmi.n	801280a <_vfiprintf_r+0x2a>
 8012804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012806:	f7fc ff34 	bl	800f672 <__retarget_lock_acquire_recursive>
 801280a:	89ab      	ldrh	r3, [r5, #12]
 801280c:	071b      	lsls	r3, r3, #28
 801280e:	d501      	bpl.n	8012814 <_vfiprintf_r+0x34>
 8012810:	692b      	ldr	r3, [r5, #16]
 8012812:	b99b      	cbnz	r3, 801283c <_vfiprintf_r+0x5c>
 8012814:	4629      	mov	r1, r5
 8012816:	4630      	mov	r0, r6
 8012818:	f000 f938 	bl	8012a8c <__swsetup_r>
 801281c:	b170      	cbz	r0, 801283c <_vfiprintf_r+0x5c>
 801281e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012820:	07dc      	lsls	r4, r3, #31
 8012822:	d504      	bpl.n	801282e <_vfiprintf_r+0x4e>
 8012824:	f04f 30ff 	mov.w	r0, #4294967295
 8012828:	b01d      	add	sp, #116	@ 0x74
 801282a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801282e:	89ab      	ldrh	r3, [r5, #12]
 8012830:	0598      	lsls	r0, r3, #22
 8012832:	d4f7      	bmi.n	8012824 <_vfiprintf_r+0x44>
 8012834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012836:	f7fc ff1d 	bl	800f674 <__retarget_lock_release_recursive>
 801283a:	e7f3      	b.n	8012824 <_vfiprintf_r+0x44>
 801283c:	2300      	movs	r3, #0
 801283e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012840:	2320      	movs	r3, #32
 8012842:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012846:	f8cd 800c 	str.w	r8, [sp, #12]
 801284a:	2330      	movs	r3, #48	@ 0x30
 801284c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80129fc <_vfiprintf_r+0x21c>
 8012850:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012854:	f04f 0901 	mov.w	r9, #1
 8012858:	4623      	mov	r3, r4
 801285a:	469a      	mov	sl, r3
 801285c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012860:	b10a      	cbz	r2, 8012866 <_vfiprintf_r+0x86>
 8012862:	2a25      	cmp	r2, #37	@ 0x25
 8012864:	d1f9      	bne.n	801285a <_vfiprintf_r+0x7a>
 8012866:	ebba 0b04 	subs.w	fp, sl, r4
 801286a:	d00b      	beq.n	8012884 <_vfiprintf_r+0xa4>
 801286c:	465b      	mov	r3, fp
 801286e:	4622      	mov	r2, r4
 8012870:	4629      	mov	r1, r5
 8012872:	4630      	mov	r0, r6
 8012874:	f7ff ffa2 	bl	80127bc <__sfputs_r>
 8012878:	3001      	adds	r0, #1
 801287a:	f000 80a7 	beq.w	80129cc <_vfiprintf_r+0x1ec>
 801287e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012880:	445a      	add	r2, fp
 8012882:	9209      	str	r2, [sp, #36]	@ 0x24
 8012884:	f89a 3000 	ldrb.w	r3, [sl]
 8012888:	2b00      	cmp	r3, #0
 801288a:	f000 809f 	beq.w	80129cc <_vfiprintf_r+0x1ec>
 801288e:	2300      	movs	r3, #0
 8012890:	f04f 32ff 	mov.w	r2, #4294967295
 8012894:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012898:	f10a 0a01 	add.w	sl, sl, #1
 801289c:	9304      	str	r3, [sp, #16]
 801289e:	9307      	str	r3, [sp, #28]
 80128a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80128a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80128a6:	4654      	mov	r4, sl
 80128a8:	2205      	movs	r2, #5
 80128aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80128ae:	4853      	ldr	r0, [pc, #332]	@ (80129fc <_vfiprintf_r+0x21c>)
 80128b0:	f7ed fcae 	bl	8000210 <memchr>
 80128b4:	9a04      	ldr	r2, [sp, #16]
 80128b6:	b9d8      	cbnz	r0, 80128f0 <_vfiprintf_r+0x110>
 80128b8:	06d1      	lsls	r1, r2, #27
 80128ba:	bf44      	itt	mi
 80128bc:	2320      	movmi	r3, #32
 80128be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128c2:	0713      	lsls	r3, r2, #28
 80128c4:	bf44      	itt	mi
 80128c6:	232b      	movmi	r3, #43	@ 0x2b
 80128c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128cc:	f89a 3000 	ldrb.w	r3, [sl]
 80128d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80128d2:	d015      	beq.n	8012900 <_vfiprintf_r+0x120>
 80128d4:	9a07      	ldr	r2, [sp, #28]
 80128d6:	4654      	mov	r4, sl
 80128d8:	2000      	movs	r0, #0
 80128da:	f04f 0c0a 	mov.w	ip, #10
 80128de:	4621      	mov	r1, r4
 80128e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128e4:	3b30      	subs	r3, #48	@ 0x30
 80128e6:	2b09      	cmp	r3, #9
 80128e8:	d94b      	bls.n	8012982 <_vfiprintf_r+0x1a2>
 80128ea:	b1b0      	cbz	r0, 801291a <_vfiprintf_r+0x13a>
 80128ec:	9207      	str	r2, [sp, #28]
 80128ee:	e014      	b.n	801291a <_vfiprintf_r+0x13a>
 80128f0:	eba0 0308 	sub.w	r3, r0, r8
 80128f4:	fa09 f303 	lsl.w	r3, r9, r3
 80128f8:	4313      	orrs	r3, r2
 80128fa:	9304      	str	r3, [sp, #16]
 80128fc:	46a2      	mov	sl, r4
 80128fe:	e7d2      	b.n	80128a6 <_vfiprintf_r+0xc6>
 8012900:	9b03      	ldr	r3, [sp, #12]
 8012902:	1d19      	adds	r1, r3, #4
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	9103      	str	r1, [sp, #12]
 8012908:	2b00      	cmp	r3, #0
 801290a:	bfbb      	ittet	lt
 801290c:	425b      	neglt	r3, r3
 801290e:	f042 0202 	orrlt.w	r2, r2, #2
 8012912:	9307      	strge	r3, [sp, #28]
 8012914:	9307      	strlt	r3, [sp, #28]
 8012916:	bfb8      	it	lt
 8012918:	9204      	strlt	r2, [sp, #16]
 801291a:	7823      	ldrb	r3, [r4, #0]
 801291c:	2b2e      	cmp	r3, #46	@ 0x2e
 801291e:	d10a      	bne.n	8012936 <_vfiprintf_r+0x156>
 8012920:	7863      	ldrb	r3, [r4, #1]
 8012922:	2b2a      	cmp	r3, #42	@ 0x2a
 8012924:	d132      	bne.n	801298c <_vfiprintf_r+0x1ac>
 8012926:	9b03      	ldr	r3, [sp, #12]
 8012928:	1d1a      	adds	r2, r3, #4
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	9203      	str	r2, [sp, #12]
 801292e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012932:	3402      	adds	r4, #2
 8012934:	9305      	str	r3, [sp, #20]
 8012936:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012a0c <_vfiprintf_r+0x22c>
 801293a:	7821      	ldrb	r1, [r4, #0]
 801293c:	2203      	movs	r2, #3
 801293e:	4650      	mov	r0, sl
 8012940:	f7ed fc66 	bl	8000210 <memchr>
 8012944:	b138      	cbz	r0, 8012956 <_vfiprintf_r+0x176>
 8012946:	9b04      	ldr	r3, [sp, #16]
 8012948:	eba0 000a 	sub.w	r0, r0, sl
 801294c:	2240      	movs	r2, #64	@ 0x40
 801294e:	4082      	lsls	r2, r0
 8012950:	4313      	orrs	r3, r2
 8012952:	3401      	adds	r4, #1
 8012954:	9304      	str	r3, [sp, #16]
 8012956:	f814 1b01 	ldrb.w	r1, [r4], #1
 801295a:	4829      	ldr	r0, [pc, #164]	@ (8012a00 <_vfiprintf_r+0x220>)
 801295c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012960:	2206      	movs	r2, #6
 8012962:	f7ed fc55 	bl	8000210 <memchr>
 8012966:	2800      	cmp	r0, #0
 8012968:	d03f      	beq.n	80129ea <_vfiprintf_r+0x20a>
 801296a:	4b26      	ldr	r3, [pc, #152]	@ (8012a04 <_vfiprintf_r+0x224>)
 801296c:	bb1b      	cbnz	r3, 80129b6 <_vfiprintf_r+0x1d6>
 801296e:	9b03      	ldr	r3, [sp, #12]
 8012970:	3307      	adds	r3, #7
 8012972:	f023 0307 	bic.w	r3, r3, #7
 8012976:	3308      	adds	r3, #8
 8012978:	9303      	str	r3, [sp, #12]
 801297a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801297c:	443b      	add	r3, r7
 801297e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012980:	e76a      	b.n	8012858 <_vfiprintf_r+0x78>
 8012982:	fb0c 3202 	mla	r2, ip, r2, r3
 8012986:	460c      	mov	r4, r1
 8012988:	2001      	movs	r0, #1
 801298a:	e7a8      	b.n	80128de <_vfiprintf_r+0xfe>
 801298c:	2300      	movs	r3, #0
 801298e:	3401      	adds	r4, #1
 8012990:	9305      	str	r3, [sp, #20]
 8012992:	4619      	mov	r1, r3
 8012994:	f04f 0c0a 	mov.w	ip, #10
 8012998:	4620      	mov	r0, r4
 801299a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801299e:	3a30      	subs	r2, #48	@ 0x30
 80129a0:	2a09      	cmp	r2, #9
 80129a2:	d903      	bls.n	80129ac <_vfiprintf_r+0x1cc>
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d0c6      	beq.n	8012936 <_vfiprintf_r+0x156>
 80129a8:	9105      	str	r1, [sp, #20]
 80129aa:	e7c4      	b.n	8012936 <_vfiprintf_r+0x156>
 80129ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80129b0:	4604      	mov	r4, r0
 80129b2:	2301      	movs	r3, #1
 80129b4:	e7f0      	b.n	8012998 <_vfiprintf_r+0x1b8>
 80129b6:	ab03      	add	r3, sp, #12
 80129b8:	9300      	str	r3, [sp, #0]
 80129ba:	462a      	mov	r2, r5
 80129bc:	4b12      	ldr	r3, [pc, #72]	@ (8012a08 <_vfiprintf_r+0x228>)
 80129be:	a904      	add	r1, sp, #16
 80129c0:	4630      	mov	r0, r6
 80129c2:	f7fb fee7 	bl	800e794 <_printf_float>
 80129c6:	4607      	mov	r7, r0
 80129c8:	1c78      	adds	r0, r7, #1
 80129ca:	d1d6      	bne.n	801297a <_vfiprintf_r+0x19a>
 80129cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80129ce:	07d9      	lsls	r1, r3, #31
 80129d0:	d405      	bmi.n	80129de <_vfiprintf_r+0x1fe>
 80129d2:	89ab      	ldrh	r3, [r5, #12]
 80129d4:	059a      	lsls	r2, r3, #22
 80129d6:	d402      	bmi.n	80129de <_vfiprintf_r+0x1fe>
 80129d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80129da:	f7fc fe4b 	bl	800f674 <__retarget_lock_release_recursive>
 80129de:	89ab      	ldrh	r3, [r5, #12]
 80129e0:	065b      	lsls	r3, r3, #25
 80129e2:	f53f af1f 	bmi.w	8012824 <_vfiprintf_r+0x44>
 80129e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80129e8:	e71e      	b.n	8012828 <_vfiprintf_r+0x48>
 80129ea:	ab03      	add	r3, sp, #12
 80129ec:	9300      	str	r3, [sp, #0]
 80129ee:	462a      	mov	r2, r5
 80129f0:	4b05      	ldr	r3, [pc, #20]	@ (8012a08 <_vfiprintf_r+0x228>)
 80129f2:	a904      	add	r1, sp, #16
 80129f4:	4630      	mov	r0, r6
 80129f6:	f7fc f965 	bl	800ecc4 <_printf_i>
 80129fa:	e7e4      	b.n	80129c6 <_vfiprintf_r+0x1e6>
 80129fc:	080134f9 	.word	0x080134f9
 8012a00:	08013503 	.word	0x08013503
 8012a04:	0800e795 	.word	0x0800e795
 8012a08:	080127bd 	.word	0x080127bd
 8012a0c:	080134ff 	.word	0x080134ff

08012a10 <__swbuf_r>:
 8012a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a12:	460e      	mov	r6, r1
 8012a14:	4614      	mov	r4, r2
 8012a16:	4605      	mov	r5, r0
 8012a18:	b118      	cbz	r0, 8012a22 <__swbuf_r+0x12>
 8012a1a:	6a03      	ldr	r3, [r0, #32]
 8012a1c:	b90b      	cbnz	r3, 8012a22 <__swbuf_r+0x12>
 8012a1e:	f7fc fd11 	bl	800f444 <__sinit>
 8012a22:	69a3      	ldr	r3, [r4, #24]
 8012a24:	60a3      	str	r3, [r4, #8]
 8012a26:	89a3      	ldrh	r3, [r4, #12]
 8012a28:	071a      	lsls	r2, r3, #28
 8012a2a:	d501      	bpl.n	8012a30 <__swbuf_r+0x20>
 8012a2c:	6923      	ldr	r3, [r4, #16]
 8012a2e:	b943      	cbnz	r3, 8012a42 <__swbuf_r+0x32>
 8012a30:	4621      	mov	r1, r4
 8012a32:	4628      	mov	r0, r5
 8012a34:	f000 f82a 	bl	8012a8c <__swsetup_r>
 8012a38:	b118      	cbz	r0, 8012a42 <__swbuf_r+0x32>
 8012a3a:	f04f 37ff 	mov.w	r7, #4294967295
 8012a3e:	4638      	mov	r0, r7
 8012a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a42:	6823      	ldr	r3, [r4, #0]
 8012a44:	6922      	ldr	r2, [r4, #16]
 8012a46:	1a98      	subs	r0, r3, r2
 8012a48:	6963      	ldr	r3, [r4, #20]
 8012a4a:	b2f6      	uxtb	r6, r6
 8012a4c:	4283      	cmp	r3, r0
 8012a4e:	4637      	mov	r7, r6
 8012a50:	dc05      	bgt.n	8012a5e <__swbuf_r+0x4e>
 8012a52:	4621      	mov	r1, r4
 8012a54:	4628      	mov	r0, r5
 8012a56:	f7ff fa89 	bl	8011f6c <_fflush_r>
 8012a5a:	2800      	cmp	r0, #0
 8012a5c:	d1ed      	bne.n	8012a3a <__swbuf_r+0x2a>
 8012a5e:	68a3      	ldr	r3, [r4, #8]
 8012a60:	3b01      	subs	r3, #1
 8012a62:	60a3      	str	r3, [r4, #8]
 8012a64:	6823      	ldr	r3, [r4, #0]
 8012a66:	1c5a      	adds	r2, r3, #1
 8012a68:	6022      	str	r2, [r4, #0]
 8012a6a:	701e      	strb	r6, [r3, #0]
 8012a6c:	6962      	ldr	r2, [r4, #20]
 8012a6e:	1c43      	adds	r3, r0, #1
 8012a70:	429a      	cmp	r2, r3
 8012a72:	d004      	beq.n	8012a7e <__swbuf_r+0x6e>
 8012a74:	89a3      	ldrh	r3, [r4, #12]
 8012a76:	07db      	lsls	r3, r3, #31
 8012a78:	d5e1      	bpl.n	8012a3e <__swbuf_r+0x2e>
 8012a7a:	2e0a      	cmp	r6, #10
 8012a7c:	d1df      	bne.n	8012a3e <__swbuf_r+0x2e>
 8012a7e:	4621      	mov	r1, r4
 8012a80:	4628      	mov	r0, r5
 8012a82:	f7ff fa73 	bl	8011f6c <_fflush_r>
 8012a86:	2800      	cmp	r0, #0
 8012a88:	d0d9      	beq.n	8012a3e <__swbuf_r+0x2e>
 8012a8a:	e7d6      	b.n	8012a3a <__swbuf_r+0x2a>

08012a8c <__swsetup_r>:
 8012a8c:	b538      	push	{r3, r4, r5, lr}
 8012a8e:	4b29      	ldr	r3, [pc, #164]	@ (8012b34 <__swsetup_r+0xa8>)
 8012a90:	4605      	mov	r5, r0
 8012a92:	6818      	ldr	r0, [r3, #0]
 8012a94:	460c      	mov	r4, r1
 8012a96:	b118      	cbz	r0, 8012aa0 <__swsetup_r+0x14>
 8012a98:	6a03      	ldr	r3, [r0, #32]
 8012a9a:	b90b      	cbnz	r3, 8012aa0 <__swsetup_r+0x14>
 8012a9c:	f7fc fcd2 	bl	800f444 <__sinit>
 8012aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012aa4:	0719      	lsls	r1, r3, #28
 8012aa6:	d422      	bmi.n	8012aee <__swsetup_r+0x62>
 8012aa8:	06da      	lsls	r2, r3, #27
 8012aaa:	d407      	bmi.n	8012abc <__swsetup_r+0x30>
 8012aac:	2209      	movs	r2, #9
 8012aae:	602a      	str	r2, [r5, #0]
 8012ab0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ab4:	81a3      	strh	r3, [r4, #12]
 8012ab6:	f04f 30ff 	mov.w	r0, #4294967295
 8012aba:	e033      	b.n	8012b24 <__swsetup_r+0x98>
 8012abc:	0758      	lsls	r0, r3, #29
 8012abe:	d512      	bpl.n	8012ae6 <__swsetup_r+0x5a>
 8012ac0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012ac2:	b141      	cbz	r1, 8012ad6 <__swsetup_r+0x4a>
 8012ac4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012ac8:	4299      	cmp	r1, r3
 8012aca:	d002      	beq.n	8012ad2 <__swsetup_r+0x46>
 8012acc:	4628      	mov	r0, r5
 8012ace:	f7fd fc33 	bl	8010338 <_free_r>
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	6363      	str	r3, [r4, #52]	@ 0x34
 8012ad6:	89a3      	ldrh	r3, [r4, #12]
 8012ad8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012adc:	81a3      	strh	r3, [r4, #12]
 8012ade:	2300      	movs	r3, #0
 8012ae0:	6063      	str	r3, [r4, #4]
 8012ae2:	6923      	ldr	r3, [r4, #16]
 8012ae4:	6023      	str	r3, [r4, #0]
 8012ae6:	89a3      	ldrh	r3, [r4, #12]
 8012ae8:	f043 0308 	orr.w	r3, r3, #8
 8012aec:	81a3      	strh	r3, [r4, #12]
 8012aee:	6923      	ldr	r3, [r4, #16]
 8012af0:	b94b      	cbnz	r3, 8012b06 <__swsetup_r+0x7a>
 8012af2:	89a3      	ldrh	r3, [r4, #12]
 8012af4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012afc:	d003      	beq.n	8012b06 <__swsetup_r+0x7a>
 8012afe:	4621      	mov	r1, r4
 8012b00:	4628      	mov	r0, r5
 8012b02:	f000 f883 	bl	8012c0c <__smakebuf_r>
 8012b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b0a:	f013 0201 	ands.w	r2, r3, #1
 8012b0e:	d00a      	beq.n	8012b26 <__swsetup_r+0x9a>
 8012b10:	2200      	movs	r2, #0
 8012b12:	60a2      	str	r2, [r4, #8]
 8012b14:	6962      	ldr	r2, [r4, #20]
 8012b16:	4252      	negs	r2, r2
 8012b18:	61a2      	str	r2, [r4, #24]
 8012b1a:	6922      	ldr	r2, [r4, #16]
 8012b1c:	b942      	cbnz	r2, 8012b30 <__swsetup_r+0xa4>
 8012b1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012b22:	d1c5      	bne.n	8012ab0 <__swsetup_r+0x24>
 8012b24:	bd38      	pop	{r3, r4, r5, pc}
 8012b26:	0799      	lsls	r1, r3, #30
 8012b28:	bf58      	it	pl
 8012b2a:	6962      	ldrpl	r2, [r4, #20]
 8012b2c:	60a2      	str	r2, [r4, #8]
 8012b2e:	e7f4      	b.n	8012b1a <__swsetup_r+0x8e>
 8012b30:	2000      	movs	r0, #0
 8012b32:	e7f7      	b.n	8012b24 <__swsetup_r+0x98>
 8012b34:	2000002c 	.word	0x2000002c

08012b38 <_raise_r>:
 8012b38:	291f      	cmp	r1, #31
 8012b3a:	b538      	push	{r3, r4, r5, lr}
 8012b3c:	4605      	mov	r5, r0
 8012b3e:	460c      	mov	r4, r1
 8012b40:	d904      	bls.n	8012b4c <_raise_r+0x14>
 8012b42:	2316      	movs	r3, #22
 8012b44:	6003      	str	r3, [r0, #0]
 8012b46:	f04f 30ff 	mov.w	r0, #4294967295
 8012b4a:	bd38      	pop	{r3, r4, r5, pc}
 8012b4c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8012b4e:	b112      	cbz	r2, 8012b56 <_raise_r+0x1e>
 8012b50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b54:	b94b      	cbnz	r3, 8012b6a <_raise_r+0x32>
 8012b56:	4628      	mov	r0, r5
 8012b58:	f000 f830 	bl	8012bbc <_getpid_r>
 8012b5c:	4622      	mov	r2, r4
 8012b5e:	4601      	mov	r1, r0
 8012b60:	4628      	mov	r0, r5
 8012b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b66:	f000 b817 	b.w	8012b98 <_kill_r>
 8012b6a:	2b01      	cmp	r3, #1
 8012b6c:	d00a      	beq.n	8012b84 <_raise_r+0x4c>
 8012b6e:	1c59      	adds	r1, r3, #1
 8012b70:	d103      	bne.n	8012b7a <_raise_r+0x42>
 8012b72:	2316      	movs	r3, #22
 8012b74:	6003      	str	r3, [r0, #0]
 8012b76:	2001      	movs	r0, #1
 8012b78:	e7e7      	b.n	8012b4a <_raise_r+0x12>
 8012b7a:	2100      	movs	r1, #0
 8012b7c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8012b80:	4620      	mov	r0, r4
 8012b82:	4798      	blx	r3
 8012b84:	2000      	movs	r0, #0
 8012b86:	e7e0      	b.n	8012b4a <_raise_r+0x12>

08012b88 <raise>:
 8012b88:	4b02      	ldr	r3, [pc, #8]	@ (8012b94 <raise+0xc>)
 8012b8a:	4601      	mov	r1, r0
 8012b8c:	6818      	ldr	r0, [r3, #0]
 8012b8e:	f7ff bfd3 	b.w	8012b38 <_raise_r>
 8012b92:	bf00      	nop
 8012b94:	2000002c 	.word	0x2000002c

08012b98 <_kill_r>:
 8012b98:	b538      	push	{r3, r4, r5, lr}
 8012b9a:	4d07      	ldr	r5, [pc, #28]	@ (8012bb8 <_kill_r+0x20>)
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	4608      	mov	r0, r1
 8012ba2:	4611      	mov	r1, r2
 8012ba4:	602b      	str	r3, [r5, #0]
 8012ba6:	f7f6 f841 	bl	8008c2c <_kill>
 8012baa:	1c43      	adds	r3, r0, #1
 8012bac:	d102      	bne.n	8012bb4 <_kill_r+0x1c>
 8012bae:	682b      	ldr	r3, [r5, #0]
 8012bb0:	b103      	cbz	r3, 8012bb4 <_kill_r+0x1c>
 8012bb2:	6023      	str	r3, [r4, #0]
 8012bb4:	bd38      	pop	{r3, r4, r5, pc}
 8012bb6:	bf00      	nop
 8012bb8:	200013a4 	.word	0x200013a4

08012bbc <_getpid_r>:
 8012bbc:	f7f6 b82e 	b.w	8008c1c <_getpid>

08012bc0 <__swhatbuf_r>:
 8012bc0:	b570      	push	{r4, r5, r6, lr}
 8012bc2:	460c      	mov	r4, r1
 8012bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bc8:	2900      	cmp	r1, #0
 8012bca:	b096      	sub	sp, #88	@ 0x58
 8012bcc:	4615      	mov	r5, r2
 8012bce:	461e      	mov	r6, r3
 8012bd0:	da0d      	bge.n	8012bee <__swhatbuf_r+0x2e>
 8012bd2:	89a3      	ldrh	r3, [r4, #12]
 8012bd4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012bd8:	f04f 0100 	mov.w	r1, #0
 8012bdc:	bf14      	ite	ne
 8012bde:	2340      	movne	r3, #64	@ 0x40
 8012be0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012be4:	2000      	movs	r0, #0
 8012be6:	6031      	str	r1, [r6, #0]
 8012be8:	602b      	str	r3, [r5, #0]
 8012bea:	b016      	add	sp, #88	@ 0x58
 8012bec:	bd70      	pop	{r4, r5, r6, pc}
 8012bee:	466a      	mov	r2, sp
 8012bf0:	f000 f848 	bl	8012c84 <_fstat_r>
 8012bf4:	2800      	cmp	r0, #0
 8012bf6:	dbec      	blt.n	8012bd2 <__swhatbuf_r+0x12>
 8012bf8:	9901      	ldr	r1, [sp, #4]
 8012bfa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012bfe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012c02:	4259      	negs	r1, r3
 8012c04:	4159      	adcs	r1, r3
 8012c06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c0a:	e7eb      	b.n	8012be4 <__swhatbuf_r+0x24>

08012c0c <__smakebuf_r>:
 8012c0c:	898b      	ldrh	r3, [r1, #12]
 8012c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c10:	079d      	lsls	r5, r3, #30
 8012c12:	4606      	mov	r6, r0
 8012c14:	460c      	mov	r4, r1
 8012c16:	d507      	bpl.n	8012c28 <__smakebuf_r+0x1c>
 8012c18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012c1c:	6023      	str	r3, [r4, #0]
 8012c1e:	6123      	str	r3, [r4, #16]
 8012c20:	2301      	movs	r3, #1
 8012c22:	6163      	str	r3, [r4, #20]
 8012c24:	b003      	add	sp, #12
 8012c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c28:	ab01      	add	r3, sp, #4
 8012c2a:	466a      	mov	r2, sp
 8012c2c:	f7ff ffc8 	bl	8012bc0 <__swhatbuf_r>
 8012c30:	9f00      	ldr	r7, [sp, #0]
 8012c32:	4605      	mov	r5, r0
 8012c34:	4639      	mov	r1, r7
 8012c36:	4630      	mov	r0, r6
 8012c38:	f7fd fbf2 	bl	8010420 <_malloc_r>
 8012c3c:	b948      	cbnz	r0, 8012c52 <__smakebuf_r+0x46>
 8012c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c42:	059a      	lsls	r2, r3, #22
 8012c44:	d4ee      	bmi.n	8012c24 <__smakebuf_r+0x18>
 8012c46:	f023 0303 	bic.w	r3, r3, #3
 8012c4a:	f043 0302 	orr.w	r3, r3, #2
 8012c4e:	81a3      	strh	r3, [r4, #12]
 8012c50:	e7e2      	b.n	8012c18 <__smakebuf_r+0xc>
 8012c52:	89a3      	ldrh	r3, [r4, #12]
 8012c54:	6020      	str	r0, [r4, #0]
 8012c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012c5a:	81a3      	strh	r3, [r4, #12]
 8012c5c:	9b01      	ldr	r3, [sp, #4]
 8012c5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012c62:	b15b      	cbz	r3, 8012c7c <__smakebuf_r+0x70>
 8012c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c68:	4630      	mov	r0, r6
 8012c6a:	f000 f81d 	bl	8012ca8 <_isatty_r>
 8012c6e:	b128      	cbz	r0, 8012c7c <__smakebuf_r+0x70>
 8012c70:	89a3      	ldrh	r3, [r4, #12]
 8012c72:	f023 0303 	bic.w	r3, r3, #3
 8012c76:	f043 0301 	orr.w	r3, r3, #1
 8012c7a:	81a3      	strh	r3, [r4, #12]
 8012c7c:	89a3      	ldrh	r3, [r4, #12]
 8012c7e:	431d      	orrs	r5, r3
 8012c80:	81a5      	strh	r5, [r4, #12]
 8012c82:	e7cf      	b.n	8012c24 <__smakebuf_r+0x18>

08012c84 <_fstat_r>:
 8012c84:	b538      	push	{r3, r4, r5, lr}
 8012c86:	4d07      	ldr	r5, [pc, #28]	@ (8012ca4 <_fstat_r+0x20>)
 8012c88:	2300      	movs	r3, #0
 8012c8a:	4604      	mov	r4, r0
 8012c8c:	4608      	mov	r0, r1
 8012c8e:	4611      	mov	r1, r2
 8012c90:	602b      	str	r3, [r5, #0]
 8012c92:	f7f6 f82b 	bl	8008cec <_fstat>
 8012c96:	1c43      	adds	r3, r0, #1
 8012c98:	d102      	bne.n	8012ca0 <_fstat_r+0x1c>
 8012c9a:	682b      	ldr	r3, [r5, #0]
 8012c9c:	b103      	cbz	r3, 8012ca0 <_fstat_r+0x1c>
 8012c9e:	6023      	str	r3, [r4, #0]
 8012ca0:	bd38      	pop	{r3, r4, r5, pc}
 8012ca2:	bf00      	nop
 8012ca4:	200013a4 	.word	0x200013a4

08012ca8 <_isatty_r>:
 8012ca8:	b538      	push	{r3, r4, r5, lr}
 8012caa:	4d06      	ldr	r5, [pc, #24]	@ (8012cc4 <_isatty_r+0x1c>)
 8012cac:	2300      	movs	r3, #0
 8012cae:	4604      	mov	r4, r0
 8012cb0:	4608      	mov	r0, r1
 8012cb2:	602b      	str	r3, [r5, #0]
 8012cb4:	f7f6 f82a 	bl	8008d0c <_isatty>
 8012cb8:	1c43      	adds	r3, r0, #1
 8012cba:	d102      	bne.n	8012cc2 <_isatty_r+0x1a>
 8012cbc:	682b      	ldr	r3, [r5, #0]
 8012cbe:	b103      	cbz	r3, 8012cc2 <_isatty_r+0x1a>
 8012cc0:	6023      	str	r3, [r4, #0]
 8012cc2:	bd38      	pop	{r3, r4, r5, pc}
 8012cc4:	200013a4 	.word	0x200013a4

08012cc8 <_init>:
 8012cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cca:	bf00      	nop
 8012ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cce:	bc08      	pop	{r3}
 8012cd0:	469e      	mov	lr, r3
 8012cd2:	4770      	bx	lr

08012cd4 <_fini>:
 8012cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cd6:	bf00      	nop
 8012cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012cda:	bc08      	pop	{r3}
 8012cdc:	469e      	mov	lr, r3
 8012cde:	4770      	bx	lr
