
ired_cr_omnirobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c3d0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800c5a0  0800c5a0  0001c5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca60  0800ca60  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca60  0800ca60  0001ca60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca68  0800ca68  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ca68  0800ca68  0001ca68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca70  0800ca70  0001ca70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800ca74  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  200001e8  0800cc5c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800cc5c  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c10  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002936  00000000  00000000  00035e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001110  00000000  00000000  000387a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d7b  00000000  00000000  000398b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002426d  00000000  00000000  0003a633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000157fd  00000000  00000000  0005e8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9a7d  00000000  00000000  0007409d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f3c  00000000  00000000  0014db1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  00153a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c588 	.word	0x0800c588

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800c588 	.word	0x0800c588

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b0a3      	sub	sp, #140	; 0x8c
 8001034:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f002 fca9 	bl	800398c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103a:	f000 f9c3 	bl	80013c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800103e:	f000 fd1b 	bl	8001a78 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8001042:	f000 fa75 	bl	8001530 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8001046:	f000 fad5 	bl	80015f4 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 800104a:	f000 fbc9 	bl	80017e0 <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 800104e:	f000 fb69 	bl	8001724 <_ZL12MX_TIM3_Initv>
  MX_I2C1_Init();
 8001052:	f000 fa39 	bl	80014c8 <_ZL12MX_I2C1_Initv>
  MX_TIM5_Init();
 8001056:	f000 fc21 	bl	800189c <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 800105a:	f000 fc7d 	bl	8001958 <_ZL12MX_TIM8_Initv>
  MX_USART1_UART_Init();
 800105e:	f000 fcdd 	bl	8001a1c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
	/* LED Status */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001068:	48c3      	ldr	r0, [pc, #780]	; (8001378 <main+0x348>)
 800106a:	f002 ffcb 	bl	8004004 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800106e:	2201      	movs	r2, #1
 8001070:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001074:	48c0      	ldr	r0, [pc, #768]	; (8001378 <main+0x348>)
 8001076:	f002 ffc5 	bl	8004004 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001080:	48bd      	ldr	r0, [pc, #756]	; (8001378 <main+0x348>)
 8001082:	f002 ffbf 	bl	8004004 <HAL_GPIO_WritePin>

	uint8_t status = mpu.begin();
 8001086:	2200      	movs	r2, #0
 8001088:	2101      	movs	r1, #1
 800108a:	48bc      	ldr	r0, [pc, #752]	; (800137c <main+0x34c>)
 800108c:	f001 fb84 	bl	8002798 <_ZN7MPU92505beginEii>
 8001090:	4603      	mov	r3, r0
 8001092:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	while (status != HAL_OK) {
 8001096:	e010      	b.n	80010ba <main+0x8a>
		status = mpu.begin();
 8001098:	2200      	movs	r2, #0
 800109a:	2101      	movs	r1, #1
 800109c:	48b7      	ldr	r0, [pc, #732]	; (800137c <main+0x34c>)
 800109e:	f001 fb7b 	bl	8002798 <_ZN7MPU92505beginEii>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80010a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010ac:	48b2      	ldr	r0, [pc, #712]	; (8001378 <main+0x348>)
 80010ae:	f002 ffc2 	bl	8004036 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80010b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010b6:	f002 fcdb 	bl	8003a70 <HAL_Delay>
	while (status != HAL_OK) {
 80010ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1ea      	bne.n	8001098 <main+0x68>
	}
	mpu.calcOffsets();
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	48ad      	ldr	r0, [pc, #692]	; (800137c <main+0x34c>)
 80010c8:	f001 fd02 	bl	8002ad0 <_ZN7MPU925011calcOffsetsEbb>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d2:	48a9      	ldr	r0, [pc, #676]	; (8001378 <main+0x348>)
 80010d4:	f002 ff96 	bl	8004004 <HAL_GPIO_WritePin>

	/* Motor */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	48a9      	ldr	r0, [pc, #676]	; (8001380 <main+0x350>)
 80010dc:	f004 feac 	bl	8005e38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010e0:	2104      	movs	r1, #4
 80010e2:	48a7      	ldr	r0, [pc, #668]	; (8001380 <main+0x350>)
 80010e4:	f004 fea8 	bl	8005e38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010e8:	2108      	movs	r1, #8
 80010ea:	48a5      	ldr	r0, [pc, #660]	; (8001380 <main+0x350>)
 80010ec:	f004 fea4 	bl	8005e38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80010f0:	210c      	movs	r1, #12
 80010f2:	48a3      	ldr	r0, [pc, #652]	; (8001380 <main+0x350>)
 80010f4:	f004 fea0 	bl	8005e38 <HAL_TIM_PWM_Start>
	TIM2->CCR1 = 0;
 80010f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010fc:	2200      	movs	r2, #0
 80010fe:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 0;
 8001100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001104:	2200      	movs	r2, #0
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = 0;
 8001108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800110c:	2200      	movs	r2, #0
 800110e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 0;
 8001110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001114:	2200      	movs	r2, #0
 8001116:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2101      	movs	r1, #1
 800111c:	4899      	ldr	r0, [pc, #612]	; (8001384 <main+0x354>)
 800111e:	f002 ff71 	bl	8004004 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2102      	movs	r1, #2
 8001126:	4897      	ldr	r0, [pc, #604]	; (8001384 <main+0x354>)
 8001128:	f002 ff6c 	bl	8004004 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800112c:	2201      	movs	r2, #1
 800112e:	2104      	movs	r1, #4
 8001130:	4894      	ldr	r0, [pc, #592]	; (8001384 <main+0x354>)
 8001132:	f002 ff67 	bl	8004004 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001136:	2201      	movs	r2, #1
 8001138:	2108      	movs	r1, #8
 800113a:	4892      	ldr	r0, [pc, #584]	; (8001384 <main+0x354>)
 800113c:	f002 ff62 	bl	8004004 <HAL_GPIO_WritePin>

	/* Encoder */
	HAL_TIM_Base_Start_IT(&htim4);
 8001140:	4891      	ldr	r0, [pc, #580]	; (8001388 <main+0x358>)
 8001142:	f004 fdb9 	bl	8005cb8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001146:	213c      	movs	r1, #60	; 0x3c
 8001148:	4890      	ldr	r0, [pc, #576]	; (800138c <main+0x35c>)
 800114a:	f004 ffe3 	bl	8006114 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800114e:	213c      	movs	r1, #60	; 0x3c
 8001150:	488f      	ldr	r0, [pc, #572]	; (8001390 <main+0x360>)
 8001152:	f004 ffdf 	bl	8006114 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001156:	213c      	movs	r1, #60	; 0x3c
 8001158:	488e      	ldr	r0, [pc, #568]	; (8001394 <main+0x364>)
 800115a:	f004 ffdb 	bl	8006114 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800115e:	213c      	movs	r1, #60	; 0x3c
 8001160:	488d      	ldr	r0, [pc, #564]	; (8001398 <main+0x368>)
 8001162:	f004 ffd7 	bl	8006114 <HAL_TIM_Encoder_Start>
	htim1.Instance->CNT = 30000;
 8001166:	4b89      	ldr	r3, [pc, #548]	; (800138c <main+0x35c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f247 5230 	movw	r2, #30000	; 0x7530
 800116e:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 30000;
 8001170:	4b87      	ldr	r3, [pc, #540]	; (8001390 <main+0x360>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f247 5230 	movw	r2, #30000	; 0x7530
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
	htim5.Instance->CNT = 30000;
 800117a:	4b86      	ldr	r3, [pc, #536]	; (8001394 <main+0x364>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f247 5230 	movw	r2, #30000	; 0x7530
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
	htim8.Instance->CNT = 30000;
 8001184:	4b84      	ldr	r3, [pc, #528]	; (8001398 <main+0x368>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f247 5230 	movw	r2, #30000	; 0x7530
 800118c:	625a      	str	r2, [r3, #36]	; 0x24

	/* PID Data */
	motor_initData(&motor_front_left_);
 800118e:	4883      	ldr	r0, [pc, #524]	; (800139c <main+0x36c>)
 8001190:	f001 f926 	bl	80023e0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_front_right_);
 8001194:	4882      	ldr	r0, [pc, #520]	; (80013a0 <main+0x370>)
 8001196:	f001 f923 	bl	80023e0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_rear_left_);
 800119a:	4882      	ldr	r0, [pc, #520]	; (80013a4 <main+0x374>)
 800119c:	f001 f920 	bl	80023e0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_rear_right_);
 80011a0:	4881      	ldr	r0, [pc, #516]	; (80013a8 <main+0x378>)
 80011a2:	f001 f91d 	bl	80023e0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	resetPIDData(&pid_data_front_left_);
 80011a6:	4881      	ldr	r0, [pc, #516]	; (80013ac <main+0x37c>)
 80011a8:	f001 fa38 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_front_right_);
 80011ac:	4880      	ldr	r0, [pc, #512]	; (80013b0 <main+0x380>)
 80011ae:	f001 fa35 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_rear_left_);
 80011b2:	4880      	ldr	r0, [pc, #512]	; (80013b4 <main+0x384>)
 80011b4:	f001 fa32 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_rear_right_);
 80011b8:	487f      	ldr	r0, [pc, #508]	; (80013b8 <main+0x388>)
 80011ba:	f001 fa2f 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
	setupPIDParameter(&pid_data_front_left_, 1.0, 0.0, 0.0);
 80011be:	ed9f 2b68 	vldr	d2, [pc, #416]	; 8001360 <main+0x330>
 80011c2:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8001360 <main+0x330>
 80011c6:	ed9f 0b68 	vldr	d0, [pc, #416]	; 8001368 <main+0x338>
 80011ca:	4878      	ldr	r0, [pc, #480]	; (80013ac <main+0x37c>)
 80011cc:	f001 fa45 	bl	800265a <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_front_right_, 1.0, 0.0, 0.0);
 80011d0:	ed9f 2b63 	vldr	d2, [pc, #396]	; 8001360 <main+0x330>
 80011d4:	ed9f 1b62 	vldr	d1, [pc, #392]	; 8001360 <main+0x330>
 80011d8:	ed9f 0b63 	vldr	d0, [pc, #396]	; 8001368 <main+0x338>
 80011dc:	4874      	ldr	r0, [pc, #464]	; (80013b0 <main+0x380>)
 80011de:	f001 fa3c 	bl	800265a <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_rear_left_, 1.0, 0.0, 0.0);
 80011e2:	ed9f 2b5f 	vldr	d2, [pc, #380]	; 8001360 <main+0x330>
 80011e6:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8001360 <main+0x330>
 80011ea:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 8001368 <main+0x338>
 80011ee:	4871      	ldr	r0, [pc, #452]	; (80013b4 <main+0x384>)
 80011f0:	f001 fa33 	bl	800265a <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_rear_right_, 1.0, 0.0, 0.0);
 80011f4:	ed9f 2b5a 	vldr	d2, [pc, #360]	; 8001360 <main+0x330>
 80011f8:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8001360 <main+0x330>
 80011fc:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8001368 <main+0x338>
 8001200:	486d      	ldr	r0, [pc, #436]	; (80013b8 <main+0x388>)
 8001202:	f001 fa2a 	bl	800265a <_Z17setupPIDParameterP16PID_Data_Typedefddd>

	/* Timer */
	uint32_t time_now, tTime[3];
	for (int i = 0; i < 3; i++) {
 8001206:	2300      	movs	r3, #0
 8001208:	67bb      	str	r3, [r7, #120]	; 0x78
 800120a:	e00b      	b.n	8001224 <main+0x1f4>
		tTime[i] = HAL_GetTick();
 800120c:	f002 fc24 	bl	8003a58 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	3380      	adds	r3, #128	; 0x80
 8001218:	443b      	add	r3, r7
 800121a:	f843 2c80 	str.w	r2, [r3, #-128]
	for (int i = 0; i < 3; i++) {
 800121e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001220:	3301      	adds	r3, #1
 8001222:	67bb      	str	r3, [r7, #120]	; 0x78
 8001224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001226:	2b02      	cmp	r3, #2
 8001228:	ddf0      	ble.n	800120c <main+0x1dc>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		time_now = HAL_GetTick();
 800122a:	f002 fc15 	bl	8003a58 <HAL_GetTick>
 800122e:	6738      	str	r0, [r7, #112]	; 0x70
		if (time_now - tTime[0] > 50) {
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b32      	cmp	r3, #50	; 0x32
 8001238:	d924      	bls.n	8001284 <main+0x254>
			sprintf((char *)tmp_ch, "%lf %lf\r\n", motor_front_left_.speed_sp, motor_front_left_.speed_pv);
 800123a:	4b58      	ldr	r3, [pc, #352]	; (800139c <main+0x36c>)
 800123c:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001240:	4b56      	ldr	r3, [pc, #344]	; (800139c <main+0x36c>)
 8001242:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001246:	f107 040c 	add.w	r4, r7, #12
 800124a:	e9cd 2300 	strd	r2, r3, [sp]
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	495a      	ldr	r1, [pc, #360]	; (80013bc <main+0x38c>)
 8001254:	4620      	mov	r0, r4
 8001256:	f007 fcf9 	bl	8008c4c <siprintf>
			HAL_UART_Transmit(&huart1, tmp_ch, strlen((char *)tmp_ch), 1000);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f826 	bl	80002b0 <strlen>
 8001264:	4603      	mov	r3, r0
 8001266:	b29a      	uxth	r2, r3
 8001268:	f107 010c 	add.w	r1, r7, #12
 800126c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001270:	4853      	ldr	r0, [pc, #332]	; (80013c0 <main+0x390>)
 8001272:	f005 fe7b 	bl	8006f6c <HAL_UART_Transmit>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800127a:	483f      	ldr	r0, [pc, #252]	; (8001378 <main+0x348>)
 800127c:	f002 fedb 	bl	8004036 <HAL_GPIO_TogglePin>
			tTime[0] = time_now;
 8001280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001282:	603b      	str	r3, [r7, #0]
		}

		if (time_now - tTime[1] > 10) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b0a      	cmp	r3, #10
 800128c:	d932      	bls.n	80012f4 <main+0x2c4>
			motor_front_left_.speed_sp = 0.0;
 800128e:	4943      	ldr	r1, [pc, #268]	; (800139c <main+0x36c>)
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_front_right_.speed_sp = 0.0;
 800129c:	4940      	ldr	r1, [pc, #256]	; (80013a0 <main+0x370>)
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	f04f 0300 	mov.w	r3, #0
 80012a6:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_rear_left_.speed_sp = 0.0;
 80012aa:	493e      	ldr	r1, [pc, #248]	; (80013a4 <main+0x374>)
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_rear_right_.speed_sp = 0.0;
 80012b8:	493b      	ldr	r1, [pc, #236]	; (80013a8 <main+0x378>)
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	e9c1 2308 	strd	r2, r3, [r1, #32]

			motor_front_left_drive(0.01);
 80012c6:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8001370 <main+0x340>
 80012ca:	f000 fd69 	bl	8001da0 <_Z22motor_front_left_drived>
			motor_front_right_drive(0.01);
 80012ce:	ed9f 0b28 	vldr	d0, [pc, #160]	; 8001370 <main+0x340>
 80012d2:	f000 fe2d 	bl	8001f30 <_Z23motor_front_right_drived>
			motor_rear_left_drive(0.01);
 80012d6:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8001370 <main+0x340>
 80012da:	f000 fef1 	bl	80020c0 <_Z21motor_rear_left_drived>
			motor_rear_right_drive(0.01);
 80012de:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8001370 <main+0x340>
 80012e2:	f000 ffb5 	bl	8002250 <_Z22motor_rear_right_drived>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80012e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012ea:	4823      	ldr	r0, [pc, #140]	; (8001378 <main+0x348>)
 80012ec:	f002 fea3 	bl	8004036 <HAL_GPIO_TogglePin>
			tTime[1] = time_now;
 80012f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80012f2:	607b      	str	r3, [r7, #4]
		}

		if (time_now - tTime[2] > 10) {
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b0a      	cmp	r3, #10
 80012fc:	d995      	bls.n	800122a <main+0x1fa>
			uint8_t status = mpu.update();
 80012fe:	481f      	ldr	r0, [pc, #124]	; (800137c <main+0x34c>)
 8001300:	f001 fdce 	bl	8002ea0 <_ZN7MPU92506updateEv>
 8001304:	4603      	mov	r3, r0
 8001306:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			if (status != HAL_OK) {
 800130a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800130e:	2b00      	cmp	r3, #0
 8001310:	d020      	beq.n	8001354 <main+0x324>
				while (status != HAL_OK) {
 8001312:	e010      	b.n	8001336 <main+0x306>
					status = mpu.begin();
 8001314:	2200      	movs	r2, #0
 8001316:	2101      	movs	r1, #1
 8001318:	4818      	ldr	r0, [pc, #96]	; (800137c <main+0x34c>)
 800131a:	f001 fa3d 	bl	8002798 <_ZN7MPU92505beginEii>
 800131e:	4603      	mov	r3, r0
 8001320:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8001324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <main+0x348>)
 800132a:	f002 fe84 	bl	8004036 <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800132e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001332:	f002 fb9d 	bl	8003a70 <HAL_Delay>
				while (status != HAL_OK) {
 8001336:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ea      	bne.n	8001314 <main+0x2e4>
				}
				mpu.calcOffsets();
 800133e:	2201      	movs	r2, #1
 8001340:	2101      	movs	r1, #1
 8001342:	480e      	ldr	r0, [pc, #56]	; (800137c <main+0x34c>)
 8001344:	f001 fbc4 	bl	8002ad0 <_ZN7MPU925011calcOffsetsEbb>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134e:	480a      	ldr	r0, [pc, #40]	; (8001378 <main+0x348>)
 8001350:	f002 fe58 	bl	8004004 <HAL_GPIO_WritePin>
			}
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8001354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001358:	4807      	ldr	r0, [pc, #28]	; (8001378 <main+0x348>)
 800135a:	f002 fe6c 	bl	8004036 <HAL_GPIO_TogglePin>
		}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800135e:	e764      	b.n	800122a <main+0x1fa>
	...
 800136c:	3ff00000 	.word	0x3ff00000
 8001370:	47ae147b 	.word	0x47ae147b
 8001374:	3f847ae1 	.word	0x3f847ae1
 8001378:	40020400 	.word	0x40020400
 800137c:	20000450 	.word	0x20000450
 8001380:	200002a0 	.word	0x200002a0
 8001384:	40020800 	.word	0x40020800
 8001388:	20000330 	.word	0x20000330
 800138c:	20000258 	.word	0x20000258
 8001390:	200002e8 	.word	0x200002e8
 8001394:	20000378 	.word	0x20000378
 8001398:	200003c0 	.word	0x200003c0
 800139c:	20000510 	.word	0x20000510
 80013a0:	20000540 	.word	0x20000540
 80013a4:	20000570 	.word	0x20000570
 80013a8:	200005a0 	.word	0x200005a0
 80013ac:	200005d0 	.word	0x200005d0
 80013b0:	20000600 	.word	0x20000600
 80013b4:	20000630 	.word	0x20000630
 80013b8:	20000660 	.word	0x20000660
 80013bc:	0800c5a0 	.word	0x0800c5a0
 80013c0:	20000408 	.word	0x20000408

080013c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	; 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 031c 	add.w	r3, r7, #28
 80013ce:	2234      	movs	r2, #52	; 0x34
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f007 fc9d 	bl	8008d12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 0308 	add.w	r3, r7, #8
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	4b34      	ldr	r3, [pc, #208]	; (80014c0 <_Z18SystemClock_Configv+0xfc>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a33      	ldr	r2, [pc, #204]	; (80014c0 <_Z18SystemClock_Configv+0xfc>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
 80013f8:	4b31      	ldr	r3, [pc, #196]	; (80014c0 <_Z18SystemClock_Configv+0xfc>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	2300      	movs	r3, #0
 8001406:	603b      	str	r3, [r7, #0]
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <_Z18SystemClock_Configv+0x100>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <_Z18SystemClock_Configv+0x100>)
 800140e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <_Z18SystemClock_Configv+0x100>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800141c:	603b      	str	r3, [r7, #0]
 800141e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	2302      	movs	r3, #2
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001432:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001434:	230f      	movs	r3, #15
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001438:	23d8      	movs	r3, #216	; 0xd8
 800143a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800143c:	2302      	movs	r3, #2
 800143e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001440:	2302      	movs	r3, #2
 8001442:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001444:	2302      	movs	r3, #2
 8001446:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4618      	mov	r0, r3
 800144e:	f004 f945 	bl	80056dc <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	bf14      	ite	ne
 8001458:	2301      	movne	r3, #1
 800145a:	2300      	moveq	r3, #0
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001462:	f000 ffed 	bl	8002440 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001466:	f003 fe25 	bl	80050b4 <HAL_PWREx_EnableOverDrive>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800147a:	f000 ffe1 	bl	8002440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147e:	230f      	movs	r3, #15
 8001480:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001482:	2302      	movs	r3, #2
 8001484:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800148e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001494:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	2105      	movs	r1, #5
 800149c:	4618      	mov	r0, r3
 800149e:	f003 fe59 	bl	8005154 <HAL_RCC_ClockConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf14      	ite	ne
 80014a8:	2301      	movne	r3, #1
 80014aa:	2300      	moveq	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80014b2:	f000 ffc5 	bl	8002440 <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3750      	adds	r7, #80	; 0x50
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 80014ce:	4a16      	ldr	r2, [pc, #88]	; (8001528 <_ZL12MX_I2C1_Initv+0x60>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 80014d4:	4a15      	ldr	r2, [pc, #84]	; (800152c <_ZL12MX_I2C1_Initv+0x64>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <_ZL12MX_I2C1_Initv+0x5c>)
 8001506:	f002 fdb1 	bl	800406c <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	bf14      	ite	ne
 8001510:	2301      	movne	r3, #1
 8001512:	2300      	moveq	r3, #0
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800151a:	f000 ff91 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000204 	.word	0x20000204
 8001528:	40005400 	.word	0x40005400
 800152c:	000186a0 	.word	0x000186a0

08001530 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08c      	sub	sp, #48	; 0x30
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	2224      	movs	r2, #36	; 0x24
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f007 fbe7 	bl	8008d12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <_ZL12MX_TIM1_Initv+0xbc>)
 800154e:	4a28      	ldr	r2, [pc, #160]	; (80015f0 <_ZL12MX_TIM1_Initv+0xc0>)
 8001550:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <_ZL12MX_TIM1_Initv+0xbc>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b24      	ldr	r3, [pc, #144]	; (80015ec <_ZL12MX_TIM1_Initv+0xbc>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <_ZL12MX_TIM1_Initv+0xbc>)
 8001560:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001564:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b21      	ldr	r3, [pc, #132]	; (80015ec <_ZL12MX_TIM1_Initv+0xbc>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <_ZL12MX_TIM1_Initv+0xbc>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <_ZL12MX_TIM1_Initv+0xbc>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001578:	2303      	movs	r3, #3
 800157a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001580:	2301      	movs	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800158c:	2300      	movs	r3, #0
 800158e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001590:	2301      	movs	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	4619      	mov	r1, r3
 80015a2:	4812      	ldr	r0, [pc, #72]	; (80015ec <_ZL12MX_TIM1_Initv+0xbc>)
 80015a4:	f004 fd10 	bl	8005fc8 <HAL_TIM_Encoder_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	bf14      	ite	ne
 80015ae:	2301      	movne	r3, #1
 80015b0:	2300      	moveq	r3, #0
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 80015b8:	f000 ff42 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	4619      	mov	r1, r3
 80015c8:	4808      	ldr	r0, [pc, #32]	; (80015ec <_ZL12MX_TIM1_Initv+0xbc>)
 80015ca:	f005 fbef 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	bf14      	ite	ne
 80015d4:	2301      	movne	r3, #1
 80015d6:	2300      	moveq	r3, #0
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 80015de:	f000 ff2f 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	3730      	adds	r7, #48	; 0x30
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000258 	.word	0x20000258
 80015f0:	40010000 	.word	0x40010000

080015f4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fa:	f107 0320 	add.w	r3, r7, #32
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
 8001610:	611a      	str	r2, [r3, #16]
 8001612:	615a      	str	r2, [r3, #20]
 8001614:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001616:	4b42      	ldr	r3, [pc, #264]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 8001618:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800161c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45-1;
 800161e:	4b40      	ldr	r3, [pc, #256]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 8001620:	222c      	movs	r2, #44	; 0x2c
 8001622:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800162a:	4b3d      	ldr	r3, [pc, #244]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 800162c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001630:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b39      	ldr	r3, [pc, #228]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800163e:	4838      	ldr	r0, [pc, #224]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 8001640:	f004 fbaa 	bl	8005d98 <HAL_TIM_PWM_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	bf14      	ite	ne
 800164a:	2301      	movne	r3, #1
 800164c:	2300      	moveq	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8001654:	f000 fef4 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001660:	f107 0320 	add.w	r3, r7, #32
 8001664:	4619      	mov	r1, r3
 8001666:	482e      	ldr	r0, [pc, #184]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 8001668:	f005 fba0 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	bf14      	ite	ne
 8001672:	2301      	movne	r3, #1
 8001674:	2300      	moveq	r3, #0
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 800167c:	f000 fee0 	bl	8002440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001680:	2360      	movs	r3, #96	; 0x60
 8001682:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2200      	movs	r2, #0
 8001694:	4619      	mov	r1, r3
 8001696:	4822      	ldr	r0, [pc, #136]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 8001698:	f004 feba 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	bf14      	ite	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	2300      	moveq	r3, #0
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 80016ac:	f000 fec8 	bl	8002440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2204      	movs	r2, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	481a      	ldr	r0, [pc, #104]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 80016b8:	f004 feaa 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80016cc:	f000 feb8 	bl	8002440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	2208      	movs	r2, #8
 80016d4:	4619      	mov	r1, r3
 80016d6:	4812      	ldr	r0, [pc, #72]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 80016d8:	f004 fe9a 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	bf14      	ite	ne
 80016e2:	2301      	movne	r3, #1
 80016e4:	2300      	moveq	r3, #0
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 80016ec:	f000 fea8 	bl	8002440 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	220c      	movs	r2, #12
 80016f4:	4619      	mov	r1, r3
 80016f6:	480a      	ldr	r0, [pc, #40]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 80016f8:	f004 fe8a 	bl	8006410 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf14      	ite	ne
 8001702:	2301      	movne	r3, #1
 8001704:	2300      	moveq	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <_ZL12MX_TIM2_Initv+0x11c>
  {
    Error_Handler();
 800170c:	f000 fe98 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001710:	4803      	ldr	r0, [pc, #12]	; (8001720 <_ZL12MX_TIM2_Initv+0x12c>)
 8001712:	f001 ff45 	bl	80035a0 <HAL_TIM_MspPostInit>

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	; 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200002a0 	.word	0x200002a0

08001724 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08c      	sub	sp, #48	; 0x30
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2224      	movs	r2, #36	; 0x24
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f007 faed 	bl	8008d12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001740:	4b25      	ldr	r3, [pc, #148]	; (80017d8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001742:	4a26      	ldr	r2, [pc, #152]	; (80017dc <_ZL12MX_TIM3_Initv+0xb8>)
 8001744:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001746:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174c:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <_ZL12MX_TIM3_Initv+0xb4>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001754:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001758:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <_ZL12MX_TIM3_Initv+0xb4>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001762:	2200      	movs	r2, #0
 8001764:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001766:	2303      	movs	r3, #3
 8001768:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800176e:	2301      	movs	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001772:	2300      	movs	r3, #0
 8001774:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800177e:	2301      	movs	r3, #1
 8001780:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800178a:	f107 030c 	add.w	r3, r7, #12
 800178e:	4619      	mov	r1, r3
 8001790:	4811      	ldr	r0, [pc, #68]	; (80017d8 <_ZL12MX_TIM3_Initv+0xb4>)
 8001792:	f004 fc19 	bl	8005fc8 <HAL_TIM_Encoder_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 80017a6:	f000 fe4b 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4619      	mov	r1, r3
 80017b6:	4808      	ldr	r0, [pc, #32]	; (80017d8 <_ZL12MX_TIM3_Initv+0xb4>)
 80017b8:	f005 faf8 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	bf14      	ite	ne
 80017c2:	2301      	movne	r3, #1
 80017c4:	2300      	moveq	r3, #0
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 80017cc:	f000 fe38 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	3730      	adds	r7, #48	; 0x30
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	200002e8 	.word	0x200002e8
 80017dc:	40000400 	.word	0x40000400

080017e0 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017fc:	4b25      	ldr	r3, [pc, #148]	; (8001894 <_ZL12MX_TIM4_Initv+0xb4>)
 80017fe:	4a26      	ldr	r2, [pc, #152]	; (8001898 <_ZL12MX_TIM4_Initv+0xb8>)
 8001800:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 900-1;
 8001802:	4b24      	ldr	r3, [pc, #144]	; (8001894 <_ZL12MX_TIM4_Initv+0xb4>)
 8001804:	f240 3283 	movw	r2, #899	; 0x383
 8001808:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <_ZL12MX_TIM4_Initv+0xb4>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <_ZL12MX_TIM4_Initv+0xb4>)
 8001812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001816:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <_ZL12MX_TIM4_Initv+0xb4>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <_ZL12MX_TIM4_Initv+0xb4>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001824:	481b      	ldr	r0, [pc, #108]	; (8001894 <_ZL12MX_TIM4_Initv+0xb4>)
 8001826:	f004 f9f7 	bl	8005c18 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf14      	ite	ne
 8001830:	2301      	movne	r3, #1
 8001832:	2300      	moveq	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 800183a:	f000 fe01 	bl	8002440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001842:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4619      	mov	r1, r3
 800184a:	4812      	ldr	r0, [pc, #72]	; (8001894 <_ZL12MX_TIM4_Initv+0xb4>)
 800184c:	f004 fea2 	bl	8006594 <HAL_TIM_ConfigClockSource>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf14      	ite	ne
 8001856:	2301      	movne	r3, #1
 8001858:	2300      	moveq	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 8001860:	f000 fdee 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800186c:	463b      	mov	r3, r7
 800186e:	4619      	mov	r1, r3
 8001870:	4808      	ldr	r0, [pc, #32]	; (8001894 <_ZL12MX_TIM4_Initv+0xb4>)
 8001872:	f005 fa9b 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8001886:	f000 fddb 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000330 	.word	0x20000330
 8001898:	40000800 	.word	0x40000800

0800189c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	2224      	movs	r2, #36	; 0x24
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f007 fa31 	bl	8008d12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018b8:	4b25      	ldr	r3, [pc, #148]	; (8001950 <_ZL12MX_TIM5_Initv+0xb4>)
 80018ba:	4a26      	ldr	r2, [pc, #152]	; (8001954 <_ZL12MX_TIM5_Initv+0xb8>)
 80018bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80018be:	4b24      	ldr	r3, [pc, #144]	; (8001950 <_ZL12MX_TIM5_Initv+0xb4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <_ZL12MX_TIM5_Initv+0xb4>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <_ZL12MX_TIM5_Initv+0xb4>)
 80018cc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80018d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <_ZL12MX_TIM5_Initv+0xb4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <_ZL12MX_TIM5_Initv+0xb4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018de:	2303      	movs	r3, #3
 80018e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018e6:	2301      	movs	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018f2:	2300      	movs	r3, #0
 80018f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f6:	2301      	movs	r3, #1
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	4619      	mov	r1, r3
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <_ZL12MX_TIM5_Initv+0xb4>)
 800190a:	f004 fb5d 	bl	8005fc8 <HAL_TIM_Encoder_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf14      	ite	ne
 8001914:	2301      	movne	r3, #1
 8001916:	2300      	moveq	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 800191e:	f000 fd8f 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	4619      	mov	r1, r3
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <_ZL12MX_TIM5_Initv+0xb4>)
 8001930:	f005 fa3c 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	bf14      	ite	ne
 800193a:	2301      	movne	r3, #1
 800193c:	2300      	moveq	r3, #0
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8001944:	f000 fd7c 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	3730      	adds	r7, #48	; 0x30
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000378 	.word	0x20000378
 8001954:	40000c00 	.word	0x40000c00

08001958 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b08c      	sub	sp, #48	; 0x30
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	2224      	movs	r2, #36	; 0x24
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f007 f9d3 	bl	8008d12 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001974:	4b27      	ldr	r3, [pc, #156]	; (8001a14 <_ZL12MX_TIM8_Initv+0xbc>)
 8001976:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <_ZL12MX_TIM8_Initv+0xc0>)
 8001978:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800197a:	4b26      	ldr	r3, [pc, #152]	; (8001a14 <_ZL12MX_TIM8_Initv+0xbc>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <_ZL12MX_TIM8_Initv+0xbc>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 60000;
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <_ZL12MX_TIM8_Initv+0xbc>)
 8001988:	f64e 2260 	movw	r2, #60000	; 0xea60
 800198c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198e:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <_ZL12MX_TIM8_Initv+0xbc>)
 8001990:	2200      	movs	r2, #0
 8001992:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001994:	4b1f      	ldr	r3, [pc, #124]	; (8001a14 <_ZL12MX_TIM8_Initv+0xbc>)
 8001996:	2200      	movs	r2, #0
 8001998:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800199a:	4b1e      	ldr	r3, [pc, #120]	; (8001a14 <_ZL12MX_TIM8_Initv+0xbc>)
 800199c:	2200      	movs	r2, #0
 800199e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019a0:	2303      	movs	r3, #3
 80019a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019a4:	2300      	movs	r3, #0
 80019a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019a8:	2301      	movs	r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019b8:	2301      	movs	r3, #1
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	4619      	mov	r1, r3
 80019ca:	4812      	ldr	r0, [pc, #72]	; (8001a14 <_ZL12MX_TIM8_Initv+0xbc>)
 80019cc:	f004 fafc 	bl	8005fc8 <HAL_TIM_Encoder_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf14      	ite	ne
 80019d6:	2301      	movne	r3, #1
 80019d8:	2300      	moveq	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <_ZL12MX_TIM8_Initv+0x8c>
  {
    Error_Handler();
 80019e0:	f000 fd2e 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4808      	ldr	r0, [pc, #32]	; (8001a14 <_ZL12MX_TIM8_Initv+0xbc>)
 80019f2:	f005 f9db 	bl	8006dac <HAL_TIMEx_MasterConfigSynchronization>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bf14      	ite	ne
 80019fc:	2301      	movne	r3, #1
 80019fe:	2300      	moveq	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 8001a06:	f000 fd1b 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3730      	adds	r7, #48	; 0x30
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	200003c0 	.word	0x200003c0
 8001a18:	40010400 	.word	0x40010400

08001a1c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a20:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a22:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <_ZL19MX_USART1_UART_Initv+0x58>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a52:	4807      	ldr	r0, [pc, #28]	; (8001a70 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a54:	f005 fa3a 	bl	8006ecc <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	bf14      	ite	ne
 8001a5e:	2301      	movne	r3, #1
 8001a60:	2300      	moveq	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001a68:	f000 fcea 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	20000408 	.word	0x20000408
 8001a74:	40011000 	.word	0x40011000

08001a78 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0304 	and.w	r3, r3, #4
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a29      	ldr	r2, [pc, #164]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a22      	ldr	r2, [pc, #136]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	60bb      	str	r3, [r7, #8]
 8001ae0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
 8001ae6:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <_ZL12MX_GPIO_Initv+0xe0>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	607b      	str	r3, [r7, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_INA_Pin|M2_INA_Pin|M3_INA_Pin|M4_INA_Pin, GPIO_PIN_RESET);
 8001afe:	2200      	movs	r2, #0
 8001b00:	210f      	movs	r1, #15
 8001b02:	4816      	ldr	r0, [pc, #88]	; (8001b5c <_ZL12MX_GPIO_Initv+0xe4>)
 8001b04:	f002 fa7e 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001b0e:	4814      	ldr	r0, [pc, #80]	; (8001b60 <_ZL12MX_GPIO_Initv+0xe8>)
 8001b10:	f002 fa78 	bl	8004004 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_INA_Pin M2_INA_Pin M3_INA_Pin M4_INA_Pin */
  GPIO_InitStruct.Pin = M1_INA_Pin|M2_INA_Pin|M3_INA_Pin|M4_INA_Pin;
 8001b14:	230f      	movs	r3, #15
 8001b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	480c      	ldr	r0, [pc, #48]	; (8001b5c <_ZL12MX_GPIO_Initv+0xe4>)
 8001b2c:	f002 f8d6 	bl	8003cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001b30:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4805      	ldr	r0, [pc, #20]	; (8001b60 <_ZL12MX_GPIO_Initv+0xe8>)
 8001b4a:	f002 f8c7 	bl	8003cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b4e:	bf00      	nop
 8001b50:	3728      	adds	r7, #40	; 0x28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	40020800 	.word	0x40020800
 8001b60:	40020400 	.word	0x40020400
 8001b64:	00000000 	.word	0x00000000

08001b68 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* Encoder */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7e      	ldr	r2, [pc, #504]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	f040 80f0 	bne.w	8001d5c <HAL_TIM_PeriodElapsedCallback+0x1f4>
		motor_front_left_.delta_encoder = htim1.Instance->CNT - 30000;
 8001b7c:	4b7d      	ldr	r3, [pc, #500]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001b88:	3b30      	subs	r3, #48	; 0x30
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	b21a      	sxth	r2, r3
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001b90:	801a      	strh	r2, [r3, #0]
		motor_front_right_.delta_encoder = htim3.Instance->CNT - 30000;
 8001b92:	4b7a      	ldr	r3, [pc, #488]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001b9e:	3b30      	subs	r3, #48	; 0x30
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	b21a      	sxth	r2, r3
 8001ba4:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001ba6:	801a      	strh	r2, [r3, #0]
		motor_rear_left_.delta_encoder = htim5.Instance->CNT - 30000;
 8001ba8:	4b76      	ldr	r3, [pc, #472]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001bb4:	3b30      	subs	r3, #48	; 0x30
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	4b73      	ldr	r3, [pc, #460]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001bbc:	801a      	strh	r2, [r3, #0]
		motor_rear_right_.delta_encoder = htim8.Instance->CNT - 30000;
 8001bbe:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8001bca:	3b30      	subs	r3, #48	; 0x30
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001bd2:	801a      	strh	r2, [r3, #0]

		motor_front_left_.pps = (double) motor_front_left_.delta_encoder * 100.0f;
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fcc2 	bl	8000564 <__aeabi_i2d>
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b6b      	ldr	r3, [pc, #428]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001be6:	f7fe fd27 	bl	8000638 <__aeabi_dmul>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4962      	ldr	r1, [pc, #392]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001bf0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_front_right_.pps = (double) motor_front_right_.delta_encoder * 100.0f;
 8001bf4:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fcb2 	bl	8000564 <__aeabi_i2d>
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4b63      	ldr	r3, [pc, #396]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001c06:	f7fe fd17 	bl	8000638 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	495c      	ldr	r1, [pc, #368]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001c10:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_rear_left_.pps = (double) motor_rear_left_.delta_encoder * 100.0f;
 8001c14:	4b5c      	ldr	r3, [pc, #368]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe fca2 	bl	8000564 <__aeabi_i2d>
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b5b      	ldr	r3, [pc, #364]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001c26:	f7fe fd07 	bl	8000638 <__aeabi_dmul>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4956      	ldr	r1, [pc, #344]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001c30:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_rear_right_.pps = (double) motor_rear_right_.delta_encoder * 100.0f;
 8001c34:	4b56      	ldr	r3, [pc, #344]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fc92 	bl	8000564 <__aeabi_i2d>
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	4b53      	ldr	r3, [pc, #332]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001c46:	f7fe fcf7 	bl	8000638 <__aeabi_dmul>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4950      	ldr	r1, [pc, #320]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001c50:	e9c1 2302 	strd	r2, r3, [r1, #8]

		motor_front_left_.rpm = motor_front_left_.pps * 60 / (448.0f * 43.8f * 4.0f);
 8001c54:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001c56:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b4e      	ldr	r3, [pc, #312]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001c60:	f7fe fcea 	bl	8000638 <__aeabi_dmul>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	a33e      	add	r3, pc, #248	; (adr r3, 8001d68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fe0b 	bl	800088c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	493f      	ldr	r1, [pc, #252]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001c7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_front_right_.rpm = motor_front_right_.pps * 60 / (448.0f * 43.8f * 4.0f);
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001c82:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001c8c:	f7fe fcd4 	bl	8000638 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	a333      	add	r3, pc, #204	; (adr r3, 8001d68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9e:	f7fe fdf5 	bl	800088c <__aeabi_ddiv>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4936      	ldr	r1, [pc, #216]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001ca8:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_rear_left_.rpm = motor_rear_left_.pps * 60 / (448.0f * 43.8f * 4.0f);
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001cae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	4b38      	ldr	r3, [pc, #224]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	a328      	add	r3, pc, #160	; (adr r3, 8001d68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cca:	f7fe fddf 	bl	800088c <__aeabi_ddiv>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	492d      	ldr	r1, [pc, #180]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001cd4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_rear_right_.rpm = motor_rear_right_.pps * 60 / (448.0f * 43.8f * 4.0f);
 8001cd8:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001cda:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cde:	f04f 0200 	mov.w	r2, #0
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001ce4:	f7fe fca8 	bl	8000638 <__aeabi_dmul>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	a31d      	add	r3, pc, #116	; (adr r3, 8001d68 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf6:	f7fe fdc9 	bl	800088c <__aeabi_ddiv>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4924      	ldr	r1, [pc, #144]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d00:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_front_left_.speed_pv = motor_front_left_.rpm;
 8001d04:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001d06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d0a:	491b      	ldr	r1, [pc, #108]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001d0c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_front_right_.speed_pv = motor_front_right_.rpm;
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d12:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d16:	491a      	ldr	r1, [pc, #104]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001d18:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_rear_left_.speed_pv = motor_rear_left_.rpm;
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d22:	4919      	ldr	r1, [pc, #100]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8001d24:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_rear_right_.speed_pv = motor_rear_right_.rpm;
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d2e:	4918      	ldr	r1, [pc, #96]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8001d30:	e9c1 2306 	strd	r2, r3, [r1, #24]

		htim1.Instance->CNT = 30000;
 8001d34:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24
		htim3.Instance->CNT = 30000;
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
		htim5.Instance->CNT = 30000;
 8001d48:	4b0e      	ldr	r3, [pc, #56]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
		htim8.Instance->CNT = 30000;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f247 5230 	movw	r2, #30000	; 0x7530
 8001d5a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	f3af 8000 	nop.w
 8001d68:	a0000000 	.word	0xa0000000
 8001d6c:	40f32999 	.word	0x40f32999
 8001d70:	40000800 	.word	0x40000800
 8001d74:	20000258 	.word	0x20000258
 8001d78:	20000510 	.word	0x20000510
 8001d7c:	200002e8 	.word	0x200002e8
 8001d80:	20000540 	.word	0x20000540
 8001d84:	20000378 	.word	0x20000378
 8001d88:	20000570 	.word	0x20000570
 8001d8c:	200003c0 	.word	0x200003c0
 8001d90:	200005a0 	.word	0x200005a0
 8001d94:	40590000 	.word	0x40590000
 8001d98:	404e0000 	.word	0x404e0000
 8001d9c:	00000000 	.word	0x00000000

08001da0 <_Z22motor_front_left_drived>:

/* Motor */
void motor_front_left_drive(double dt) {
 8001da0:	b5b0      	push	{r4, r5, r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_front_left_.speed_sp, motor_front_left_.speed_pv, &pid_data_front_left_, dt);
 8001db6:	4b5a      	ldr	r3, [pc, #360]	; (8001f20 <_Z22motor_front_left_drived+0x180>)
 8001db8:	ed93 7b08 	vldr	d7, [r3, #32]
 8001dbc:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <_Z22motor_front_left_drived+0x180>)
 8001dbe:	ed93 6b06 	vldr	d6, [r3, #24]
 8001dc2:	ed97 2b00 	vldr	d2, [r7]
 8001dc6:	4857      	ldr	r0, [pc, #348]	; (8001f24 <_Z22motor_front_left_drived+0x184>)
 8001dc8:	eeb0 1a46 	vmov.f32	s2, s12
 8001dcc:	eef0 1a66 	vmov.f32	s3, s13
 8001dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd4:	eef0 0a67 	vmov.f32	s1, s15
 8001dd8:	f000 fb5a 	bl	8002490 <_Z12calculatePIDddP16PID_Data_Typedefd>
 8001ddc:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <_Z22motor_front_left_drived+0x188>)
 8001de6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001dea:	f7fe feb5 	bl	8000b58 <__aeabi_dcmpgt>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <_Z22motor_front_left_drived+0x5e>
		speed_command = 1000.0;
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	4b4b      	ldr	r3, [pc, #300]	; (8001f28 <_Z22motor_front_left_drived+0x188>)
 8001dfa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 8001dfe:	a346      	add	r3, pc, #280	; (adr r3, 8001f18 <_Z22motor_front_left_drived+0x178>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e08:	f7fe fe88 	bl	8000b1c <__aeabi_dcmplt>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <_Z22motor_front_left_drived+0x7c>
		speed_command = -1000.0;
 8001e12:	a341      	add	r3, pc, #260	; (adr r3, 8001f18 <_Z22motor_front_left_drived+0x178>)
 8001e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e18:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_front_left_.speed_command = speed_command;
 8001e1c:	4940      	ldr	r1, [pc, #256]	; (8001f20 <_Z22motor_front_left_drived+0x180>)
 8001e1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e22:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (speed_command > 0.0 && motor_front_left_.speed_sp > 0.0) {
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e32:	f7fe fe91 	bl	8000b58 <__aeabi_dcmpgt>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d019      	beq.n	8001e70 <_Z22motor_front_left_drived+0xd0>
 8001e3c:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <_Z22motor_front_left_drived+0x180>)
 8001e3e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	f7fe fe85 	bl	8000b58 <__aeabi_dcmpgt>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00d      	beq.n	8001e70 <_Z22motor_front_left_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2101      	movs	r1, #1
 8001e58:	4834      	ldr	r0, [pc, #208]	; (8001f2c <_Z22motor_front_left_drived+0x18c>)
 8001e5a:	f002 f8d3 	bl	8004004 <HAL_GPIO_WritePin>
		TIM2->CCR1 = (int) speed_command;
 8001e5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e62:	f7fe fe99 	bl	8000b98 <__aeabi_d2iz>
 8001e66:	4602      	mov	r2, r0
 8001e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e6e:	e04f      	b.n	8001f10 <_Z22motor_front_left_drived+0x170>
	} else if (speed_command < 0.0 && motor_front_left_.speed_sp < 0.0) {
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e7c:	f7fe fe4e 	bl	8000b1c <__aeabi_dcmplt>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01f      	beq.n	8001ec6 <_Z22motor_front_left_drived+0x126>
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <_Z22motor_front_left_drived+0x180>)
 8001e88:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	f7fe fe42 	bl	8000b1c <__aeabi_dcmplt>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d013      	beq.n	8001ec6 <_Z22motor_front_left_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	4822      	ldr	r0, [pc, #136]	; (8001f2c <_Z22motor_front_left_drived+0x18c>)
 8001ea4:	f002 f8ae 	bl	8004004 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8001ea8:	68bc      	ldr	r4, [r7, #8]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001eb0:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR1 = (int) speed_command;
 8001eb4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eb8:	f7fe fe6e 	bl	8000b98 <__aeabi_d2iz>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ec2:	635a      	str	r2, [r3, #52]	; 0x34
 8001ec4:	e024      	b.n	8001f10 <_Z22motor_front_left_drived+0x170>
	} else if (speed_command == 0) {
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ed2:	f7fe fe19 	bl	8000b08 <__aeabi_dcmpeq>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00c      	beq.n	8001ef6 <_Z22motor_front_left_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001edc:	2201      	movs	r2, #1
 8001ede:	2101      	movs	r1, #1
 8001ee0:	4812      	ldr	r0, [pc, #72]	; (8001f2c <_Z22motor_front_left_drived+0x18c>)
 8001ee2:	f002 f88f 	bl	8004004 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_left_);
 8001ee6:	480f      	ldr	r0, [pc, #60]	; (8001f24 <_Z22motor_front_left_drived+0x184>)
 8001ee8:	f000 fb98 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR1 = 0;
 8001eec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
		resetPIDData(&pid_data_front_left_);
		TIM2->CCR1 = 0;
	}
}
 8001ef4:	e00c      	b.n	8001f10 <_Z22motor_front_left_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2101      	movs	r1, #1
 8001efa:	480c      	ldr	r0, [pc, #48]	; (8001f2c <_Z22motor_front_left_drived+0x18c>)
 8001efc:	f002 f882 	bl	8004004 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_left_);
 8001f00:	4808      	ldr	r0, [pc, #32]	; (8001f24 <_Z22motor_front_left_drived+0x184>)
 8001f02:	f000 fb8b 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR1 = 0;
 8001f06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001f0e:	e7ff      	b.n	8001f10 <_Z22motor_front_left_drived+0x170>
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bdb0      	pop	{r4, r5, r7, pc}
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	c08f4000 	.word	0xc08f4000
 8001f20:	20000510 	.word	0x20000510
 8001f24:	200005d0 	.word	0x200005d0
 8001f28:	408f4000 	.word	0x408f4000
 8001f2c:	40020800 	.word	0x40020800

08001f30 <_Z23motor_front_right_drived>:

void motor_front_right_drive(double dt) {
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_front_right_.speed_sp, motor_front_right_.speed_pv, &pid_data_front_right_, dt);
 8001f46:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <_Z23motor_front_right_drived+0x180>)
 8001f48:	ed93 7b08 	vldr	d7, [r3, #32]
 8001f4c:	4b58      	ldr	r3, [pc, #352]	; (80020b0 <_Z23motor_front_right_drived+0x180>)
 8001f4e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001f52:	ed97 2b00 	vldr	d2, [r7]
 8001f56:	4857      	ldr	r0, [pc, #348]	; (80020b4 <_Z23motor_front_right_drived+0x184>)
 8001f58:	eeb0 1a46 	vmov.f32	s2, s12
 8001f5c:	eef0 1a66 	vmov.f32	s3, s13
 8001f60:	eeb0 0a47 	vmov.f32	s0, s14
 8001f64:	eef0 0a67 	vmov.f32	s1, s15
 8001f68:	f000 fa92 	bl	8002490 <_Z12calculatePIDddP16PID_Data_Typedefd>
 8001f6c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8001f70:	f04f 0200 	mov.w	r2, #0
 8001f74:	4b50      	ldr	r3, [pc, #320]	; (80020b8 <_Z23motor_front_right_drived+0x188>)
 8001f76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f7a:	f7fe fded 	bl	8000b58 <__aeabi_dcmpgt>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <_Z23motor_front_right_drived+0x5e>
		speed_command = 1000.0;
 8001f84:	f04f 0200 	mov.w	r2, #0
 8001f88:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <_Z23motor_front_right_drived+0x188>)
 8001f8a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 8001f8e:	a346      	add	r3, pc, #280	; (adr r3, 80020a8 <_Z23motor_front_right_drived+0x178>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f98:	f7fe fdc0 	bl	8000b1c <__aeabi_dcmplt>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d004      	beq.n	8001fac <_Z23motor_front_right_drived+0x7c>
		speed_command = -1000.0;
 8001fa2:	a341      	add	r3, pc, #260	; (adr r3, 80020a8 <_Z23motor_front_right_drived+0x178>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_front_right_.speed_command = speed_command;
 8001fac:	4940      	ldr	r1, [pc, #256]	; (80020b0 <_Z23motor_front_right_drived+0x180>)
 8001fae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fb2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (speed_command > 0.0 && motor_front_right_.speed_sp > 0.0) {
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fc2:	f7fe fdc9 	bl	8000b58 <__aeabi_dcmpgt>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d019      	beq.n	8002000 <_Z23motor_front_right_drived+0xd0>
 8001fcc:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <_Z23motor_front_right_drived+0x180>)
 8001fce:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	f7fe fdbd 	bl	8000b58 <__aeabi_dcmpgt>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <_Z23motor_front_right_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2102      	movs	r1, #2
 8001fe8:	4834      	ldr	r0, [pc, #208]	; (80020bc <_Z23motor_front_right_drived+0x18c>)
 8001fea:	f002 f80b 	bl	8004004 <HAL_GPIO_WritePin>
		TIM2->CCR2 = (int) speed_command;
 8001fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ff2:	f7fe fdd1 	bl	8000b98 <__aeabi_d2iz>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ffc:	639a      	str	r2, [r3, #56]	; 0x38
 8001ffe:	e04f      	b.n	80020a0 <_Z23motor_front_right_drived+0x170>
	} else if (speed_command < 0.0 && motor_front_right_.speed_sp < 0.0) {
 8002000:	f04f 0200 	mov.w	r2, #0
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800200c:	f7fe fd86 	bl	8000b1c <__aeabi_dcmplt>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d01f      	beq.n	8002056 <_Z23motor_front_right_drived+0x126>
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <_Z23motor_front_right_drived+0x180>)
 8002018:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800201c:	f04f 0200 	mov.w	r2, #0
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	f7fe fd7a 	bl	8000b1c <__aeabi_dcmplt>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d013      	beq.n	8002056 <_Z23motor_front_right_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	2102      	movs	r1, #2
 8002032:	4822      	ldr	r0, [pc, #136]	; (80020bc <_Z23motor_front_right_drived+0x18c>)
 8002034:	f001 ffe6 	bl	8004004 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8002038:	68bc      	ldr	r4, [r7, #8]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002040:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR2 = (int) speed_command;
 8002044:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002048:	f7fe fda6 	bl	8000b98 <__aeabi_d2iz>
 800204c:	4602      	mov	r2, r0
 800204e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002052:	639a      	str	r2, [r3, #56]	; 0x38
 8002054:	e024      	b.n	80020a0 <_Z23motor_front_right_drived+0x170>
	} else if (speed_command == 0) {
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002062:	f7fe fd51 	bl	8000b08 <__aeabi_dcmpeq>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00c      	beq.n	8002086 <_Z23motor_front_right_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2102      	movs	r1, #2
 8002070:	4812      	ldr	r0, [pc, #72]	; (80020bc <_Z23motor_front_right_drived+0x18c>)
 8002072:	f001 ffc7 	bl	8004004 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_right_);
 8002076:	480f      	ldr	r0, [pc, #60]	; (80020b4 <_Z23motor_front_right_drived+0x184>)
 8002078:	f000 fad0 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR2 = 0;
 800207c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002080:	2200      	movs	r2, #0
 8002082:	639a      	str	r2, [r3, #56]	; 0x38
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
		resetPIDData(&pid_data_front_right_);
		TIM2->CCR2 = 0;
	}
}
 8002084:	e00c      	b.n	80020a0 <_Z23motor_front_right_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002086:	2201      	movs	r2, #1
 8002088:	2102      	movs	r1, #2
 800208a:	480c      	ldr	r0, [pc, #48]	; (80020bc <_Z23motor_front_right_drived+0x18c>)
 800208c:	f001 ffba 	bl	8004004 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_right_);
 8002090:	4808      	ldr	r0, [pc, #32]	; (80020b4 <_Z23motor_front_right_drived+0x184>)
 8002092:	f000 fac3 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR2 = 0;
 8002096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800209a:	2200      	movs	r2, #0
 800209c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800209e:	e7ff      	b.n	80020a0 <_Z23motor_front_right_drived+0x170>
 80020a0:	bf00      	nop
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bdb0      	pop	{r4, r5, r7, pc}
 80020a8:	00000000 	.word	0x00000000
 80020ac:	c08f4000 	.word	0xc08f4000
 80020b0:	20000540 	.word	0x20000540
 80020b4:	20000600 	.word	0x20000600
 80020b8:	408f4000 	.word	0x408f4000
 80020bc:	40020800 	.word	0x40020800

080020c0 <_Z21motor_rear_left_drived>:

void motor_rear_left_drive(double dt) {
 80020c0:	b5b0      	push	{r4, r5, r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 80020ca:	f04f 0200 	mov.w	r2, #0
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_rear_left_.speed_sp, motor_rear_left_.speed_pv, &pid_data_rear_left_, dt);
 80020d6:	4b5a      	ldr	r3, [pc, #360]	; (8002240 <_Z21motor_rear_left_drived+0x180>)
 80020d8:	ed93 7b08 	vldr	d7, [r3, #32]
 80020dc:	4b58      	ldr	r3, [pc, #352]	; (8002240 <_Z21motor_rear_left_drived+0x180>)
 80020de:	ed93 6b06 	vldr	d6, [r3, #24]
 80020e2:	ed97 2b00 	vldr	d2, [r7]
 80020e6:	4857      	ldr	r0, [pc, #348]	; (8002244 <_Z21motor_rear_left_drived+0x184>)
 80020e8:	eeb0 1a46 	vmov.f32	s2, s12
 80020ec:	eef0 1a66 	vmov.f32	s3, s13
 80020f0:	eeb0 0a47 	vmov.f32	s0, s14
 80020f4:	eef0 0a67 	vmov.f32	s1, s15
 80020f8:	f000 f9ca 	bl	8002490 <_Z12calculatePIDddP16PID_Data_Typedefd>
 80020fc:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	4b50      	ldr	r3, [pc, #320]	; (8002248 <_Z21motor_rear_left_drived+0x188>)
 8002106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800210a:	f7fe fd25 	bl	8000b58 <__aeabi_dcmpgt>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <_Z21motor_rear_left_drived+0x5e>
		speed_command = 1000.0;
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <_Z21motor_rear_left_drived+0x188>)
 800211a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 800211e:	a346      	add	r3, pc, #280	; (adr r3, 8002238 <_Z21motor_rear_left_drived+0x178>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002128:	f7fe fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d004      	beq.n	800213c <_Z21motor_rear_left_drived+0x7c>
		speed_command = -1000.0;
 8002132:	a341      	add	r3, pc, #260	; (adr r3, 8002238 <_Z21motor_rear_left_drived+0x178>)
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_rear_left_.speed_command = speed_command;
 800213c:	4940      	ldr	r1, [pc, #256]	; (8002240 <_Z21motor_rear_left_drived+0x180>)
 800213e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002142:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (speed_command > 0.0 && motor_rear_left_.speed_sp > 0.0) {
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002152:	f7fe fd01 	bl	8000b58 <__aeabi_dcmpgt>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d019      	beq.n	8002190 <_Z21motor_rear_left_drived+0xd0>
 800215c:	4b38      	ldr	r3, [pc, #224]	; (8002240 <_Z21motor_rear_left_drived+0x180>)
 800215e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	f04f 0300 	mov.w	r3, #0
 800216a:	f7fe fcf5 	bl	8000b58 <__aeabi_dcmpgt>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00d      	beq.n	8002190 <_Z21motor_rear_left_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	2104      	movs	r1, #4
 8002178:	4834      	ldr	r0, [pc, #208]	; (800224c <_Z21motor_rear_left_drived+0x18c>)
 800217a:	f001 ff43 	bl	8004004 <HAL_GPIO_WritePin>
		TIM2->CCR3 = (int) speed_command;
 800217e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002182:	f7fe fd09 	bl	8000b98 <__aeabi_d2iz>
 8002186:	4602      	mov	r2, r0
 8002188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800218c:	63da      	str	r2, [r3, #60]	; 0x3c
 800218e:	e04f      	b.n	8002230 <_Z21motor_rear_left_drived+0x170>
	} else if (speed_command < 0.0 && motor_rear_left_.speed_sp < 0.0) {
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800219c:	f7fe fcbe 	bl	8000b1c <__aeabi_dcmplt>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01f      	beq.n	80021e6 <_Z21motor_rear_left_drived+0x126>
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <_Z21motor_rear_left_drived+0x180>)
 80021a8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	f7fe fcb2 	bl	8000b1c <__aeabi_dcmplt>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d013      	beq.n	80021e6 <_Z21motor_rear_left_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	2104      	movs	r1, #4
 80021c2:	4822      	ldr	r0, [pc, #136]	; (800224c <_Z21motor_rear_left_drived+0x18c>)
 80021c4:	f001 ff1e 	bl	8004004 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 80021c8:	68bc      	ldr	r4, [r7, #8]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021d0:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR3 = (int) speed_command;
 80021d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021d8:	f7fe fcde 	bl	8000b98 <__aeabi_d2iz>
 80021dc:	4602      	mov	r2, r0
 80021de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80021e4:	e024      	b.n	8002230 <_Z21motor_rear_left_drived+0x170>
	} else if (speed_command == 0) {
 80021e6:	f04f 0200 	mov.w	r2, #0
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021f2:	f7fe fc89 	bl	8000b08 <__aeabi_dcmpeq>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00c      	beq.n	8002216 <_Z21motor_rear_left_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80021fc:	2201      	movs	r2, #1
 80021fe:	2104      	movs	r1, #4
 8002200:	4812      	ldr	r0, [pc, #72]	; (800224c <_Z21motor_rear_left_drived+0x18c>)
 8002202:	f001 feff 	bl	8004004 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_left_);
 8002206:	480f      	ldr	r0, [pc, #60]	; (8002244 <_Z21motor_rear_left_drived+0x184>)
 8002208:	f000 fa08 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR3 = 0;
 800220c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002210:	2200      	movs	r2, #0
 8002212:	63da      	str	r2, [r3, #60]	; 0x3c
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
		resetPIDData(&pid_data_rear_left_);
		TIM2->CCR3 = 0;
	}
}
 8002214:	e00c      	b.n	8002230 <_Z21motor_rear_left_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002216:	2201      	movs	r2, #1
 8002218:	2104      	movs	r1, #4
 800221a:	480c      	ldr	r0, [pc, #48]	; (800224c <_Z21motor_rear_left_drived+0x18c>)
 800221c:	f001 fef2 	bl	8004004 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_left_);
 8002220:	4808      	ldr	r0, [pc, #32]	; (8002244 <_Z21motor_rear_left_drived+0x184>)
 8002222:	f000 f9fb 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR3 = 0;
 8002226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800222a:	2200      	movs	r2, #0
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800222e:	e7ff      	b.n	8002230 <_Z21motor_rear_left_drived+0x170>
 8002230:	bf00      	nop
 8002232:	3710      	adds	r7, #16
 8002234:	46bd      	mov	sp, r7
 8002236:	bdb0      	pop	{r4, r5, r7, pc}
 8002238:	00000000 	.word	0x00000000
 800223c:	c08f4000 	.word	0xc08f4000
 8002240:	20000570 	.word	0x20000570
 8002244:	20000630 	.word	0x20000630
 8002248:	408f4000 	.word	0x408f4000
 800224c:	40020800 	.word	0x40020800

08002250 <_Z22motor_rear_right_drived>:

void motor_rear_right_drive(double dt) {
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_rear_right_.speed_sp, motor_rear_right_.speed_pv, &pid_data_rear_right_, dt);
 8002266:	4b5a      	ldr	r3, [pc, #360]	; (80023d0 <_Z22motor_rear_right_drived+0x180>)
 8002268:	ed93 7b08 	vldr	d7, [r3, #32]
 800226c:	4b58      	ldr	r3, [pc, #352]	; (80023d0 <_Z22motor_rear_right_drived+0x180>)
 800226e:	ed93 6b06 	vldr	d6, [r3, #24]
 8002272:	ed97 2b00 	vldr	d2, [r7]
 8002276:	4857      	ldr	r0, [pc, #348]	; (80023d4 <_Z22motor_rear_right_drived+0x184>)
 8002278:	eeb0 1a46 	vmov.f32	s2, s12
 800227c:	eef0 1a66 	vmov.f32	s3, s13
 8002280:	eeb0 0a47 	vmov.f32	s0, s14
 8002284:	eef0 0a67 	vmov.f32	s1, s15
 8002288:	f000 f902 	bl	8002490 <_Z12calculatePIDddP16PID_Data_Typedefd>
 800228c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <_Z22motor_rear_right_drived+0x188>)
 8002296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800229a:	f7fe fc5d 	bl	8000b58 <__aeabi_dcmpgt>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <_Z22motor_rear_right_drived+0x5e>
		speed_command = 1000.0;
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <_Z22motor_rear_right_drived+0x188>)
 80022aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 80022ae:	a346      	add	r3, pc, #280	; (adr r3, 80023c8 <_Z22motor_rear_right_drived+0x178>)
 80022b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022b8:	f7fe fc30 	bl	8000b1c <__aeabi_dcmplt>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d004      	beq.n	80022cc <_Z22motor_rear_right_drived+0x7c>
		speed_command = -1000.0;
 80022c2:	a341      	add	r3, pc, #260	; (adr r3, 80023c8 <_Z22motor_rear_right_drived+0x178>)
 80022c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_rear_right_.speed_command = speed_command;
 80022cc:	4940      	ldr	r1, [pc, #256]	; (80023d0 <_Z22motor_rear_right_drived+0x180>)
 80022ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022d2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (speed_command > 0.0 && motor_rear_right_.speed_sp > 0.0) {
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022e2:	f7fe fc39 	bl	8000b58 <__aeabi_dcmpgt>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d019      	beq.n	8002320 <_Z22motor_rear_right_drived+0xd0>
 80022ec:	4b38      	ldr	r3, [pc, #224]	; (80023d0 <_Z22motor_rear_right_drived+0x180>)
 80022ee:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	f7fe fc2d 	bl	8000b58 <__aeabi_dcmpgt>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <_Z22motor_rear_right_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	2108      	movs	r1, #8
 8002308:	4834      	ldr	r0, [pc, #208]	; (80023dc <_Z22motor_rear_right_drived+0x18c>)
 800230a:	f001 fe7b 	bl	8004004 <HAL_GPIO_WritePin>
		TIM2->CCR4 = (int) speed_command;
 800230e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002312:	f7fe fc41 	bl	8000b98 <__aeabi_d2iz>
 8002316:	4602      	mov	r2, r0
 8002318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
 800231e:	e04f      	b.n	80023c0 <_Z22motor_rear_right_drived+0x170>
	} else if (speed_command < 0.0 && motor_rear_right_.speed_sp < 0.0) {
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800232c:	f7fe fbf6 	bl	8000b1c <__aeabi_dcmplt>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d01f      	beq.n	8002376 <_Z22motor_rear_right_drived+0x126>
 8002336:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <_Z22motor_rear_right_drived+0x180>)
 8002338:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	f7fe fbea 	bl	8000b1c <__aeabi_dcmplt>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d013      	beq.n	8002376 <_Z22motor_rear_right_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	2108      	movs	r1, #8
 8002352:	4822      	ldr	r0, [pc, #136]	; (80023dc <_Z22motor_rear_right_drived+0x18c>)
 8002354:	f001 fe56 	bl	8004004 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8002358:	68bc      	ldr	r4, [r7, #8]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002360:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR4 = (int) speed_command;
 8002364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002368:	f7fe fc16 	bl	8000b98 <__aeabi_d2iz>
 800236c:	4602      	mov	r2, r0
 800236e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002372:	641a      	str	r2, [r3, #64]	; 0x40
 8002374:	e024      	b.n	80023c0 <_Z22motor_rear_right_drived+0x170>
	} else if (speed_command == 0) {
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	f04f 0300 	mov.w	r3, #0
 800237e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002382:	f7fe fbc1 	bl	8000b08 <__aeabi_dcmpeq>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00c      	beq.n	80023a6 <_Z22motor_rear_right_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800238c:	2201      	movs	r2, #1
 800238e:	2108      	movs	r1, #8
 8002390:	4812      	ldr	r0, [pc, #72]	; (80023dc <_Z22motor_rear_right_drived+0x18c>)
 8002392:	f001 fe37 	bl	8004004 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_right_);
 8002396:	480f      	ldr	r0, [pc, #60]	; (80023d4 <_Z22motor_rear_right_drived+0x184>)
 8002398:	f000 f940 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR4 = 0;
 800239c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023a0:	2200      	movs	r2, #0
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
		resetPIDData(&pid_data_rear_right_);
		TIM2->CCR4 = 0;
	}
}
 80023a4:	e00c      	b.n	80023c0 <_Z22motor_rear_right_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	2108      	movs	r1, #8
 80023aa:	480c      	ldr	r0, [pc, #48]	; (80023dc <_Z22motor_rear_right_drived+0x18c>)
 80023ac:	f001 fe2a 	bl	8004004 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_right_);
 80023b0:	4808      	ldr	r0, [pc, #32]	; (80023d4 <_Z22motor_rear_right_drived+0x184>)
 80023b2:	f000 f933 	bl	800261c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR4 = 0;
 80023b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023ba:	2200      	movs	r2, #0
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80023be:	e7ff      	b.n	80023c0 <_Z22motor_rear_right_drived+0x170>
 80023c0:	bf00      	nop
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bdb0      	pop	{r4, r5, r7, pc}
 80023c8:	00000000 	.word	0x00000000
 80023cc:	c08f4000 	.word	0xc08f4000
 80023d0:	200005a0 	.word	0x200005a0
 80023d4:	20000660 	.word	0x20000660
 80023d8:	408f4000 	.word	0x408f4000
 80023dc:	40020800 	.word	0x40020800

080023e0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>:

void motor_initData(Motor_Speed_Data_Typedef *_motor) {
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	_motor->delta_encoder = 0;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	801a      	strh	r2, [r3, #0]
	_motor->pps = 0.0;
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_motor->rpm = 0.0;
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_motor->speed_command = 0.0;
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_motor->speed_pv = 0.0;
 8002418:	6879      	ldr	r1, [r7, #4]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_motor->speed_sp = 0.0;
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002444:	b672      	cpsid	i
}
 8002446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002448:	e7fe      	b.n	8002448 <Error_Handler+0x8>
	...

0800244c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d108      	bne.n	800246e <_Z41__static_initialization_and_destruction_0ii+0x22>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002462:	4293      	cmp	r3, r2
 8002464:	d103      	bne.n	800246e <_Z41__static_initialization_and_destruction_0ii+0x22>
MPU9250 mpu(hi2c1);
 8002466:	4904      	ldr	r1, [pc, #16]	; (8002478 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800246a:	f000 f961 	bl	8002730 <_ZN7MPU9250C1ER17I2C_HandleTypeDef>
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000204 	.word	0x20000204
 800247c:	20000450 	.word	0x20000450

08002480 <_GLOBAL__sub_I_hi2c1>:
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
 8002484:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002488:	2001      	movs	r0, #1
 800248a:	f7ff ffdf 	bl	800244c <_Z41__static_initialization_and_destruction_0ii>
 800248e:	bd80      	pop	{r7, pc}

08002490 <_Z12calculatePIDddP16PID_Data_Typedefd>:
#include "motor_pid.h"

double calculatePID(double _sp, double _pv, PID_Data_Typedef *_pid_data, double _dt) {
 8002490:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002494:	b08a      	sub	sp, #40	; 0x28
 8002496:	af00      	add	r7, sp, #0
 8002498:	ed87 0b06 	vstr	d0, [r7, #24]
 800249c:	ed87 1b04 	vstr	d1, [r7, #16]
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	ed87 2b00 	vstr	d2, [r7]
	_pid_data->err = _sp - _pv;
 80024a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80024aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024ae:	f7fd ff0b 	bl	80002c8 <__aeabi_dsub>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	68f9      	ldr	r1, [r7, #12]
 80024b8:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if (_pid_data->err > 1000.0)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	4b54      	ldr	r3, [pc, #336]	; (8002618 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 80024c8:	f7fe fb46 	bl	8000b58 <__aeabi_dcmpgt>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d005      	beq.n	80024de <_Z12calculatePIDddP16PID_Data_Typedefd+0x4e>
		_pid_data->err = 1000.0;
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	4b4f      	ldr	r3, [pc, #316]	; (8002618 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 80024da:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (_pid_data->err < -1000.0)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80024e4:	a34a      	add	r3, pc, #296	; (adr r3, 8002610 <_Z12calculatePIDddP16PID_Data_Typedefd+0x180>)
 80024e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ea:	f7fe fb17 	bl	8000b1c <__aeabi_dcmplt>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <_Z12calculatePIDddP16PID_Data_Typedefd+0x70>
		_pid_data->err = -1000.0;
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	a346      	add	r3, pc, #280	; (adr r3, 8002610 <_Z12calculatePIDddP16PID_Data_Typedefd+0x180>)
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	e9c1 2306 	strd	r2, r3, [r1, #24]

	_pid_data->sum_err += _pid_data->err;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800250c:	f7fd fede 	bl	80002cc <__adddf3>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	68f9      	ldr	r1, [r7, #12]
 8002516:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	double ret = (_pid_data->kp * _pid_data->err) + (_pid_data->ki * _pid_data->sum_err * _dt)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002526:	f7fe f887 	bl	8000638 <__aeabi_dmul>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4614      	mov	r4, r2
 8002530:	461d      	mov	r5, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800253e:	f7fe f87b 	bl	8000638 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800254e:	f7fe f873 	bl	8000638 <__aeabi_dmul>
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4620      	mov	r0, r4
 8002558:	4629      	mov	r1, r5
 800255a:	f7fd feb7 	bl	80002cc <__adddf3>
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4690      	mov	r8, r2
 8002564:	4699      	mov	r9, r3
			+ (_pid_data->kd * ((_pid_data->err - _pid_data->err_l) / _dt));
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002578:	f7fd fea6 	bl	80002c8 <__aeabi_dsub>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002588:	f7fe f980 	bl	800088c <__aeabi_ddiv>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4620      	mov	r0, r4
 8002592:	4629      	mov	r1, r5
 8002594:	f7fe f850 	bl	8000638 <__aeabi_dmul>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
	double ret = (_pid_data->kp * _pid_data->err) + (_pid_data->ki * _pid_data->sum_err * _dt)
 800259c:	4640      	mov	r0, r8
 800259e:	4649      	mov	r1, r9
 80025a0:	f7fd fe94 	bl	80002cc <__adddf3>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	e9c7 2308 	strd	r2, r3, [r7, #32]

	_pid_data->err_l = _pid_data->err;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025b2:	68f9      	ldr	r1, [r7, #12]
 80025b4:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if (ret > 1000.0)
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	4b16      	ldr	r3, [pc, #88]	; (8002618 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 80025be:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025c2:	f7fe fac9 	bl	8000b58 <__aeabi_dcmpgt>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <_Z12calculatePIDddP16PID_Data_Typedefd+0x146>
		ret = 1000.0;
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	4b11      	ldr	r3, [pc, #68]	; (8002618 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 80025d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ret < -1000.0)
 80025d6:	a30e      	add	r3, pc, #56	; (adr r3, 8002610 <_Z12calculatePIDddP16PID_Data_Typedefd+0x180>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80025e0:	f7fe fa9c 	bl	8000b1c <__aeabi_dcmplt>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <_Z12calculatePIDddP16PID_Data_Typedefd+0x164>
		ret = 1000.0;
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 80025f0:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return ret;
 80025f4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80025fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002600:	eef0 0a67 	vmov.f32	s1, s15
 8002604:	3728      	adds	r7, #40	; 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800260c:	f3af 8000 	nop.w
 8002610:	00000000 	.word	0x00000000
 8002614:	c08f4000 	.word	0xc08f4000
 8002618:	408f4000 	.word	0x408f4000

0800261c <_Z12resetPIDDataP16PID_Data_Typedef>:

void resetPIDData(PID_Data_Typedef *_pid_data) {
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
	_pid_data->err = 0.0;
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_pid_data->err_l = 0.0;
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	_pid_data->sum_err = 0.0;
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <_Z17setupPIDParameterP16PID_Data_Typedefddd>:

void setupPIDParameter(PID_Data_Typedef *_pid_data, double _kp, double _ki, double _kd) {
 800265a:	b480      	push	{r7}
 800265c:	b089      	sub	sp, #36	; 0x24
 800265e:	af00      	add	r7, sp, #0
 8002660:	61f8      	str	r0, [r7, #28]
 8002662:	ed87 0b04 	vstr	d0, [r7, #16]
 8002666:	ed87 1b02 	vstr	d1, [r7, #8]
 800266a:	ed87 2b00 	vstr	d2, [r7]
	_pid_data->kp = _kp;
 800266e:	69f9      	ldr	r1, [r7, #28]
 8002670:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002674:	e9c1 2300 	strd	r2, r3, [r1]
	_pid_data->ki = _ki;
 8002678:	69f9      	ldr	r1, [r7, #28]
 800267a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800267e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_pid_data->kd = _kd;
 8002682:	69f9      	ldr	r1, [r7, #28]
 8002684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002688:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800268c:	bf00      	nop
 800268e:	3724      	adds	r7, #36	; 0x24
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <_ZL4wrapdd>:
#include "mpu9250.h"

static double wrap(double angle, double limit) {
 8002698:	b5b0      	push	{r4, r5, r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	ed87 0b02 	vstr	d0, [r7, #8]
 80026a2:	ed87 1b00 	vstr	d1, [r7]
	while (angle > limit)
 80026a6:	e00f      	b.n	80026c8 <_ZL4wrapdd+0x30>
		angle -= 2 * limit;
 80026a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	f7fd fe0c 	bl	80002cc <__adddf3>
 80026b4:	4602      	mov	r2, r0
 80026b6:	460b      	mov	r3, r1
 80026b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026bc:	f7fd fe04 	bl	80002c8 <__aeabi_dsub>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (angle > limit)
 80026c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026d0:	f7fe fa42 	bl	8000b58 <__aeabi_dcmpgt>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e6      	bne.n	80026a8 <_ZL4wrapdd+0x10>
	while (angle < -limit)
 80026da:	e00f      	b.n	80026fc <_ZL4wrapdd+0x64>
		angle += 2 * limit;
 80026dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	f7fd fdf2 	bl	80002cc <__adddf3>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026f0:	f7fd fdec 	bl	80002cc <__adddf3>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (angle < -limit)
 80026fc:	683c      	ldr	r4, [r7, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002704:	4622      	mov	r2, r4
 8002706:	462b      	mov	r3, r5
 8002708:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800270c:	f7fe fa06 	bl	8000b1c <__aeabi_dcmplt>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1e2      	bne.n	80026dc <_ZL4wrapdd+0x44>
	return angle;
 8002716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800271a:	ec43 2b17 	vmov	d7, r2, r3
}
 800271e:	eeb0 0a47 	vmov.f32	s0, s14
 8002722:	eef0 0a67 	vmov.f32	s1, s15
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bdb0      	pop	{r4, r5, r7, pc}
 800272c:	0000      	movs	r0, r0
	...

08002730 <_ZN7MPU9250C1ER17I2C_HandleTypeDef>:

MPU9250::MPU9250(I2C_HandleTypeDef &w) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	701a      	strb	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	22d0      	movs	r2, #208	; 0xd0
 8002744:	721a      	strb	r2, [r3, #8]
	wire = &w;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	605a      	str	r2, [r3, #4]
	setFilterGyroCoef(DEFAULT_GYRO_COEFF);
 800274c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002788 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x58>
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f989 	bl	8002a68 <_ZN7MPU925017setFilterGyroCoefEd>
	setGyroOffsets(0, 0, 0);
 8002756:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 8002790 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 800275a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 8002790 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 800275e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8002790 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f940 	bl	80029e8 <_ZN7MPU925014setGyroOffsetsEddd>
	setAccOffsets(0, 0, 0);
 8002768:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8002790 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 800276c:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8002790 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8002770:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8002790 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 f956 	bl	8002a26 <_ZN7MPU925013setAccOffsetsEddd>
}
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4618      	mov	r0, r3
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	f3af 8000 	nop.w
 8002788:	f5c28f5c 	.word	0xf5c28f5c
 800278c:	3fef5c28 	.word	0x3fef5c28
	...

08002798 <_ZN7MPU92505beginEii>:

uint8_t MPU9250::begin(int gyro_config_num, int acc_config_num) {
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	; 0x28
 800279c:	af04      	add	r7, sp, #16
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
	uint8_t check, status;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80027a4:	2201      	movs	r2, #1
 80027a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027aa:	481d      	ldr	r0, [pc, #116]	; (8002820 <_ZN7MPU92505beginEii+0x88>)
 80027ac:	f001 fc2a 	bl	8004004 <HAL_GPIO_WritePin>
	status = HAL_I2C_Mem_Read(wire, address, MPU9250_ADDR_CHECK, 1, &check, 1, 1000);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6858      	ldr	r0, [r3, #4]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	7a1b      	ldrb	r3, [r3, #8]
 80027b8:	b299      	uxth	r1, r3
 80027ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027be:	9302      	str	r3, [sp, #8]
 80027c0:	2301      	movs	r3, #1
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	f107 0316 	add.w	r3, r7, #22
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2301      	movs	r3, #1
 80027cc:	2275      	movs	r2, #117	; 0x75
 80027ce:	f001 fe8b 	bl	80044e8 <HAL_I2C_Mem_Read>
 80027d2:	4603      	mov	r3, r0
 80027d4:	75fb      	strb	r3, [r7, #23]
	if (check == 113) {
 80027d6:	7dbb      	ldrb	r3, [r7, #22]
 80027d8:	2b71      	cmp	r3, #113	; 0x71
 80027da:	d11c      	bne.n	8002816 <_ZN7MPU92505beginEii+0x7e>
		writeData(MPU9250_PWR_MGMT_1_REGISTER, 0x01);
 80027dc:	2201      	movs	r2, #1
 80027de:	216b      	movs	r1, #107	; 0x6b
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f81f 	bl	8002824 <_ZN7MPU92509writeDataEhh>
		writeData(MPU9250_SMPLRT_DIV_REGISTER, 0x00);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2119      	movs	r1, #25
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f81a 	bl	8002824 <_ZN7MPU92509writeDataEhh>
		writeData(MPU9250_CONFIG_REGISTER, 0x00);
 80027f0:	2200      	movs	r2, #0
 80027f2:	211a      	movs	r1, #26
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 f815 	bl	8002824 <_ZN7MPU92509writeDataEhh>
		setGyroConfig(gyro_config_num);
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f000 f833 	bl	8002868 <_ZN7MPU925013setGyroConfigEi>
		setAccConfig(acc_config_num);
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f893 	bl	8002930 <_ZN7MPU925012setAccConfigEi>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002810:	4803      	ldr	r0, [pc, #12]	; (8002820 <_ZN7MPU92505beginEii+0x88>)
 8002812:	f001 fbf7 	bl	8004004 <HAL_GPIO_WritePin>
	}
	return status;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40020400 	.word	0x40020400

08002824 <_ZN7MPU92509writeDataEhh>:

uint8_t MPU9250::writeData(uint8_t reg, uint8_t data) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af04      	add	r7, sp, #16
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	460b      	mov	r3, r1
 800282e:	70fb      	strb	r3, [r7, #3]
 8002830:	4613      	mov	r3, r2
 8002832:	70bb      	strb	r3, [r7, #2]
	uint8_t status = HAL_I2C_Mem_Write(wire, address, reg, 1, &data, 1, 1000);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6858      	ldr	r0, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7a1b      	ldrb	r3, [r3, #8]
 800283c:	b299      	uxth	r1, r3
 800283e:	78fb      	ldrb	r3, [r7, #3]
 8002840:	b29a      	uxth	r2, r3
 8002842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002846:	9302      	str	r3, [sp, #8]
 8002848:	2301      	movs	r3, #1
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	1cbb      	adds	r3, r7, #2
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2301      	movs	r3, #1
 8002852:	f001 fd4f 	bl	80042f4 <HAL_I2C_Mem_Write>
 8002856:	4603      	mov	r3, r0
 8002858:	73fb      	strb	r3, [r7, #15]
	return status;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	0000      	movs	r0, r0
	...

08002868 <_ZN7MPU925013setGyroConfigEi>:

uint8_t MPU9250::setGyroConfig(int config_num) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
	uint8_t status;
	switch (config_num) {
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d843      	bhi.n	8002900 <_ZN7MPU925013setGyroConfigEi+0x98>
 8002878:	a201      	add	r2, pc, #4	; (adr r2, 8002880 <_ZN7MPU925013setGyroConfigEi+0x18>)
 800287a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287e:	bf00      	nop
 8002880:	08002891 	.word	0x08002891
 8002884:	080028ad 	.word	0x080028ad
 8002888:	080028c9 	.word	0x080028c9
 800288c:	080028e5 	.word	0x080028e5
		case 0: // range = +- 250 deg/s
			gyro_lsb_to_degsec = 131.0;
 8002890:	6879      	ldr	r1, [r7, #4]
 8002892:	a31f      	add	r3, pc, #124	; (adr r3, 8002910 <_ZN7MPU925013setGyroConfigEi+0xa8>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x00);
 800289c:	2200      	movs	r2, #0
 800289e:	211b      	movs	r1, #27
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ffbf 	bl	8002824 <_ZN7MPU92509writeDataEhh>
 80028a6:	4603      	mov	r3, r0
 80028a8:	73fb      	strb	r3, [r7, #15]
			break;
 80028aa:	e02c      	b.n	8002906 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 1: // range = +- 500 deg/s
			gyro_lsb_to_degsec = 65.5;
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	a31a      	add	r3, pc, #104	; (adr r3, 8002918 <_ZN7MPU925013setGyroConfigEi+0xb0>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x08);
 80028b8:	2208      	movs	r2, #8
 80028ba:	211b      	movs	r1, #27
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff ffb1 	bl	8002824 <_ZN7MPU92509writeDataEhh>
 80028c2:	4603      	mov	r3, r0
 80028c4:	73fb      	strb	r3, [r7, #15]
			break;
 80028c6:	e01e      	b.n	8002906 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 2: // range = +- 1000 deg/s
			gyro_lsb_to_degsec = 32.8;
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	a315      	add	r3, pc, #84	; (adr r3, 8002920 <_ZN7MPU925013setGyroConfigEi+0xb8>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x10);
 80028d4:	2210      	movs	r2, #16
 80028d6:	211b      	movs	r1, #27
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff ffa3 	bl	8002824 <_ZN7MPU92509writeDataEhh>
 80028de:	4603      	mov	r3, r0
 80028e0:	73fb      	strb	r3, [r7, #15]
			break;
 80028e2:	e010      	b.n	8002906 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 3: // range = +- 2000 deg/s
			gyro_lsb_to_degsec = 16.4;
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	a310      	add	r3, pc, #64	; (adr r3, 8002928 <_ZN7MPU925013setGyroConfigEi+0xc0>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x18);
 80028f0:	2218      	movs	r2, #24
 80028f2:	211b      	movs	r1, #27
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff95 	bl	8002824 <_ZN7MPU92509writeDataEhh>
 80028fa:	4603      	mov	r3, r0
 80028fc:	73fb      	strb	r3, [r7, #15]
			break;
 80028fe:	e002      	b.n	8002906 <_ZN7MPU925013setGyroConfigEi+0x9e>
		default: // error
			status = 1;
 8002900:	2301      	movs	r3, #1
 8002902:	73fb      	strb	r3, [r7, #15]
			break;
 8002904:	bf00      	nop
	}
	return status;
 8002906:	7bfb      	ldrb	r3, [r7, #15]
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	00000000 	.word	0x00000000
 8002914:	40606000 	.word	0x40606000
 8002918:	00000000 	.word	0x00000000
 800291c:	40506000 	.word	0x40506000
 8002920:	66666666 	.word	0x66666666
 8002924:	40406666 	.word	0x40406666
 8002928:	66666666 	.word	0x66666666
 800292c:	40306666 	.word	0x40306666

08002930 <_ZN7MPU925012setAccConfigEi>:

uint8_t MPU9250::setAccConfig(int config_num) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
	uint8_t status;
	switch (config_num) {
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d843      	bhi.n	80029c8 <_ZN7MPU925012setAccConfigEi+0x98>
 8002940:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <_ZN7MPU925012setAccConfigEi+0x18>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	08002959 	.word	0x08002959
 800294c:	08002975 	.word	0x08002975
 8002950:	08002991 	.word	0x08002991
 8002954:	080029ad 	.word	0x080029ad
		case 0: // range = +- 2 g
			acc_lsb_to_g = 16384.0;
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <_ZN7MPU925012setAccConfigEi+0xa8>)
 8002960:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x00);
 8002964:	2200      	movs	r2, #0
 8002966:	211c      	movs	r1, #28
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f7ff ff5b 	bl	8002824 <_ZN7MPU92509writeDataEhh>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]
			break;
 8002972:	e02c      	b.n	80029ce <_ZN7MPU925012setAccConfigEi+0x9e>
		case 1: // range = +- 4 g
			acc_lsb_to_g = 8192.0;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <_ZN7MPU925012setAccConfigEi+0xac>)
 800297c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x08);
 8002980:	2208      	movs	r2, #8
 8002982:	211c      	movs	r1, #28
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff4d 	bl	8002824 <_ZN7MPU92509writeDataEhh>
 800298a:	4603      	mov	r3, r0
 800298c:	73fb      	strb	r3, [r7, #15]
			break;
 800298e:	e01e      	b.n	80029ce <_ZN7MPU925012setAccConfigEi+0x9e>
		case 2: // range = +- 8 g
			acc_lsb_to_g = 4096.0;
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b12      	ldr	r3, [pc, #72]	; (80029e0 <_ZN7MPU925012setAccConfigEi+0xb0>)
 8002998:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x10);
 800299c:	2210      	movs	r2, #16
 800299e:	211c      	movs	r1, #28
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff3f 	bl	8002824 <_ZN7MPU92509writeDataEhh>
 80029a6:	4603      	mov	r3, r0
 80029a8:	73fb      	strb	r3, [r7, #15]
			break;
 80029aa:	e010      	b.n	80029ce <_ZN7MPU925012setAccConfigEi+0x9e>
		case 3: // range = +- 16 g
			acc_lsb_to_g = 2048.0;
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <_ZN7MPU925012setAccConfigEi+0xb4>)
 80029b4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x18);
 80029b8:	2218      	movs	r2, #24
 80029ba:	211c      	movs	r1, #28
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff ff31 	bl	8002824 <_ZN7MPU92509writeDataEhh>
 80029c2:	4603      	mov	r3, r0
 80029c4:	73fb      	strb	r3, [r7, #15]
			break;
 80029c6:	e002      	b.n	80029ce <_ZN7MPU925012setAccConfigEi+0x9e>
		default: // error
			status = 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
			break;
 80029cc:	bf00      	nop
	}
	return status;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40d00000 	.word	0x40d00000
 80029dc:	40c00000 	.word	0x40c00000
 80029e0:	40b00000 	.word	0x40b00000
 80029e4:	40a00000 	.word	0x40a00000

080029e8 <_ZN7MPU925014setGyroOffsetsEddd>:

void MPU9250::setGyroOffsets(double x, double y, double z) {
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	; 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	61f8      	str	r0, [r7, #28]
 80029f0:	ed87 0b04 	vstr	d0, [r7, #16]
 80029f4:	ed87 1b02 	vstr	d1, [r7, #8]
 80029f8:	ed87 2b00 	vstr	d2, [r7]
	gyroXoffset = x;
 80029fc:	69f9      	ldr	r1, [r7, #28]
 80029fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a02:	e9c1 2308 	strd	r2, r3, [r1, #32]
	gyroYoffset = y;
 8002a06:	69f9      	ldr	r1, [r7, #28]
 8002a08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a0c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	gyroZoffset = z;
 8002a10:	69f9      	ldr	r1, [r7, #28]
 8002a12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a16:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8002a1a:	bf00      	nop
 8002a1c:	3724      	adds	r7, #36	; 0x24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <_ZN7MPU925013setAccOffsetsEddd>:

void MPU9250::setAccOffsets(double x, double y, double z) {
 8002a26:	b480      	push	{r7}
 8002a28:	b089      	sub	sp, #36	; 0x24
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	61f8      	str	r0, [r7, #28]
 8002a2e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002a32:	ed87 1b02 	vstr	d1, [r7, #8]
 8002a36:	ed87 2b00 	vstr	d2, [r7]
	accXoffset = x;
 8002a3a:	69f9      	ldr	r1, [r7, #28]
 8002a3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002a40:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	accYoffset = y;
 8002a44:	69f9      	ldr	r1, [r7, #28]
 8002a46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a4a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	accZoffset = z;
 8002a4e:	69f9      	ldr	r1, [r7, #28]
 8002a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a54:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8002a58:	bf00      	nop
 8002a5a:	3724      	adds	r7, #36	; 0x24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	0000      	movs	r0, r0
	...

08002a68 <_ZN7MPU925017setFilterGyroCoefEd>:

void MPU9250::setFilterGyroCoef(double gyro_coeff) {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	ed87 0b00 	vstr	d0, [r7]
	if ((gyro_coeff < 0) or (gyro_coeff > 1)) {
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a80:	f7fe f84c 	bl	8000b1c <__aeabi_dcmplt>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d109      	bne.n	8002a9e <_ZN7MPU925017setFilterGyroCoefEd+0x36>
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ac8 <_ZN7MPU925017setFilterGyroCoefEd+0x60>)
 8002a90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002a94:	f7fe f860 	bl	8000b58 <__aeabi_dcmpgt>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d004      	beq.n	8002aa8 <_ZN7MPU925017setFilterGyroCoefEd+0x40>
		gyro_coeff = DEFAULT_GYRO_COEFF;
 8002a9e:	a308      	add	r3, pc, #32	; (adr r3, 8002ac0 <_ZN7MPU925017setFilterGyroCoefEd+0x58>)
 8002aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aa4:	e9c7 2300 	strd	r2, r3, [r7]
	}
	filterGyroCoef = gyro_coeff;
 8002aa8:	68f9      	ldr	r1, [r7, #12]
 8002aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aae:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	f3af 8000 	nop.w
 8002ac0:	f5c28f5c 	.word	0xf5c28f5c
 8002ac4:	3fef5c28 	.word	0x3fef5c28
 8002ac8:	3ff00000 	.word	0x3ff00000
 8002acc:	00000000 	.word	0x00000000

08002ad0 <_ZN7MPU925011calcOffsetsEbb>:

void MPU9250::setFilterAccCoef(double acc_coeff) {
	setFilterGyroCoef(1.0 - acc_coeff);
}

void MPU9250::calcOffsets(bool is_calc_gyro, bool is_calc_acc) {
 8002ad0:	b5b0      	push	{r4, r5, r7, lr}
 8002ad2:	b090      	sub	sp, #64	; 0x40
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
 8002adc:	4613      	mov	r3, r2
 8002ade:	70bb      	strb	r3, [r7, #2]
	if (is_calc_gyro) {
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <_ZN7MPU925011calcOffsetsEbb+0x28>
		setGyroOffsets(0, 0, 0);
 8002ae6:	ed9f 2b64 	vldr	d2, [pc, #400]	; 8002c78 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002aea:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8002c78 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002aee:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8002c78 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f7ff ff78 	bl	80029e8 <_ZN7MPU925014setGyroOffsetsEddd>
	}
	if (is_calc_acc) {
 8002af8:	78bb      	ldrb	r3, [r7, #2]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d008      	beq.n	8002b10 <_ZN7MPU925011calcOffsetsEbb+0x40>
		setAccOffsets(0, 0, 0);
 8002afe:	ed9f 2b5e 	vldr	d2, [pc, #376]	; 8002c78 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002b02:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8002c78 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002b06:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 8002c78 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff8b 	bl	8002a26 <_ZN7MPU925013setAccOffsetsEddd>
	}
	double ag[6] = { 0, 0, 0, 0, 0, 0 };
 8002b10:	f107 0308 	add.w	r3, r7, #8
 8002b14:	2230      	movs	r2, #48	; 0x30
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f006 f8fa 	bl	8008d12 <memset>

	for (int i = 0; i < CALIB_OFFSET_NB_MES; i++) {
 8002b1e:	2300      	movs	r3, #0
 8002b20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b22:	e053      	b.n	8002bcc <_ZN7MPU925011calcOffsetsEbb+0xfc>
		this->fetchData();
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 f8af 	bl	8002c88 <_ZN7MPU92509fetchDataEv>
		ag[0] += accX;
 8002b2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002b34:	f7fd fbca 	bl	80002cc <__adddf3>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ag[1] += accY;
 8002b40:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002b4a:	f7fd fbbf 	bl	80002cc <__adddf3>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ag[2] += (accZ - 1.0);
 8002b56:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	4b46      	ldr	r3, [pc, #280]	; (8002c80 <_ZN7MPU925011calcOffsetsEbb+0x1b0>)
 8002b66:	f7fd fbaf 	bl	80002c8 <__aeabi_dsub>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4620      	mov	r0, r4
 8002b70:	4629      	mov	r1, r5
 8002b72:	f7fd fbab 	bl	80002cc <__adddf3>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ag[3] += gyroX;
 8002b7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002b88:	f7fd fba0 	bl	80002cc <__adddf3>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ag[4] += gyroY;
 8002b94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002b9e:	f7fd fb95 	bl	80002cc <__adddf3>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		ag[5] += gyroZ;
 8002baa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002bb4:	f7fd fb8a 	bl	80002cc <__adddf3>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		HAL_Delay(1);
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	f000 ff55 	bl	8003a70 <HAL_Delay>
	for (int i = 0; i < CALIB_OFFSET_NB_MES; i++) {
 8002bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc8:	3301      	adds	r3, #1
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bd2:	dba7      	blt.n	8002b24 <_ZN7MPU925011calcOffsetsEbb+0x54>
	}

	if (is_calc_acc) {
 8002bd4:	78bb      	ldrb	r3, [r7, #2]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d023      	beq.n	8002c22 <_ZN7MPU925011calcOffsetsEbb+0x152>
		accXoffset = ag[0] / CALIB_OFFSET_NB_MES;
 8002bda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	4b28      	ldr	r3, [pc, #160]	; (8002c84 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002be4:	f7fd fe52 	bl	800088c <__aeabi_ddiv>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		accYoffset = ag[1] / CALIB_OFFSET_NB_MES;
 8002bf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	4b22      	ldr	r3, [pc, #136]	; (8002c84 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002bfc:	f7fd fe46 	bl	800088c <__aeabi_ddiv>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		accZoffset = ag[2] / CALIB_OFFSET_NB_MES;
 8002c0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	4b1c      	ldr	r3, [pc, #112]	; (8002c84 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002c14:	f7fd fe3a 	bl	800088c <__aeabi_ddiv>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	}

	if (is_calc_gyro) {
 8002c22:	78fb      	ldrb	r3, [r7, #3]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d023      	beq.n	8002c70 <_ZN7MPU925011calcOffsetsEbb+0x1a0>
		gyroXoffset = ag[3] / CALIB_OFFSET_NB_MES;
 8002c28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	4b14      	ldr	r3, [pc, #80]	; (8002c84 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002c32:	f7fd fe2b 	bl	800088c <__aeabi_ddiv>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		gyroYoffset = ag[4] / CALIB_OFFSET_NB_MES;
 8002c40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002c4a:	f7fd fe1f 	bl	800088c <__aeabi_ddiv>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		gyroZoffset = ag[5] / CALIB_OFFSET_NB_MES;
 8002c58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002c5c:	f04f 0200 	mov.w	r2, #0
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002c62:	f7fd fe13 	bl	800088c <__aeabi_ddiv>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	}
}
 8002c70:	bf00      	nop
 8002c72:	3740      	adds	r7, #64	; 0x40
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8002c80:	3ff00000 	.word	0x3ff00000
 8002c84:	407f4000 	.word	0x407f4000

08002c88 <_ZN7MPU92509fetchDataEv>:

uint8_t MPU9250::fetchData() {
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b090      	sub	sp, #64	; 0x40
 8002c8c:	af04      	add	r7, sp, #16
 8002c8e:	6078      	str	r0, [r7, #4]
	uint8_t i2cData[14], status;
	status = HAL_I2C_Mem_Read(wire, address, MPU9250_ACCEL_OUT_REGISTER, 1, i2cData, 14, 1000);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6858      	ldr	r0, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7a1b      	ldrb	r3, [r3, #8]
 8002c98:	b299      	uxth	r1, r3
 8002c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c9e:	9302      	str	r3, [sp, #8]
 8002ca0:	230e      	movs	r3, #14
 8002ca2:	9301      	str	r3, [sp, #4]
 8002ca4:	f107 0318 	add.w	r3, r7, #24
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2301      	movs	r3, #1
 8002cac:	223b      	movs	r2, #59	; 0x3b
 8002cae:	f001 fc1b 	bl	80044e8 <HAL_I2C_Mem_Read>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t rawData[7];
	int j = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < 14; i += 2) {
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cc0:	e01a      	b.n	8002cf8 <_ZN7MPU92509fetchDataEv+0x70>
		rawData[j++] = (int16_t) (i2cData[i] << 8 | i2cData[i + 1]);
 8002cc2:	f107 0218 	add.w	r2, r7, #24
 8002cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc8:	4413      	add	r3, r2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	b219      	sxth	r1, r3
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	3330      	adds	r3, #48	; 0x30
 8002cd6:	443b      	add	r3, r7
 8002cd8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002cdc:	b21a      	sxth	r2, r3
 8002cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce0:	1c58      	adds	r0, r3, #1
 8002ce2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	b212      	sxth	r2, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	3330      	adds	r3, #48	; 0x30
 8002cec:	443b      	add	r3, r7
 8002cee:	f823 2c28 	strh.w	r2, [r3, #-40]
	for (int i = 0; i < 14; i += 2) {
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cfa:	2b0d      	cmp	r3, #13
 8002cfc:	dde1      	ble.n	8002cc2 <_ZN7MPU92509fetchDataEv+0x3a>
	}

	accX = ((double) rawData[0]) / acc_lsb_to_g - accXoffset;
 8002cfe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fc2e 	bl	8000564 <__aeabi_i2d>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d0e:	f7fd fdbd 	bl	800088c <__aeabi_ddiv>
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d20:	f7fd fad2 	bl	80002c8 <__aeabi_dsub>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	accY = ((double) rawData[1]) / acc_lsb_to_g - accYoffset;
 8002d2e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fc16 	bl	8000564 <__aeabi_i2d>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d3e:	f7fd fda5 	bl	800088c <__aeabi_ddiv>
 8002d42:	4602      	mov	r2, r0
 8002d44:	460b      	mov	r3, r1
 8002d46:	4610      	mov	r0, r2
 8002d48:	4619      	mov	r1, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002d50:	f7fd faba 	bl	80002c8 <__aeabi_dsub>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	accZ = (!upsideDownMounting - upsideDownMounting) * ((double) rawData[2]) / acc_lsb_to_g - accZoffset;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	f083 0301 	eor.w	r3, r3, #1
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fbf7 	bl	8000564 <__aeabi_i2d>
 8002d76:	4604      	mov	r4, r0
 8002d78:	460d      	mov	r5, r1
 8002d7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fbf0 	bl	8000564 <__aeabi_i2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd fc54 	bl	8000638 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002d9e:	f7fd fd75 	bl	800088c <__aeabi_ddiv>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002db0:	f7fd fa8a 	bl	80002c8 <__aeabi_dsub>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	temp = (rawData[3] + TEMP_LSB_OFFSET) / TEMP_LSB_2_DEGREE;
 8002dbe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fbce 	bl	8000564 <__aeabi_i2d>
 8002dc8:	a332      	add	r3, pc, #200	; (adr r3, 8002e94 <_ZN7MPU92509fetchDataEv+0x20c>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd fa7d 	bl	80002cc <__adddf3>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <_ZN7MPU92509fetchDataEv+0x208>)
 8002de0:	f7fd fd54 	bl	800088c <__aeabi_ddiv>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	gyroX = ((double) rawData[4]) / gyro_lsb_to_degsec - gyroXoffset;
 8002dee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fbb6 	bl	8000564 <__aeabi_i2d>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002dfe:	f7fd fd45 	bl	800088c <__aeabi_ddiv>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002e10:	f7fd fa5a 	bl	80002c8 <__aeabi_dsub>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	gyroY = ((double) rawData[5]) / gyro_lsb_to_degsec - gyroYoffset;
 8002e1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fb9e 	bl	8000564 <__aeabi_i2d>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e2e:	f7fd fd2d 	bl	800088c <__aeabi_ddiv>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4610      	mov	r0, r2
 8002e38:	4619      	mov	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e40:	f7fd fa42 	bl	80002c8 <__aeabi_dsub>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	gyroZ = ((double) rawData[6]) / gyro_lsb_to_degsec - gyroZoffset;
 8002e4e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fb86 	bl	8000564 <__aeabi_i2d>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e5e:	f7fd fd15 	bl	800088c <__aeabi_ddiv>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e70:	f7fd fa2a 	bl	80002c8 <__aeabi_dsub>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return status;
 8002e7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3730      	adds	r7, #48	; 0x30
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	f3af 8000 	nop.w
 8002e90:	40754000 	.word	0x40754000
 8002e94:	00000000 	.word	0x00000000
 8002e98:	40c83e00 	.word	0x40c83e00
 8002e9c:	00000000 	.word	0x00000000

08002ea0 <_ZN7MPU92506updateEv>:

uint8_t MPU9250::update() {
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	ed2d 8b02 	vpush	{d8}
 8002ea8:	b08b      	sub	sp, #44	; 0x2c
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
	uint8_t status = this->fetchData();
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff feea 	bl	8002c88 <_ZN7MPU92509fetchDataEv>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	double sgZ = (accZ >= 0) - (accZ < 0);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	461e      	mov	r6, r3
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	f7fd fe3a 	bl	8000b44 <__aeabi_dcmpge>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <_ZN7MPU92506updateEv+0x3a>
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	461e      	mov	r6, r3
 8002eda:	b2f3      	uxtb	r3, r6
 8002edc:	461e      	mov	r6, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	4698      	mov	r8, r3
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	f7fd fe14 	bl	8000b1c <__aeabi_dcmplt>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <_ZN7MPU92506updateEv+0x5e>
 8002efa:	2300      	movs	r3, #0
 8002efc:	4698      	mov	r8, r3
 8002efe:	fa5f f388 	uxtb.w	r3, r8
 8002f02:	1af3      	subs	r3, r6, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd fb2d 	bl	8000564 <__aeabi_i2d>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	angleAccX = atan2(accY, sgZ * sqrt(accZ * accZ + accX * accX)) * RAD_2_DEG;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	ed93 8b18 	vldr	d8, [r3, #96]	; 0x60
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002f24:	f7fd fb88 	bl	8000638 <__aeabi_dmul>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4690      	mov	r8, r2
 8002f2e:	4699      	mov	r9, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8002f3c:	f7fd fb7c 	bl	8000638 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4640      	mov	r0, r8
 8002f46:	4649      	mov	r1, r9
 8002f48:	f7fd f9c0 	bl	80002cc <__adddf3>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	ec43 2b17 	vmov	d7, r2, r3
 8002f54:	eeb0 0a47 	vmov.f32	s0, s14
 8002f58:	eef0 0a67 	vmov.f32	s1, s15
 8002f5c:	f004 fbc4 	bl	80076e8 <sqrt>
 8002f60:	ec51 0b10 	vmov	r0, r1, d0
 8002f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f68:	f7fd fb66 	bl	8000638 <__aeabi_dmul>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	ec43 2b17 	vmov	d7, r2, r3
 8002f74:	eeb0 1a47 	vmov.f32	s2, s14
 8002f78:	eef0 1a67 	vmov.f32	s3, s15
 8002f7c:	eeb0 0a48 	vmov.f32	s0, s16
 8002f80:	eef0 0a68 	vmov.f32	s1, s17
 8002f84:	f004 fbae 	bl	80076e4 <atan2>
 8002f88:	ec51 0b10 	vmov	r0, r1, d0
 8002f8c:	a3b1      	add	r3, pc, #708	; (adr r3, 8003254 <_ZN7MPU92506updateEv+0x3b4>)
 8002f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f92:	f7fd fb51 	bl	8000638 <__aeabi_dmul>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	angleAccY = -atan2(accX, sqrt(accZ * accZ + accY * accY)) * RAD_2_DEG;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	ed93 8b16 	vldr	d8, [r3, #88]	; 0x58
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002fb2:	f7fd fb41 	bl	8000638 <__aeabi_dmul>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4690      	mov	r8, r2
 8002fbc:	4699      	mov	r9, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8002fca:	f7fd fb35 	bl	8000638 <__aeabi_dmul>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	f7fd f979 	bl	80002cc <__adddf3>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	ec43 2b17 	vmov	d7, r2, r3
 8002fe2:	eeb0 0a47 	vmov.f32	s0, s14
 8002fe6:	eef0 0a67 	vmov.f32	s1, s15
 8002fea:	f004 fb7d 	bl	80076e8 <sqrt>
 8002fee:	eeb0 7a40 	vmov.f32	s14, s0
 8002ff2:	eef0 7a60 	vmov.f32	s15, s1
 8002ff6:	eeb0 1a47 	vmov.f32	s2, s14
 8002ffa:	eef0 1a67 	vmov.f32	s3, s15
 8002ffe:	eeb0 0a48 	vmov.f32	s0, s16
 8003002:	eef0 0a68 	vmov.f32	s1, s17
 8003006:	f004 fb6d 	bl	80076e4 <atan2>
 800300a:	ec53 2b10 	vmov	r2, r3, d0
 800300e:	4614      	mov	r4, r2
 8003010:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003014:	a38f      	add	r3, pc, #572	; (adr r3, 8003254 <_ZN7MPU92506updateEv+0x3b4>)
 8003016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800301a:	4620      	mov	r0, r4
 800301c:	4629      	mov	r1, r5
 800301e:	f7fd fb0b 	bl	8000638 <__aeabi_dmul>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

	uint32_t Tnew = HAL_GetTick();
 800302c:	f000 fd14 	bl	8003a58 <HAL_GetTick>
 8003030:	6178      	str	r0, [r7, #20]
	double dt = (Tnew - preInterval) * 1e-3;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	4618      	mov	r0, r3
 800303e:	f7fd fa81 	bl	8000544 <__aeabi_ui2d>
 8003042:	a386      	add	r3, pc, #536	; (adr r3, 800325c <_ZN7MPU92506updateEv+0x3bc>)
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f7fd faf6 	bl	8000638 <__aeabi_dmul>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	e9c7 2302 	strd	r2, r3, [r7, #8]
	preInterval = Tnew;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	angleX = wrap(
			filterGyroCoef * (angleAccX + wrap(angleX + gyroX * dt - angleAccX, 180)) + (1.0 - filterGyroCoef) * angleAccX,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	e9d3 8922 	ldrd	r8, r9, [r3, #136]	; 0x88
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	e9d3 ab26 	ldrd	sl, fp, [r3, #152]	; 0x98
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8003074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003078:	f7fd fade 	bl	8000638 <__aeabi_dmul>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4650      	mov	r0, sl
 8003082:	4659      	mov	r1, fp
 8003084:	f7fd f922 	bl	80002cc <__adddf3>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8003096:	f7fd f917 	bl	80002c8 <__aeabi_dsub>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	ec43 2b17 	vmov	d7, r2, r3
 80030a2:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8003240 <_ZN7MPU92506updateEv+0x3a0>
 80030a6:	eeb0 0a47 	vmov.f32	s0, s14
 80030aa:	eef0 0a67 	vmov.f32	s1, s15
 80030ae:	f7ff faf3 	bl	8002698 <_ZL4wrapdd>
 80030b2:	ec53 2b10 	vmov	r2, r3, d0
 80030b6:	4640      	mov	r0, r8
 80030b8:	4649      	mov	r1, r9
 80030ba:	f7fd f907 	bl	80002cc <__adddf3>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4620      	mov	r0, r4
 80030c4:	4629      	mov	r1, r5
 80030c6:	f7fd fab7 	bl	8000638 <__aeabi_dmul>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4614      	mov	r4, r2
 80030d0:	461d      	mov	r5, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	495c      	ldr	r1, [pc, #368]	; (8003250 <_ZN7MPU92506updateEv+0x3b0>)
 80030de:	f7fd f8f3 	bl	80002c8 <__aeabi_dsub>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4610      	mov	r0, r2
 80030e8:	4619      	mov	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80030f0:	f7fd faa2 	bl	8000638 <__aeabi_dmul>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
	angleX = wrap(
 80030f8:	4620      	mov	r0, r4
 80030fa:	4629      	mov	r1, r5
 80030fc:	f7fd f8e6 	bl	80002cc <__adddf3>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	ec43 2b17 	vmov	d7, r2, r3
 8003108:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8003240 <_ZN7MPU92506updateEv+0x3a0>
 800310c:	eeb0 0a47 	vmov.f32	s0, s14
 8003110:	eef0 0a67 	vmov.f32	s1, s15
 8003114:	f7ff fac0 	bl	8002698 <_ZL4wrapdd>
 8003118:	eeb0 7a40 	vmov.f32	s14, s0
 800311c:	eef0 7a60 	vmov.f32	s15, s1
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
			180);
	angleY = wrap(
			filterGyroCoef * (angleAccY + wrap(angleY + sgZ * gyroY * dt - angleAccY, 90))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	e9d3 8924 	ldrd	r8, r9, [r3, #144]	; 0x90
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	e9d3 ab28 	ldrd	sl, fp, [r3, #160]	; 0xa0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800313e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003142:	f7fd fa79 	bl	8000638 <__aeabi_dmul>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4610      	mov	r0, r2
 800314c:	4619      	mov	r1, r3
 800314e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003152:	f7fd fa71 	bl	8000638 <__aeabi_dmul>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4650      	mov	r0, sl
 800315c:	4659      	mov	r1, fp
 800315e:	f7fd f8b5 	bl	80002cc <__adddf3>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4610      	mov	r0, r2
 8003168:	4619      	mov	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8003170:	f7fd f8aa 	bl	80002c8 <__aeabi_dsub>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	ec43 2b17 	vmov	d7, r2, r3
 800317c:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8003248 <_ZN7MPU92506updateEv+0x3a8>
 8003180:	eeb0 0a47 	vmov.f32	s0, s14
 8003184:	eef0 0a67 	vmov.f32	s1, s15
 8003188:	f7ff fa86 	bl	8002698 <_ZL4wrapdd>
 800318c:	ec53 2b10 	vmov	r2, r3, d0
 8003190:	4640      	mov	r0, r8
 8003192:	4649      	mov	r1, r9
 8003194:	f7fd f89a 	bl	80002cc <__adddf3>
 8003198:	4602      	mov	r2, r0
 800319a:	460b      	mov	r3, r1
 800319c:	4620      	mov	r0, r4
 800319e:	4629      	mov	r1, r5
 80031a0:	f7fd fa4a 	bl	8000638 <__aeabi_dmul>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4614      	mov	r4, r2
 80031aa:	461d      	mov	r5, r3
					+ (1.0 - filterGyroCoef) * angleAccY, 90);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 80031b2:	f04f 0000 	mov.w	r0, #0
 80031b6:	4926      	ldr	r1, [pc, #152]	; (8003250 <_ZN7MPU92506updateEv+0x3b0>)
 80031b8:	f7fd f886 	bl	80002c8 <__aeabi_dsub>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80031ca:	f7fd fa35 	bl	8000638 <__aeabi_dmul>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
	angleY = wrap(
 80031d2:	4620      	mov	r0, r4
 80031d4:	4629      	mov	r1, r5
 80031d6:	f7fd f879 	bl	80002cc <__adddf3>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	ec43 2b17 	vmov	d7, r2, r3
 80031e2:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8003248 <_ZN7MPU92506updateEv+0x3a8>
 80031e6:	eeb0 0a47 	vmov.f32	s0, s14
 80031ea:	eef0 0a67 	vmov.f32	s1, s15
 80031ee:	f7ff fa53 	bl	8002698 <_ZL4wrapdd>
 80031f2:	eeb0 7a40 	vmov.f32	s14, s0
 80031f6:	eef0 7a60 	vmov.f32	s15, s1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
	angleZ += gyroZ * dt;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800320c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003210:	f7fd fa12 	bl	8000638 <__aeabi_dmul>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4620      	mov	r0, r4
 800321a:	4629      	mov	r1, r5
 800321c:	f7fd f856 	bl	80002cc <__adddf3>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

	return status;
 800322a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800322e:	4618      	mov	r0, r3
 8003230:	372c      	adds	r7, #44	; 0x2c
 8003232:	46bd      	mov	sp, r7
 8003234:	ecbd 8b02 	vpop	{d8}
 8003238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800323c:	f3af 8000 	nop.w
 8003240:	00000000 	.word	0x00000000
 8003244:	40668000 	.word	0x40668000
 8003248:	00000000 	.word	0x00000000
 800324c:	40568000 	.word	0x40568000
 8003250:	3ff00000 	.word	0x3ff00000
 8003254:	1e7967cb 	.word	0x1e7967cb
 8003258:	404ca5dc 	.word	0x404ca5dc
 800325c:	d2f1a9fc 	.word	0xd2f1a9fc
 8003260:	3f50624d 	.word	0x3f50624d

08003264 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	4b10      	ldr	r3, [pc, #64]	; (80032b0 <HAL_MspInit+0x4c>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a0f      	ldr	r2, [pc, #60]	; (80032b0 <HAL_MspInit+0x4c>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_MspInit+0x4c>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	607b      	str	r3, [r7, #4]
 8003284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_MspInit+0x4c>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <HAL_MspInit+0x4c>)
 8003290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_MspInit+0x4c>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a2:	bf00      	nop
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800

080032b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_I2C_MspInit+0x84>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d12c      	bne.n	8003330 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	4b18      	ldr	r3, [pc, #96]	; (800333c <HAL_I2C_MspInit+0x88>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a17      	ldr	r2, [pc, #92]	; (800333c <HAL_I2C_MspInit+0x88>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b15      	ldr	r3, [pc, #84]	; (800333c <HAL_I2C_MspInit+0x88>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	613b      	str	r3, [r7, #16]
 80032f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = SDA_Pin|SCL_Pin;
 80032f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80032f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032f8:	2312      	movs	r3, #18
 80032fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003300:	2303      	movs	r3, #3
 8003302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003304:	2304      	movs	r3, #4
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	4619      	mov	r1, r3
 800330e:	480c      	ldr	r0, [pc, #48]	; (8003340 <HAL_I2C_MspInit+0x8c>)
 8003310:	f000 fce4 	bl	8003cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <HAL_I2C_MspInit+0x88>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	4a07      	ldr	r2, [pc, #28]	; (800333c <HAL_I2C_MspInit+0x88>)
 800331e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003322:	6413      	str	r3, [r2, #64]	; 0x40
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <HAL_I2C_MspInit+0x88>)
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003330:	bf00      	nop
 8003332:	3728      	adds	r7, #40	; 0x28
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40005400 	.word	0x40005400
 800333c:	40023800 	.word	0x40023800
 8003340:	40020400 	.word	0x40020400

08003344 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b090      	sub	sp, #64	; 0x40
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a64      	ldr	r2, [pc, #400]	; (80034f4 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d12d      	bne.n	80033c2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	62bb      	str	r3, [r7, #40]	; 0x28
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	4a62      	ldr	r2, [pc, #392]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6453      	str	r3, [r2, #68]	; 0x44
 8003376:	4b60      	ldr	r3, [pc, #384]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
 8003386:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	4a5b      	ldr	r2, [pc, #364]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6313      	str	r3, [r2, #48]	; 0x30
 8003392:	4b59      	ldr	r3, [pc, #356]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_M1_A_Pin|Encoder_M1_B_Pin;
 800339e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ac:	2300      	movs	r3, #0
 80033ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033b0:	2301      	movs	r3, #1
 80033b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b8:	4619      	mov	r1, r3
 80033ba:	4850      	ldr	r0, [pc, #320]	; (80034fc <HAL_TIM_Encoder_MspInit+0x1b8>)
 80033bc:	f000 fc8e 	bl	8003cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80033c0:	e094      	b.n	80034ec <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a4e      	ldr	r2, [pc, #312]	; (8003500 <HAL_TIM_Encoder_MspInit+0x1bc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d12c      	bne.n	8003426 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033cc:	2300      	movs	r3, #0
 80033ce:	623b      	str	r3, [r7, #32]
 80033d0:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	4a48      	ldr	r2, [pc, #288]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80033d6:	f043 0302 	orr.w	r3, r3, #2
 80033da:	6413      	str	r3, [r2, #64]	; 0x40
 80033dc:	4b46      	ldr	r3, [pc, #280]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	623b      	str	r3, [r7, #32]
 80033e6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	4b42      	ldr	r3, [pc, #264]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	4a41      	ldr	r2, [pc, #260]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6313      	str	r3, [r2, #48]	; 0x30
 80033f8:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Encoder_M2_A_Pin|Encoder_M2_B_Pin;
 8003404:	23c0      	movs	r3, #192	; 0xc0
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003408:	2302      	movs	r3, #2
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340c:	2300      	movs	r3, #0
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003410:	2300      	movs	r3, #0
 8003412:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003414:	2302      	movs	r3, #2
 8003416:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800341c:	4619      	mov	r1, r3
 800341e:	4837      	ldr	r0, [pc, #220]	; (80034fc <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003420:	f000 fc5c 	bl	8003cdc <HAL_GPIO_Init>
}
 8003424:	e062      	b.n	80034ec <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a36      	ldr	r2, [pc, #216]	; (8003504 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d12c      	bne.n	800348a <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
 8003434:	4b30      	ldr	r3, [pc, #192]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	4a2f      	ldr	r2, [pc, #188]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800343a:	f043 0308 	orr.w	r3, r3, #8
 800343e:	6413      	str	r3, [r2, #64]	; 0x40
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003456:	f043 0301 	orr.w	r3, r3, #1
 800345a:	6313      	str	r3, [r2, #48]	; 0x30
 800345c:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	617b      	str	r3, [r7, #20]
 8003466:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_M3_A_Pin|Encoder_M3_B_Pin;
 8003468:	2303      	movs	r3, #3
 800346a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003474:	2300      	movs	r3, #0
 8003476:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003478:	2302      	movs	r3, #2
 800347a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003480:	4619      	mov	r1, r3
 8003482:	481e      	ldr	r0, [pc, #120]	; (80034fc <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003484:	f000 fc2a 	bl	8003cdc <HAL_GPIO_Init>
}
 8003488:	e030      	b.n	80034ec <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1e      	ldr	r2, [pc, #120]	; (8003508 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d12b      	bne.n	80034ec <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	4a16      	ldr	r2, [pc, #88]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800349e:	f043 0302 	orr.w	r3, r3, #2
 80034a2:	6453      	str	r3, [r2, #68]	; 0x44
 80034a4:	4b14      	ldr	r3, [pc, #80]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80034a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	4a0f      	ldr	r2, [pc, #60]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	6313      	str	r3, [r2, #48]	; 0x30
 80034c0:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	60fb      	str	r3, [r7, #12]
 80034ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_M4_A_Pin|Encoder_M4_B_Pin;
 80034cc:	23c0      	movs	r3, #192	; 0xc0
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80034dc:	2303      	movs	r3, #3
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034e4:	4619      	mov	r1, r3
 80034e6:	4809      	ldr	r0, [pc, #36]	; (800350c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80034e8:	f000 fbf8 	bl	8003cdc <HAL_GPIO_Init>
}
 80034ec:	bf00      	nop
 80034ee:	3740      	adds	r7, #64	; 0x40
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40020000 	.word	0x40020000
 8003500:	40000400 	.word	0x40000400
 8003504:	40000c00 	.word	0x40000c00
 8003508:	40010400 	.word	0x40010400
 800350c:	40020800 	.word	0x40020800

08003510 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003520:	d10d      	bne.n	800353e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003522:	2300      	movs	r3, #0
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_TIM_PWM_MspInit+0x3c>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	4a08      	ldr	r2, [pc, #32]	; (800354c <HAL_TIM_PWM_MspInit+0x3c>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6413      	str	r3, [r2, #64]	; 0x40
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_TIM_PWM_MspInit+0x3c>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	40023800 	.word	0x40023800

08003550 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <HAL_TIM_Base_MspInit+0x48>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d115      	bne.n	800358e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_TIM_Base_MspInit+0x4c>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	4a0c      	ldr	r2, [pc, #48]	; (800359c <HAL_TIM_Base_MspInit+0x4c>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	6413      	str	r3, [r2, #64]	; 0x40
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_TIM_Base_MspInit+0x4c>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2100      	movs	r1, #0
 8003582:	201e      	movs	r0, #30
 8003584:	f000 fb73 	bl	8003c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003588:	201e      	movs	r0, #30
 800358a:	f000 fb8c 	bl	8003ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40000800 	.word	0x40000800
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c0:	d13c      	bne.n	800363c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	4b1f      	ldr	r3, [pc, #124]	; (8003644 <HAL_TIM_MspPostInit+0xa4>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a1e      	ldr	r2, [pc, #120]	; (8003644 <HAL_TIM_MspPostInit+0xa4>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b1c      	ldr	r3, [pc, #112]	; (8003644 <HAL_TIM_MspPostInit+0xa4>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035de:	2300      	movs	r3, #0
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	4b18      	ldr	r3, [pc, #96]	; (8003644 <HAL_TIM_MspPostInit+0xa4>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4a17      	ldr	r2, [pc, #92]	; (8003644 <HAL_TIM_MspPostInit+0xa4>)
 80035e8:	f043 0302 	orr.w	r3, r3, #2
 80035ec:	6313      	str	r3, [r2, #48]	; 0x30
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <HAL_TIM_MspPostInit+0xa4>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_M3_Pin|PWM_M4_Pin|PWM_M1_Pin;
 80035fa:	232c      	movs	r3, #44	; 0x2c
 80035fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fe:	2302      	movs	r3, #2
 8003600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003606:	2300      	movs	r3, #0
 8003608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800360a:	2301      	movs	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360e:	f107 0314 	add.w	r3, r7, #20
 8003612:	4619      	mov	r1, r3
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <HAL_TIM_MspPostInit+0xa8>)
 8003616:	f000 fb61 	bl	8003cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_M2_Pin;
 800361a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800361e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003620:	2302      	movs	r3, #2
 8003622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003628:	2300      	movs	r3, #0
 800362a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800362c:	2301      	movs	r3, #1
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M2_GPIO_Port, &GPIO_InitStruct);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	4805      	ldr	r0, [pc, #20]	; (800364c <HAL_TIM_MspPostInit+0xac>)
 8003638:	f000 fb50 	bl	8003cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800363c:	bf00      	nop
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800
 8003648:	40020000 	.word	0x40020000
 800364c:	40020400 	.word	0x40020400

08003650 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 0314 	add.w	r3, r7, #20
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a28      	ldr	r2, [pc, #160]	; (8003710 <HAL_UART_MspInit+0xc0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d14a      	bne.n	8003708 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	4b27      	ldr	r3, [pc, #156]	; (8003714 <HAL_UART_MspInit+0xc4>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	4a26      	ldr	r2, [pc, #152]	; (8003714 <HAL_UART_MspInit+0xc4>)
 800367c:	f043 0310 	orr.w	r3, r3, #16
 8003680:	6453      	str	r3, [r2, #68]	; 0x44
 8003682:	4b24      	ldr	r3, [pc, #144]	; (8003714 <HAL_UART_MspInit+0xc4>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_UART_MspInit+0xc4>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	4a1f      	ldr	r2, [pc, #124]	; (8003714 <HAL_UART_MspInit+0xc4>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6313      	str	r3, [r2, #48]	; 0x30
 800369e:	4b1d      	ldr	r3, [pc, #116]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036b4:	f043 0302 	orr.w	r3, r3, #2
 80036b8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <HAL_UART_MspInit+0xc4>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	60bb      	str	r3, [r7, #8]
 80036c4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036cc:	2302      	movs	r3, #2
 80036ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d4:	2303      	movs	r3, #3
 80036d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036d8:	2307      	movs	r3, #7
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036dc:	f107 0314 	add.w	r3, r7, #20
 80036e0:	4619      	mov	r1, r3
 80036e2:	480d      	ldr	r0, [pc, #52]	; (8003718 <HAL_UART_MspInit+0xc8>)
 80036e4:	f000 fafa 	bl	8003cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80036e8:	2340      	movs	r3, #64	; 0x40
 80036ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f4:	2303      	movs	r3, #3
 80036f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80036f8:	2307      	movs	r3, #7
 80036fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fc:	f107 0314 	add.w	r3, r7, #20
 8003700:	4619      	mov	r1, r3
 8003702:	4806      	ldr	r0, [pc, #24]	; (800371c <HAL_UART_MspInit+0xcc>)
 8003704:	f000 faea 	bl	8003cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003708:	bf00      	nop
 800370a:	3728      	adds	r7, #40	; 0x28
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40011000 	.word	0x40011000
 8003714:	40023800 	.word	0x40023800
 8003718:	40020000 	.word	0x40020000
 800371c:	40020400 	.word	0x40020400

08003720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003724:	e7fe      	b.n	8003724 <NMI_Handler+0x4>

08003726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800372a:	e7fe      	b.n	800372a <HardFault_Handler+0x4>

0800372c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003730:	e7fe      	b.n	8003730 <MemManage_Handler+0x4>

08003732 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003736:	e7fe      	b.n	8003736 <BusFault_Handler+0x4>

08003738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800373c:	e7fe      	b.n	800373c <UsageFault_Handler+0x4>

0800373e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800373e:	b480      	push	{r7}
 8003740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800376c:	f000 f960 	bl	8003a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003770:	bf00      	nop
 8003772:	bd80      	pop	{r7, pc}

08003774 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003778:	4802      	ldr	r0, [pc, #8]	; (8003784 <TIM4_IRQHandler+0x10>)
 800377a:	f002 fd59 	bl	8006230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20000330 	.word	0x20000330

08003788 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return 1;
 800378c:	2301      	movs	r3, #1
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <_kill>:

int _kill(int pid, int sig)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037a2:	f005 fb09 	bl	8008db8 <__errno>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2216      	movs	r2, #22
 80037aa:	601a      	str	r2, [r3, #0]
  return -1;
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <_exit>:

void _exit (int status)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ffe7 	bl	8003798 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037ca:	e7fe      	b.n	80037ca <_exit+0x12>

080037cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	e00a      	b.n	80037f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037de:	f3af 8000 	nop.w
 80037e2:	4601      	mov	r1, r0
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	1c5a      	adds	r2, r3, #1
 80037e8:	60ba      	str	r2, [r7, #8]
 80037ea:	b2ca      	uxtb	r2, r1
 80037ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	3301      	adds	r3, #1
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	dbf0      	blt.n	80037de <_read+0x12>
  }

  return len;
 80037fc:	687b      	ldr	r3, [r7, #4]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	e009      	b.n	800382c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	60ba      	str	r2, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	dbf1      	blt.n	8003818 <_write+0x12>
  }
  return len;
 8003834:	687b      	ldr	r3, [r7, #4]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <_close>:

int _close(int file)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800384a:	4618      	mov	r0, r3
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr

08003856 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003866:	605a      	str	r2, [r3, #4]
  return 0;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_isatty>:

int _isatty(int file)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800387e:	2301      	movs	r3, #1
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <_sbrk+0x5c>)
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <_sbrk+0x60>)
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038bc:	4b13      	ldr	r3, [pc, #76]	; (800390c <_sbrk+0x64>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <_sbrk+0x64>)
 80038c6:	4a12      	ldr	r2, [pc, #72]	; (8003910 <_sbrk+0x68>)
 80038c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <_sbrk+0x64>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d207      	bcs.n	80038e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038d8:	f005 fa6e 	bl	8008db8 <__errno>
 80038dc:	4603      	mov	r3, r0
 80038de:	220c      	movs	r2, #12
 80038e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
 80038e6:	e009      	b.n	80038fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038e8:	4b08      	ldr	r3, [pc, #32]	; (800390c <_sbrk+0x64>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ee:	4b07      	ldr	r3, [pc, #28]	; (800390c <_sbrk+0x64>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	4a05      	ldr	r2, [pc, #20]	; (800390c <_sbrk+0x64>)
 80038f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038fa:	68fb      	ldr	r3, [r7, #12]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20020000 	.word	0x20020000
 8003908:	00000400 	.word	0x00000400
 800390c:	20000690 	.word	0x20000690
 8003910:	200007e8 	.word	0x200007e8

08003914 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <SystemInit+0x20>)
 800391a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800391e:	4a05      	ldr	r2, [pc, #20]	; (8003934 <SystemInit+0x20>)
 8003920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003970 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800393c:	f7ff ffea 	bl	8003914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003940:	480c      	ldr	r0, [pc, #48]	; (8003974 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003942:	490d      	ldr	r1, [pc, #52]	; (8003978 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003944:	4a0d      	ldr	r2, [pc, #52]	; (800397c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003948:	e002      	b.n	8003950 <LoopCopyDataInit>

0800394a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800394a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800394c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800394e:	3304      	adds	r3, #4

08003950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003954:	d3f9      	bcc.n	800394a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003958:	4c0a      	ldr	r4, [pc, #40]	; (8003984 <LoopFillZerobss+0x22>)
  movs r3, #0
 800395a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800395c:	e001      	b.n	8003962 <LoopFillZerobss>

0800395e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800395e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003960:	3204      	adds	r2, #4

08003962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003964:	d3fb      	bcc.n	800395e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003966:	f005 fa2d 	bl	8008dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800396a:	f7fd fb61 	bl	8001030 <main>
  bx  lr    
 800396e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003970:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003978:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800397c:	0800ca74 	.word	0x0800ca74
  ldr r2, =_sbss
 8003980:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003984:	200007e4 	.word	0x200007e4

08003988 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003988:	e7fe      	b.n	8003988 <ADC_IRQHandler>
	...

0800398c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003990:	4b0e      	ldr	r3, [pc, #56]	; (80039cc <HAL_Init+0x40>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a0d      	ldr	r2, [pc, #52]	; (80039cc <HAL_Init+0x40>)
 8003996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800399a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800399c:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <HAL_Init+0x40>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_Init+0x40>)
 80039a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a8:	4b08      	ldr	r3, [pc, #32]	; (80039cc <HAL_Init+0x40>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a07      	ldr	r2, [pc, #28]	; (80039cc <HAL_Init+0x40>)
 80039ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039b4:	2003      	movs	r0, #3
 80039b6:	f000 f94f 	bl	8003c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ba:	200f      	movs	r0, #15
 80039bc:	f000 f808 	bl	80039d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039c0:	f7ff fc50 	bl	8003264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00

080039d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039d8:	4b12      	ldr	r3, [pc, #72]	; (8003a24 <HAL_InitTick+0x54>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_InitTick+0x58>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f967 	bl	8003cc2 <HAL_SYSTICK_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e00e      	b.n	8003a1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b0f      	cmp	r3, #15
 8003a02:	d80a      	bhi.n	8003a1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a04:	2200      	movs	r2, #0
 8003a06:	6879      	ldr	r1, [r7, #4]
 8003a08:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0c:	f000 f92f 	bl	8003c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a10:	4a06      	ldr	r2, [pc, #24]	; (8003a2c <HAL_InitTick+0x5c>)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	e000      	b.n	8003a1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	20000000 	.word	0x20000000
 8003a28:	20000008 	.word	0x20000008
 8003a2c:	20000004 	.word	0x20000004

08003a30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_IncTick+0x20>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_IncTick+0x24>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a04      	ldr	r2, [pc, #16]	; (8003a54 <HAL_IncTick+0x24>)
 8003a42:	6013      	str	r3, [r2, #0]
}
 8003a44:	bf00      	nop
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000008 	.word	0x20000008
 8003a54:	20000694 	.word	0x20000694

08003a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	; (8003a6c <HAL_GetTick+0x14>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000694 	.word	0x20000694

08003a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a78:	f7ff ffee 	bl	8003a58 <HAL_GetTick>
 8003a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d005      	beq.n	8003a96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a8a:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_Delay+0x44>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a96:	bf00      	nop
 8003a98:	f7ff ffde 	bl	8003a58 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d8f7      	bhi.n	8003a98 <HAL_Delay+0x28>
  {
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000008 	.word	0x20000008

08003ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003aea:	4a04      	ldr	r2, [pc, #16]	; (8003afc <__NVIC_SetPriorityGrouping+0x44>)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	60d3      	str	r3, [r2, #12]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	e000ed00 	.word	0xe000ed00

08003b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b04:	4b04      	ldr	r3, [pc, #16]	; (8003b18 <__NVIC_GetPriorityGrouping+0x18>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	f003 0307 	and.w	r3, r3, #7
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr
 8003b18:	e000ed00 	.word	0xe000ed00

08003b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	4603      	mov	r3, r0
 8003b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	db0b      	blt.n	8003b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	f003 021f 	and.w	r2, r3, #31
 8003b34:	4907      	ldr	r1, [pc, #28]	; (8003b54 <__NVIC_EnableIRQ+0x38>)
 8003b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3a:	095b      	lsrs	r3, r3, #5
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000e100 	.word	0xe000e100

08003b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	6039      	str	r1, [r7, #0]
 8003b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	db0a      	blt.n	8003b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	490c      	ldr	r1, [pc, #48]	; (8003ba4 <__NVIC_SetPriority+0x4c>)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	0112      	lsls	r2, r2, #4
 8003b78:	b2d2      	uxtb	r2, r2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b80:	e00a      	b.n	8003b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4908      	ldr	r1, [pc, #32]	; (8003ba8 <__NVIC_SetPriority+0x50>)
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	0112      	lsls	r2, r2, #4
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	440b      	add	r3, r1
 8003b96:	761a      	strb	r2, [r3, #24]
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	e000e100 	.word	0xe000e100
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f1c3 0307 	rsb	r3, r3, #7
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	bf28      	it	cs
 8003bca:	2304      	movcs	r3, #4
 8003bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	2b06      	cmp	r3, #6
 8003bd4:	d902      	bls.n	8003bdc <NVIC_EncodePriority+0x30>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	3b03      	subs	r3, #3
 8003bda:	e000      	b.n	8003bde <NVIC_EncodePriority+0x32>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003be0:	f04f 32ff 	mov.w	r2, #4294967295
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bea:	43da      	mvns	r2, r3
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	401a      	ands	r2, r3
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	43d9      	mvns	r1, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	4313      	orrs	r3, r2
         );
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3724      	adds	r7, #36	; 0x24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c24:	d301      	bcc.n	8003c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c26:	2301      	movs	r3, #1
 8003c28:	e00f      	b.n	8003c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <SysTick_Config+0x40>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c32:	210f      	movs	r1, #15
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295
 8003c38:	f7ff ff8e 	bl	8003b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <SysTick_Config+0x40>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c42:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <SysTick_Config+0x40>)
 8003c44:	2207      	movs	r2, #7
 8003c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	e000e010 	.word	0xe000e010

08003c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff29 	bl	8003ab8 <__NVIC_SetPriorityGrouping>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c80:	f7ff ff3e 	bl	8003b00 <__NVIC_GetPriorityGrouping>
 8003c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	68b9      	ldr	r1, [r7, #8]
 8003c8a:	6978      	ldr	r0, [r7, #20]
 8003c8c:	f7ff ff8e 	bl	8003bac <NVIC_EncodePriority>
 8003c90:	4602      	mov	r2, r0
 8003c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c96:	4611      	mov	r1, r2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff ff5d 	bl	8003b58 <__NVIC_SetPriority>
}
 8003c9e:	bf00      	nop
 8003ca0:	3718      	adds	r7, #24
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f7ff ff31 	bl	8003b1c <__NVIC_EnableIRQ>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ffa2 	bl	8003c14 <SysTick_Config>
 8003cd0:	4603      	mov	r3, r0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b089      	sub	sp, #36	; 0x24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
 8003cf6:	e165      	b.n	8003fc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	f040 8154 	bne.w	8003fbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d005      	beq.n	8003d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d130      	bne.n	8003d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	2203      	movs	r2, #3
 8003d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3e:	43db      	mvns	r3, r3
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	4013      	ands	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	005b      	lsls	r3, r3, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d64:	2201      	movs	r2, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	091b      	lsrs	r3, r3, #4
 8003d7a:	f003 0201 	and.w	r2, r3, #1
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d017      	beq.n	8003dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	2203      	movs	r2, #3
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4013      	ands	r3, r2
 8003db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d123      	bne.n	8003e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	08da      	lsrs	r2, r3, #3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3208      	adds	r2, #8
 8003de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	220f      	movs	r2, #15
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	08da      	lsrs	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3208      	adds	r2, #8
 8003e1a:	69b9      	ldr	r1, [r7, #24]
 8003e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e30:	43db      	mvns	r3, r3
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	4013      	ands	r3, r2
 8003e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 0203 	and.w	r2, r3, #3
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	005b      	lsls	r3, r3, #1
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	69ba      	ldr	r2, [r7, #24]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 80ae 	beq.w	8003fbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	4b5d      	ldr	r3, [pc, #372]	; (8003fdc <HAL_GPIO_Init+0x300>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	4a5c      	ldr	r2, [pc, #368]	; (8003fdc <HAL_GPIO_Init+0x300>)
 8003e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e70:	6453      	str	r3, [r2, #68]	; 0x44
 8003e72:	4b5a      	ldr	r3, [pc, #360]	; (8003fdc <HAL_GPIO_Init+0x300>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e7e:	4a58      	ldr	r2, [pc, #352]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	3302      	adds	r3, #2
 8003e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	220f      	movs	r2, #15
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4f      	ldr	r2, [pc, #316]	; (8003fe4 <HAL_GPIO_Init+0x308>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d025      	beq.n	8003ef6 <HAL_GPIO_Init+0x21a>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4e      	ldr	r2, [pc, #312]	; (8003fe8 <HAL_GPIO_Init+0x30c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d01f      	beq.n	8003ef2 <HAL_GPIO_Init+0x216>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4d      	ldr	r2, [pc, #308]	; (8003fec <HAL_GPIO_Init+0x310>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d019      	beq.n	8003eee <HAL_GPIO_Init+0x212>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a4c      	ldr	r2, [pc, #304]	; (8003ff0 <HAL_GPIO_Init+0x314>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d013      	beq.n	8003eea <HAL_GPIO_Init+0x20e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a4b      	ldr	r2, [pc, #300]	; (8003ff4 <HAL_GPIO_Init+0x318>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00d      	beq.n	8003ee6 <HAL_GPIO_Init+0x20a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a4a      	ldr	r2, [pc, #296]	; (8003ff8 <HAL_GPIO_Init+0x31c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <HAL_GPIO_Init+0x206>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a49      	ldr	r2, [pc, #292]	; (8003ffc <HAL_GPIO_Init+0x320>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d101      	bne.n	8003ede <HAL_GPIO_Init+0x202>
 8003eda:	2306      	movs	r3, #6
 8003edc:	e00c      	b.n	8003ef8 <HAL_GPIO_Init+0x21c>
 8003ede:	2307      	movs	r3, #7
 8003ee0:	e00a      	b.n	8003ef8 <HAL_GPIO_Init+0x21c>
 8003ee2:	2305      	movs	r3, #5
 8003ee4:	e008      	b.n	8003ef8 <HAL_GPIO_Init+0x21c>
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	e006      	b.n	8003ef8 <HAL_GPIO_Init+0x21c>
 8003eea:	2303      	movs	r3, #3
 8003eec:	e004      	b.n	8003ef8 <HAL_GPIO_Init+0x21c>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e002      	b.n	8003ef8 <HAL_GPIO_Init+0x21c>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_GPIO_Init+0x21c>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	f002 0203 	and.w	r2, r2, #3
 8003efe:	0092      	lsls	r2, r2, #2
 8003f00:	4093      	lsls	r3, r2
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f08:	4935      	ldr	r1, [pc, #212]	; (8003fe0 <HAL_GPIO_Init+0x304>)
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	3302      	adds	r3, #2
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f16:	4b3a      	ldr	r3, [pc, #232]	; (8004000 <HAL_GPIO_Init+0x324>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f3a:	4a31      	ldr	r2, [pc, #196]	; (8004000 <HAL_GPIO_Init+0x324>)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f40:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <HAL_GPIO_Init+0x324>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f64:	4a26      	ldr	r2, [pc, #152]	; (8004000 <HAL_GPIO_Init+0x324>)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f6a:	4b25      	ldr	r3, [pc, #148]	; (8004000 <HAL_GPIO_Init+0x324>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f8e:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_GPIO_Init+0x324>)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_GPIO_Init+0x324>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fb8:	4a11      	ldr	r2, [pc, #68]	; (8004000 <HAL_GPIO_Init+0x324>)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b0f      	cmp	r3, #15
 8003fc8:	f67f ae96 	bls.w	8003cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40013800 	.word	0x40013800
 8003fe4:	40020000 	.word	0x40020000
 8003fe8:	40020400 	.word	0x40020400
 8003fec:	40020800 	.word	0x40020800
 8003ff0:	40020c00 	.word	0x40020c00
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40021400 	.word	0x40021400
 8003ffc:	40021800 	.word	0x40021800
 8004000:	40013c00 	.word	0x40013c00

08004004 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	807b      	strh	r3, [r7, #2]
 8004010:	4613      	mov	r3, r2
 8004012:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004014:	787b      	ldrb	r3, [r7, #1]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401a:	887a      	ldrh	r2, [r7, #2]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004020:	e003      	b.n	800402a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	041a      	lsls	r2, r3, #16
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	619a      	str	r2, [r3, #24]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004048:	887a      	ldrh	r2, [r7, #2]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	041a      	lsls	r2, r3, #16
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	43d9      	mvns	r1, r3
 8004054:	887b      	ldrh	r3, [r7, #2]
 8004056:	400b      	ands	r3, r1
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	619a      	str	r2, [r3, #24]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
	...

0800406c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e12b      	b.n	80042d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7ff f90e 	bl	80032b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2224      	movs	r2, #36	; 0x24
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040d0:	f001 f932 	bl	8005338 <HAL_RCC_GetPCLK1Freq>
 80040d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4a81      	ldr	r2, [pc, #516]	; (80042e0 <HAL_I2C_Init+0x274>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d807      	bhi.n	80040f0 <HAL_I2C_Init+0x84>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a80      	ldr	r2, [pc, #512]	; (80042e4 <HAL_I2C_Init+0x278>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	bf94      	ite	ls
 80040e8:	2301      	movls	r3, #1
 80040ea:	2300      	movhi	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	e006      	b.n	80040fe <HAL_I2C_Init+0x92>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4a7d      	ldr	r2, [pc, #500]	; (80042e8 <HAL_I2C_Init+0x27c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	bf94      	ite	ls
 80040f8:	2301      	movls	r3, #1
 80040fa:	2300      	movhi	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e0e7      	b.n	80042d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a78      	ldr	r2, [pc, #480]	; (80042ec <HAL_I2C_Init+0x280>)
 800410a:	fba2 2303 	umull	r2, r3, r2, r3
 800410e:	0c9b      	lsrs	r3, r3, #18
 8004110:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a6a      	ldr	r2, [pc, #424]	; (80042e0 <HAL_I2C_Init+0x274>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d802      	bhi.n	8004140 <HAL_I2C_Init+0xd4>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	3301      	adds	r3, #1
 800413e:	e009      	b.n	8004154 <HAL_I2C_Init+0xe8>
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004146:	fb02 f303 	mul.w	r3, r2, r3
 800414a:	4a69      	ldr	r2, [pc, #420]	; (80042f0 <HAL_I2C_Init+0x284>)
 800414c:	fba2 2303 	umull	r2, r3, r2, r3
 8004150:	099b      	lsrs	r3, r3, #6
 8004152:	3301      	adds	r3, #1
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6812      	ldr	r2, [r2, #0]
 8004158:	430b      	orrs	r3, r1
 800415a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004166:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	495c      	ldr	r1, [pc, #368]	; (80042e0 <HAL_I2C_Init+0x274>)
 8004170:	428b      	cmp	r3, r1
 8004172:	d819      	bhi.n	80041a8 <HAL_I2C_Init+0x13c>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1e59      	subs	r1, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004182:	1c59      	adds	r1, r3, #1
 8004184:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004188:	400b      	ands	r3, r1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_I2C_Init+0x138>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1e59      	subs	r1, r3, #1
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	fbb1 f3f3 	udiv	r3, r1, r3
 800419c:	3301      	adds	r3, #1
 800419e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a2:	e051      	b.n	8004248 <HAL_I2C_Init+0x1dc>
 80041a4:	2304      	movs	r3, #4
 80041a6:	e04f      	b.n	8004248 <HAL_I2C_Init+0x1dc>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d111      	bne.n	80041d4 <HAL_I2C_Init+0x168>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1e58      	subs	r0, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	440b      	add	r3, r1
 80041be:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c2:	3301      	adds	r3, #1
 80041c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2301      	moveq	r3, #1
 80041ce:	2300      	movne	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e012      	b.n	80041fa <HAL_I2C_Init+0x18e>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	1e58      	subs	r0, r3, #1
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	440b      	add	r3, r1
 80041e2:	0099      	lsls	r1, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ea:	3301      	adds	r3, #1
 80041ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_I2C_Init+0x196>
 80041fe:	2301      	movs	r3, #1
 8004200:	e022      	b.n	8004248 <HAL_I2C_Init+0x1dc>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10e      	bne.n	8004228 <HAL_I2C_Init+0x1bc>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1e58      	subs	r0, r3, #1
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6859      	ldr	r1, [r3, #4]
 8004212:	460b      	mov	r3, r1
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	440b      	add	r3, r1
 8004218:	fbb0 f3f3 	udiv	r3, r0, r3
 800421c:	3301      	adds	r3, #1
 800421e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004226:	e00f      	b.n	8004248 <HAL_I2C_Init+0x1dc>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	1e58      	subs	r0, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6859      	ldr	r1, [r3, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	0099      	lsls	r1, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	fbb0 f3f3 	udiv	r3, r0, r3
 800423e:	3301      	adds	r3, #1
 8004240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004244:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	6809      	ldr	r1, [r1, #0]
 800424c:	4313      	orrs	r3, r2
 800424e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	431a      	orrs	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004276:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	6911      	ldr	r1, [r2, #16]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	68d2      	ldr	r2, [r2, #12]
 8004282:	4311      	orrs	r1, r2
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6812      	ldr	r2, [r2, #0]
 8004288:	430b      	orrs	r3, r1
 800428a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f042 0201 	orr.w	r2, r2, #1
 80042b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	000186a0 	.word	0x000186a0
 80042e4:	001e847f 	.word	0x001e847f
 80042e8:	003d08ff 	.word	0x003d08ff
 80042ec:	431bde83 	.word	0x431bde83
 80042f0:	10624dd3 	.word	0x10624dd3

080042f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b088      	sub	sp, #32
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	4608      	mov	r0, r1
 80042fe:	4611      	mov	r1, r2
 8004300:	461a      	mov	r2, r3
 8004302:	4603      	mov	r3, r0
 8004304:	817b      	strh	r3, [r7, #10]
 8004306:	460b      	mov	r3, r1
 8004308:	813b      	strh	r3, [r7, #8]
 800430a:	4613      	mov	r3, r2
 800430c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800430e:	f7ff fba3 	bl	8003a58 <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b20      	cmp	r3, #32
 800431e:	f040 80d9 	bne.w	80044d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	2319      	movs	r3, #25
 8004328:	2201      	movs	r2, #1
 800432a:	496d      	ldr	r1, [pc, #436]	; (80044e0 <HAL_I2C_Mem_Write+0x1ec>)
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 fc8b 	bl	8004c48 <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004338:	2302      	movs	r3, #2
 800433a:	e0cc      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004342:	2b01      	cmp	r3, #1
 8004344:	d101      	bne.n	800434a <HAL_I2C_Mem_Write+0x56>
 8004346:	2302      	movs	r3, #2
 8004348:	e0c5      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b01      	cmp	r3, #1
 800435e:	d007      	beq.n	8004370 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800437e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2221      	movs	r2, #33	; 0x21
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2240      	movs	r2, #64	; 0x40
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a4d      	ldr	r2, [pc, #308]	; (80044e4 <HAL_I2C_Mem_Write+0x1f0>)
 80043b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043b2:	88f8      	ldrh	r0, [r7, #6]
 80043b4:	893a      	ldrh	r2, [r7, #8]
 80043b6:	8979      	ldrh	r1, [r7, #10]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	4603      	mov	r3, r0
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fac2 	bl	800494c <I2C_RequestMemoryWrite>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d052      	beq.n	8004474 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e081      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 fd50 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d107      	bne.n	80043fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e06b      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	781a      	ldrb	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	1c5a      	adds	r2, r3, #1
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695b      	ldr	r3, [r3, #20]
 8004434:	f003 0304 	and.w	r3, r3, #4
 8004438:	2b04      	cmp	r3, #4
 800443a:	d11b      	bne.n	8004474 <HAL_I2C_Mem_Write+0x180>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	2b00      	cmp	r3, #0
 8004442:	d017      	beq.n	8004474 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	781a      	ldrb	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004454:	1c5a      	adds	r2, r3, #1
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800446a:	b29b      	uxth	r3, r3
 800446c:	3b01      	subs	r3, #1
 800446e:	b29a      	uxth	r2, r3
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1aa      	bne.n	80043d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fd43 	bl	8004f0c <I2C_WaitOnBTFFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00d      	beq.n	80044a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b04      	cmp	r3, #4
 8004492:	d107      	bne.n	80044a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e016      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3718      	adds	r7, #24
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	00100002 	.word	0x00100002
 80044e4:	ffff0000 	.word	0xffff0000

080044e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	; 0x30
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	4608      	mov	r0, r1
 80044f2:	4611      	mov	r1, r2
 80044f4:	461a      	mov	r2, r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	817b      	strh	r3, [r7, #10]
 80044fa:	460b      	mov	r3, r1
 80044fc:	813b      	strh	r3, [r7, #8]
 80044fe:	4613      	mov	r3, r2
 8004500:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004502:	f7ff faa9 	bl	8003a58 <HAL_GetTick>
 8004506:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b20      	cmp	r3, #32
 8004512:	f040 8214 	bne.w	800493e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2319      	movs	r3, #25
 800451c:	2201      	movs	r2, #1
 800451e:	497b      	ldr	r1, [pc, #492]	; (800470c <HAL_I2C_Mem_Read+0x224>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fb91 	bl	8004c48 <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
 800452e:	e207      	b.n	8004940 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_I2C_Mem_Read+0x56>
 800453a:	2302      	movs	r3, #2
 800453c:	e200      	b.n	8004940 <HAL_I2C_Mem_Read+0x458>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b01      	cmp	r3, #1
 8004552:	d007      	beq.n	8004564 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f042 0201 	orr.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004572:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2222      	movs	r2, #34	; 0x22
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2240      	movs	r2, #64	; 0x40
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a5b      	ldr	r2, [pc, #364]	; (8004710 <HAL_I2C_Mem_Read+0x228>)
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045a6:	88f8      	ldrh	r0, [r7, #6]
 80045a8:	893a      	ldrh	r2, [r7, #8]
 80045aa:	8979      	ldrh	r1, [r7, #10]
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	9301      	str	r3, [sp, #4]
 80045b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4603      	mov	r3, r0
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 fa5e 	bl	8004a78 <I2C_RequestMemoryRead>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e1bc      	b.n	8004940 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d113      	bne.n	80045f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ce:	2300      	movs	r3, #0
 80045d0:	623b      	str	r3, [r7, #32]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	623b      	str	r3, [r7, #32]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e190      	b.n	8004918 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d11b      	bne.n	8004636 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	695b      	ldr	r3, [r3, #20]
 8004618:	61fb      	str	r3, [r7, #28]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	e170      	b.n	8004918 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	2b02      	cmp	r3, #2
 800463c:	d11b      	bne.n	8004676 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	e150      	b.n	8004918 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800468c:	e144      	b.n	8004918 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004692:	2b03      	cmp	r3, #3
 8004694:	f200 80f1 	bhi.w	800487a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800469c:	2b01      	cmp	r3, #1
 800469e:	d123      	bne.n	80046e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f000 fc79 	bl	8004f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e145      	b.n	8004940 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c6:	1c5a      	adds	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	3b01      	subs	r3, #1
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e6:	e117      	b.n	8004918 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d14e      	bne.n	800478e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f6:	2200      	movs	r2, #0
 80046f8:	4906      	ldr	r1, [pc, #24]	; (8004714 <HAL_I2C_Mem_Read+0x22c>)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 faa4 	bl	8004c48 <I2C_WaitOnFlagUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e11a      	b.n	8004940 <HAL_I2C_Mem_Read+0x458>
 800470a:	bf00      	nop
 800470c:	00100002 	.word	0x00100002
 8004710:	ffff0000 	.word	0xffff0000
 8004714:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691a      	ldr	r2, [r3, #16]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004732:	b2d2      	uxtb	r2, r2
 8004734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800478c:	e0c4      	b.n	8004918 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	2200      	movs	r2, #0
 8004796:	496c      	ldr	r1, [pc, #432]	; (8004948 <HAL_I2C_Mem_Read+0x460>)
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f000 fa55 	bl	8004c48 <I2C_WaitOnFlagUntilTimeout>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0cb      	b.n	8004940 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	1c5a      	adds	r2, r3, #1
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d4:	3b01      	subs	r3, #1
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	2200      	movs	r2, #0
 80047f2:	4955      	ldr	r1, [pc, #340]	; (8004948 <HAL_I2C_Mem_Read+0x460>)
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 fa27 	bl	8004c48 <I2C_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e09d      	b.n	8004940 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	1c5a      	adds	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	691a      	ldr	r2, [r3, #16]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486e:	b29b      	uxth	r3, r3
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004878:	e04e      	b.n	8004918 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800487a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fb8c 	bl	8004f9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e058      	b.n	8004940 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f003 0304 	and.w	r3, r3, #4
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d124      	bne.n	8004918 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d107      	bne.n	80048e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	2b00      	cmp	r3, #0
 800491e:	f47f aeb6 	bne.w	800468e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	e000      	b.n	8004940 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800493e:	2302      	movs	r3, #2
  }
}
 8004940:	4618      	mov	r0, r3
 8004942:	3728      	adds	r7, #40	; 0x28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	00010004 	.word	0x00010004

0800494c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	4608      	mov	r0, r1
 8004956:	4611      	mov	r1, r2
 8004958:	461a      	mov	r2, r3
 800495a:	4603      	mov	r3, r0
 800495c:	817b      	strh	r3, [r7, #10]
 800495e:	460b      	mov	r3, r1
 8004960:	813b      	strh	r3, [r7, #8]
 8004962:	4613      	mov	r3, r2
 8004964:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004974:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	2200      	movs	r2, #0
 800497e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f000 f960 	bl	8004c48 <I2C_WaitOnFlagUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00d      	beq.n	80049aa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800499c:	d103      	bne.n	80049a6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e05f      	b.n	8004a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049aa:	897b      	ldrh	r3, [r7, #10]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	6a3a      	ldr	r2, [r7, #32]
 80049be:	492d      	ldr	r1, [pc, #180]	; (8004a74 <I2C_RequestMemoryWrite+0x128>)
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f9bb 	bl	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e04c      	b.n	8004a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d0:	2300      	movs	r3, #0
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e8:	6a39      	ldr	r1, [r7, #32]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f000 fa46 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00d      	beq.n	8004a12 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d107      	bne.n	8004a0e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a0c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e02b      	b.n	8004a6a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d105      	bne.n	8004a24 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a18:	893b      	ldrh	r3, [r7, #8]
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	611a      	str	r2, [r3, #16]
 8004a22:	e021      	b.n	8004a68 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a24:	893b      	ldrh	r3, [r7, #8]
 8004a26:	0a1b      	lsrs	r3, r3, #8
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	6a39      	ldr	r1, [r7, #32]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fa20 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00d      	beq.n	8004a5e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	d107      	bne.n	8004a5a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a58:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e005      	b.n	8004a6a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a5e:	893b      	ldrh	r3, [r7, #8]
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004a68:	2300      	movs	r3, #0
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	00010002 	.word	0x00010002

08004a78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b088      	sub	sp, #32
 8004a7c:	af02      	add	r7, sp, #8
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	4608      	mov	r0, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	461a      	mov	r2, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	817b      	strh	r3, [r7, #10]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	813b      	strh	r3, [r7, #8]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 f8c2 	bl	8004c48 <I2C_WaitOnFlagUntilTimeout>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00d      	beq.n	8004ae6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ad8:	d103      	bne.n	8004ae2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e0aa      	b.n	8004c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ae6:	897b      	ldrh	r3, [r7, #10]
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	461a      	mov	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004af4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	6a3a      	ldr	r2, [r7, #32]
 8004afa:	4952      	ldr	r1, [pc, #328]	; (8004c44 <I2C_RequestMemoryRead+0x1cc>)
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f000 f91d 	bl	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e097      	b.n	8004c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	699b      	ldr	r3, [r3, #24]
 8004b1e:	617b      	str	r3, [r7, #20]
 8004b20:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b24:	6a39      	ldr	r1, [r7, #32]
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f000 f9a8 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00d      	beq.n	8004b4e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d107      	bne.n	8004b4a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b48:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e076      	b.n	8004c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b4e:	88fb      	ldrh	r3, [r7, #6]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d105      	bne.n	8004b60 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b54:	893b      	ldrh	r3, [r7, #8]
 8004b56:	b2da      	uxtb	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]
 8004b5e:	e021      	b.n	8004ba4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004b60:	893b      	ldrh	r3, [r7, #8]
 8004b62:	0a1b      	lsrs	r3, r3, #8
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b70:	6a39      	ldr	r1, [r7, #32]
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f000 f982 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d107      	bne.n	8004b96 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b94:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e050      	b.n	8004c3c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b9a:	893b      	ldrh	r3, [r7, #8]
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	6a39      	ldr	r1, [r7, #32]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 f967 	bl	8004e7c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00d      	beq.n	8004bd0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d107      	bne.n	8004bcc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e035      	b.n	8004c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bde:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	9300      	str	r3, [sp, #0]
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f000 f82b 	bl	8004c48 <I2C_WaitOnFlagUntilTimeout>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00d      	beq.n	8004c14 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c06:	d103      	bne.n	8004c10 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e013      	b.n	8004c3c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c14:	897b      	ldrh	r3, [r7, #10]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c26:	6a3a      	ldr	r2, [r7, #32]
 8004c28:	4906      	ldr	r1, [pc, #24]	; (8004c44 <I2C_RequestMemoryRead+0x1cc>)
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 f886 	bl	8004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e000      	b.n	8004c3c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	00010002 	.word	0x00010002

08004c48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	4613      	mov	r3, r2
 8004c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c58:	e048      	b.n	8004cec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d044      	beq.n	8004cec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c62:	f7fe fef9 	bl	8003a58 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d302      	bcc.n	8004c78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d139      	bne.n	8004cec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	0c1b      	lsrs	r3, r3, #16
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10d      	bne.n	8004c9e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	43da      	mvns	r2, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf0c      	ite	eq
 8004c94:	2301      	moveq	r3, #1
 8004c96:	2300      	movne	r3, #0
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	e00c      	b.n	8004cb8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	43da      	mvns	r2, r3
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	4013      	ands	r3, r2
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf0c      	ite	eq
 8004cb0:	2301      	moveq	r3, #1
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	79fb      	ldrb	r3, [r7, #7]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d116      	bne.n	8004cec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	f043 0220 	orr.w	r2, r3, #32
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e023      	b.n	8004d34 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d10d      	bne.n	8004d12 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	43da      	mvns	r2, r3
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	4013      	ands	r3, r2
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	461a      	mov	r2, r3
 8004d10:	e00c      	b.n	8004d2c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	43da      	mvns	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	bf0c      	ite	eq
 8004d24:	2301      	moveq	r3, #1
 8004d26:	2300      	movne	r3, #0
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d093      	beq.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d4a:	e071      	b.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5a:	d123      	bne.n	8004da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f043 0204 	orr.w	r2, r3, #4
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e067      	b.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d041      	beq.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dac:	f7fe fe54 	bl	8003a58 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d302      	bcc.n	8004dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d136      	bne.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10c      	bne.n	8004de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bf14      	ite	ne
 8004dde:	2301      	movne	r3, #1
 8004de0:	2300      	moveq	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	e00b      	b.n	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	43da      	mvns	r2, r3
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf14      	ite	ne
 8004df8:	2301      	movne	r3, #1
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f043 0220 	orr.w	r2, r3, #32
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e021      	b.n	8004e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	0c1b      	lsrs	r3, r3, #16
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d10c      	bne.n	8004e54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	43da      	mvns	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	4013      	ands	r3, r2
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	bf14      	ite	ne
 8004e4c:	2301      	movne	r3, #1
 8004e4e:	2300      	moveq	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	e00b      	b.n	8004e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	43da      	mvns	r2, r3
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4013      	ands	r3, r2
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf14      	ite	ne
 8004e66:	2301      	movne	r3, #1
 8004e68:	2300      	moveq	r3, #0
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	f47f af6d 	bne.w	8004d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e88:	e034      	b.n	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f8e3 	bl	8005056 <I2C_IsAcknowledgeFailed>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e034      	b.n	8004f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea0:	d028      	beq.n	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ea2:	f7fe fdd9 	bl	8003a58 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d302      	bcc.n	8004eb8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d11d      	bne.n	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec2:	2b80      	cmp	r3, #128	; 0x80
 8004ec4:	d016      	beq.n	8004ef4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee0:	f043 0220 	orr.w	r2, r3, #32
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e007      	b.n	8004f04 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b80      	cmp	r3, #128	; 0x80
 8004f00:	d1c3      	bne.n	8004e8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	60f8      	str	r0, [r7, #12]
 8004f14:	60b9      	str	r1, [r7, #8]
 8004f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f18:	e034      	b.n	8004f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f89b 	bl	8005056 <I2C_IsAcknowledgeFailed>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e034      	b.n	8004f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f30:	d028      	beq.n	8004f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f32:	f7fe fd91 	bl	8003a58 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d302      	bcc.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d11d      	bne.n	8004f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d016      	beq.n	8004f84 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f70:	f043 0220 	orr.w	r2, r3, #32
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e007      	b.n	8004f94 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d1c3      	bne.n	8004f1a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fa8:	e049      	b.n	800503e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	695b      	ldr	r3, [r3, #20]
 8004fb0:	f003 0310 	and.w	r3, r3, #16
 8004fb4:	2b10      	cmp	r3, #16
 8004fb6:	d119      	bne.n	8004fec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f06f 0210 	mvn.w	r2, #16
 8004fc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e030      	b.n	800504e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fec:	f7fe fd34 	bl	8003a58 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d302      	bcc.n	8005002 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d11d      	bne.n	800503e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d016      	beq.n	800503e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2200      	movs	r2, #0
 8005014:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f043 0220 	orr.w	r2, r3, #32
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e007      	b.n	800504e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b40      	cmp	r3, #64	; 0x40
 800504a:	d1ae      	bne.n	8004faa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506c:	d11b      	bne.n	80050a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005076:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0204 	orr.w	r2, r3, #4
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	603b      	str	r3, [r7, #0]
 80050c2:	4b20      	ldr	r3, [pc, #128]	; (8005144 <HAL_PWREx_EnableOverDrive+0x90>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4a1f      	ldr	r2, [pc, #124]	; (8005144 <HAL_PWREx_EnableOverDrive+0x90>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	; 0x40
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <HAL_PWREx_EnableOverDrive+0x90>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_PWREx_EnableOverDrive+0x94>)
 80050dc:	2201      	movs	r2, #1
 80050de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050e0:	f7fe fcba 	bl	8003a58 <HAL_GetTick>
 80050e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050e6:	e009      	b.n	80050fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050e8:	f7fe fcb6 	bl	8003a58 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050f6:	d901      	bls.n	80050fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e01f      	b.n	800513c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80050fc:	4b13      	ldr	r3, [pc, #76]	; (800514c <HAL_PWREx_EnableOverDrive+0x98>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005108:	d1ee      	bne.n	80050e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800510a:	4b11      	ldr	r3, [pc, #68]	; (8005150 <HAL_PWREx_EnableOverDrive+0x9c>)
 800510c:	2201      	movs	r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005110:	f7fe fca2 	bl	8003a58 <HAL_GetTick>
 8005114:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005116:	e009      	b.n	800512c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005118:	f7fe fc9e 	bl	8003a58 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005126:	d901      	bls.n	800512c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e007      	b.n	800513c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800512c:	4b07      	ldr	r3, [pc, #28]	; (800514c <HAL_PWREx_EnableOverDrive+0x98>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005134:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005138:	d1ee      	bne.n	8005118 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40023800 	.word	0x40023800
 8005148:	420e0040 	.word	0x420e0040
 800514c:	40007000 	.word	0x40007000
 8005150:	420e0044 	.word	0x420e0044

08005154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0cc      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005168:	4b68      	ldr	r3, [pc, #416]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d90c      	bls.n	8005190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b65      	ldr	r3, [pc, #404]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517e:	4b63      	ldr	r3, [pc, #396]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0b8      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d020      	beq.n	80051de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a8:	4b59      	ldr	r3, [pc, #356]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	4a58      	ldr	r2, [pc, #352]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051c0:	4b53      	ldr	r3, [pc, #332]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4a52      	ldr	r2, [pc, #328]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051cc:	4b50      	ldr	r3, [pc, #320]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	494d      	ldr	r1, [pc, #308]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d044      	beq.n	8005274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d107      	bne.n	8005202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f2:	4b47      	ldr	r3, [pc, #284]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d119      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d003      	beq.n	8005212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800520e:	2b03      	cmp	r3, #3
 8005210:	d107      	bne.n	8005222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	4b3f      	ldr	r3, [pc, #252]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e06f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005222:	4b3b      	ldr	r3, [pc, #236]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e067      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005232:	4b37      	ldr	r3, [pc, #220]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 0203 	bic.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4934      	ldr	r1, [pc, #208]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	4313      	orrs	r3, r2
 8005242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005244:	f7fe fc08 	bl	8003a58 <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	e00a      	b.n	8005262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524c:	f7fe fc04 	bl	8003a58 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	; 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e04f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005262:	4b2b      	ldr	r3, [pc, #172]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 020c 	and.w	r2, r3, #12
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	429a      	cmp	r2, r3
 8005272:	d1eb      	bne.n	800524c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005274:	4b25      	ldr	r3, [pc, #148]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 030f 	and.w	r3, r3, #15
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d20c      	bcs.n	800529c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b22      	ldr	r3, [pc, #136]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528a:	4b20      	ldr	r3, [pc, #128]	; (800530c <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e032      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a8:	4b19      	ldr	r3, [pc, #100]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4916      	ldr	r1, [pc, #88]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c6:	4b12      	ldr	r3, [pc, #72]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	490e      	ldr	r1, [pc, #56]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052da:	f000 f855 	bl	8005388 <HAL_RCC_GetSysClockFreq>
 80052de:	4602      	mov	r2, r0
 80052e0:	4b0b      	ldr	r3, [pc, #44]	; (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	490a      	ldr	r1, [pc, #40]	; (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 80052ec:	5ccb      	ldrb	r3, [r1, r3]
 80052ee:	fa22 f303 	lsr.w	r3, r2, r3
 80052f2:	4a09      	ldr	r2, [pc, #36]	; (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <HAL_RCC_ClockConfig+0x1c8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fb68 	bl	80039d0 <HAL_InitTick>

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023c00 	.word	0x40023c00
 8005310:	40023800 	.word	0x40023800
 8005314:	0800c5ac 	.word	0x0800c5ac
 8005318:	20000000 	.word	0x20000000
 800531c:	20000004 	.word	0x20000004

08005320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005320:	b480      	push	{r7}
 8005322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005324:	4b03      	ldr	r3, [pc, #12]	; (8005334 <HAL_RCC_GetHCLKFreq+0x14>)
 8005326:	681b      	ldr	r3, [r3, #0]
}
 8005328:	4618      	mov	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000000 	.word	0x20000000

08005338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800533c:	f7ff fff0 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 8005340:	4602      	mov	r2, r0
 8005342:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	0a9b      	lsrs	r3, r3, #10
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	4903      	ldr	r1, [pc, #12]	; (800535c <HAL_RCC_GetPCLK1Freq+0x24>)
 800534e:	5ccb      	ldrb	r3, [r1, r3]
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005354:	4618      	mov	r0, r3
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40023800 	.word	0x40023800
 800535c:	0800c5bc 	.word	0x0800c5bc

08005360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005364:	f7ff ffdc 	bl	8005320 <HAL_RCC_GetHCLKFreq>
 8005368:	4602      	mov	r2, r0
 800536a:	4b05      	ldr	r3, [pc, #20]	; (8005380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	0b5b      	lsrs	r3, r3, #13
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	4903      	ldr	r1, [pc, #12]	; (8005384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005376:	5ccb      	ldrb	r3, [r1, r3]
 8005378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800537c:	4618      	mov	r0, r3
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40023800 	.word	0x40023800
 8005384:	0800c5bc 	.word	0x0800c5bc

08005388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800538c:	b0a6      	sub	sp, #152	; 0x98
 800538e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005396:	2300      	movs	r3, #0
 8005398:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053ae:	4bc8      	ldr	r3, [pc, #800]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 030c 	and.w	r3, r3, #12
 80053b6:	2b0c      	cmp	r3, #12
 80053b8:	f200 817e 	bhi.w	80056b8 <HAL_RCC_GetSysClockFreq+0x330>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053f9 	.word	0x080053f9
 80053c8:	080056b9 	.word	0x080056b9
 80053cc:	080056b9 	.word	0x080056b9
 80053d0:	080056b9 	.word	0x080056b9
 80053d4:	08005401 	.word	0x08005401
 80053d8:	080056b9 	.word	0x080056b9
 80053dc:	080056b9 	.word	0x080056b9
 80053e0:	080056b9 	.word	0x080056b9
 80053e4:	08005409 	.word	0x08005409
 80053e8:	080056b9 	.word	0x080056b9
 80053ec:	080056b9 	.word	0x080056b9
 80053f0:	080056b9 	.word	0x080056b9
 80053f4:	08005573 	.word	0x08005573
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053f8:	4bb6      	ldr	r3, [pc, #728]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80053fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80053fe:	e15f      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005400:	4bb5      	ldr	r3, [pc, #724]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005402:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005406:	e15b      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005408:	4bb1      	ldr	r3, [pc, #708]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005410:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005414:	4bae      	ldr	r3, [pc, #696]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541c:	2b00      	cmp	r3, #0
 800541e:	d031      	beq.n	8005484 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005420:	4bab      	ldr	r3, [pc, #684]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	099b      	lsrs	r3, r3, #6
 8005426:	2200      	movs	r2, #0
 8005428:	66bb      	str	r3, [r7, #104]	; 0x68
 800542a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800542c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800542e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005432:	663b      	str	r3, [r7, #96]	; 0x60
 8005434:	2300      	movs	r3, #0
 8005436:	667b      	str	r3, [r7, #100]	; 0x64
 8005438:	4ba7      	ldr	r3, [pc, #668]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x350>)
 800543a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800543e:	462a      	mov	r2, r5
 8005440:	fb03 f202 	mul.w	r2, r3, r2
 8005444:	2300      	movs	r3, #0
 8005446:	4621      	mov	r1, r4
 8005448:	fb01 f303 	mul.w	r3, r1, r3
 800544c:	4413      	add	r3, r2
 800544e:	4aa2      	ldr	r2, [pc, #648]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x350>)
 8005450:	4621      	mov	r1, r4
 8005452:	fba1 1202 	umull	r1, r2, r1, r2
 8005456:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005458:	460a      	mov	r2, r1
 800545a:	67ba      	str	r2, [r7, #120]	; 0x78
 800545c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800545e:	4413      	add	r3, r2
 8005460:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005466:	2200      	movs	r2, #0
 8005468:	65bb      	str	r3, [r7, #88]	; 0x58
 800546a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800546c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005470:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005474:	f7fb fc28 	bl	8000cc8 <__aeabi_uldivmod>
 8005478:	4602      	mov	r2, r0
 800547a:	460b      	mov	r3, r1
 800547c:	4613      	mov	r3, r2
 800547e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005482:	e064      	b.n	800554e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005484:	4b92      	ldr	r3, [pc, #584]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	099b      	lsrs	r3, r3, #6
 800548a:	2200      	movs	r2, #0
 800548c:	653b      	str	r3, [r7, #80]	; 0x50
 800548e:	657a      	str	r2, [r7, #84]	; 0x54
 8005490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	64bb      	str	r3, [r7, #72]	; 0x48
 8005498:	2300      	movs	r3, #0
 800549a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800549c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80054a0:	4622      	mov	r2, r4
 80054a2:	462b      	mov	r3, r5
 80054a4:	f04f 0000 	mov.w	r0, #0
 80054a8:	f04f 0100 	mov.w	r1, #0
 80054ac:	0159      	lsls	r1, r3, #5
 80054ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054b2:	0150      	lsls	r0, r2, #5
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	4621      	mov	r1, r4
 80054ba:	1a51      	subs	r1, r2, r1
 80054bc:	6139      	str	r1, [r7, #16]
 80054be:	4629      	mov	r1, r5
 80054c0:	eb63 0301 	sbc.w	r3, r3, r1
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	f04f 0200 	mov.w	r2, #0
 80054ca:	f04f 0300 	mov.w	r3, #0
 80054ce:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054d2:	4659      	mov	r1, fp
 80054d4:	018b      	lsls	r3, r1, #6
 80054d6:	4651      	mov	r1, sl
 80054d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054dc:	4651      	mov	r1, sl
 80054de:	018a      	lsls	r2, r1, #6
 80054e0:	4651      	mov	r1, sl
 80054e2:	ebb2 0801 	subs.w	r8, r2, r1
 80054e6:	4659      	mov	r1, fp
 80054e8:	eb63 0901 	sbc.w	r9, r3, r1
 80054ec:	f04f 0200 	mov.w	r2, #0
 80054f0:	f04f 0300 	mov.w	r3, #0
 80054f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80054fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005500:	4690      	mov	r8, r2
 8005502:	4699      	mov	r9, r3
 8005504:	4623      	mov	r3, r4
 8005506:	eb18 0303 	adds.w	r3, r8, r3
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	462b      	mov	r3, r5
 800550e:	eb49 0303 	adc.w	r3, r9, r3
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005520:	4629      	mov	r1, r5
 8005522:	028b      	lsls	r3, r1, #10
 8005524:	4621      	mov	r1, r4
 8005526:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800552a:	4621      	mov	r1, r4
 800552c:	028a      	lsls	r2, r1, #10
 800552e:	4610      	mov	r0, r2
 8005530:	4619      	mov	r1, r3
 8005532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005536:	2200      	movs	r2, #0
 8005538:	643b      	str	r3, [r7, #64]	; 0x40
 800553a:	647a      	str	r2, [r7, #68]	; 0x44
 800553c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005540:	f7fb fbc2 	bl	8000cc8 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4613      	mov	r3, r2
 800554a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800554e:	4b60      	ldr	r3, [pc, #384]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	0c1b      	lsrs	r3, r3, #16
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	3301      	adds	r3, #1
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005560:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005568:	fbb2 f3f3 	udiv	r3, r2, r3
 800556c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005570:	e0a6      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005572:	4b57      	ldr	r3, [pc, #348]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800557a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800557e:	4b54      	ldr	r3, [pc, #336]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d02a      	beq.n	80055e0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800558a:	4b51      	ldr	r3, [pc, #324]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	099b      	lsrs	r3, r3, #6
 8005590:	2200      	movs	r2, #0
 8005592:	63bb      	str	r3, [r7, #56]	; 0x38
 8005594:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005598:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800559c:	2100      	movs	r1, #0
 800559e:	4b4e      	ldr	r3, [pc, #312]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80055a0:	fb03 f201 	mul.w	r2, r3, r1
 80055a4:	2300      	movs	r3, #0
 80055a6:	fb00 f303 	mul.w	r3, r0, r3
 80055aa:	4413      	add	r3, r2
 80055ac:	4a4a      	ldr	r2, [pc, #296]	; (80056d8 <HAL_RCC_GetSysClockFreq+0x350>)
 80055ae:	fba0 1202 	umull	r1, r2, r0, r2
 80055b2:	677a      	str	r2, [r7, #116]	; 0x74
 80055b4:	460a      	mov	r2, r1
 80055b6:	673a      	str	r2, [r7, #112]	; 0x70
 80055b8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80055ba:	4413      	add	r3, r2
 80055bc:	677b      	str	r3, [r7, #116]	; 0x74
 80055be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055c2:	2200      	movs	r2, #0
 80055c4:	633b      	str	r3, [r7, #48]	; 0x30
 80055c6:	637a      	str	r2, [r7, #52]	; 0x34
 80055c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80055cc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80055d0:	f7fb fb7a 	bl	8000cc8 <__aeabi_uldivmod>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4613      	mov	r3, r2
 80055da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80055de:	e05b      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e0:	4b3b      	ldr	r3, [pc, #236]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	099b      	lsrs	r3, r3, #6
 80055e6:	2200      	movs	r2, #0
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	2300      	movs	r3, #0
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
 80055f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055fc:	4642      	mov	r2, r8
 80055fe:	464b      	mov	r3, r9
 8005600:	f04f 0000 	mov.w	r0, #0
 8005604:	f04f 0100 	mov.w	r1, #0
 8005608:	0159      	lsls	r1, r3, #5
 800560a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800560e:	0150      	lsls	r0, r2, #5
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4641      	mov	r1, r8
 8005616:	ebb2 0a01 	subs.w	sl, r2, r1
 800561a:	4649      	mov	r1, r9
 800561c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005620:	f04f 0200 	mov.w	r2, #0
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800562c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005630:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005634:	ebb2 040a 	subs.w	r4, r2, sl
 8005638:	eb63 050b 	sbc.w	r5, r3, fp
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	00eb      	lsls	r3, r5, #3
 8005646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800564a:	00e2      	lsls	r2, r4, #3
 800564c:	4614      	mov	r4, r2
 800564e:	461d      	mov	r5, r3
 8005650:	4643      	mov	r3, r8
 8005652:	18e3      	adds	r3, r4, r3
 8005654:	603b      	str	r3, [r7, #0]
 8005656:	464b      	mov	r3, r9
 8005658:	eb45 0303 	adc.w	r3, r5, r3
 800565c:	607b      	str	r3, [r7, #4]
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	e9d7 4500 	ldrd	r4, r5, [r7]
 800566a:	4629      	mov	r1, r5
 800566c:	028b      	lsls	r3, r1, #10
 800566e:	4621      	mov	r1, r4
 8005670:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005674:	4621      	mov	r1, r4
 8005676:	028a      	lsls	r2, r1, #10
 8005678:	4610      	mov	r0, r2
 800567a:	4619      	mov	r1, r3
 800567c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005680:	2200      	movs	r2, #0
 8005682:	61bb      	str	r3, [r7, #24]
 8005684:	61fa      	str	r2, [r7, #28]
 8005686:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800568a:	f7fb fb1d 	bl	8000cc8 <__aeabi_uldivmod>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	4613      	mov	r3, r2
 8005694:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005698:	4b0d      	ldr	r3, [pc, #52]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x348>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	0f1b      	lsrs	r3, r3, #28
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80056a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80056aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80056b6:	e003      	b.n	80056c0 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80056ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80056be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3798      	adds	r7, #152	; 0x98
 80056c8:	46bd      	mov	sp, r7
 80056ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ce:	bf00      	nop
 80056d0:	40023800 	.word	0x40023800
 80056d4:	00f42400 	.word	0x00f42400
 80056d8:	017d7840 	.word	0x017d7840

080056dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d101      	bne.n	80056ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e28d      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 8083 	beq.w	8005802 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056fc:	4b94      	ldr	r3, [pc, #592]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 030c 	and.w	r3, r3, #12
 8005704:	2b04      	cmp	r3, #4
 8005706:	d019      	beq.n	800573c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005708:	4b91      	ldr	r3, [pc, #580]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005710:	2b08      	cmp	r3, #8
 8005712:	d106      	bne.n	8005722 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005714:	4b8e      	ldr	r3, [pc, #568]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800571c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005720:	d00c      	beq.n	800573c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005722:	4b8b      	ldr	r3, [pc, #556]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d112      	bne.n	8005754 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800572e:	4b88      	ldr	r3, [pc, #544]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005736:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800573a:	d10b      	bne.n	8005754 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800573c:	4b84      	ldr	r3, [pc, #528]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d05b      	beq.n	8005800 <HAL_RCC_OscConfig+0x124>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d157      	bne.n	8005800 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e25a      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d106      	bne.n	800576c <HAL_RCC_OscConfig+0x90>
 800575e:	4b7c      	ldr	r3, [pc, #496]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a7b      	ldr	r2, [pc, #492]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	e01d      	b.n	80057a8 <HAL_RCC_OscConfig+0xcc>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005774:	d10c      	bne.n	8005790 <HAL_RCC_OscConfig+0xb4>
 8005776:	4b76      	ldr	r3, [pc, #472]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a75      	ldr	r2, [pc, #468]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 800577c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005780:	6013      	str	r3, [r2, #0]
 8005782:	4b73      	ldr	r3, [pc, #460]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a72      	ldr	r2, [pc, #456]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e00b      	b.n	80057a8 <HAL_RCC_OscConfig+0xcc>
 8005790:	4b6f      	ldr	r3, [pc, #444]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a6e      	ldr	r2, [pc, #440]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	4b6c      	ldr	r3, [pc, #432]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a6b      	ldr	r2, [pc, #428]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 80057a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d013      	beq.n	80057d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b0:	f7fe f952 	bl	8003a58 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057b8:	f7fe f94e 	bl	8003a58 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b64      	cmp	r3, #100	; 0x64
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e21f      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ca:	4b61      	ldr	r3, [pc, #388]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0xdc>
 80057d6:	e014      	b.n	8005802 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fe f93e 	bl	8003a58 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80057e0:	f7fe f93a 	bl	8003a58 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b64      	cmp	r3, #100	; 0x64
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e20b      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f2:	4b57      	ldr	r3, [pc, #348]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x104>
 80057fe:	e000      	b.n	8005802 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d06f      	beq.n	80058ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800580e:	4b50      	ldr	r3, [pc, #320]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 030c 	and.w	r3, r3, #12
 8005816:	2b00      	cmp	r3, #0
 8005818:	d017      	beq.n	800584a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800581a:	4b4d      	ldr	r3, [pc, #308]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005822:	2b08      	cmp	r3, #8
 8005824:	d105      	bne.n	8005832 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005826:	4b4a      	ldr	r3, [pc, #296]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00b      	beq.n	800584a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005832:	4b47      	ldr	r3, [pc, #284]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800583a:	2b0c      	cmp	r3, #12
 800583c:	d11c      	bne.n	8005878 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800583e:	4b44      	ldr	r3, [pc, #272]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005846:	2b00      	cmp	r3, #0
 8005848:	d116      	bne.n	8005878 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584a:	4b41      	ldr	r3, [pc, #260]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0302 	and.w	r3, r3, #2
 8005852:	2b00      	cmp	r3, #0
 8005854:	d005      	beq.n	8005862 <HAL_RCC_OscConfig+0x186>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d001      	beq.n	8005862 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e1d3      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005862:	4b3b      	ldr	r3, [pc, #236]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	4937      	ldr	r1, [pc, #220]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005872:	4313      	orrs	r3, r2
 8005874:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005876:	e03a      	b.n	80058ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d020      	beq.n	80058c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005880:	4b34      	ldr	r3, [pc, #208]	; (8005954 <HAL_RCC_OscConfig+0x278>)
 8005882:	2201      	movs	r2, #1
 8005884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005886:	f7fe f8e7 	bl	8003a58 <HAL_GetTick>
 800588a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800588c:	e008      	b.n	80058a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800588e:	f7fe f8e3 	bl	8003a58 <HAL_GetTick>
 8005892:	4602      	mov	r2, r0
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	1ad3      	subs	r3, r2, r3
 8005898:	2b02      	cmp	r3, #2
 800589a:	d901      	bls.n	80058a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e1b4      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058a0:	4b2b      	ldr	r3, [pc, #172]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d0f0      	beq.n	800588e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ac:	4b28      	ldr	r3, [pc, #160]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	00db      	lsls	r3, r3, #3
 80058ba:	4925      	ldr	r1, [pc, #148]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	600b      	str	r3, [r1, #0]
 80058c0:	e015      	b.n	80058ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058c2:	4b24      	ldr	r3, [pc, #144]	; (8005954 <HAL_RCC_OscConfig+0x278>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fe f8c6 	bl	8003a58 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058d0:	f7fe f8c2 	bl	8003a58 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e193      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058e2:	4b1b      	ldr	r3, [pc, #108]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0308 	and.w	r3, r3, #8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d036      	beq.n	8005968 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d016      	beq.n	8005930 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005902:	4b15      	ldr	r3, [pc, #84]	; (8005958 <HAL_RCC_OscConfig+0x27c>)
 8005904:	2201      	movs	r2, #1
 8005906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fe f8a6 	bl	8003a58 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005910:	f7fe f8a2 	bl	8003a58 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e173      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005922:	4b0b      	ldr	r3, [pc, #44]	; (8005950 <HAL_RCC_OscConfig+0x274>)
 8005924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0f0      	beq.n	8005910 <HAL_RCC_OscConfig+0x234>
 800592e:	e01b      	b.n	8005968 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005930:	4b09      	ldr	r3, [pc, #36]	; (8005958 <HAL_RCC_OscConfig+0x27c>)
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005936:	f7fe f88f 	bl	8003a58 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800593c:	e00e      	b.n	800595c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800593e:	f7fe f88b 	bl	8003a58 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	2b02      	cmp	r3, #2
 800594a:	d907      	bls.n	800595c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e15c      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
 8005950:	40023800 	.word	0x40023800
 8005954:	42470000 	.word	0x42470000
 8005958:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800595c:	4b8a      	ldr	r3, [pc, #552]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 800595e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ea      	bne.n	800593e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8097 	beq.w	8005aa4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005976:	2300      	movs	r3, #0
 8005978:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800597a:	4b83      	ldr	r3, [pc, #524]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 800597c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10f      	bne.n	80059a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
 800598a:	4b7f      	ldr	r3, [pc, #508]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	4a7e      	ldr	r2, [pc, #504]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005994:	6413      	str	r3, [r2, #64]	; 0x40
 8005996:	4b7c      	ldr	r3, [pc, #496]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599e:	60bb      	str	r3, [r7, #8]
 80059a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a6:	4b79      	ldr	r3, [pc, #484]	; (8005b8c <HAL_RCC_OscConfig+0x4b0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d118      	bne.n	80059e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059b2:	4b76      	ldr	r3, [pc, #472]	; (8005b8c <HAL_RCC_OscConfig+0x4b0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a75      	ldr	r2, [pc, #468]	; (8005b8c <HAL_RCC_OscConfig+0x4b0>)
 80059b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059be:	f7fe f84b 	bl	8003a58 <HAL_GetTick>
 80059c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c6:	f7fe f847 	bl	8003a58 <HAL_GetTick>
 80059ca:	4602      	mov	r2, r0
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e118      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d8:	4b6c      	ldr	r3, [pc, #432]	; (8005b8c <HAL_RCC_OscConfig+0x4b0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f0      	beq.n	80059c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d106      	bne.n	80059fa <HAL_RCC_OscConfig+0x31e>
 80059ec:	4b66      	ldr	r3, [pc, #408]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	4a65      	ldr	r2, [pc, #404]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	6713      	str	r3, [r2, #112]	; 0x70
 80059f8:	e01c      	b.n	8005a34 <HAL_RCC_OscConfig+0x358>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b05      	cmp	r3, #5
 8005a00:	d10c      	bne.n	8005a1c <HAL_RCC_OscConfig+0x340>
 8005a02:	4b61      	ldr	r3, [pc, #388]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a06:	4a60      	ldr	r2, [pc, #384]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a08:	f043 0304 	orr.w	r3, r3, #4
 8005a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a0e:	4b5e      	ldr	r3, [pc, #376]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	4a5d      	ldr	r2, [pc, #372]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a14:	f043 0301 	orr.w	r3, r3, #1
 8005a18:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1a:	e00b      	b.n	8005a34 <HAL_RCC_OscConfig+0x358>
 8005a1c:	4b5a      	ldr	r3, [pc, #360]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a20:	4a59      	ldr	r2, [pc, #356]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a22:	f023 0301 	bic.w	r3, r3, #1
 8005a26:	6713      	str	r3, [r2, #112]	; 0x70
 8005a28:	4b57      	ldr	r3, [pc, #348]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a2c:	4a56      	ldr	r2, [pc, #344]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a2e:	f023 0304 	bic.w	r3, r3, #4
 8005a32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d015      	beq.n	8005a68 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a3c:	f7fe f80c 	bl	8003a58 <HAL_GetTick>
 8005a40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a42:	e00a      	b.n	8005a5a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a44:	f7fe f808 	bl	8003a58 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e0d7      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a5a:	4b4b      	ldr	r3, [pc, #300]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0ee      	beq.n	8005a44 <HAL_RCC_OscConfig+0x368>
 8005a66:	e014      	b.n	8005a92 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a68:	f7fd fff6 	bl	8003a58 <HAL_GetTick>
 8005a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a6e:	e00a      	b.n	8005a86 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a70:	f7fd fff2 	bl	8003a58 <HAL_GetTick>
 8005a74:	4602      	mov	r2, r0
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1ad3      	subs	r3, r2, r3
 8005a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e0c1      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a86:	4b40      	ldr	r3, [pc, #256]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1ee      	bne.n	8005a70 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a92:	7dfb      	ldrb	r3, [r7, #23]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d105      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a98:	4b3b      	ldr	r3, [pc, #236]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	4a3a      	ldr	r2, [pc, #232]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80ad 	beq.w	8005c08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 030c 	and.w	r3, r3, #12
 8005ab6:	2b08      	cmp	r3, #8
 8005ab8:	d060      	beq.n	8005b7c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d145      	bne.n	8005b4e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac2:	4b33      	ldr	r3, [pc, #204]	; (8005b90 <HAL_RCC_OscConfig+0x4b4>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac8:	f7fd ffc6 	bl	8003a58 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fd ffc2 	bl	8003a58 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e093      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ae2:	4b29      	ldr	r3, [pc, #164]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1f0      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	69da      	ldr	r2, [r3, #28]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	019b      	lsls	r3, r3, #6
 8005afe:	431a      	orrs	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b04:	085b      	lsrs	r3, r3, #1
 8005b06:	3b01      	subs	r3, #1
 8005b08:	041b      	lsls	r3, r3, #16
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	061b      	lsls	r3, r3, #24
 8005b12:	431a      	orrs	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b18:	071b      	lsls	r3, r3, #28
 8005b1a:	491b      	ldr	r1, [pc, #108]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b20:	4b1b      	ldr	r3, [pc, #108]	; (8005b90 <HAL_RCC_OscConfig+0x4b4>)
 8005b22:	2201      	movs	r2, #1
 8005b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b26:	f7fd ff97 	bl	8003a58 <HAL_GetTick>
 8005b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b2c:	e008      	b.n	8005b40 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b2e:	f7fd ff93 	bl	8003a58 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d901      	bls.n	8005b40 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e064      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b40:	4b11      	ldr	r3, [pc, #68]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d0f0      	beq.n	8005b2e <HAL_RCC_OscConfig+0x452>
 8005b4c:	e05c      	b.n	8005c08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b4e:	4b10      	ldr	r3, [pc, #64]	; (8005b90 <HAL_RCC_OscConfig+0x4b4>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7fd ff80 	bl	8003a58 <HAL_GetTick>
 8005b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b5c:	f7fd ff7c 	bl	8003a58 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e04d      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <HAL_RCC_OscConfig+0x4ac>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f0      	bne.n	8005b5c <HAL_RCC_OscConfig+0x480>
 8005b7a:	e045      	b.n	8005c08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d107      	bne.n	8005b94 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e040      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
 8005b88:	40023800 	.word	0x40023800
 8005b8c:	40007000 	.word	0x40007000
 8005b90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b94:	4b1f      	ldr	r3, [pc, #124]	; (8005c14 <HAL_RCC_OscConfig+0x538>)
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d030      	beq.n	8005c04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d129      	bne.n	8005c04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d122      	bne.n	8005c04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d119      	bne.n	8005c04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bda:	085b      	lsrs	r3, r3, #1
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d10f      	bne.n	8005c04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d107      	bne.n	8005c04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d001      	beq.n	8005c08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e000      	b.n	8005c0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	40023800 	.word	0x40023800

08005c18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e041      	b.n	8005cae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fd fc86 	bl	8003550 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3304      	adds	r3, #4
 8005c54:	4619      	mov	r1, r3
 8005c56:	4610      	mov	r0, r2
 8005c58:	f000 fd8c 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d001      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e04e      	b.n	8005d6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a23      	ldr	r2, [pc, #140]	; (8005d7c <HAL_TIM_Base_Start_IT+0xc4>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d022      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d01d      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1f      	ldr	r2, [pc, #124]	; (8005d80 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d018      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d013      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a1c      	ldr	r2, [pc, #112]	; (8005d88 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d00e      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a1b      	ldr	r2, [pc, #108]	; (8005d8c <HAL_TIM_Base_Start_IT+0xd4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d009      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a19      	ldr	r2, [pc, #100]	; (8005d90 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a18      	ldr	r2, [pc, #96]	; (8005d94 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d111      	bne.n	8005d5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b06      	cmp	r3, #6
 8005d48:	d010      	beq.n	8005d6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f042 0201 	orr.w	r2, r2, #1
 8005d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d5a:	e007      	b.n	8005d6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0201 	orr.w	r2, r2, #1
 8005d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40010000 	.word	0x40010000
 8005d80:	40000400 	.word	0x40000400
 8005d84:	40000800 	.word	0x40000800
 8005d88:	40000c00 	.word	0x40000c00
 8005d8c:	40010400 	.word	0x40010400
 8005d90:	40014000 	.word	0x40014000
 8005d94:	40001800 	.word	0x40001800

08005d98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e041      	b.n	8005e2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fd fba6 	bl	8003510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f000 fccc 	bl	8006774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d109      	bne.n	8005e5c <HAL_TIM_PWM_Start+0x24>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	bf14      	ite	ne
 8005e54:	2301      	movne	r3, #1
 8005e56:	2300      	moveq	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	e022      	b.n	8005ea2 <HAL_TIM_PWM_Start+0x6a>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d109      	bne.n	8005e76 <HAL_TIM_PWM_Start+0x3e>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	bf14      	ite	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	2300      	moveq	r3, #0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	e015      	b.n	8005ea2 <HAL_TIM_PWM_Start+0x6a>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d109      	bne.n	8005e90 <HAL_TIM_PWM_Start+0x58>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	e008      	b.n	8005ea2 <HAL_TIM_PWM_Start+0x6a>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	bf14      	ite	ne
 8005e9c:	2301      	movne	r3, #1
 8005e9e:	2300      	moveq	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e07c      	b.n	8005fa4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Start+0x82>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb8:	e013      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xaa>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0x92>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ec8:	e00b      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xaa>
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b08      	cmp	r3, #8
 8005ece:	d104      	bne.n	8005eda <HAL_TIM_PWM_Start+0xa2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ed8:	e003      	b.n	8005ee2 <HAL_TIM_PWM_Start+0xaa>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2202      	movs	r2, #2
 8005ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 ff38 	bl	8006d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2d      	ldr	r2, [pc, #180]	; (8005fac <HAL_TIM_PWM_Start+0x174>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIM_PWM_Start+0xcc>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2c      	ldr	r2, [pc, #176]	; (8005fb0 <HAL_TIM_PWM_Start+0x178>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d101      	bne.n	8005f08 <HAL_TIM_PWM_Start+0xd0>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <HAL_TIM_PWM_Start+0xd2>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a22      	ldr	r2, [pc, #136]	; (8005fac <HAL_TIM_PWM_Start+0x174>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d022      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x136>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f30:	d01d      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x136>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1f      	ldr	r2, [pc, #124]	; (8005fb4 <HAL_TIM_PWM_Start+0x17c>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d018      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x136>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a1d      	ldr	r2, [pc, #116]	; (8005fb8 <HAL_TIM_PWM_Start+0x180>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x136>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a1c      	ldr	r2, [pc, #112]	; (8005fbc <HAL_TIM_PWM_Start+0x184>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x136>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a16      	ldr	r2, [pc, #88]	; (8005fb0 <HAL_TIM_PWM_Start+0x178>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x136>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a18      	ldr	r2, [pc, #96]	; (8005fc0 <HAL_TIM_PWM_Start+0x188>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x136>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a16      	ldr	r2, [pc, #88]	; (8005fc4 <HAL_TIM_PWM_Start+0x18c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d111      	bne.n	8005f92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2b06      	cmp	r3, #6
 8005f7e:	d010      	beq.n	8005fa2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f042 0201 	orr.w	r2, r2, #1
 8005f8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f90:	e007      	b.n	8005fa2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0201 	orr.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3710      	adds	r7, #16
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400
 8005fb4:	40000400 	.word	0x40000400
 8005fb8:	40000800 	.word	0x40000800
 8005fbc:	40000c00 	.word	0x40000c00
 8005fc0:	40014000 	.word	0x40014000
 8005fc4:	40001800 	.word	0x40001800

08005fc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e097      	b.n	800610c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d106      	bne.n	8005ff6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7fd f9a7 	bl	8003344 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2202      	movs	r2, #2
 8005ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800600c:	f023 0307 	bic.w	r3, r3, #7
 8006010:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3304      	adds	r3, #4
 800601a:	4619      	mov	r1, r3
 800601c:	4610      	mov	r0, r2
 800601e:	f000 fba9 	bl	8006774 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604a:	f023 0303 	bic.w	r3, r3, #3
 800604e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	689a      	ldr	r2, [r3, #8]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	021b      	lsls	r3, r3, #8
 800605a:	4313      	orrs	r3, r2
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	4313      	orrs	r3, r2
 8006060:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006068:	f023 030c 	bic.w	r3, r3, #12
 800606c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	021b      	lsls	r3, r3, #8
 8006084:	4313      	orrs	r3, r2
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	011a      	lsls	r2, r3, #4
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	031b      	lsls	r3, r3, #12
 8006098:	4313      	orrs	r3, r2
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4313      	orrs	r3, r2
 800609e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80060a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	4313      	orrs	r3, r2
 80060bc:	68fa      	ldr	r2, [r7, #12]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3718      	adds	r7, #24
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006124:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800612c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006134:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800613c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d110      	bne.n	8006166 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d102      	bne.n	8006150 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800614a:	7b7b      	ldrb	r3, [r7, #13]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d001      	beq.n	8006154 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e069      	b.n	8006228 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2202      	movs	r2, #2
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006164:	e031      	b.n	80061ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b04      	cmp	r3, #4
 800616a:	d110      	bne.n	800618e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800616c:	7bbb      	ldrb	r3, [r7, #14]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d102      	bne.n	8006178 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006172:	7b3b      	ldrb	r3, [r7, #12]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d001      	beq.n	800617c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e055      	b.n	8006228 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800618c:	e01d      	b.n	80061ca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d108      	bne.n	80061a6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d105      	bne.n	80061a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800619a:	7b7b      	ldrb	r3, [r7, #13]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d102      	bne.n	80061a6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061a0:	7b3b      	ldrb	r3, [r7, #12]
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d001      	beq.n	80061aa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e03e      	b.n	8006228 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2202      	movs	r2, #2
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2202      	movs	r2, #2
 80061be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2202      	movs	r2, #2
 80061c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <HAL_TIM_Encoder_Start+0xc4>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d008      	beq.n	80061e8 <HAL_TIM_Encoder_Start+0xd4>
 80061d6:	e00f      	b.n	80061f8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2201      	movs	r2, #1
 80061de:	2100      	movs	r1, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fdbd 	bl	8006d60 <TIM_CCxChannelCmd>
      break;
 80061e6:	e016      	b.n	8006216 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2201      	movs	r2, #1
 80061ee:	2104      	movs	r1, #4
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fdb5 	bl	8006d60 <TIM_CCxChannelCmd>
      break;
 80061f6:	e00e      	b.n	8006216 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2201      	movs	r2, #1
 80061fe:	2100      	movs	r1, #0
 8006200:	4618      	mov	r0, r3
 8006202:	f000 fdad 	bl	8006d60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2201      	movs	r2, #1
 800620c:	2104      	movs	r1, #4
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fda6 	bl	8006d60 <TIM_CCxChannelCmd>
      break;
 8006214:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f042 0201 	orr.w	r2, r2, #1
 8006224:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f003 0302 	and.w	r3, r3, #2
 800624e:	2b00      	cmp	r3, #0
 8006250:	d020      	beq.n	8006294 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01b      	beq.n	8006294 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f06f 0202 	mvn.w	r2, #2
 8006264:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa5b 	bl	8006736 <HAL_TIM_IC_CaptureCallback>
 8006280:	e005      	b.n	800628e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fa4d 	bl	8006722 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fa5e 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	d020      	beq.n	80062e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f003 0304 	and.w	r3, r3, #4
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01b      	beq.n	80062e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0204 	mvn.w	r2, #4
 80062b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fa35 	bl	8006736 <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fa27 	bl	8006722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fa38 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 0308 	and.w	r3, r3, #8
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d020      	beq.n	800632c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f003 0308 	and.w	r3, r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d01b      	beq.n	800632c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f06f 0208 	mvn.w	r2, #8
 80062fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2204      	movs	r2, #4
 8006302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	69db      	ldr	r3, [r3, #28]
 800630a:	f003 0303 	and.w	r3, r3, #3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 fa0f 	bl	8006736 <HAL_TIM_IC_CaptureCallback>
 8006318:	e005      	b.n	8006326 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa01 	bl	8006722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 fa12 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f003 0310 	and.w	r3, r3, #16
 8006332:	2b00      	cmp	r3, #0
 8006334:	d020      	beq.n	8006378 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f003 0310 	and.w	r3, r3, #16
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01b      	beq.n	8006378 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0210 	mvn.w	r2, #16
 8006348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2208      	movs	r2, #8
 800634e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f9e9 	bl	8006736 <HAL_TIM_IC_CaptureCallback>
 8006364:	e005      	b.n	8006372 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9db 	bl	8006722 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f9ec 	bl	800674a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d00c      	beq.n	800639c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f003 0301 	and.w	r3, r3, #1
 8006388:	2b00      	cmp	r3, #0
 800638a:	d007      	beq.n	800639c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0201 	mvn.w	r2, #1
 8006394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f7fb fbe6 	bl	8001b68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00c      	beq.n	80063c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d007      	beq.n	80063c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fd7c 	bl	8006eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00c      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 f9bd 	bl	800675e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00c      	beq.n	8006408 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f003 0320 	and.w	r3, r3, #32
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d007      	beq.n	8006408 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f06f 0220 	mvn.w	r2, #32
 8006400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fd4e 	bl	8006ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006408:	bf00      	nop
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b086      	sub	sp, #24
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800642a:	2302      	movs	r3, #2
 800642c:	e0ae      	b.n	800658c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b0c      	cmp	r3, #12
 800643a:	f200 809f 	bhi.w	800657c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006479 	.word	0x08006479
 8006448:	0800657d 	.word	0x0800657d
 800644c:	0800657d 	.word	0x0800657d
 8006450:	0800657d 	.word	0x0800657d
 8006454:	080064b9 	.word	0x080064b9
 8006458:	0800657d 	.word	0x0800657d
 800645c:	0800657d 	.word	0x0800657d
 8006460:	0800657d 	.word	0x0800657d
 8006464:	080064fb 	.word	0x080064fb
 8006468:	0800657d 	.word	0x0800657d
 800646c:	0800657d 	.word	0x0800657d
 8006470:	0800657d 	.word	0x0800657d
 8006474:	0800653b 	.word	0x0800653b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fa24 	bl	80068cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0208 	orr.w	r2, r2, #8
 8006492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0204 	bic.w	r2, r2, #4
 80064a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6999      	ldr	r1, [r3, #24]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	619a      	str	r2, [r3, #24]
      break;
 80064b6:	e064      	b.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fa74 	bl	80069ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6999      	ldr	r1, [r3, #24]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	021a      	lsls	r2, r3, #8
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	619a      	str	r2, [r3, #24]
      break;
 80064f8:	e043      	b.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fac9 	bl	8006a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0208 	orr.w	r2, r2, #8
 8006514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0204 	bic.w	r2, r2, #4
 8006524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69d9      	ldr	r1, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	61da      	str	r2, [r3, #28]
      break;
 8006538:	e023      	b.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fb1d 	bl	8006b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69d9      	ldr	r1, [r3, #28]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	021a      	lsls	r2, r3, #8
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	61da      	str	r2, [r3, #28]
      break;
 800657a:	e002      	b.n	8006582 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	75fb      	strb	r3, [r7, #23]
      break;
 8006580:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800658a:	7dfb      	ldrb	r3, [r7, #23]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3718      	adds	r7, #24
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_TIM_ConfigClockSource+0x1c>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e0b4      	b.n	800671a <HAL_TIM_ConfigClockSource+0x186>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2202      	movs	r2, #2
 80065bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065e8:	d03e      	beq.n	8006668 <HAL_TIM_ConfigClockSource+0xd4>
 80065ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ee:	f200 8087 	bhi.w	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065f6:	f000 8086 	beq.w	8006706 <HAL_TIM_ConfigClockSource+0x172>
 80065fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065fe:	d87f      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006600:	2b70      	cmp	r3, #112	; 0x70
 8006602:	d01a      	beq.n	800663a <HAL_TIM_ConfigClockSource+0xa6>
 8006604:	2b70      	cmp	r3, #112	; 0x70
 8006606:	d87b      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006608:	2b60      	cmp	r3, #96	; 0x60
 800660a:	d050      	beq.n	80066ae <HAL_TIM_ConfigClockSource+0x11a>
 800660c:	2b60      	cmp	r3, #96	; 0x60
 800660e:	d877      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006610:	2b50      	cmp	r3, #80	; 0x50
 8006612:	d03c      	beq.n	800668e <HAL_TIM_ConfigClockSource+0xfa>
 8006614:	2b50      	cmp	r3, #80	; 0x50
 8006616:	d873      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006618:	2b40      	cmp	r3, #64	; 0x40
 800661a:	d058      	beq.n	80066ce <HAL_TIM_ConfigClockSource+0x13a>
 800661c:	2b40      	cmp	r3, #64	; 0x40
 800661e:	d86f      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006620:	2b30      	cmp	r3, #48	; 0x30
 8006622:	d064      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x15a>
 8006624:	2b30      	cmp	r3, #48	; 0x30
 8006626:	d86b      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006628:	2b20      	cmp	r3, #32
 800662a:	d060      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x15a>
 800662c:	2b20      	cmp	r3, #32
 800662e:	d867      	bhi.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d05c      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x15a>
 8006634:	2b10      	cmp	r3, #16
 8006636:	d05a      	beq.n	80066ee <HAL_TIM_ConfigClockSource+0x15a>
 8006638:	e062      	b.n	8006700 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800664a:	f000 fb69 	bl	8006d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800665c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	609a      	str	r2, [r3, #8]
      break;
 8006666:	e04f      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006678:	f000 fb52 	bl	8006d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689a      	ldr	r2, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800668a:	609a      	str	r2, [r3, #8]
      break;
 800668c:	e03c      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800669a:	461a      	mov	r2, r3
 800669c:	f000 fac6 	bl	8006c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2150      	movs	r1, #80	; 0x50
 80066a6:	4618      	mov	r0, r3
 80066a8:	f000 fb1f 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 80066ac:	e02c      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80066ba:	461a      	mov	r2, r3
 80066bc:	f000 fae5 	bl	8006c8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	2160      	movs	r1, #96	; 0x60
 80066c6:	4618      	mov	r0, r3
 80066c8:	f000 fb0f 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 80066cc:	e01c      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066da:	461a      	mov	r2, r3
 80066dc:	f000 faa6 	bl	8006c2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2140      	movs	r1, #64	; 0x40
 80066e6:	4618      	mov	r0, r3
 80066e8:	f000 faff 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 80066ec:	e00c      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4619      	mov	r1, r3
 80066f8:	4610      	mov	r0, r2
 80066fa:	f000 faf6 	bl	8006cea <TIM_ITRx_SetConfig>
      break;
 80066fe:	e003      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	73fb      	strb	r3, [r7, #15]
      break;
 8006704:	e000      	b.n	8006708 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006706:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006718:	7bfb      	ldrb	r3, [r7, #15]
}
 800671a:	4618      	mov	r0, r3
 800671c:	3710      	adds	r7, #16
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
	...

08006774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
 800677c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a46      	ldr	r2, [pc, #280]	; (80068a0 <TIM_Base_SetConfig+0x12c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d00f      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a43      	ldr	r2, [pc, #268]	; (80068a4 <TIM_Base_SetConfig+0x130>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d00b      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a42      	ldr	r2, [pc, #264]	; (80068a8 <TIM_Base_SetConfig+0x134>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d007      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a41      	ldr	r2, [pc, #260]	; (80068ac <TIM_Base_SetConfig+0x138>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_Base_SetConfig+0x40>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a40      	ldr	r2, [pc, #256]	; (80068b0 <TIM_Base_SetConfig+0x13c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d108      	bne.n	80067c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	68fa      	ldr	r2, [r7, #12]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	4a35      	ldr	r2, [pc, #212]	; (80068a0 <TIM_Base_SetConfig+0x12c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d02b      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d4:	d027      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a32      	ldr	r2, [pc, #200]	; (80068a4 <TIM_Base_SetConfig+0x130>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d023      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	4a31      	ldr	r2, [pc, #196]	; (80068a8 <TIM_Base_SetConfig+0x134>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d01f      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a30      	ldr	r2, [pc, #192]	; (80068ac <TIM_Base_SetConfig+0x138>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d01b      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2f      	ldr	r2, [pc, #188]	; (80068b0 <TIM_Base_SetConfig+0x13c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d017      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a2e      	ldr	r2, [pc, #184]	; (80068b4 <TIM_Base_SetConfig+0x140>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d013      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2d      	ldr	r2, [pc, #180]	; (80068b8 <TIM_Base_SetConfig+0x144>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00f      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a2c      	ldr	r2, [pc, #176]	; (80068bc <TIM_Base_SetConfig+0x148>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d00b      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2b      	ldr	r2, [pc, #172]	; (80068c0 <TIM_Base_SetConfig+0x14c>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d007      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a2a      	ldr	r2, [pc, #168]	; (80068c4 <TIM_Base_SetConfig+0x150>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d003      	beq.n	8006826 <TIM_Base_SetConfig+0xb2>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a29      	ldr	r2, [pc, #164]	; (80068c8 <TIM_Base_SetConfig+0x154>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d108      	bne.n	8006838 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a10      	ldr	r2, [pc, #64]	; (80068a0 <TIM_Base_SetConfig+0x12c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d003      	beq.n	800686c <TIM_Base_SetConfig+0xf8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a12      	ldr	r2, [pc, #72]	; (80068b0 <TIM_Base_SetConfig+0x13c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d103      	bne.n	8006874 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691a      	ldr	r2, [r3, #16]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b01      	cmp	r3, #1
 8006884:	d105      	bne.n	8006892 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f023 0201 	bic.w	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	611a      	str	r2, [r3, #16]
  }
}
 8006892:	bf00      	nop
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40000400 	.word	0x40000400
 80068a8:	40000800 	.word	0x40000800
 80068ac:	40000c00 	.word	0x40000c00
 80068b0:	40010400 	.word	0x40010400
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40014400 	.word	0x40014400
 80068bc:	40014800 	.word	0x40014800
 80068c0:	40001800 	.word	0x40001800
 80068c4:	40001c00 	.word	0x40001c00
 80068c8:	40002000 	.word	0x40002000

080068cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	f023 0201 	bic.w	r2, r3, #1
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0303 	bic.w	r3, r3, #3
 8006902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 0302 	bic.w	r3, r3, #2
 8006914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <TIM_OC1_SetConfig+0xd8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d003      	beq.n	8006930 <TIM_OC1_SetConfig+0x64>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <TIM_OC1_SetConfig+0xdc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d10c      	bne.n	800694a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0308 	bic.w	r3, r3, #8
 8006936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f023 0304 	bic.w	r3, r3, #4
 8006948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a15      	ldr	r2, [pc, #84]	; (80069a4 <TIM_OC1_SetConfig+0xd8>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC1_SetConfig+0x8e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a14      	ldr	r2, [pc, #80]	; (80069a8 <TIM_OC1_SetConfig+0xdc>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d111      	bne.n	800697e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	693a      	ldr	r2, [r7, #16]
 8006970:	4313      	orrs	r3, r2
 8006972:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	699b      	ldr	r3, [r3, #24]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	621a      	str	r2, [r3, #32]
}
 8006998:	bf00      	nop
 800699a:	371c      	adds	r7, #28
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40010000 	.word	0x40010000
 80069a8:	40010400 	.word	0x40010400

080069ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b087      	sub	sp, #28
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	f023 0210 	bic.w	r2, r3, #16
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	021b      	lsls	r3, r3, #8
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f023 0320 	bic.w	r3, r3, #32
 80069f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a22      	ldr	r2, [pc, #136]	; (8006a90 <TIM_OC2_SetConfig+0xe4>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d003      	beq.n	8006a14 <TIM_OC2_SetConfig+0x68>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a21      	ldr	r2, [pc, #132]	; (8006a94 <TIM_OC2_SetConfig+0xe8>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d10d      	bne.n	8006a30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	697a      	ldr	r2, [r7, #20]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a17      	ldr	r2, [pc, #92]	; (8006a90 <TIM_OC2_SetConfig+0xe4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_OC2_SetConfig+0x94>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a16      	ldr	r2, [pc, #88]	; (8006a94 <TIM_OC2_SetConfig+0xe8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d113      	bne.n	8006a68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	695b      	ldr	r3, [r3, #20]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	68fa      	ldr	r2, [r7, #12]
 8006a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	621a      	str	r2, [r3, #32]
}
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40010400 	.word	0x40010400

08006a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b087      	sub	sp, #28
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a1b      	ldr	r3, [r3, #32]
 8006aac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0303 	bic.w	r3, r3, #3
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a21      	ldr	r2, [pc, #132]	; (8006b78 <TIM_OC3_SetConfig+0xe0>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_OC3_SetConfig+0x66>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a20      	ldr	r2, [pc, #128]	; (8006b7c <TIM_OC3_SetConfig+0xe4>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d10d      	bne.n	8006b1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	021b      	lsls	r3, r3, #8
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a16      	ldr	r2, [pc, #88]	; (8006b78 <TIM_OC3_SetConfig+0xe0>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d003      	beq.n	8006b2a <TIM_OC3_SetConfig+0x92>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a15      	ldr	r2, [pc, #84]	; (8006b7c <TIM_OC3_SetConfig+0xe4>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d113      	bne.n	8006b52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	621a      	str	r2, [r3, #32]
}
 8006b6c:	bf00      	nop
 8006b6e:	371c      	adds	r7, #28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	40010000 	.word	0x40010000
 8006b7c:	40010400 	.word	0x40010400

08006b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	031b      	lsls	r3, r3, #12
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a12      	ldr	r2, [pc, #72]	; (8006c24 <TIM_OC4_SetConfig+0xa4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_OC4_SetConfig+0x68>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a11      	ldr	r2, [pc, #68]	; (8006c28 <TIM_OC4_SetConfig+0xa8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d109      	bne.n	8006bfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	019b      	lsls	r3, r3, #6
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	693a      	ldr	r2, [r7, #16]
 8006c14:	621a      	str	r2, [r3, #32]
}
 8006c16:	bf00      	nop
 8006c18:	371c      	adds	r7, #28
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40010400 	.word	0x40010400

08006c2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b087      	sub	sp, #28
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a1b      	ldr	r3, [r3, #32]
 8006c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f023 0201 	bic.w	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f023 030a 	bic.w	r3, r3, #10
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c6a:	697a      	ldr	r2, [r7, #20]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b087      	sub	sp, #28
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	60f8      	str	r0, [r7, #12]
 8006c92:	60b9      	str	r1, [r7, #8]
 8006c94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6a1b      	ldr	r3, [r3, #32]
 8006c9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f023 0210 	bic.w	r2, r3, #16
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	031b      	lsls	r3, r3, #12
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cc6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	693a      	ldr	r2, [r7, #16]
 8006cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	621a      	str	r2, [r3, #32]
}
 8006cde:	bf00      	nop
 8006ce0:	371c      	adds	r7, #28
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr

08006cea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b085      	sub	sp, #20
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f043 0307 	orr.w	r3, r3, #7
 8006d0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	609a      	str	r2, [r3, #8]
}
 8006d14:	bf00      	nop
 8006d16:	3714      	adds	r7, #20
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	021a      	lsls	r2, r3, #8
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	609a      	str	r2, [r3, #8]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	2201      	movs	r2, #1
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	43db      	mvns	r3, r3
 8006d82:	401a      	ands	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6a1a      	ldr	r2, [r3, #32]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	fa01 f303 	lsl.w	r3, r1, r3
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	621a      	str	r2, [r3, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	371c      	adds	r7, #28
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr
	...

08006dac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e05a      	b.n	8006e7a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	68fa      	ldr	r2, [r7, #12]
 8006dfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a21      	ldr	r2, [pc, #132]	; (8006e88 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d022      	beq.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e10:	d01d      	beq.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1d      	ldr	r2, [pc, #116]	; (8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d018      	beq.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a1b      	ldr	r2, [pc, #108]	; (8006e90 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d013      	beq.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a1a      	ldr	r2, [pc, #104]	; (8006e94 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d00e      	beq.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a18      	ldr	r2, [pc, #96]	; (8006e98 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d009      	beq.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a17      	ldr	r2, [pc, #92]	; (8006e9c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d004      	beq.n	8006e4e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a15      	ldr	r2, [pc, #84]	; (8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d10c      	bne.n	8006e68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3714      	adds	r7, #20
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	40010000 	.word	0x40010000
 8006e8c:	40000400 	.word	0x40000400
 8006e90:	40000800 	.word	0x40000800
 8006e94:	40000c00 	.word	0x40000c00
 8006e98:	40010400 	.word	0x40010400
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40001800 	.word	0x40001800

08006ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006eac:	bf00      	nop
 8006eae:	370c      	adds	r7, #12
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e042      	b.n	8006f64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d106      	bne.n	8006ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fc fbac 	bl	8003650 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2224      	movs	r2, #36	; 0x24
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f973 	bl	80071fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	691a      	ldr	r2, [r3, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	695a      	ldr	r2, [r3, #20]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68da      	ldr	r2, [r3, #12]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3708      	adds	r7, #8
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	; 0x28
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	60b9      	str	r1, [r7, #8]
 8006f76:	603b      	str	r3, [r7, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	d175      	bne.n	8007078 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d002      	beq.n	8006f98 <HAL_UART_Transmit+0x2c>
 8006f92:	88fb      	ldrh	r3, [r7, #6]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e06e      	b.n	800707a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2221      	movs	r2, #33	; 0x21
 8006fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006faa:	f7fc fd55 	bl	8003a58 <HAL_GetTick>
 8006fae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	88fa      	ldrh	r2, [r7, #6]
 8006fb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	88fa      	ldrh	r2, [r7, #6]
 8006fba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc4:	d108      	bne.n	8006fd8 <HAL_UART_Transmit+0x6c>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d104      	bne.n	8006fd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	61bb      	str	r3, [r7, #24]
 8006fd6:	e003      	b.n	8006fe0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006fe0:	e02e      	b.n	8007040 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2180      	movs	r1, #128	; 0x80
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 f848 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d005      	beq.n	8007004 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007000:	2303      	movs	r3, #3
 8007002:	e03a      	b.n	800707a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3302      	adds	r3, #2
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	e007      	b.n	8007032 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	781a      	ldrb	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	3301      	adds	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007036:	b29b      	uxth	r3, r3
 8007038:	3b01      	subs	r3, #1
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1cb      	bne.n	8006fe2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2200      	movs	r2, #0
 8007052:	2140      	movs	r1, #64	; 0x40
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f814 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e006      	b.n	800707a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	e000      	b.n	800707a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b086      	sub	sp, #24
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	e03b      	b.n	800710c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007094:	6a3b      	ldr	r3, [r7, #32]
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	d037      	beq.n	800710c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800709c:	f7fc fcdc 	bl	8003a58 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	6a3a      	ldr	r2, [r7, #32]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80070ac:	6a3b      	ldr	r3, [r7, #32]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d101      	bne.n	80070b6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e03a      	b.n	800712c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d023      	beq.n	800710c <UART_WaitOnFlagUntilTimeout+0x8a>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b80      	cmp	r3, #128	; 0x80
 80070c8:	d020      	beq.n	800710c <UART_WaitOnFlagUntilTimeout+0x8a>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b40      	cmp	r3, #64	; 0x40
 80070ce:	d01d      	beq.n	800710c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0308 	and.w	r3, r3, #8
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d116      	bne.n	800710c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80070de:	2300      	movs	r3, #0
 80070e0:	617b      	str	r3, [r7, #20]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	617b      	str	r3, [r7, #20]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f81d 	bl	8007134 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2208      	movs	r2, #8
 80070fe:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e00f      	b.n	800712c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	4013      	ands	r3, r2
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	429a      	cmp	r2, r3
 800711a:	bf0c      	ite	eq
 800711c:	2301      	moveq	r3, #1
 800711e:	2300      	movne	r3, #0
 8007120:	b2db      	uxtb	r3, r3
 8007122:	461a      	mov	r2, r3
 8007124:	79fb      	ldrb	r3, [r7, #7]
 8007126:	429a      	cmp	r2, r3
 8007128:	d0b4      	beq.n	8007094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800712a:	2300      	movs	r3, #0
}
 800712c:	4618      	mov	r0, r3
 800712e:	3718      	adds	r7, #24
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007134:	b480      	push	{r7}
 8007136:	b095      	sub	sp, #84	; 0x54
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800714c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800715c:	643a      	str	r2, [r7, #64]	; 0x40
 800715e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007162:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e5      	bne.n	800713c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	3314      	adds	r3, #20
 8007176:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	f023 0301 	bic.w	r3, r3, #1
 8007186:	64bb      	str	r3, [r7, #72]	; 0x48
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3314      	adds	r3, #20
 800718e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007190:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007192:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007196:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e5      	bne.n	8007170 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d119      	bne.n	80071e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	e853 3f00 	ldrex	r3, [r3]
 80071ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f023 0310 	bic.w	r3, r3, #16
 80071c2:	647b      	str	r3, [r7, #68]	; 0x44
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071cc:	61ba      	str	r2, [r7, #24]
 80071ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d0:	6979      	ldr	r1, [r7, #20]
 80071d2:	69ba      	ldr	r2, [r7, #24]
 80071d4:	e841 2300 	strex	r3, r2, [r1]
 80071d8:	613b      	str	r3, [r7, #16]
   return(result);
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1e5      	bne.n	80071ac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071ee:	bf00      	nop
 80071f0:	3754      	adds	r7, #84	; 0x54
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
	...

080071fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007200:	b0c0      	sub	sp, #256	; 0x100
 8007202:	af00      	add	r7, sp, #0
 8007204:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	691b      	ldr	r3, [r3, #16]
 8007210:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007218:	68d9      	ldr	r1, [r3, #12]
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	ea40 0301 	orr.w	r3, r0, r1
 8007224:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	431a      	orrs	r2, r3
 8007234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	431a      	orrs	r2, r3
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	4313      	orrs	r3, r2
 8007244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007254:	f021 010c 	bic.w	r1, r1, #12
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007262:	430b      	orrs	r3, r1
 8007264:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007276:	6999      	ldr	r1, [r3, #24]
 8007278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	ea40 0301 	orr.w	r3, r0, r1
 8007282:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4b8f      	ldr	r3, [pc, #572]	; (80074c8 <UART_SetConfig+0x2cc>)
 800728c:	429a      	cmp	r2, r3
 800728e:	d005      	beq.n	800729c <UART_SetConfig+0xa0>
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	4b8d      	ldr	r3, [pc, #564]	; (80074cc <UART_SetConfig+0x2d0>)
 8007298:	429a      	cmp	r2, r3
 800729a:	d104      	bne.n	80072a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800729c:	f7fe f860 	bl	8005360 <HAL_RCC_GetPCLK2Freq>
 80072a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80072a4:	e003      	b.n	80072ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072a6:	f7fe f847 	bl	8005338 <HAL_RCC_GetPCLK1Freq>
 80072aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b8:	f040 810c 	bne.w	80074d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80072c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80072ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80072ce:	4622      	mov	r2, r4
 80072d0:	462b      	mov	r3, r5
 80072d2:	1891      	adds	r1, r2, r2
 80072d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80072d6:	415b      	adcs	r3, r3
 80072d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072de:	4621      	mov	r1, r4
 80072e0:	eb12 0801 	adds.w	r8, r2, r1
 80072e4:	4629      	mov	r1, r5
 80072e6:	eb43 0901 	adc.w	r9, r3, r1
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072fe:	4690      	mov	r8, r2
 8007300:	4699      	mov	r9, r3
 8007302:	4623      	mov	r3, r4
 8007304:	eb18 0303 	adds.w	r3, r8, r3
 8007308:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800730c:	462b      	mov	r3, r5
 800730e:	eb49 0303 	adc.w	r3, r9, r3
 8007312:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007322:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007326:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800732a:	460b      	mov	r3, r1
 800732c:	18db      	adds	r3, r3, r3
 800732e:	653b      	str	r3, [r7, #80]	; 0x50
 8007330:	4613      	mov	r3, r2
 8007332:	eb42 0303 	adc.w	r3, r2, r3
 8007336:	657b      	str	r3, [r7, #84]	; 0x54
 8007338:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800733c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007340:	f7f9 fcc2 	bl	8000cc8 <__aeabi_uldivmod>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4b61      	ldr	r3, [pc, #388]	; (80074d0 <UART_SetConfig+0x2d4>)
 800734a:	fba3 2302 	umull	r2, r3, r3, r2
 800734e:	095b      	lsrs	r3, r3, #5
 8007350:	011c      	lsls	r4, r3, #4
 8007352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007356:	2200      	movs	r2, #0
 8007358:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800735c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007360:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007364:	4642      	mov	r2, r8
 8007366:	464b      	mov	r3, r9
 8007368:	1891      	adds	r1, r2, r2
 800736a:	64b9      	str	r1, [r7, #72]	; 0x48
 800736c:	415b      	adcs	r3, r3
 800736e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007370:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007374:	4641      	mov	r1, r8
 8007376:	eb12 0a01 	adds.w	sl, r2, r1
 800737a:	4649      	mov	r1, r9
 800737c:	eb43 0b01 	adc.w	fp, r3, r1
 8007380:	f04f 0200 	mov.w	r2, #0
 8007384:	f04f 0300 	mov.w	r3, #0
 8007388:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800738c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007390:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007394:	4692      	mov	sl, r2
 8007396:	469b      	mov	fp, r3
 8007398:	4643      	mov	r3, r8
 800739a:	eb1a 0303 	adds.w	r3, sl, r3
 800739e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80073a2:	464b      	mov	r3, r9
 80073a4:	eb4b 0303 	adc.w	r3, fp, r3
 80073a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80073ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80073bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80073c0:	460b      	mov	r3, r1
 80073c2:	18db      	adds	r3, r3, r3
 80073c4:	643b      	str	r3, [r7, #64]	; 0x40
 80073c6:	4613      	mov	r3, r2
 80073c8:	eb42 0303 	adc.w	r3, r2, r3
 80073cc:	647b      	str	r3, [r7, #68]	; 0x44
 80073ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073d6:	f7f9 fc77 	bl	8000cc8 <__aeabi_uldivmod>
 80073da:	4602      	mov	r2, r0
 80073dc:	460b      	mov	r3, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	4b3b      	ldr	r3, [pc, #236]	; (80074d0 <UART_SetConfig+0x2d4>)
 80073e2:	fba3 2301 	umull	r2, r3, r3, r1
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	2264      	movs	r2, #100	; 0x64
 80073ea:	fb02 f303 	mul.w	r3, r2, r3
 80073ee:	1acb      	subs	r3, r1, r3
 80073f0:	00db      	lsls	r3, r3, #3
 80073f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073f6:	4b36      	ldr	r3, [pc, #216]	; (80074d0 <UART_SetConfig+0x2d4>)
 80073f8:	fba3 2302 	umull	r2, r3, r3, r2
 80073fc:	095b      	lsrs	r3, r3, #5
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007404:	441c      	add	r4, r3
 8007406:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800740a:	2200      	movs	r2, #0
 800740c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007410:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007414:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	1891      	adds	r1, r2, r2
 800741e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007420:	415b      	adcs	r3, r3
 8007422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007424:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007428:	4641      	mov	r1, r8
 800742a:	1851      	adds	r1, r2, r1
 800742c:	6339      	str	r1, [r7, #48]	; 0x30
 800742e:	4649      	mov	r1, r9
 8007430:	414b      	adcs	r3, r1
 8007432:	637b      	str	r3, [r7, #52]	; 0x34
 8007434:	f04f 0200 	mov.w	r2, #0
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007440:	4659      	mov	r1, fp
 8007442:	00cb      	lsls	r3, r1, #3
 8007444:	4651      	mov	r1, sl
 8007446:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800744a:	4651      	mov	r1, sl
 800744c:	00ca      	lsls	r2, r1, #3
 800744e:	4610      	mov	r0, r2
 8007450:	4619      	mov	r1, r3
 8007452:	4603      	mov	r3, r0
 8007454:	4642      	mov	r2, r8
 8007456:	189b      	adds	r3, r3, r2
 8007458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800745c:	464b      	mov	r3, r9
 800745e:	460a      	mov	r2, r1
 8007460:	eb42 0303 	adc.w	r3, r2, r3
 8007464:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007474:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007478:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800747c:	460b      	mov	r3, r1
 800747e:	18db      	adds	r3, r3, r3
 8007480:	62bb      	str	r3, [r7, #40]	; 0x28
 8007482:	4613      	mov	r3, r2
 8007484:	eb42 0303 	adc.w	r3, r2, r3
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800748e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007492:	f7f9 fc19 	bl	8000cc8 <__aeabi_uldivmod>
 8007496:	4602      	mov	r2, r0
 8007498:	460b      	mov	r3, r1
 800749a:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <UART_SetConfig+0x2d4>)
 800749c:	fba3 1302 	umull	r1, r3, r3, r2
 80074a0:	095b      	lsrs	r3, r3, #5
 80074a2:	2164      	movs	r1, #100	; 0x64
 80074a4:	fb01 f303 	mul.w	r3, r1, r3
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	3332      	adds	r3, #50	; 0x32
 80074ae:	4a08      	ldr	r2, [pc, #32]	; (80074d0 <UART_SetConfig+0x2d4>)
 80074b0:	fba2 2303 	umull	r2, r3, r2, r3
 80074b4:	095b      	lsrs	r3, r3, #5
 80074b6:	f003 0207 	and.w	r2, r3, #7
 80074ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4422      	add	r2, r4
 80074c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80074c4:	e106      	b.n	80076d4 <UART_SetConfig+0x4d8>
 80074c6:	bf00      	nop
 80074c8:	40011000 	.word	0x40011000
 80074cc:	40011400 	.word	0x40011400
 80074d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074d8:	2200      	movs	r2, #0
 80074da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074e6:	4642      	mov	r2, r8
 80074e8:	464b      	mov	r3, r9
 80074ea:	1891      	adds	r1, r2, r2
 80074ec:	6239      	str	r1, [r7, #32]
 80074ee:	415b      	adcs	r3, r3
 80074f0:	627b      	str	r3, [r7, #36]	; 0x24
 80074f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074f6:	4641      	mov	r1, r8
 80074f8:	1854      	adds	r4, r2, r1
 80074fa:	4649      	mov	r1, r9
 80074fc:	eb43 0501 	adc.w	r5, r3, r1
 8007500:	f04f 0200 	mov.w	r2, #0
 8007504:	f04f 0300 	mov.w	r3, #0
 8007508:	00eb      	lsls	r3, r5, #3
 800750a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800750e:	00e2      	lsls	r2, r4, #3
 8007510:	4614      	mov	r4, r2
 8007512:	461d      	mov	r5, r3
 8007514:	4643      	mov	r3, r8
 8007516:	18e3      	adds	r3, r4, r3
 8007518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800751c:	464b      	mov	r3, r9
 800751e:	eb45 0303 	adc.w	r3, r5, r3
 8007522:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007532:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007542:	4629      	mov	r1, r5
 8007544:	008b      	lsls	r3, r1, #2
 8007546:	4621      	mov	r1, r4
 8007548:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800754c:	4621      	mov	r1, r4
 800754e:	008a      	lsls	r2, r1, #2
 8007550:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007554:	f7f9 fbb8 	bl	8000cc8 <__aeabi_uldivmod>
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	4b60      	ldr	r3, [pc, #384]	; (80076e0 <UART_SetConfig+0x4e4>)
 800755e:	fba3 2302 	umull	r2, r3, r3, r2
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	011c      	lsls	r4, r3, #4
 8007566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800756a:	2200      	movs	r2, #0
 800756c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007570:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007574:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007578:	4642      	mov	r2, r8
 800757a:	464b      	mov	r3, r9
 800757c:	1891      	adds	r1, r2, r2
 800757e:	61b9      	str	r1, [r7, #24]
 8007580:	415b      	adcs	r3, r3
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007588:	4641      	mov	r1, r8
 800758a:	1851      	adds	r1, r2, r1
 800758c:	6139      	str	r1, [r7, #16]
 800758e:	4649      	mov	r1, r9
 8007590:	414b      	adcs	r3, r1
 8007592:	617b      	str	r3, [r7, #20]
 8007594:	f04f 0200 	mov.w	r2, #0
 8007598:	f04f 0300 	mov.w	r3, #0
 800759c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80075a0:	4659      	mov	r1, fp
 80075a2:	00cb      	lsls	r3, r1, #3
 80075a4:	4651      	mov	r1, sl
 80075a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075aa:	4651      	mov	r1, sl
 80075ac:	00ca      	lsls	r2, r1, #3
 80075ae:	4610      	mov	r0, r2
 80075b0:	4619      	mov	r1, r3
 80075b2:	4603      	mov	r3, r0
 80075b4:	4642      	mov	r2, r8
 80075b6:	189b      	adds	r3, r3, r2
 80075b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80075bc:	464b      	mov	r3, r9
 80075be:	460a      	mov	r2, r1
 80075c0:	eb42 0303 	adc.w	r3, r2, r3
 80075c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80075d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075d4:	f04f 0200 	mov.w	r2, #0
 80075d8:	f04f 0300 	mov.w	r3, #0
 80075dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075e0:	4649      	mov	r1, r9
 80075e2:	008b      	lsls	r3, r1, #2
 80075e4:	4641      	mov	r1, r8
 80075e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ea:	4641      	mov	r1, r8
 80075ec:	008a      	lsls	r2, r1, #2
 80075ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075f2:	f7f9 fb69 	bl	8000cc8 <__aeabi_uldivmod>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	4611      	mov	r1, r2
 80075fc:	4b38      	ldr	r3, [pc, #224]	; (80076e0 <UART_SetConfig+0x4e4>)
 80075fe:	fba3 2301 	umull	r2, r3, r3, r1
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	2264      	movs	r2, #100	; 0x64
 8007606:	fb02 f303 	mul.w	r3, r2, r3
 800760a:	1acb      	subs	r3, r1, r3
 800760c:	011b      	lsls	r3, r3, #4
 800760e:	3332      	adds	r3, #50	; 0x32
 8007610:	4a33      	ldr	r2, [pc, #204]	; (80076e0 <UART_SetConfig+0x4e4>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	095b      	lsrs	r3, r3, #5
 8007618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800761c:	441c      	add	r4, r3
 800761e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007622:	2200      	movs	r2, #0
 8007624:	673b      	str	r3, [r7, #112]	; 0x70
 8007626:	677a      	str	r2, [r7, #116]	; 0x74
 8007628:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800762c:	4642      	mov	r2, r8
 800762e:	464b      	mov	r3, r9
 8007630:	1891      	adds	r1, r2, r2
 8007632:	60b9      	str	r1, [r7, #8]
 8007634:	415b      	adcs	r3, r3
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800763c:	4641      	mov	r1, r8
 800763e:	1851      	adds	r1, r2, r1
 8007640:	6039      	str	r1, [r7, #0]
 8007642:	4649      	mov	r1, r9
 8007644:	414b      	adcs	r3, r1
 8007646:	607b      	str	r3, [r7, #4]
 8007648:	f04f 0200 	mov.w	r2, #0
 800764c:	f04f 0300 	mov.w	r3, #0
 8007650:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007654:	4659      	mov	r1, fp
 8007656:	00cb      	lsls	r3, r1, #3
 8007658:	4651      	mov	r1, sl
 800765a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800765e:	4651      	mov	r1, sl
 8007660:	00ca      	lsls	r2, r1, #3
 8007662:	4610      	mov	r0, r2
 8007664:	4619      	mov	r1, r3
 8007666:	4603      	mov	r3, r0
 8007668:	4642      	mov	r2, r8
 800766a:	189b      	adds	r3, r3, r2
 800766c:	66bb      	str	r3, [r7, #104]	; 0x68
 800766e:	464b      	mov	r3, r9
 8007670:	460a      	mov	r2, r1
 8007672:	eb42 0303 	adc.w	r3, r2, r3
 8007676:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	663b      	str	r3, [r7, #96]	; 0x60
 8007682:	667a      	str	r2, [r7, #100]	; 0x64
 8007684:	f04f 0200 	mov.w	r2, #0
 8007688:	f04f 0300 	mov.w	r3, #0
 800768c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007690:	4649      	mov	r1, r9
 8007692:	008b      	lsls	r3, r1, #2
 8007694:	4641      	mov	r1, r8
 8007696:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800769a:	4641      	mov	r1, r8
 800769c:	008a      	lsls	r2, r1, #2
 800769e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80076a2:	f7f9 fb11 	bl	8000cc8 <__aeabi_uldivmod>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <UART_SetConfig+0x4e4>)
 80076ac:	fba3 1302 	umull	r1, r3, r3, r2
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	2164      	movs	r1, #100	; 0x64
 80076b4:	fb01 f303 	mul.w	r3, r1, r3
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	3332      	adds	r3, #50	; 0x32
 80076be:	4a08      	ldr	r2, [pc, #32]	; (80076e0 <UART_SetConfig+0x4e4>)
 80076c0:	fba2 2303 	umull	r2, r3, r2, r3
 80076c4:	095b      	lsrs	r3, r3, #5
 80076c6:	f003 020f 	and.w	r2, r3, #15
 80076ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4422      	add	r2, r4
 80076d2:	609a      	str	r2, [r3, #8]
}
 80076d4:	bf00      	nop
 80076d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076da:	46bd      	mov	sp, r7
 80076dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076e0:	51eb851f 	.word	0x51eb851f

080076e4 <atan2>:
 80076e4:	f000 b908 	b.w	80078f8 <__ieee754_atan2>

080076e8 <sqrt>:
 80076e8:	b538      	push	{r3, r4, r5, lr}
 80076ea:	ed2d 8b02 	vpush	{d8}
 80076ee:	ec55 4b10 	vmov	r4, r5, d0
 80076f2:	f000 f825 	bl	8007740 <__ieee754_sqrt>
 80076f6:	4622      	mov	r2, r4
 80076f8:	462b      	mov	r3, r5
 80076fa:	4620      	mov	r0, r4
 80076fc:	4629      	mov	r1, r5
 80076fe:	eeb0 8a40 	vmov.f32	s16, s0
 8007702:	eef0 8a60 	vmov.f32	s17, s1
 8007706:	f7f9 fa31 	bl	8000b6c <__aeabi_dcmpun>
 800770a:	b990      	cbnz	r0, 8007732 <sqrt+0x4a>
 800770c:	2200      	movs	r2, #0
 800770e:	2300      	movs	r3, #0
 8007710:	4620      	mov	r0, r4
 8007712:	4629      	mov	r1, r5
 8007714:	f7f9 fa02 	bl	8000b1c <__aeabi_dcmplt>
 8007718:	b158      	cbz	r0, 8007732 <sqrt+0x4a>
 800771a:	f001 fb4d 	bl	8008db8 <__errno>
 800771e:	2321      	movs	r3, #33	; 0x21
 8007720:	6003      	str	r3, [r0, #0]
 8007722:	2200      	movs	r2, #0
 8007724:	2300      	movs	r3, #0
 8007726:	4610      	mov	r0, r2
 8007728:	4619      	mov	r1, r3
 800772a:	f7f9 f8af 	bl	800088c <__aeabi_ddiv>
 800772e:	ec41 0b18 	vmov	d8, r0, r1
 8007732:	eeb0 0a48 	vmov.f32	s0, s16
 8007736:	eef0 0a68 	vmov.f32	s1, s17
 800773a:	ecbd 8b02 	vpop	{d8}
 800773e:	bd38      	pop	{r3, r4, r5, pc}

08007740 <__ieee754_sqrt>:
 8007740:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007744:	ec55 4b10 	vmov	r4, r5, d0
 8007748:	4e67      	ldr	r6, [pc, #412]	; (80078e8 <__ieee754_sqrt+0x1a8>)
 800774a:	43ae      	bics	r6, r5
 800774c:	ee10 0a10 	vmov	r0, s0
 8007750:	ee10 2a10 	vmov	r2, s0
 8007754:	4629      	mov	r1, r5
 8007756:	462b      	mov	r3, r5
 8007758:	d10d      	bne.n	8007776 <__ieee754_sqrt+0x36>
 800775a:	f7f8 ff6d 	bl	8000638 <__aeabi_dmul>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	4620      	mov	r0, r4
 8007764:	4629      	mov	r1, r5
 8007766:	f7f8 fdb1 	bl	80002cc <__adddf3>
 800776a:	4604      	mov	r4, r0
 800776c:	460d      	mov	r5, r1
 800776e:	ec45 4b10 	vmov	d0, r4, r5
 8007772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007776:	2d00      	cmp	r5, #0
 8007778:	dc0b      	bgt.n	8007792 <__ieee754_sqrt+0x52>
 800777a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800777e:	4326      	orrs	r6, r4
 8007780:	d0f5      	beq.n	800776e <__ieee754_sqrt+0x2e>
 8007782:	b135      	cbz	r5, 8007792 <__ieee754_sqrt+0x52>
 8007784:	f7f8 fda0 	bl	80002c8 <__aeabi_dsub>
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	f7f9 f87e 	bl	800088c <__aeabi_ddiv>
 8007790:	e7eb      	b.n	800776a <__ieee754_sqrt+0x2a>
 8007792:	1509      	asrs	r1, r1, #20
 8007794:	f000 808d 	beq.w	80078b2 <__ieee754_sqrt+0x172>
 8007798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800779c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80077a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077a4:	07c9      	lsls	r1, r1, #31
 80077a6:	bf5c      	itt	pl
 80077a8:	005b      	lslpl	r3, r3, #1
 80077aa:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80077ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077b2:	bf58      	it	pl
 80077b4:	0052      	lslpl	r2, r2, #1
 80077b6:	2500      	movs	r5, #0
 80077b8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80077bc:	1076      	asrs	r6, r6, #1
 80077be:	0052      	lsls	r2, r2, #1
 80077c0:	f04f 0e16 	mov.w	lr, #22
 80077c4:	46ac      	mov	ip, r5
 80077c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80077ca:	eb0c 0001 	add.w	r0, ip, r1
 80077ce:	4298      	cmp	r0, r3
 80077d0:	bfde      	ittt	le
 80077d2:	1a1b      	suble	r3, r3, r0
 80077d4:	eb00 0c01 	addle.w	ip, r0, r1
 80077d8:	186d      	addle	r5, r5, r1
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	f1be 0e01 	subs.w	lr, lr, #1
 80077e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80077e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80077e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80077ec:	d1ed      	bne.n	80077ca <__ieee754_sqrt+0x8a>
 80077ee:	4674      	mov	r4, lr
 80077f0:	2720      	movs	r7, #32
 80077f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80077f6:	4563      	cmp	r3, ip
 80077f8:	eb01 000e 	add.w	r0, r1, lr
 80077fc:	dc02      	bgt.n	8007804 <__ieee754_sqrt+0xc4>
 80077fe:	d113      	bne.n	8007828 <__ieee754_sqrt+0xe8>
 8007800:	4290      	cmp	r0, r2
 8007802:	d811      	bhi.n	8007828 <__ieee754_sqrt+0xe8>
 8007804:	2800      	cmp	r0, #0
 8007806:	eb00 0e01 	add.w	lr, r0, r1
 800780a:	da57      	bge.n	80078bc <__ieee754_sqrt+0x17c>
 800780c:	f1be 0f00 	cmp.w	lr, #0
 8007810:	db54      	blt.n	80078bc <__ieee754_sqrt+0x17c>
 8007812:	f10c 0801 	add.w	r8, ip, #1
 8007816:	eba3 030c 	sub.w	r3, r3, ip
 800781a:	4290      	cmp	r0, r2
 800781c:	bf88      	it	hi
 800781e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007822:	1a12      	subs	r2, r2, r0
 8007824:	440c      	add	r4, r1
 8007826:	46c4      	mov	ip, r8
 8007828:	005b      	lsls	r3, r3, #1
 800782a:	3f01      	subs	r7, #1
 800782c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007830:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007834:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007838:	d1dd      	bne.n	80077f6 <__ieee754_sqrt+0xb6>
 800783a:	4313      	orrs	r3, r2
 800783c:	d01b      	beq.n	8007876 <__ieee754_sqrt+0x136>
 800783e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80078ec <__ieee754_sqrt+0x1ac>
 8007842:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80078f0 <__ieee754_sqrt+0x1b0>
 8007846:	e9da 0100 	ldrd	r0, r1, [sl]
 800784a:	e9db 2300 	ldrd	r2, r3, [fp]
 800784e:	f7f8 fd3b 	bl	80002c8 <__aeabi_dsub>
 8007852:	e9da 8900 	ldrd	r8, r9, [sl]
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f9 f967 	bl	8000b30 <__aeabi_dcmple>
 8007862:	b140      	cbz	r0, 8007876 <__ieee754_sqrt+0x136>
 8007864:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007868:	e9da 0100 	ldrd	r0, r1, [sl]
 800786c:	e9db 2300 	ldrd	r2, r3, [fp]
 8007870:	d126      	bne.n	80078c0 <__ieee754_sqrt+0x180>
 8007872:	3501      	adds	r5, #1
 8007874:	463c      	mov	r4, r7
 8007876:	106a      	asrs	r2, r5, #1
 8007878:	0863      	lsrs	r3, r4, #1
 800787a:	07e9      	lsls	r1, r5, #31
 800787c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007880:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007884:	bf48      	it	mi
 8007886:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800788a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800788e:	461c      	mov	r4, r3
 8007890:	e76d      	b.n	800776e <__ieee754_sqrt+0x2e>
 8007892:	0ad3      	lsrs	r3, r2, #11
 8007894:	3815      	subs	r0, #21
 8007896:	0552      	lsls	r2, r2, #21
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0fa      	beq.n	8007892 <__ieee754_sqrt+0x152>
 800789c:	02dc      	lsls	r4, r3, #11
 800789e:	d50a      	bpl.n	80078b6 <__ieee754_sqrt+0x176>
 80078a0:	f1c1 0420 	rsb	r4, r1, #32
 80078a4:	fa22 f404 	lsr.w	r4, r2, r4
 80078a8:	1e4d      	subs	r5, r1, #1
 80078aa:	408a      	lsls	r2, r1
 80078ac:	4323      	orrs	r3, r4
 80078ae:	1b41      	subs	r1, r0, r5
 80078b0:	e772      	b.n	8007798 <__ieee754_sqrt+0x58>
 80078b2:	4608      	mov	r0, r1
 80078b4:	e7f0      	b.n	8007898 <__ieee754_sqrt+0x158>
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	3101      	adds	r1, #1
 80078ba:	e7ef      	b.n	800789c <__ieee754_sqrt+0x15c>
 80078bc:	46e0      	mov	r8, ip
 80078be:	e7aa      	b.n	8007816 <__ieee754_sqrt+0xd6>
 80078c0:	f7f8 fd04 	bl	80002cc <__adddf3>
 80078c4:	e9da 8900 	ldrd	r8, r9, [sl]
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4640      	mov	r0, r8
 80078ce:	4649      	mov	r1, r9
 80078d0:	f7f9 f924 	bl	8000b1c <__aeabi_dcmplt>
 80078d4:	b120      	cbz	r0, 80078e0 <__ieee754_sqrt+0x1a0>
 80078d6:	1ca0      	adds	r0, r4, #2
 80078d8:	bf08      	it	eq
 80078da:	3501      	addeq	r5, #1
 80078dc:	3402      	adds	r4, #2
 80078de:	e7ca      	b.n	8007876 <__ieee754_sqrt+0x136>
 80078e0:	3401      	adds	r4, #1
 80078e2:	f024 0401 	bic.w	r4, r4, #1
 80078e6:	e7c6      	b.n	8007876 <__ieee754_sqrt+0x136>
 80078e8:	7ff00000 	.word	0x7ff00000
 80078ec:	20000010 	.word	0x20000010
 80078f0:	20000018 	.word	0x20000018
 80078f4:	00000000 	.word	0x00000000

080078f8 <__ieee754_atan2>:
 80078f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078fc:	ec57 6b11 	vmov	r6, r7, d1
 8007900:	4273      	negs	r3, r6
 8007902:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8007a80 <__ieee754_atan2+0x188>
 8007906:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800790a:	4333      	orrs	r3, r6
 800790c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007910:	4543      	cmp	r3, r8
 8007912:	ec51 0b10 	vmov	r0, r1, d0
 8007916:	ee11 5a10 	vmov	r5, s2
 800791a:	d80a      	bhi.n	8007932 <__ieee754_atan2+0x3a>
 800791c:	4244      	negs	r4, r0
 800791e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007922:	4304      	orrs	r4, r0
 8007924:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8007928:	4544      	cmp	r4, r8
 800792a:	ee10 9a10 	vmov	r9, s0
 800792e:	468e      	mov	lr, r1
 8007930:	d907      	bls.n	8007942 <__ieee754_atan2+0x4a>
 8007932:	4632      	mov	r2, r6
 8007934:	463b      	mov	r3, r7
 8007936:	f7f8 fcc9 	bl	80002cc <__adddf3>
 800793a:	ec41 0b10 	vmov	d0, r0, r1
 800793e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007942:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8007946:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800794a:	4334      	orrs	r4, r6
 800794c:	d103      	bne.n	8007956 <__ieee754_atan2+0x5e>
 800794e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007952:	f000 b899 	b.w	8007a88 <atan>
 8007956:	17bc      	asrs	r4, r7, #30
 8007958:	f004 0402 	and.w	r4, r4, #2
 800795c:	ea53 0909 	orrs.w	r9, r3, r9
 8007960:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007964:	d107      	bne.n	8007976 <__ieee754_atan2+0x7e>
 8007966:	2c02      	cmp	r4, #2
 8007968:	d05f      	beq.n	8007a2a <__ieee754_atan2+0x132>
 800796a:	2c03      	cmp	r4, #3
 800796c:	d1e5      	bne.n	800793a <__ieee754_atan2+0x42>
 800796e:	a140      	add	r1, pc, #256	; (adr r1, 8007a70 <__ieee754_atan2+0x178>)
 8007970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007974:	e7e1      	b.n	800793a <__ieee754_atan2+0x42>
 8007976:	4315      	orrs	r5, r2
 8007978:	d106      	bne.n	8007988 <__ieee754_atan2+0x90>
 800797a:	f1be 0f00 	cmp.w	lr, #0
 800797e:	da5f      	bge.n	8007a40 <__ieee754_atan2+0x148>
 8007980:	a13d      	add	r1, pc, #244	; (adr r1, 8007a78 <__ieee754_atan2+0x180>)
 8007982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007986:	e7d8      	b.n	800793a <__ieee754_atan2+0x42>
 8007988:	4542      	cmp	r2, r8
 800798a:	d10f      	bne.n	80079ac <__ieee754_atan2+0xb4>
 800798c:	4293      	cmp	r3, r2
 800798e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007992:	d107      	bne.n	80079a4 <__ieee754_atan2+0xac>
 8007994:	2c02      	cmp	r4, #2
 8007996:	d84c      	bhi.n	8007a32 <__ieee754_atan2+0x13a>
 8007998:	4b33      	ldr	r3, [pc, #204]	; (8007a68 <__ieee754_atan2+0x170>)
 800799a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800799e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80079a2:	e7ca      	b.n	800793a <__ieee754_atan2+0x42>
 80079a4:	2c02      	cmp	r4, #2
 80079a6:	d848      	bhi.n	8007a3a <__ieee754_atan2+0x142>
 80079a8:	4b30      	ldr	r3, [pc, #192]	; (8007a6c <__ieee754_atan2+0x174>)
 80079aa:	e7f6      	b.n	800799a <__ieee754_atan2+0xa2>
 80079ac:	4543      	cmp	r3, r8
 80079ae:	d0e4      	beq.n	800797a <__ieee754_atan2+0x82>
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80079b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80079ba:	da1e      	bge.n	80079fa <__ieee754_atan2+0x102>
 80079bc:	2f00      	cmp	r7, #0
 80079be:	da01      	bge.n	80079c4 <__ieee754_atan2+0xcc>
 80079c0:	323c      	adds	r2, #60	; 0x3c
 80079c2:	db1e      	blt.n	8007a02 <__ieee754_atan2+0x10a>
 80079c4:	4632      	mov	r2, r6
 80079c6:	463b      	mov	r3, r7
 80079c8:	f7f8 ff60 	bl	800088c <__aeabi_ddiv>
 80079cc:	ec41 0b10 	vmov	d0, r0, r1
 80079d0:	f000 f9fa 	bl	8007dc8 <fabs>
 80079d4:	f000 f858 	bl	8007a88 <atan>
 80079d8:	ec51 0b10 	vmov	r0, r1, d0
 80079dc:	2c01      	cmp	r4, #1
 80079de:	d013      	beq.n	8007a08 <__ieee754_atan2+0x110>
 80079e0:	2c02      	cmp	r4, #2
 80079e2:	d015      	beq.n	8007a10 <__ieee754_atan2+0x118>
 80079e4:	2c00      	cmp	r4, #0
 80079e6:	d0a8      	beq.n	800793a <__ieee754_atan2+0x42>
 80079e8:	a317      	add	r3, pc, #92	; (adr r3, 8007a48 <__ieee754_atan2+0x150>)
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	f7f8 fc6b 	bl	80002c8 <__aeabi_dsub>
 80079f2:	a317      	add	r3, pc, #92	; (adr r3, 8007a50 <__ieee754_atan2+0x158>)
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	e014      	b.n	8007a24 <__ieee754_atan2+0x12c>
 80079fa:	a117      	add	r1, pc, #92	; (adr r1, 8007a58 <__ieee754_atan2+0x160>)
 80079fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a00:	e7ec      	b.n	80079dc <__ieee754_atan2+0xe4>
 8007a02:	2000      	movs	r0, #0
 8007a04:	2100      	movs	r1, #0
 8007a06:	e7e9      	b.n	80079dc <__ieee754_atan2+0xe4>
 8007a08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	e794      	b.n	800793a <__ieee754_atan2+0x42>
 8007a10:	a30d      	add	r3, pc, #52	; (adr r3, 8007a48 <__ieee754_atan2+0x150>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fc57 	bl	80002c8 <__aeabi_dsub>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	a10c      	add	r1, pc, #48	; (adr r1, 8007a50 <__ieee754_atan2+0x158>)
 8007a20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a24:	f7f8 fc50 	bl	80002c8 <__aeabi_dsub>
 8007a28:	e787      	b.n	800793a <__ieee754_atan2+0x42>
 8007a2a:	a109      	add	r1, pc, #36	; (adr r1, 8007a50 <__ieee754_atan2+0x158>)
 8007a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a30:	e783      	b.n	800793a <__ieee754_atan2+0x42>
 8007a32:	a10b      	add	r1, pc, #44	; (adr r1, 8007a60 <__ieee754_atan2+0x168>)
 8007a34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a38:	e77f      	b.n	800793a <__ieee754_atan2+0x42>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	2100      	movs	r1, #0
 8007a3e:	e77c      	b.n	800793a <__ieee754_atan2+0x42>
 8007a40:	a105      	add	r1, pc, #20	; (adr r1, 8007a58 <__ieee754_atan2+0x160>)
 8007a42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a46:	e778      	b.n	800793a <__ieee754_atan2+0x42>
 8007a48:	33145c07 	.word	0x33145c07
 8007a4c:	3ca1a626 	.word	0x3ca1a626
 8007a50:	54442d18 	.word	0x54442d18
 8007a54:	400921fb 	.word	0x400921fb
 8007a58:	54442d18 	.word	0x54442d18
 8007a5c:	3ff921fb 	.word	0x3ff921fb
 8007a60:	54442d18 	.word	0x54442d18
 8007a64:	3fe921fb 	.word	0x3fe921fb
 8007a68:	0800c5c8 	.word	0x0800c5c8
 8007a6c:	0800c5e0 	.word	0x0800c5e0
 8007a70:	54442d18 	.word	0x54442d18
 8007a74:	c00921fb 	.word	0xc00921fb
 8007a78:	54442d18 	.word	0x54442d18
 8007a7c:	bff921fb 	.word	0xbff921fb
 8007a80:	7ff00000 	.word	0x7ff00000
 8007a84:	00000000 	.word	0x00000000

08007a88 <atan>:
 8007a88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a8c:	ec55 4b10 	vmov	r4, r5, d0
 8007a90:	4bc3      	ldr	r3, [pc, #780]	; (8007da0 <atan+0x318>)
 8007a92:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a96:	429e      	cmp	r6, r3
 8007a98:	46ab      	mov	fp, r5
 8007a9a:	dd18      	ble.n	8007ace <atan+0x46>
 8007a9c:	4bc1      	ldr	r3, [pc, #772]	; (8007da4 <atan+0x31c>)
 8007a9e:	429e      	cmp	r6, r3
 8007aa0:	dc01      	bgt.n	8007aa6 <atan+0x1e>
 8007aa2:	d109      	bne.n	8007ab8 <atan+0x30>
 8007aa4:	b144      	cbz	r4, 8007ab8 <atan+0x30>
 8007aa6:	4622      	mov	r2, r4
 8007aa8:	462b      	mov	r3, r5
 8007aaa:	4620      	mov	r0, r4
 8007aac:	4629      	mov	r1, r5
 8007aae:	f7f8 fc0d 	bl	80002cc <__adddf3>
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	460d      	mov	r5, r1
 8007ab6:	e006      	b.n	8007ac6 <atan+0x3e>
 8007ab8:	f1bb 0f00 	cmp.w	fp, #0
 8007abc:	f300 8131 	bgt.w	8007d22 <atan+0x29a>
 8007ac0:	a59b      	add	r5, pc, #620	; (adr r5, 8007d30 <atan+0x2a8>)
 8007ac2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ac6:	ec45 4b10 	vmov	d0, r4, r5
 8007aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ace:	4bb6      	ldr	r3, [pc, #728]	; (8007da8 <atan+0x320>)
 8007ad0:	429e      	cmp	r6, r3
 8007ad2:	dc14      	bgt.n	8007afe <atan+0x76>
 8007ad4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007ad8:	429e      	cmp	r6, r3
 8007ada:	dc0d      	bgt.n	8007af8 <atan+0x70>
 8007adc:	a396      	add	r3, pc, #600	; (adr r3, 8007d38 <atan+0x2b0>)
 8007ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae2:	ee10 0a10 	vmov	r0, s0
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	f7f8 fbf0 	bl	80002cc <__adddf3>
 8007aec:	4baf      	ldr	r3, [pc, #700]	; (8007dac <atan+0x324>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	f7f9 f832 	bl	8000b58 <__aeabi_dcmpgt>
 8007af4:	2800      	cmp	r0, #0
 8007af6:	d1e6      	bne.n	8007ac6 <atan+0x3e>
 8007af8:	f04f 3aff 	mov.w	sl, #4294967295
 8007afc:	e02b      	b.n	8007b56 <atan+0xce>
 8007afe:	f000 f963 	bl	8007dc8 <fabs>
 8007b02:	4bab      	ldr	r3, [pc, #684]	; (8007db0 <atan+0x328>)
 8007b04:	429e      	cmp	r6, r3
 8007b06:	ec55 4b10 	vmov	r4, r5, d0
 8007b0a:	f300 80bf 	bgt.w	8007c8c <atan+0x204>
 8007b0e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007b12:	429e      	cmp	r6, r3
 8007b14:	f300 80a0 	bgt.w	8007c58 <atan+0x1d0>
 8007b18:	ee10 2a10 	vmov	r2, s0
 8007b1c:	ee10 0a10 	vmov	r0, s0
 8007b20:	462b      	mov	r3, r5
 8007b22:	4629      	mov	r1, r5
 8007b24:	f7f8 fbd2 	bl	80002cc <__adddf3>
 8007b28:	4ba0      	ldr	r3, [pc, #640]	; (8007dac <atan+0x324>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f7f8 fbcc 	bl	80002c8 <__aeabi_dsub>
 8007b30:	2200      	movs	r2, #0
 8007b32:	4606      	mov	r6, r0
 8007b34:	460f      	mov	r7, r1
 8007b36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b3a:	4620      	mov	r0, r4
 8007b3c:	4629      	mov	r1, r5
 8007b3e:	f7f8 fbc5 	bl	80002cc <__adddf3>
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	4630      	mov	r0, r6
 8007b48:	4639      	mov	r1, r7
 8007b4a:	f7f8 fe9f 	bl	800088c <__aeabi_ddiv>
 8007b4e:	f04f 0a00 	mov.w	sl, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	460d      	mov	r5, r1
 8007b56:	4622      	mov	r2, r4
 8007b58:	462b      	mov	r3, r5
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	f7f8 fd6b 	bl	8000638 <__aeabi_dmul>
 8007b62:	4602      	mov	r2, r0
 8007b64:	460b      	mov	r3, r1
 8007b66:	4680      	mov	r8, r0
 8007b68:	4689      	mov	r9, r1
 8007b6a:	f7f8 fd65 	bl	8000638 <__aeabi_dmul>
 8007b6e:	a374      	add	r3, pc, #464	; (adr r3, 8007d40 <atan+0x2b8>)
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	4606      	mov	r6, r0
 8007b76:	460f      	mov	r7, r1
 8007b78:	f7f8 fd5e 	bl	8000638 <__aeabi_dmul>
 8007b7c:	a372      	add	r3, pc, #456	; (adr r3, 8007d48 <atan+0x2c0>)
 8007b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b82:	f7f8 fba3 	bl	80002cc <__adddf3>
 8007b86:	4632      	mov	r2, r6
 8007b88:	463b      	mov	r3, r7
 8007b8a:	f7f8 fd55 	bl	8000638 <__aeabi_dmul>
 8007b8e:	a370      	add	r3, pc, #448	; (adr r3, 8007d50 <atan+0x2c8>)
 8007b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b94:	f7f8 fb9a 	bl	80002cc <__adddf3>
 8007b98:	4632      	mov	r2, r6
 8007b9a:	463b      	mov	r3, r7
 8007b9c:	f7f8 fd4c 	bl	8000638 <__aeabi_dmul>
 8007ba0:	a36d      	add	r3, pc, #436	; (adr r3, 8007d58 <atan+0x2d0>)
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f7f8 fb91 	bl	80002cc <__adddf3>
 8007baa:	4632      	mov	r2, r6
 8007bac:	463b      	mov	r3, r7
 8007bae:	f7f8 fd43 	bl	8000638 <__aeabi_dmul>
 8007bb2:	a36b      	add	r3, pc, #428	; (adr r3, 8007d60 <atan+0x2d8>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7f8 fb88 	bl	80002cc <__adddf3>
 8007bbc:	4632      	mov	r2, r6
 8007bbe:	463b      	mov	r3, r7
 8007bc0:	f7f8 fd3a 	bl	8000638 <__aeabi_dmul>
 8007bc4:	a368      	add	r3, pc, #416	; (adr r3, 8007d68 <atan+0x2e0>)
 8007bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bca:	f7f8 fb7f 	bl	80002cc <__adddf3>
 8007bce:	4642      	mov	r2, r8
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	f7f8 fd31 	bl	8000638 <__aeabi_dmul>
 8007bd6:	a366      	add	r3, pc, #408	; (adr r3, 8007d70 <atan+0x2e8>)
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	4680      	mov	r8, r0
 8007bde:	4689      	mov	r9, r1
 8007be0:	4630      	mov	r0, r6
 8007be2:	4639      	mov	r1, r7
 8007be4:	f7f8 fd28 	bl	8000638 <__aeabi_dmul>
 8007be8:	a363      	add	r3, pc, #396	; (adr r3, 8007d78 <atan+0x2f0>)
 8007bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bee:	f7f8 fb6b 	bl	80002c8 <__aeabi_dsub>
 8007bf2:	4632      	mov	r2, r6
 8007bf4:	463b      	mov	r3, r7
 8007bf6:	f7f8 fd1f 	bl	8000638 <__aeabi_dmul>
 8007bfa:	a361      	add	r3, pc, #388	; (adr r3, 8007d80 <atan+0x2f8>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f7f8 fb62 	bl	80002c8 <__aeabi_dsub>
 8007c04:	4632      	mov	r2, r6
 8007c06:	463b      	mov	r3, r7
 8007c08:	f7f8 fd16 	bl	8000638 <__aeabi_dmul>
 8007c0c:	a35e      	add	r3, pc, #376	; (adr r3, 8007d88 <atan+0x300>)
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f7f8 fb59 	bl	80002c8 <__aeabi_dsub>
 8007c16:	4632      	mov	r2, r6
 8007c18:	463b      	mov	r3, r7
 8007c1a:	f7f8 fd0d 	bl	8000638 <__aeabi_dmul>
 8007c1e:	a35c      	add	r3, pc, #368	; (adr r3, 8007d90 <atan+0x308>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	f7f8 fb50 	bl	80002c8 <__aeabi_dsub>
 8007c28:	4632      	mov	r2, r6
 8007c2a:	463b      	mov	r3, r7
 8007c2c:	f7f8 fd04 	bl	8000638 <__aeabi_dmul>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	4640      	mov	r0, r8
 8007c36:	4649      	mov	r1, r9
 8007c38:	f7f8 fb48 	bl	80002cc <__adddf3>
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	462b      	mov	r3, r5
 8007c40:	f7f8 fcfa 	bl	8000638 <__aeabi_dmul>
 8007c44:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	d14b      	bne.n	8007ce6 <atan+0x25e>
 8007c4e:	4620      	mov	r0, r4
 8007c50:	4629      	mov	r1, r5
 8007c52:	f7f8 fb39 	bl	80002c8 <__aeabi_dsub>
 8007c56:	e72c      	b.n	8007ab2 <atan+0x2a>
 8007c58:	ee10 0a10 	vmov	r0, s0
 8007c5c:	4b53      	ldr	r3, [pc, #332]	; (8007dac <atan+0x324>)
 8007c5e:	2200      	movs	r2, #0
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 fb31 	bl	80002c8 <__aeabi_dsub>
 8007c66:	4b51      	ldr	r3, [pc, #324]	; (8007dac <atan+0x324>)
 8007c68:	4606      	mov	r6, r0
 8007c6a:	460f      	mov	r7, r1
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	4620      	mov	r0, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	f7f8 fb2b 	bl	80002cc <__adddf3>
 8007c76:	4602      	mov	r2, r0
 8007c78:	460b      	mov	r3, r1
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	4639      	mov	r1, r7
 8007c7e:	f7f8 fe05 	bl	800088c <__aeabi_ddiv>
 8007c82:	f04f 0a01 	mov.w	sl, #1
 8007c86:	4604      	mov	r4, r0
 8007c88:	460d      	mov	r5, r1
 8007c8a:	e764      	b.n	8007b56 <atan+0xce>
 8007c8c:	4b49      	ldr	r3, [pc, #292]	; (8007db4 <atan+0x32c>)
 8007c8e:	429e      	cmp	r6, r3
 8007c90:	da1d      	bge.n	8007cce <atan+0x246>
 8007c92:	ee10 0a10 	vmov	r0, s0
 8007c96:	4b48      	ldr	r3, [pc, #288]	; (8007db8 <atan+0x330>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	f7f8 fb14 	bl	80002c8 <__aeabi_dsub>
 8007ca0:	4b45      	ldr	r3, [pc, #276]	; (8007db8 <atan+0x330>)
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	460f      	mov	r7, r1
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	4620      	mov	r0, r4
 8007caa:	4629      	mov	r1, r5
 8007cac:	f7f8 fcc4 	bl	8000638 <__aeabi_dmul>
 8007cb0:	4b3e      	ldr	r3, [pc, #248]	; (8007dac <atan+0x324>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f7f8 fb0a 	bl	80002cc <__adddf3>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	4639      	mov	r1, r7
 8007cc0:	f7f8 fde4 	bl	800088c <__aeabi_ddiv>
 8007cc4:	f04f 0a02 	mov.w	sl, #2
 8007cc8:	4604      	mov	r4, r0
 8007cca:	460d      	mov	r5, r1
 8007ccc:	e743      	b.n	8007b56 <atan+0xce>
 8007cce:	462b      	mov	r3, r5
 8007cd0:	ee10 2a10 	vmov	r2, s0
 8007cd4:	4939      	ldr	r1, [pc, #228]	; (8007dbc <atan+0x334>)
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f7f8 fdd8 	bl	800088c <__aeabi_ddiv>
 8007cdc:	f04f 0a03 	mov.w	sl, #3
 8007ce0:	4604      	mov	r4, r0
 8007ce2:	460d      	mov	r5, r1
 8007ce4:	e737      	b.n	8007b56 <atan+0xce>
 8007ce6:	4b36      	ldr	r3, [pc, #216]	; (8007dc0 <atan+0x338>)
 8007ce8:	4e36      	ldr	r6, [pc, #216]	; (8007dc4 <atan+0x33c>)
 8007cea:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fae9 	bl	80002c8 <__aeabi_dsub>
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	f7f8 fae5 	bl	80002c8 <__aeabi_dsub>
 8007cfe:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007d02:	4602      	mov	r2, r0
 8007d04:	460b      	mov	r3, r1
 8007d06:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007d0a:	f7f8 fadd 	bl	80002c8 <__aeabi_dsub>
 8007d0e:	f1bb 0f00 	cmp.w	fp, #0
 8007d12:	4604      	mov	r4, r0
 8007d14:	460d      	mov	r5, r1
 8007d16:	f6bf aed6 	bge.w	8007ac6 <atan+0x3e>
 8007d1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d1e:	461d      	mov	r5, r3
 8007d20:	e6d1      	b.n	8007ac6 <atan+0x3e>
 8007d22:	a51d      	add	r5, pc, #116	; (adr r5, 8007d98 <atan+0x310>)
 8007d24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007d28:	e6cd      	b.n	8007ac6 <atan+0x3e>
 8007d2a:	bf00      	nop
 8007d2c:	f3af 8000 	nop.w
 8007d30:	54442d18 	.word	0x54442d18
 8007d34:	bff921fb 	.word	0xbff921fb
 8007d38:	8800759c 	.word	0x8800759c
 8007d3c:	7e37e43c 	.word	0x7e37e43c
 8007d40:	e322da11 	.word	0xe322da11
 8007d44:	3f90ad3a 	.word	0x3f90ad3a
 8007d48:	24760deb 	.word	0x24760deb
 8007d4c:	3fa97b4b 	.word	0x3fa97b4b
 8007d50:	a0d03d51 	.word	0xa0d03d51
 8007d54:	3fb10d66 	.word	0x3fb10d66
 8007d58:	c54c206e 	.word	0xc54c206e
 8007d5c:	3fb745cd 	.word	0x3fb745cd
 8007d60:	920083ff 	.word	0x920083ff
 8007d64:	3fc24924 	.word	0x3fc24924
 8007d68:	5555550d 	.word	0x5555550d
 8007d6c:	3fd55555 	.word	0x3fd55555
 8007d70:	2c6a6c2f 	.word	0x2c6a6c2f
 8007d74:	bfa2b444 	.word	0xbfa2b444
 8007d78:	52defd9a 	.word	0x52defd9a
 8007d7c:	3fadde2d 	.word	0x3fadde2d
 8007d80:	af749a6d 	.word	0xaf749a6d
 8007d84:	3fb3b0f2 	.word	0x3fb3b0f2
 8007d88:	fe231671 	.word	0xfe231671
 8007d8c:	3fbc71c6 	.word	0x3fbc71c6
 8007d90:	9998ebc4 	.word	0x9998ebc4
 8007d94:	3fc99999 	.word	0x3fc99999
 8007d98:	54442d18 	.word	0x54442d18
 8007d9c:	3ff921fb 	.word	0x3ff921fb
 8007da0:	440fffff 	.word	0x440fffff
 8007da4:	7ff00000 	.word	0x7ff00000
 8007da8:	3fdbffff 	.word	0x3fdbffff
 8007dac:	3ff00000 	.word	0x3ff00000
 8007db0:	3ff2ffff 	.word	0x3ff2ffff
 8007db4:	40038000 	.word	0x40038000
 8007db8:	3ff80000 	.word	0x3ff80000
 8007dbc:	bff00000 	.word	0xbff00000
 8007dc0:	0800c618 	.word	0x0800c618
 8007dc4:	0800c5f8 	.word	0x0800c5f8

08007dc8 <fabs>:
 8007dc8:	ec51 0b10 	vmov	r0, r1, d0
 8007dcc:	ee10 2a10 	vmov	r2, s0
 8007dd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007dd4:	ec43 2b10 	vmov	d0, r2, r3
 8007dd8:	4770      	bx	lr

08007dda <__cvt>:
 8007dda:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dde:	ec55 4b10 	vmov	r4, r5, d0
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	460e      	mov	r6, r1
 8007de6:	4619      	mov	r1, r3
 8007de8:	462b      	mov	r3, r5
 8007dea:	bfbb      	ittet	lt
 8007dec:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007df0:	461d      	movlt	r5, r3
 8007df2:	2300      	movge	r3, #0
 8007df4:	232d      	movlt	r3, #45	; 0x2d
 8007df6:	700b      	strb	r3, [r1, #0]
 8007df8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dfa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007dfe:	4691      	mov	r9, r2
 8007e00:	f023 0820 	bic.w	r8, r3, #32
 8007e04:	bfbc      	itt	lt
 8007e06:	4622      	movlt	r2, r4
 8007e08:	4614      	movlt	r4, r2
 8007e0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e0e:	d005      	beq.n	8007e1c <__cvt+0x42>
 8007e10:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e14:	d100      	bne.n	8007e18 <__cvt+0x3e>
 8007e16:	3601      	adds	r6, #1
 8007e18:	2102      	movs	r1, #2
 8007e1a:	e000      	b.n	8007e1e <__cvt+0x44>
 8007e1c:	2103      	movs	r1, #3
 8007e1e:	ab03      	add	r3, sp, #12
 8007e20:	9301      	str	r3, [sp, #4]
 8007e22:	ab02      	add	r3, sp, #8
 8007e24:	9300      	str	r3, [sp, #0]
 8007e26:	ec45 4b10 	vmov	d0, r4, r5
 8007e2a:	4653      	mov	r3, sl
 8007e2c:	4632      	mov	r2, r6
 8007e2e:	f001 f87f 	bl	8008f30 <_dtoa_r>
 8007e32:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007e36:	4607      	mov	r7, r0
 8007e38:	d102      	bne.n	8007e40 <__cvt+0x66>
 8007e3a:	f019 0f01 	tst.w	r9, #1
 8007e3e:	d022      	beq.n	8007e86 <__cvt+0xac>
 8007e40:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e44:	eb07 0906 	add.w	r9, r7, r6
 8007e48:	d110      	bne.n	8007e6c <__cvt+0x92>
 8007e4a:	783b      	ldrb	r3, [r7, #0]
 8007e4c:	2b30      	cmp	r3, #48	; 0x30
 8007e4e:	d10a      	bne.n	8007e66 <__cvt+0x8c>
 8007e50:	2200      	movs	r2, #0
 8007e52:	2300      	movs	r3, #0
 8007e54:	4620      	mov	r0, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	f7f8 fe56 	bl	8000b08 <__aeabi_dcmpeq>
 8007e5c:	b918      	cbnz	r0, 8007e66 <__cvt+0x8c>
 8007e5e:	f1c6 0601 	rsb	r6, r6, #1
 8007e62:	f8ca 6000 	str.w	r6, [sl]
 8007e66:	f8da 3000 	ldr.w	r3, [sl]
 8007e6a:	4499      	add	r9, r3
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	2300      	movs	r3, #0
 8007e70:	4620      	mov	r0, r4
 8007e72:	4629      	mov	r1, r5
 8007e74:	f7f8 fe48 	bl	8000b08 <__aeabi_dcmpeq>
 8007e78:	b108      	cbz	r0, 8007e7e <__cvt+0xa4>
 8007e7a:	f8cd 900c 	str.w	r9, [sp, #12]
 8007e7e:	2230      	movs	r2, #48	; 0x30
 8007e80:	9b03      	ldr	r3, [sp, #12]
 8007e82:	454b      	cmp	r3, r9
 8007e84:	d307      	bcc.n	8007e96 <__cvt+0xbc>
 8007e86:	9b03      	ldr	r3, [sp, #12]
 8007e88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e8a:	1bdb      	subs	r3, r3, r7
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	6013      	str	r3, [r2, #0]
 8007e90:	b004      	add	sp, #16
 8007e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e96:	1c59      	adds	r1, r3, #1
 8007e98:	9103      	str	r1, [sp, #12]
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	e7f0      	b.n	8007e80 <__cvt+0xa6>

08007e9e <__exponent>:
 8007e9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2900      	cmp	r1, #0
 8007ea4:	bfb8      	it	lt
 8007ea6:	4249      	neglt	r1, r1
 8007ea8:	f803 2b02 	strb.w	r2, [r3], #2
 8007eac:	bfb4      	ite	lt
 8007eae:	222d      	movlt	r2, #45	; 0x2d
 8007eb0:	222b      	movge	r2, #43	; 0x2b
 8007eb2:	2909      	cmp	r1, #9
 8007eb4:	7042      	strb	r2, [r0, #1]
 8007eb6:	dd2a      	ble.n	8007f0e <__exponent+0x70>
 8007eb8:	f10d 0207 	add.w	r2, sp, #7
 8007ebc:	4617      	mov	r7, r2
 8007ebe:	260a      	movs	r6, #10
 8007ec0:	4694      	mov	ip, r2
 8007ec2:	fb91 f5f6 	sdiv	r5, r1, r6
 8007ec6:	fb06 1415 	mls	r4, r6, r5, r1
 8007eca:	3430      	adds	r4, #48	; 0x30
 8007ecc:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007ed0:	460c      	mov	r4, r1
 8007ed2:	2c63      	cmp	r4, #99	; 0x63
 8007ed4:	f102 32ff 	add.w	r2, r2, #4294967295
 8007ed8:	4629      	mov	r1, r5
 8007eda:	dcf1      	bgt.n	8007ec0 <__exponent+0x22>
 8007edc:	3130      	adds	r1, #48	; 0x30
 8007ede:	f1ac 0402 	sub.w	r4, ip, #2
 8007ee2:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007ee6:	1c41      	adds	r1, r0, #1
 8007ee8:	4622      	mov	r2, r4
 8007eea:	42ba      	cmp	r2, r7
 8007eec:	d30a      	bcc.n	8007f04 <__exponent+0x66>
 8007eee:	f10d 0209 	add.w	r2, sp, #9
 8007ef2:	eba2 020c 	sub.w	r2, r2, ip
 8007ef6:	42bc      	cmp	r4, r7
 8007ef8:	bf88      	it	hi
 8007efa:	2200      	movhi	r2, #0
 8007efc:	4413      	add	r3, r2
 8007efe:	1a18      	subs	r0, r3, r0
 8007f00:	b003      	add	sp, #12
 8007f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f04:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007f08:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007f0c:	e7ed      	b.n	8007eea <__exponent+0x4c>
 8007f0e:	2330      	movs	r3, #48	; 0x30
 8007f10:	3130      	adds	r1, #48	; 0x30
 8007f12:	7083      	strb	r3, [r0, #2]
 8007f14:	70c1      	strb	r1, [r0, #3]
 8007f16:	1d03      	adds	r3, r0, #4
 8007f18:	e7f1      	b.n	8007efe <__exponent+0x60>
	...

08007f1c <_printf_float>:
 8007f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f20:	ed2d 8b02 	vpush	{d8}
 8007f24:	b08d      	sub	sp, #52	; 0x34
 8007f26:	460c      	mov	r4, r1
 8007f28:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f2c:	4616      	mov	r6, r2
 8007f2e:	461f      	mov	r7, r3
 8007f30:	4605      	mov	r5, r0
 8007f32:	f000 fef7 	bl	8008d24 <_localeconv_r>
 8007f36:	f8d0 a000 	ldr.w	sl, [r0]
 8007f3a:	4650      	mov	r0, sl
 8007f3c:	f7f8 f9b8 	bl	80002b0 <strlen>
 8007f40:	2300      	movs	r3, #0
 8007f42:	930a      	str	r3, [sp, #40]	; 0x28
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	9305      	str	r3, [sp, #20]
 8007f48:	f8d8 3000 	ldr.w	r3, [r8]
 8007f4c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007f50:	3307      	adds	r3, #7
 8007f52:	f023 0307 	bic.w	r3, r3, #7
 8007f56:	f103 0208 	add.w	r2, r3, #8
 8007f5a:	f8c8 2000 	str.w	r2, [r8]
 8007f5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f62:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f66:	9307      	str	r3, [sp, #28]
 8007f68:	f8cd 8018 	str.w	r8, [sp, #24]
 8007f6c:	ee08 0a10 	vmov	s16, r0
 8007f70:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007f74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f78:	4b9e      	ldr	r3, [pc, #632]	; (80081f4 <_printf_float+0x2d8>)
 8007f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f7e:	f7f8 fdf5 	bl	8000b6c <__aeabi_dcmpun>
 8007f82:	bb88      	cbnz	r0, 8007fe8 <_printf_float+0xcc>
 8007f84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f88:	4b9a      	ldr	r3, [pc, #616]	; (80081f4 <_printf_float+0x2d8>)
 8007f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8e:	f7f8 fdcf 	bl	8000b30 <__aeabi_dcmple>
 8007f92:	bb48      	cbnz	r0, 8007fe8 <_printf_float+0xcc>
 8007f94:	2200      	movs	r2, #0
 8007f96:	2300      	movs	r3, #0
 8007f98:	4640      	mov	r0, r8
 8007f9a:	4649      	mov	r1, r9
 8007f9c:	f7f8 fdbe 	bl	8000b1c <__aeabi_dcmplt>
 8007fa0:	b110      	cbz	r0, 8007fa8 <_printf_float+0x8c>
 8007fa2:	232d      	movs	r3, #45	; 0x2d
 8007fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fa8:	4a93      	ldr	r2, [pc, #588]	; (80081f8 <_printf_float+0x2dc>)
 8007faa:	4b94      	ldr	r3, [pc, #592]	; (80081fc <_printf_float+0x2e0>)
 8007fac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007fb0:	bf94      	ite	ls
 8007fb2:	4690      	movls	r8, r2
 8007fb4:	4698      	movhi	r8, r3
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	9b05      	ldr	r3, [sp, #20]
 8007fbc:	f023 0304 	bic.w	r3, r3, #4
 8007fc0:	6023      	str	r3, [r4, #0]
 8007fc2:	f04f 0900 	mov.w	r9, #0
 8007fc6:	9700      	str	r7, [sp, #0]
 8007fc8:	4633      	mov	r3, r6
 8007fca:	aa0b      	add	r2, sp, #44	; 0x2c
 8007fcc:	4621      	mov	r1, r4
 8007fce:	4628      	mov	r0, r5
 8007fd0:	f000 f9da 	bl	8008388 <_printf_common>
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	f040 8090 	bne.w	80080fa <_printf_float+0x1de>
 8007fda:	f04f 30ff 	mov.w	r0, #4294967295
 8007fde:	b00d      	add	sp, #52	; 0x34
 8007fe0:	ecbd 8b02 	vpop	{d8}
 8007fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe8:	4642      	mov	r2, r8
 8007fea:	464b      	mov	r3, r9
 8007fec:	4640      	mov	r0, r8
 8007fee:	4649      	mov	r1, r9
 8007ff0:	f7f8 fdbc 	bl	8000b6c <__aeabi_dcmpun>
 8007ff4:	b140      	cbz	r0, 8008008 <_printf_float+0xec>
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bfbc      	itt	lt
 8007ffc:	232d      	movlt	r3, #45	; 0x2d
 8007ffe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008002:	4a7f      	ldr	r2, [pc, #508]	; (8008200 <_printf_float+0x2e4>)
 8008004:	4b7f      	ldr	r3, [pc, #508]	; (8008204 <_printf_float+0x2e8>)
 8008006:	e7d1      	b.n	8007fac <_printf_float+0x90>
 8008008:	6863      	ldr	r3, [r4, #4]
 800800a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800800e:	9206      	str	r2, [sp, #24]
 8008010:	1c5a      	adds	r2, r3, #1
 8008012:	d13f      	bne.n	8008094 <_printf_float+0x178>
 8008014:	2306      	movs	r3, #6
 8008016:	6063      	str	r3, [r4, #4]
 8008018:	9b05      	ldr	r3, [sp, #20]
 800801a:	6861      	ldr	r1, [r4, #4]
 800801c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008020:	2300      	movs	r3, #0
 8008022:	9303      	str	r3, [sp, #12]
 8008024:	ab0a      	add	r3, sp, #40	; 0x28
 8008026:	e9cd b301 	strd	fp, r3, [sp, #4]
 800802a:	ab09      	add	r3, sp, #36	; 0x24
 800802c:	ec49 8b10 	vmov	d0, r8, r9
 8008030:	9300      	str	r3, [sp, #0]
 8008032:	6022      	str	r2, [r4, #0]
 8008034:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008038:	4628      	mov	r0, r5
 800803a:	f7ff fece 	bl	8007dda <__cvt>
 800803e:	9b06      	ldr	r3, [sp, #24]
 8008040:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008042:	2b47      	cmp	r3, #71	; 0x47
 8008044:	4680      	mov	r8, r0
 8008046:	d108      	bne.n	800805a <_printf_float+0x13e>
 8008048:	1cc8      	adds	r0, r1, #3
 800804a:	db02      	blt.n	8008052 <_printf_float+0x136>
 800804c:	6863      	ldr	r3, [r4, #4]
 800804e:	4299      	cmp	r1, r3
 8008050:	dd41      	ble.n	80080d6 <_printf_float+0x1ba>
 8008052:	f1ab 0302 	sub.w	r3, fp, #2
 8008056:	fa5f fb83 	uxtb.w	fp, r3
 800805a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800805e:	d820      	bhi.n	80080a2 <_printf_float+0x186>
 8008060:	3901      	subs	r1, #1
 8008062:	465a      	mov	r2, fp
 8008064:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008068:	9109      	str	r1, [sp, #36]	; 0x24
 800806a:	f7ff ff18 	bl	8007e9e <__exponent>
 800806e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008070:	1813      	adds	r3, r2, r0
 8008072:	2a01      	cmp	r2, #1
 8008074:	4681      	mov	r9, r0
 8008076:	6123      	str	r3, [r4, #16]
 8008078:	dc02      	bgt.n	8008080 <_printf_float+0x164>
 800807a:	6822      	ldr	r2, [r4, #0]
 800807c:	07d2      	lsls	r2, r2, #31
 800807e:	d501      	bpl.n	8008084 <_printf_float+0x168>
 8008080:	3301      	adds	r3, #1
 8008082:	6123      	str	r3, [r4, #16]
 8008084:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008088:	2b00      	cmp	r3, #0
 800808a:	d09c      	beq.n	8007fc6 <_printf_float+0xaa>
 800808c:	232d      	movs	r3, #45	; 0x2d
 800808e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008092:	e798      	b.n	8007fc6 <_printf_float+0xaa>
 8008094:	9a06      	ldr	r2, [sp, #24]
 8008096:	2a47      	cmp	r2, #71	; 0x47
 8008098:	d1be      	bne.n	8008018 <_printf_float+0xfc>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1bc      	bne.n	8008018 <_printf_float+0xfc>
 800809e:	2301      	movs	r3, #1
 80080a0:	e7b9      	b.n	8008016 <_printf_float+0xfa>
 80080a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80080a6:	d118      	bne.n	80080da <_printf_float+0x1be>
 80080a8:	2900      	cmp	r1, #0
 80080aa:	6863      	ldr	r3, [r4, #4]
 80080ac:	dd0b      	ble.n	80080c6 <_printf_float+0x1aa>
 80080ae:	6121      	str	r1, [r4, #16]
 80080b0:	b913      	cbnz	r3, 80080b8 <_printf_float+0x19c>
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	07d0      	lsls	r0, r2, #31
 80080b6:	d502      	bpl.n	80080be <_printf_float+0x1a2>
 80080b8:	3301      	adds	r3, #1
 80080ba:	440b      	add	r3, r1
 80080bc:	6123      	str	r3, [r4, #16]
 80080be:	65a1      	str	r1, [r4, #88]	; 0x58
 80080c0:	f04f 0900 	mov.w	r9, #0
 80080c4:	e7de      	b.n	8008084 <_printf_float+0x168>
 80080c6:	b913      	cbnz	r3, 80080ce <_printf_float+0x1b2>
 80080c8:	6822      	ldr	r2, [r4, #0]
 80080ca:	07d2      	lsls	r2, r2, #31
 80080cc:	d501      	bpl.n	80080d2 <_printf_float+0x1b6>
 80080ce:	3302      	adds	r3, #2
 80080d0:	e7f4      	b.n	80080bc <_printf_float+0x1a0>
 80080d2:	2301      	movs	r3, #1
 80080d4:	e7f2      	b.n	80080bc <_printf_float+0x1a0>
 80080d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80080da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080dc:	4299      	cmp	r1, r3
 80080de:	db05      	blt.n	80080ec <_printf_float+0x1d0>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	6121      	str	r1, [r4, #16]
 80080e4:	07d8      	lsls	r0, r3, #31
 80080e6:	d5ea      	bpl.n	80080be <_printf_float+0x1a2>
 80080e8:	1c4b      	adds	r3, r1, #1
 80080ea:	e7e7      	b.n	80080bc <_printf_float+0x1a0>
 80080ec:	2900      	cmp	r1, #0
 80080ee:	bfd4      	ite	le
 80080f0:	f1c1 0202 	rsble	r2, r1, #2
 80080f4:	2201      	movgt	r2, #1
 80080f6:	4413      	add	r3, r2
 80080f8:	e7e0      	b.n	80080bc <_printf_float+0x1a0>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	055a      	lsls	r2, r3, #21
 80080fe:	d407      	bmi.n	8008110 <_printf_float+0x1f4>
 8008100:	6923      	ldr	r3, [r4, #16]
 8008102:	4642      	mov	r2, r8
 8008104:	4631      	mov	r1, r6
 8008106:	4628      	mov	r0, r5
 8008108:	47b8      	blx	r7
 800810a:	3001      	adds	r0, #1
 800810c:	d12c      	bne.n	8008168 <_printf_float+0x24c>
 800810e:	e764      	b.n	8007fda <_printf_float+0xbe>
 8008110:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008114:	f240 80e0 	bls.w	80082d8 <_printf_float+0x3bc>
 8008118:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800811c:	2200      	movs	r2, #0
 800811e:	2300      	movs	r3, #0
 8008120:	f7f8 fcf2 	bl	8000b08 <__aeabi_dcmpeq>
 8008124:	2800      	cmp	r0, #0
 8008126:	d034      	beq.n	8008192 <_printf_float+0x276>
 8008128:	4a37      	ldr	r2, [pc, #220]	; (8008208 <_printf_float+0x2ec>)
 800812a:	2301      	movs	r3, #1
 800812c:	4631      	mov	r1, r6
 800812e:	4628      	mov	r0, r5
 8008130:	47b8      	blx	r7
 8008132:	3001      	adds	r0, #1
 8008134:	f43f af51 	beq.w	8007fda <_printf_float+0xbe>
 8008138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800813c:	429a      	cmp	r2, r3
 800813e:	db02      	blt.n	8008146 <_printf_float+0x22a>
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	07d8      	lsls	r0, r3, #31
 8008144:	d510      	bpl.n	8008168 <_printf_float+0x24c>
 8008146:	ee18 3a10 	vmov	r3, s16
 800814a:	4652      	mov	r2, sl
 800814c:	4631      	mov	r1, r6
 800814e:	4628      	mov	r0, r5
 8008150:	47b8      	blx	r7
 8008152:	3001      	adds	r0, #1
 8008154:	f43f af41 	beq.w	8007fda <_printf_float+0xbe>
 8008158:	f04f 0800 	mov.w	r8, #0
 800815c:	f104 091a 	add.w	r9, r4, #26
 8008160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008162:	3b01      	subs	r3, #1
 8008164:	4543      	cmp	r3, r8
 8008166:	dc09      	bgt.n	800817c <_printf_float+0x260>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	079b      	lsls	r3, r3, #30
 800816c:	f100 8107 	bmi.w	800837e <_printf_float+0x462>
 8008170:	68e0      	ldr	r0, [r4, #12]
 8008172:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008174:	4298      	cmp	r0, r3
 8008176:	bfb8      	it	lt
 8008178:	4618      	movlt	r0, r3
 800817a:	e730      	b.n	8007fde <_printf_float+0xc2>
 800817c:	2301      	movs	r3, #1
 800817e:	464a      	mov	r2, r9
 8008180:	4631      	mov	r1, r6
 8008182:	4628      	mov	r0, r5
 8008184:	47b8      	blx	r7
 8008186:	3001      	adds	r0, #1
 8008188:	f43f af27 	beq.w	8007fda <_printf_float+0xbe>
 800818c:	f108 0801 	add.w	r8, r8, #1
 8008190:	e7e6      	b.n	8008160 <_printf_float+0x244>
 8008192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	dc39      	bgt.n	800820c <_printf_float+0x2f0>
 8008198:	4a1b      	ldr	r2, [pc, #108]	; (8008208 <_printf_float+0x2ec>)
 800819a:	2301      	movs	r3, #1
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f43f af19 	beq.w	8007fda <_printf_float+0xbe>
 80081a8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80081ac:	4313      	orrs	r3, r2
 80081ae:	d102      	bne.n	80081b6 <_printf_float+0x29a>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	07d9      	lsls	r1, r3, #31
 80081b4:	d5d8      	bpl.n	8008168 <_printf_float+0x24c>
 80081b6:	ee18 3a10 	vmov	r3, s16
 80081ba:	4652      	mov	r2, sl
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f af09 	beq.w	8007fda <_printf_float+0xbe>
 80081c8:	f04f 0900 	mov.w	r9, #0
 80081cc:	f104 0a1a 	add.w	sl, r4, #26
 80081d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081d2:	425b      	negs	r3, r3
 80081d4:	454b      	cmp	r3, r9
 80081d6:	dc01      	bgt.n	80081dc <_printf_float+0x2c0>
 80081d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081da:	e792      	b.n	8008102 <_printf_float+0x1e6>
 80081dc:	2301      	movs	r3, #1
 80081de:	4652      	mov	r2, sl
 80081e0:	4631      	mov	r1, r6
 80081e2:	4628      	mov	r0, r5
 80081e4:	47b8      	blx	r7
 80081e6:	3001      	adds	r0, #1
 80081e8:	f43f aef7 	beq.w	8007fda <_printf_float+0xbe>
 80081ec:	f109 0901 	add.w	r9, r9, #1
 80081f0:	e7ee      	b.n	80081d0 <_printf_float+0x2b4>
 80081f2:	bf00      	nop
 80081f4:	7fefffff 	.word	0x7fefffff
 80081f8:	0800c638 	.word	0x0800c638
 80081fc:	0800c63c 	.word	0x0800c63c
 8008200:	0800c640 	.word	0x0800c640
 8008204:	0800c644 	.word	0x0800c644
 8008208:	0800c648 	.word	0x0800c648
 800820c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800820e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008210:	429a      	cmp	r2, r3
 8008212:	bfa8      	it	ge
 8008214:	461a      	movge	r2, r3
 8008216:	2a00      	cmp	r2, #0
 8008218:	4691      	mov	r9, r2
 800821a:	dc37      	bgt.n	800828c <_printf_float+0x370>
 800821c:	f04f 0b00 	mov.w	fp, #0
 8008220:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008224:	f104 021a 	add.w	r2, r4, #26
 8008228:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800822a:	9305      	str	r3, [sp, #20]
 800822c:	eba3 0309 	sub.w	r3, r3, r9
 8008230:	455b      	cmp	r3, fp
 8008232:	dc33      	bgt.n	800829c <_printf_float+0x380>
 8008234:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008238:	429a      	cmp	r2, r3
 800823a:	db3b      	blt.n	80082b4 <_printf_float+0x398>
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	07da      	lsls	r2, r3, #31
 8008240:	d438      	bmi.n	80082b4 <_printf_float+0x398>
 8008242:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008246:	eba2 0903 	sub.w	r9, r2, r3
 800824a:	9b05      	ldr	r3, [sp, #20]
 800824c:	1ad2      	subs	r2, r2, r3
 800824e:	4591      	cmp	r9, r2
 8008250:	bfa8      	it	ge
 8008252:	4691      	movge	r9, r2
 8008254:	f1b9 0f00 	cmp.w	r9, #0
 8008258:	dc35      	bgt.n	80082c6 <_printf_float+0x3aa>
 800825a:	f04f 0800 	mov.w	r8, #0
 800825e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008262:	f104 0a1a 	add.w	sl, r4, #26
 8008266:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	eba3 0309 	sub.w	r3, r3, r9
 8008270:	4543      	cmp	r3, r8
 8008272:	f77f af79 	ble.w	8008168 <_printf_float+0x24c>
 8008276:	2301      	movs	r3, #1
 8008278:	4652      	mov	r2, sl
 800827a:	4631      	mov	r1, r6
 800827c:	4628      	mov	r0, r5
 800827e:	47b8      	blx	r7
 8008280:	3001      	adds	r0, #1
 8008282:	f43f aeaa 	beq.w	8007fda <_printf_float+0xbe>
 8008286:	f108 0801 	add.w	r8, r8, #1
 800828a:	e7ec      	b.n	8008266 <_printf_float+0x34a>
 800828c:	4613      	mov	r3, r2
 800828e:	4631      	mov	r1, r6
 8008290:	4642      	mov	r2, r8
 8008292:	4628      	mov	r0, r5
 8008294:	47b8      	blx	r7
 8008296:	3001      	adds	r0, #1
 8008298:	d1c0      	bne.n	800821c <_printf_float+0x300>
 800829a:	e69e      	b.n	8007fda <_printf_float+0xbe>
 800829c:	2301      	movs	r3, #1
 800829e:	4631      	mov	r1, r6
 80082a0:	4628      	mov	r0, r5
 80082a2:	9205      	str	r2, [sp, #20]
 80082a4:	47b8      	blx	r7
 80082a6:	3001      	adds	r0, #1
 80082a8:	f43f ae97 	beq.w	8007fda <_printf_float+0xbe>
 80082ac:	9a05      	ldr	r2, [sp, #20]
 80082ae:	f10b 0b01 	add.w	fp, fp, #1
 80082b2:	e7b9      	b.n	8008228 <_printf_float+0x30c>
 80082b4:	ee18 3a10 	vmov	r3, s16
 80082b8:	4652      	mov	r2, sl
 80082ba:	4631      	mov	r1, r6
 80082bc:	4628      	mov	r0, r5
 80082be:	47b8      	blx	r7
 80082c0:	3001      	adds	r0, #1
 80082c2:	d1be      	bne.n	8008242 <_printf_float+0x326>
 80082c4:	e689      	b.n	8007fda <_printf_float+0xbe>
 80082c6:	9a05      	ldr	r2, [sp, #20]
 80082c8:	464b      	mov	r3, r9
 80082ca:	4442      	add	r2, r8
 80082cc:	4631      	mov	r1, r6
 80082ce:	4628      	mov	r0, r5
 80082d0:	47b8      	blx	r7
 80082d2:	3001      	adds	r0, #1
 80082d4:	d1c1      	bne.n	800825a <_printf_float+0x33e>
 80082d6:	e680      	b.n	8007fda <_printf_float+0xbe>
 80082d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082da:	2a01      	cmp	r2, #1
 80082dc:	dc01      	bgt.n	80082e2 <_printf_float+0x3c6>
 80082de:	07db      	lsls	r3, r3, #31
 80082e0:	d53a      	bpl.n	8008358 <_printf_float+0x43c>
 80082e2:	2301      	movs	r3, #1
 80082e4:	4642      	mov	r2, r8
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	f43f ae74 	beq.w	8007fda <_printf_float+0xbe>
 80082f2:	ee18 3a10 	vmov	r3, s16
 80082f6:	4652      	mov	r2, sl
 80082f8:	4631      	mov	r1, r6
 80082fa:	4628      	mov	r0, r5
 80082fc:	47b8      	blx	r7
 80082fe:	3001      	adds	r0, #1
 8008300:	f43f ae6b 	beq.w	8007fda <_printf_float+0xbe>
 8008304:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008308:	2200      	movs	r2, #0
 800830a:	2300      	movs	r3, #0
 800830c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008310:	f7f8 fbfa 	bl	8000b08 <__aeabi_dcmpeq>
 8008314:	b9d8      	cbnz	r0, 800834e <_printf_float+0x432>
 8008316:	f10a 33ff 	add.w	r3, sl, #4294967295
 800831a:	f108 0201 	add.w	r2, r8, #1
 800831e:	4631      	mov	r1, r6
 8008320:	4628      	mov	r0, r5
 8008322:	47b8      	blx	r7
 8008324:	3001      	adds	r0, #1
 8008326:	d10e      	bne.n	8008346 <_printf_float+0x42a>
 8008328:	e657      	b.n	8007fda <_printf_float+0xbe>
 800832a:	2301      	movs	r3, #1
 800832c:	4652      	mov	r2, sl
 800832e:	4631      	mov	r1, r6
 8008330:	4628      	mov	r0, r5
 8008332:	47b8      	blx	r7
 8008334:	3001      	adds	r0, #1
 8008336:	f43f ae50 	beq.w	8007fda <_printf_float+0xbe>
 800833a:	f108 0801 	add.w	r8, r8, #1
 800833e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008340:	3b01      	subs	r3, #1
 8008342:	4543      	cmp	r3, r8
 8008344:	dcf1      	bgt.n	800832a <_printf_float+0x40e>
 8008346:	464b      	mov	r3, r9
 8008348:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800834c:	e6da      	b.n	8008104 <_printf_float+0x1e8>
 800834e:	f04f 0800 	mov.w	r8, #0
 8008352:	f104 0a1a 	add.w	sl, r4, #26
 8008356:	e7f2      	b.n	800833e <_printf_float+0x422>
 8008358:	2301      	movs	r3, #1
 800835a:	4642      	mov	r2, r8
 800835c:	e7df      	b.n	800831e <_printf_float+0x402>
 800835e:	2301      	movs	r3, #1
 8008360:	464a      	mov	r2, r9
 8008362:	4631      	mov	r1, r6
 8008364:	4628      	mov	r0, r5
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	f43f ae36 	beq.w	8007fda <_printf_float+0xbe>
 800836e:	f108 0801 	add.w	r8, r8, #1
 8008372:	68e3      	ldr	r3, [r4, #12]
 8008374:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008376:	1a5b      	subs	r3, r3, r1
 8008378:	4543      	cmp	r3, r8
 800837a:	dcf0      	bgt.n	800835e <_printf_float+0x442>
 800837c:	e6f8      	b.n	8008170 <_printf_float+0x254>
 800837e:	f04f 0800 	mov.w	r8, #0
 8008382:	f104 0919 	add.w	r9, r4, #25
 8008386:	e7f4      	b.n	8008372 <_printf_float+0x456>

08008388 <_printf_common>:
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	4616      	mov	r6, r2
 800838e:	4699      	mov	r9, r3
 8008390:	688a      	ldr	r2, [r1, #8]
 8008392:	690b      	ldr	r3, [r1, #16]
 8008394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008398:	4293      	cmp	r3, r2
 800839a:	bfb8      	it	lt
 800839c:	4613      	movlt	r3, r2
 800839e:	6033      	str	r3, [r6, #0]
 80083a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083a4:	4607      	mov	r7, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	b10a      	cbz	r2, 80083ae <_printf_common+0x26>
 80083aa:	3301      	adds	r3, #1
 80083ac:	6033      	str	r3, [r6, #0]
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	0699      	lsls	r1, r3, #26
 80083b2:	bf42      	ittt	mi
 80083b4:	6833      	ldrmi	r3, [r6, #0]
 80083b6:	3302      	addmi	r3, #2
 80083b8:	6033      	strmi	r3, [r6, #0]
 80083ba:	6825      	ldr	r5, [r4, #0]
 80083bc:	f015 0506 	ands.w	r5, r5, #6
 80083c0:	d106      	bne.n	80083d0 <_printf_common+0x48>
 80083c2:	f104 0a19 	add.w	sl, r4, #25
 80083c6:	68e3      	ldr	r3, [r4, #12]
 80083c8:	6832      	ldr	r2, [r6, #0]
 80083ca:	1a9b      	subs	r3, r3, r2
 80083cc:	42ab      	cmp	r3, r5
 80083ce:	dc26      	bgt.n	800841e <_printf_common+0x96>
 80083d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083d4:	1e13      	subs	r3, r2, #0
 80083d6:	6822      	ldr	r2, [r4, #0]
 80083d8:	bf18      	it	ne
 80083da:	2301      	movne	r3, #1
 80083dc:	0692      	lsls	r2, r2, #26
 80083de:	d42b      	bmi.n	8008438 <_printf_common+0xb0>
 80083e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083e4:	4649      	mov	r1, r9
 80083e6:	4638      	mov	r0, r7
 80083e8:	47c0      	blx	r8
 80083ea:	3001      	adds	r0, #1
 80083ec:	d01e      	beq.n	800842c <_printf_common+0xa4>
 80083ee:	6823      	ldr	r3, [r4, #0]
 80083f0:	6922      	ldr	r2, [r4, #16]
 80083f2:	f003 0306 	and.w	r3, r3, #6
 80083f6:	2b04      	cmp	r3, #4
 80083f8:	bf02      	ittt	eq
 80083fa:	68e5      	ldreq	r5, [r4, #12]
 80083fc:	6833      	ldreq	r3, [r6, #0]
 80083fe:	1aed      	subeq	r5, r5, r3
 8008400:	68a3      	ldr	r3, [r4, #8]
 8008402:	bf0c      	ite	eq
 8008404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008408:	2500      	movne	r5, #0
 800840a:	4293      	cmp	r3, r2
 800840c:	bfc4      	itt	gt
 800840e:	1a9b      	subgt	r3, r3, r2
 8008410:	18ed      	addgt	r5, r5, r3
 8008412:	2600      	movs	r6, #0
 8008414:	341a      	adds	r4, #26
 8008416:	42b5      	cmp	r5, r6
 8008418:	d11a      	bne.n	8008450 <_printf_common+0xc8>
 800841a:	2000      	movs	r0, #0
 800841c:	e008      	b.n	8008430 <_printf_common+0xa8>
 800841e:	2301      	movs	r3, #1
 8008420:	4652      	mov	r2, sl
 8008422:	4649      	mov	r1, r9
 8008424:	4638      	mov	r0, r7
 8008426:	47c0      	blx	r8
 8008428:	3001      	adds	r0, #1
 800842a:	d103      	bne.n	8008434 <_printf_common+0xac>
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008434:	3501      	adds	r5, #1
 8008436:	e7c6      	b.n	80083c6 <_printf_common+0x3e>
 8008438:	18e1      	adds	r1, r4, r3
 800843a:	1c5a      	adds	r2, r3, #1
 800843c:	2030      	movs	r0, #48	; 0x30
 800843e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008442:	4422      	add	r2, r4
 8008444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800844c:	3302      	adds	r3, #2
 800844e:	e7c7      	b.n	80083e0 <_printf_common+0x58>
 8008450:	2301      	movs	r3, #1
 8008452:	4622      	mov	r2, r4
 8008454:	4649      	mov	r1, r9
 8008456:	4638      	mov	r0, r7
 8008458:	47c0      	blx	r8
 800845a:	3001      	adds	r0, #1
 800845c:	d0e6      	beq.n	800842c <_printf_common+0xa4>
 800845e:	3601      	adds	r6, #1
 8008460:	e7d9      	b.n	8008416 <_printf_common+0x8e>
	...

08008464 <_printf_i>:
 8008464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008468:	7e0f      	ldrb	r7, [r1, #24]
 800846a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800846c:	2f78      	cmp	r7, #120	; 0x78
 800846e:	4691      	mov	r9, r2
 8008470:	4680      	mov	r8, r0
 8008472:	460c      	mov	r4, r1
 8008474:	469a      	mov	sl, r3
 8008476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800847a:	d807      	bhi.n	800848c <_printf_i+0x28>
 800847c:	2f62      	cmp	r7, #98	; 0x62
 800847e:	d80a      	bhi.n	8008496 <_printf_i+0x32>
 8008480:	2f00      	cmp	r7, #0
 8008482:	f000 80d4 	beq.w	800862e <_printf_i+0x1ca>
 8008486:	2f58      	cmp	r7, #88	; 0x58
 8008488:	f000 80c0 	beq.w	800860c <_printf_i+0x1a8>
 800848c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008494:	e03a      	b.n	800850c <_printf_i+0xa8>
 8008496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800849a:	2b15      	cmp	r3, #21
 800849c:	d8f6      	bhi.n	800848c <_printf_i+0x28>
 800849e:	a101      	add	r1, pc, #4	; (adr r1, 80084a4 <_printf_i+0x40>)
 80084a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084a4:	080084fd 	.word	0x080084fd
 80084a8:	08008511 	.word	0x08008511
 80084ac:	0800848d 	.word	0x0800848d
 80084b0:	0800848d 	.word	0x0800848d
 80084b4:	0800848d 	.word	0x0800848d
 80084b8:	0800848d 	.word	0x0800848d
 80084bc:	08008511 	.word	0x08008511
 80084c0:	0800848d 	.word	0x0800848d
 80084c4:	0800848d 	.word	0x0800848d
 80084c8:	0800848d 	.word	0x0800848d
 80084cc:	0800848d 	.word	0x0800848d
 80084d0:	08008615 	.word	0x08008615
 80084d4:	0800853d 	.word	0x0800853d
 80084d8:	080085cf 	.word	0x080085cf
 80084dc:	0800848d 	.word	0x0800848d
 80084e0:	0800848d 	.word	0x0800848d
 80084e4:	08008637 	.word	0x08008637
 80084e8:	0800848d 	.word	0x0800848d
 80084ec:	0800853d 	.word	0x0800853d
 80084f0:	0800848d 	.word	0x0800848d
 80084f4:	0800848d 	.word	0x0800848d
 80084f8:	080085d7 	.word	0x080085d7
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	1d1a      	adds	r2, r3, #4
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	602a      	str	r2, [r5, #0]
 8008504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800850c:	2301      	movs	r3, #1
 800850e:	e09f      	b.n	8008650 <_printf_i+0x1ec>
 8008510:	6820      	ldr	r0, [r4, #0]
 8008512:	682b      	ldr	r3, [r5, #0]
 8008514:	0607      	lsls	r7, r0, #24
 8008516:	f103 0104 	add.w	r1, r3, #4
 800851a:	6029      	str	r1, [r5, #0]
 800851c:	d501      	bpl.n	8008522 <_printf_i+0xbe>
 800851e:	681e      	ldr	r6, [r3, #0]
 8008520:	e003      	b.n	800852a <_printf_i+0xc6>
 8008522:	0646      	lsls	r6, r0, #25
 8008524:	d5fb      	bpl.n	800851e <_printf_i+0xba>
 8008526:	f9b3 6000 	ldrsh.w	r6, [r3]
 800852a:	2e00      	cmp	r6, #0
 800852c:	da03      	bge.n	8008536 <_printf_i+0xd2>
 800852e:	232d      	movs	r3, #45	; 0x2d
 8008530:	4276      	negs	r6, r6
 8008532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008536:	485a      	ldr	r0, [pc, #360]	; (80086a0 <_printf_i+0x23c>)
 8008538:	230a      	movs	r3, #10
 800853a:	e012      	b.n	8008562 <_printf_i+0xfe>
 800853c:	682b      	ldr	r3, [r5, #0]
 800853e:	6820      	ldr	r0, [r4, #0]
 8008540:	1d19      	adds	r1, r3, #4
 8008542:	6029      	str	r1, [r5, #0]
 8008544:	0605      	lsls	r5, r0, #24
 8008546:	d501      	bpl.n	800854c <_printf_i+0xe8>
 8008548:	681e      	ldr	r6, [r3, #0]
 800854a:	e002      	b.n	8008552 <_printf_i+0xee>
 800854c:	0641      	lsls	r1, r0, #25
 800854e:	d5fb      	bpl.n	8008548 <_printf_i+0xe4>
 8008550:	881e      	ldrh	r6, [r3, #0]
 8008552:	4853      	ldr	r0, [pc, #332]	; (80086a0 <_printf_i+0x23c>)
 8008554:	2f6f      	cmp	r7, #111	; 0x6f
 8008556:	bf0c      	ite	eq
 8008558:	2308      	moveq	r3, #8
 800855a:	230a      	movne	r3, #10
 800855c:	2100      	movs	r1, #0
 800855e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008562:	6865      	ldr	r5, [r4, #4]
 8008564:	60a5      	str	r5, [r4, #8]
 8008566:	2d00      	cmp	r5, #0
 8008568:	bfa2      	ittt	ge
 800856a:	6821      	ldrge	r1, [r4, #0]
 800856c:	f021 0104 	bicge.w	r1, r1, #4
 8008570:	6021      	strge	r1, [r4, #0]
 8008572:	b90e      	cbnz	r6, 8008578 <_printf_i+0x114>
 8008574:	2d00      	cmp	r5, #0
 8008576:	d04b      	beq.n	8008610 <_printf_i+0x1ac>
 8008578:	4615      	mov	r5, r2
 800857a:	fbb6 f1f3 	udiv	r1, r6, r3
 800857e:	fb03 6711 	mls	r7, r3, r1, r6
 8008582:	5dc7      	ldrb	r7, [r0, r7]
 8008584:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008588:	4637      	mov	r7, r6
 800858a:	42bb      	cmp	r3, r7
 800858c:	460e      	mov	r6, r1
 800858e:	d9f4      	bls.n	800857a <_printf_i+0x116>
 8008590:	2b08      	cmp	r3, #8
 8008592:	d10b      	bne.n	80085ac <_printf_i+0x148>
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	07de      	lsls	r6, r3, #31
 8008598:	d508      	bpl.n	80085ac <_printf_i+0x148>
 800859a:	6923      	ldr	r3, [r4, #16]
 800859c:	6861      	ldr	r1, [r4, #4]
 800859e:	4299      	cmp	r1, r3
 80085a0:	bfde      	ittt	le
 80085a2:	2330      	movle	r3, #48	; 0x30
 80085a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085ac:	1b52      	subs	r2, r2, r5
 80085ae:	6122      	str	r2, [r4, #16]
 80085b0:	f8cd a000 	str.w	sl, [sp]
 80085b4:	464b      	mov	r3, r9
 80085b6:	aa03      	add	r2, sp, #12
 80085b8:	4621      	mov	r1, r4
 80085ba:	4640      	mov	r0, r8
 80085bc:	f7ff fee4 	bl	8008388 <_printf_common>
 80085c0:	3001      	adds	r0, #1
 80085c2:	d14a      	bne.n	800865a <_printf_i+0x1f6>
 80085c4:	f04f 30ff 	mov.w	r0, #4294967295
 80085c8:	b004      	add	sp, #16
 80085ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	f043 0320 	orr.w	r3, r3, #32
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	4833      	ldr	r0, [pc, #204]	; (80086a4 <_printf_i+0x240>)
 80085d8:	2778      	movs	r7, #120	; 0x78
 80085da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	6829      	ldr	r1, [r5, #0]
 80085e2:	061f      	lsls	r7, r3, #24
 80085e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80085e8:	d402      	bmi.n	80085f0 <_printf_i+0x18c>
 80085ea:	065f      	lsls	r7, r3, #25
 80085ec:	bf48      	it	mi
 80085ee:	b2b6      	uxthmi	r6, r6
 80085f0:	07df      	lsls	r7, r3, #31
 80085f2:	bf48      	it	mi
 80085f4:	f043 0320 	orrmi.w	r3, r3, #32
 80085f8:	6029      	str	r1, [r5, #0]
 80085fa:	bf48      	it	mi
 80085fc:	6023      	strmi	r3, [r4, #0]
 80085fe:	b91e      	cbnz	r6, 8008608 <_printf_i+0x1a4>
 8008600:	6823      	ldr	r3, [r4, #0]
 8008602:	f023 0320 	bic.w	r3, r3, #32
 8008606:	6023      	str	r3, [r4, #0]
 8008608:	2310      	movs	r3, #16
 800860a:	e7a7      	b.n	800855c <_printf_i+0xf8>
 800860c:	4824      	ldr	r0, [pc, #144]	; (80086a0 <_printf_i+0x23c>)
 800860e:	e7e4      	b.n	80085da <_printf_i+0x176>
 8008610:	4615      	mov	r5, r2
 8008612:	e7bd      	b.n	8008590 <_printf_i+0x12c>
 8008614:	682b      	ldr	r3, [r5, #0]
 8008616:	6826      	ldr	r6, [r4, #0]
 8008618:	6961      	ldr	r1, [r4, #20]
 800861a:	1d18      	adds	r0, r3, #4
 800861c:	6028      	str	r0, [r5, #0]
 800861e:	0635      	lsls	r5, r6, #24
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	d501      	bpl.n	8008628 <_printf_i+0x1c4>
 8008624:	6019      	str	r1, [r3, #0]
 8008626:	e002      	b.n	800862e <_printf_i+0x1ca>
 8008628:	0670      	lsls	r0, r6, #25
 800862a:	d5fb      	bpl.n	8008624 <_printf_i+0x1c0>
 800862c:	8019      	strh	r1, [r3, #0]
 800862e:	2300      	movs	r3, #0
 8008630:	6123      	str	r3, [r4, #16]
 8008632:	4615      	mov	r5, r2
 8008634:	e7bc      	b.n	80085b0 <_printf_i+0x14c>
 8008636:	682b      	ldr	r3, [r5, #0]
 8008638:	1d1a      	adds	r2, r3, #4
 800863a:	602a      	str	r2, [r5, #0]
 800863c:	681d      	ldr	r5, [r3, #0]
 800863e:	6862      	ldr	r2, [r4, #4]
 8008640:	2100      	movs	r1, #0
 8008642:	4628      	mov	r0, r5
 8008644:	f7f7 fde4 	bl	8000210 <memchr>
 8008648:	b108      	cbz	r0, 800864e <_printf_i+0x1ea>
 800864a:	1b40      	subs	r0, r0, r5
 800864c:	6060      	str	r0, [r4, #4]
 800864e:	6863      	ldr	r3, [r4, #4]
 8008650:	6123      	str	r3, [r4, #16]
 8008652:	2300      	movs	r3, #0
 8008654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008658:	e7aa      	b.n	80085b0 <_printf_i+0x14c>
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	462a      	mov	r2, r5
 800865e:	4649      	mov	r1, r9
 8008660:	4640      	mov	r0, r8
 8008662:	47d0      	blx	sl
 8008664:	3001      	adds	r0, #1
 8008666:	d0ad      	beq.n	80085c4 <_printf_i+0x160>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	079b      	lsls	r3, r3, #30
 800866c:	d413      	bmi.n	8008696 <_printf_i+0x232>
 800866e:	68e0      	ldr	r0, [r4, #12]
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	4298      	cmp	r0, r3
 8008674:	bfb8      	it	lt
 8008676:	4618      	movlt	r0, r3
 8008678:	e7a6      	b.n	80085c8 <_printf_i+0x164>
 800867a:	2301      	movs	r3, #1
 800867c:	4632      	mov	r2, r6
 800867e:	4649      	mov	r1, r9
 8008680:	4640      	mov	r0, r8
 8008682:	47d0      	blx	sl
 8008684:	3001      	adds	r0, #1
 8008686:	d09d      	beq.n	80085c4 <_printf_i+0x160>
 8008688:	3501      	adds	r5, #1
 800868a:	68e3      	ldr	r3, [r4, #12]
 800868c:	9903      	ldr	r1, [sp, #12]
 800868e:	1a5b      	subs	r3, r3, r1
 8008690:	42ab      	cmp	r3, r5
 8008692:	dcf2      	bgt.n	800867a <_printf_i+0x216>
 8008694:	e7eb      	b.n	800866e <_printf_i+0x20a>
 8008696:	2500      	movs	r5, #0
 8008698:	f104 0619 	add.w	r6, r4, #25
 800869c:	e7f5      	b.n	800868a <_printf_i+0x226>
 800869e:	bf00      	nop
 80086a0:	0800c64a 	.word	0x0800c64a
 80086a4:	0800c65b 	.word	0x0800c65b

080086a8 <_scanf_float>:
 80086a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ac:	b087      	sub	sp, #28
 80086ae:	4617      	mov	r7, r2
 80086b0:	9303      	str	r3, [sp, #12]
 80086b2:	688b      	ldr	r3, [r1, #8]
 80086b4:	1e5a      	subs	r2, r3, #1
 80086b6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80086ba:	bf83      	ittte	hi
 80086bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80086c0:	195b      	addhi	r3, r3, r5
 80086c2:	9302      	strhi	r3, [sp, #8]
 80086c4:	2300      	movls	r3, #0
 80086c6:	bf86      	itte	hi
 80086c8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80086cc:	608b      	strhi	r3, [r1, #8]
 80086ce:	9302      	strls	r3, [sp, #8]
 80086d0:	680b      	ldr	r3, [r1, #0]
 80086d2:	468b      	mov	fp, r1
 80086d4:	2500      	movs	r5, #0
 80086d6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80086da:	f84b 3b1c 	str.w	r3, [fp], #28
 80086de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80086e2:	4680      	mov	r8, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	465e      	mov	r6, fp
 80086e8:	46aa      	mov	sl, r5
 80086ea:	46a9      	mov	r9, r5
 80086ec:	9501      	str	r5, [sp, #4]
 80086ee:	68a2      	ldr	r2, [r4, #8]
 80086f0:	b152      	cbz	r2, 8008708 <_scanf_float+0x60>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b4e      	cmp	r3, #78	; 0x4e
 80086f8:	d864      	bhi.n	80087c4 <_scanf_float+0x11c>
 80086fa:	2b40      	cmp	r3, #64	; 0x40
 80086fc:	d83c      	bhi.n	8008778 <_scanf_float+0xd0>
 80086fe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008702:	b2c8      	uxtb	r0, r1
 8008704:	280e      	cmp	r0, #14
 8008706:	d93a      	bls.n	800877e <_scanf_float+0xd6>
 8008708:	f1b9 0f00 	cmp.w	r9, #0
 800870c:	d003      	beq.n	8008716 <_scanf_float+0x6e>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008714:	6023      	str	r3, [r4, #0]
 8008716:	f10a 3aff 	add.w	sl, sl, #4294967295
 800871a:	f1ba 0f01 	cmp.w	sl, #1
 800871e:	f200 8113 	bhi.w	8008948 <_scanf_float+0x2a0>
 8008722:	455e      	cmp	r6, fp
 8008724:	f200 8105 	bhi.w	8008932 <_scanf_float+0x28a>
 8008728:	2501      	movs	r5, #1
 800872a:	4628      	mov	r0, r5
 800872c:	b007      	add	sp, #28
 800872e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008732:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008736:	2a0d      	cmp	r2, #13
 8008738:	d8e6      	bhi.n	8008708 <_scanf_float+0x60>
 800873a:	a101      	add	r1, pc, #4	; (adr r1, 8008740 <_scanf_float+0x98>)
 800873c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008740:	0800887f 	.word	0x0800887f
 8008744:	08008709 	.word	0x08008709
 8008748:	08008709 	.word	0x08008709
 800874c:	08008709 	.word	0x08008709
 8008750:	080088df 	.word	0x080088df
 8008754:	080088b7 	.word	0x080088b7
 8008758:	08008709 	.word	0x08008709
 800875c:	08008709 	.word	0x08008709
 8008760:	0800888d 	.word	0x0800888d
 8008764:	08008709 	.word	0x08008709
 8008768:	08008709 	.word	0x08008709
 800876c:	08008709 	.word	0x08008709
 8008770:	08008709 	.word	0x08008709
 8008774:	08008845 	.word	0x08008845
 8008778:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800877c:	e7db      	b.n	8008736 <_scanf_float+0x8e>
 800877e:	290e      	cmp	r1, #14
 8008780:	d8c2      	bhi.n	8008708 <_scanf_float+0x60>
 8008782:	a001      	add	r0, pc, #4	; (adr r0, 8008788 <_scanf_float+0xe0>)
 8008784:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008788:	08008837 	.word	0x08008837
 800878c:	08008709 	.word	0x08008709
 8008790:	08008837 	.word	0x08008837
 8008794:	080088cb 	.word	0x080088cb
 8008798:	08008709 	.word	0x08008709
 800879c:	080087e5 	.word	0x080087e5
 80087a0:	08008821 	.word	0x08008821
 80087a4:	08008821 	.word	0x08008821
 80087a8:	08008821 	.word	0x08008821
 80087ac:	08008821 	.word	0x08008821
 80087b0:	08008821 	.word	0x08008821
 80087b4:	08008821 	.word	0x08008821
 80087b8:	08008821 	.word	0x08008821
 80087bc:	08008821 	.word	0x08008821
 80087c0:	08008821 	.word	0x08008821
 80087c4:	2b6e      	cmp	r3, #110	; 0x6e
 80087c6:	d809      	bhi.n	80087dc <_scanf_float+0x134>
 80087c8:	2b60      	cmp	r3, #96	; 0x60
 80087ca:	d8b2      	bhi.n	8008732 <_scanf_float+0x8a>
 80087cc:	2b54      	cmp	r3, #84	; 0x54
 80087ce:	d077      	beq.n	80088c0 <_scanf_float+0x218>
 80087d0:	2b59      	cmp	r3, #89	; 0x59
 80087d2:	d199      	bne.n	8008708 <_scanf_float+0x60>
 80087d4:	2d07      	cmp	r5, #7
 80087d6:	d197      	bne.n	8008708 <_scanf_float+0x60>
 80087d8:	2508      	movs	r5, #8
 80087da:	e029      	b.n	8008830 <_scanf_float+0x188>
 80087dc:	2b74      	cmp	r3, #116	; 0x74
 80087de:	d06f      	beq.n	80088c0 <_scanf_float+0x218>
 80087e0:	2b79      	cmp	r3, #121	; 0x79
 80087e2:	e7f6      	b.n	80087d2 <_scanf_float+0x12a>
 80087e4:	6821      	ldr	r1, [r4, #0]
 80087e6:	05c8      	lsls	r0, r1, #23
 80087e8:	d51a      	bpl.n	8008820 <_scanf_float+0x178>
 80087ea:	9b02      	ldr	r3, [sp, #8]
 80087ec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80087f0:	6021      	str	r1, [r4, #0]
 80087f2:	f109 0901 	add.w	r9, r9, #1
 80087f6:	b11b      	cbz	r3, 8008800 <_scanf_float+0x158>
 80087f8:	3b01      	subs	r3, #1
 80087fa:	3201      	adds	r2, #1
 80087fc:	9302      	str	r3, [sp, #8]
 80087fe:	60a2      	str	r2, [r4, #8]
 8008800:	68a3      	ldr	r3, [r4, #8]
 8008802:	3b01      	subs	r3, #1
 8008804:	60a3      	str	r3, [r4, #8]
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	3301      	adds	r3, #1
 800880a:	6123      	str	r3, [r4, #16]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	3b01      	subs	r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	607b      	str	r3, [r7, #4]
 8008814:	f340 8084 	ble.w	8008920 <_scanf_float+0x278>
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	3301      	adds	r3, #1
 800881c:	603b      	str	r3, [r7, #0]
 800881e:	e766      	b.n	80086ee <_scanf_float+0x46>
 8008820:	eb1a 0f05 	cmn.w	sl, r5
 8008824:	f47f af70 	bne.w	8008708 <_scanf_float+0x60>
 8008828:	6822      	ldr	r2, [r4, #0]
 800882a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800882e:	6022      	str	r2, [r4, #0]
 8008830:	f806 3b01 	strb.w	r3, [r6], #1
 8008834:	e7e4      	b.n	8008800 <_scanf_float+0x158>
 8008836:	6822      	ldr	r2, [r4, #0]
 8008838:	0610      	lsls	r0, r2, #24
 800883a:	f57f af65 	bpl.w	8008708 <_scanf_float+0x60>
 800883e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008842:	e7f4      	b.n	800882e <_scanf_float+0x186>
 8008844:	f1ba 0f00 	cmp.w	sl, #0
 8008848:	d10e      	bne.n	8008868 <_scanf_float+0x1c0>
 800884a:	f1b9 0f00 	cmp.w	r9, #0
 800884e:	d10e      	bne.n	800886e <_scanf_float+0x1c6>
 8008850:	6822      	ldr	r2, [r4, #0]
 8008852:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008856:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800885a:	d108      	bne.n	800886e <_scanf_float+0x1c6>
 800885c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008860:	6022      	str	r2, [r4, #0]
 8008862:	f04f 0a01 	mov.w	sl, #1
 8008866:	e7e3      	b.n	8008830 <_scanf_float+0x188>
 8008868:	f1ba 0f02 	cmp.w	sl, #2
 800886c:	d055      	beq.n	800891a <_scanf_float+0x272>
 800886e:	2d01      	cmp	r5, #1
 8008870:	d002      	beq.n	8008878 <_scanf_float+0x1d0>
 8008872:	2d04      	cmp	r5, #4
 8008874:	f47f af48 	bne.w	8008708 <_scanf_float+0x60>
 8008878:	3501      	adds	r5, #1
 800887a:	b2ed      	uxtb	r5, r5
 800887c:	e7d8      	b.n	8008830 <_scanf_float+0x188>
 800887e:	f1ba 0f01 	cmp.w	sl, #1
 8008882:	f47f af41 	bne.w	8008708 <_scanf_float+0x60>
 8008886:	f04f 0a02 	mov.w	sl, #2
 800888a:	e7d1      	b.n	8008830 <_scanf_float+0x188>
 800888c:	b97d      	cbnz	r5, 80088ae <_scanf_float+0x206>
 800888e:	f1b9 0f00 	cmp.w	r9, #0
 8008892:	f47f af3c 	bne.w	800870e <_scanf_float+0x66>
 8008896:	6822      	ldr	r2, [r4, #0]
 8008898:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800889c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80088a0:	f47f af39 	bne.w	8008716 <_scanf_float+0x6e>
 80088a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80088a8:	6022      	str	r2, [r4, #0]
 80088aa:	2501      	movs	r5, #1
 80088ac:	e7c0      	b.n	8008830 <_scanf_float+0x188>
 80088ae:	2d03      	cmp	r5, #3
 80088b0:	d0e2      	beq.n	8008878 <_scanf_float+0x1d0>
 80088b2:	2d05      	cmp	r5, #5
 80088b4:	e7de      	b.n	8008874 <_scanf_float+0x1cc>
 80088b6:	2d02      	cmp	r5, #2
 80088b8:	f47f af26 	bne.w	8008708 <_scanf_float+0x60>
 80088bc:	2503      	movs	r5, #3
 80088be:	e7b7      	b.n	8008830 <_scanf_float+0x188>
 80088c0:	2d06      	cmp	r5, #6
 80088c2:	f47f af21 	bne.w	8008708 <_scanf_float+0x60>
 80088c6:	2507      	movs	r5, #7
 80088c8:	e7b2      	b.n	8008830 <_scanf_float+0x188>
 80088ca:	6822      	ldr	r2, [r4, #0]
 80088cc:	0591      	lsls	r1, r2, #22
 80088ce:	f57f af1b 	bpl.w	8008708 <_scanf_float+0x60>
 80088d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80088d6:	6022      	str	r2, [r4, #0]
 80088d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80088dc:	e7a8      	b.n	8008830 <_scanf_float+0x188>
 80088de:	6822      	ldr	r2, [r4, #0]
 80088e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80088e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80088e8:	d006      	beq.n	80088f8 <_scanf_float+0x250>
 80088ea:	0550      	lsls	r0, r2, #21
 80088ec:	f57f af0c 	bpl.w	8008708 <_scanf_float+0x60>
 80088f0:	f1b9 0f00 	cmp.w	r9, #0
 80088f4:	f43f af0f 	beq.w	8008716 <_scanf_float+0x6e>
 80088f8:	0591      	lsls	r1, r2, #22
 80088fa:	bf58      	it	pl
 80088fc:	9901      	ldrpl	r1, [sp, #4]
 80088fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008902:	bf58      	it	pl
 8008904:	eba9 0101 	subpl.w	r1, r9, r1
 8008908:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800890c:	bf58      	it	pl
 800890e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008912:	6022      	str	r2, [r4, #0]
 8008914:	f04f 0900 	mov.w	r9, #0
 8008918:	e78a      	b.n	8008830 <_scanf_float+0x188>
 800891a:	f04f 0a03 	mov.w	sl, #3
 800891e:	e787      	b.n	8008830 <_scanf_float+0x188>
 8008920:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008924:	4639      	mov	r1, r7
 8008926:	4640      	mov	r0, r8
 8008928:	4798      	blx	r3
 800892a:	2800      	cmp	r0, #0
 800892c:	f43f aedf 	beq.w	80086ee <_scanf_float+0x46>
 8008930:	e6ea      	b.n	8008708 <_scanf_float+0x60>
 8008932:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008936:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800893a:	463a      	mov	r2, r7
 800893c:	4640      	mov	r0, r8
 800893e:	4798      	blx	r3
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	3b01      	subs	r3, #1
 8008944:	6123      	str	r3, [r4, #16]
 8008946:	e6ec      	b.n	8008722 <_scanf_float+0x7a>
 8008948:	1e6b      	subs	r3, r5, #1
 800894a:	2b06      	cmp	r3, #6
 800894c:	d825      	bhi.n	800899a <_scanf_float+0x2f2>
 800894e:	2d02      	cmp	r5, #2
 8008950:	d836      	bhi.n	80089c0 <_scanf_float+0x318>
 8008952:	455e      	cmp	r6, fp
 8008954:	f67f aee8 	bls.w	8008728 <_scanf_float+0x80>
 8008958:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800895c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008960:	463a      	mov	r2, r7
 8008962:	4640      	mov	r0, r8
 8008964:	4798      	blx	r3
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	3b01      	subs	r3, #1
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	e7f1      	b.n	8008952 <_scanf_float+0x2aa>
 800896e:	9802      	ldr	r0, [sp, #8]
 8008970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008974:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008978:	9002      	str	r0, [sp, #8]
 800897a:	463a      	mov	r2, r7
 800897c:	4640      	mov	r0, r8
 800897e:	4798      	blx	r3
 8008980:	6923      	ldr	r3, [r4, #16]
 8008982:	3b01      	subs	r3, #1
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	f10a 3aff 	add.w	sl, sl, #4294967295
 800898a:	fa5f fa8a 	uxtb.w	sl, sl
 800898e:	f1ba 0f02 	cmp.w	sl, #2
 8008992:	d1ec      	bne.n	800896e <_scanf_float+0x2c6>
 8008994:	3d03      	subs	r5, #3
 8008996:	b2ed      	uxtb	r5, r5
 8008998:	1b76      	subs	r6, r6, r5
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	05da      	lsls	r2, r3, #23
 800899e:	d52f      	bpl.n	8008a00 <_scanf_float+0x358>
 80089a0:	055b      	lsls	r3, r3, #21
 80089a2:	d510      	bpl.n	80089c6 <_scanf_float+0x31e>
 80089a4:	455e      	cmp	r6, fp
 80089a6:	f67f aebf 	bls.w	8008728 <_scanf_float+0x80>
 80089aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089b2:	463a      	mov	r2, r7
 80089b4:	4640      	mov	r0, r8
 80089b6:	4798      	blx	r3
 80089b8:	6923      	ldr	r3, [r4, #16]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	6123      	str	r3, [r4, #16]
 80089be:	e7f1      	b.n	80089a4 <_scanf_float+0x2fc>
 80089c0:	46aa      	mov	sl, r5
 80089c2:	9602      	str	r6, [sp, #8]
 80089c4:	e7df      	b.n	8008986 <_scanf_float+0x2de>
 80089c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	2965      	cmp	r1, #101	; 0x65
 80089ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80089d2:	f106 35ff 	add.w	r5, r6, #4294967295
 80089d6:	6123      	str	r3, [r4, #16]
 80089d8:	d00c      	beq.n	80089f4 <_scanf_float+0x34c>
 80089da:	2945      	cmp	r1, #69	; 0x45
 80089dc:	d00a      	beq.n	80089f4 <_scanf_float+0x34c>
 80089de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089e2:	463a      	mov	r2, r7
 80089e4:	4640      	mov	r0, r8
 80089e6:	4798      	blx	r3
 80089e8:	6923      	ldr	r3, [r4, #16]
 80089ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	1eb5      	subs	r5, r6, #2
 80089f2:	6123      	str	r3, [r4, #16]
 80089f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089f8:	463a      	mov	r2, r7
 80089fa:	4640      	mov	r0, r8
 80089fc:	4798      	blx	r3
 80089fe:	462e      	mov	r6, r5
 8008a00:	6825      	ldr	r5, [r4, #0]
 8008a02:	f015 0510 	ands.w	r5, r5, #16
 8008a06:	d158      	bne.n	8008aba <_scanf_float+0x412>
 8008a08:	7035      	strb	r5, [r6, #0]
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a14:	d11c      	bne.n	8008a50 <_scanf_float+0x3a8>
 8008a16:	9b01      	ldr	r3, [sp, #4]
 8008a18:	454b      	cmp	r3, r9
 8008a1a:	eba3 0209 	sub.w	r2, r3, r9
 8008a1e:	d124      	bne.n	8008a6a <_scanf_float+0x3c2>
 8008a20:	2200      	movs	r2, #0
 8008a22:	4659      	mov	r1, fp
 8008a24:	4640      	mov	r0, r8
 8008a26:	f002 fc2f 	bl	800b288 <_strtod_r>
 8008a2a:	9b03      	ldr	r3, [sp, #12]
 8008a2c:	6821      	ldr	r1, [r4, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f011 0f02 	tst.w	r1, #2
 8008a34:	ec57 6b10 	vmov	r6, r7, d0
 8008a38:	f103 0204 	add.w	r2, r3, #4
 8008a3c:	d020      	beq.n	8008a80 <_scanf_float+0x3d8>
 8008a3e:	9903      	ldr	r1, [sp, #12]
 8008a40:	600a      	str	r2, [r1, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	e9c3 6700 	strd	r6, r7, [r3]
 8008a48:	68e3      	ldr	r3, [r4, #12]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60e3      	str	r3, [r4, #12]
 8008a4e:	e66c      	b.n	800872a <_scanf_float+0x82>
 8008a50:	9b04      	ldr	r3, [sp, #16]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0e4      	beq.n	8008a20 <_scanf_float+0x378>
 8008a56:	9905      	ldr	r1, [sp, #20]
 8008a58:	230a      	movs	r3, #10
 8008a5a:	462a      	mov	r2, r5
 8008a5c:	3101      	adds	r1, #1
 8008a5e:	4640      	mov	r0, r8
 8008a60:	f002 fc9a 	bl	800b398 <_strtol_r>
 8008a64:	9b04      	ldr	r3, [sp, #16]
 8008a66:	9e05      	ldr	r6, [sp, #20]
 8008a68:	1ac2      	subs	r2, r0, r3
 8008a6a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008a6e:	429e      	cmp	r6, r3
 8008a70:	bf28      	it	cs
 8008a72:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008a76:	4912      	ldr	r1, [pc, #72]	; (8008ac0 <_scanf_float+0x418>)
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 f8e7 	bl	8008c4c <siprintf>
 8008a7e:	e7cf      	b.n	8008a20 <_scanf_float+0x378>
 8008a80:	f011 0f04 	tst.w	r1, #4
 8008a84:	9903      	ldr	r1, [sp, #12]
 8008a86:	600a      	str	r2, [r1, #0]
 8008a88:	d1db      	bne.n	8008a42 <_scanf_float+0x39a>
 8008a8a:	f8d3 8000 	ldr.w	r8, [r3]
 8008a8e:	ee10 2a10 	vmov	r2, s0
 8008a92:	ee10 0a10 	vmov	r0, s0
 8008a96:	463b      	mov	r3, r7
 8008a98:	4639      	mov	r1, r7
 8008a9a:	f7f8 f867 	bl	8000b6c <__aeabi_dcmpun>
 8008a9e:	b128      	cbz	r0, 8008aac <_scanf_float+0x404>
 8008aa0:	4808      	ldr	r0, [pc, #32]	; (8008ac4 <_scanf_float+0x41c>)
 8008aa2:	f000 f9b7 	bl	8008e14 <nanf>
 8008aa6:	ed88 0a00 	vstr	s0, [r8]
 8008aaa:	e7cd      	b.n	8008a48 <_scanf_float+0x3a0>
 8008aac:	4630      	mov	r0, r6
 8008aae:	4639      	mov	r1, r7
 8008ab0:	f7f8 f8ba 	bl	8000c28 <__aeabi_d2f>
 8008ab4:	f8c8 0000 	str.w	r0, [r8]
 8008ab8:	e7c6      	b.n	8008a48 <_scanf_float+0x3a0>
 8008aba:	2500      	movs	r5, #0
 8008abc:	e635      	b.n	800872a <_scanf_float+0x82>
 8008abe:	bf00      	nop
 8008ac0:	0800c66c 	.word	0x0800c66c
 8008ac4:	0800c9fd 	.word	0x0800c9fd

08008ac8 <std>:
 8008ac8:	2300      	movs	r3, #0
 8008aca:	b510      	push	{r4, lr}
 8008acc:	4604      	mov	r4, r0
 8008ace:	e9c0 3300 	strd	r3, r3, [r0]
 8008ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ad6:	6083      	str	r3, [r0, #8]
 8008ad8:	8181      	strh	r1, [r0, #12]
 8008ada:	6643      	str	r3, [r0, #100]	; 0x64
 8008adc:	81c2      	strh	r2, [r0, #14]
 8008ade:	6183      	str	r3, [r0, #24]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	2208      	movs	r2, #8
 8008ae4:	305c      	adds	r0, #92	; 0x5c
 8008ae6:	f000 f914 	bl	8008d12 <memset>
 8008aea:	4b0d      	ldr	r3, [pc, #52]	; (8008b20 <std+0x58>)
 8008aec:	6263      	str	r3, [r4, #36]	; 0x24
 8008aee:	4b0d      	ldr	r3, [pc, #52]	; (8008b24 <std+0x5c>)
 8008af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008af2:	4b0d      	ldr	r3, [pc, #52]	; (8008b28 <std+0x60>)
 8008af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008af6:	4b0d      	ldr	r3, [pc, #52]	; (8008b2c <std+0x64>)
 8008af8:	6323      	str	r3, [r4, #48]	; 0x30
 8008afa:	4b0d      	ldr	r3, [pc, #52]	; (8008b30 <std+0x68>)
 8008afc:	6224      	str	r4, [r4, #32]
 8008afe:	429c      	cmp	r4, r3
 8008b00:	d006      	beq.n	8008b10 <std+0x48>
 8008b02:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008b06:	4294      	cmp	r4, r2
 8008b08:	d002      	beq.n	8008b10 <std+0x48>
 8008b0a:	33d0      	adds	r3, #208	; 0xd0
 8008b0c:	429c      	cmp	r4, r3
 8008b0e:	d105      	bne.n	8008b1c <std+0x54>
 8008b10:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b18:	f000 b978 	b.w	8008e0c <__retarget_lock_init_recursive>
 8008b1c:	bd10      	pop	{r4, pc}
 8008b1e:	bf00      	nop
 8008b20:	08008c8d 	.word	0x08008c8d
 8008b24:	08008caf 	.word	0x08008caf
 8008b28:	08008ce7 	.word	0x08008ce7
 8008b2c:	08008d0b 	.word	0x08008d0b
 8008b30:	20000698 	.word	0x20000698

08008b34 <stdio_exit_handler>:
 8008b34:	4a02      	ldr	r2, [pc, #8]	; (8008b40 <stdio_exit_handler+0xc>)
 8008b36:	4903      	ldr	r1, [pc, #12]	; (8008b44 <stdio_exit_handler+0x10>)
 8008b38:	4803      	ldr	r0, [pc, #12]	; (8008b48 <stdio_exit_handler+0x14>)
 8008b3a:	f000 b869 	b.w	8008c10 <_fwalk_sglue>
 8008b3e:	bf00      	nop
 8008b40:	20000020 	.word	0x20000020
 8008b44:	0800b759 	.word	0x0800b759
 8008b48:	2000002c 	.word	0x2000002c

08008b4c <cleanup_stdio>:
 8008b4c:	6841      	ldr	r1, [r0, #4]
 8008b4e:	4b0c      	ldr	r3, [pc, #48]	; (8008b80 <cleanup_stdio+0x34>)
 8008b50:	4299      	cmp	r1, r3
 8008b52:	b510      	push	{r4, lr}
 8008b54:	4604      	mov	r4, r0
 8008b56:	d001      	beq.n	8008b5c <cleanup_stdio+0x10>
 8008b58:	f002 fdfe 	bl	800b758 <_fflush_r>
 8008b5c:	68a1      	ldr	r1, [r4, #8]
 8008b5e:	4b09      	ldr	r3, [pc, #36]	; (8008b84 <cleanup_stdio+0x38>)
 8008b60:	4299      	cmp	r1, r3
 8008b62:	d002      	beq.n	8008b6a <cleanup_stdio+0x1e>
 8008b64:	4620      	mov	r0, r4
 8008b66:	f002 fdf7 	bl	800b758 <_fflush_r>
 8008b6a:	68e1      	ldr	r1, [r4, #12]
 8008b6c:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <cleanup_stdio+0x3c>)
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	d004      	beq.n	8008b7c <cleanup_stdio+0x30>
 8008b72:	4620      	mov	r0, r4
 8008b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b78:	f002 bdee 	b.w	800b758 <_fflush_r>
 8008b7c:	bd10      	pop	{r4, pc}
 8008b7e:	bf00      	nop
 8008b80:	20000698 	.word	0x20000698
 8008b84:	20000700 	.word	0x20000700
 8008b88:	20000768 	.word	0x20000768

08008b8c <global_stdio_init.part.0>:
 8008b8c:	b510      	push	{r4, lr}
 8008b8e:	4b0b      	ldr	r3, [pc, #44]	; (8008bbc <global_stdio_init.part.0+0x30>)
 8008b90:	4c0b      	ldr	r4, [pc, #44]	; (8008bc0 <global_stdio_init.part.0+0x34>)
 8008b92:	4a0c      	ldr	r2, [pc, #48]	; (8008bc4 <global_stdio_init.part.0+0x38>)
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	4620      	mov	r0, r4
 8008b98:	2200      	movs	r2, #0
 8008b9a:	2104      	movs	r1, #4
 8008b9c:	f7ff ff94 	bl	8008ac8 <std>
 8008ba0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	2109      	movs	r1, #9
 8008ba8:	f7ff ff8e 	bl	8008ac8 <std>
 8008bac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bb6:	2112      	movs	r1, #18
 8008bb8:	f7ff bf86 	b.w	8008ac8 <std>
 8008bbc:	200007d0 	.word	0x200007d0
 8008bc0:	20000698 	.word	0x20000698
 8008bc4:	08008b35 	.word	0x08008b35

08008bc8 <__sfp_lock_acquire>:
 8008bc8:	4801      	ldr	r0, [pc, #4]	; (8008bd0 <__sfp_lock_acquire+0x8>)
 8008bca:	f000 b920 	b.w	8008e0e <__retarget_lock_acquire_recursive>
 8008bce:	bf00      	nop
 8008bd0:	200007d9 	.word	0x200007d9

08008bd4 <__sfp_lock_release>:
 8008bd4:	4801      	ldr	r0, [pc, #4]	; (8008bdc <__sfp_lock_release+0x8>)
 8008bd6:	f000 b91b 	b.w	8008e10 <__retarget_lock_release_recursive>
 8008bda:	bf00      	nop
 8008bdc:	200007d9 	.word	0x200007d9

08008be0 <__sinit>:
 8008be0:	b510      	push	{r4, lr}
 8008be2:	4604      	mov	r4, r0
 8008be4:	f7ff fff0 	bl	8008bc8 <__sfp_lock_acquire>
 8008be8:	6a23      	ldr	r3, [r4, #32]
 8008bea:	b11b      	cbz	r3, 8008bf4 <__sinit+0x14>
 8008bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bf0:	f7ff bff0 	b.w	8008bd4 <__sfp_lock_release>
 8008bf4:	4b04      	ldr	r3, [pc, #16]	; (8008c08 <__sinit+0x28>)
 8008bf6:	6223      	str	r3, [r4, #32]
 8008bf8:	4b04      	ldr	r3, [pc, #16]	; (8008c0c <__sinit+0x2c>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1f5      	bne.n	8008bec <__sinit+0xc>
 8008c00:	f7ff ffc4 	bl	8008b8c <global_stdio_init.part.0>
 8008c04:	e7f2      	b.n	8008bec <__sinit+0xc>
 8008c06:	bf00      	nop
 8008c08:	08008b4d 	.word	0x08008b4d
 8008c0c:	200007d0 	.word	0x200007d0

08008c10 <_fwalk_sglue>:
 8008c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c14:	4607      	mov	r7, r0
 8008c16:	4688      	mov	r8, r1
 8008c18:	4614      	mov	r4, r2
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c20:	f1b9 0901 	subs.w	r9, r9, #1
 8008c24:	d505      	bpl.n	8008c32 <_fwalk_sglue+0x22>
 8008c26:	6824      	ldr	r4, [r4, #0]
 8008c28:	2c00      	cmp	r4, #0
 8008c2a:	d1f7      	bne.n	8008c1c <_fwalk_sglue+0xc>
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c32:	89ab      	ldrh	r3, [r5, #12]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d907      	bls.n	8008c48 <_fwalk_sglue+0x38>
 8008c38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	d003      	beq.n	8008c48 <_fwalk_sglue+0x38>
 8008c40:	4629      	mov	r1, r5
 8008c42:	4638      	mov	r0, r7
 8008c44:	47c0      	blx	r8
 8008c46:	4306      	orrs	r6, r0
 8008c48:	3568      	adds	r5, #104	; 0x68
 8008c4a:	e7e9      	b.n	8008c20 <_fwalk_sglue+0x10>

08008c4c <siprintf>:
 8008c4c:	b40e      	push	{r1, r2, r3}
 8008c4e:	b500      	push	{lr}
 8008c50:	b09c      	sub	sp, #112	; 0x70
 8008c52:	ab1d      	add	r3, sp, #116	; 0x74
 8008c54:	9002      	str	r0, [sp, #8]
 8008c56:	9006      	str	r0, [sp, #24]
 8008c58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c5c:	4809      	ldr	r0, [pc, #36]	; (8008c84 <siprintf+0x38>)
 8008c5e:	9107      	str	r1, [sp, #28]
 8008c60:	9104      	str	r1, [sp, #16]
 8008c62:	4909      	ldr	r1, [pc, #36]	; (8008c88 <siprintf+0x3c>)
 8008c64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c68:	9105      	str	r1, [sp, #20]
 8008c6a:	6800      	ldr	r0, [r0, #0]
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	a902      	add	r1, sp, #8
 8008c70:	f002 fbee 	bl	800b450 <_svfiprintf_r>
 8008c74:	9b02      	ldr	r3, [sp, #8]
 8008c76:	2200      	movs	r2, #0
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	b01c      	add	sp, #112	; 0x70
 8008c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c80:	b003      	add	sp, #12
 8008c82:	4770      	bx	lr
 8008c84:	20000078 	.word	0x20000078
 8008c88:	ffff0208 	.word	0xffff0208

08008c8c <__sread>:
 8008c8c:	b510      	push	{r4, lr}
 8008c8e:	460c      	mov	r4, r1
 8008c90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c94:	f000 f86c 	bl	8008d70 <_read_r>
 8008c98:	2800      	cmp	r0, #0
 8008c9a:	bfab      	itete	ge
 8008c9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c9e:	89a3      	ldrhlt	r3, [r4, #12]
 8008ca0:	181b      	addge	r3, r3, r0
 8008ca2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008ca6:	bfac      	ite	ge
 8008ca8:	6563      	strge	r3, [r4, #84]	; 0x54
 8008caa:	81a3      	strhlt	r3, [r4, #12]
 8008cac:	bd10      	pop	{r4, pc}

08008cae <__swrite>:
 8008cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb2:	461f      	mov	r7, r3
 8008cb4:	898b      	ldrh	r3, [r1, #12]
 8008cb6:	05db      	lsls	r3, r3, #23
 8008cb8:	4605      	mov	r5, r0
 8008cba:	460c      	mov	r4, r1
 8008cbc:	4616      	mov	r6, r2
 8008cbe:	d505      	bpl.n	8008ccc <__swrite+0x1e>
 8008cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f000 f840 	bl	8008d4c <_lseek_r>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cd2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008cd6:	81a3      	strh	r3, [r4, #12]
 8008cd8:	4632      	mov	r2, r6
 8008cda:	463b      	mov	r3, r7
 8008cdc:	4628      	mov	r0, r5
 8008cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ce2:	f000 b857 	b.w	8008d94 <_write_r>

08008ce6 <__sseek>:
 8008ce6:	b510      	push	{r4, lr}
 8008ce8:	460c      	mov	r4, r1
 8008cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cee:	f000 f82d 	bl	8008d4c <_lseek_r>
 8008cf2:	1c43      	adds	r3, r0, #1
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	bf15      	itete	ne
 8008cf8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008cfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008cfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d02:	81a3      	strheq	r3, [r4, #12]
 8008d04:	bf18      	it	ne
 8008d06:	81a3      	strhne	r3, [r4, #12]
 8008d08:	bd10      	pop	{r4, pc}

08008d0a <__sclose>:
 8008d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d0e:	f000 b80d 	b.w	8008d2c <_close_r>

08008d12 <memset>:
 8008d12:	4402      	add	r2, r0
 8008d14:	4603      	mov	r3, r0
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d100      	bne.n	8008d1c <memset+0xa>
 8008d1a:	4770      	bx	lr
 8008d1c:	f803 1b01 	strb.w	r1, [r3], #1
 8008d20:	e7f9      	b.n	8008d16 <memset+0x4>
	...

08008d24 <_localeconv_r>:
 8008d24:	4800      	ldr	r0, [pc, #0]	; (8008d28 <_localeconv_r+0x4>)
 8008d26:	4770      	bx	lr
 8008d28:	2000016c 	.word	0x2000016c

08008d2c <_close_r>:
 8008d2c:	b538      	push	{r3, r4, r5, lr}
 8008d2e:	4d06      	ldr	r5, [pc, #24]	; (8008d48 <_close_r+0x1c>)
 8008d30:	2300      	movs	r3, #0
 8008d32:	4604      	mov	r4, r0
 8008d34:	4608      	mov	r0, r1
 8008d36:	602b      	str	r3, [r5, #0]
 8008d38:	f7fa fd81 	bl	800383e <_close>
 8008d3c:	1c43      	adds	r3, r0, #1
 8008d3e:	d102      	bne.n	8008d46 <_close_r+0x1a>
 8008d40:	682b      	ldr	r3, [r5, #0]
 8008d42:	b103      	cbz	r3, 8008d46 <_close_r+0x1a>
 8008d44:	6023      	str	r3, [r4, #0]
 8008d46:	bd38      	pop	{r3, r4, r5, pc}
 8008d48:	200007d4 	.word	0x200007d4

08008d4c <_lseek_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4d07      	ldr	r5, [pc, #28]	; (8008d6c <_lseek_r+0x20>)
 8008d50:	4604      	mov	r4, r0
 8008d52:	4608      	mov	r0, r1
 8008d54:	4611      	mov	r1, r2
 8008d56:	2200      	movs	r2, #0
 8008d58:	602a      	str	r2, [r5, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	f7fa fd96 	bl	800388c <_lseek>
 8008d60:	1c43      	adds	r3, r0, #1
 8008d62:	d102      	bne.n	8008d6a <_lseek_r+0x1e>
 8008d64:	682b      	ldr	r3, [r5, #0]
 8008d66:	b103      	cbz	r3, 8008d6a <_lseek_r+0x1e>
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	bd38      	pop	{r3, r4, r5, pc}
 8008d6c:	200007d4 	.word	0x200007d4

08008d70 <_read_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d07      	ldr	r5, [pc, #28]	; (8008d90 <_read_r+0x20>)
 8008d74:	4604      	mov	r4, r0
 8008d76:	4608      	mov	r0, r1
 8008d78:	4611      	mov	r1, r2
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	602a      	str	r2, [r5, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	f7fa fd24 	bl	80037cc <_read>
 8008d84:	1c43      	adds	r3, r0, #1
 8008d86:	d102      	bne.n	8008d8e <_read_r+0x1e>
 8008d88:	682b      	ldr	r3, [r5, #0]
 8008d8a:	b103      	cbz	r3, 8008d8e <_read_r+0x1e>
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	bd38      	pop	{r3, r4, r5, pc}
 8008d90:	200007d4 	.word	0x200007d4

08008d94 <_write_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d07      	ldr	r5, [pc, #28]	; (8008db4 <_write_r+0x20>)
 8008d98:	4604      	mov	r4, r0
 8008d9a:	4608      	mov	r0, r1
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	602a      	str	r2, [r5, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	f7fa fd2f 	bl	8003806 <_write>
 8008da8:	1c43      	adds	r3, r0, #1
 8008daa:	d102      	bne.n	8008db2 <_write_r+0x1e>
 8008dac:	682b      	ldr	r3, [r5, #0]
 8008dae:	b103      	cbz	r3, 8008db2 <_write_r+0x1e>
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	bd38      	pop	{r3, r4, r5, pc}
 8008db4:	200007d4 	.word	0x200007d4

08008db8 <__errno>:
 8008db8:	4b01      	ldr	r3, [pc, #4]	; (8008dc0 <__errno+0x8>)
 8008dba:	6818      	ldr	r0, [r3, #0]
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop
 8008dc0:	20000078 	.word	0x20000078

08008dc4 <__libc_init_array>:
 8008dc4:	b570      	push	{r4, r5, r6, lr}
 8008dc6:	4d0d      	ldr	r5, [pc, #52]	; (8008dfc <__libc_init_array+0x38>)
 8008dc8:	4c0d      	ldr	r4, [pc, #52]	; (8008e00 <__libc_init_array+0x3c>)
 8008dca:	1b64      	subs	r4, r4, r5
 8008dcc:	10a4      	asrs	r4, r4, #2
 8008dce:	2600      	movs	r6, #0
 8008dd0:	42a6      	cmp	r6, r4
 8008dd2:	d109      	bne.n	8008de8 <__libc_init_array+0x24>
 8008dd4:	4d0b      	ldr	r5, [pc, #44]	; (8008e04 <__libc_init_array+0x40>)
 8008dd6:	4c0c      	ldr	r4, [pc, #48]	; (8008e08 <__libc_init_array+0x44>)
 8008dd8:	f003 fbd6 	bl	800c588 <_init>
 8008ddc:	1b64      	subs	r4, r4, r5
 8008dde:	10a4      	asrs	r4, r4, #2
 8008de0:	2600      	movs	r6, #0
 8008de2:	42a6      	cmp	r6, r4
 8008de4:	d105      	bne.n	8008df2 <__libc_init_array+0x2e>
 8008de6:	bd70      	pop	{r4, r5, r6, pc}
 8008de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dec:	4798      	blx	r3
 8008dee:	3601      	adds	r6, #1
 8008df0:	e7ee      	b.n	8008dd0 <__libc_init_array+0xc>
 8008df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df6:	4798      	blx	r3
 8008df8:	3601      	adds	r6, #1
 8008dfa:	e7f2      	b.n	8008de2 <__libc_init_array+0x1e>
 8008dfc:	0800ca68 	.word	0x0800ca68
 8008e00:	0800ca68 	.word	0x0800ca68
 8008e04:	0800ca68 	.word	0x0800ca68
 8008e08:	0800ca70 	.word	0x0800ca70

08008e0c <__retarget_lock_init_recursive>:
 8008e0c:	4770      	bx	lr

08008e0e <__retarget_lock_acquire_recursive>:
 8008e0e:	4770      	bx	lr

08008e10 <__retarget_lock_release_recursive>:
 8008e10:	4770      	bx	lr
	...

08008e14 <nanf>:
 8008e14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008e1c <nanf+0x8>
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	7fc00000 	.word	0x7fc00000

08008e20 <quorem>:
 8008e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	6903      	ldr	r3, [r0, #16]
 8008e26:	690c      	ldr	r4, [r1, #16]
 8008e28:	42a3      	cmp	r3, r4
 8008e2a:	4607      	mov	r7, r0
 8008e2c:	db7e      	blt.n	8008f2c <quorem+0x10c>
 8008e2e:	3c01      	subs	r4, #1
 8008e30:	f101 0814 	add.w	r8, r1, #20
 8008e34:	f100 0514 	add.w	r5, r0, #20
 8008e38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e46:	3301      	adds	r3, #1
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e52:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e56:	d331      	bcc.n	8008ebc <quorem+0x9c>
 8008e58:	f04f 0e00 	mov.w	lr, #0
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	46ac      	mov	ip, r5
 8008e60:	46f2      	mov	sl, lr
 8008e62:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e66:	b293      	uxth	r3, r2
 8008e68:	fb06 e303 	mla	r3, r6, r3, lr
 8008e6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e70:	0c1a      	lsrs	r2, r3, #16
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	ebaa 0303 	sub.w	r3, sl, r3
 8008e78:	f8dc a000 	ldr.w	sl, [ip]
 8008e7c:	fa13 f38a 	uxtah	r3, r3, sl
 8008e80:	fb06 220e 	mla	r2, r6, lr, r2
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	9b00      	ldr	r3, [sp, #0]
 8008e88:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008e8c:	b292      	uxth	r2, r2
 8008e8e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008e92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008e96:	f8bd 3000 	ldrh.w	r3, [sp]
 8008e9a:	4581      	cmp	r9, r0
 8008e9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ea0:	f84c 3b04 	str.w	r3, [ip], #4
 8008ea4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008ea8:	d2db      	bcs.n	8008e62 <quorem+0x42>
 8008eaa:	f855 300b 	ldr.w	r3, [r5, fp]
 8008eae:	b92b      	cbnz	r3, 8008ebc <quorem+0x9c>
 8008eb0:	9b01      	ldr	r3, [sp, #4]
 8008eb2:	3b04      	subs	r3, #4
 8008eb4:	429d      	cmp	r5, r3
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	d32c      	bcc.n	8008f14 <quorem+0xf4>
 8008eba:	613c      	str	r4, [r7, #16]
 8008ebc:	4638      	mov	r0, r7
 8008ebe:	f001 f9ef 	bl	800a2a0 <__mcmp>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	db22      	blt.n	8008f0c <quorem+0xec>
 8008ec6:	3601      	adds	r6, #1
 8008ec8:	4629      	mov	r1, r5
 8008eca:	2000      	movs	r0, #0
 8008ecc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ed0:	f8d1 c000 	ldr.w	ip, [r1]
 8008ed4:	b293      	uxth	r3, r2
 8008ed6:	1ac3      	subs	r3, r0, r3
 8008ed8:	0c12      	lsrs	r2, r2, #16
 8008eda:	fa13 f38c 	uxtah	r3, r3, ip
 8008ede:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008ee2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008eec:	45c1      	cmp	r9, r8
 8008eee:	f841 3b04 	str.w	r3, [r1], #4
 8008ef2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ef6:	d2e9      	bcs.n	8008ecc <quorem+0xac>
 8008ef8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008efc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f00:	b922      	cbnz	r2, 8008f0c <quorem+0xec>
 8008f02:	3b04      	subs	r3, #4
 8008f04:	429d      	cmp	r5, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	d30a      	bcc.n	8008f20 <quorem+0x100>
 8008f0a:	613c      	str	r4, [r7, #16]
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	b003      	add	sp, #12
 8008f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f14:	6812      	ldr	r2, [r2, #0]
 8008f16:	3b04      	subs	r3, #4
 8008f18:	2a00      	cmp	r2, #0
 8008f1a:	d1ce      	bne.n	8008eba <quorem+0x9a>
 8008f1c:	3c01      	subs	r4, #1
 8008f1e:	e7c9      	b.n	8008eb4 <quorem+0x94>
 8008f20:	6812      	ldr	r2, [r2, #0]
 8008f22:	3b04      	subs	r3, #4
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	d1f0      	bne.n	8008f0a <quorem+0xea>
 8008f28:	3c01      	subs	r4, #1
 8008f2a:	e7eb      	b.n	8008f04 <quorem+0xe4>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e7ee      	b.n	8008f0e <quorem+0xee>

08008f30 <_dtoa_r>:
 8008f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	ed2d 8b04 	vpush	{d8-d9}
 8008f38:	69c5      	ldr	r5, [r0, #28]
 8008f3a:	b093      	sub	sp, #76	; 0x4c
 8008f3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008f40:	ec57 6b10 	vmov	r6, r7, d0
 8008f44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f48:	9107      	str	r1, [sp, #28]
 8008f4a:	4604      	mov	r4, r0
 8008f4c:	920a      	str	r2, [sp, #40]	; 0x28
 8008f4e:	930d      	str	r3, [sp, #52]	; 0x34
 8008f50:	b975      	cbnz	r5, 8008f70 <_dtoa_r+0x40>
 8008f52:	2010      	movs	r0, #16
 8008f54:	f000 fe2a 	bl	8009bac <malloc>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	61e0      	str	r0, [r4, #28]
 8008f5c:	b920      	cbnz	r0, 8008f68 <_dtoa_r+0x38>
 8008f5e:	4bae      	ldr	r3, [pc, #696]	; (8009218 <_dtoa_r+0x2e8>)
 8008f60:	21ef      	movs	r1, #239	; 0xef
 8008f62:	48ae      	ldr	r0, [pc, #696]	; (800921c <_dtoa_r+0x2ec>)
 8008f64:	f002 fc74 	bl	800b850 <__assert_func>
 8008f68:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f6c:	6005      	str	r5, [r0, #0]
 8008f6e:	60c5      	str	r5, [r0, #12]
 8008f70:	69e3      	ldr	r3, [r4, #28]
 8008f72:	6819      	ldr	r1, [r3, #0]
 8008f74:	b151      	cbz	r1, 8008f8c <_dtoa_r+0x5c>
 8008f76:	685a      	ldr	r2, [r3, #4]
 8008f78:	604a      	str	r2, [r1, #4]
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	4093      	lsls	r3, r2
 8008f7e:	608b      	str	r3, [r1, #8]
 8008f80:	4620      	mov	r0, r4
 8008f82:	f000 ff07 	bl	8009d94 <_Bfree>
 8008f86:	69e3      	ldr	r3, [r4, #28]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	601a      	str	r2, [r3, #0]
 8008f8c:	1e3b      	subs	r3, r7, #0
 8008f8e:	bfbb      	ittet	lt
 8008f90:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008f94:	9303      	strlt	r3, [sp, #12]
 8008f96:	2300      	movge	r3, #0
 8008f98:	2201      	movlt	r2, #1
 8008f9a:	bfac      	ite	ge
 8008f9c:	f8c8 3000 	strge.w	r3, [r8]
 8008fa0:	f8c8 2000 	strlt.w	r2, [r8]
 8008fa4:	4b9e      	ldr	r3, [pc, #632]	; (8009220 <_dtoa_r+0x2f0>)
 8008fa6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008faa:	ea33 0308 	bics.w	r3, r3, r8
 8008fae:	d11b      	bne.n	8008fe8 <_dtoa_r+0xb8>
 8008fb0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008fb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fb6:	6013      	str	r3, [r2, #0]
 8008fb8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008fbc:	4333      	orrs	r3, r6
 8008fbe:	f000 8593 	beq.w	8009ae8 <_dtoa_r+0xbb8>
 8008fc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fc4:	b963      	cbnz	r3, 8008fe0 <_dtoa_r+0xb0>
 8008fc6:	4b97      	ldr	r3, [pc, #604]	; (8009224 <_dtoa_r+0x2f4>)
 8008fc8:	e027      	b.n	800901a <_dtoa_r+0xea>
 8008fca:	4b97      	ldr	r3, [pc, #604]	; (8009228 <_dtoa_r+0x2f8>)
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	3308      	adds	r3, #8
 8008fd0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008fd2:	6013      	str	r3, [r2, #0]
 8008fd4:	9800      	ldr	r0, [sp, #0]
 8008fd6:	b013      	add	sp, #76	; 0x4c
 8008fd8:	ecbd 8b04 	vpop	{d8-d9}
 8008fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe0:	4b90      	ldr	r3, [pc, #576]	; (8009224 <_dtoa_r+0x2f4>)
 8008fe2:	9300      	str	r3, [sp, #0]
 8008fe4:	3303      	adds	r3, #3
 8008fe6:	e7f3      	b.n	8008fd0 <_dtoa_r+0xa0>
 8008fe8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008fec:	2200      	movs	r2, #0
 8008fee:	ec51 0b17 	vmov	r0, r1, d7
 8008ff2:	eeb0 8a47 	vmov.f32	s16, s14
 8008ff6:	eef0 8a67 	vmov.f32	s17, s15
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	f7f7 fd84 	bl	8000b08 <__aeabi_dcmpeq>
 8009000:	4681      	mov	r9, r0
 8009002:	b160      	cbz	r0, 800901e <_dtoa_r+0xee>
 8009004:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009006:	2301      	movs	r3, #1
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 8568 	beq.w	8009ae2 <_dtoa_r+0xbb2>
 8009012:	4b86      	ldr	r3, [pc, #536]	; (800922c <_dtoa_r+0x2fc>)
 8009014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009016:	6013      	str	r3, [r2, #0]
 8009018:	3b01      	subs	r3, #1
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	e7da      	b.n	8008fd4 <_dtoa_r+0xa4>
 800901e:	aa10      	add	r2, sp, #64	; 0x40
 8009020:	a911      	add	r1, sp, #68	; 0x44
 8009022:	4620      	mov	r0, r4
 8009024:	eeb0 0a48 	vmov.f32	s0, s16
 8009028:	eef0 0a68 	vmov.f32	s1, s17
 800902c:	f001 fa4e 	bl	800a4cc <__d2b>
 8009030:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009034:	4682      	mov	sl, r0
 8009036:	2d00      	cmp	r5, #0
 8009038:	d07f      	beq.n	800913a <_dtoa_r+0x20a>
 800903a:	ee18 3a90 	vmov	r3, s17
 800903e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009042:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009046:	ec51 0b18 	vmov	r0, r1, d8
 800904a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800904e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009052:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009056:	4619      	mov	r1, r3
 8009058:	2200      	movs	r2, #0
 800905a:	4b75      	ldr	r3, [pc, #468]	; (8009230 <_dtoa_r+0x300>)
 800905c:	f7f7 f934 	bl	80002c8 <__aeabi_dsub>
 8009060:	a367      	add	r3, pc, #412	; (adr r3, 8009200 <_dtoa_r+0x2d0>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	f7f7 fae7 	bl	8000638 <__aeabi_dmul>
 800906a:	a367      	add	r3, pc, #412	; (adr r3, 8009208 <_dtoa_r+0x2d8>)
 800906c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009070:	f7f7 f92c 	bl	80002cc <__adddf3>
 8009074:	4606      	mov	r6, r0
 8009076:	4628      	mov	r0, r5
 8009078:	460f      	mov	r7, r1
 800907a:	f7f7 fa73 	bl	8000564 <__aeabi_i2d>
 800907e:	a364      	add	r3, pc, #400	; (adr r3, 8009210 <_dtoa_r+0x2e0>)
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	f7f7 fad8 	bl	8000638 <__aeabi_dmul>
 8009088:	4602      	mov	r2, r0
 800908a:	460b      	mov	r3, r1
 800908c:	4630      	mov	r0, r6
 800908e:	4639      	mov	r1, r7
 8009090:	f7f7 f91c 	bl	80002cc <__adddf3>
 8009094:	4606      	mov	r6, r0
 8009096:	460f      	mov	r7, r1
 8009098:	f7f7 fd7e 	bl	8000b98 <__aeabi_d2iz>
 800909c:	2200      	movs	r2, #0
 800909e:	4683      	mov	fp, r0
 80090a0:	2300      	movs	r3, #0
 80090a2:	4630      	mov	r0, r6
 80090a4:	4639      	mov	r1, r7
 80090a6:	f7f7 fd39 	bl	8000b1c <__aeabi_dcmplt>
 80090aa:	b148      	cbz	r0, 80090c0 <_dtoa_r+0x190>
 80090ac:	4658      	mov	r0, fp
 80090ae:	f7f7 fa59 	bl	8000564 <__aeabi_i2d>
 80090b2:	4632      	mov	r2, r6
 80090b4:	463b      	mov	r3, r7
 80090b6:	f7f7 fd27 	bl	8000b08 <__aeabi_dcmpeq>
 80090ba:	b908      	cbnz	r0, 80090c0 <_dtoa_r+0x190>
 80090bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090c0:	f1bb 0f16 	cmp.w	fp, #22
 80090c4:	d857      	bhi.n	8009176 <_dtoa_r+0x246>
 80090c6:	4b5b      	ldr	r3, [pc, #364]	; (8009234 <_dtoa_r+0x304>)
 80090c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	ec51 0b18 	vmov	r0, r1, d8
 80090d4:	f7f7 fd22 	bl	8000b1c <__aeabi_dcmplt>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d04e      	beq.n	800917a <_dtoa_r+0x24a>
 80090dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80090e0:	2300      	movs	r3, #0
 80090e2:	930c      	str	r3, [sp, #48]	; 0x30
 80090e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090e6:	1b5b      	subs	r3, r3, r5
 80090e8:	1e5a      	subs	r2, r3, #1
 80090ea:	bf45      	ittet	mi
 80090ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80090f0:	9305      	strmi	r3, [sp, #20]
 80090f2:	2300      	movpl	r3, #0
 80090f4:	2300      	movmi	r3, #0
 80090f6:	9206      	str	r2, [sp, #24]
 80090f8:	bf54      	ite	pl
 80090fa:	9305      	strpl	r3, [sp, #20]
 80090fc:	9306      	strmi	r3, [sp, #24]
 80090fe:	f1bb 0f00 	cmp.w	fp, #0
 8009102:	db3c      	blt.n	800917e <_dtoa_r+0x24e>
 8009104:	9b06      	ldr	r3, [sp, #24]
 8009106:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800910a:	445b      	add	r3, fp
 800910c:	9306      	str	r3, [sp, #24]
 800910e:	2300      	movs	r3, #0
 8009110:	9308      	str	r3, [sp, #32]
 8009112:	9b07      	ldr	r3, [sp, #28]
 8009114:	2b09      	cmp	r3, #9
 8009116:	d868      	bhi.n	80091ea <_dtoa_r+0x2ba>
 8009118:	2b05      	cmp	r3, #5
 800911a:	bfc4      	itt	gt
 800911c:	3b04      	subgt	r3, #4
 800911e:	9307      	strgt	r3, [sp, #28]
 8009120:	9b07      	ldr	r3, [sp, #28]
 8009122:	f1a3 0302 	sub.w	r3, r3, #2
 8009126:	bfcc      	ite	gt
 8009128:	2500      	movgt	r5, #0
 800912a:	2501      	movle	r5, #1
 800912c:	2b03      	cmp	r3, #3
 800912e:	f200 8085 	bhi.w	800923c <_dtoa_r+0x30c>
 8009132:	e8df f003 	tbb	[pc, r3]
 8009136:	3b2e      	.short	0x3b2e
 8009138:	5839      	.short	0x5839
 800913a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800913e:	441d      	add	r5, r3
 8009140:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009144:	2b20      	cmp	r3, #32
 8009146:	bfc1      	itttt	gt
 8009148:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800914c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009150:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009154:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009158:	bfd6      	itet	le
 800915a:	f1c3 0320 	rsble	r3, r3, #32
 800915e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009162:	fa06 f003 	lslle.w	r0, r6, r3
 8009166:	f7f7 f9ed 	bl	8000544 <__aeabi_ui2d>
 800916a:	2201      	movs	r2, #1
 800916c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009170:	3d01      	subs	r5, #1
 8009172:	920e      	str	r2, [sp, #56]	; 0x38
 8009174:	e76f      	b.n	8009056 <_dtoa_r+0x126>
 8009176:	2301      	movs	r3, #1
 8009178:	e7b3      	b.n	80090e2 <_dtoa_r+0x1b2>
 800917a:	900c      	str	r0, [sp, #48]	; 0x30
 800917c:	e7b2      	b.n	80090e4 <_dtoa_r+0x1b4>
 800917e:	9b05      	ldr	r3, [sp, #20]
 8009180:	eba3 030b 	sub.w	r3, r3, fp
 8009184:	9305      	str	r3, [sp, #20]
 8009186:	f1cb 0300 	rsb	r3, fp, #0
 800918a:	9308      	str	r3, [sp, #32]
 800918c:	2300      	movs	r3, #0
 800918e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009190:	e7bf      	b.n	8009112 <_dtoa_r+0x1e2>
 8009192:	2300      	movs	r3, #0
 8009194:	9309      	str	r3, [sp, #36]	; 0x24
 8009196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009198:	2b00      	cmp	r3, #0
 800919a:	dc52      	bgt.n	8009242 <_dtoa_r+0x312>
 800919c:	2301      	movs	r3, #1
 800919e:	9301      	str	r3, [sp, #4]
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	461a      	mov	r2, r3
 80091a4:	920a      	str	r2, [sp, #40]	; 0x28
 80091a6:	e00b      	b.n	80091c0 <_dtoa_r+0x290>
 80091a8:	2301      	movs	r3, #1
 80091aa:	e7f3      	b.n	8009194 <_dtoa_r+0x264>
 80091ac:	2300      	movs	r3, #0
 80091ae:	9309      	str	r3, [sp, #36]	; 0x24
 80091b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b2:	445b      	add	r3, fp
 80091b4:	9301      	str	r3, [sp, #4]
 80091b6:	3301      	adds	r3, #1
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	bfb8      	it	lt
 80091be:	2301      	movlt	r3, #1
 80091c0:	69e0      	ldr	r0, [r4, #28]
 80091c2:	2100      	movs	r1, #0
 80091c4:	2204      	movs	r2, #4
 80091c6:	f102 0614 	add.w	r6, r2, #20
 80091ca:	429e      	cmp	r6, r3
 80091cc:	d93d      	bls.n	800924a <_dtoa_r+0x31a>
 80091ce:	6041      	str	r1, [r0, #4]
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 fd9f 	bl	8009d14 <_Balloc>
 80091d6:	9000      	str	r0, [sp, #0]
 80091d8:	2800      	cmp	r0, #0
 80091da:	d139      	bne.n	8009250 <_dtoa_r+0x320>
 80091dc:	4b16      	ldr	r3, [pc, #88]	; (8009238 <_dtoa_r+0x308>)
 80091de:	4602      	mov	r2, r0
 80091e0:	f240 11af 	movw	r1, #431	; 0x1af
 80091e4:	e6bd      	b.n	8008f62 <_dtoa_r+0x32>
 80091e6:	2301      	movs	r3, #1
 80091e8:	e7e1      	b.n	80091ae <_dtoa_r+0x27e>
 80091ea:	2501      	movs	r5, #1
 80091ec:	2300      	movs	r3, #0
 80091ee:	9307      	str	r3, [sp, #28]
 80091f0:	9509      	str	r5, [sp, #36]	; 0x24
 80091f2:	f04f 33ff 	mov.w	r3, #4294967295
 80091f6:	9301      	str	r3, [sp, #4]
 80091f8:	9304      	str	r3, [sp, #16]
 80091fa:	2200      	movs	r2, #0
 80091fc:	2312      	movs	r3, #18
 80091fe:	e7d1      	b.n	80091a4 <_dtoa_r+0x274>
 8009200:	636f4361 	.word	0x636f4361
 8009204:	3fd287a7 	.word	0x3fd287a7
 8009208:	8b60c8b3 	.word	0x8b60c8b3
 800920c:	3fc68a28 	.word	0x3fc68a28
 8009210:	509f79fb 	.word	0x509f79fb
 8009214:	3fd34413 	.word	0x3fd34413
 8009218:	0800c67e 	.word	0x0800c67e
 800921c:	0800c695 	.word	0x0800c695
 8009220:	7ff00000 	.word	0x7ff00000
 8009224:	0800c67a 	.word	0x0800c67a
 8009228:	0800c671 	.word	0x0800c671
 800922c:	0800c649 	.word	0x0800c649
 8009230:	3ff80000 	.word	0x3ff80000
 8009234:	0800c780 	.word	0x0800c780
 8009238:	0800c6ed 	.word	0x0800c6ed
 800923c:	2301      	movs	r3, #1
 800923e:	9309      	str	r3, [sp, #36]	; 0x24
 8009240:	e7d7      	b.n	80091f2 <_dtoa_r+0x2c2>
 8009242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009244:	9301      	str	r3, [sp, #4]
 8009246:	9304      	str	r3, [sp, #16]
 8009248:	e7ba      	b.n	80091c0 <_dtoa_r+0x290>
 800924a:	3101      	adds	r1, #1
 800924c:	0052      	lsls	r2, r2, #1
 800924e:	e7ba      	b.n	80091c6 <_dtoa_r+0x296>
 8009250:	69e3      	ldr	r3, [r4, #28]
 8009252:	9a00      	ldr	r2, [sp, #0]
 8009254:	601a      	str	r2, [r3, #0]
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	2b0e      	cmp	r3, #14
 800925a:	f200 80a8 	bhi.w	80093ae <_dtoa_r+0x47e>
 800925e:	2d00      	cmp	r5, #0
 8009260:	f000 80a5 	beq.w	80093ae <_dtoa_r+0x47e>
 8009264:	f1bb 0f00 	cmp.w	fp, #0
 8009268:	dd38      	ble.n	80092dc <_dtoa_r+0x3ac>
 800926a:	4bc0      	ldr	r3, [pc, #768]	; (800956c <_dtoa_r+0x63c>)
 800926c:	f00b 020f 	and.w	r2, fp, #15
 8009270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009274:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009278:	e9d3 6700 	ldrd	r6, r7, [r3]
 800927c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009280:	d019      	beq.n	80092b6 <_dtoa_r+0x386>
 8009282:	4bbb      	ldr	r3, [pc, #748]	; (8009570 <_dtoa_r+0x640>)
 8009284:	ec51 0b18 	vmov	r0, r1, d8
 8009288:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800928c:	f7f7 fafe 	bl	800088c <__aeabi_ddiv>
 8009290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009294:	f008 080f 	and.w	r8, r8, #15
 8009298:	2503      	movs	r5, #3
 800929a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009570 <_dtoa_r+0x640>
 800929e:	f1b8 0f00 	cmp.w	r8, #0
 80092a2:	d10a      	bne.n	80092ba <_dtoa_r+0x38a>
 80092a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092a8:	4632      	mov	r2, r6
 80092aa:	463b      	mov	r3, r7
 80092ac:	f7f7 faee 	bl	800088c <__aeabi_ddiv>
 80092b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092b4:	e02b      	b.n	800930e <_dtoa_r+0x3de>
 80092b6:	2502      	movs	r5, #2
 80092b8:	e7ef      	b.n	800929a <_dtoa_r+0x36a>
 80092ba:	f018 0f01 	tst.w	r8, #1
 80092be:	d008      	beq.n	80092d2 <_dtoa_r+0x3a2>
 80092c0:	4630      	mov	r0, r6
 80092c2:	4639      	mov	r1, r7
 80092c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80092c8:	f7f7 f9b6 	bl	8000638 <__aeabi_dmul>
 80092cc:	3501      	adds	r5, #1
 80092ce:	4606      	mov	r6, r0
 80092d0:	460f      	mov	r7, r1
 80092d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80092d6:	f109 0908 	add.w	r9, r9, #8
 80092da:	e7e0      	b.n	800929e <_dtoa_r+0x36e>
 80092dc:	f000 809f 	beq.w	800941e <_dtoa_r+0x4ee>
 80092e0:	f1cb 0600 	rsb	r6, fp, #0
 80092e4:	4ba1      	ldr	r3, [pc, #644]	; (800956c <_dtoa_r+0x63c>)
 80092e6:	4fa2      	ldr	r7, [pc, #648]	; (8009570 <_dtoa_r+0x640>)
 80092e8:	f006 020f 	and.w	r2, r6, #15
 80092ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	ec51 0b18 	vmov	r0, r1, d8
 80092f8:	f7f7 f99e 	bl	8000638 <__aeabi_dmul>
 80092fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009300:	1136      	asrs	r6, r6, #4
 8009302:	2300      	movs	r3, #0
 8009304:	2502      	movs	r5, #2
 8009306:	2e00      	cmp	r6, #0
 8009308:	d17e      	bne.n	8009408 <_dtoa_r+0x4d8>
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1d0      	bne.n	80092b0 <_dtoa_r+0x380>
 800930e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009310:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8084 	beq.w	8009422 <_dtoa_r+0x4f2>
 800931a:	4b96      	ldr	r3, [pc, #600]	; (8009574 <_dtoa_r+0x644>)
 800931c:	2200      	movs	r2, #0
 800931e:	4640      	mov	r0, r8
 8009320:	4649      	mov	r1, r9
 8009322:	f7f7 fbfb 	bl	8000b1c <__aeabi_dcmplt>
 8009326:	2800      	cmp	r0, #0
 8009328:	d07b      	beq.n	8009422 <_dtoa_r+0x4f2>
 800932a:	9b04      	ldr	r3, [sp, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d078      	beq.n	8009422 <_dtoa_r+0x4f2>
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	dd39      	ble.n	80093aa <_dtoa_r+0x47a>
 8009336:	4b90      	ldr	r3, [pc, #576]	; (8009578 <_dtoa_r+0x648>)
 8009338:	2200      	movs	r2, #0
 800933a:	4640      	mov	r0, r8
 800933c:	4649      	mov	r1, r9
 800933e:	f7f7 f97b 	bl	8000638 <__aeabi_dmul>
 8009342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009346:	9e01      	ldr	r6, [sp, #4]
 8009348:	f10b 37ff 	add.w	r7, fp, #4294967295
 800934c:	3501      	adds	r5, #1
 800934e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009352:	4628      	mov	r0, r5
 8009354:	f7f7 f906 	bl	8000564 <__aeabi_i2d>
 8009358:	4642      	mov	r2, r8
 800935a:	464b      	mov	r3, r9
 800935c:	f7f7 f96c 	bl	8000638 <__aeabi_dmul>
 8009360:	4b86      	ldr	r3, [pc, #536]	; (800957c <_dtoa_r+0x64c>)
 8009362:	2200      	movs	r2, #0
 8009364:	f7f6 ffb2 	bl	80002cc <__adddf3>
 8009368:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800936c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009370:	9303      	str	r3, [sp, #12]
 8009372:	2e00      	cmp	r6, #0
 8009374:	d158      	bne.n	8009428 <_dtoa_r+0x4f8>
 8009376:	4b82      	ldr	r3, [pc, #520]	; (8009580 <_dtoa_r+0x650>)
 8009378:	2200      	movs	r2, #0
 800937a:	4640      	mov	r0, r8
 800937c:	4649      	mov	r1, r9
 800937e:	f7f6 ffa3 	bl	80002c8 <__aeabi_dsub>
 8009382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009386:	4680      	mov	r8, r0
 8009388:	4689      	mov	r9, r1
 800938a:	f7f7 fbe5 	bl	8000b58 <__aeabi_dcmpgt>
 800938e:	2800      	cmp	r0, #0
 8009390:	f040 8296 	bne.w	80098c0 <_dtoa_r+0x990>
 8009394:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009398:	4640      	mov	r0, r8
 800939a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800939e:	4649      	mov	r1, r9
 80093a0:	f7f7 fbbc 	bl	8000b1c <__aeabi_dcmplt>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	f040 8289 	bne.w	80098bc <_dtoa_r+0x98c>
 80093aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80093ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	f2c0 814e 	blt.w	8009652 <_dtoa_r+0x722>
 80093b6:	f1bb 0f0e 	cmp.w	fp, #14
 80093ba:	f300 814a 	bgt.w	8009652 <_dtoa_r+0x722>
 80093be:	4b6b      	ldr	r3, [pc, #428]	; (800956c <_dtoa_r+0x63c>)
 80093c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80093c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f280 80dc 	bge.w	8009588 <_dtoa_r+0x658>
 80093d0:	9b04      	ldr	r3, [sp, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f300 80d8 	bgt.w	8009588 <_dtoa_r+0x658>
 80093d8:	f040 826f 	bne.w	80098ba <_dtoa_r+0x98a>
 80093dc:	4b68      	ldr	r3, [pc, #416]	; (8009580 <_dtoa_r+0x650>)
 80093de:	2200      	movs	r2, #0
 80093e0:	4640      	mov	r0, r8
 80093e2:	4649      	mov	r1, r9
 80093e4:	f7f7 f928 	bl	8000638 <__aeabi_dmul>
 80093e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093ec:	f7f7 fbaa 	bl	8000b44 <__aeabi_dcmpge>
 80093f0:	9e04      	ldr	r6, [sp, #16]
 80093f2:	4637      	mov	r7, r6
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f040 8245 	bne.w	8009884 <_dtoa_r+0x954>
 80093fa:	9d00      	ldr	r5, [sp, #0]
 80093fc:	2331      	movs	r3, #49	; 0x31
 80093fe:	f805 3b01 	strb.w	r3, [r5], #1
 8009402:	f10b 0b01 	add.w	fp, fp, #1
 8009406:	e241      	b.n	800988c <_dtoa_r+0x95c>
 8009408:	07f2      	lsls	r2, r6, #31
 800940a:	d505      	bpl.n	8009418 <_dtoa_r+0x4e8>
 800940c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009410:	f7f7 f912 	bl	8000638 <__aeabi_dmul>
 8009414:	3501      	adds	r5, #1
 8009416:	2301      	movs	r3, #1
 8009418:	1076      	asrs	r6, r6, #1
 800941a:	3708      	adds	r7, #8
 800941c:	e773      	b.n	8009306 <_dtoa_r+0x3d6>
 800941e:	2502      	movs	r5, #2
 8009420:	e775      	b.n	800930e <_dtoa_r+0x3de>
 8009422:	9e04      	ldr	r6, [sp, #16]
 8009424:	465f      	mov	r7, fp
 8009426:	e792      	b.n	800934e <_dtoa_r+0x41e>
 8009428:	9900      	ldr	r1, [sp, #0]
 800942a:	4b50      	ldr	r3, [pc, #320]	; (800956c <_dtoa_r+0x63c>)
 800942c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009430:	4431      	add	r1, r6
 8009432:	9102      	str	r1, [sp, #8]
 8009434:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009436:	eeb0 9a47 	vmov.f32	s18, s14
 800943a:	eef0 9a67 	vmov.f32	s19, s15
 800943e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009442:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009446:	2900      	cmp	r1, #0
 8009448:	d044      	beq.n	80094d4 <_dtoa_r+0x5a4>
 800944a:	494e      	ldr	r1, [pc, #312]	; (8009584 <_dtoa_r+0x654>)
 800944c:	2000      	movs	r0, #0
 800944e:	f7f7 fa1d 	bl	800088c <__aeabi_ddiv>
 8009452:	ec53 2b19 	vmov	r2, r3, d9
 8009456:	f7f6 ff37 	bl	80002c8 <__aeabi_dsub>
 800945a:	9d00      	ldr	r5, [sp, #0]
 800945c:	ec41 0b19 	vmov	d9, r0, r1
 8009460:	4649      	mov	r1, r9
 8009462:	4640      	mov	r0, r8
 8009464:	f7f7 fb98 	bl	8000b98 <__aeabi_d2iz>
 8009468:	4606      	mov	r6, r0
 800946a:	f7f7 f87b 	bl	8000564 <__aeabi_i2d>
 800946e:	4602      	mov	r2, r0
 8009470:	460b      	mov	r3, r1
 8009472:	4640      	mov	r0, r8
 8009474:	4649      	mov	r1, r9
 8009476:	f7f6 ff27 	bl	80002c8 <__aeabi_dsub>
 800947a:	3630      	adds	r6, #48	; 0x30
 800947c:	f805 6b01 	strb.w	r6, [r5], #1
 8009480:	ec53 2b19 	vmov	r2, r3, d9
 8009484:	4680      	mov	r8, r0
 8009486:	4689      	mov	r9, r1
 8009488:	f7f7 fb48 	bl	8000b1c <__aeabi_dcmplt>
 800948c:	2800      	cmp	r0, #0
 800948e:	d164      	bne.n	800955a <_dtoa_r+0x62a>
 8009490:	4642      	mov	r2, r8
 8009492:	464b      	mov	r3, r9
 8009494:	4937      	ldr	r1, [pc, #220]	; (8009574 <_dtoa_r+0x644>)
 8009496:	2000      	movs	r0, #0
 8009498:	f7f6 ff16 	bl	80002c8 <__aeabi_dsub>
 800949c:	ec53 2b19 	vmov	r2, r3, d9
 80094a0:	f7f7 fb3c 	bl	8000b1c <__aeabi_dcmplt>
 80094a4:	2800      	cmp	r0, #0
 80094a6:	f040 80b6 	bne.w	8009616 <_dtoa_r+0x6e6>
 80094aa:	9b02      	ldr	r3, [sp, #8]
 80094ac:	429d      	cmp	r5, r3
 80094ae:	f43f af7c 	beq.w	80093aa <_dtoa_r+0x47a>
 80094b2:	4b31      	ldr	r3, [pc, #196]	; (8009578 <_dtoa_r+0x648>)
 80094b4:	ec51 0b19 	vmov	r0, r1, d9
 80094b8:	2200      	movs	r2, #0
 80094ba:	f7f7 f8bd 	bl	8000638 <__aeabi_dmul>
 80094be:	4b2e      	ldr	r3, [pc, #184]	; (8009578 <_dtoa_r+0x648>)
 80094c0:	ec41 0b19 	vmov	d9, r0, r1
 80094c4:	2200      	movs	r2, #0
 80094c6:	4640      	mov	r0, r8
 80094c8:	4649      	mov	r1, r9
 80094ca:	f7f7 f8b5 	bl	8000638 <__aeabi_dmul>
 80094ce:	4680      	mov	r8, r0
 80094d0:	4689      	mov	r9, r1
 80094d2:	e7c5      	b.n	8009460 <_dtoa_r+0x530>
 80094d4:	ec51 0b17 	vmov	r0, r1, d7
 80094d8:	f7f7 f8ae 	bl	8000638 <__aeabi_dmul>
 80094dc:	9b02      	ldr	r3, [sp, #8]
 80094de:	9d00      	ldr	r5, [sp, #0]
 80094e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80094e2:	ec41 0b19 	vmov	d9, r0, r1
 80094e6:	4649      	mov	r1, r9
 80094e8:	4640      	mov	r0, r8
 80094ea:	f7f7 fb55 	bl	8000b98 <__aeabi_d2iz>
 80094ee:	4606      	mov	r6, r0
 80094f0:	f7f7 f838 	bl	8000564 <__aeabi_i2d>
 80094f4:	3630      	adds	r6, #48	; 0x30
 80094f6:	4602      	mov	r2, r0
 80094f8:	460b      	mov	r3, r1
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	f7f6 fee3 	bl	80002c8 <__aeabi_dsub>
 8009502:	f805 6b01 	strb.w	r6, [r5], #1
 8009506:	9b02      	ldr	r3, [sp, #8]
 8009508:	429d      	cmp	r5, r3
 800950a:	4680      	mov	r8, r0
 800950c:	4689      	mov	r9, r1
 800950e:	f04f 0200 	mov.w	r2, #0
 8009512:	d124      	bne.n	800955e <_dtoa_r+0x62e>
 8009514:	4b1b      	ldr	r3, [pc, #108]	; (8009584 <_dtoa_r+0x654>)
 8009516:	ec51 0b19 	vmov	r0, r1, d9
 800951a:	f7f6 fed7 	bl	80002cc <__adddf3>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4640      	mov	r0, r8
 8009524:	4649      	mov	r1, r9
 8009526:	f7f7 fb17 	bl	8000b58 <__aeabi_dcmpgt>
 800952a:	2800      	cmp	r0, #0
 800952c:	d173      	bne.n	8009616 <_dtoa_r+0x6e6>
 800952e:	ec53 2b19 	vmov	r2, r3, d9
 8009532:	4914      	ldr	r1, [pc, #80]	; (8009584 <_dtoa_r+0x654>)
 8009534:	2000      	movs	r0, #0
 8009536:	f7f6 fec7 	bl	80002c8 <__aeabi_dsub>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	4640      	mov	r0, r8
 8009540:	4649      	mov	r1, r9
 8009542:	f7f7 faeb 	bl	8000b1c <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	f43f af2f 	beq.w	80093aa <_dtoa_r+0x47a>
 800954c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800954e:	1e6b      	subs	r3, r5, #1
 8009550:	930f      	str	r3, [sp, #60]	; 0x3c
 8009552:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009556:	2b30      	cmp	r3, #48	; 0x30
 8009558:	d0f8      	beq.n	800954c <_dtoa_r+0x61c>
 800955a:	46bb      	mov	fp, r7
 800955c:	e04a      	b.n	80095f4 <_dtoa_r+0x6c4>
 800955e:	4b06      	ldr	r3, [pc, #24]	; (8009578 <_dtoa_r+0x648>)
 8009560:	f7f7 f86a 	bl	8000638 <__aeabi_dmul>
 8009564:	4680      	mov	r8, r0
 8009566:	4689      	mov	r9, r1
 8009568:	e7bd      	b.n	80094e6 <_dtoa_r+0x5b6>
 800956a:	bf00      	nop
 800956c:	0800c780 	.word	0x0800c780
 8009570:	0800c758 	.word	0x0800c758
 8009574:	3ff00000 	.word	0x3ff00000
 8009578:	40240000 	.word	0x40240000
 800957c:	401c0000 	.word	0x401c0000
 8009580:	40140000 	.word	0x40140000
 8009584:	3fe00000 	.word	0x3fe00000
 8009588:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800958c:	9d00      	ldr	r5, [sp, #0]
 800958e:	4642      	mov	r2, r8
 8009590:	464b      	mov	r3, r9
 8009592:	4630      	mov	r0, r6
 8009594:	4639      	mov	r1, r7
 8009596:	f7f7 f979 	bl	800088c <__aeabi_ddiv>
 800959a:	f7f7 fafd 	bl	8000b98 <__aeabi_d2iz>
 800959e:	9001      	str	r0, [sp, #4]
 80095a0:	f7f6 ffe0 	bl	8000564 <__aeabi_i2d>
 80095a4:	4642      	mov	r2, r8
 80095a6:	464b      	mov	r3, r9
 80095a8:	f7f7 f846 	bl	8000638 <__aeabi_dmul>
 80095ac:	4602      	mov	r2, r0
 80095ae:	460b      	mov	r3, r1
 80095b0:	4630      	mov	r0, r6
 80095b2:	4639      	mov	r1, r7
 80095b4:	f7f6 fe88 	bl	80002c8 <__aeabi_dsub>
 80095b8:	9e01      	ldr	r6, [sp, #4]
 80095ba:	9f04      	ldr	r7, [sp, #16]
 80095bc:	3630      	adds	r6, #48	; 0x30
 80095be:	f805 6b01 	strb.w	r6, [r5], #1
 80095c2:	9e00      	ldr	r6, [sp, #0]
 80095c4:	1bae      	subs	r6, r5, r6
 80095c6:	42b7      	cmp	r7, r6
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	d134      	bne.n	8009638 <_dtoa_r+0x708>
 80095ce:	f7f6 fe7d 	bl	80002cc <__adddf3>
 80095d2:	4642      	mov	r2, r8
 80095d4:	464b      	mov	r3, r9
 80095d6:	4606      	mov	r6, r0
 80095d8:	460f      	mov	r7, r1
 80095da:	f7f7 fabd 	bl	8000b58 <__aeabi_dcmpgt>
 80095de:	b9c8      	cbnz	r0, 8009614 <_dtoa_r+0x6e4>
 80095e0:	4642      	mov	r2, r8
 80095e2:	464b      	mov	r3, r9
 80095e4:	4630      	mov	r0, r6
 80095e6:	4639      	mov	r1, r7
 80095e8:	f7f7 fa8e 	bl	8000b08 <__aeabi_dcmpeq>
 80095ec:	b110      	cbz	r0, 80095f4 <_dtoa_r+0x6c4>
 80095ee:	9b01      	ldr	r3, [sp, #4]
 80095f0:	07db      	lsls	r3, r3, #31
 80095f2:	d40f      	bmi.n	8009614 <_dtoa_r+0x6e4>
 80095f4:	4651      	mov	r1, sl
 80095f6:	4620      	mov	r0, r4
 80095f8:	f000 fbcc 	bl	8009d94 <_Bfree>
 80095fc:	2300      	movs	r3, #0
 80095fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009600:	702b      	strb	r3, [r5, #0]
 8009602:	f10b 0301 	add.w	r3, fp, #1
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800960a:	2b00      	cmp	r3, #0
 800960c:	f43f ace2 	beq.w	8008fd4 <_dtoa_r+0xa4>
 8009610:	601d      	str	r5, [r3, #0]
 8009612:	e4df      	b.n	8008fd4 <_dtoa_r+0xa4>
 8009614:	465f      	mov	r7, fp
 8009616:	462b      	mov	r3, r5
 8009618:	461d      	mov	r5, r3
 800961a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800961e:	2a39      	cmp	r2, #57	; 0x39
 8009620:	d106      	bne.n	8009630 <_dtoa_r+0x700>
 8009622:	9a00      	ldr	r2, [sp, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d1f7      	bne.n	8009618 <_dtoa_r+0x6e8>
 8009628:	9900      	ldr	r1, [sp, #0]
 800962a:	2230      	movs	r2, #48	; 0x30
 800962c:	3701      	adds	r7, #1
 800962e:	700a      	strb	r2, [r1, #0]
 8009630:	781a      	ldrb	r2, [r3, #0]
 8009632:	3201      	adds	r2, #1
 8009634:	701a      	strb	r2, [r3, #0]
 8009636:	e790      	b.n	800955a <_dtoa_r+0x62a>
 8009638:	4ba3      	ldr	r3, [pc, #652]	; (80098c8 <_dtoa_r+0x998>)
 800963a:	2200      	movs	r2, #0
 800963c:	f7f6 fffc 	bl	8000638 <__aeabi_dmul>
 8009640:	2200      	movs	r2, #0
 8009642:	2300      	movs	r3, #0
 8009644:	4606      	mov	r6, r0
 8009646:	460f      	mov	r7, r1
 8009648:	f7f7 fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 800964c:	2800      	cmp	r0, #0
 800964e:	d09e      	beq.n	800958e <_dtoa_r+0x65e>
 8009650:	e7d0      	b.n	80095f4 <_dtoa_r+0x6c4>
 8009652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009654:	2a00      	cmp	r2, #0
 8009656:	f000 80ca 	beq.w	80097ee <_dtoa_r+0x8be>
 800965a:	9a07      	ldr	r2, [sp, #28]
 800965c:	2a01      	cmp	r2, #1
 800965e:	f300 80ad 	bgt.w	80097bc <_dtoa_r+0x88c>
 8009662:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009664:	2a00      	cmp	r2, #0
 8009666:	f000 80a5 	beq.w	80097b4 <_dtoa_r+0x884>
 800966a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800966e:	9e08      	ldr	r6, [sp, #32]
 8009670:	9d05      	ldr	r5, [sp, #20]
 8009672:	9a05      	ldr	r2, [sp, #20]
 8009674:	441a      	add	r2, r3
 8009676:	9205      	str	r2, [sp, #20]
 8009678:	9a06      	ldr	r2, [sp, #24]
 800967a:	2101      	movs	r1, #1
 800967c:	441a      	add	r2, r3
 800967e:	4620      	mov	r0, r4
 8009680:	9206      	str	r2, [sp, #24]
 8009682:	f000 fc87 	bl	8009f94 <__i2b>
 8009686:	4607      	mov	r7, r0
 8009688:	b165      	cbz	r5, 80096a4 <_dtoa_r+0x774>
 800968a:	9b06      	ldr	r3, [sp, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	dd09      	ble.n	80096a4 <_dtoa_r+0x774>
 8009690:	42ab      	cmp	r3, r5
 8009692:	9a05      	ldr	r2, [sp, #20]
 8009694:	bfa8      	it	ge
 8009696:	462b      	movge	r3, r5
 8009698:	1ad2      	subs	r2, r2, r3
 800969a:	9205      	str	r2, [sp, #20]
 800969c:	9a06      	ldr	r2, [sp, #24]
 800969e:	1aed      	subs	r5, r5, r3
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	9306      	str	r3, [sp, #24]
 80096a4:	9b08      	ldr	r3, [sp, #32]
 80096a6:	b1f3      	cbz	r3, 80096e6 <_dtoa_r+0x7b6>
 80096a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80a3 	beq.w	80097f6 <_dtoa_r+0x8c6>
 80096b0:	2e00      	cmp	r6, #0
 80096b2:	dd10      	ble.n	80096d6 <_dtoa_r+0x7a6>
 80096b4:	4639      	mov	r1, r7
 80096b6:	4632      	mov	r2, r6
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fd2b 	bl	800a114 <__pow5mult>
 80096be:	4652      	mov	r2, sl
 80096c0:	4601      	mov	r1, r0
 80096c2:	4607      	mov	r7, r0
 80096c4:	4620      	mov	r0, r4
 80096c6:	f000 fc7b 	bl	8009fc0 <__multiply>
 80096ca:	4651      	mov	r1, sl
 80096cc:	4680      	mov	r8, r0
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 fb60 	bl	8009d94 <_Bfree>
 80096d4:	46c2      	mov	sl, r8
 80096d6:	9b08      	ldr	r3, [sp, #32]
 80096d8:	1b9a      	subs	r2, r3, r6
 80096da:	d004      	beq.n	80096e6 <_dtoa_r+0x7b6>
 80096dc:	4651      	mov	r1, sl
 80096de:	4620      	mov	r0, r4
 80096e0:	f000 fd18 	bl	800a114 <__pow5mult>
 80096e4:	4682      	mov	sl, r0
 80096e6:	2101      	movs	r1, #1
 80096e8:	4620      	mov	r0, r4
 80096ea:	f000 fc53 	bl	8009f94 <__i2b>
 80096ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	4606      	mov	r6, r0
 80096f4:	f340 8081 	ble.w	80097fa <_dtoa_r+0x8ca>
 80096f8:	461a      	mov	r2, r3
 80096fa:	4601      	mov	r1, r0
 80096fc:	4620      	mov	r0, r4
 80096fe:	f000 fd09 	bl	800a114 <__pow5mult>
 8009702:	9b07      	ldr	r3, [sp, #28]
 8009704:	2b01      	cmp	r3, #1
 8009706:	4606      	mov	r6, r0
 8009708:	dd7a      	ble.n	8009800 <_dtoa_r+0x8d0>
 800970a:	f04f 0800 	mov.w	r8, #0
 800970e:	6933      	ldr	r3, [r6, #16]
 8009710:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009714:	6918      	ldr	r0, [r3, #16]
 8009716:	f000 fbef 	bl	8009ef8 <__hi0bits>
 800971a:	f1c0 0020 	rsb	r0, r0, #32
 800971e:	9b06      	ldr	r3, [sp, #24]
 8009720:	4418      	add	r0, r3
 8009722:	f010 001f 	ands.w	r0, r0, #31
 8009726:	f000 8094 	beq.w	8009852 <_dtoa_r+0x922>
 800972a:	f1c0 0320 	rsb	r3, r0, #32
 800972e:	2b04      	cmp	r3, #4
 8009730:	f340 8085 	ble.w	800983e <_dtoa_r+0x90e>
 8009734:	9b05      	ldr	r3, [sp, #20]
 8009736:	f1c0 001c 	rsb	r0, r0, #28
 800973a:	4403      	add	r3, r0
 800973c:	9305      	str	r3, [sp, #20]
 800973e:	9b06      	ldr	r3, [sp, #24]
 8009740:	4403      	add	r3, r0
 8009742:	4405      	add	r5, r0
 8009744:	9306      	str	r3, [sp, #24]
 8009746:	9b05      	ldr	r3, [sp, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	dd05      	ble.n	8009758 <_dtoa_r+0x828>
 800974c:	4651      	mov	r1, sl
 800974e:	461a      	mov	r2, r3
 8009750:	4620      	mov	r0, r4
 8009752:	f000 fd39 	bl	800a1c8 <__lshift>
 8009756:	4682      	mov	sl, r0
 8009758:	9b06      	ldr	r3, [sp, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	dd05      	ble.n	800976a <_dtoa_r+0x83a>
 800975e:	4631      	mov	r1, r6
 8009760:	461a      	mov	r2, r3
 8009762:	4620      	mov	r0, r4
 8009764:	f000 fd30 	bl	800a1c8 <__lshift>
 8009768:	4606      	mov	r6, r0
 800976a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800976c:	2b00      	cmp	r3, #0
 800976e:	d072      	beq.n	8009856 <_dtoa_r+0x926>
 8009770:	4631      	mov	r1, r6
 8009772:	4650      	mov	r0, sl
 8009774:	f000 fd94 	bl	800a2a0 <__mcmp>
 8009778:	2800      	cmp	r0, #0
 800977a:	da6c      	bge.n	8009856 <_dtoa_r+0x926>
 800977c:	2300      	movs	r3, #0
 800977e:	4651      	mov	r1, sl
 8009780:	220a      	movs	r2, #10
 8009782:	4620      	mov	r0, r4
 8009784:	f000 fb28 	bl	8009dd8 <__multadd>
 8009788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800978e:	4682      	mov	sl, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 81b0 	beq.w	8009af6 <_dtoa_r+0xbc6>
 8009796:	2300      	movs	r3, #0
 8009798:	4639      	mov	r1, r7
 800979a:	220a      	movs	r2, #10
 800979c:	4620      	mov	r0, r4
 800979e:	f000 fb1b 	bl	8009dd8 <__multadd>
 80097a2:	9b01      	ldr	r3, [sp, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	4607      	mov	r7, r0
 80097a8:	f300 8096 	bgt.w	80098d8 <_dtoa_r+0x9a8>
 80097ac:	9b07      	ldr	r3, [sp, #28]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	dc59      	bgt.n	8009866 <_dtoa_r+0x936>
 80097b2:	e091      	b.n	80098d8 <_dtoa_r+0x9a8>
 80097b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097ba:	e758      	b.n	800966e <_dtoa_r+0x73e>
 80097bc:	9b04      	ldr	r3, [sp, #16]
 80097be:	1e5e      	subs	r6, r3, #1
 80097c0:	9b08      	ldr	r3, [sp, #32]
 80097c2:	42b3      	cmp	r3, r6
 80097c4:	bfbf      	itttt	lt
 80097c6:	9b08      	ldrlt	r3, [sp, #32]
 80097c8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80097ca:	9608      	strlt	r6, [sp, #32]
 80097cc:	1af3      	sublt	r3, r6, r3
 80097ce:	bfb4      	ite	lt
 80097d0:	18d2      	addlt	r2, r2, r3
 80097d2:	1b9e      	subge	r6, r3, r6
 80097d4:	9b04      	ldr	r3, [sp, #16]
 80097d6:	bfbc      	itt	lt
 80097d8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80097da:	2600      	movlt	r6, #0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	bfb7      	itett	lt
 80097e0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80097e4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80097e8:	1a9d      	sublt	r5, r3, r2
 80097ea:	2300      	movlt	r3, #0
 80097ec:	e741      	b.n	8009672 <_dtoa_r+0x742>
 80097ee:	9e08      	ldr	r6, [sp, #32]
 80097f0:	9d05      	ldr	r5, [sp, #20]
 80097f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80097f4:	e748      	b.n	8009688 <_dtoa_r+0x758>
 80097f6:	9a08      	ldr	r2, [sp, #32]
 80097f8:	e770      	b.n	80096dc <_dtoa_r+0x7ac>
 80097fa:	9b07      	ldr	r3, [sp, #28]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	dc19      	bgt.n	8009834 <_dtoa_r+0x904>
 8009800:	9b02      	ldr	r3, [sp, #8]
 8009802:	b9bb      	cbnz	r3, 8009834 <_dtoa_r+0x904>
 8009804:	9b03      	ldr	r3, [sp, #12]
 8009806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800980a:	b99b      	cbnz	r3, 8009834 <_dtoa_r+0x904>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009812:	0d1b      	lsrs	r3, r3, #20
 8009814:	051b      	lsls	r3, r3, #20
 8009816:	b183      	cbz	r3, 800983a <_dtoa_r+0x90a>
 8009818:	9b05      	ldr	r3, [sp, #20]
 800981a:	3301      	adds	r3, #1
 800981c:	9305      	str	r3, [sp, #20]
 800981e:	9b06      	ldr	r3, [sp, #24]
 8009820:	3301      	adds	r3, #1
 8009822:	9306      	str	r3, [sp, #24]
 8009824:	f04f 0801 	mov.w	r8, #1
 8009828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800982a:	2b00      	cmp	r3, #0
 800982c:	f47f af6f 	bne.w	800970e <_dtoa_r+0x7de>
 8009830:	2001      	movs	r0, #1
 8009832:	e774      	b.n	800971e <_dtoa_r+0x7ee>
 8009834:	f04f 0800 	mov.w	r8, #0
 8009838:	e7f6      	b.n	8009828 <_dtoa_r+0x8f8>
 800983a:	4698      	mov	r8, r3
 800983c:	e7f4      	b.n	8009828 <_dtoa_r+0x8f8>
 800983e:	d082      	beq.n	8009746 <_dtoa_r+0x816>
 8009840:	9a05      	ldr	r2, [sp, #20]
 8009842:	331c      	adds	r3, #28
 8009844:	441a      	add	r2, r3
 8009846:	9205      	str	r2, [sp, #20]
 8009848:	9a06      	ldr	r2, [sp, #24]
 800984a:	441a      	add	r2, r3
 800984c:	441d      	add	r5, r3
 800984e:	9206      	str	r2, [sp, #24]
 8009850:	e779      	b.n	8009746 <_dtoa_r+0x816>
 8009852:	4603      	mov	r3, r0
 8009854:	e7f4      	b.n	8009840 <_dtoa_r+0x910>
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	dc37      	bgt.n	80098cc <_dtoa_r+0x99c>
 800985c:	9b07      	ldr	r3, [sp, #28]
 800985e:	2b02      	cmp	r3, #2
 8009860:	dd34      	ble.n	80098cc <_dtoa_r+0x99c>
 8009862:	9b04      	ldr	r3, [sp, #16]
 8009864:	9301      	str	r3, [sp, #4]
 8009866:	9b01      	ldr	r3, [sp, #4]
 8009868:	b963      	cbnz	r3, 8009884 <_dtoa_r+0x954>
 800986a:	4631      	mov	r1, r6
 800986c:	2205      	movs	r2, #5
 800986e:	4620      	mov	r0, r4
 8009870:	f000 fab2 	bl	8009dd8 <__multadd>
 8009874:	4601      	mov	r1, r0
 8009876:	4606      	mov	r6, r0
 8009878:	4650      	mov	r0, sl
 800987a:	f000 fd11 	bl	800a2a0 <__mcmp>
 800987e:	2800      	cmp	r0, #0
 8009880:	f73f adbb 	bgt.w	80093fa <_dtoa_r+0x4ca>
 8009884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009886:	9d00      	ldr	r5, [sp, #0]
 8009888:	ea6f 0b03 	mvn.w	fp, r3
 800988c:	f04f 0800 	mov.w	r8, #0
 8009890:	4631      	mov	r1, r6
 8009892:	4620      	mov	r0, r4
 8009894:	f000 fa7e 	bl	8009d94 <_Bfree>
 8009898:	2f00      	cmp	r7, #0
 800989a:	f43f aeab 	beq.w	80095f4 <_dtoa_r+0x6c4>
 800989e:	f1b8 0f00 	cmp.w	r8, #0
 80098a2:	d005      	beq.n	80098b0 <_dtoa_r+0x980>
 80098a4:	45b8      	cmp	r8, r7
 80098a6:	d003      	beq.n	80098b0 <_dtoa_r+0x980>
 80098a8:	4641      	mov	r1, r8
 80098aa:	4620      	mov	r0, r4
 80098ac:	f000 fa72 	bl	8009d94 <_Bfree>
 80098b0:	4639      	mov	r1, r7
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 fa6e 	bl	8009d94 <_Bfree>
 80098b8:	e69c      	b.n	80095f4 <_dtoa_r+0x6c4>
 80098ba:	2600      	movs	r6, #0
 80098bc:	4637      	mov	r7, r6
 80098be:	e7e1      	b.n	8009884 <_dtoa_r+0x954>
 80098c0:	46bb      	mov	fp, r7
 80098c2:	4637      	mov	r7, r6
 80098c4:	e599      	b.n	80093fa <_dtoa_r+0x4ca>
 80098c6:	bf00      	nop
 80098c8:	40240000 	.word	0x40240000
 80098cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 80c8 	beq.w	8009a64 <_dtoa_r+0xb34>
 80098d4:	9b04      	ldr	r3, [sp, #16]
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	2d00      	cmp	r5, #0
 80098da:	dd05      	ble.n	80098e8 <_dtoa_r+0x9b8>
 80098dc:	4639      	mov	r1, r7
 80098de:	462a      	mov	r2, r5
 80098e0:	4620      	mov	r0, r4
 80098e2:	f000 fc71 	bl	800a1c8 <__lshift>
 80098e6:	4607      	mov	r7, r0
 80098e8:	f1b8 0f00 	cmp.w	r8, #0
 80098ec:	d05b      	beq.n	80099a6 <_dtoa_r+0xa76>
 80098ee:	6879      	ldr	r1, [r7, #4]
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fa0f 	bl	8009d14 <_Balloc>
 80098f6:	4605      	mov	r5, r0
 80098f8:	b928      	cbnz	r0, 8009906 <_dtoa_r+0x9d6>
 80098fa:	4b83      	ldr	r3, [pc, #524]	; (8009b08 <_dtoa_r+0xbd8>)
 80098fc:	4602      	mov	r2, r0
 80098fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009902:	f7ff bb2e 	b.w	8008f62 <_dtoa_r+0x32>
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	3202      	adds	r2, #2
 800990a:	0092      	lsls	r2, r2, #2
 800990c:	f107 010c 	add.w	r1, r7, #12
 8009910:	300c      	adds	r0, #12
 8009912:	f001 ff85 	bl	800b820 <memcpy>
 8009916:	2201      	movs	r2, #1
 8009918:	4629      	mov	r1, r5
 800991a:	4620      	mov	r0, r4
 800991c:	f000 fc54 	bl	800a1c8 <__lshift>
 8009920:	9b00      	ldr	r3, [sp, #0]
 8009922:	3301      	adds	r3, #1
 8009924:	9304      	str	r3, [sp, #16]
 8009926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800992a:	4413      	add	r3, r2
 800992c:	9308      	str	r3, [sp, #32]
 800992e:	9b02      	ldr	r3, [sp, #8]
 8009930:	f003 0301 	and.w	r3, r3, #1
 8009934:	46b8      	mov	r8, r7
 8009936:	9306      	str	r3, [sp, #24]
 8009938:	4607      	mov	r7, r0
 800993a:	9b04      	ldr	r3, [sp, #16]
 800993c:	4631      	mov	r1, r6
 800993e:	3b01      	subs	r3, #1
 8009940:	4650      	mov	r0, sl
 8009942:	9301      	str	r3, [sp, #4]
 8009944:	f7ff fa6c 	bl	8008e20 <quorem>
 8009948:	4641      	mov	r1, r8
 800994a:	9002      	str	r0, [sp, #8]
 800994c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009950:	4650      	mov	r0, sl
 8009952:	f000 fca5 	bl	800a2a0 <__mcmp>
 8009956:	463a      	mov	r2, r7
 8009958:	9005      	str	r0, [sp, #20]
 800995a:	4631      	mov	r1, r6
 800995c:	4620      	mov	r0, r4
 800995e:	f000 fcbb 	bl	800a2d8 <__mdiff>
 8009962:	68c2      	ldr	r2, [r0, #12]
 8009964:	4605      	mov	r5, r0
 8009966:	bb02      	cbnz	r2, 80099aa <_dtoa_r+0xa7a>
 8009968:	4601      	mov	r1, r0
 800996a:	4650      	mov	r0, sl
 800996c:	f000 fc98 	bl	800a2a0 <__mcmp>
 8009970:	4602      	mov	r2, r0
 8009972:	4629      	mov	r1, r5
 8009974:	4620      	mov	r0, r4
 8009976:	9209      	str	r2, [sp, #36]	; 0x24
 8009978:	f000 fa0c 	bl	8009d94 <_Bfree>
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009980:	9d04      	ldr	r5, [sp, #16]
 8009982:	ea43 0102 	orr.w	r1, r3, r2
 8009986:	9b06      	ldr	r3, [sp, #24]
 8009988:	4319      	orrs	r1, r3
 800998a:	d110      	bne.n	80099ae <_dtoa_r+0xa7e>
 800998c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009990:	d029      	beq.n	80099e6 <_dtoa_r+0xab6>
 8009992:	9b05      	ldr	r3, [sp, #20]
 8009994:	2b00      	cmp	r3, #0
 8009996:	dd02      	ble.n	800999e <_dtoa_r+0xa6e>
 8009998:	9b02      	ldr	r3, [sp, #8]
 800999a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800999e:	9b01      	ldr	r3, [sp, #4]
 80099a0:	f883 9000 	strb.w	r9, [r3]
 80099a4:	e774      	b.n	8009890 <_dtoa_r+0x960>
 80099a6:	4638      	mov	r0, r7
 80099a8:	e7ba      	b.n	8009920 <_dtoa_r+0x9f0>
 80099aa:	2201      	movs	r2, #1
 80099ac:	e7e1      	b.n	8009972 <_dtoa_r+0xa42>
 80099ae:	9b05      	ldr	r3, [sp, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	db04      	blt.n	80099be <_dtoa_r+0xa8e>
 80099b4:	9907      	ldr	r1, [sp, #28]
 80099b6:	430b      	orrs	r3, r1
 80099b8:	9906      	ldr	r1, [sp, #24]
 80099ba:	430b      	orrs	r3, r1
 80099bc:	d120      	bne.n	8009a00 <_dtoa_r+0xad0>
 80099be:	2a00      	cmp	r2, #0
 80099c0:	dded      	ble.n	800999e <_dtoa_r+0xa6e>
 80099c2:	4651      	mov	r1, sl
 80099c4:	2201      	movs	r2, #1
 80099c6:	4620      	mov	r0, r4
 80099c8:	f000 fbfe 	bl	800a1c8 <__lshift>
 80099cc:	4631      	mov	r1, r6
 80099ce:	4682      	mov	sl, r0
 80099d0:	f000 fc66 	bl	800a2a0 <__mcmp>
 80099d4:	2800      	cmp	r0, #0
 80099d6:	dc03      	bgt.n	80099e0 <_dtoa_r+0xab0>
 80099d8:	d1e1      	bne.n	800999e <_dtoa_r+0xa6e>
 80099da:	f019 0f01 	tst.w	r9, #1
 80099de:	d0de      	beq.n	800999e <_dtoa_r+0xa6e>
 80099e0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80099e4:	d1d8      	bne.n	8009998 <_dtoa_r+0xa68>
 80099e6:	9a01      	ldr	r2, [sp, #4]
 80099e8:	2339      	movs	r3, #57	; 0x39
 80099ea:	7013      	strb	r3, [r2, #0]
 80099ec:	462b      	mov	r3, r5
 80099ee:	461d      	mov	r5, r3
 80099f0:	3b01      	subs	r3, #1
 80099f2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80099f6:	2a39      	cmp	r2, #57	; 0x39
 80099f8:	d06c      	beq.n	8009ad4 <_dtoa_r+0xba4>
 80099fa:	3201      	adds	r2, #1
 80099fc:	701a      	strb	r2, [r3, #0]
 80099fe:	e747      	b.n	8009890 <_dtoa_r+0x960>
 8009a00:	2a00      	cmp	r2, #0
 8009a02:	dd07      	ble.n	8009a14 <_dtoa_r+0xae4>
 8009a04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009a08:	d0ed      	beq.n	80099e6 <_dtoa_r+0xab6>
 8009a0a:	9a01      	ldr	r2, [sp, #4]
 8009a0c:	f109 0301 	add.w	r3, r9, #1
 8009a10:	7013      	strb	r3, [r2, #0]
 8009a12:	e73d      	b.n	8009890 <_dtoa_r+0x960>
 8009a14:	9b04      	ldr	r3, [sp, #16]
 8009a16:	9a08      	ldr	r2, [sp, #32]
 8009a18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d043      	beq.n	8009aa8 <_dtoa_r+0xb78>
 8009a20:	4651      	mov	r1, sl
 8009a22:	2300      	movs	r3, #0
 8009a24:	220a      	movs	r2, #10
 8009a26:	4620      	mov	r0, r4
 8009a28:	f000 f9d6 	bl	8009dd8 <__multadd>
 8009a2c:	45b8      	cmp	r8, r7
 8009a2e:	4682      	mov	sl, r0
 8009a30:	f04f 0300 	mov.w	r3, #0
 8009a34:	f04f 020a 	mov.w	r2, #10
 8009a38:	4641      	mov	r1, r8
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	d107      	bne.n	8009a4e <_dtoa_r+0xb1e>
 8009a3e:	f000 f9cb 	bl	8009dd8 <__multadd>
 8009a42:	4680      	mov	r8, r0
 8009a44:	4607      	mov	r7, r0
 8009a46:	9b04      	ldr	r3, [sp, #16]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	9304      	str	r3, [sp, #16]
 8009a4c:	e775      	b.n	800993a <_dtoa_r+0xa0a>
 8009a4e:	f000 f9c3 	bl	8009dd8 <__multadd>
 8009a52:	4639      	mov	r1, r7
 8009a54:	4680      	mov	r8, r0
 8009a56:	2300      	movs	r3, #0
 8009a58:	220a      	movs	r2, #10
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f000 f9bc 	bl	8009dd8 <__multadd>
 8009a60:	4607      	mov	r7, r0
 8009a62:	e7f0      	b.n	8009a46 <_dtoa_r+0xb16>
 8009a64:	9b04      	ldr	r3, [sp, #16]
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	9d00      	ldr	r5, [sp, #0]
 8009a6a:	4631      	mov	r1, r6
 8009a6c:	4650      	mov	r0, sl
 8009a6e:	f7ff f9d7 	bl	8008e20 <quorem>
 8009a72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009a76:	9b00      	ldr	r3, [sp, #0]
 8009a78:	f805 9b01 	strb.w	r9, [r5], #1
 8009a7c:	1aea      	subs	r2, r5, r3
 8009a7e:	9b01      	ldr	r3, [sp, #4]
 8009a80:	4293      	cmp	r3, r2
 8009a82:	dd07      	ble.n	8009a94 <_dtoa_r+0xb64>
 8009a84:	4651      	mov	r1, sl
 8009a86:	2300      	movs	r3, #0
 8009a88:	220a      	movs	r2, #10
 8009a8a:	4620      	mov	r0, r4
 8009a8c:	f000 f9a4 	bl	8009dd8 <__multadd>
 8009a90:	4682      	mov	sl, r0
 8009a92:	e7ea      	b.n	8009a6a <_dtoa_r+0xb3a>
 8009a94:	9b01      	ldr	r3, [sp, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	bfc8      	it	gt
 8009a9a:	461d      	movgt	r5, r3
 8009a9c:	9b00      	ldr	r3, [sp, #0]
 8009a9e:	bfd8      	it	le
 8009aa0:	2501      	movle	r5, #1
 8009aa2:	441d      	add	r5, r3
 8009aa4:	f04f 0800 	mov.w	r8, #0
 8009aa8:	4651      	mov	r1, sl
 8009aaa:	2201      	movs	r2, #1
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 fb8b 	bl	800a1c8 <__lshift>
 8009ab2:	4631      	mov	r1, r6
 8009ab4:	4682      	mov	sl, r0
 8009ab6:	f000 fbf3 	bl	800a2a0 <__mcmp>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	dc96      	bgt.n	80099ec <_dtoa_r+0xabc>
 8009abe:	d102      	bne.n	8009ac6 <_dtoa_r+0xb96>
 8009ac0:	f019 0f01 	tst.w	r9, #1
 8009ac4:	d192      	bne.n	80099ec <_dtoa_r+0xabc>
 8009ac6:	462b      	mov	r3, r5
 8009ac8:	461d      	mov	r5, r3
 8009aca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ace:	2a30      	cmp	r2, #48	; 0x30
 8009ad0:	d0fa      	beq.n	8009ac8 <_dtoa_r+0xb98>
 8009ad2:	e6dd      	b.n	8009890 <_dtoa_r+0x960>
 8009ad4:	9a00      	ldr	r2, [sp, #0]
 8009ad6:	429a      	cmp	r2, r3
 8009ad8:	d189      	bne.n	80099ee <_dtoa_r+0xabe>
 8009ada:	f10b 0b01 	add.w	fp, fp, #1
 8009ade:	2331      	movs	r3, #49	; 0x31
 8009ae0:	e796      	b.n	8009a10 <_dtoa_r+0xae0>
 8009ae2:	4b0a      	ldr	r3, [pc, #40]	; (8009b0c <_dtoa_r+0xbdc>)
 8009ae4:	f7ff ba99 	b.w	800901a <_dtoa_r+0xea>
 8009ae8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f47f aa6d 	bne.w	8008fca <_dtoa_r+0x9a>
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <_dtoa_r+0xbe0>)
 8009af2:	f7ff ba92 	b.w	800901a <_dtoa_r+0xea>
 8009af6:	9b01      	ldr	r3, [sp, #4]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	dcb5      	bgt.n	8009a68 <_dtoa_r+0xb38>
 8009afc:	9b07      	ldr	r3, [sp, #28]
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	f73f aeb1 	bgt.w	8009866 <_dtoa_r+0x936>
 8009b04:	e7b0      	b.n	8009a68 <_dtoa_r+0xb38>
 8009b06:	bf00      	nop
 8009b08:	0800c6ed 	.word	0x0800c6ed
 8009b0c:	0800c648 	.word	0x0800c648
 8009b10:	0800c671 	.word	0x0800c671

08009b14 <_free_r>:
 8009b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b16:	2900      	cmp	r1, #0
 8009b18:	d044      	beq.n	8009ba4 <_free_r+0x90>
 8009b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b1e:	9001      	str	r0, [sp, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f1a1 0404 	sub.w	r4, r1, #4
 8009b26:	bfb8      	it	lt
 8009b28:	18e4      	addlt	r4, r4, r3
 8009b2a:	f000 f8e7 	bl	8009cfc <__malloc_lock>
 8009b2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ba8 <_free_r+0x94>)
 8009b30:	9801      	ldr	r0, [sp, #4]
 8009b32:	6813      	ldr	r3, [r2, #0]
 8009b34:	b933      	cbnz	r3, 8009b44 <_free_r+0x30>
 8009b36:	6063      	str	r3, [r4, #4]
 8009b38:	6014      	str	r4, [r2, #0]
 8009b3a:	b003      	add	sp, #12
 8009b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b40:	f000 b8e2 	b.w	8009d08 <__malloc_unlock>
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	d908      	bls.n	8009b5a <_free_r+0x46>
 8009b48:	6825      	ldr	r5, [r4, #0]
 8009b4a:	1961      	adds	r1, r4, r5
 8009b4c:	428b      	cmp	r3, r1
 8009b4e:	bf01      	itttt	eq
 8009b50:	6819      	ldreq	r1, [r3, #0]
 8009b52:	685b      	ldreq	r3, [r3, #4]
 8009b54:	1949      	addeq	r1, r1, r5
 8009b56:	6021      	streq	r1, [r4, #0]
 8009b58:	e7ed      	b.n	8009b36 <_free_r+0x22>
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	b10b      	cbz	r3, 8009b64 <_free_r+0x50>
 8009b60:	42a3      	cmp	r3, r4
 8009b62:	d9fa      	bls.n	8009b5a <_free_r+0x46>
 8009b64:	6811      	ldr	r1, [r2, #0]
 8009b66:	1855      	adds	r5, r2, r1
 8009b68:	42a5      	cmp	r5, r4
 8009b6a:	d10b      	bne.n	8009b84 <_free_r+0x70>
 8009b6c:	6824      	ldr	r4, [r4, #0]
 8009b6e:	4421      	add	r1, r4
 8009b70:	1854      	adds	r4, r2, r1
 8009b72:	42a3      	cmp	r3, r4
 8009b74:	6011      	str	r1, [r2, #0]
 8009b76:	d1e0      	bne.n	8009b3a <_free_r+0x26>
 8009b78:	681c      	ldr	r4, [r3, #0]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	6053      	str	r3, [r2, #4]
 8009b7e:	440c      	add	r4, r1
 8009b80:	6014      	str	r4, [r2, #0]
 8009b82:	e7da      	b.n	8009b3a <_free_r+0x26>
 8009b84:	d902      	bls.n	8009b8c <_free_r+0x78>
 8009b86:	230c      	movs	r3, #12
 8009b88:	6003      	str	r3, [r0, #0]
 8009b8a:	e7d6      	b.n	8009b3a <_free_r+0x26>
 8009b8c:	6825      	ldr	r5, [r4, #0]
 8009b8e:	1961      	adds	r1, r4, r5
 8009b90:	428b      	cmp	r3, r1
 8009b92:	bf04      	itt	eq
 8009b94:	6819      	ldreq	r1, [r3, #0]
 8009b96:	685b      	ldreq	r3, [r3, #4]
 8009b98:	6063      	str	r3, [r4, #4]
 8009b9a:	bf04      	itt	eq
 8009b9c:	1949      	addeq	r1, r1, r5
 8009b9e:	6021      	streq	r1, [r4, #0]
 8009ba0:	6054      	str	r4, [r2, #4]
 8009ba2:	e7ca      	b.n	8009b3a <_free_r+0x26>
 8009ba4:	b003      	add	sp, #12
 8009ba6:	bd30      	pop	{r4, r5, pc}
 8009ba8:	200007dc 	.word	0x200007dc

08009bac <malloc>:
 8009bac:	4b02      	ldr	r3, [pc, #8]	; (8009bb8 <malloc+0xc>)
 8009bae:	4601      	mov	r1, r0
 8009bb0:	6818      	ldr	r0, [r3, #0]
 8009bb2:	f000 b823 	b.w	8009bfc <_malloc_r>
 8009bb6:	bf00      	nop
 8009bb8:	20000078 	.word	0x20000078

08009bbc <sbrk_aligned>:
 8009bbc:	b570      	push	{r4, r5, r6, lr}
 8009bbe:	4e0e      	ldr	r6, [pc, #56]	; (8009bf8 <sbrk_aligned+0x3c>)
 8009bc0:	460c      	mov	r4, r1
 8009bc2:	6831      	ldr	r1, [r6, #0]
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	b911      	cbnz	r1, 8009bce <sbrk_aligned+0x12>
 8009bc8:	f001 fe1a 	bl	800b800 <_sbrk_r>
 8009bcc:	6030      	str	r0, [r6, #0]
 8009bce:	4621      	mov	r1, r4
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	f001 fe15 	bl	800b800 <_sbrk_r>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d00a      	beq.n	8009bf0 <sbrk_aligned+0x34>
 8009bda:	1cc4      	adds	r4, r0, #3
 8009bdc:	f024 0403 	bic.w	r4, r4, #3
 8009be0:	42a0      	cmp	r0, r4
 8009be2:	d007      	beq.n	8009bf4 <sbrk_aligned+0x38>
 8009be4:	1a21      	subs	r1, r4, r0
 8009be6:	4628      	mov	r0, r5
 8009be8:	f001 fe0a 	bl	800b800 <_sbrk_r>
 8009bec:	3001      	adds	r0, #1
 8009bee:	d101      	bne.n	8009bf4 <sbrk_aligned+0x38>
 8009bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}
 8009bf8:	200007e0 	.word	0x200007e0

08009bfc <_malloc_r>:
 8009bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c00:	1ccd      	adds	r5, r1, #3
 8009c02:	f025 0503 	bic.w	r5, r5, #3
 8009c06:	3508      	adds	r5, #8
 8009c08:	2d0c      	cmp	r5, #12
 8009c0a:	bf38      	it	cc
 8009c0c:	250c      	movcc	r5, #12
 8009c0e:	2d00      	cmp	r5, #0
 8009c10:	4607      	mov	r7, r0
 8009c12:	db01      	blt.n	8009c18 <_malloc_r+0x1c>
 8009c14:	42a9      	cmp	r1, r5
 8009c16:	d905      	bls.n	8009c24 <_malloc_r+0x28>
 8009c18:	230c      	movs	r3, #12
 8009c1a:	603b      	str	r3, [r7, #0]
 8009c1c:	2600      	movs	r6, #0
 8009c1e:	4630      	mov	r0, r6
 8009c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009cf8 <_malloc_r+0xfc>
 8009c28:	f000 f868 	bl	8009cfc <__malloc_lock>
 8009c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c30:	461c      	mov	r4, r3
 8009c32:	bb5c      	cbnz	r4, 8009c8c <_malloc_r+0x90>
 8009c34:	4629      	mov	r1, r5
 8009c36:	4638      	mov	r0, r7
 8009c38:	f7ff ffc0 	bl	8009bbc <sbrk_aligned>
 8009c3c:	1c43      	adds	r3, r0, #1
 8009c3e:	4604      	mov	r4, r0
 8009c40:	d155      	bne.n	8009cee <_malloc_r+0xf2>
 8009c42:	f8d8 4000 	ldr.w	r4, [r8]
 8009c46:	4626      	mov	r6, r4
 8009c48:	2e00      	cmp	r6, #0
 8009c4a:	d145      	bne.n	8009cd8 <_malloc_r+0xdc>
 8009c4c:	2c00      	cmp	r4, #0
 8009c4e:	d048      	beq.n	8009ce2 <_malloc_r+0xe6>
 8009c50:	6823      	ldr	r3, [r4, #0]
 8009c52:	4631      	mov	r1, r6
 8009c54:	4638      	mov	r0, r7
 8009c56:	eb04 0903 	add.w	r9, r4, r3
 8009c5a:	f001 fdd1 	bl	800b800 <_sbrk_r>
 8009c5e:	4581      	cmp	r9, r0
 8009c60:	d13f      	bne.n	8009ce2 <_malloc_r+0xe6>
 8009c62:	6821      	ldr	r1, [r4, #0]
 8009c64:	1a6d      	subs	r5, r5, r1
 8009c66:	4629      	mov	r1, r5
 8009c68:	4638      	mov	r0, r7
 8009c6a:	f7ff ffa7 	bl	8009bbc <sbrk_aligned>
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d037      	beq.n	8009ce2 <_malloc_r+0xe6>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	442b      	add	r3, r5
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	f8d8 3000 	ldr.w	r3, [r8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d038      	beq.n	8009cf2 <_malloc_r+0xf6>
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	42a2      	cmp	r2, r4
 8009c84:	d12b      	bne.n	8009cde <_malloc_r+0xe2>
 8009c86:	2200      	movs	r2, #0
 8009c88:	605a      	str	r2, [r3, #4]
 8009c8a:	e00f      	b.n	8009cac <_malloc_r+0xb0>
 8009c8c:	6822      	ldr	r2, [r4, #0]
 8009c8e:	1b52      	subs	r2, r2, r5
 8009c90:	d41f      	bmi.n	8009cd2 <_malloc_r+0xd6>
 8009c92:	2a0b      	cmp	r2, #11
 8009c94:	d917      	bls.n	8009cc6 <_malloc_r+0xca>
 8009c96:	1961      	adds	r1, r4, r5
 8009c98:	42a3      	cmp	r3, r4
 8009c9a:	6025      	str	r5, [r4, #0]
 8009c9c:	bf18      	it	ne
 8009c9e:	6059      	strne	r1, [r3, #4]
 8009ca0:	6863      	ldr	r3, [r4, #4]
 8009ca2:	bf08      	it	eq
 8009ca4:	f8c8 1000 	streq.w	r1, [r8]
 8009ca8:	5162      	str	r2, [r4, r5]
 8009caa:	604b      	str	r3, [r1, #4]
 8009cac:	4638      	mov	r0, r7
 8009cae:	f104 060b 	add.w	r6, r4, #11
 8009cb2:	f000 f829 	bl	8009d08 <__malloc_unlock>
 8009cb6:	f026 0607 	bic.w	r6, r6, #7
 8009cba:	1d23      	adds	r3, r4, #4
 8009cbc:	1af2      	subs	r2, r6, r3
 8009cbe:	d0ae      	beq.n	8009c1e <_malloc_r+0x22>
 8009cc0:	1b9b      	subs	r3, r3, r6
 8009cc2:	50a3      	str	r3, [r4, r2]
 8009cc4:	e7ab      	b.n	8009c1e <_malloc_r+0x22>
 8009cc6:	42a3      	cmp	r3, r4
 8009cc8:	6862      	ldr	r2, [r4, #4]
 8009cca:	d1dd      	bne.n	8009c88 <_malloc_r+0x8c>
 8009ccc:	f8c8 2000 	str.w	r2, [r8]
 8009cd0:	e7ec      	b.n	8009cac <_malloc_r+0xb0>
 8009cd2:	4623      	mov	r3, r4
 8009cd4:	6864      	ldr	r4, [r4, #4]
 8009cd6:	e7ac      	b.n	8009c32 <_malloc_r+0x36>
 8009cd8:	4634      	mov	r4, r6
 8009cda:	6876      	ldr	r6, [r6, #4]
 8009cdc:	e7b4      	b.n	8009c48 <_malloc_r+0x4c>
 8009cde:	4613      	mov	r3, r2
 8009ce0:	e7cc      	b.n	8009c7c <_malloc_r+0x80>
 8009ce2:	230c      	movs	r3, #12
 8009ce4:	603b      	str	r3, [r7, #0]
 8009ce6:	4638      	mov	r0, r7
 8009ce8:	f000 f80e 	bl	8009d08 <__malloc_unlock>
 8009cec:	e797      	b.n	8009c1e <_malloc_r+0x22>
 8009cee:	6025      	str	r5, [r4, #0]
 8009cf0:	e7dc      	b.n	8009cac <_malloc_r+0xb0>
 8009cf2:	605b      	str	r3, [r3, #4]
 8009cf4:	deff      	udf	#255	; 0xff
 8009cf6:	bf00      	nop
 8009cf8:	200007dc 	.word	0x200007dc

08009cfc <__malloc_lock>:
 8009cfc:	4801      	ldr	r0, [pc, #4]	; (8009d04 <__malloc_lock+0x8>)
 8009cfe:	f7ff b886 	b.w	8008e0e <__retarget_lock_acquire_recursive>
 8009d02:	bf00      	nop
 8009d04:	200007d8 	.word	0x200007d8

08009d08 <__malloc_unlock>:
 8009d08:	4801      	ldr	r0, [pc, #4]	; (8009d10 <__malloc_unlock+0x8>)
 8009d0a:	f7ff b881 	b.w	8008e10 <__retarget_lock_release_recursive>
 8009d0e:	bf00      	nop
 8009d10:	200007d8 	.word	0x200007d8

08009d14 <_Balloc>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	69c6      	ldr	r6, [r0, #28]
 8009d18:	4604      	mov	r4, r0
 8009d1a:	460d      	mov	r5, r1
 8009d1c:	b976      	cbnz	r6, 8009d3c <_Balloc+0x28>
 8009d1e:	2010      	movs	r0, #16
 8009d20:	f7ff ff44 	bl	8009bac <malloc>
 8009d24:	4602      	mov	r2, r0
 8009d26:	61e0      	str	r0, [r4, #28]
 8009d28:	b920      	cbnz	r0, 8009d34 <_Balloc+0x20>
 8009d2a:	4b18      	ldr	r3, [pc, #96]	; (8009d8c <_Balloc+0x78>)
 8009d2c:	4818      	ldr	r0, [pc, #96]	; (8009d90 <_Balloc+0x7c>)
 8009d2e:	216b      	movs	r1, #107	; 0x6b
 8009d30:	f001 fd8e 	bl	800b850 <__assert_func>
 8009d34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d38:	6006      	str	r6, [r0, #0]
 8009d3a:	60c6      	str	r6, [r0, #12]
 8009d3c:	69e6      	ldr	r6, [r4, #28]
 8009d3e:	68f3      	ldr	r3, [r6, #12]
 8009d40:	b183      	cbz	r3, 8009d64 <_Balloc+0x50>
 8009d42:	69e3      	ldr	r3, [r4, #28]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d4a:	b9b8      	cbnz	r0, 8009d7c <_Balloc+0x68>
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	fa01 f605 	lsl.w	r6, r1, r5
 8009d52:	1d72      	adds	r2, r6, #5
 8009d54:	0092      	lsls	r2, r2, #2
 8009d56:	4620      	mov	r0, r4
 8009d58:	f001 fd98 	bl	800b88c <_calloc_r>
 8009d5c:	b160      	cbz	r0, 8009d78 <_Balloc+0x64>
 8009d5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009d62:	e00e      	b.n	8009d82 <_Balloc+0x6e>
 8009d64:	2221      	movs	r2, #33	; 0x21
 8009d66:	2104      	movs	r1, #4
 8009d68:	4620      	mov	r0, r4
 8009d6a:	f001 fd8f 	bl	800b88c <_calloc_r>
 8009d6e:	69e3      	ldr	r3, [r4, #28]
 8009d70:	60f0      	str	r0, [r6, #12]
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1e4      	bne.n	8009d42 <_Balloc+0x2e>
 8009d78:	2000      	movs	r0, #0
 8009d7a:	bd70      	pop	{r4, r5, r6, pc}
 8009d7c:	6802      	ldr	r2, [r0, #0]
 8009d7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009d82:	2300      	movs	r3, #0
 8009d84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d88:	e7f7      	b.n	8009d7a <_Balloc+0x66>
 8009d8a:	bf00      	nop
 8009d8c:	0800c67e 	.word	0x0800c67e
 8009d90:	0800c6fe 	.word	0x0800c6fe

08009d94 <_Bfree>:
 8009d94:	b570      	push	{r4, r5, r6, lr}
 8009d96:	69c6      	ldr	r6, [r0, #28]
 8009d98:	4605      	mov	r5, r0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	b976      	cbnz	r6, 8009dbc <_Bfree+0x28>
 8009d9e:	2010      	movs	r0, #16
 8009da0:	f7ff ff04 	bl	8009bac <malloc>
 8009da4:	4602      	mov	r2, r0
 8009da6:	61e8      	str	r0, [r5, #28]
 8009da8:	b920      	cbnz	r0, 8009db4 <_Bfree+0x20>
 8009daa:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <_Bfree+0x3c>)
 8009dac:	4809      	ldr	r0, [pc, #36]	; (8009dd4 <_Bfree+0x40>)
 8009dae:	218f      	movs	r1, #143	; 0x8f
 8009db0:	f001 fd4e 	bl	800b850 <__assert_func>
 8009db4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009db8:	6006      	str	r6, [r0, #0]
 8009dba:	60c6      	str	r6, [r0, #12]
 8009dbc:	b13c      	cbz	r4, 8009dce <_Bfree+0x3a>
 8009dbe:	69eb      	ldr	r3, [r5, #28]
 8009dc0:	6862      	ldr	r2, [r4, #4]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009dc8:	6021      	str	r1, [r4, #0]
 8009dca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009dce:	bd70      	pop	{r4, r5, r6, pc}
 8009dd0:	0800c67e 	.word	0x0800c67e
 8009dd4:	0800c6fe 	.word	0x0800c6fe

08009dd8 <__multadd>:
 8009dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ddc:	690d      	ldr	r5, [r1, #16]
 8009dde:	4607      	mov	r7, r0
 8009de0:	460c      	mov	r4, r1
 8009de2:	461e      	mov	r6, r3
 8009de4:	f101 0c14 	add.w	ip, r1, #20
 8009de8:	2000      	movs	r0, #0
 8009dea:	f8dc 3000 	ldr.w	r3, [ip]
 8009dee:	b299      	uxth	r1, r3
 8009df0:	fb02 6101 	mla	r1, r2, r1, r6
 8009df4:	0c1e      	lsrs	r6, r3, #16
 8009df6:	0c0b      	lsrs	r3, r1, #16
 8009df8:	fb02 3306 	mla	r3, r2, r6, r3
 8009dfc:	b289      	uxth	r1, r1
 8009dfe:	3001      	adds	r0, #1
 8009e00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e04:	4285      	cmp	r5, r0
 8009e06:	f84c 1b04 	str.w	r1, [ip], #4
 8009e0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e0e:	dcec      	bgt.n	8009dea <__multadd+0x12>
 8009e10:	b30e      	cbz	r6, 8009e56 <__multadd+0x7e>
 8009e12:	68a3      	ldr	r3, [r4, #8]
 8009e14:	42ab      	cmp	r3, r5
 8009e16:	dc19      	bgt.n	8009e4c <__multadd+0x74>
 8009e18:	6861      	ldr	r1, [r4, #4]
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	3101      	adds	r1, #1
 8009e1e:	f7ff ff79 	bl	8009d14 <_Balloc>
 8009e22:	4680      	mov	r8, r0
 8009e24:	b928      	cbnz	r0, 8009e32 <__multadd+0x5a>
 8009e26:	4602      	mov	r2, r0
 8009e28:	4b0c      	ldr	r3, [pc, #48]	; (8009e5c <__multadd+0x84>)
 8009e2a:	480d      	ldr	r0, [pc, #52]	; (8009e60 <__multadd+0x88>)
 8009e2c:	21ba      	movs	r1, #186	; 0xba
 8009e2e:	f001 fd0f 	bl	800b850 <__assert_func>
 8009e32:	6922      	ldr	r2, [r4, #16]
 8009e34:	3202      	adds	r2, #2
 8009e36:	f104 010c 	add.w	r1, r4, #12
 8009e3a:	0092      	lsls	r2, r2, #2
 8009e3c:	300c      	adds	r0, #12
 8009e3e:	f001 fcef 	bl	800b820 <memcpy>
 8009e42:	4621      	mov	r1, r4
 8009e44:	4638      	mov	r0, r7
 8009e46:	f7ff ffa5 	bl	8009d94 <_Bfree>
 8009e4a:	4644      	mov	r4, r8
 8009e4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e50:	3501      	adds	r5, #1
 8009e52:	615e      	str	r6, [r3, #20]
 8009e54:	6125      	str	r5, [r4, #16]
 8009e56:	4620      	mov	r0, r4
 8009e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e5c:	0800c6ed 	.word	0x0800c6ed
 8009e60:	0800c6fe 	.word	0x0800c6fe

08009e64 <__s2b>:
 8009e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e68:	460c      	mov	r4, r1
 8009e6a:	4615      	mov	r5, r2
 8009e6c:	461f      	mov	r7, r3
 8009e6e:	2209      	movs	r2, #9
 8009e70:	3308      	adds	r3, #8
 8009e72:	4606      	mov	r6, r0
 8009e74:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e78:	2100      	movs	r1, #0
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	db09      	blt.n	8009e94 <__s2b+0x30>
 8009e80:	4630      	mov	r0, r6
 8009e82:	f7ff ff47 	bl	8009d14 <_Balloc>
 8009e86:	b940      	cbnz	r0, 8009e9a <__s2b+0x36>
 8009e88:	4602      	mov	r2, r0
 8009e8a:	4b19      	ldr	r3, [pc, #100]	; (8009ef0 <__s2b+0x8c>)
 8009e8c:	4819      	ldr	r0, [pc, #100]	; (8009ef4 <__s2b+0x90>)
 8009e8e:	21d3      	movs	r1, #211	; 0xd3
 8009e90:	f001 fcde 	bl	800b850 <__assert_func>
 8009e94:	0052      	lsls	r2, r2, #1
 8009e96:	3101      	adds	r1, #1
 8009e98:	e7f0      	b.n	8009e7c <__s2b+0x18>
 8009e9a:	9b08      	ldr	r3, [sp, #32]
 8009e9c:	6143      	str	r3, [r0, #20]
 8009e9e:	2d09      	cmp	r5, #9
 8009ea0:	f04f 0301 	mov.w	r3, #1
 8009ea4:	6103      	str	r3, [r0, #16]
 8009ea6:	dd16      	ble.n	8009ed6 <__s2b+0x72>
 8009ea8:	f104 0909 	add.w	r9, r4, #9
 8009eac:	46c8      	mov	r8, r9
 8009eae:	442c      	add	r4, r5
 8009eb0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009eb4:	4601      	mov	r1, r0
 8009eb6:	3b30      	subs	r3, #48	; 0x30
 8009eb8:	220a      	movs	r2, #10
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f7ff ff8c 	bl	8009dd8 <__multadd>
 8009ec0:	45a0      	cmp	r8, r4
 8009ec2:	d1f5      	bne.n	8009eb0 <__s2b+0x4c>
 8009ec4:	f1a5 0408 	sub.w	r4, r5, #8
 8009ec8:	444c      	add	r4, r9
 8009eca:	1b2d      	subs	r5, r5, r4
 8009ecc:	1963      	adds	r3, r4, r5
 8009ece:	42bb      	cmp	r3, r7
 8009ed0:	db04      	blt.n	8009edc <__s2b+0x78>
 8009ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed6:	340a      	adds	r4, #10
 8009ed8:	2509      	movs	r5, #9
 8009eda:	e7f6      	b.n	8009eca <__s2b+0x66>
 8009edc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009ee0:	4601      	mov	r1, r0
 8009ee2:	3b30      	subs	r3, #48	; 0x30
 8009ee4:	220a      	movs	r2, #10
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f7ff ff76 	bl	8009dd8 <__multadd>
 8009eec:	e7ee      	b.n	8009ecc <__s2b+0x68>
 8009eee:	bf00      	nop
 8009ef0:	0800c6ed 	.word	0x0800c6ed
 8009ef4:	0800c6fe 	.word	0x0800c6fe

08009ef8 <__hi0bits>:
 8009ef8:	0c03      	lsrs	r3, r0, #16
 8009efa:	041b      	lsls	r3, r3, #16
 8009efc:	b9d3      	cbnz	r3, 8009f34 <__hi0bits+0x3c>
 8009efe:	0400      	lsls	r0, r0, #16
 8009f00:	2310      	movs	r3, #16
 8009f02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009f06:	bf04      	itt	eq
 8009f08:	0200      	lsleq	r0, r0, #8
 8009f0a:	3308      	addeq	r3, #8
 8009f0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009f10:	bf04      	itt	eq
 8009f12:	0100      	lsleq	r0, r0, #4
 8009f14:	3304      	addeq	r3, #4
 8009f16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009f1a:	bf04      	itt	eq
 8009f1c:	0080      	lsleq	r0, r0, #2
 8009f1e:	3302      	addeq	r3, #2
 8009f20:	2800      	cmp	r0, #0
 8009f22:	db05      	blt.n	8009f30 <__hi0bits+0x38>
 8009f24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009f28:	f103 0301 	add.w	r3, r3, #1
 8009f2c:	bf08      	it	eq
 8009f2e:	2320      	moveq	r3, #32
 8009f30:	4618      	mov	r0, r3
 8009f32:	4770      	bx	lr
 8009f34:	2300      	movs	r3, #0
 8009f36:	e7e4      	b.n	8009f02 <__hi0bits+0xa>

08009f38 <__lo0bits>:
 8009f38:	6803      	ldr	r3, [r0, #0]
 8009f3a:	f013 0207 	ands.w	r2, r3, #7
 8009f3e:	d00c      	beq.n	8009f5a <__lo0bits+0x22>
 8009f40:	07d9      	lsls	r1, r3, #31
 8009f42:	d422      	bmi.n	8009f8a <__lo0bits+0x52>
 8009f44:	079a      	lsls	r2, r3, #30
 8009f46:	bf49      	itett	mi
 8009f48:	085b      	lsrmi	r3, r3, #1
 8009f4a:	089b      	lsrpl	r3, r3, #2
 8009f4c:	6003      	strmi	r3, [r0, #0]
 8009f4e:	2201      	movmi	r2, #1
 8009f50:	bf5c      	itt	pl
 8009f52:	6003      	strpl	r3, [r0, #0]
 8009f54:	2202      	movpl	r2, #2
 8009f56:	4610      	mov	r0, r2
 8009f58:	4770      	bx	lr
 8009f5a:	b299      	uxth	r1, r3
 8009f5c:	b909      	cbnz	r1, 8009f62 <__lo0bits+0x2a>
 8009f5e:	0c1b      	lsrs	r3, r3, #16
 8009f60:	2210      	movs	r2, #16
 8009f62:	b2d9      	uxtb	r1, r3
 8009f64:	b909      	cbnz	r1, 8009f6a <__lo0bits+0x32>
 8009f66:	3208      	adds	r2, #8
 8009f68:	0a1b      	lsrs	r3, r3, #8
 8009f6a:	0719      	lsls	r1, r3, #28
 8009f6c:	bf04      	itt	eq
 8009f6e:	091b      	lsreq	r3, r3, #4
 8009f70:	3204      	addeq	r2, #4
 8009f72:	0799      	lsls	r1, r3, #30
 8009f74:	bf04      	itt	eq
 8009f76:	089b      	lsreq	r3, r3, #2
 8009f78:	3202      	addeq	r2, #2
 8009f7a:	07d9      	lsls	r1, r3, #31
 8009f7c:	d403      	bmi.n	8009f86 <__lo0bits+0x4e>
 8009f7e:	085b      	lsrs	r3, r3, #1
 8009f80:	f102 0201 	add.w	r2, r2, #1
 8009f84:	d003      	beq.n	8009f8e <__lo0bits+0x56>
 8009f86:	6003      	str	r3, [r0, #0]
 8009f88:	e7e5      	b.n	8009f56 <__lo0bits+0x1e>
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	e7e3      	b.n	8009f56 <__lo0bits+0x1e>
 8009f8e:	2220      	movs	r2, #32
 8009f90:	e7e1      	b.n	8009f56 <__lo0bits+0x1e>
	...

08009f94 <__i2b>:
 8009f94:	b510      	push	{r4, lr}
 8009f96:	460c      	mov	r4, r1
 8009f98:	2101      	movs	r1, #1
 8009f9a:	f7ff febb 	bl	8009d14 <_Balloc>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	b928      	cbnz	r0, 8009fae <__i2b+0x1a>
 8009fa2:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <__i2b+0x24>)
 8009fa4:	4805      	ldr	r0, [pc, #20]	; (8009fbc <__i2b+0x28>)
 8009fa6:	f240 1145 	movw	r1, #325	; 0x145
 8009faa:	f001 fc51 	bl	800b850 <__assert_func>
 8009fae:	2301      	movs	r3, #1
 8009fb0:	6144      	str	r4, [r0, #20]
 8009fb2:	6103      	str	r3, [r0, #16]
 8009fb4:	bd10      	pop	{r4, pc}
 8009fb6:	bf00      	nop
 8009fb8:	0800c6ed 	.word	0x0800c6ed
 8009fbc:	0800c6fe 	.word	0x0800c6fe

08009fc0 <__multiply>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	4691      	mov	r9, r2
 8009fc6:	690a      	ldr	r2, [r1, #16]
 8009fc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	bfb8      	it	lt
 8009fd0:	460b      	movlt	r3, r1
 8009fd2:	460c      	mov	r4, r1
 8009fd4:	bfbc      	itt	lt
 8009fd6:	464c      	movlt	r4, r9
 8009fd8:	4699      	movlt	r9, r3
 8009fda:	6927      	ldr	r7, [r4, #16]
 8009fdc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009fe0:	68a3      	ldr	r3, [r4, #8]
 8009fe2:	6861      	ldr	r1, [r4, #4]
 8009fe4:	eb07 060a 	add.w	r6, r7, sl
 8009fe8:	42b3      	cmp	r3, r6
 8009fea:	b085      	sub	sp, #20
 8009fec:	bfb8      	it	lt
 8009fee:	3101      	addlt	r1, #1
 8009ff0:	f7ff fe90 	bl	8009d14 <_Balloc>
 8009ff4:	b930      	cbnz	r0, 800a004 <__multiply+0x44>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	4b44      	ldr	r3, [pc, #272]	; (800a10c <__multiply+0x14c>)
 8009ffa:	4845      	ldr	r0, [pc, #276]	; (800a110 <__multiply+0x150>)
 8009ffc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a000:	f001 fc26 	bl	800b850 <__assert_func>
 800a004:	f100 0514 	add.w	r5, r0, #20
 800a008:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a00c:	462b      	mov	r3, r5
 800a00e:	2200      	movs	r2, #0
 800a010:	4543      	cmp	r3, r8
 800a012:	d321      	bcc.n	800a058 <__multiply+0x98>
 800a014:	f104 0314 	add.w	r3, r4, #20
 800a018:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a01c:	f109 0314 	add.w	r3, r9, #20
 800a020:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a024:	9202      	str	r2, [sp, #8]
 800a026:	1b3a      	subs	r2, r7, r4
 800a028:	3a15      	subs	r2, #21
 800a02a:	f022 0203 	bic.w	r2, r2, #3
 800a02e:	3204      	adds	r2, #4
 800a030:	f104 0115 	add.w	r1, r4, #21
 800a034:	428f      	cmp	r7, r1
 800a036:	bf38      	it	cc
 800a038:	2204      	movcc	r2, #4
 800a03a:	9201      	str	r2, [sp, #4]
 800a03c:	9a02      	ldr	r2, [sp, #8]
 800a03e:	9303      	str	r3, [sp, #12]
 800a040:	429a      	cmp	r2, r3
 800a042:	d80c      	bhi.n	800a05e <__multiply+0x9e>
 800a044:	2e00      	cmp	r6, #0
 800a046:	dd03      	ble.n	800a050 <__multiply+0x90>
 800a048:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d05b      	beq.n	800a108 <__multiply+0x148>
 800a050:	6106      	str	r6, [r0, #16]
 800a052:	b005      	add	sp, #20
 800a054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a058:	f843 2b04 	str.w	r2, [r3], #4
 800a05c:	e7d8      	b.n	800a010 <__multiply+0x50>
 800a05e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a062:	f1ba 0f00 	cmp.w	sl, #0
 800a066:	d024      	beq.n	800a0b2 <__multiply+0xf2>
 800a068:	f104 0e14 	add.w	lr, r4, #20
 800a06c:	46a9      	mov	r9, r5
 800a06e:	f04f 0c00 	mov.w	ip, #0
 800a072:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a076:	f8d9 1000 	ldr.w	r1, [r9]
 800a07a:	fa1f fb82 	uxth.w	fp, r2
 800a07e:	b289      	uxth	r1, r1
 800a080:	fb0a 110b 	mla	r1, sl, fp, r1
 800a084:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a088:	f8d9 2000 	ldr.w	r2, [r9]
 800a08c:	4461      	add	r1, ip
 800a08e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a092:	fb0a c20b 	mla	r2, sl, fp, ip
 800a096:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a09a:	b289      	uxth	r1, r1
 800a09c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0a0:	4577      	cmp	r7, lr
 800a0a2:	f849 1b04 	str.w	r1, [r9], #4
 800a0a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a0aa:	d8e2      	bhi.n	800a072 <__multiply+0xb2>
 800a0ac:	9a01      	ldr	r2, [sp, #4]
 800a0ae:	f845 c002 	str.w	ip, [r5, r2]
 800a0b2:	9a03      	ldr	r2, [sp, #12]
 800a0b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	f1b9 0f00 	cmp.w	r9, #0
 800a0be:	d021      	beq.n	800a104 <__multiply+0x144>
 800a0c0:	6829      	ldr	r1, [r5, #0]
 800a0c2:	f104 0c14 	add.w	ip, r4, #20
 800a0c6:	46ae      	mov	lr, r5
 800a0c8:	f04f 0a00 	mov.w	sl, #0
 800a0cc:	f8bc b000 	ldrh.w	fp, [ip]
 800a0d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a0d4:	fb09 220b 	mla	r2, r9, fp, r2
 800a0d8:	4452      	add	r2, sl
 800a0da:	b289      	uxth	r1, r1
 800a0dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a0e0:	f84e 1b04 	str.w	r1, [lr], #4
 800a0e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a0e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0ec:	f8be 1000 	ldrh.w	r1, [lr]
 800a0f0:	fb09 110a 	mla	r1, r9, sl, r1
 800a0f4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a0f8:	4567      	cmp	r7, ip
 800a0fa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a0fe:	d8e5      	bhi.n	800a0cc <__multiply+0x10c>
 800a100:	9a01      	ldr	r2, [sp, #4]
 800a102:	50a9      	str	r1, [r5, r2]
 800a104:	3504      	adds	r5, #4
 800a106:	e799      	b.n	800a03c <__multiply+0x7c>
 800a108:	3e01      	subs	r6, #1
 800a10a:	e79b      	b.n	800a044 <__multiply+0x84>
 800a10c:	0800c6ed 	.word	0x0800c6ed
 800a110:	0800c6fe 	.word	0x0800c6fe

0800a114 <__pow5mult>:
 800a114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a118:	4615      	mov	r5, r2
 800a11a:	f012 0203 	ands.w	r2, r2, #3
 800a11e:	4606      	mov	r6, r0
 800a120:	460f      	mov	r7, r1
 800a122:	d007      	beq.n	800a134 <__pow5mult+0x20>
 800a124:	4c25      	ldr	r4, [pc, #148]	; (800a1bc <__pow5mult+0xa8>)
 800a126:	3a01      	subs	r2, #1
 800a128:	2300      	movs	r3, #0
 800a12a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a12e:	f7ff fe53 	bl	8009dd8 <__multadd>
 800a132:	4607      	mov	r7, r0
 800a134:	10ad      	asrs	r5, r5, #2
 800a136:	d03d      	beq.n	800a1b4 <__pow5mult+0xa0>
 800a138:	69f4      	ldr	r4, [r6, #28]
 800a13a:	b97c      	cbnz	r4, 800a15c <__pow5mult+0x48>
 800a13c:	2010      	movs	r0, #16
 800a13e:	f7ff fd35 	bl	8009bac <malloc>
 800a142:	4602      	mov	r2, r0
 800a144:	61f0      	str	r0, [r6, #28]
 800a146:	b928      	cbnz	r0, 800a154 <__pow5mult+0x40>
 800a148:	4b1d      	ldr	r3, [pc, #116]	; (800a1c0 <__pow5mult+0xac>)
 800a14a:	481e      	ldr	r0, [pc, #120]	; (800a1c4 <__pow5mult+0xb0>)
 800a14c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a150:	f001 fb7e 	bl	800b850 <__assert_func>
 800a154:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a158:	6004      	str	r4, [r0, #0]
 800a15a:	60c4      	str	r4, [r0, #12]
 800a15c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a160:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a164:	b94c      	cbnz	r4, 800a17a <__pow5mult+0x66>
 800a166:	f240 2171 	movw	r1, #625	; 0x271
 800a16a:	4630      	mov	r0, r6
 800a16c:	f7ff ff12 	bl	8009f94 <__i2b>
 800a170:	2300      	movs	r3, #0
 800a172:	f8c8 0008 	str.w	r0, [r8, #8]
 800a176:	4604      	mov	r4, r0
 800a178:	6003      	str	r3, [r0, #0]
 800a17a:	f04f 0900 	mov.w	r9, #0
 800a17e:	07eb      	lsls	r3, r5, #31
 800a180:	d50a      	bpl.n	800a198 <__pow5mult+0x84>
 800a182:	4639      	mov	r1, r7
 800a184:	4622      	mov	r2, r4
 800a186:	4630      	mov	r0, r6
 800a188:	f7ff ff1a 	bl	8009fc0 <__multiply>
 800a18c:	4639      	mov	r1, r7
 800a18e:	4680      	mov	r8, r0
 800a190:	4630      	mov	r0, r6
 800a192:	f7ff fdff 	bl	8009d94 <_Bfree>
 800a196:	4647      	mov	r7, r8
 800a198:	106d      	asrs	r5, r5, #1
 800a19a:	d00b      	beq.n	800a1b4 <__pow5mult+0xa0>
 800a19c:	6820      	ldr	r0, [r4, #0]
 800a19e:	b938      	cbnz	r0, 800a1b0 <__pow5mult+0x9c>
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	4621      	mov	r1, r4
 800a1a4:	4630      	mov	r0, r6
 800a1a6:	f7ff ff0b 	bl	8009fc0 <__multiply>
 800a1aa:	6020      	str	r0, [r4, #0]
 800a1ac:	f8c0 9000 	str.w	r9, [r0]
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	e7e4      	b.n	800a17e <__pow5mult+0x6a>
 800a1b4:	4638      	mov	r0, r7
 800a1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ba:	bf00      	nop
 800a1bc:	0800c848 	.word	0x0800c848
 800a1c0:	0800c67e 	.word	0x0800c67e
 800a1c4:	0800c6fe 	.word	0x0800c6fe

0800a1c8 <__lshift>:
 800a1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	460c      	mov	r4, r1
 800a1ce:	6849      	ldr	r1, [r1, #4]
 800a1d0:	6923      	ldr	r3, [r4, #16]
 800a1d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1d6:	68a3      	ldr	r3, [r4, #8]
 800a1d8:	4607      	mov	r7, r0
 800a1da:	4691      	mov	r9, r2
 800a1dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1e0:	f108 0601 	add.w	r6, r8, #1
 800a1e4:	42b3      	cmp	r3, r6
 800a1e6:	db0b      	blt.n	800a200 <__lshift+0x38>
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	f7ff fd93 	bl	8009d14 <_Balloc>
 800a1ee:	4605      	mov	r5, r0
 800a1f0:	b948      	cbnz	r0, 800a206 <__lshift+0x3e>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	4b28      	ldr	r3, [pc, #160]	; (800a298 <__lshift+0xd0>)
 800a1f6:	4829      	ldr	r0, [pc, #164]	; (800a29c <__lshift+0xd4>)
 800a1f8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a1fc:	f001 fb28 	bl	800b850 <__assert_func>
 800a200:	3101      	adds	r1, #1
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	e7ee      	b.n	800a1e4 <__lshift+0x1c>
 800a206:	2300      	movs	r3, #0
 800a208:	f100 0114 	add.w	r1, r0, #20
 800a20c:	f100 0210 	add.w	r2, r0, #16
 800a210:	4618      	mov	r0, r3
 800a212:	4553      	cmp	r3, sl
 800a214:	db33      	blt.n	800a27e <__lshift+0xb6>
 800a216:	6920      	ldr	r0, [r4, #16]
 800a218:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a21c:	f104 0314 	add.w	r3, r4, #20
 800a220:	f019 091f 	ands.w	r9, r9, #31
 800a224:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a228:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a22c:	d02b      	beq.n	800a286 <__lshift+0xbe>
 800a22e:	f1c9 0e20 	rsb	lr, r9, #32
 800a232:	468a      	mov	sl, r1
 800a234:	2200      	movs	r2, #0
 800a236:	6818      	ldr	r0, [r3, #0]
 800a238:	fa00 f009 	lsl.w	r0, r0, r9
 800a23c:	4310      	orrs	r0, r2
 800a23e:	f84a 0b04 	str.w	r0, [sl], #4
 800a242:	f853 2b04 	ldr.w	r2, [r3], #4
 800a246:	459c      	cmp	ip, r3
 800a248:	fa22 f20e 	lsr.w	r2, r2, lr
 800a24c:	d8f3      	bhi.n	800a236 <__lshift+0x6e>
 800a24e:	ebac 0304 	sub.w	r3, ip, r4
 800a252:	3b15      	subs	r3, #21
 800a254:	f023 0303 	bic.w	r3, r3, #3
 800a258:	3304      	adds	r3, #4
 800a25a:	f104 0015 	add.w	r0, r4, #21
 800a25e:	4584      	cmp	ip, r0
 800a260:	bf38      	it	cc
 800a262:	2304      	movcc	r3, #4
 800a264:	50ca      	str	r2, [r1, r3]
 800a266:	b10a      	cbz	r2, 800a26c <__lshift+0xa4>
 800a268:	f108 0602 	add.w	r6, r8, #2
 800a26c:	3e01      	subs	r6, #1
 800a26e:	4638      	mov	r0, r7
 800a270:	612e      	str	r6, [r5, #16]
 800a272:	4621      	mov	r1, r4
 800a274:	f7ff fd8e 	bl	8009d94 <_Bfree>
 800a278:	4628      	mov	r0, r5
 800a27a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a27e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a282:	3301      	adds	r3, #1
 800a284:	e7c5      	b.n	800a212 <__lshift+0x4a>
 800a286:	3904      	subs	r1, #4
 800a288:	f853 2b04 	ldr.w	r2, [r3], #4
 800a28c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a290:	459c      	cmp	ip, r3
 800a292:	d8f9      	bhi.n	800a288 <__lshift+0xc0>
 800a294:	e7ea      	b.n	800a26c <__lshift+0xa4>
 800a296:	bf00      	nop
 800a298:	0800c6ed 	.word	0x0800c6ed
 800a29c:	0800c6fe 	.word	0x0800c6fe

0800a2a0 <__mcmp>:
 800a2a0:	b530      	push	{r4, r5, lr}
 800a2a2:	6902      	ldr	r2, [r0, #16]
 800a2a4:	690c      	ldr	r4, [r1, #16]
 800a2a6:	1b12      	subs	r2, r2, r4
 800a2a8:	d10e      	bne.n	800a2c8 <__mcmp+0x28>
 800a2aa:	f100 0314 	add.w	r3, r0, #20
 800a2ae:	3114      	adds	r1, #20
 800a2b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a2b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a2b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a2bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a2c0:	42a5      	cmp	r5, r4
 800a2c2:	d003      	beq.n	800a2cc <__mcmp+0x2c>
 800a2c4:	d305      	bcc.n	800a2d2 <__mcmp+0x32>
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	4610      	mov	r0, r2
 800a2ca:	bd30      	pop	{r4, r5, pc}
 800a2cc:	4283      	cmp	r3, r0
 800a2ce:	d3f3      	bcc.n	800a2b8 <__mcmp+0x18>
 800a2d0:	e7fa      	b.n	800a2c8 <__mcmp+0x28>
 800a2d2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d6:	e7f7      	b.n	800a2c8 <__mcmp+0x28>

0800a2d8 <__mdiff>:
 800a2d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2dc:	460c      	mov	r4, r1
 800a2de:	4606      	mov	r6, r0
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	4690      	mov	r8, r2
 800a2e6:	f7ff ffdb 	bl	800a2a0 <__mcmp>
 800a2ea:	1e05      	subs	r5, r0, #0
 800a2ec:	d110      	bne.n	800a310 <__mdiff+0x38>
 800a2ee:	4629      	mov	r1, r5
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	f7ff fd0f 	bl	8009d14 <_Balloc>
 800a2f6:	b930      	cbnz	r0, 800a306 <__mdiff+0x2e>
 800a2f8:	4b3a      	ldr	r3, [pc, #232]	; (800a3e4 <__mdiff+0x10c>)
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	f240 2137 	movw	r1, #567	; 0x237
 800a300:	4839      	ldr	r0, [pc, #228]	; (800a3e8 <__mdiff+0x110>)
 800a302:	f001 faa5 	bl	800b850 <__assert_func>
 800a306:	2301      	movs	r3, #1
 800a308:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a30c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a310:	bfa4      	itt	ge
 800a312:	4643      	movge	r3, r8
 800a314:	46a0      	movge	r8, r4
 800a316:	4630      	mov	r0, r6
 800a318:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a31c:	bfa6      	itte	ge
 800a31e:	461c      	movge	r4, r3
 800a320:	2500      	movge	r5, #0
 800a322:	2501      	movlt	r5, #1
 800a324:	f7ff fcf6 	bl	8009d14 <_Balloc>
 800a328:	b920      	cbnz	r0, 800a334 <__mdiff+0x5c>
 800a32a:	4b2e      	ldr	r3, [pc, #184]	; (800a3e4 <__mdiff+0x10c>)
 800a32c:	4602      	mov	r2, r0
 800a32e:	f240 2145 	movw	r1, #581	; 0x245
 800a332:	e7e5      	b.n	800a300 <__mdiff+0x28>
 800a334:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a338:	6926      	ldr	r6, [r4, #16]
 800a33a:	60c5      	str	r5, [r0, #12]
 800a33c:	f104 0914 	add.w	r9, r4, #20
 800a340:	f108 0514 	add.w	r5, r8, #20
 800a344:	f100 0e14 	add.w	lr, r0, #20
 800a348:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a34c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a350:	f108 0210 	add.w	r2, r8, #16
 800a354:	46f2      	mov	sl, lr
 800a356:	2100      	movs	r1, #0
 800a358:	f859 3b04 	ldr.w	r3, [r9], #4
 800a35c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a360:	fa11 f88b 	uxtah	r8, r1, fp
 800a364:	b299      	uxth	r1, r3
 800a366:	0c1b      	lsrs	r3, r3, #16
 800a368:	eba8 0801 	sub.w	r8, r8, r1
 800a36c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a370:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a374:	fa1f f888 	uxth.w	r8, r8
 800a378:	1419      	asrs	r1, r3, #16
 800a37a:	454e      	cmp	r6, r9
 800a37c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a380:	f84a 3b04 	str.w	r3, [sl], #4
 800a384:	d8e8      	bhi.n	800a358 <__mdiff+0x80>
 800a386:	1b33      	subs	r3, r6, r4
 800a388:	3b15      	subs	r3, #21
 800a38a:	f023 0303 	bic.w	r3, r3, #3
 800a38e:	3304      	adds	r3, #4
 800a390:	3415      	adds	r4, #21
 800a392:	42a6      	cmp	r6, r4
 800a394:	bf38      	it	cc
 800a396:	2304      	movcc	r3, #4
 800a398:	441d      	add	r5, r3
 800a39a:	4473      	add	r3, lr
 800a39c:	469e      	mov	lr, r3
 800a39e:	462e      	mov	r6, r5
 800a3a0:	4566      	cmp	r6, ip
 800a3a2:	d30e      	bcc.n	800a3c2 <__mdiff+0xea>
 800a3a4:	f10c 0203 	add.w	r2, ip, #3
 800a3a8:	1b52      	subs	r2, r2, r5
 800a3aa:	f022 0203 	bic.w	r2, r2, #3
 800a3ae:	3d03      	subs	r5, #3
 800a3b0:	45ac      	cmp	ip, r5
 800a3b2:	bf38      	it	cc
 800a3b4:	2200      	movcc	r2, #0
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a3bc:	b17a      	cbz	r2, 800a3de <__mdiff+0x106>
 800a3be:	6107      	str	r7, [r0, #16]
 800a3c0:	e7a4      	b.n	800a30c <__mdiff+0x34>
 800a3c2:	f856 8b04 	ldr.w	r8, [r6], #4
 800a3c6:	fa11 f288 	uxtah	r2, r1, r8
 800a3ca:	1414      	asrs	r4, r2, #16
 800a3cc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a3d0:	b292      	uxth	r2, r2
 800a3d2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a3d6:	f84e 2b04 	str.w	r2, [lr], #4
 800a3da:	1421      	asrs	r1, r4, #16
 800a3dc:	e7e0      	b.n	800a3a0 <__mdiff+0xc8>
 800a3de:	3f01      	subs	r7, #1
 800a3e0:	e7ea      	b.n	800a3b8 <__mdiff+0xe0>
 800a3e2:	bf00      	nop
 800a3e4:	0800c6ed 	.word	0x0800c6ed
 800a3e8:	0800c6fe 	.word	0x0800c6fe

0800a3ec <__ulp>:
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	ed8d 0b00 	vstr	d0, [sp]
 800a3f2:	9a01      	ldr	r2, [sp, #4]
 800a3f4:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <__ulp+0x48>)
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	dc08      	bgt.n	800a412 <__ulp+0x26>
 800a400:	425b      	negs	r3, r3
 800a402:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a406:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a40a:	da04      	bge.n	800a416 <__ulp+0x2a>
 800a40c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a410:	4113      	asrs	r3, r2
 800a412:	2200      	movs	r2, #0
 800a414:	e008      	b.n	800a428 <__ulp+0x3c>
 800a416:	f1a2 0314 	sub.w	r3, r2, #20
 800a41a:	2b1e      	cmp	r3, #30
 800a41c:	bfda      	itte	le
 800a41e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a422:	40da      	lsrle	r2, r3
 800a424:	2201      	movgt	r2, #1
 800a426:	2300      	movs	r3, #0
 800a428:	4619      	mov	r1, r3
 800a42a:	4610      	mov	r0, r2
 800a42c:	ec41 0b10 	vmov	d0, r0, r1
 800a430:	b002      	add	sp, #8
 800a432:	4770      	bx	lr
 800a434:	7ff00000 	.word	0x7ff00000

0800a438 <__b2d>:
 800a438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a43c:	6906      	ldr	r6, [r0, #16]
 800a43e:	f100 0814 	add.w	r8, r0, #20
 800a442:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a446:	1f37      	subs	r7, r6, #4
 800a448:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a44c:	4610      	mov	r0, r2
 800a44e:	f7ff fd53 	bl	8009ef8 <__hi0bits>
 800a452:	f1c0 0320 	rsb	r3, r0, #32
 800a456:	280a      	cmp	r0, #10
 800a458:	600b      	str	r3, [r1, #0]
 800a45a:	491b      	ldr	r1, [pc, #108]	; (800a4c8 <__b2d+0x90>)
 800a45c:	dc15      	bgt.n	800a48a <__b2d+0x52>
 800a45e:	f1c0 0c0b 	rsb	ip, r0, #11
 800a462:	fa22 f30c 	lsr.w	r3, r2, ip
 800a466:	45b8      	cmp	r8, r7
 800a468:	ea43 0501 	orr.w	r5, r3, r1
 800a46c:	bf34      	ite	cc
 800a46e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a472:	2300      	movcs	r3, #0
 800a474:	3015      	adds	r0, #21
 800a476:	fa02 f000 	lsl.w	r0, r2, r0
 800a47a:	fa23 f30c 	lsr.w	r3, r3, ip
 800a47e:	4303      	orrs	r3, r0
 800a480:	461c      	mov	r4, r3
 800a482:	ec45 4b10 	vmov	d0, r4, r5
 800a486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a48a:	45b8      	cmp	r8, r7
 800a48c:	bf3a      	itte	cc
 800a48e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a492:	f1a6 0708 	subcc.w	r7, r6, #8
 800a496:	2300      	movcs	r3, #0
 800a498:	380b      	subs	r0, #11
 800a49a:	d012      	beq.n	800a4c2 <__b2d+0x8a>
 800a49c:	f1c0 0120 	rsb	r1, r0, #32
 800a4a0:	fa23 f401 	lsr.w	r4, r3, r1
 800a4a4:	4082      	lsls	r2, r0
 800a4a6:	4322      	orrs	r2, r4
 800a4a8:	4547      	cmp	r7, r8
 800a4aa:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a4ae:	bf8c      	ite	hi
 800a4b0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a4b4:	2200      	movls	r2, #0
 800a4b6:	4083      	lsls	r3, r0
 800a4b8:	40ca      	lsrs	r2, r1
 800a4ba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	e7de      	b.n	800a480 <__b2d+0x48>
 800a4c2:	ea42 0501 	orr.w	r5, r2, r1
 800a4c6:	e7db      	b.n	800a480 <__b2d+0x48>
 800a4c8:	3ff00000 	.word	0x3ff00000

0800a4cc <__d2b>:
 800a4cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a4d0:	460f      	mov	r7, r1
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	ec59 8b10 	vmov	r8, r9, d0
 800a4d8:	4616      	mov	r6, r2
 800a4da:	f7ff fc1b 	bl	8009d14 <_Balloc>
 800a4de:	4604      	mov	r4, r0
 800a4e0:	b930      	cbnz	r0, 800a4f0 <__d2b+0x24>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	4b24      	ldr	r3, [pc, #144]	; (800a578 <__d2b+0xac>)
 800a4e6:	4825      	ldr	r0, [pc, #148]	; (800a57c <__d2b+0xb0>)
 800a4e8:	f240 310f 	movw	r1, #783	; 0x30f
 800a4ec:	f001 f9b0 	bl	800b850 <__assert_func>
 800a4f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a4f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a4f8:	bb2d      	cbnz	r5, 800a546 <__d2b+0x7a>
 800a4fa:	9301      	str	r3, [sp, #4]
 800a4fc:	f1b8 0300 	subs.w	r3, r8, #0
 800a500:	d026      	beq.n	800a550 <__d2b+0x84>
 800a502:	4668      	mov	r0, sp
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	f7ff fd17 	bl	8009f38 <__lo0bits>
 800a50a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a50e:	b1e8      	cbz	r0, 800a54c <__d2b+0x80>
 800a510:	f1c0 0320 	rsb	r3, r0, #32
 800a514:	fa02 f303 	lsl.w	r3, r2, r3
 800a518:	430b      	orrs	r3, r1
 800a51a:	40c2      	lsrs	r2, r0
 800a51c:	6163      	str	r3, [r4, #20]
 800a51e:	9201      	str	r2, [sp, #4]
 800a520:	9b01      	ldr	r3, [sp, #4]
 800a522:	61a3      	str	r3, [r4, #24]
 800a524:	2b00      	cmp	r3, #0
 800a526:	bf14      	ite	ne
 800a528:	2202      	movne	r2, #2
 800a52a:	2201      	moveq	r2, #1
 800a52c:	6122      	str	r2, [r4, #16]
 800a52e:	b1bd      	cbz	r5, 800a560 <__d2b+0x94>
 800a530:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a534:	4405      	add	r5, r0
 800a536:	603d      	str	r5, [r7, #0]
 800a538:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a53c:	6030      	str	r0, [r6, #0]
 800a53e:	4620      	mov	r0, r4
 800a540:	b003      	add	sp, #12
 800a542:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a54a:	e7d6      	b.n	800a4fa <__d2b+0x2e>
 800a54c:	6161      	str	r1, [r4, #20]
 800a54e:	e7e7      	b.n	800a520 <__d2b+0x54>
 800a550:	a801      	add	r0, sp, #4
 800a552:	f7ff fcf1 	bl	8009f38 <__lo0bits>
 800a556:	9b01      	ldr	r3, [sp, #4]
 800a558:	6163      	str	r3, [r4, #20]
 800a55a:	3020      	adds	r0, #32
 800a55c:	2201      	movs	r2, #1
 800a55e:	e7e5      	b.n	800a52c <__d2b+0x60>
 800a560:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a564:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a568:	6038      	str	r0, [r7, #0]
 800a56a:	6918      	ldr	r0, [r3, #16]
 800a56c:	f7ff fcc4 	bl	8009ef8 <__hi0bits>
 800a570:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a574:	e7e2      	b.n	800a53c <__d2b+0x70>
 800a576:	bf00      	nop
 800a578:	0800c6ed 	.word	0x0800c6ed
 800a57c:	0800c6fe 	.word	0x0800c6fe

0800a580 <__ratio>:
 800a580:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a584:	4688      	mov	r8, r1
 800a586:	4669      	mov	r1, sp
 800a588:	4681      	mov	r9, r0
 800a58a:	f7ff ff55 	bl	800a438 <__b2d>
 800a58e:	a901      	add	r1, sp, #4
 800a590:	4640      	mov	r0, r8
 800a592:	ec55 4b10 	vmov	r4, r5, d0
 800a596:	f7ff ff4f 	bl	800a438 <__b2d>
 800a59a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a59e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a5a2:	eba3 0c02 	sub.w	ip, r3, r2
 800a5a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a5aa:	1a9b      	subs	r3, r3, r2
 800a5ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a5b0:	ec51 0b10 	vmov	r0, r1, d0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	bfd6      	itet	le
 800a5b8:	460a      	movle	r2, r1
 800a5ba:	462a      	movgt	r2, r5
 800a5bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5c0:	468b      	mov	fp, r1
 800a5c2:	462f      	mov	r7, r5
 800a5c4:	bfd4      	ite	le
 800a5c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a5ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	ee10 2a10 	vmov	r2, s0
 800a5d4:	465b      	mov	r3, fp
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f7f6 f958 	bl	800088c <__aeabi_ddiv>
 800a5dc:	ec41 0b10 	vmov	d0, r0, r1
 800a5e0:	b003      	add	sp, #12
 800a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5e6 <__copybits>:
 800a5e6:	3901      	subs	r1, #1
 800a5e8:	b570      	push	{r4, r5, r6, lr}
 800a5ea:	1149      	asrs	r1, r1, #5
 800a5ec:	6914      	ldr	r4, [r2, #16]
 800a5ee:	3101      	adds	r1, #1
 800a5f0:	f102 0314 	add.w	r3, r2, #20
 800a5f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a5f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a5fc:	1f05      	subs	r5, r0, #4
 800a5fe:	42a3      	cmp	r3, r4
 800a600:	d30c      	bcc.n	800a61c <__copybits+0x36>
 800a602:	1aa3      	subs	r3, r4, r2
 800a604:	3b11      	subs	r3, #17
 800a606:	f023 0303 	bic.w	r3, r3, #3
 800a60a:	3211      	adds	r2, #17
 800a60c:	42a2      	cmp	r2, r4
 800a60e:	bf88      	it	hi
 800a610:	2300      	movhi	r3, #0
 800a612:	4418      	add	r0, r3
 800a614:	2300      	movs	r3, #0
 800a616:	4288      	cmp	r0, r1
 800a618:	d305      	bcc.n	800a626 <__copybits+0x40>
 800a61a:	bd70      	pop	{r4, r5, r6, pc}
 800a61c:	f853 6b04 	ldr.w	r6, [r3], #4
 800a620:	f845 6f04 	str.w	r6, [r5, #4]!
 800a624:	e7eb      	b.n	800a5fe <__copybits+0x18>
 800a626:	f840 3b04 	str.w	r3, [r0], #4
 800a62a:	e7f4      	b.n	800a616 <__copybits+0x30>

0800a62c <__any_on>:
 800a62c:	f100 0214 	add.w	r2, r0, #20
 800a630:	6900      	ldr	r0, [r0, #16]
 800a632:	114b      	asrs	r3, r1, #5
 800a634:	4298      	cmp	r0, r3
 800a636:	b510      	push	{r4, lr}
 800a638:	db11      	blt.n	800a65e <__any_on+0x32>
 800a63a:	dd0a      	ble.n	800a652 <__any_on+0x26>
 800a63c:	f011 011f 	ands.w	r1, r1, #31
 800a640:	d007      	beq.n	800a652 <__any_on+0x26>
 800a642:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a646:	fa24 f001 	lsr.w	r0, r4, r1
 800a64a:	fa00 f101 	lsl.w	r1, r0, r1
 800a64e:	428c      	cmp	r4, r1
 800a650:	d10b      	bne.n	800a66a <__any_on+0x3e>
 800a652:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a656:	4293      	cmp	r3, r2
 800a658:	d803      	bhi.n	800a662 <__any_on+0x36>
 800a65a:	2000      	movs	r0, #0
 800a65c:	bd10      	pop	{r4, pc}
 800a65e:	4603      	mov	r3, r0
 800a660:	e7f7      	b.n	800a652 <__any_on+0x26>
 800a662:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a666:	2900      	cmp	r1, #0
 800a668:	d0f5      	beq.n	800a656 <__any_on+0x2a>
 800a66a:	2001      	movs	r0, #1
 800a66c:	e7f6      	b.n	800a65c <__any_on+0x30>

0800a66e <sulp>:
 800a66e:	b570      	push	{r4, r5, r6, lr}
 800a670:	4604      	mov	r4, r0
 800a672:	460d      	mov	r5, r1
 800a674:	ec45 4b10 	vmov	d0, r4, r5
 800a678:	4616      	mov	r6, r2
 800a67a:	f7ff feb7 	bl	800a3ec <__ulp>
 800a67e:	ec51 0b10 	vmov	r0, r1, d0
 800a682:	b17e      	cbz	r6, 800a6a4 <sulp+0x36>
 800a684:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a688:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	dd09      	ble.n	800a6a4 <sulp+0x36>
 800a690:	051b      	lsls	r3, r3, #20
 800a692:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a696:	2400      	movs	r4, #0
 800a698:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a69c:	4622      	mov	r2, r4
 800a69e:	462b      	mov	r3, r5
 800a6a0:	f7f5 ffca 	bl	8000638 <__aeabi_dmul>
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a6a8 <_strtod_l>:
 800a6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ac:	ed2d 8b02 	vpush	{d8}
 800a6b0:	b09b      	sub	sp, #108	; 0x6c
 800a6b2:	4604      	mov	r4, r0
 800a6b4:	9213      	str	r2, [sp, #76]	; 0x4c
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	9216      	str	r2, [sp, #88]	; 0x58
 800a6ba:	460d      	mov	r5, r1
 800a6bc:	f04f 0800 	mov.w	r8, #0
 800a6c0:	f04f 0900 	mov.w	r9, #0
 800a6c4:	460a      	mov	r2, r1
 800a6c6:	9215      	str	r2, [sp, #84]	; 0x54
 800a6c8:	7811      	ldrb	r1, [r2, #0]
 800a6ca:	292b      	cmp	r1, #43	; 0x2b
 800a6cc:	d04c      	beq.n	800a768 <_strtod_l+0xc0>
 800a6ce:	d83a      	bhi.n	800a746 <_strtod_l+0x9e>
 800a6d0:	290d      	cmp	r1, #13
 800a6d2:	d834      	bhi.n	800a73e <_strtod_l+0x96>
 800a6d4:	2908      	cmp	r1, #8
 800a6d6:	d834      	bhi.n	800a742 <_strtod_l+0x9a>
 800a6d8:	2900      	cmp	r1, #0
 800a6da:	d03d      	beq.n	800a758 <_strtod_l+0xb0>
 800a6dc:	2200      	movs	r2, #0
 800a6de:	920a      	str	r2, [sp, #40]	; 0x28
 800a6e0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800a6e2:	7832      	ldrb	r2, [r6, #0]
 800a6e4:	2a30      	cmp	r2, #48	; 0x30
 800a6e6:	f040 80b4 	bne.w	800a852 <_strtod_l+0x1aa>
 800a6ea:	7872      	ldrb	r2, [r6, #1]
 800a6ec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a6f0:	2a58      	cmp	r2, #88	; 0x58
 800a6f2:	d170      	bne.n	800a7d6 <_strtod_l+0x12e>
 800a6f4:	9302      	str	r3, [sp, #8]
 800a6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6f8:	9301      	str	r3, [sp, #4]
 800a6fa:	ab16      	add	r3, sp, #88	; 0x58
 800a6fc:	9300      	str	r3, [sp, #0]
 800a6fe:	4a8e      	ldr	r2, [pc, #568]	; (800a938 <_strtod_l+0x290>)
 800a700:	ab17      	add	r3, sp, #92	; 0x5c
 800a702:	a915      	add	r1, sp, #84	; 0x54
 800a704:	4620      	mov	r0, r4
 800a706:	f001 f93f 	bl	800b988 <__gethex>
 800a70a:	f010 070f 	ands.w	r7, r0, #15
 800a70e:	4605      	mov	r5, r0
 800a710:	d005      	beq.n	800a71e <_strtod_l+0x76>
 800a712:	2f06      	cmp	r7, #6
 800a714:	d12a      	bne.n	800a76c <_strtod_l+0xc4>
 800a716:	3601      	adds	r6, #1
 800a718:	2300      	movs	r3, #0
 800a71a:	9615      	str	r6, [sp, #84]	; 0x54
 800a71c:	930a      	str	r3, [sp, #40]	; 0x28
 800a71e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a720:	2b00      	cmp	r3, #0
 800a722:	f040 857f 	bne.w	800b224 <_strtod_l+0xb7c>
 800a726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a728:	b1db      	cbz	r3, 800a762 <_strtod_l+0xba>
 800a72a:	4642      	mov	r2, r8
 800a72c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a730:	ec43 2b10 	vmov	d0, r2, r3
 800a734:	b01b      	add	sp, #108	; 0x6c
 800a736:	ecbd 8b02 	vpop	{d8}
 800a73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a73e:	2920      	cmp	r1, #32
 800a740:	d1cc      	bne.n	800a6dc <_strtod_l+0x34>
 800a742:	3201      	adds	r2, #1
 800a744:	e7bf      	b.n	800a6c6 <_strtod_l+0x1e>
 800a746:	292d      	cmp	r1, #45	; 0x2d
 800a748:	d1c8      	bne.n	800a6dc <_strtod_l+0x34>
 800a74a:	2101      	movs	r1, #1
 800a74c:	910a      	str	r1, [sp, #40]	; 0x28
 800a74e:	1c51      	adds	r1, r2, #1
 800a750:	9115      	str	r1, [sp, #84]	; 0x54
 800a752:	7852      	ldrb	r2, [r2, #1]
 800a754:	2a00      	cmp	r2, #0
 800a756:	d1c3      	bne.n	800a6e0 <_strtod_l+0x38>
 800a758:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a75a:	9515      	str	r5, [sp, #84]	; 0x54
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f040 855f 	bne.w	800b220 <_strtod_l+0xb78>
 800a762:	4642      	mov	r2, r8
 800a764:	464b      	mov	r3, r9
 800a766:	e7e3      	b.n	800a730 <_strtod_l+0x88>
 800a768:	2100      	movs	r1, #0
 800a76a:	e7ef      	b.n	800a74c <_strtod_l+0xa4>
 800a76c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a76e:	b13a      	cbz	r2, 800a780 <_strtod_l+0xd8>
 800a770:	2135      	movs	r1, #53	; 0x35
 800a772:	a818      	add	r0, sp, #96	; 0x60
 800a774:	f7ff ff37 	bl	800a5e6 <__copybits>
 800a778:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a77a:	4620      	mov	r0, r4
 800a77c:	f7ff fb0a 	bl	8009d94 <_Bfree>
 800a780:	3f01      	subs	r7, #1
 800a782:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a784:	2f04      	cmp	r7, #4
 800a786:	d806      	bhi.n	800a796 <_strtod_l+0xee>
 800a788:	e8df f007 	tbb	[pc, r7]
 800a78c:	201d0314 	.word	0x201d0314
 800a790:	14          	.byte	0x14
 800a791:	00          	.byte	0x00
 800a792:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a796:	05e9      	lsls	r1, r5, #23
 800a798:	bf48      	it	mi
 800a79a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a79e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a7a2:	0d1b      	lsrs	r3, r3, #20
 800a7a4:	051b      	lsls	r3, r3, #20
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d1b9      	bne.n	800a71e <_strtod_l+0x76>
 800a7aa:	f7fe fb05 	bl	8008db8 <__errno>
 800a7ae:	2322      	movs	r3, #34	; 0x22
 800a7b0:	6003      	str	r3, [r0, #0]
 800a7b2:	e7b4      	b.n	800a71e <_strtod_l+0x76>
 800a7b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a7b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a7bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a7c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a7c4:	e7e7      	b.n	800a796 <_strtod_l+0xee>
 800a7c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a940 <_strtod_l+0x298>
 800a7ca:	e7e4      	b.n	800a796 <_strtod_l+0xee>
 800a7cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a7d0:	f04f 38ff 	mov.w	r8, #4294967295
 800a7d4:	e7df      	b.n	800a796 <_strtod_l+0xee>
 800a7d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7d8:	1c5a      	adds	r2, r3, #1
 800a7da:	9215      	str	r2, [sp, #84]	; 0x54
 800a7dc:	785b      	ldrb	r3, [r3, #1]
 800a7de:	2b30      	cmp	r3, #48	; 0x30
 800a7e0:	d0f9      	beq.n	800a7d6 <_strtod_l+0x12e>
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d09b      	beq.n	800a71e <_strtod_l+0x76>
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	f04f 0a00 	mov.w	sl, #0
 800a7ec:	9304      	str	r3, [sp, #16]
 800a7ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a7f6:	46d3      	mov	fp, sl
 800a7f8:	220a      	movs	r2, #10
 800a7fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a7fc:	7806      	ldrb	r6, [r0, #0]
 800a7fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a802:	b2d9      	uxtb	r1, r3
 800a804:	2909      	cmp	r1, #9
 800a806:	d926      	bls.n	800a856 <_strtod_l+0x1ae>
 800a808:	494c      	ldr	r1, [pc, #304]	; (800a93c <_strtod_l+0x294>)
 800a80a:	2201      	movs	r2, #1
 800a80c:	f000 ffe6 	bl	800b7dc <strncmp>
 800a810:	2800      	cmp	r0, #0
 800a812:	d030      	beq.n	800a876 <_strtod_l+0x1ce>
 800a814:	2000      	movs	r0, #0
 800a816:	4632      	mov	r2, r6
 800a818:	9005      	str	r0, [sp, #20]
 800a81a:	465e      	mov	r6, fp
 800a81c:	4603      	mov	r3, r0
 800a81e:	2a65      	cmp	r2, #101	; 0x65
 800a820:	d001      	beq.n	800a826 <_strtod_l+0x17e>
 800a822:	2a45      	cmp	r2, #69	; 0x45
 800a824:	d113      	bne.n	800a84e <_strtod_l+0x1a6>
 800a826:	b91e      	cbnz	r6, 800a830 <_strtod_l+0x188>
 800a828:	9a04      	ldr	r2, [sp, #16]
 800a82a:	4302      	orrs	r2, r0
 800a82c:	d094      	beq.n	800a758 <_strtod_l+0xb0>
 800a82e:	2600      	movs	r6, #0
 800a830:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a832:	1c6a      	adds	r2, r5, #1
 800a834:	9215      	str	r2, [sp, #84]	; 0x54
 800a836:	786a      	ldrb	r2, [r5, #1]
 800a838:	2a2b      	cmp	r2, #43	; 0x2b
 800a83a:	d074      	beq.n	800a926 <_strtod_l+0x27e>
 800a83c:	2a2d      	cmp	r2, #45	; 0x2d
 800a83e:	d078      	beq.n	800a932 <_strtod_l+0x28a>
 800a840:	f04f 0c00 	mov.w	ip, #0
 800a844:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a848:	2909      	cmp	r1, #9
 800a84a:	d97f      	bls.n	800a94c <_strtod_l+0x2a4>
 800a84c:	9515      	str	r5, [sp, #84]	; 0x54
 800a84e:	2700      	movs	r7, #0
 800a850:	e09e      	b.n	800a990 <_strtod_l+0x2e8>
 800a852:	2300      	movs	r3, #0
 800a854:	e7c8      	b.n	800a7e8 <_strtod_l+0x140>
 800a856:	f1bb 0f08 	cmp.w	fp, #8
 800a85a:	bfd8      	it	le
 800a85c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a85e:	f100 0001 	add.w	r0, r0, #1
 800a862:	bfda      	itte	le
 800a864:	fb02 3301 	mlale	r3, r2, r1, r3
 800a868:	9309      	strle	r3, [sp, #36]	; 0x24
 800a86a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a86e:	f10b 0b01 	add.w	fp, fp, #1
 800a872:	9015      	str	r0, [sp, #84]	; 0x54
 800a874:	e7c1      	b.n	800a7fa <_strtod_l+0x152>
 800a876:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a878:	1c5a      	adds	r2, r3, #1
 800a87a:	9215      	str	r2, [sp, #84]	; 0x54
 800a87c:	785a      	ldrb	r2, [r3, #1]
 800a87e:	f1bb 0f00 	cmp.w	fp, #0
 800a882:	d037      	beq.n	800a8f4 <_strtod_l+0x24c>
 800a884:	9005      	str	r0, [sp, #20]
 800a886:	465e      	mov	r6, fp
 800a888:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a88c:	2b09      	cmp	r3, #9
 800a88e:	d912      	bls.n	800a8b6 <_strtod_l+0x20e>
 800a890:	2301      	movs	r3, #1
 800a892:	e7c4      	b.n	800a81e <_strtod_l+0x176>
 800a894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	9215      	str	r2, [sp, #84]	; 0x54
 800a89a:	785a      	ldrb	r2, [r3, #1]
 800a89c:	3001      	adds	r0, #1
 800a89e:	2a30      	cmp	r2, #48	; 0x30
 800a8a0:	d0f8      	beq.n	800a894 <_strtod_l+0x1ec>
 800a8a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a8a6:	2b08      	cmp	r3, #8
 800a8a8:	f200 84c1 	bhi.w	800b22e <_strtod_l+0xb86>
 800a8ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a8ae:	9005      	str	r0, [sp, #20]
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	3a30      	subs	r2, #48	; 0x30
 800a8b8:	f100 0301 	add.w	r3, r0, #1
 800a8bc:	d014      	beq.n	800a8e8 <_strtod_l+0x240>
 800a8be:	9905      	ldr	r1, [sp, #20]
 800a8c0:	4419      	add	r1, r3
 800a8c2:	9105      	str	r1, [sp, #20]
 800a8c4:	4633      	mov	r3, r6
 800a8c6:	eb00 0c06 	add.w	ip, r0, r6
 800a8ca:	210a      	movs	r1, #10
 800a8cc:	4563      	cmp	r3, ip
 800a8ce:	d113      	bne.n	800a8f8 <_strtod_l+0x250>
 800a8d0:	1833      	adds	r3, r6, r0
 800a8d2:	2b08      	cmp	r3, #8
 800a8d4:	f106 0601 	add.w	r6, r6, #1
 800a8d8:	4406      	add	r6, r0
 800a8da:	dc1a      	bgt.n	800a912 <_strtod_l+0x26a>
 800a8dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8de:	230a      	movs	r3, #10
 800a8e0:	fb03 2301 	mla	r3, r3, r1, r2
 800a8e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a8ea:	1c51      	adds	r1, r2, #1
 800a8ec:	9115      	str	r1, [sp, #84]	; 0x54
 800a8ee:	7852      	ldrb	r2, [r2, #1]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	e7c9      	b.n	800a888 <_strtod_l+0x1e0>
 800a8f4:	4658      	mov	r0, fp
 800a8f6:	e7d2      	b.n	800a89e <_strtod_l+0x1f6>
 800a8f8:	2b08      	cmp	r3, #8
 800a8fa:	f103 0301 	add.w	r3, r3, #1
 800a8fe:	dc03      	bgt.n	800a908 <_strtod_l+0x260>
 800a900:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a902:	434f      	muls	r7, r1
 800a904:	9709      	str	r7, [sp, #36]	; 0x24
 800a906:	e7e1      	b.n	800a8cc <_strtod_l+0x224>
 800a908:	2b10      	cmp	r3, #16
 800a90a:	bfd8      	it	le
 800a90c:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a910:	e7dc      	b.n	800a8cc <_strtod_l+0x224>
 800a912:	2e10      	cmp	r6, #16
 800a914:	bfdc      	itt	le
 800a916:	230a      	movle	r3, #10
 800a918:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a91c:	e7e3      	b.n	800a8e6 <_strtod_l+0x23e>
 800a91e:	2300      	movs	r3, #0
 800a920:	9305      	str	r3, [sp, #20]
 800a922:	2301      	movs	r3, #1
 800a924:	e780      	b.n	800a828 <_strtod_l+0x180>
 800a926:	f04f 0c00 	mov.w	ip, #0
 800a92a:	1caa      	adds	r2, r5, #2
 800a92c:	9215      	str	r2, [sp, #84]	; 0x54
 800a92e:	78aa      	ldrb	r2, [r5, #2]
 800a930:	e788      	b.n	800a844 <_strtod_l+0x19c>
 800a932:	f04f 0c01 	mov.w	ip, #1
 800a936:	e7f8      	b.n	800a92a <_strtod_l+0x282>
 800a938:	0800c858 	.word	0x0800c858
 800a93c:	0800c854 	.word	0x0800c854
 800a940:	7ff00000 	.word	0x7ff00000
 800a944:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a946:	1c51      	adds	r1, r2, #1
 800a948:	9115      	str	r1, [sp, #84]	; 0x54
 800a94a:	7852      	ldrb	r2, [r2, #1]
 800a94c:	2a30      	cmp	r2, #48	; 0x30
 800a94e:	d0f9      	beq.n	800a944 <_strtod_l+0x29c>
 800a950:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a954:	2908      	cmp	r1, #8
 800a956:	f63f af7a 	bhi.w	800a84e <_strtod_l+0x1a6>
 800a95a:	3a30      	subs	r2, #48	; 0x30
 800a95c:	9208      	str	r2, [sp, #32]
 800a95e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a960:	920c      	str	r2, [sp, #48]	; 0x30
 800a962:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a964:	1c57      	adds	r7, r2, #1
 800a966:	9715      	str	r7, [sp, #84]	; 0x54
 800a968:	7852      	ldrb	r2, [r2, #1]
 800a96a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a96e:	f1be 0f09 	cmp.w	lr, #9
 800a972:	d938      	bls.n	800a9e6 <_strtod_l+0x33e>
 800a974:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a976:	1a7f      	subs	r7, r7, r1
 800a978:	2f08      	cmp	r7, #8
 800a97a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a97e:	dc03      	bgt.n	800a988 <_strtod_l+0x2e0>
 800a980:	9908      	ldr	r1, [sp, #32]
 800a982:	428f      	cmp	r7, r1
 800a984:	bfa8      	it	ge
 800a986:	460f      	movge	r7, r1
 800a988:	f1bc 0f00 	cmp.w	ip, #0
 800a98c:	d000      	beq.n	800a990 <_strtod_l+0x2e8>
 800a98e:	427f      	negs	r7, r7
 800a990:	2e00      	cmp	r6, #0
 800a992:	d14f      	bne.n	800aa34 <_strtod_l+0x38c>
 800a994:	9904      	ldr	r1, [sp, #16]
 800a996:	4301      	orrs	r1, r0
 800a998:	f47f aec1 	bne.w	800a71e <_strtod_l+0x76>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f47f aedb 	bne.w	800a758 <_strtod_l+0xb0>
 800a9a2:	2a69      	cmp	r2, #105	; 0x69
 800a9a4:	d029      	beq.n	800a9fa <_strtod_l+0x352>
 800a9a6:	dc26      	bgt.n	800a9f6 <_strtod_l+0x34e>
 800a9a8:	2a49      	cmp	r2, #73	; 0x49
 800a9aa:	d026      	beq.n	800a9fa <_strtod_l+0x352>
 800a9ac:	2a4e      	cmp	r2, #78	; 0x4e
 800a9ae:	f47f aed3 	bne.w	800a758 <_strtod_l+0xb0>
 800a9b2:	499b      	ldr	r1, [pc, #620]	; (800ac20 <_strtod_l+0x578>)
 800a9b4:	a815      	add	r0, sp, #84	; 0x54
 800a9b6:	f001 fa27 	bl	800be08 <__match>
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	f43f aecc 	beq.w	800a758 <_strtod_l+0xb0>
 800a9c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	2b28      	cmp	r3, #40	; 0x28
 800a9c6:	d12f      	bne.n	800aa28 <_strtod_l+0x380>
 800a9c8:	4996      	ldr	r1, [pc, #600]	; (800ac24 <_strtod_l+0x57c>)
 800a9ca:	aa18      	add	r2, sp, #96	; 0x60
 800a9cc:	a815      	add	r0, sp, #84	; 0x54
 800a9ce:	f001 fa2f 	bl	800be30 <__hexnan>
 800a9d2:	2805      	cmp	r0, #5
 800a9d4:	d128      	bne.n	800aa28 <_strtod_l+0x380>
 800a9d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a9e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a9e4:	e69b      	b.n	800a71e <_strtod_l+0x76>
 800a9e6:	9f08      	ldr	r7, [sp, #32]
 800a9e8:	210a      	movs	r1, #10
 800a9ea:	fb01 2107 	mla	r1, r1, r7, r2
 800a9ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a9f2:	9208      	str	r2, [sp, #32]
 800a9f4:	e7b5      	b.n	800a962 <_strtod_l+0x2ba>
 800a9f6:	2a6e      	cmp	r2, #110	; 0x6e
 800a9f8:	e7d9      	b.n	800a9ae <_strtod_l+0x306>
 800a9fa:	498b      	ldr	r1, [pc, #556]	; (800ac28 <_strtod_l+0x580>)
 800a9fc:	a815      	add	r0, sp, #84	; 0x54
 800a9fe:	f001 fa03 	bl	800be08 <__match>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	f43f aea8 	beq.w	800a758 <_strtod_l+0xb0>
 800aa08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa0a:	4988      	ldr	r1, [pc, #544]	; (800ac2c <_strtod_l+0x584>)
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	a815      	add	r0, sp, #84	; 0x54
 800aa10:	9315      	str	r3, [sp, #84]	; 0x54
 800aa12:	f001 f9f9 	bl	800be08 <__match>
 800aa16:	b910      	cbnz	r0, 800aa1e <_strtod_l+0x376>
 800aa18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	9315      	str	r3, [sp, #84]	; 0x54
 800aa1e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800ac3c <_strtod_l+0x594>
 800aa22:	f04f 0800 	mov.w	r8, #0
 800aa26:	e67a      	b.n	800a71e <_strtod_l+0x76>
 800aa28:	4881      	ldr	r0, [pc, #516]	; (800ac30 <_strtod_l+0x588>)
 800aa2a:	f000 ff09 	bl	800b840 <nan>
 800aa2e:	ec59 8b10 	vmov	r8, r9, d0
 800aa32:	e674      	b.n	800a71e <_strtod_l+0x76>
 800aa34:	9b05      	ldr	r3, [sp, #20]
 800aa36:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa38:	1afb      	subs	r3, r7, r3
 800aa3a:	f1bb 0f00 	cmp.w	fp, #0
 800aa3e:	bf08      	it	eq
 800aa40:	46b3      	moveq	fp, r6
 800aa42:	2e10      	cmp	r6, #16
 800aa44:	9308      	str	r3, [sp, #32]
 800aa46:	4635      	mov	r5, r6
 800aa48:	bfa8      	it	ge
 800aa4a:	2510      	movge	r5, #16
 800aa4c:	f7f5 fd7a 	bl	8000544 <__aeabi_ui2d>
 800aa50:	2e09      	cmp	r6, #9
 800aa52:	4680      	mov	r8, r0
 800aa54:	4689      	mov	r9, r1
 800aa56:	dd13      	ble.n	800aa80 <_strtod_l+0x3d8>
 800aa58:	4b76      	ldr	r3, [pc, #472]	; (800ac34 <_strtod_l+0x58c>)
 800aa5a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aa5e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aa62:	f7f5 fde9 	bl	8000638 <__aeabi_dmul>
 800aa66:	4680      	mov	r8, r0
 800aa68:	4650      	mov	r0, sl
 800aa6a:	4689      	mov	r9, r1
 800aa6c:	f7f5 fd6a 	bl	8000544 <__aeabi_ui2d>
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	4640      	mov	r0, r8
 800aa76:	4649      	mov	r1, r9
 800aa78:	f7f5 fc28 	bl	80002cc <__adddf3>
 800aa7c:	4680      	mov	r8, r0
 800aa7e:	4689      	mov	r9, r1
 800aa80:	2e0f      	cmp	r6, #15
 800aa82:	dc38      	bgt.n	800aaf6 <_strtod_l+0x44e>
 800aa84:	9b08      	ldr	r3, [sp, #32]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f43f ae49 	beq.w	800a71e <_strtod_l+0x76>
 800aa8c:	dd24      	ble.n	800aad8 <_strtod_l+0x430>
 800aa8e:	2b16      	cmp	r3, #22
 800aa90:	dc0b      	bgt.n	800aaaa <_strtod_l+0x402>
 800aa92:	4968      	ldr	r1, [pc, #416]	; (800ac34 <_strtod_l+0x58c>)
 800aa94:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa9c:	4642      	mov	r2, r8
 800aa9e:	464b      	mov	r3, r9
 800aaa0:	f7f5 fdca 	bl	8000638 <__aeabi_dmul>
 800aaa4:	4680      	mov	r8, r0
 800aaa6:	4689      	mov	r9, r1
 800aaa8:	e639      	b.n	800a71e <_strtod_l+0x76>
 800aaaa:	9a08      	ldr	r2, [sp, #32]
 800aaac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800aab0:	4293      	cmp	r3, r2
 800aab2:	db20      	blt.n	800aaf6 <_strtod_l+0x44e>
 800aab4:	4c5f      	ldr	r4, [pc, #380]	; (800ac34 <_strtod_l+0x58c>)
 800aab6:	f1c6 060f 	rsb	r6, r6, #15
 800aaba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800aabe:	4642      	mov	r2, r8
 800aac0:	464b      	mov	r3, r9
 800aac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aac6:	f7f5 fdb7 	bl	8000638 <__aeabi_dmul>
 800aaca:	9b08      	ldr	r3, [sp, #32]
 800aacc:	1b9e      	subs	r6, r3, r6
 800aace:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800aad2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aad6:	e7e3      	b.n	800aaa0 <_strtod_l+0x3f8>
 800aad8:	9b08      	ldr	r3, [sp, #32]
 800aada:	3316      	adds	r3, #22
 800aadc:	db0b      	blt.n	800aaf6 <_strtod_l+0x44e>
 800aade:	9b05      	ldr	r3, [sp, #20]
 800aae0:	1bdf      	subs	r7, r3, r7
 800aae2:	4b54      	ldr	r3, [pc, #336]	; (800ac34 <_strtod_l+0x58c>)
 800aae4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800aae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aaec:	4640      	mov	r0, r8
 800aaee:	4649      	mov	r1, r9
 800aaf0:	f7f5 fecc 	bl	800088c <__aeabi_ddiv>
 800aaf4:	e7d6      	b.n	800aaa4 <_strtod_l+0x3fc>
 800aaf6:	9b08      	ldr	r3, [sp, #32]
 800aaf8:	1b75      	subs	r5, r6, r5
 800aafa:	441d      	add	r5, r3
 800aafc:	2d00      	cmp	r5, #0
 800aafe:	dd70      	ble.n	800abe2 <_strtod_l+0x53a>
 800ab00:	f015 030f 	ands.w	r3, r5, #15
 800ab04:	d00a      	beq.n	800ab1c <_strtod_l+0x474>
 800ab06:	494b      	ldr	r1, [pc, #300]	; (800ac34 <_strtod_l+0x58c>)
 800ab08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab0c:	4642      	mov	r2, r8
 800ab0e:	464b      	mov	r3, r9
 800ab10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab14:	f7f5 fd90 	bl	8000638 <__aeabi_dmul>
 800ab18:	4680      	mov	r8, r0
 800ab1a:	4689      	mov	r9, r1
 800ab1c:	f035 050f 	bics.w	r5, r5, #15
 800ab20:	d04d      	beq.n	800abbe <_strtod_l+0x516>
 800ab22:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800ab26:	dd22      	ble.n	800ab6e <_strtod_l+0x4c6>
 800ab28:	2500      	movs	r5, #0
 800ab2a:	46ab      	mov	fp, r5
 800ab2c:	9509      	str	r5, [sp, #36]	; 0x24
 800ab2e:	9505      	str	r5, [sp, #20]
 800ab30:	2322      	movs	r3, #34	; 0x22
 800ab32:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800ac3c <_strtod_l+0x594>
 800ab36:	6023      	str	r3, [r4, #0]
 800ab38:	f04f 0800 	mov.w	r8, #0
 800ab3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f43f aded 	beq.w	800a71e <_strtod_l+0x76>
 800ab44:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ab46:	4620      	mov	r0, r4
 800ab48:	f7ff f924 	bl	8009d94 <_Bfree>
 800ab4c:	9905      	ldr	r1, [sp, #20]
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f7ff f920 	bl	8009d94 <_Bfree>
 800ab54:	4659      	mov	r1, fp
 800ab56:	4620      	mov	r0, r4
 800ab58:	f7ff f91c 	bl	8009d94 <_Bfree>
 800ab5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f7ff f918 	bl	8009d94 <_Bfree>
 800ab64:	4629      	mov	r1, r5
 800ab66:	4620      	mov	r0, r4
 800ab68:	f7ff f914 	bl	8009d94 <_Bfree>
 800ab6c:	e5d7      	b.n	800a71e <_strtod_l+0x76>
 800ab6e:	4b32      	ldr	r3, [pc, #200]	; (800ac38 <_strtod_l+0x590>)
 800ab70:	9304      	str	r3, [sp, #16]
 800ab72:	2300      	movs	r3, #0
 800ab74:	112d      	asrs	r5, r5, #4
 800ab76:	4640      	mov	r0, r8
 800ab78:	4649      	mov	r1, r9
 800ab7a:	469a      	mov	sl, r3
 800ab7c:	2d01      	cmp	r5, #1
 800ab7e:	dc21      	bgt.n	800abc4 <_strtod_l+0x51c>
 800ab80:	b10b      	cbz	r3, 800ab86 <_strtod_l+0x4de>
 800ab82:	4680      	mov	r8, r0
 800ab84:	4689      	mov	r9, r1
 800ab86:	492c      	ldr	r1, [pc, #176]	; (800ac38 <_strtod_l+0x590>)
 800ab88:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ab8c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ab90:	4642      	mov	r2, r8
 800ab92:	464b      	mov	r3, r9
 800ab94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab98:	f7f5 fd4e 	bl	8000638 <__aeabi_dmul>
 800ab9c:	4b27      	ldr	r3, [pc, #156]	; (800ac3c <_strtod_l+0x594>)
 800ab9e:	460a      	mov	r2, r1
 800aba0:	400b      	ands	r3, r1
 800aba2:	4927      	ldr	r1, [pc, #156]	; (800ac40 <_strtod_l+0x598>)
 800aba4:	428b      	cmp	r3, r1
 800aba6:	4680      	mov	r8, r0
 800aba8:	d8be      	bhi.n	800ab28 <_strtod_l+0x480>
 800abaa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800abae:	428b      	cmp	r3, r1
 800abb0:	bf86      	itte	hi
 800abb2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800ac44 <_strtod_l+0x59c>
 800abb6:	f04f 38ff 	movhi.w	r8, #4294967295
 800abba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800abbe:	2300      	movs	r3, #0
 800abc0:	9304      	str	r3, [sp, #16]
 800abc2:	e07b      	b.n	800acbc <_strtod_l+0x614>
 800abc4:	07ea      	lsls	r2, r5, #31
 800abc6:	d505      	bpl.n	800abd4 <_strtod_l+0x52c>
 800abc8:	9b04      	ldr	r3, [sp, #16]
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f7f5 fd33 	bl	8000638 <__aeabi_dmul>
 800abd2:	2301      	movs	r3, #1
 800abd4:	9a04      	ldr	r2, [sp, #16]
 800abd6:	3208      	adds	r2, #8
 800abd8:	f10a 0a01 	add.w	sl, sl, #1
 800abdc:	106d      	asrs	r5, r5, #1
 800abde:	9204      	str	r2, [sp, #16]
 800abe0:	e7cc      	b.n	800ab7c <_strtod_l+0x4d4>
 800abe2:	d0ec      	beq.n	800abbe <_strtod_l+0x516>
 800abe4:	426d      	negs	r5, r5
 800abe6:	f015 020f 	ands.w	r2, r5, #15
 800abea:	d00a      	beq.n	800ac02 <_strtod_l+0x55a>
 800abec:	4b11      	ldr	r3, [pc, #68]	; (800ac34 <_strtod_l+0x58c>)
 800abee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfa:	f7f5 fe47 	bl	800088c <__aeabi_ddiv>
 800abfe:	4680      	mov	r8, r0
 800ac00:	4689      	mov	r9, r1
 800ac02:	112d      	asrs	r5, r5, #4
 800ac04:	d0db      	beq.n	800abbe <_strtod_l+0x516>
 800ac06:	2d1f      	cmp	r5, #31
 800ac08:	dd1e      	ble.n	800ac48 <_strtod_l+0x5a0>
 800ac0a:	2500      	movs	r5, #0
 800ac0c:	46ab      	mov	fp, r5
 800ac0e:	9509      	str	r5, [sp, #36]	; 0x24
 800ac10:	9505      	str	r5, [sp, #20]
 800ac12:	2322      	movs	r3, #34	; 0x22
 800ac14:	f04f 0800 	mov.w	r8, #0
 800ac18:	f04f 0900 	mov.w	r9, #0
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	e78d      	b.n	800ab3c <_strtod_l+0x494>
 800ac20:	0800c645 	.word	0x0800c645
 800ac24:	0800c86c 	.word	0x0800c86c
 800ac28:	0800c63d 	.word	0x0800c63d
 800ac2c:	0800c674 	.word	0x0800c674
 800ac30:	0800c9fd 	.word	0x0800c9fd
 800ac34:	0800c780 	.word	0x0800c780
 800ac38:	0800c758 	.word	0x0800c758
 800ac3c:	7ff00000 	.word	0x7ff00000
 800ac40:	7ca00000 	.word	0x7ca00000
 800ac44:	7fefffff 	.word	0x7fefffff
 800ac48:	f015 0310 	ands.w	r3, r5, #16
 800ac4c:	bf18      	it	ne
 800ac4e:	236a      	movne	r3, #106	; 0x6a
 800ac50:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800aff4 <_strtod_l+0x94c>
 800ac54:	9304      	str	r3, [sp, #16]
 800ac56:	4640      	mov	r0, r8
 800ac58:	4649      	mov	r1, r9
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	07ea      	lsls	r2, r5, #31
 800ac5e:	d504      	bpl.n	800ac6a <_strtod_l+0x5c2>
 800ac60:	e9da 2300 	ldrd	r2, r3, [sl]
 800ac64:	f7f5 fce8 	bl	8000638 <__aeabi_dmul>
 800ac68:	2301      	movs	r3, #1
 800ac6a:	106d      	asrs	r5, r5, #1
 800ac6c:	f10a 0a08 	add.w	sl, sl, #8
 800ac70:	d1f4      	bne.n	800ac5c <_strtod_l+0x5b4>
 800ac72:	b10b      	cbz	r3, 800ac78 <_strtod_l+0x5d0>
 800ac74:	4680      	mov	r8, r0
 800ac76:	4689      	mov	r9, r1
 800ac78:	9b04      	ldr	r3, [sp, #16]
 800ac7a:	b1bb      	cbz	r3, 800acac <_strtod_l+0x604>
 800ac7c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800ac80:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	4649      	mov	r1, r9
 800ac88:	dd10      	ble.n	800acac <_strtod_l+0x604>
 800ac8a:	2b1f      	cmp	r3, #31
 800ac8c:	f340 811e 	ble.w	800aecc <_strtod_l+0x824>
 800ac90:	2b34      	cmp	r3, #52	; 0x34
 800ac92:	bfde      	ittt	le
 800ac94:	f04f 33ff 	movle.w	r3, #4294967295
 800ac98:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ac9c:	4093      	lslle	r3, r2
 800ac9e:	f04f 0800 	mov.w	r8, #0
 800aca2:	bfcc      	ite	gt
 800aca4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800aca8:	ea03 0901 	andle.w	r9, r3, r1
 800acac:	2200      	movs	r2, #0
 800acae:	2300      	movs	r3, #0
 800acb0:	4640      	mov	r0, r8
 800acb2:	4649      	mov	r1, r9
 800acb4:	f7f5 ff28 	bl	8000b08 <__aeabi_dcmpeq>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d1a6      	bne.n	800ac0a <_strtod_l+0x562>
 800acbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acbe:	9300      	str	r3, [sp, #0]
 800acc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800acc2:	4633      	mov	r3, r6
 800acc4:	465a      	mov	r2, fp
 800acc6:	4620      	mov	r0, r4
 800acc8:	f7ff f8cc 	bl	8009e64 <__s2b>
 800accc:	9009      	str	r0, [sp, #36]	; 0x24
 800acce:	2800      	cmp	r0, #0
 800acd0:	f43f af2a 	beq.w	800ab28 <_strtod_l+0x480>
 800acd4:	9a08      	ldr	r2, [sp, #32]
 800acd6:	9b05      	ldr	r3, [sp, #20]
 800acd8:	2a00      	cmp	r2, #0
 800acda:	eba3 0307 	sub.w	r3, r3, r7
 800acde:	bfa8      	it	ge
 800ace0:	2300      	movge	r3, #0
 800ace2:	930c      	str	r3, [sp, #48]	; 0x30
 800ace4:	2500      	movs	r5, #0
 800ace6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800acea:	9312      	str	r3, [sp, #72]	; 0x48
 800acec:	46ab      	mov	fp, r5
 800acee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf0:	4620      	mov	r0, r4
 800acf2:	6859      	ldr	r1, [r3, #4]
 800acf4:	f7ff f80e 	bl	8009d14 <_Balloc>
 800acf8:	9005      	str	r0, [sp, #20]
 800acfa:	2800      	cmp	r0, #0
 800acfc:	f43f af18 	beq.w	800ab30 <_strtod_l+0x488>
 800ad00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad02:	691a      	ldr	r2, [r3, #16]
 800ad04:	3202      	adds	r2, #2
 800ad06:	f103 010c 	add.w	r1, r3, #12
 800ad0a:	0092      	lsls	r2, r2, #2
 800ad0c:	300c      	adds	r0, #12
 800ad0e:	f000 fd87 	bl	800b820 <memcpy>
 800ad12:	ec49 8b10 	vmov	d0, r8, r9
 800ad16:	aa18      	add	r2, sp, #96	; 0x60
 800ad18:	a917      	add	r1, sp, #92	; 0x5c
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	f7ff fbd6 	bl	800a4cc <__d2b>
 800ad20:	ec49 8b18 	vmov	d8, r8, r9
 800ad24:	9016      	str	r0, [sp, #88]	; 0x58
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f43f af02 	beq.w	800ab30 <_strtod_l+0x488>
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f7ff f930 	bl	8009f94 <__i2b>
 800ad34:	4683      	mov	fp, r0
 800ad36:	2800      	cmp	r0, #0
 800ad38:	f43f aefa 	beq.w	800ab30 <_strtod_l+0x488>
 800ad3c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ad3e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad40:	2e00      	cmp	r6, #0
 800ad42:	bfab      	itete	ge
 800ad44:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800ad46:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800ad48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ad4a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800ad4e:	bfac      	ite	ge
 800ad50:	eb06 0a03 	addge.w	sl, r6, r3
 800ad54:	1b9f      	sublt	r7, r3, r6
 800ad56:	9b04      	ldr	r3, [sp, #16]
 800ad58:	1af6      	subs	r6, r6, r3
 800ad5a:	4416      	add	r6, r2
 800ad5c:	4ba0      	ldr	r3, [pc, #640]	; (800afe0 <_strtod_l+0x938>)
 800ad5e:	3e01      	subs	r6, #1
 800ad60:	429e      	cmp	r6, r3
 800ad62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad66:	f280 80c4 	bge.w	800aef2 <_strtod_l+0x84a>
 800ad6a:	1b9b      	subs	r3, r3, r6
 800ad6c:	2b1f      	cmp	r3, #31
 800ad6e:	eba2 0203 	sub.w	r2, r2, r3
 800ad72:	f04f 0101 	mov.w	r1, #1
 800ad76:	f300 80b0 	bgt.w	800aeda <_strtod_l+0x832>
 800ad7a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad7e:	930e      	str	r3, [sp, #56]	; 0x38
 800ad80:	2300      	movs	r3, #0
 800ad82:	930d      	str	r3, [sp, #52]	; 0x34
 800ad84:	eb0a 0602 	add.w	r6, sl, r2
 800ad88:	9b04      	ldr	r3, [sp, #16]
 800ad8a:	45b2      	cmp	sl, r6
 800ad8c:	4417      	add	r7, r2
 800ad8e:	441f      	add	r7, r3
 800ad90:	4653      	mov	r3, sl
 800ad92:	bfa8      	it	ge
 800ad94:	4633      	movge	r3, r6
 800ad96:	42bb      	cmp	r3, r7
 800ad98:	bfa8      	it	ge
 800ad9a:	463b      	movge	r3, r7
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	bfc2      	ittt	gt
 800ada0:	1af6      	subgt	r6, r6, r3
 800ada2:	1aff      	subgt	r7, r7, r3
 800ada4:	ebaa 0a03 	subgt.w	sl, sl, r3
 800ada8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adaa:	2b00      	cmp	r3, #0
 800adac:	dd17      	ble.n	800adde <_strtod_l+0x736>
 800adae:	4659      	mov	r1, fp
 800adb0:	461a      	mov	r2, r3
 800adb2:	4620      	mov	r0, r4
 800adb4:	f7ff f9ae 	bl	800a114 <__pow5mult>
 800adb8:	4683      	mov	fp, r0
 800adba:	2800      	cmp	r0, #0
 800adbc:	f43f aeb8 	beq.w	800ab30 <_strtod_l+0x488>
 800adc0:	4601      	mov	r1, r0
 800adc2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800adc4:	4620      	mov	r0, r4
 800adc6:	f7ff f8fb 	bl	8009fc0 <__multiply>
 800adca:	900b      	str	r0, [sp, #44]	; 0x2c
 800adcc:	2800      	cmp	r0, #0
 800adce:	f43f aeaf 	beq.w	800ab30 <_strtod_l+0x488>
 800add2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800add4:	4620      	mov	r0, r4
 800add6:	f7fe ffdd 	bl	8009d94 <_Bfree>
 800adda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800addc:	9316      	str	r3, [sp, #88]	; 0x58
 800adde:	2e00      	cmp	r6, #0
 800ade0:	f300 808c 	bgt.w	800aefc <_strtod_l+0x854>
 800ade4:	9b08      	ldr	r3, [sp, #32]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	dd08      	ble.n	800adfc <_strtod_l+0x754>
 800adea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adec:	9905      	ldr	r1, [sp, #20]
 800adee:	4620      	mov	r0, r4
 800adf0:	f7ff f990 	bl	800a114 <__pow5mult>
 800adf4:	9005      	str	r0, [sp, #20]
 800adf6:	2800      	cmp	r0, #0
 800adf8:	f43f ae9a 	beq.w	800ab30 <_strtod_l+0x488>
 800adfc:	2f00      	cmp	r7, #0
 800adfe:	dd08      	ble.n	800ae12 <_strtod_l+0x76a>
 800ae00:	9905      	ldr	r1, [sp, #20]
 800ae02:	463a      	mov	r2, r7
 800ae04:	4620      	mov	r0, r4
 800ae06:	f7ff f9df 	bl	800a1c8 <__lshift>
 800ae0a:	9005      	str	r0, [sp, #20]
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	f43f ae8f 	beq.w	800ab30 <_strtod_l+0x488>
 800ae12:	f1ba 0f00 	cmp.w	sl, #0
 800ae16:	dd08      	ble.n	800ae2a <_strtod_l+0x782>
 800ae18:	4659      	mov	r1, fp
 800ae1a:	4652      	mov	r2, sl
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	f7ff f9d3 	bl	800a1c8 <__lshift>
 800ae22:	4683      	mov	fp, r0
 800ae24:	2800      	cmp	r0, #0
 800ae26:	f43f ae83 	beq.w	800ab30 <_strtod_l+0x488>
 800ae2a:	9a05      	ldr	r2, [sp, #20]
 800ae2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7ff fa52 	bl	800a2d8 <__mdiff>
 800ae34:	4605      	mov	r5, r0
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f43f ae7a 	beq.w	800ab30 <_strtod_l+0x488>
 800ae3c:	68c3      	ldr	r3, [r0, #12]
 800ae3e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae40:	2300      	movs	r3, #0
 800ae42:	60c3      	str	r3, [r0, #12]
 800ae44:	4659      	mov	r1, fp
 800ae46:	f7ff fa2b 	bl	800a2a0 <__mcmp>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	da60      	bge.n	800af10 <_strtod_l+0x868>
 800ae4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae50:	ea53 0308 	orrs.w	r3, r3, r8
 800ae54:	f040 8084 	bne.w	800af60 <_strtod_l+0x8b8>
 800ae58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d17f      	bne.n	800af60 <_strtod_l+0x8b8>
 800ae60:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae64:	0d1b      	lsrs	r3, r3, #20
 800ae66:	051b      	lsls	r3, r3, #20
 800ae68:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae6c:	d978      	bls.n	800af60 <_strtod_l+0x8b8>
 800ae6e:	696b      	ldr	r3, [r5, #20]
 800ae70:	b913      	cbnz	r3, 800ae78 <_strtod_l+0x7d0>
 800ae72:	692b      	ldr	r3, [r5, #16]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	dd73      	ble.n	800af60 <_strtod_l+0x8b8>
 800ae78:	4629      	mov	r1, r5
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f7ff f9a3 	bl	800a1c8 <__lshift>
 800ae82:	4659      	mov	r1, fp
 800ae84:	4605      	mov	r5, r0
 800ae86:	f7ff fa0b 	bl	800a2a0 <__mcmp>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	dd68      	ble.n	800af60 <_strtod_l+0x8b8>
 800ae8e:	9904      	ldr	r1, [sp, #16]
 800ae90:	4a54      	ldr	r2, [pc, #336]	; (800afe4 <_strtod_l+0x93c>)
 800ae92:	464b      	mov	r3, r9
 800ae94:	2900      	cmp	r1, #0
 800ae96:	f000 8084 	beq.w	800afa2 <_strtod_l+0x8fa>
 800ae9a:	ea02 0109 	and.w	r1, r2, r9
 800ae9e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800aea2:	dc7e      	bgt.n	800afa2 <_strtod_l+0x8fa>
 800aea4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800aea8:	f77f aeb3 	ble.w	800ac12 <_strtod_l+0x56a>
 800aeac:	4b4e      	ldr	r3, [pc, #312]	; (800afe8 <_strtod_l+0x940>)
 800aeae:	4640      	mov	r0, r8
 800aeb0:	4649      	mov	r1, r9
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f7f5 fbc0 	bl	8000638 <__aeabi_dmul>
 800aeb8:	4b4a      	ldr	r3, [pc, #296]	; (800afe4 <_strtod_l+0x93c>)
 800aeba:	400b      	ands	r3, r1
 800aebc:	4680      	mov	r8, r0
 800aebe:	4689      	mov	r9, r1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f47f ae3f 	bne.w	800ab44 <_strtod_l+0x49c>
 800aec6:	2322      	movs	r3, #34	; 0x22
 800aec8:	6023      	str	r3, [r4, #0]
 800aeca:	e63b      	b.n	800ab44 <_strtod_l+0x49c>
 800aecc:	f04f 32ff 	mov.w	r2, #4294967295
 800aed0:	fa02 f303 	lsl.w	r3, r2, r3
 800aed4:	ea03 0808 	and.w	r8, r3, r8
 800aed8:	e6e8      	b.n	800acac <_strtod_l+0x604>
 800aeda:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800aede:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800aee2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800aee6:	36e2      	adds	r6, #226	; 0xe2
 800aee8:	fa01 f306 	lsl.w	r3, r1, r6
 800aeec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800aef0:	e748      	b.n	800ad84 <_strtod_l+0x6dc>
 800aef2:	2100      	movs	r1, #0
 800aef4:	2301      	movs	r3, #1
 800aef6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800aefa:	e743      	b.n	800ad84 <_strtod_l+0x6dc>
 800aefc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aefe:	4632      	mov	r2, r6
 800af00:	4620      	mov	r0, r4
 800af02:	f7ff f961 	bl	800a1c8 <__lshift>
 800af06:	9016      	str	r0, [sp, #88]	; 0x58
 800af08:	2800      	cmp	r0, #0
 800af0a:	f47f af6b 	bne.w	800ade4 <_strtod_l+0x73c>
 800af0e:	e60f      	b.n	800ab30 <_strtod_l+0x488>
 800af10:	46ca      	mov	sl, r9
 800af12:	d171      	bne.n	800aff8 <_strtod_l+0x950>
 800af14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800af16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af1a:	b352      	cbz	r2, 800af72 <_strtod_l+0x8ca>
 800af1c:	4a33      	ldr	r2, [pc, #204]	; (800afec <_strtod_l+0x944>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d12a      	bne.n	800af78 <_strtod_l+0x8d0>
 800af22:	9b04      	ldr	r3, [sp, #16]
 800af24:	4641      	mov	r1, r8
 800af26:	b1fb      	cbz	r3, 800af68 <_strtod_l+0x8c0>
 800af28:	4b2e      	ldr	r3, [pc, #184]	; (800afe4 <_strtod_l+0x93c>)
 800af2a:	ea09 0303 	and.w	r3, r9, r3
 800af2e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af32:	f04f 32ff 	mov.w	r2, #4294967295
 800af36:	d81a      	bhi.n	800af6e <_strtod_l+0x8c6>
 800af38:	0d1b      	lsrs	r3, r3, #20
 800af3a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af3e:	fa02 f303 	lsl.w	r3, r2, r3
 800af42:	4299      	cmp	r1, r3
 800af44:	d118      	bne.n	800af78 <_strtod_l+0x8d0>
 800af46:	4b2a      	ldr	r3, [pc, #168]	; (800aff0 <_strtod_l+0x948>)
 800af48:	459a      	cmp	sl, r3
 800af4a:	d102      	bne.n	800af52 <_strtod_l+0x8aa>
 800af4c:	3101      	adds	r1, #1
 800af4e:	f43f adef 	beq.w	800ab30 <_strtod_l+0x488>
 800af52:	4b24      	ldr	r3, [pc, #144]	; (800afe4 <_strtod_l+0x93c>)
 800af54:	ea0a 0303 	and.w	r3, sl, r3
 800af58:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800af5c:	f04f 0800 	mov.w	r8, #0
 800af60:	9b04      	ldr	r3, [sp, #16]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1a2      	bne.n	800aeac <_strtod_l+0x804>
 800af66:	e5ed      	b.n	800ab44 <_strtod_l+0x49c>
 800af68:	f04f 33ff 	mov.w	r3, #4294967295
 800af6c:	e7e9      	b.n	800af42 <_strtod_l+0x89a>
 800af6e:	4613      	mov	r3, r2
 800af70:	e7e7      	b.n	800af42 <_strtod_l+0x89a>
 800af72:	ea53 0308 	orrs.w	r3, r3, r8
 800af76:	d08a      	beq.n	800ae8e <_strtod_l+0x7e6>
 800af78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af7a:	b1e3      	cbz	r3, 800afb6 <_strtod_l+0x90e>
 800af7c:	ea13 0f0a 	tst.w	r3, sl
 800af80:	d0ee      	beq.n	800af60 <_strtod_l+0x8b8>
 800af82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af84:	9a04      	ldr	r2, [sp, #16]
 800af86:	4640      	mov	r0, r8
 800af88:	4649      	mov	r1, r9
 800af8a:	b1c3      	cbz	r3, 800afbe <_strtod_l+0x916>
 800af8c:	f7ff fb6f 	bl	800a66e <sulp>
 800af90:	4602      	mov	r2, r0
 800af92:	460b      	mov	r3, r1
 800af94:	ec51 0b18 	vmov	r0, r1, d8
 800af98:	f7f5 f998 	bl	80002cc <__adddf3>
 800af9c:	4680      	mov	r8, r0
 800af9e:	4689      	mov	r9, r1
 800afa0:	e7de      	b.n	800af60 <_strtod_l+0x8b8>
 800afa2:	4013      	ands	r3, r2
 800afa4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800afa8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800afac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800afb0:	f04f 38ff 	mov.w	r8, #4294967295
 800afb4:	e7d4      	b.n	800af60 <_strtod_l+0x8b8>
 800afb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800afb8:	ea13 0f08 	tst.w	r3, r8
 800afbc:	e7e0      	b.n	800af80 <_strtod_l+0x8d8>
 800afbe:	f7ff fb56 	bl	800a66e <sulp>
 800afc2:	4602      	mov	r2, r0
 800afc4:	460b      	mov	r3, r1
 800afc6:	ec51 0b18 	vmov	r0, r1, d8
 800afca:	f7f5 f97d 	bl	80002c8 <__aeabi_dsub>
 800afce:	2200      	movs	r2, #0
 800afd0:	2300      	movs	r3, #0
 800afd2:	4680      	mov	r8, r0
 800afd4:	4689      	mov	r9, r1
 800afd6:	f7f5 fd97 	bl	8000b08 <__aeabi_dcmpeq>
 800afda:	2800      	cmp	r0, #0
 800afdc:	d0c0      	beq.n	800af60 <_strtod_l+0x8b8>
 800afde:	e618      	b.n	800ac12 <_strtod_l+0x56a>
 800afe0:	fffffc02 	.word	0xfffffc02
 800afe4:	7ff00000 	.word	0x7ff00000
 800afe8:	39500000 	.word	0x39500000
 800afec:	000fffff 	.word	0x000fffff
 800aff0:	7fefffff 	.word	0x7fefffff
 800aff4:	0800c880 	.word	0x0800c880
 800aff8:	4659      	mov	r1, fp
 800affa:	4628      	mov	r0, r5
 800affc:	f7ff fac0 	bl	800a580 <__ratio>
 800b000:	ec57 6b10 	vmov	r6, r7, d0
 800b004:	ee10 0a10 	vmov	r0, s0
 800b008:	2200      	movs	r2, #0
 800b00a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b00e:	4639      	mov	r1, r7
 800b010:	f7f5 fd8e 	bl	8000b30 <__aeabi_dcmple>
 800b014:	2800      	cmp	r0, #0
 800b016:	d071      	beq.n	800b0fc <_strtod_l+0xa54>
 800b018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d17c      	bne.n	800b118 <_strtod_l+0xa70>
 800b01e:	f1b8 0f00 	cmp.w	r8, #0
 800b022:	d15a      	bne.n	800b0da <_strtod_l+0xa32>
 800b024:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d15d      	bne.n	800b0e8 <_strtod_l+0xa40>
 800b02c:	4b90      	ldr	r3, [pc, #576]	; (800b270 <_strtod_l+0xbc8>)
 800b02e:	2200      	movs	r2, #0
 800b030:	4630      	mov	r0, r6
 800b032:	4639      	mov	r1, r7
 800b034:	f7f5 fd72 	bl	8000b1c <__aeabi_dcmplt>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d15c      	bne.n	800b0f6 <_strtod_l+0xa4e>
 800b03c:	4630      	mov	r0, r6
 800b03e:	4639      	mov	r1, r7
 800b040:	4b8c      	ldr	r3, [pc, #560]	; (800b274 <_strtod_l+0xbcc>)
 800b042:	2200      	movs	r2, #0
 800b044:	f7f5 faf8 	bl	8000638 <__aeabi_dmul>
 800b048:	4606      	mov	r6, r0
 800b04a:	460f      	mov	r7, r1
 800b04c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b050:	9606      	str	r6, [sp, #24]
 800b052:	9307      	str	r3, [sp, #28]
 800b054:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b058:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b05c:	4b86      	ldr	r3, [pc, #536]	; (800b278 <_strtod_l+0xbd0>)
 800b05e:	ea0a 0303 	and.w	r3, sl, r3
 800b062:	930d      	str	r3, [sp, #52]	; 0x34
 800b064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b066:	4b85      	ldr	r3, [pc, #532]	; (800b27c <_strtod_l+0xbd4>)
 800b068:	429a      	cmp	r2, r3
 800b06a:	f040 8090 	bne.w	800b18e <_strtod_l+0xae6>
 800b06e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b072:	ec49 8b10 	vmov	d0, r8, r9
 800b076:	f7ff f9b9 	bl	800a3ec <__ulp>
 800b07a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b07e:	ec51 0b10 	vmov	r0, r1, d0
 800b082:	f7f5 fad9 	bl	8000638 <__aeabi_dmul>
 800b086:	4642      	mov	r2, r8
 800b088:	464b      	mov	r3, r9
 800b08a:	f7f5 f91f 	bl	80002cc <__adddf3>
 800b08e:	460b      	mov	r3, r1
 800b090:	4979      	ldr	r1, [pc, #484]	; (800b278 <_strtod_l+0xbd0>)
 800b092:	4a7b      	ldr	r2, [pc, #492]	; (800b280 <_strtod_l+0xbd8>)
 800b094:	4019      	ands	r1, r3
 800b096:	4291      	cmp	r1, r2
 800b098:	4680      	mov	r8, r0
 800b09a:	d944      	bls.n	800b126 <_strtod_l+0xa7e>
 800b09c:	ee18 2a90 	vmov	r2, s17
 800b0a0:	4b78      	ldr	r3, [pc, #480]	; (800b284 <_strtod_l+0xbdc>)
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d104      	bne.n	800b0b0 <_strtod_l+0xa08>
 800b0a6:	ee18 3a10 	vmov	r3, s16
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	f43f ad40 	beq.w	800ab30 <_strtod_l+0x488>
 800b0b0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b284 <_strtod_l+0xbdc>
 800b0b4:	f04f 38ff 	mov.w	r8, #4294967295
 800b0b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f7fe fe6a 	bl	8009d94 <_Bfree>
 800b0c0:	9905      	ldr	r1, [sp, #20]
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f7fe fe66 	bl	8009d94 <_Bfree>
 800b0c8:	4659      	mov	r1, fp
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f7fe fe62 	bl	8009d94 <_Bfree>
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f7fe fe5e 	bl	8009d94 <_Bfree>
 800b0d8:	e609      	b.n	800acee <_strtod_l+0x646>
 800b0da:	f1b8 0f01 	cmp.w	r8, #1
 800b0de:	d103      	bne.n	800b0e8 <_strtod_l+0xa40>
 800b0e0:	f1b9 0f00 	cmp.w	r9, #0
 800b0e4:	f43f ad95 	beq.w	800ac12 <_strtod_l+0x56a>
 800b0e8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b240 <_strtod_l+0xb98>
 800b0ec:	4f60      	ldr	r7, [pc, #384]	; (800b270 <_strtod_l+0xbc8>)
 800b0ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0f2:	2600      	movs	r6, #0
 800b0f4:	e7ae      	b.n	800b054 <_strtod_l+0x9ac>
 800b0f6:	4f5f      	ldr	r7, [pc, #380]	; (800b274 <_strtod_l+0xbcc>)
 800b0f8:	2600      	movs	r6, #0
 800b0fa:	e7a7      	b.n	800b04c <_strtod_l+0x9a4>
 800b0fc:	4b5d      	ldr	r3, [pc, #372]	; (800b274 <_strtod_l+0xbcc>)
 800b0fe:	4630      	mov	r0, r6
 800b100:	4639      	mov	r1, r7
 800b102:	2200      	movs	r2, #0
 800b104:	f7f5 fa98 	bl	8000638 <__aeabi_dmul>
 800b108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10a:	4606      	mov	r6, r0
 800b10c:	460f      	mov	r7, r1
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d09c      	beq.n	800b04c <_strtod_l+0x9a4>
 800b112:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b116:	e79d      	b.n	800b054 <_strtod_l+0x9ac>
 800b118:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b248 <_strtod_l+0xba0>
 800b11c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b120:	ec57 6b17 	vmov	r6, r7, d7
 800b124:	e796      	b.n	800b054 <_strtod_l+0x9ac>
 800b126:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b12a:	9b04      	ldr	r3, [sp, #16]
 800b12c:	46ca      	mov	sl, r9
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1c2      	bne.n	800b0b8 <_strtod_l+0xa10>
 800b132:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b136:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b138:	0d1b      	lsrs	r3, r3, #20
 800b13a:	051b      	lsls	r3, r3, #20
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d1bb      	bne.n	800b0b8 <_strtod_l+0xa10>
 800b140:	4630      	mov	r0, r6
 800b142:	4639      	mov	r1, r7
 800b144:	f7f5 fdd8 	bl	8000cf8 <__aeabi_d2lz>
 800b148:	f7f5 fa48 	bl	80005dc <__aeabi_l2d>
 800b14c:	4602      	mov	r2, r0
 800b14e:	460b      	mov	r3, r1
 800b150:	4630      	mov	r0, r6
 800b152:	4639      	mov	r1, r7
 800b154:	f7f5 f8b8 	bl	80002c8 <__aeabi_dsub>
 800b158:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b15a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b15e:	ea43 0308 	orr.w	r3, r3, r8
 800b162:	4313      	orrs	r3, r2
 800b164:	4606      	mov	r6, r0
 800b166:	460f      	mov	r7, r1
 800b168:	d054      	beq.n	800b214 <_strtod_l+0xb6c>
 800b16a:	a339      	add	r3, pc, #228	; (adr r3, 800b250 <_strtod_l+0xba8>)
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	f7f5 fcd4 	bl	8000b1c <__aeabi_dcmplt>
 800b174:	2800      	cmp	r0, #0
 800b176:	f47f ace5 	bne.w	800ab44 <_strtod_l+0x49c>
 800b17a:	a337      	add	r3, pc, #220	; (adr r3, 800b258 <_strtod_l+0xbb0>)
 800b17c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b180:	4630      	mov	r0, r6
 800b182:	4639      	mov	r1, r7
 800b184:	f7f5 fce8 	bl	8000b58 <__aeabi_dcmpgt>
 800b188:	2800      	cmp	r0, #0
 800b18a:	d095      	beq.n	800b0b8 <_strtod_l+0xa10>
 800b18c:	e4da      	b.n	800ab44 <_strtod_l+0x49c>
 800b18e:	9b04      	ldr	r3, [sp, #16]
 800b190:	b333      	cbz	r3, 800b1e0 <_strtod_l+0xb38>
 800b192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b194:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b198:	d822      	bhi.n	800b1e0 <_strtod_l+0xb38>
 800b19a:	a331      	add	r3, pc, #196	; (adr r3, 800b260 <_strtod_l+0xbb8>)
 800b19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a0:	4630      	mov	r0, r6
 800b1a2:	4639      	mov	r1, r7
 800b1a4:	f7f5 fcc4 	bl	8000b30 <__aeabi_dcmple>
 800b1a8:	b1a0      	cbz	r0, 800b1d4 <_strtod_l+0xb2c>
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f7f5 fd1b 	bl	8000be8 <__aeabi_d2uiz>
 800b1b2:	2801      	cmp	r0, #1
 800b1b4:	bf38      	it	cc
 800b1b6:	2001      	movcc	r0, #1
 800b1b8:	f7f5 f9c4 	bl	8000544 <__aeabi_ui2d>
 800b1bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1be:	4606      	mov	r6, r0
 800b1c0:	460f      	mov	r7, r1
 800b1c2:	bb23      	cbnz	r3, 800b20e <_strtod_l+0xb66>
 800b1c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1c8:	9010      	str	r0, [sp, #64]	; 0x40
 800b1ca:	9311      	str	r3, [sp, #68]	; 0x44
 800b1cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1d0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b1d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b1d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1d8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b1dc:	1a9b      	subs	r3, r3, r2
 800b1de:	930f      	str	r3, [sp, #60]	; 0x3c
 800b1e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b1e4:	eeb0 0a48 	vmov.f32	s0, s16
 800b1e8:	eef0 0a68 	vmov.f32	s1, s17
 800b1ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b1f0:	f7ff f8fc 	bl	800a3ec <__ulp>
 800b1f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b1f8:	ec53 2b10 	vmov	r2, r3, d0
 800b1fc:	f7f5 fa1c 	bl	8000638 <__aeabi_dmul>
 800b200:	ec53 2b18 	vmov	r2, r3, d8
 800b204:	f7f5 f862 	bl	80002cc <__adddf3>
 800b208:	4680      	mov	r8, r0
 800b20a:	4689      	mov	r9, r1
 800b20c:	e78d      	b.n	800b12a <_strtod_l+0xa82>
 800b20e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b212:	e7db      	b.n	800b1cc <_strtod_l+0xb24>
 800b214:	a314      	add	r3, pc, #80	; (adr r3, 800b268 <_strtod_l+0xbc0>)
 800b216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21a:	f7f5 fc7f 	bl	8000b1c <__aeabi_dcmplt>
 800b21e:	e7b3      	b.n	800b188 <_strtod_l+0xae0>
 800b220:	2300      	movs	r3, #0
 800b222:	930a      	str	r3, [sp, #40]	; 0x28
 800b224:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b226:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b228:	6013      	str	r3, [r2, #0]
 800b22a:	f7ff ba7c 	b.w	800a726 <_strtod_l+0x7e>
 800b22e:	2a65      	cmp	r2, #101	; 0x65
 800b230:	f43f ab75 	beq.w	800a91e <_strtod_l+0x276>
 800b234:	2a45      	cmp	r2, #69	; 0x45
 800b236:	f43f ab72 	beq.w	800a91e <_strtod_l+0x276>
 800b23a:	2301      	movs	r3, #1
 800b23c:	f7ff bbaa 	b.w	800a994 <_strtod_l+0x2ec>
 800b240:	00000000 	.word	0x00000000
 800b244:	bff00000 	.word	0xbff00000
 800b248:	00000000 	.word	0x00000000
 800b24c:	3ff00000 	.word	0x3ff00000
 800b250:	94a03595 	.word	0x94a03595
 800b254:	3fdfffff 	.word	0x3fdfffff
 800b258:	35afe535 	.word	0x35afe535
 800b25c:	3fe00000 	.word	0x3fe00000
 800b260:	ffc00000 	.word	0xffc00000
 800b264:	41dfffff 	.word	0x41dfffff
 800b268:	94a03595 	.word	0x94a03595
 800b26c:	3fcfffff 	.word	0x3fcfffff
 800b270:	3ff00000 	.word	0x3ff00000
 800b274:	3fe00000 	.word	0x3fe00000
 800b278:	7ff00000 	.word	0x7ff00000
 800b27c:	7fe00000 	.word	0x7fe00000
 800b280:	7c9fffff 	.word	0x7c9fffff
 800b284:	7fefffff 	.word	0x7fefffff

0800b288 <_strtod_r>:
 800b288:	4b01      	ldr	r3, [pc, #4]	; (800b290 <_strtod_r+0x8>)
 800b28a:	f7ff ba0d 	b.w	800a6a8 <_strtod_l>
 800b28e:	bf00      	nop
 800b290:	2000007c 	.word	0x2000007c

0800b294 <_strtol_l.constprop.0>:
 800b294:	2b01      	cmp	r3, #1
 800b296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29a:	d001      	beq.n	800b2a0 <_strtol_l.constprop.0+0xc>
 800b29c:	2b24      	cmp	r3, #36	; 0x24
 800b29e:	d906      	bls.n	800b2ae <_strtol_l.constprop.0+0x1a>
 800b2a0:	f7fd fd8a 	bl	8008db8 <__errno>
 800b2a4:	2316      	movs	r3, #22
 800b2a6:	6003      	str	r3, [r0, #0]
 800b2a8:	2000      	movs	r0, #0
 800b2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b394 <_strtol_l.constprop.0+0x100>
 800b2b2:	460d      	mov	r5, r1
 800b2b4:	462e      	mov	r6, r5
 800b2b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b2be:	f017 0708 	ands.w	r7, r7, #8
 800b2c2:	d1f7      	bne.n	800b2b4 <_strtol_l.constprop.0+0x20>
 800b2c4:	2c2d      	cmp	r4, #45	; 0x2d
 800b2c6:	d132      	bne.n	800b32e <_strtol_l.constprop.0+0x9a>
 800b2c8:	782c      	ldrb	r4, [r5, #0]
 800b2ca:	2701      	movs	r7, #1
 800b2cc:	1cb5      	adds	r5, r6, #2
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d05b      	beq.n	800b38a <_strtol_l.constprop.0+0xf6>
 800b2d2:	2b10      	cmp	r3, #16
 800b2d4:	d109      	bne.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b2d6:	2c30      	cmp	r4, #48	; 0x30
 800b2d8:	d107      	bne.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b2da:	782c      	ldrb	r4, [r5, #0]
 800b2dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2e0:	2c58      	cmp	r4, #88	; 0x58
 800b2e2:	d14d      	bne.n	800b380 <_strtol_l.constprop.0+0xec>
 800b2e4:	786c      	ldrb	r4, [r5, #1]
 800b2e6:	2310      	movs	r3, #16
 800b2e8:	3502      	adds	r5, #2
 800b2ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b2ee:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2f2:	f04f 0e00 	mov.w	lr, #0
 800b2f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b2fa:	4676      	mov	r6, lr
 800b2fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b300:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b304:	f1bc 0f09 	cmp.w	ip, #9
 800b308:	d816      	bhi.n	800b338 <_strtol_l.constprop.0+0xa4>
 800b30a:	4664      	mov	r4, ip
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	dd24      	ble.n	800b35a <_strtol_l.constprop.0+0xc6>
 800b310:	f1be 3fff 	cmp.w	lr, #4294967295
 800b314:	d008      	beq.n	800b328 <_strtol_l.constprop.0+0x94>
 800b316:	45b1      	cmp	r9, r6
 800b318:	d31c      	bcc.n	800b354 <_strtol_l.constprop.0+0xc0>
 800b31a:	d101      	bne.n	800b320 <_strtol_l.constprop.0+0x8c>
 800b31c:	45a2      	cmp	sl, r4
 800b31e:	db19      	blt.n	800b354 <_strtol_l.constprop.0+0xc0>
 800b320:	fb06 4603 	mla	r6, r6, r3, r4
 800b324:	f04f 0e01 	mov.w	lr, #1
 800b328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b32c:	e7e8      	b.n	800b300 <_strtol_l.constprop.0+0x6c>
 800b32e:	2c2b      	cmp	r4, #43	; 0x2b
 800b330:	bf04      	itt	eq
 800b332:	782c      	ldrbeq	r4, [r5, #0]
 800b334:	1cb5      	addeq	r5, r6, #2
 800b336:	e7ca      	b.n	800b2ce <_strtol_l.constprop.0+0x3a>
 800b338:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b33c:	f1bc 0f19 	cmp.w	ip, #25
 800b340:	d801      	bhi.n	800b346 <_strtol_l.constprop.0+0xb2>
 800b342:	3c37      	subs	r4, #55	; 0x37
 800b344:	e7e2      	b.n	800b30c <_strtol_l.constprop.0+0x78>
 800b346:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b34a:	f1bc 0f19 	cmp.w	ip, #25
 800b34e:	d804      	bhi.n	800b35a <_strtol_l.constprop.0+0xc6>
 800b350:	3c57      	subs	r4, #87	; 0x57
 800b352:	e7db      	b.n	800b30c <_strtol_l.constprop.0+0x78>
 800b354:	f04f 3eff 	mov.w	lr, #4294967295
 800b358:	e7e6      	b.n	800b328 <_strtol_l.constprop.0+0x94>
 800b35a:	f1be 3fff 	cmp.w	lr, #4294967295
 800b35e:	d105      	bne.n	800b36c <_strtol_l.constprop.0+0xd8>
 800b360:	2322      	movs	r3, #34	; 0x22
 800b362:	6003      	str	r3, [r0, #0]
 800b364:	4646      	mov	r6, r8
 800b366:	b942      	cbnz	r2, 800b37a <_strtol_l.constprop.0+0xe6>
 800b368:	4630      	mov	r0, r6
 800b36a:	e79e      	b.n	800b2aa <_strtol_l.constprop.0+0x16>
 800b36c:	b107      	cbz	r7, 800b370 <_strtol_l.constprop.0+0xdc>
 800b36e:	4276      	negs	r6, r6
 800b370:	2a00      	cmp	r2, #0
 800b372:	d0f9      	beq.n	800b368 <_strtol_l.constprop.0+0xd4>
 800b374:	f1be 0f00 	cmp.w	lr, #0
 800b378:	d000      	beq.n	800b37c <_strtol_l.constprop.0+0xe8>
 800b37a:	1e69      	subs	r1, r5, #1
 800b37c:	6011      	str	r1, [r2, #0]
 800b37e:	e7f3      	b.n	800b368 <_strtol_l.constprop.0+0xd4>
 800b380:	2430      	movs	r4, #48	; 0x30
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1b1      	bne.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b386:	2308      	movs	r3, #8
 800b388:	e7af      	b.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b38a:	2c30      	cmp	r4, #48	; 0x30
 800b38c:	d0a5      	beq.n	800b2da <_strtol_l.constprop.0+0x46>
 800b38e:	230a      	movs	r3, #10
 800b390:	e7ab      	b.n	800b2ea <_strtol_l.constprop.0+0x56>
 800b392:	bf00      	nop
 800b394:	0800c8a9 	.word	0x0800c8a9

0800b398 <_strtol_r>:
 800b398:	f7ff bf7c 	b.w	800b294 <_strtol_l.constprop.0>

0800b39c <__ssputs_r>:
 800b39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3a0:	688e      	ldr	r6, [r1, #8]
 800b3a2:	461f      	mov	r7, r3
 800b3a4:	42be      	cmp	r6, r7
 800b3a6:	680b      	ldr	r3, [r1, #0]
 800b3a8:	4682      	mov	sl, r0
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	4690      	mov	r8, r2
 800b3ae:	d82c      	bhi.n	800b40a <__ssputs_r+0x6e>
 800b3b0:	898a      	ldrh	r2, [r1, #12]
 800b3b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3b6:	d026      	beq.n	800b406 <__ssputs_r+0x6a>
 800b3b8:	6965      	ldr	r5, [r4, #20]
 800b3ba:	6909      	ldr	r1, [r1, #16]
 800b3bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3c0:	eba3 0901 	sub.w	r9, r3, r1
 800b3c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3c8:	1c7b      	adds	r3, r7, #1
 800b3ca:	444b      	add	r3, r9
 800b3cc:	106d      	asrs	r5, r5, #1
 800b3ce:	429d      	cmp	r5, r3
 800b3d0:	bf38      	it	cc
 800b3d2:	461d      	movcc	r5, r3
 800b3d4:	0553      	lsls	r3, r2, #21
 800b3d6:	d527      	bpl.n	800b428 <__ssputs_r+0x8c>
 800b3d8:	4629      	mov	r1, r5
 800b3da:	f7fe fc0f 	bl	8009bfc <_malloc_r>
 800b3de:	4606      	mov	r6, r0
 800b3e0:	b360      	cbz	r0, 800b43c <__ssputs_r+0xa0>
 800b3e2:	6921      	ldr	r1, [r4, #16]
 800b3e4:	464a      	mov	r2, r9
 800b3e6:	f000 fa1b 	bl	800b820 <memcpy>
 800b3ea:	89a3      	ldrh	r3, [r4, #12]
 800b3ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	6126      	str	r6, [r4, #16]
 800b3f8:	6165      	str	r5, [r4, #20]
 800b3fa:	444e      	add	r6, r9
 800b3fc:	eba5 0509 	sub.w	r5, r5, r9
 800b400:	6026      	str	r6, [r4, #0]
 800b402:	60a5      	str	r5, [r4, #8]
 800b404:	463e      	mov	r6, r7
 800b406:	42be      	cmp	r6, r7
 800b408:	d900      	bls.n	800b40c <__ssputs_r+0x70>
 800b40a:	463e      	mov	r6, r7
 800b40c:	6820      	ldr	r0, [r4, #0]
 800b40e:	4632      	mov	r2, r6
 800b410:	4641      	mov	r1, r8
 800b412:	f000 f9c9 	bl	800b7a8 <memmove>
 800b416:	68a3      	ldr	r3, [r4, #8]
 800b418:	1b9b      	subs	r3, r3, r6
 800b41a:	60a3      	str	r3, [r4, #8]
 800b41c:	6823      	ldr	r3, [r4, #0]
 800b41e:	4433      	add	r3, r6
 800b420:	6023      	str	r3, [r4, #0]
 800b422:	2000      	movs	r0, #0
 800b424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b428:	462a      	mov	r2, r5
 800b42a:	f000 fdae 	bl	800bf8a <_realloc_r>
 800b42e:	4606      	mov	r6, r0
 800b430:	2800      	cmp	r0, #0
 800b432:	d1e0      	bne.n	800b3f6 <__ssputs_r+0x5a>
 800b434:	6921      	ldr	r1, [r4, #16]
 800b436:	4650      	mov	r0, sl
 800b438:	f7fe fb6c 	bl	8009b14 <_free_r>
 800b43c:	230c      	movs	r3, #12
 800b43e:	f8ca 3000 	str.w	r3, [sl]
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b448:	81a3      	strh	r3, [r4, #12]
 800b44a:	f04f 30ff 	mov.w	r0, #4294967295
 800b44e:	e7e9      	b.n	800b424 <__ssputs_r+0x88>

0800b450 <_svfiprintf_r>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	4698      	mov	r8, r3
 800b456:	898b      	ldrh	r3, [r1, #12]
 800b458:	061b      	lsls	r3, r3, #24
 800b45a:	b09d      	sub	sp, #116	; 0x74
 800b45c:	4607      	mov	r7, r0
 800b45e:	460d      	mov	r5, r1
 800b460:	4614      	mov	r4, r2
 800b462:	d50e      	bpl.n	800b482 <_svfiprintf_r+0x32>
 800b464:	690b      	ldr	r3, [r1, #16]
 800b466:	b963      	cbnz	r3, 800b482 <_svfiprintf_r+0x32>
 800b468:	2140      	movs	r1, #64	; 0x40
 800b46a:	f7fe fbc7 	bl	8009bfc <_malloc_r>
 800b46e:	6028      	str	r0, [r5, #0]
 800b470:	6128      	str	r0, [r5, #16]
 800b472:	b920      	cbnz	r0, 800b47e <_svfiprintf_r+0x2e>
 800b474:	230c      	movs	r3, #12
 800b476:	603b      	str	r3, [r7, #0]
 800b478:	f04f 30ff 	mov.w	r0, #4294967295
 800b47c:	e0d0      	b.n	800b620 <_svfiprintf_r+0x1d0>
 800b47e:	2340      	movs	r3, #64	; 0x40
 800b480:	616b      	str	r3, [r5, #20]
 800b482:	2300      	movs	r3, #0
 800b484:	9309      	str	r3, [sp, #36]	; 0x24
 800b486:	2320      	movs	r3, #32
 800b488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b48c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b490:	2330      	movs	r3, #48	; 0x30
 800b492:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b638 <_svfiprintf_r+0x1e8>
 800b496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b49a:	f04f 0901 	mov.w	r9, #1
 800b49e:	4623      	mov	r3, r4
 800b4a0:	469a      	mov	sl, r3
 800b4a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4a6:	b10a      	cbz	r2, 800b4ac <_svfiprintf_r+0x5c>
 800b4a8:	2a25      	cmp	r2, #37	; 0x25
 800b4aa:	d1f9      	bne.n	800b4a0 <_svfiprintf_r+0x50>
 800b4ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b4b0:	d00b      	beq.n	800b4ca <_svfiprintf_r+0x7a>
 800b4b2:	465b      	mov	r3, fp
 800b4b4:	4622      	mov	r2, r4
 800b4b6:	4629      	mov	r1, r5
 800b4b8:	4638      	mov	r0, r7
 800b4ba:	f7ff ff6f 	bl	800b39c <__ssputs_r>
 800b4be:	3001      	adds	r0, #1
 800b4c0:	f000 80a9 	beq.w	800b616 <_svfiprintf_r+0x1c6>
 800b4c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4c6:	445a      	add	r2, fp
 800b4c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b4ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 80a1 	beq.w	800b616 <_svfiprintf_r+0x1c6>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4de:	f10a 0a01 	add.w	sl, sl, #1
 800b4e2:	9304      	str	r3, [sp, #16]
 800b4e4:	9307      	str	r3, [sp, #28]
 800b4e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b4ec:	4654      	mov	r4, sl
 800b4ee:	2205      	movs	r2, #5
 800b4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f4:	4850      	ldr	r0, [pc, #320]	; (800b638 <_svfiprintf_r+0x1e8>)
 800b4f6:	f7f4 fe8b 	bl	8000210 <memchr>
 800b4fa:	9a04      	ldr	r2, [sp, #16]
 800b4fc:	b9d8      	cbnz	r0, 800b536 <_svfiprintf_r+0xe6>
 800b4fe:	06d0      	lsls	r0, r2, #27
 800b500:	bf44      	itt	mi
 800b502:	2320      	movmi	r3, #32
 800b504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b508:	0711      	lsls	r1, r2, #28
 800b50a:	bf44      	itt	mi
 800b50c:	232b      	movmi	r3, #43	; 0x2b
 800b50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b512:	f89a 3000 	ldrb.w	r3, [sl]
 800b516:	2b2a      	cmp	r3, #42	; 0x2a
 800b518:	d015      	beq.n	800b546 <_svfiprintf_r+0xf6>
 800b51a:	9a07      	ldr	r2, [sp, #28]
 800b51c:	4654      	mov	r4, sl
 800b51e:	2000      	movs	r0, #0
 800b520:	f04f 0c0a 	mov.w	ip, #10
 800b524:	4621      	mov	r1, r4
 800b526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b52a:	3b30      	subs	r3, #48	; 0x30
 800b52c:	2b09      	cmp	r3, #9
 800b52e:	d94d      	bls.n	800b5cc <_svfiprintf_r+0x17c>
 800b530:	b1b0      	cbz	r0, 800b560 <_svfiprintf_r+0x110>
 800b532:	9207      	str	r2, [sp, #28]
 800b534:	e014      	b.n	800b560 <_svfiprintf_r+0x110>
 800b536:	eba0 0308 	sub.w	r3, r0, r8
 800b53a:	fa09 f303 	lsl.w	r3, r9, r3
 800b53e:	4313      	orrs	r3, r2
 800b540:	9304      	str	r3, [sp, #16]
 800b542:	46a2      	mov	sl, r4
 800b544:	e7d2      	b.n	800b4ec <_svfiprintf_r+0x9c>
 800b546:	9b03      	ldr	r3, [sp, #12]
 800b548:	1d19      	adds	r1, r3, #4
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	9103      	str	r1, [sp, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	bfbb      	ittet	lt
 800b552:	425b      	neglt	r3, r3
 800b554:	f042 0202 	orrlt.w	r2, r2, #2
 800b558:	9307      	strge	r3, [sp, #28]
 800b55a:	9307      	strlt	r3, [sp, #28]
 800b55c:	bfb8      	it	lt
 800b55e:	9204      	strlt	r2, [sp, #16]
 800b560:	7823      	ldrb	r3, [r4, #0]
 800b562:	2b2e      	cmp	r3, #46	; 0x2e
 800b564:	d10c      	bne.n	800b580 <_svfiprintf_r+0x130>
 800b566:	7863      	ldrb	r3, [r4, #1]
 800b568:	2b2a      	cmp	r3, #42	; 0x2a
 800b56a:	d134      	bne.n	800b5d6 <_svfiprintf_r+0x186>
 800b56c:	9b03      	ldr	r3, [sp, #12]
 800b56e:	1d1a      	adds	r2, r3, #4
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	9203      	str	r2, [sp, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	bfb8      	it	lt
 800b578:	f04f 33ff 	movlt.w	r3, #4294967295
 800b57c:	3402      	adds	r4, #2
 800b57e:	9305      	str	r3, [sp, #20]
 800b580:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b648 <_svfiprintf_r+0x1f8>
 800b584:	7821      	ldrb	r1, [r4, #0]
 800b586:	2203      	movs	r2, #3
 800b588:	4650      	mov	r0, sl
 800b58a:	f7f4 fe41 	bl	8000210 <memchr>
 800b58e:	b138      	cbz	r0, 800b5a0 <_svfiprintf_r+0x150>
 800b590:	9b04      	ldr	r3, [sp, #16]
 800b592:	eba0 000a 	sub.w	r0, r0, sl
 800b596:	2240      	movs	r2, #64	; 0x40
 800b598:	4082      	lsls	r2, r0
 800b59a:	4313      	orrs	r3, r2
 800b59c:	3401      	adds	r4, #1
 800b59e:	9304      	str	r3, [sp, #16]
 800b5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a4:	4825      	ldr	r0, [pc, #148]	; (800b63c <_svfiprintf_r+0x1ec>)
 800b5a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5aa:	2206      	movs	r2, #6
 800b5ac:	f7f4 fe30 	bl	8000210 <memchr>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d038      	beq.n	800b626 <_svfiprintf_r+0x1d6>
 800b5b4:	4b22      	ldr	r3, [pc, #136]	; (800b640 <_svfiprintf_r+0x1f0>)
 800b5b6:	bb1b      	cbnz	r3, 800b600 <_svfiprintf_r+0x1b0>
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	3307      	adds	r3, #7
 800b5bc:	f023 0307 	bic.w	r3, r3, #7
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	9303      	str	r3, [sp, #12]
 800b5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5c6:	4433      	add	r3, r6
 800b5c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ca:	e768      	b.n	800b49e <_svfiprintf_r+0x4e>
 800b5cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5d0:	460c      	mov	r4, r1
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	e7a6      	b.n	800b524 <_svfiprintf_r+0xd4>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	3401      	adds	r4, #1
 800b5da:	9305      	str	r3, [sp, #20]
 800b5dc:	4619      	mov	r1, r3
 800b5de:	f04f 0c0a 	mov.w	ip, #10
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5e8:	3a30      	subs	r2, #48	; 0x30
 800b5ea:	2a09      	cmp	r2, #9
 800b5ec:	d903      	bls.n	800b5f6 <_svfiprintf_r+0x1a6>
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d0c6      	beq.n	800b580 <_svfiprintf_r+0x130>
 800b5f2:	9105      	str	r1, [sp, #20]
 800b5f4:	e7c4      	b.n	800b580 <_svfiprintf_r+0x130>
 800b5f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e7f0      	b.n	800b5e2 <_svfiprintf_r+0x192>
 800b600:	ab03      	add	r3, sp, #12
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	462a      	mov	r2, r5
 800b606:	4b0f      	ldr	r3, [pc, #60]	; (800b644 <_svfiprintf_r+0x1f4>)
 800b608:	a904      	add	r1, sp, #16
 800b60a:	4638      	mov	r0, r7
 800b60c:	f7fc fc86 	bl	8007f1c <_printf_float>
 800b610:	1c42      	adds	r2, r0, #1
 800b612:	4606      	mov	r6, r0
 800b614:	d1d6      	bne.n	800b5c4 <_svfiprintf_r+0x174>
 800b616:	89ab      	ldrh	r3, [r5, #12]
 800b618:	065b      	lsls	r3, r3, #25
 800b61a:	f53f af2d 	bmi.w	800b478 <_svfiprintf_r+0x28>
 800b61e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b620:	b01d      	add	sp, #116	; 0x74
 800b622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b626:	ab03      	add	r3, sp, #12
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	462a      	mov	r2, r5
 800b62c:	4b05      	ldr	r3, [pc, #20]	; (800b644 <_svfiprintf_r+0x1f4>)
 800b62e:	a904      	add	r1, sp, #16
 800b630:	4638      	mov	r0, r7
 800b632:	f7fc ff17 	bl	8008464 <_printf_i>
 800b636:	e7eb      	b.n	800b610 <_svfiprintf_r+0x1c0>
 800b638:	0800c9a9 	.word	0x0800c9a9
 800b63c:	0800c9b3 	.word	0x0800c9b3
 800b640:	08007f1d 	.word	0x08007f1d
 800b644:	0800b39d 	.word	0x0800b39d
 800b648:	0800c9af 	.word	0x0800c9af

0800b64c <__sflush_r>:
 800b64c:	898a      	ldrh	r2, [r1, #12]
 800b64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b652:	4605      	mov	r5, r0
 800b654:	0710      	lsls	r0, r2, #28
 800b656:	460c      	mov	r4, r1
 800b658:	d458      	bmi.n	800b70c <__sflush_r+0xc0>
 800b65a:	684b      	ldr	r3, [r1, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	dc05      	bgt.n	800b66c <__sflush_r+0x20>
 800b660:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b662:	2b00      	cmp	r3, #0
 800b664:	dc02      	bgt.n	800b66c <__sflush_r+0x20>
 800b666:	2000      	movs	r0, #0
 800b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b66c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b66e:	2e00      	cmp	r6, #0
 800b670:	d0f9      	beq.n	800b666 <__sflush_r+0x1a>
 800b672:	2300      	movs	r3, #0
 800b674:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b678:	682f      	ldr	r7, [r5, #0]
 800b67a:	6a21      	ldr	r1, [r4, #32]
 800b67c:	602b      	str	r3, [r5, #0]
 800b67e:	d032      	beq.n	800b6e6 <__sflush_r+0x9a>
 800b680:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b682:	89a3      	ldrh	r3, [r4, #12]
 800b684:	075a      	lsls	r2, r3, #29
 800b686:	d505      	bpl.n	800b694 <__sflush_r+0x48>
 800b688:	6863      	ldr	r3, [r4, #4]
 800b68a:	1ac0      	subs	r0, r0, r3
 800b68c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b68e:	b10b      	cbz	r3, 800b694 <__sflush_r+0x48>
 800b690:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b692:	1ac0      	subs	r0, r0, r3
 800b694:	2300      	movs	r3, #0
 800b696:	4602      	mov	r2, r0
 800b698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b69a:	6a21      	ldr	r1, [r4, #32]
 800b69c:	4628      	mov	r0, r5
 800b69e:	47b0      	blx	r6
 800b6a0:	1c43      	adds	r3, r0, #1
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	d106      	bne.n	800b6b4 <__sflush_r+0x68>
 800b6a6:	6829      	ldr	r1, [r5, #0]
 800b6a8:	291d      	cmp	r1, #29
 800b6aa:	d82b      	bhi.n	800b704 <__sflush_r+0xb8>
 800b6ac:	4a29      	ldr	r2, [pc, #164]	; (800b754 <__sflush_r+0x108>)
 800b6ae:	410a      	asrs	r2, r1
 800b6b0:	07d6      	lsls	r6, r2, #31
 800b6b2:	d427      	bmi.n	800b704 <__sflush_r+0xb8>
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	6062      	str	r2, [r4, #4]
 800b6b8:	04d9      	lsls	r1, r3, #19
 800b6ba:	6922      	ldr	r2, [r4, #16]
 800b6bc:	6022      	str	r2, [r4, #0]
 800b6be:	d504      	bpl.n	800b6ca <__sflush_r+0x7e>
 800b6c0:	1c42      	adds	r2, r0, #1
 800b6c2:	d101      	bne.n	800b6c8 <__sflush_r+0x7c>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	b903      	cbnz	r3, 800b6ca <__sflush_r+0x7e>
 800b6c8:	6560      	str	r0, [r4, #84]	; 0x54
 800b6ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6cc:	602f      	str	r7, [r5, #0]
 800b6ce:	2900      	cmp	r1, #0
 800b6d0:	d0c9      	beq.n	800b666 <__sflush_r+0x1a>
 800b6d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6d6:	4299      	cmp	r1, r3
 800b6d8:	d002      	beq.n	800b6e0 <__sflush_r+0x94>
 800b6da:	4628      	mov	r0, r5
 800b6dc:	f7fe fa1a 	bl	8009b14 <_free_r>
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	6360      	str	r0, [r4, #52]	; 0x34
 800b6e4:	e7c0      	b.n	800b668 <__sflush_r+0x1c>
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	47b0      	blx	r6
 800b6ec:	1c41      	adds	r1, r0, #1
 800b6ee:	d1c8      	bne.n	800b682 <__sflush_r+0x36>
 800b6f0:	682b      	ldr	r3, [r5, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d0c5      	beq.n	800b682 <__sflush_r+0x36>
 800b6f6:	2b1d      	cmp	r3, #29
 800b6f8:	d001      	beq.n	800b6fe <__sflush_r+0xb2>
 800b6fa:	2b16      	cmp	r3, #22
 800b6fc:	d101      	bne.n	800b702 <__sflush_r+0xb6>
 800b6fe:	602f      	str	r7, [r5, #0]
 800b700:	e7b1      	b.n	800b666 <__sflush_r+0x1a>
 800b702:	89a3      	ldrh	r3, [r4, #12]
 800b704:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b708:	81a3      	strh	r3, [r4, #12]
 800b70a:	e7ad      	b.n	800b668 <__sflush_r+0x1c>
 800b70c:	690f      	ldr	r7, [r1, #16]
 800b70e:	2f00      	cmp	r7, #0
 800b710:	d0a9      	beq.n	800b666 <__sflush_r+0x1a>
 800b712:	0793      	lsls	r3, r2, #30
 800b714:	680e      	ldr	r6, [r1, #0]
 800b716:	bf08      	it	eq
 800b718:	694b      	ldreq	r3, [r1, #20]
 800b71a:	600f      	str	r7, [r1, #0]
 800b71c:	bf18      	it	ne
 800b71e:	2300      	movne	r3, #0
 800b720:	eba6 0807 	sub.w	r8, r6, r7
 800b724:	608b      	str	r3, [r1, #8]
 800b726:	f1b8 0f00 	cmp.w	r8, #0
 800b72a:	dd9c      	ble.n	800b666 <__sflush_r+0x1a>
 800b72c:	6a21      	ldr	r1, [r4, #32]
 800b72e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b730:	4643      	mov	r3, r8
 800b732:	463a      	mov	r2, r7
 800b734:	4628      	mov	r0, r5
 800b736:	47b0      	blx	r6
 800b738:	2800      	cmp	r0, #0
 800b73a:	dc06      	bgt.n	800b74a <__sflush_r+0xfe>
 800b73c:	89a3      	ldrh	r3, [r4, #12]
 800b73e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b742:	81a3      	strh	r3, [r4, #12]
 800b744:	f04f 30ff 	mov.w	r0, #4294967295
 800b748:	e78e      	b.n	800b668 <__sflush_r+0x1c>
 800b74a:	4407      	add	r7, r0
 800b74c:	eba8 0800 	sub.w	r8, r8, r0
 800b750:	e7e9      	b.n	800b726 <__sflush_r+0xda>
 800b752:	bf00      	nop
 800b754:	dfbffffe 	.word	0xdfbffffe

0800b758 <_fflush_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	690b      	ldr	r3, [r1, #16]
 800b75c:	4605      	mov	r5, r0
 800b75e:	460c      	mov	r4, r1
 800b760:	b913      	cbnz	r3, 800b768 <_fflush_r+0x10>
 800b762:	2500      	movs	r5, #0
 800b764:	4628      	mov	r0, r5
 800b766:	bd38      	pop	{r3, r4, r5, pc}
 800b768:	b118      	cbz	r0, 800b772 <_fflush_r+0x1a>
 800b76a:	6a03      	ldr	r3, [r0, #32]
 800b76c:	b90b      	cbnz	r3, 800b772 <_fflush_r+0x1a>
 800b76e:	f7fd fa37 	bl	8008be0 <__sinit>
 800b772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d0f3      	beq.n	800b762 <_fflush_r+0xa>
 800b77a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b77c:	07d0      	lsls	r0, r2, #31
 800b77e:	d404      	bmi.n	800b78a <_fflush_r+0x32>
 800b780:	0599      	lsls	r1, r3, #22
 800b782:	d402      	bmi.n	800b78a <_fflush_r+0x32>
 800b784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b786:	f7fd fb42 	bl	8008e0e <__retarget_lock_acquire_recursive>
 800b78a:	4628      	mov	r0, r5
 800b78c:	4621      	mov	r1, r4
 800b78e:	f7ff ff5d 	bl	800b64c <__sflush_r>
 800b792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b794:	07da      	lsls	r2, r3, #31
 800b796:	4605      	mov	r5, r0
 800b798:	d4e4      	bmi.n	800b764 <_fflush_r+0xc>
 800b79a:	89a3      	ldrh	r3, [r4, #12]
 800b79c:	059b      	lsls	r3, r3, #22
 800b79e:	d4e1      	bmi.n	800b764 <_fflush_r+0xc>
 800b7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7a2:	f7fd fb35 	bl	8008e10 <__retarget_lock_release_recursive>
 800b7a6:	e7dd      	b.n	800b764 <_fflush_r+0xc>

0800b7a8 <memmove>:
 800b7a8:	4288      	cmp	r0, r1
 800b7aa:	b510      	push	{r4, lr}
 800b7ac:	eb01 0402 	add.w	r4, r1, r2
 800b7b0:	d902      	bls.n	800b7b8 <memmove+0x10>
 800b7b2:	4284      	cmp	r4, r0
 800b7b4:	4623      	mov	r3, r4
 800b7b6:	d807      	bhi.n	800b7c8 <memmove+0x20>
 800b7b8:	1e43      	subs	r3, r0, #1
 800b7ba:	42a1      	cmp	r1, r4
 800b7bc:	d008      	beq.n	800b7d0 <memmove+0x28>
 800b7be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7c6:	e7f8      	b.n	800b7ba <memmove+0x12>
 800b7c8:	4402      	add	r2, r0
 800b7ca:	4601      	mov	r1, r0
 800b7cc:	428a      	cmp	r2, r1
 800b7ce:	d100      	bne.n	800b7d2 <memmove+0x2a>
 800b7d0:	bd10      	pop	{r4, pc}
 800b7d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7da:	e7f7      	b.n	800b7cc <memmove+0x24>

0800b7dc <strncmp>:
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	b16a      	cbz	r2, 800b7fc <strncmp+0x20>
 800b7e0:	3901      	subs	r1, #1
 800b7e2:	1884      	adds	r4, r0, r2
 800b7e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d103      	bne.n	800b7f8 <strncmp+0x1c>
 800b7f0:	42a0      	cmp	r0, r4
 800b7f2:	d001      	beq.n	800b7f8 <strncmp+0x1c>
 800b7f4:	2a00      	cmp	r2, #0
 800b7f6:	d1f5      	bne.n	800b7e4 <strncmp+0x8>
 800b7f8:	1ad0      	subs	r0, r2, r3
 800b7fa:	bd10      	pop	{r4, pc}
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	e7fc      	b.n	800b7fa <strncmp+0x1e>

0800b800 <_sbrk_r>:
 800b800:	b538      	push	{r3, r4, r5, lr}
 800b802:	4d06      	ldr	r5, [pc, #24]	; (800b81c <_sbrk_r+0x1c>)
 800b804:	2300      	movs	r3, #0
 800b806:	4604      	mov	r4, r0
 800b808:	4608      	mov	r0, r1
 800b80a:	602b      	str	r3, [r5, #0]
 800b80c:	f7f8 f84c 	bl	80038a8 <_sbrk>
 800b810:	1c43      	adds	r3, r0, #1
 800b812:	d102      	bne.n	800b81a <_sbrk_r+0x1a>
 800b814:	682b      	ldr	r3, [r5, #0]
 800b816:	b103      	cbz	r3, 800b81a <_sbrk_r+0x1a>
 800b818:	6023      	str	r3, [r4, #0]
 800b81a:	bd38      	pop	{r3, r4, r5, pc}
 800b81c:	200007d4 	.word	0x200007d4

0800b820 <memcpy>:
 800b820:	440a      	add	r2, r1
 800b822:	4291      	cmp	r1, r2
 800b824:	f100 33ff 	add.w	r3, r0, #4294967295
 800b828:	d100      	bne.n	800b82c <memcpy+0xc>
 800b82a:	4770      	bx	lr
 800b82c:	b510      	push	{r4, lr}
 800b82e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b832:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b836:	4291      	cmp	r1, r2
 800b838:	d1f9      	bne.n	800b82e <memcpy+0xe>
 800b83a:	bd10      	pop	{r4, pc}
 800b83c:	0000      	movs	r0, r0
	...

0800b840 <nan>:
 800b840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b848 <nan+0x8>
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	00000000 	.word	0x00000000
 800b84c:	7ff80000 	.word	0x7ff80000

0800b850 <__assert_func>:
 800b850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b852:	4614      	mov	r4, r2
 800b854:	461a      	mov	r2, r3
 800b856:	4b09      	ldr	r3, [pc, #36]	; (800b87c <__assert_func+0x2c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4605      	mov	r5, r0
 800b85c:	68d8      	ldr	r0, [r3, #12]
 800b85e:	b14c      	cbz	r4, 800b874 <__assert_func+0x24>
 800b860:	4b07      	ldr	r3, [pc, #28]	; (800b880 <__assert_func+0x30>)
 800b862:	9100      	str	r1, [sp, #0]
 800b864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b868:	4906      	ldr	r1, [pc, #24]	; (800b884 <__assert_func+0x34>)
 800b86a:	462b      	mov	r3, r5
 800b86c:	f000 fbca 	bl	800c004 <fiprintf>
 800b870:	f000 fbda 	bl	800c028 <abort>
 800b874:	4b04      	ldr	r3, [pc, #16]	; (800b888 <__assert_func+0x38>)
 800b876:	461c      	mov	r4, r3
 800b878:	e7f3      	b.n	800b862 <__assert_func+0x12>
 800b87a:	bf00      	nop
 800b87c:	20000078 	.word	0x20000078
 800b880:	0800c9c2 	.word	0x0800c9c2
 800b884:	0800c9cf 	.word	0x0800c9cf
 800b888:	0800c9fd 	.word	0x0800c9fd

0800b88c <_calloc_r>:
 800b88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b88e:	fba1 2402 	umull	r2, r4, r1, r2
 800b892:	b94c      	cbnz	r4, 800b8a8 <_calloc_r+0x1c>
 800b894:	4611      	mov	r1, r2
 800b896:	9201      	str	r2, [sp, #4]
 800b898:	f7fe f9b0 	bl	8009bfc <_malloc_r>
 800b89c:	9a01      	ldr	r2, [sp, #4]
 800b89e:	4605      	mov	r5, r0
 800b8a0:	b930      	cbnz	r0, 800b8b0 <_calloc_r+0x24>
 800b8a2:	4628      	mov	r0, r5
 800b8a4:	b003      	add	sp, #12
 800b8a6:	bd30      	pop	{r4, r5, pc}
 800b8a8:	220c      	movs	r2, #12
 800b8aa:	6002      	str	r2, [r0, #0]
 800b8ac:	2500      	movs	r5, #0
 800b8ae:	e7f8      	b.n	800b8a2 <_calloc_r+0x16>
 800b8b0:	4621      	mov	r1, r4
 800b8b2:	f7fd fa2e 	bl	8008d12 <memset>
 800b8b6:	e7f4      	b.n	800b8a2 <_calloc_r+0x16>

0800b8b8 <rshift>:
 800b8b8:	6903      	ldr	r3, [r0, #16]
 800b8ba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b8be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8c2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b8c6:	f100 0414 	add.w	r4, r0, #20
 800b8ca:	dd45      	ble.n	800b958 <rshift+0xa0>
 800b8cc:	f011 011f 	ands.w	r1, r1, #31
 800b8d0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b8d4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b8d8:	d10c      	bne.n	800b8f4 <rshift+0x3c>
 800b8da:	f100 0710 	add.w	r7, r0, #16
 800b8de:	4629      	mov	r1, r5
 800b8e0:	42b1      	cmp	r1, r6
 800b8e2:	d334      	bcc.n	800b94e <rshift+0x96>
 800b8e4:	1a9b      	subs	r3, r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	1eea      	subs	r2, r5, #3
 800b8ea:	4296      	cmp	r6, r2
 800b8ec:	bf38      	it	cc
 800b8ee:	2300      	movcc	r3, #0
 800b8f0:	4423      	add	r3, r4
 800b8f2:	e015      	b.n	800b920 <rshift+0x68>
 800b8f4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b8f8:	f1c1 0820 	rsb	r8, r1, #32
 800b8fc:	40cf      	lsrs	r7, r1
 800b8fe:	f105 0e04 	add.w	lr, r5, #4
 800b902:	46a1      	mov	r9, r4
 800b904:	4576      	cmp	r6, lr
 800b906:	46f4      	mov	ip, lr
 800b908:	d815      	bhi.n	800b936 <rshift+0x7e>
 800b90a:	1a9a      	subs	r2, r3, r2
 800b90c:	0092      	lsls	r2, r2, #2
 800b90e:	3a04      	subs	r2, #4
 800b910:	3501      	adds	r5, #1
 800b912:	42ae      	cmp	r6, r5
 800b914:	bf38      	it	cc
 800b916:	2200      	movcc	r2, #0
 800b918:	18a3      	adds	r3, r4, r2
 800b91a:	50a7      	str	r7, [r4, r2]
 800b91c:	b107      	cbz	r7, 800b920 <rshift+0x68>
 800b91e:	3304      	adds	r3, #4
 800b920:	1b1a      	subs	r2, r3, r4
 800b922:	42a3      	cmp	r3, r4
 800b924:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b928:	bf08      	it	eq
 800b92a:	2300      	moveq	r3, #0
 800b92c:	6102      	str	r2, [r0, #16]
 800b92e:	bf08      	it	eq
 800b930:	6143      	streq	r3, [r0, #20]
 800b932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b936:	f8dc c000 	ldr.w	ip, [ip]
 800b93a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b93e:	ea4c 0707 	orr.w	r7, ip, r7
 800b942:	f849 7b04 	str.w	r7, [r9], #4
 800b946:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b94a:	40cf      	lsrs	r7, r1
 800b94c:	e7da      	b.n	800b904 <rshift+0x4c>
 800b94e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b952:	f847 cf04 	str.w	ip, [r7, #4]!
 800b956:	e7c3      	b.n	800b8e0 <rshift+0x28>
 800b958:	4623      	mov	r3, r4
 800b95a:	e7e1      	b.n	800b920 <rshift+0x68>

0800b95c <__hexdig_fun>:
 800b95c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b960:	2b09      	cmp	r3, #9
 800b962:	d802      	bhi.n	800b96a <__hexdig_fun+0xe>
 800b964:	3820      	subs	r0, #32
 800b966:	b2c0      	uxtb	r0, r0
 800b968:	4770      	bx	lr
 800b96a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b96e:	2b05      	cmp	r3, #5
 800b970:	d801      	bhi.n	800b976 <__hexdig_fun+0x1a>
 800b972:	3847      	subs	r0, #71	; 0x47
 800b974:	e7f7      	b.n	800b966 <__hexdig_fun+0xa>
 800b976:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b97a:	2b05      	cmp	r3, #5
 800b97c:	d801      	bhi.n	800b982 <__hexdig_fun+0x26>
 800b97e:	3827      	subs	r0, #39	; 0x27
 800b980:	e7f1      	b.n	800b966 <__hexdig_fun+0xa>
 800b982:	2000      	movs	r0, #0
 800b984:	4770      	bx	lr
	...

0800b988 <__gethex>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	4617      	mov	r7, r2
 800b98e:	680a      	ldr	r2, [r1, #0]
 800b990:	b085      	sub	sp, #20
 800b992:	f102 0b02 	add.w	fp, r2, #2
 800b996:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b99a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b99e:	4681      	mov	r9, r0
 800b9a0:	468a      	mov	sl, r1
 800b9a2:	9302      	str	r3, [sp, #8]
 800b9a4:	32fe      	adds	r2, #254	; 0xfe
 800b9a6:	eb02 030b 	add.w	r3, r2, fp
 800b9aa:	46d8      	mov	r8, fp
 800b9ac:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b9b0:	9301      	str	r3, [sp, #4]
 800b9b2:	2830      	cmp	r0, #48	; 0x30
 800b9b4:	d0f7      	beq.n	800b9a6 <__gethex+0x1e>
 800b9b6:	f7ff ffd1 	bl	800b95c <__hexdig_fun>
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d138      	bne.n	800ba32 <__gethex+0xaa>
 800b9c0:	49a7      	ldr	r1, [pc, #668]	; (800bc60 <__gethex+0x2d8>)
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	4640      	mov	r0, r8
 800b9c6:	f7ff ff09 	bl	800b7dc <strncmp>
 800b9ca:	4606      	mov	r6, r0
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d169      	bne.n	800baa4 <__gethex+0x11c>
 800b9d0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b9d4:	465d      	mov	r5, fp
 800b9d6:	f7ff ffc1 	bl	800b95c <__hexdig_fun>
 800b9da:	2800      	cmp	r0, #0
 800b9dc:	d064      	beq.n	800baa8 <__gethex+0x120>
 800b9de:	465a      	mov	r2, fp
 800b9e0:	7810      	ldrb	r0, [r2, #0]
 800b9e2:	2830      	cmp	r0, #48	; 0x30
 800b9e4:	4690      	mov	r8, r2
 800b9e6:	f102 0201 	add.w	r2, r2, #1
 800b9ea:	d0f9      	beq.n	800b9e0 <__gethex+0x58>
 800b9ec:	f7ff ffb6 	bl	800b95c <__hexdig_fun>
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	fab0 f480 	clz	r4, r0
 800b9f6:	0964      	lsrs	r4, r4, #5
 800b9f8:	465e      	mov	r6, fp
 800b9fa:	9301      	str	r3, [sp, #4]
 800b9fc:	4642      	mov	r2, r8
 800b9fe:	4615      	mov	r5, r2
 800ba00:	3201      	adds	r2, #1
 800ba02:	7828      	ldrb	r0, [r5, #0]
 800ba04:	f7ff ffaa 	bl	800b95c <__hexdig_fun>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d1f8      	bne.n	800b9fe <__gethex+0x76>
 800ba0c:	4994      	ldr	r1, [pc, #592]	; (800bc60 <__gethex+0x2d8>)
 800ba0e:	2201      	movs	r2, #1
 800ba10:	4628      	mov	r0, r5
 800ba12:	f7ff fee3 	bl	800b7dc <strncmp>
 800ba16:	b978      	cbnz	r0, 800ba38 <__gethex+0xb0>
 800ba18:	b946      	cbnz	r6, 800ba2c <__gethex+0xa4>
 800ba1a:	1c6e      	adds	r6, r5, #1
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	4615      	mov	r5, r2
 800ba20:	3201      	adds	r2, #1
 800ba22:	7828      	ldrb	r0, [r5, #0]
 800ba24:	f7ff ff9a 	bl	800b95c <__hexdig_fun>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d1f8      	bne.n	800ba1e <__gethex+0x96>
 800ba2c:	1b73      	subs	r3, r6, r5
 800ba2e:	009e      	lsls	r6, r3, #2
 800ba30:	e004      	b.n	800ba3c <__gethex+0xb4>
 800ba32:	2400      	movs	r4, #0
 800ba34:	4626      	mov	r6, r4
 800ba36:	e7e1      	b.n	800b9fc <__gethex+0x74>
 800ba38:	2e00      	cmp	r6, #0
 800ba3a:	d1f7      	bne.n	800ba2c <__gethex+0xa4>
 800ba3c:	782b      	ldrb	r3, [r5, #0]
 800ba3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba42:	2b50      	cmp	r3, #80	; 0x50
 800ba44:	d13d      	bne.n	800bac2 <__gethex+0x13a>
 800ba46:	786b      	ldrb	r3, [r5, #1]
 800ba48:	2b2b      	cmp	r3, #43	; 0x2b
 800ba4a:	d02f      	beq.n	800baac <__gethex+0x124>
 800ba4c:	2b2d      	cmp	r3, #45	; 0x2d
 800ba4e:	d031      	beq.n	800bab4 <__gethex+0x12c>
 800ba50:	1c69      	adds	r1, r5, #1
 800ba52:	f04f 0b00 	mov.w	fp, #0
 800ba56:	7808      	ldrb	r0, [r1, #0]
 800ba58:	f7ff ff80 	bl	800b95c <__hexdig_fun>
 800ba5c:	1e42      	subs	r2, r0, #1
 800ba5e:	b2d2      	uxtb	r2, r2
 800ba60:	2a18      	cmp	r2, #24
 800ba62:	d82e      	bhi.n	800bac2 <__gethex+0x13a>
 800ba64:	f1a0 0210 	sub.w	r2, r0, #16
 800ba68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba6c:	f7ff ff76 	bl	800b95c <__hexdig_fun>
 800ba70:	f100 3cff 	add.w	ip, r0, #4294967295
 800ba74:	fa5f fc8c 	uxtb.w	ip, ip
 800ba78:	f1bc 0f18 	cmp.w	ip, #24
 800ba7c:	d91d      	bls.n	800baba <__gethex+0x132>
 800ba7e:	f1bb 0f00 	cmp.w	fp, #0
 800ba82:	d000      	beq.n	800ba86 <__gethex+0xfe>
 800ba84:	4252      	negs	r2, r2
 800ba86:	4416      	add	r6, r2
 800ba88:	f8ca 1000 	str.w	r1, [sl]
 800ba8c:	b1dc      	cbz	r4, 800bac6 <__gethex+0x13e>
 800ba8e:	9b01      	ldr	r3, [sp, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	bf14      	ite	ne
 800ba94:	f04f 0800 	movne.w	r8, #0
 800ba98:	f04f 0806 	moveq.w	r8, #6
 800ba9c:	4640      	mov	r0, r8
 800ba9e:	b005      	add	sp, #20
 800baa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baa4:	4645      	mov	r5, r8
 800baa6:	4626      	mov	r6, r4
 800baa8:	2401      	movs	r4, #1
 800baaa:	e7c7      	b.n	800ba3c <__gethex+0xb4>
 800baac:	f04f 0b00 	mov.w	fp, #0
 800bab0:	1ca9      	adds	r1, r5, #2
 800bab2:	e7d0      	b.n	800ba56 <__gethex+0xce>
 800bab4:	f04f 0b01 	mov.w	fp, #1
 800bab8:	e7fa      	b.n	800bab0 <__gethex+0x128>
 800baba:	230a      	movs	r3, #10
 800babc:	fb03 0002 	mla	r0, r3, r2, r0
 800bac0:	e7d0      	b.n	800ba64 <__gethex+0xdc>
 800bac2:	4629      	mov	r1, r5
 800bac4:	e7e0      	b.n	800ba88 <__gethex+0x100>
 800bac6:	eba5 0308 	sub.w	r3, r5, r8
 800baca:	3b01      	subs	r3, #1
 800bacc:	4621      	mov	r1, r4
 800bace:	2b07      	cmp	r3, #7
 800bad0:	dc0a      	bgt.n	800bae8 <__gethex+0x160>
 800bad2:	4648      	mov	r0, r9
 800bad4:	f7fe f91e 	bl	8009d14 <_Balloc>
 800bad8:	4604      	mov	r4, r0
 800bada:	b940      	cbnz	r0, 800baee <__gethex+0x166>
 800badc:	4b61      	ldr	r3, [pc, #388]	; (800bc64 <__gethex+0x2dc>)
 800bade:	4602      	mov	r2, r0
 800bae0:	21e4      	movs	r1, #228	; 0xe4
 800bae2:	4861      	ldr	r0, [pc, #388]	; (800bc68 <__gethex+0x2e0>)
 800bae4:	f7ff feb4 	bl	800b850 <__assert_func>
 800bae8:	3101      	adds	r1, #1
 800baea:	105b      	asrs	r3, r3, #1
 800baec:	e7ef      	b.n	800bace <__gethex+0x146>
 800baee:	f100 0a14 	add.w	sl, r0, #20
 800baf2:	2300      	movs	r3, #0
 800baf4:	495a      	ldr	r1, [pc, #360]	; (800bc60 <__gethex+0x2d8>)
 800baf6:	f8cd a004 	str.w	sl, [sp, #4]
 800bafa:	469b      	mov	fp, r3
 800bafc:	45a8      	cmp	r8, r5
 800bafe:	d342      	bcc.n	800bb86 <__gethex+0x1fe>
 800bb00:	9801      	ldr	r0, [sp, #4]
 800bb02:	f840 bb04 	str.w	fp, [r0], #4
 800bb06:	eba0 000a 	sub.w	r0, r0, sl
 800bb0a:	1080      	asrs	r0, r0, #2
 800bb0c:	6120      	str	r0, [r4, #16]
 800bb0e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800bb12:	4658      	mov	r0, fp
 800bb14:	f7fe f9f0 	bl	8009ef8 <__hi0bits>
 800bb18:	683d      	ldr	r5, [r7, #0]
 800bb1a:	eba8 0000 	sub.w	r0, r8, r0
 800bb1e:	42a8      	cmp	r0, r5
 800bb20:	dd59      	ble.n	800bbd6 <__gethex+0x24e>
 800bb22:	eba0 0805 	sub.w	r8, r0, r5
 800bb26:	4641      	mov	r1, r8
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f7fe fd7f 	bl	800a62c <__any_on>
 800bb2e:	4683      	mov	fp, r0
 800bb30:	b1b8      	cbz	r0, 800bb62 <__gethex+0x1da>
 800bb32:	f108 33ff 	add.w	r3, r8, #4294967295
 800bb36:	1159      	asrs	r1, r3, #5
 800bb38:	f003 021f 	and.w	r2, r3, #31
 800bb3c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bb40:	f04f 0b01 	mov.w	fp, #1
 800bb44:	fa0b f202 	lsl.w	r2, fp, r2
 800bb48:	420a      	tst	r2, r1
 800bb4a:	d00a      	beq.n	800bb62 <__gethex+0x1da>
 800bb4c:	455b      	cmp	r3, fp
 800bb4e:	dd06      	ble.n	800bb5e <__gethex+0x1d6>
 800bb50:	f1a8 0102 	sub.w	r1, r8, #2
 800bb54:	4620      	mov	r0, r4
 800bb56:	f7fe fd69 	bl	800a62c <__any_on>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d138      	bne.n	800bbd0 <__gethex+0x248>
 800bb5e:	f04f 0b02 	mov.w	fp, #2
 800bb62:	4641      	mov	r1, r8
 800bb64:	4620      	mov	r0, r4
 800bb66:	f7ff fea7 	bl	800b8b8 <rshift>
 800bb6a:	4446      	add	r6, r8
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	42b3      	cmp	r3, r6
 800bb70:	da41      	bge.n	800bbf6 <__gethex+0x26e>
 800bb72:	4621      	mov	r1, r4
 800bb74:	4648      	mov	r0, r9
 800bb76:	f7fe f90d 	bl	8009d94 <_Bfree>
 800bb7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	6013      	str	r3, [r2, #0]
 800bb80:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800bb84:	e78a      	b.n	800ba9c <__gethex+0x114>
 800bb86:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800bb8a:	2a2e      	cmp	r2, #46	; 0x2e
 800bb8c:	d014      	beq.n	800bbb8 <__gethex+0x230>
 800bb8e:	2b20      	cmp	r3, #32
 800bb90:	d106      	bne.n	800bba0 <__gethex+0x218>
 800bb92:	9b01      	ldr	r3, [sp, #4]
 800bb94:	f843 bb04 	str.w	fp, [r3], #4
 800bb98:	f04f 0b00 	mov.w	fp, #0
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	465b      	mov	r3, fp
 800bba0:	7828      	ldrb	r0, [r5, #0]
 800bba2:	9303      	str	r3, [sp, #12]
 800bba4:	f7ff feda 	bl	800b95c <__hexdig_fun>
 800bba8:	9b03      	ldr	r3, [sp, #12]
 800bbaa:	f000 000f 	and.w	r0, r0, #15
 800bbae:	4098      	lsls	r0, r3
 800bbb0:	ea4b 0b00 	orr.w	fp, fp, r0
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	e7a1      	b.n	800bafc <__gethex+0x174>
 800bbb8:	45a8      	cmp	r8, r5
 800bbba:	d8e8      	bhi.n	800bb8e <__gethex+0x206>
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	9303      	str	r3, [sp, #12]
 800bbc2:	f7ff fe0b 	bl	800b7dc <strncmp>
 800bbc6:	4926      	ldr	r1, [pc, #152]	; (800bc60 <__gethex+0x2d8>)
 800bbc8:	9b03      	ldr	r3, [sp, #12]
 800bbca:	2800      	cmp	r0, #0
 800bbcc:	d1df      	bne.n	800bb8e <__gethex+0x206>
 800bbce:	e795      	b.n	800bafc <__gethex+0x174>
 800bbd0:	f04f 0b03 	mov.w	fp, #3
 800bbd4:	e7c5      	b.n	800bb62 <__gethex+0x1da>
 800bbd6:	da0b      	bge.n	800bbf0 <__gethex+0x268>
 800bbd8:	eba5 0800 	sub.w	r8, r5, r0
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4642      	mov	r2, r8
 800bbe0:	4648      	mov	r0, r9
 800bbe2:	f7fe faf1 	bl	800a1c8 <__lshift>
 800bbe6:	eba6 0608 	sub.w	r6, r6, r8
 800bbea:	4604      	mov	r4, r0
 800bbec:	f100 0a14 	add.w	sl, r0, #20
 800bbf0:	f04f 0b00 	mov.w	fp, #0
 800bbf4:	e7ba      	b.n	800bb6c <__gethex+0x1e4>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	42b3      	cmp	r3, r6
 800bbfa:	dd73      	ble.n	800bce4 <__gethex+0x35c>
 800bbfc:	1b9e      	subs	r6, r3, r6
 800bbfe:	42b5      	cmp	r5, r6
 800bc00:	dc34      	bgt.n	800bc6c <__gethex+0x2e4>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b02      	cmp	r3, #2
 800bc06:	d023      	beq.n	800bc50 <__gethex+0x2c8>
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d025      	beq.n	800bc58 <__gethex+0x2d0>
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d115      	bne.n	800bc3c <__gethex+0x2b4>
 800bc10:	42b5      	cmp	r5, r6
 800bc12:	d113      	bne.n	800bc3c <__gethex+0x2b4>
 800bc14:	2d01      	cmp	r5, #1
 800bc16:	d10b      	bne.n	800bc30 <__gethex+0x2a8>
 800bc18:	9a02      	ldr	r2, [sp, #8]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6013      	str	r3, [r2, #0]
 800bc1e:	2301      	movs	r3, #1
 800bc20:	6123      	str	r3, [r4, #16]
 800bc22:	f8ca 3000 	str.w	r3, [sl]
 800bc26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc28:	f04f 0862 	mov.w	r8, #98	; 0x62
 800bc2c:	601c      	str	r4, [r3, #0]
 800bc2e:	e735      	b.n	800ba9c <__gethex+0x114>
 800bc30:	1e69      	subs	r1, r5, #1
 800bc32:	4620      	mov	r0, r4
 800bc34:	f7fe fcfa 	bl	800a62c <__any_on>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d1ed      	bne.n	800bc18 <__gethex+0x290>
 800bc3c:	4621      	mov	r1, r4
 800bc3e:	4648      	mov	r0, r9
 800bc40:	f7fe f8a8 	bl	8009d94 <_Bfree>
 800bc44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc46:	2300      	movs	r3, #0
 800bc48:	6013      	str	r3, [r2, #0]
 800bc4a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800bc4e:	e725      	b.n	800ba9c <__gethex+0x114>
 800bc50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1f2      	bne.n	800bc3c <__gethex+0x2b4>
 800bc56:	e7df      	b.n	800bc18 <__gethex+0x290>
 800bc58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1dc      	bne.n	800bc18 <__gethex+0x290>
 800bc5e:	e7ed      	b.n	800bc3c <__gethex+0x2b4>
 800bc60:	0800c854 	.word	0x0800c854
 800bc64:	0800c6ed 	.word	0x0800c6ed
 800bc68:	0800c9fe 	.word	0x0800c9fe
 800bc6c:	f106 38ff 	add.w	r8, r6, #4294967295
 800bc70:	f1bb 0f00 	cmp.w	fp, #0
 800bc74:	d133      	bne.n	800bcde <__gethex+0x356>
 800bc76:	f1b8 0f00 	cmp.w	r8, #0
 800bc7a:	d004      	beq.n	800bc86 <__gethex+0x2fe>
 800bc7c:	4641      	mov	r1, r8
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f7fe fcd4 	bl	800a62c <__any_on>
 800bc84:	4683      	mov	fp, r0
 800bc86:	ea4f 1268 	mov.w	r2, r8, asr #5
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc90:	f008 081f 	and.w	r8, r8, #31
 800bc94:	fa03 f308 	lsl.w	r3, r3, r8
 800bc98:	4213      	tst	r3, r2
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	bf18      	it	ne
 800bca0:	f04b 0b02 	orrne.w	fp, fp, #2
 800bca4:	1bad      	subs	r5, r5, r6
 800bca6:	f7ff fe07 	bl	800b8b8 <rshift>
 800bcaa:	687e      	ldr	r6, [r7, #4]
 800bcac:	f04f 0802 	mov.w	r8, #2
 800bcb0:	f1bb 0f00 	cmp.w	fp, #0
 800bcb4:	d04a      	beq.n	800bd4c <__gethex+0x3c4>
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d016      	beq.n	800bcea <__gethex+0x362>
 800bcbc:	2b03      	cmp	r3, #3
 800bcbe:	d018      	beq.n	800bcf2 <__gethex+0x36a>
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	d109      	bne.n	800bcd8 <__gethex+0x350>
 800bcc4:	f01b 0f02 	tst.w	fp, #2
 800bcc8:	d006      	beq.n	800bcd8 <__gethex+0x350>
 800bcca:	f8da 3000 	ldr.w	r3, [sl]
 800bcce:	ea4b 0b03 	orr.w	fp, fp, r3
 800bcd2:	f01b 0f01 	tst.w	fp, #1
 800bcd6:	d10f      	bne.n	800bcf8 <__gethex+0x370>
 800bcd8:	f048 0810 	orr.w	r8, r8, #16
 800bcdc:	e036      	b.n	800bd4c <__gethex+0x3c4>
 800bcde:	f04f 0b01 	mov.w	fp, #1
 800bce2:	e7d0      	b.n	800bc86 <__gethex+0x2fe>
 800bce4:	f04f 0801 	mov.w	r8, #1
 800bce8:	e7e2      	b.n	800bcb0 <__gethex+0x328>
 800bcea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcec:	f1c3 0301 	rsb	r3, r3, #1
 800bcf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d0ef      	beq.n	800bcd8 <__gethex+0x350>
 800bcf8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bcfc:	f104 0214 	add.w	r2, r4, #20
 800bd00:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800bd04:	9301      	str	r3, [sp, #4]
 800bd06:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	4694      	mov	ip, r2
 800bd0e:	f852 1b04 	ldr.w	r1, [r2], #4
 800bd12:	f1b1 3fff 	cmp.w	r1, #4294967295
 800bd16:	d01e      	beq.n	800bd56 <__gethex+0x3ce>
 800bd18:	3101      	adds	r1, #1
 800bd1a:	f8cc 1000 	str.w	r1, [ip]
 800bd1e:	f1b8 0f02 	cmp.w	r8, #2
 800bd22:	f104 0214 	add.w	r2, r4, #20
 800bd26:	d13d      	bne.n	800bda4 <__gethex+0x41c>
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	3b01      	subs	r3, #1
 800bd2c:	42ab      	cmp	r3, r5
 800bd2e:	d10b      	bne.n	800bd48 <__gethex+0x3c0>
 800bd30:	1169      	asrs	r1, r5, #5
 800bd32:	2301      	movs	r3, #1
 800bd34:	f005 051f 	and.w	r5, r5, #31
 800bd38:	fa03 f505 	lsl.w	r5, r3, r5
 800bd3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd40:	421d      	tst	r5, r3
 800bd42:	bf18      	it	ne
 800bd44:	f04f 0801 	movne.w	r8, #1
 800bd48:	f048 0820 	orr.w	r8, r8, #32
 800bd4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd4e:	601c      	str	r4, [r3, #0]
 800bd50:	9b02      	ldr	r3, [sp, #8]
 800bd52:	601e      	str	r6, [r3, #0]
 800bd54:	e6a2      	b.n	800ba9c <__gethex+0x114>
 800bd56:	4290      	cmp	r0, r2
 800bd58:	f842 3c04 	str.w	r3, [r2, #-4]
 800bd5c:	d8d6      	bhi.n	800bd0c <__gethex+0x384>
 800bd5e:	68a2      	ldr	r2, [r4, #8]
 800bd60:	4593      	cmp	fp, r2
 800bd62:	db17      	blt.n	800bd94 <__gethex+0x40c>
 800bd64:	6861      	ldr	r1, [r4, #4]
 800bd66:	4648      	mov	r0, r9
 800bd68:	3101      	adds	r1, #1
 800bd6a:	f7fd ffd3 	bl	8009d14 <_Balloc>
 800bd6e:	4682      	mov	sl, r0
 800bd70:	b918      	cbnz	r0, 800bd7a <__gethex+0x3f2>
 800bd72:	4b1b      	ldr	r3, [pc, #108]	; (800bde0 <__gethex+0x458>)
 800bd74:	4602      	mov	r2, r0
 800bd76:	2184      	movs	r1, #132	; 0x84
 800bd78:	e6b3      	b.n	800bae2 <__gethex+0x15a>
 800bd7a:	6922      	ldr	r2, [r4, #16]
 800bd7c:	3202      	adds	r2, #2
 800bd7e:	f104 010c 	add.w	r1, r4, #12
 800bd82:	0092      	lsls	r2, r2, #2
 800bd84:	300c      	adds	r0, #12
 800bd86:	f7ff fd4b 	bl	800b820 <memcpy>
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	4648      	mov	r0, r9
 800bd8e:	f7fe f801 	bl	8009d94 <_Bfree>
 800bd92:	4654      	mov	r4, sl
 800bd94:	6922      	ldr	r2, [r4, #16]
 800bd96:	1c51      	adds	r1, r2, #1
 800bd98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bd9c:	6121      	str	r1, [r4, #16]
 800bd9e:	2101      	movs	r1, #1
 800bda0:	6151      	str	r1, [r2, #20]
 800bda2:	e7bc      	b.n	800bd1e <__gethex+0x396>
 800bda4:	6921      	ldr	r1, [r4, #16]
 800bda6:	4559      	cmp	r1, fp
 800bda8:	dd0b      	ble.n	800bdc2 <__gethex+0x43a>
 800bdaa:	2101      	movs	r1, #1
 800bdac:	4620      	mov	r0, r4
 800bdae:	f7ff fd83 	bl	800b8b8 <rshift>
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	3601      	adds	r6, #1
 800bdb6:	42b3      	cmp	r3, r6
 800bdb8:	f6ff aedb 	blt.w	800bb72 <__gethex+0x1ea>
 800bdbc:	f04f 0801 	mov.w	r8, #1
 800bdc0:	e7c2      	b.n	800bd48 <__gethex+0x3c0>
 800bdc2:	f015 051f 	ands.w	r5, r5, #31
 800bdc6:	d0f9      	beq.n	800bdbc <__gethex+0x434>
 800bdc8:	9b01      	ldr	r3, [sp, #4]
 800bdca:	441a      	add	r2, r3
 800bdcc:	f1c5 0520 	rsb	r5, r5, #32
 800bdd0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bdd4:	f7fe f890 	bl	8009ef8 <__hi0bits>
 800bdd8:	42a8      	cmp	r0, r5
 800bdda:	dbe6      	blt.n	800bdaa <__gethex+0x422>
 800bddc:	e7ee      	b.n	800bdbc <__gethex+0x434>
 800bdde:	bf00      	nop
 800bde0:	0800c6ed 	.word	0x0800c6ed

0800bde4 <L_shift>:
 800bde4:	f1c2 0208 	rsb	r2, r2, #8
 800bde8:	0092      	lsls	r2, r2, #2
 800bdea:	b570      	push	{r4, r5, r6, lr}
 800bdec:	f1c2 0620 	rsb	r6, r2, #32
 800bdf0:	6843      	ldr	r3, [r0, #4]
 800bdf2:	6804      	ldr	r4, [r0, #0]
 800bdf4:	fa03 f506 	lsl.w	r5, r3, r6
 800bdf8:	432c      	orrs	r4, r5
 800bdfa:	40d3      	lsrs	r3, r2
 800bdfc:	6004      	str	r4, [r0, #0]
 800bdfe:	f840 3f04 	str.w	r3, [r0, #4]!
 800be02:	4288      	cmp	r0, r1
 800be04:	d3f4      	bcc.n	800bdf0 <L_shift+0xc>
 800be06:	bd70      	pop	{r4, r5, r6, pc}

0800be08 <__match>:
 800be08:	b530      	push	{r4, r5, lr}
 800be0a:	6803      	ldr	r3, [r0, #0]
 800be0c:	3301      	adds	r3, #1
 800be0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be12:	b914      	cbnz	r4, 800be1a <__match+0x12>
 800be14:	6003      	str	r3, [r0, #0]
 800be16:	2001      	movs	r0, #1
 800be18:	bd30      	pop	{r4, r5, pc}
 800be1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800be22:	2d19      	cmp	r5, #25
 800be24:	bf98      	it	ls
 800be26:	3220      	addls	r2, #32
 800be28:	42a2      	cmp	r2, r4
 800be2a:	d0f0      	beq.n	800be0e <__match+0x6>
 800be2c:	2000      	movs	r0, #0
 800be2e:	e7f3      	b.n	800be18 <__match+0x10>

0800be30 <__hexnan>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	680b      	ldr	r3, [r1, #0]
 800be36:	6801      	ldr	r1, [r0, #0]
 800be38:	115e      	asrs	r6, r3, #5
 800be3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be3e:	f013 031f 	ands.w	r3, r3, #31
 800be42:	b087      	sub	sp, #28
 800be44:	bf18      	it	ne
 800be46:	3604      	addne	r6, #4
 800be48:	2500      	movs	r5, #0
 800be4a:	1f37      	subs	r7, r6, #4
 800be4c:	4682      	mov	sl, r0
 800be4e:	4690      	mov	r8, r2
 800be50:	9301      	str	r3, [sp, #4]
 800be52:	f846 5c04 	str.w	r5, [r6, #-4]
 800be56:	46b9      	mov	r9, r7
 800be58:	463c      	mov	r4, r7
 800be5a:	9502      	str	r5, [sp, #8]
 800be5c:	46ab      	mov	fp, r5
 800be5e:	784a      	ldrb	r2, [r1, #1]
 800be60:	1c4b      	adds	r3, r1, #1
 800be62:	9303      	str	r3, [sp, #12]
 800be64:	b342      	cbz	r2, 800beb8 <__hexnan+0x88>
 800be66:	4610      	mov	r0, r2
 800be68:	9105      	str	r1, [sp, #20]
 800be6a:	9204      	str	r2, [sp, #16]
 800be6c:	f7ff fd76 	bl	800b95c <__hexdig_fun>
 800be70:	2800      	cmp	r0, #0
 800be72:	d14f      	bne.n	800bf14 <__hexnan+0xe4>
 800be74:	9a04      	ldr	r2, [sp, #16]
 800be76:	9905      	ldr	r1, [sp, #20]
 800be78:	2a20      	cmp	r2, #32
 800be7a:	d818      	bhi.n	800beae <__hexnan+0x7e>
 800be7c:	9b02      	ldr	r3, [sp, #8]
 800be7e:	459b      	cmp	fp, r3
 800be80:	dd13      	ble.n	800beaa <__hexnan+0x7a>
 800be82:	454c      	cmp	r4, r9
 800be84:	d206      	bcs.n	800be94 <__hexnan+0x64>
 800be86:	2d07      	cmp	r5, #7
 800be88:	dc04      	bgt.n	800be94 <__hexnan+0x64>
 800be8a:	462a      	mov	r2, r5
 800be8c:	4649      	mov	r1, r9
 800be8e:	4620      	mov	r0, r4
 800be90:	f7ff ffa8 	bl	800bde4 <L_shift>
 800be94:	4544      	cmp	r4, r8
 800be96:	d950      	bls.n	800bf3a <__hexnan+0x10a>
 800be98:	2300      	movs	r3, #0
 800be9a:	f1a4 0904 	sub.w	r9, r4, #4
 800be9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bea2:	f8cd b008 	str.w	fp, [sp, #8]
 800bea6:	464c      	mov	r4, r9
 800bea8:	461d      	mov	r5, r3
 800beaa:	9903      	ldr	r1, [sp, #12]
 800beac:	e7d7      	b.n	800be5e <__hexnan+0x2e>
 800beae:	2a29      	cmp	r2, #41	; 0x29
 800beb0:	d155      	bne.n	800bf5e <__hexnan+0x12e>
 800beb2:	3102      	adds	r1, #2
 800beb4:	f8ca 1000 	str.w	r1, [sl]
 800beb8:	f1bb 0f00 	cmp.w	fp, #0
 800bebc:	d04f      	beq.n	800bf5e <__hexnan+0x12e>
 800bebe:	454c      	cmp	r4, r9
 800bec0:	d206      	bcs.n	800bed0 <__hexnan+0xa0>
 800bec2:	2d07      	cmp	r5, #7
 800bec4:	dc04      	bgt.n	800bed0 <__hexnan+0xa0>
 800bec6:	462a      	mov	r2, r5
 800bec8:	4649      	mov	r1, r9
 800beca:	4620      	mov	r0, r4
 800becc:	f7ff ff8a 	bl	800bde4 <L_shift>
 800bed0:	4544      	cmp	r4, r8
 800bed2:	d934      	bls.n	800bf3e <__hexnan+0x10e>
 800bed4:	f1a8 0204 	sub.w	r2, r8, #4
 800bed8:	4623      	mov	r3, r4
 800beda:	f853 1b04 	ldr.w	r1, [r3], #4
 800bede:	f842 1f04 	str.w	r1, [r2, #4]!
 800bee2:	429f      	cmp	r7, r3
 800bee4:	d2f9      	bcs.n	800beda <__hexnan+0xaa>
 800bee6:	1b3b      	subs	r3, r7, r4
 800bee8:	f023 0303 	bic.w	r3, r3, #3
 800beec:	3304      	adds	r3, #4
 800beee:	3e03      	subs	r6, #3
 800bef0:	3401      	adds	r4, #1
 800bef2:	42a6      	cmp	r6, r4
 800bef4:	bf38      	it	cc
 800bef6:	2304      	movcc	r3, #4
 800bef8:	4443      	add	r3, r8
 800befa:	2200      	movs	r2, #0
 800befc:	f843 2b04 	str.w	r2, [r3], #4
 800bf00:	429f      	cmp	r7, r3
 800bf02:	d2fb      	bcs.n	800befc <__hexnan+0xcc>
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	b91b      	cbnz	r3, 800bf10 <__hexnan+0xe0>
 800bf08:	4547      	cmp	r7, r8
 800bf0a:	d126      	bne.n	800bf5a <__hexnan+0x12a>
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	603b      	str	r3, [r7, #0]
 800bf10:	2005      	movs	r0, #5
 800bf12:	e025      	b.n	800bf60 <__hexnan+0x130>
 800bf14:	3501      	adds	r5, #1
 800bf16:	2d08      	cmp	r5, #8
 800bf18:	f10b 0b01 	add.w	fp, fp, #1
 800bf1c:	dd06      	ble.n	800bf2c <__hexnan+0xfc>
 800bf1e:	4544      	cmp	r4, r8
 800bf20:	d9c3      	bls.n	800beaa <__hexnan+0x7a>
 800bf22:	2300      	movs	r3, #0
 800bf24:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf28:	2501      	movs	r5, #1
 800bf2a:	3c04      	subs	r4, #4
 800bf2c:	6822      	ldr	r2, [r4, #0]
 800bf2e:	f000 000f 	and.w	r0, r0, #15
 800bf32:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bf36:	6020      	str	r0, [r4, #0]
 800bf38:	e7b7      	b.n	800beaa <__hexnan+0x7a>
 800bf3a:	2508      	movs	r5, #8
 800bf3c:	e7b5      	b.n	800beaa <__hexnan+0x7a>
 800bf3e:	9b01      	ldr	r3, [sp, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d0df      	beq.n	800bf04 <__hexnan+0xd4>
 800bf44:	f1c3 0320 	rsb	r3, r3, #32
 800bf48:	f04f 32ff 	mov.w	r2, #4294967295
 800bf4c:	40da      	lsrs	r2, r3
 800bf4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bf52:	4013      	ands	r3, r2
 800bf54:	f846 3c04 	str.w	r3, [r6, #-4]
 800bf58:	e7d4      	b.n	800bf04 <__hexnan+0xd4>
 800bf5a:	3f04      	subs	r7, #4
 800bf5c:	e7d2      	b.n	800bf04 <__hexnan+0xd4>
 800bf5e:	2004      	movs	r0, #4
 800bf60:	b007      	add	sp, #28
 800bf62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf66 <__ascii_mbtowc>:
 800bf66:	b082      	sub	sp, #8
 800bf68:	b901      	cbnz	r1, 800bf6c <__ascii_mbtowc+0x6>
 800bf6a:	a901      	add	r1, sp, #4
 800bf6c:	b142      	cbz	r2, 800bf80 <__ascii_mbtowc+0x1a>
 800bf6e:	b14b      	cbz	r3, 800bf84 <__ascii_mbtowc+0x1e>
 800bf70:	7813      	ldrb	r3, [r2, #0]
 800bf72:	600b      	str	r3, [r1, #0]
 800bf74:	7812      	ldrb	r2, [r2, #0]
 800bf76:	1e10      	subs	r0, r2, #0
 800bf78:	bf18      	it	ne
 800bf7a:	2001      	movne	r0, #1
 800bf7c:	b002      	add	sp, #8
 800bf7e:	4770      	bx	lr
 800bf80:	4610      	mov	r0, r2
 800bf82:	e7fb      	b.n	800bf7c <__ascii_mbtowc+0x16>
 800bf84:	f06f 0001 	mvn.w	r0, #1
 800bf88:	e7f8      	b.n	800bf7c <__ascii_mbtowc+0x16>

0800bf8a <_realloc_r>:
 800bf8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf8e:	4680      	mov	r8, r0
 800bf90:	4614      	mov	r4, r2
 800bf92:	460e      	mov	r6, r1
 800bf94:	b921      	cbnz	r1, 800bfa0 <_realloc_r+0x16>
 800bf96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	f7fd be2e 	b.w	8009bfc <_malloc_r>
 800bfa0:	b92a      	cbnz	r2, 800bfae <_realloc_r+0x24>
 800bfa2:	f7fd fdb7 	bl	8009b14 <_free_r>
 800bfa6:	4625      	mov	r5, r4
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfae:	f000 f842 	bl	800c036 <_malloc_usable_size_r>
 800bfb2:	4284      	cmp	r4, r0
 800bfb4:	4607      	mov	r7, r0
 800bfb6:	d802      	bhi.n	800bfbe <_realloc_r+0x34>
 800bfb8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfbc:	d812      	bhi.n	800bfe4 <_realloc_r+0x5a>
 800bfbe:	4621      	mov	r1, r4
 800bfc0:	4640      	mov	r0, r8
 800bfc2:	f7fd fe1b 	bl	8009bfc <_malloc_r>
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d0ed      	beq.n	800bfa8 <_realloc_r+0x1e>
 800bfcc:	42bc      	cmp	r4, r7
 800bfce:	4622      	mov	r2, r4
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	bf28      	it	cs
 800bfd4:	463a      	movcs	r2, r7
 800bfd6:	f7ff fc23 	bl	800b820 <memcpy>
 800bfda:	4631      	mov	r1, r6
 800bfdc:	4640      	mov	r0, r8
 800bfde:	f7fd fd99 	bl	8009b14 <_free_r>
 800bfe2:	e7e1      	b.n	800bfa8 <_realloc_r+0x1e>
 800bfe4:	4635      	mov	r5, r6
 800bfe6:	e7df      	b.n	800bfa8 <_realloc_r+0x1e>

0800bfe8 <__ascii_wctomb>:
 800bfe8:	b149      	cbz	r1, 800bffe <__ascii_wctomb+0x16>
 800bfea:	2aff      	cmp	r2, #255	; 0xff
 800bfec:	bf85      	ittet	hi
 800bfee:	238a      	movhi	r3, #138	; 0x8a
 800bff0:	6003      	strhi	r3, [r0, #0]
 800bff2:	700a      	strbls	r2, [r1, #0]
 800bff4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bff8:	bf98      	it	ls
 800bffa:	2001      	movls	r0, #1
 800bffc:	4770      	bx	lr
 800bffe:	4608      	mov	r0, r1
 800c000:	4770      	bx	lr
	...

0800c004 <fiprintf>:
 800c004:	b40e      	push	{r1, r2, r3}
 800c006:	b503      	push	{r0, r1, lr}
 800c008:	4601      	mov	r1, r0
 800c00a:	ab03      	add	r3, sp, #12
 800c00c:	4805      	ldr	r0, [pc, #20]	; (800c024 <fiprintf+0x20>)
 800c00e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c012:	6800      	ldr	r0, [r0, #0]
 800c014:	9301      	str	r3, [sp, #4]
 800c016:	f000 f83f 	bl	800c098 <_vfiprintf_r>
 800c01a:	b002      	add	sp, #8
 800c01c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c020:	b003      	add	sp, #12
 800c022:	4770      	bx	lr
 800c024:	20000078 	.word	0x20000078

0800c028 <abort>:
 800c028:	b508      	push	{r3, lr}
 800c02a:	2006      	movs	r0, #6
 800c02c:	f000 fa0c 	bl	800c448 <raise>
 800c030:	2001      	movs	r0, #1
 800c032:	f7f7 fbc1 	bl	80037b8 <_exit>

0800c036 <_malloc_usable_size_r>:
 800c036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c03a:	1f18      	subs	r0, r3, #4
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	bfbc      	itt	lt
 800c040:	580b      	ldrlt	r3, [r1, r0]
 800c042:	18c0      	addlt	r0, r0, r3
 800c044:	4770      	bx	lr

0800c046 <__sfputc_r>:
 800c046:	6893      	ldr	r3, [r2, #8]
 800c048:	3b01      	subs	r3, #1
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	b410      	push	{r4}
 800c04e:	6093      	str	r3, [r2, #8]
 800c050:	da08      	bge.n	800c064 <__sfputc_r+0x1e>
 800c052:	6994      	ldr	r4, [r2, #24]
 800c054:	42a3      	cmp	r3, r4
 800c056:	db01      	blt.n	800c05c <__sfputc_r+0x16>
 800c058:	290a      	cmp	r1, #10
 800c05a:	d103      	bne.n	800c064 <__sfputc_r+0x1e>
 800c05c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c060:	f000 b934 	b.w	800c2cc <__swbuf_r>
 800c064:	6813      	ldr	r3, [r2, #0]
 800c066:	1c58      	adds	r0, r3, #1
 800c068:	6010      	str	r0, [r2, #0]
 800c06a:	7019      	strb	r1, [r3, #0]
 800c06c:	4608      	mov	r0, r1
 800c06e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <__sfputs_r>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	4606      	mov	r6, r0
 800c078:	460f      	mov	r7, r1
 800c07a:	4614      	mov	r4, r2
 800c07c:	18d5      	adds	r5, r2, r3
 800c07e:	42ac      	cmp	r4, r5
 800c080:	d101      	bne.n	800c086 <__sfputs_r+0x12>
 800c082:	2000      	movs	r0, #0
 800c084:	e007      	b.n	800c096 <__sfputs_r+0x22>
 800c086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c08a:	463a      	mov	r2, r7
 800c08c:	4630      	mov	r0, r6
 800c08e:	f7ff ffda 	bl	800c046 <__sfputc_r>
 800c092:	1c43      	adds	r3, r0, #1
 800c094:	d1f3      	bne.n	800c07e <__sfputs_r+0xa>
 800c096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c098 <_vfiprintf_r>:
 800c098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c09c:	460d      	mov	r5, r1
 800c09e:	b09d      	sub	sp, #116	; 0x74
 800c0a0:	4614      	mov	r4, r2
 800c0a2:	4698      	mov	r8, r3
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	b118      	cbz	r0, 800c0b0 <_vfiprintf_r+0x18>
 800c0a8:	6a03      	ldr	r3, [r0, #32]
 800c0aa:	b90b      	cbnz	r3, 800c0b0 <_vfiprintf_r+0x18>
 800c0ac:	f7fc fd98 	bl	8008be0 <__sinit>
 800c0b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0b2:	07d9      	lsls	r1, r3, #31
 800c0b4:	d405      	bmi.n	800c0c2 <_vfiprintf_r+0x2a>
 800c0b6:	89ab      	ldrh	r3, [r5, #12]
 800c0b8:	059a      	lsls	r2, r3, #22
 800c0ba:	d402      	bmi.n	800c0c2 <_vfiprintf_r+0x2a>
 800c0bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0be:	f7fc fea6 	bl	8008e0e <__retarget_lock_acquire_recursive>
 800c0c2:	89ab      	ldrh	r3, [r5, #12]
 800c0c4:	071b      	lsls	r3, r3, #28
 800c0c6:	d501      	bpl.n	800c0cc <_vfiprintf_r+0x34>
 800c0c8:	692b      	ldr	r3, [r5, #16]
 800c0ca:	b99b      	cbnz	r3, 800c0f4 <_vfiprintf_r+0x5c>
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f000 f93a 	bl	800c348 <__swsetup_r>
 800c0d4:	b170      	cbz	r0, 800c0f4 <_vfiprintf_r+0x5c>
 800c0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c0d8:	07dc      	lsls	r4, r3, #31
 800c0da:	d504      	bpl.n	800c0e6 <_vfiprintf_r+0x4e>
 800c0dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e0:	b01d      	add	sp, #116	; 0x74
 800c0e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e6:	89ab      	ldrh	r3, [r5, #12]
 800c0e8:	0598      	lsls	r0, r3, #22
 800c0ea:	d4f7      	bmi.n	800c0dc <_vfiprintf_r+0x44>
 800c0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c0ee:	f7fc fe8f 	bl	8008e10 <__retarget_lock_release_recursive>
 800c0f2:	e7f3      	b.n	800c0dc <_vfiprintf_r+0x44>
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c0f8:	2320      	movs	r3, #32
 800c0fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800c102:	2330      	movs	r3, #48	; 0x30
 800c104:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c2b8 <_vfiprintf_r+0x220>
 800c108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c10c:	f04f 0901 	mov.w	r9, #1
 800c110:	4623      	mov	r3, r4
 800c112:	469a      	mov	sl, r3
 800c114:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c118:	b10a      	cbz	r2, 800c11e <_vfiprintf_r+0x86>
 800c11a:	2a25      	cmp	r2, #37	; 0x25
 800c11c:	d1f9      	bne.n	800c112 <_vfiprintf_r+0x7a>
 800c11e:	ebba 0b04 	subs.w	fp, sl, r4
 800c122:	d00b      	beq.n	800c13c <_vfiprintf_r+0xa4>
 800c124:	465b      	mov	r3, fp
 800c126:	4622      	mov	r2, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	4630      	mov	r0, r6
 800c12c:	f7ff ffa2 	bl	800c074 <__sfputs_r>
 800c130:	3001      	adds	r0, #1
 800c132:	f000 80a9 	beq.w	800c288 <_vfiprintf_r+0x1f0>
 800c136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c138:	445a      	add	r2, fp
 800c13a:	9209      	str	r2, [sp, #36]	; 0x24
 800c13c:	f89a 3000 	ldrb.w	r3, [sl]
 800c140:	2b00      	cmp	r3, #0
 800c142:	f000 80a1 	beq.w	800c288 <_vfiprintf_r+0x1f0>
 800c146:	2300      	movs	r3, #0
 800c148:	f04f 32ff 	mov.w	r2, #4294967295
 800c14c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c150:	f10a 0a01 	add.w	sl, sl, #1
 800c154:	9304      	str	r3, [sp, #16]
 800c156:	9307      	str	r3, [sp, #28]
 800c158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c15c:	931a      	str	r3, [sp, #104]	; 0x68
 800c15e:	4654      	mov	r4, sl
 800c160:	2205      	movs	r2, #5
 800c162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c166:	4854      	ldr	r0, [pc, #336]	; (800c2b8 <_vfiprintf_r+0x220>)
 800c168:	f7f4 f852 	bl	8000210 <memchr>
 800c16c:	9a04      	ldr	r2, [sp, #16]
 800c16e:	b9d8      	cbnz	r0, 800c1a8 <_vfiprintf_r+0x110>
 800c170:	06d1      	lsls	r1, r2, #27
 800c172:	bf44      	itt	mi
 800c174:	2320      	movmi	r3, #32
 800c176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c17a:	0713      	lsls	r3, r2, #28
 800c17c:	bf44      	itt	mi
 800c17e:	232b      	movmi	r3, #43	; 0x2b
 800c180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c184:	f89a 3000 	ldrb.w	r3, [sl]
 800c188:	2b2a      	cmp	r3, #42	; 0x2a
 800c18a:	d015      	beq.n	800c1b8 <_vfiprintf_r+0x120>
 800c18c:	9a07      	ldr	r2, [sp, #28]
 800c18e:	4654      	mov	r4, sl
 800c190:	2000      	movs	r0, #0
 800c192:	f04f 0c0a 	mov.w	ip, #10
 800c196:	4621      	mov	r1, r4
 800c198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c19c:	3b30      	subs	r3, #48	; 0x30
 800c19e:	2b09      	cmp	r3, #9
 800c1a0:	d94d      	bls.n	800c23e <_vfiprintf_r+0x1a6>
 800c1a2:	b1b0      	cbz	r0, 800c1d2 <_vfiprintf_r+0x13a>
 800c1a4:	9207      	str	r2, [sp, #28]
 800c1a6:	e014      	b.n	800c1d2 <_vfiprintf_r+0x13a>
 800c1a8:	eba0 0308 	sub.w	r3, r0, r8
 800c1ac:	fa09 f303 	lsl.w	r3, r9, r3
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	9304      	str	r3, [sp, #16]
 800c1b4:	46a2      	mov	sl, r4
 800c1b6:	e7d2      	b.n	800c15e <_vfiprintf_r+0xc6>
 800c1b8:	9b03      	ldr	r3, [sp, #12]
 800c1ba:	1d19      	adds	r1, r3, #4
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	9103      	str	r1, [sp, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	bfbb      	ittet	lt
 800c1c4:	425b      	neglt	r3, r3
 800c1c6:	f042 0202 	orrlt.w	r2, r2, #2
 800c1ca:	9307      	strge	r3, [sp, #28]
 800c1cc:	9307      	strlt	r3, [sp, #28]
 800c1ce:	bfb8      	it	lt
 800c1d0:	9204      	strlt	r2, [sp, #16]
 800c1d2:	7823      	ldrb	r3, [r4, #0]
 800c1d4:	2b2e      	cmp	r3, #46	; 0x2e
 800c1d6:	d10c      	bne.n	800c1f2 <_vfiprintf_r+0x15a>
 800c1d8:	7863      	ldrb	r3, [r4, #1]
 800c1da:	2b2a      	cmp	r3, #42	; 0x2a
 800c1dc:	d134      	bne.n	800c248 <_vfiprintf_r+0x1b0>
 800c1de:	9b03      	ldr	r3, [sp, #12]
 800c1e0:	1d1a      	adds	r2, r3, #4
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	9203      	str	r2, [sp, #12]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	bfb8      	it	lt
 800c1ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800c1ee:	3402      	adds	r4, #2
 800c1f0:	9305      	str	r3, [sp, #20]
 800c1f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c2c8 <_vfiprintf_r+0x230>
 800c1f6:	7821      	ldrb	r1, [r4, #0]
 800c1f8:	2203      	movs	r2, #3
 800c1fa:	4650      	mov	r0, sl
 800c1fc:	f7f4 f808 	bl	8000210 <memchr>
 800c200:	b138      	cbz	r0, 800c212 <_vfiprintf_r+0x17a>
 800c202:	9b04      	ldr	r3, [sp, #16]
 800c204:	eba0 000a 	sub.w	r0, r0, sl
 800c208:	2240      	movs	r2, #64	; 0x40
 800c20a:	4082      	lsls	r2, r0
 800c20c:	4313      	orrs	r3, r2
 800c20e:	3401      	adds	r4, #1
 800c210:	9304      	str	r3, [sp, #16]
 800c212:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c216:	4829      	ldr	r0, [pc, #164]	; (800c2bc <_vfiprintf_r+0x224>)
 800c218:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c21c:	2206      	movs	r2, #6
 800c21e:	f7f3 fff7 	bl	8000210 <memchr>
 800c222:	2800      	cmp	r0, #0
 800c224:	d03f      	beq.n	800c2a6 <_vfiprintf_r+0x20e>
 800c226:	4b26      	ldr	r3, [pc, #152]	; (800c2c0 <_vfiprintf_r+0x228>)
 800c228:	bb1b      	cbnz	r3, 800c272 <_vfiprintf_r+0x1da>
 800c22a:	9b03      	ldr	r3, [sp, #12]
 800c22c:	3307      	adds	r3, #7
 800c22e:	f023 0307 	bic.w	r3, r3, #7
 800c232:	3308      	adds	r3, #8
 800c234:	9303      	str	r3, [sp, #12]
 800c236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c238:	443b      	add	r3, r7
 800c23a:	9309      	str	r3, [sp, #36]	; 0x24
 800c23c:	e768      	b.n	800c110 <_vfiprintf_r+0x78>
 800c23e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c242:	460c      	mov	r4, r1
 800c244:	2001      	movs	r0, #1
 800c246:	e7a6      	b.n	800c196 <_vfiprintf_r+0xfe>
 800c248:	2300      	movs	r3, #0
 800c24a:	3401      	adds	r4, #1
 800c24c:	9305      	str	r3, [sp, #20]
 800c24e:	4619      	mov	r1, r3
 800c250:	f04f 0c0a 	mov.w	ip, #10
 800c254:	4620      	mov	r0, r4
 800c256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c25a:	3a30      	subs	r2, #48	; 0x30
 800c25c:	2a09      	cmp	r2, #9
 800c25e:	d903      	bls.n	800c268 <_vfiprintf_r+0x1d0>
 800c260:	2b00      	cmp	r3, #0
 800c262:	d0c6      	beq.n	800c1f2 <_vfiprintf_r+0x15a>
 800c264:	9105      	str	r1, [sp, #20]
 800c266:	e7c4      	b.n	800c1f2 <_vfiprintf_r+0x15a>
 800c268:	fb0c 2101 	mla	r1, ip, r1, r2
 800c26c:	4604      	mov	r4, r0
 800c26e:	2301      	movs	r3, #1
 800c270:	e7f0      	b.n	800c254 <_vfiprintf_r+0x1bc>
 800c272:	ab03      	add	r3, sp, #12
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	462a      	mov	r2, r5
 800c278:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <_vfiprintf_r+0x22c>)
 800c27a:	a904      	add	r1, sp, #16
 800c27c:	4630      	mov	r0, r6
 800c27e:	f7fb fe4d 	bl	8007f1c <_printf_float>
 800c282:	4607      	mov	r7, r0
 800c284:	1c78      	adds	r0, r7, #1
 800c286:	d1d6      	bne.n	800c236 <_vfiprintf_r+0x19e>
 800c288:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c28a:	07d9      	lsls	r1, r3, #31
 800c28c:	d405      	bmi.n	800c29a <_vfiprintf_r+0x202>
 800c28e:	89ab      	ldrh	r3, [r5, #12]
 800c290:	059a      	lsls	r2, r3, #22
 800c292:	d402      	bmi.n	800c29a <_vfiprintf_r+0x202>
 800c294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c296:	f7fc fdbb 	bl	8008e10 <__retarget_lock_release_recursive>
 800c29a:	89ab      	ldrh	r3, [r5, #12]
 800c29c:	065b      	lsls	r3, r3, #25
 800c29e:	f53f af1d 	bmi.w	800c0dc <_vfiprintf_r+0x44>
 800c2a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2a4:	e71c      	b.n	800c0e0 <_vfiprintf_r+0x48>
 800c2a6:	ab03      	add	r3, sp, #12
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	462a      	mov	r2, r5
 800c2ac:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <_vfiprintf_r+0x22c>)
 800c2ae:	a904      	add	r1, sp, #16
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	f7fc f8d7 	bl	8008464 <_printf_i>
 800c2b6:	e7e4      	b.n	800c282 <_vfiprintf_r+0x1ea>
 800c2b8:	0800c9a9 	.word	0x0800c9a9
 800c2bc:	0800c9b3 	.word	0x0800c9b3
 800c2c0:	08007f1d 	.word	0x08007f1d
 800c2c4:	0800c075 	.word	0x0800c075
 800c2c8:	0800c9af 	.word	0x0800c9af

0800c2cc <__swbuf_r>:
 800c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ce:	460e      	mov	r6, r1
 800c2d0:	4614      	mov	r4, r2
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	b118      	cbz	r0, 800c2de <__swbuf_r+0x12>
 800c2d6:	6a03      	ldr	r3, [r0, #32]
 800c2d8:	b90b      	cbnz	r3, 800c2de <__swbuf_r+0x12>
 800c2da:	f7fc fc81 	bl	8008be0 <__sinit>
 800c2de:	69a3      	ldr	r3, [r4, #24]
 800c2e0:	60a3      	str	r3, [r4, #8]
 800c2e2:	89a3      	ldrh	r3, [r4, #12]
 800c2e4:	071a      	lsls	r2, r3, #28
 800c2e6:	d525      	bpl.n	800c334 <__swbuf_r+0x68>
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	b31b      	cbz	r3, 800c334 <__swbuf_r+0x68>
 800c2ec:	6823      	ldr	r3, [r4, #0]
 800c2ee:	6922      	ldr	r2, [r4, #16]
 800c2f0:	1a98      	subs	r0, r3, r2
 800c2f2:	6963      	ldr	r3, [r4, #20]
 800c2f4:	b2f6      	uxtb	r6, r6
 800c2f6:	4283      	cmp	r3, r0
 800c2f8:	4637      	mov	r7, r6
 800c2fa:	dc04      	bgt.n	800c306 <__swbuf_r+0x3a>
 800c2fc:	4621      	mov	r1, r4
 800c2fe:	4628      	mov	r0, r5
 800c300:	f7ff fa2a 	bl	800b758 <_fflush_r>
 800c304:	b9e0      	cbnz	r0, 800c340 <__swbuf_r+0x74>
 800c306:	68a3      	ldr	r3, [r4, #8]
 800c308:	3b01      	subs	r3, #1
 800c30a:	60a3      	str	r3, [r4, #8]
 800c30c:	6823      	ldr	r3, [r4, #0]
 800c30e:	1c5a      	adds	r2, r3, #1
 800c310:	6022      	str	r2, [r4, #0]
 800c312:	701e      	strb	r6, [r3, #0]
 800c314:	6962      	ldr	r2, [r4, #20]
 800c316:	1c43      	adds	r3, r0, #1
 800c318:	429a      	cmp	r2, r3
 800c31a:	d004      	beq.n	800c326 <__swbuf_r+0x5a>
 800c31c:	89a3      	ldrh	r3, [r4, #12]
 800c31e:	07db      	lsls	r3, r3, #31
 800c320:	d506      	bpl.n	800c330 <__swbuf_r+0x64>
 800c322:	2e0a      	cmp	r6, #10
 800c324:	d104      	bne.n	800c330 <__swbuf_r+0x64>
 800c326:	4621      	mov	r1, r4
 800c328:	4628      	mov	r0, r5
 800c32a:	f7ff fa15 	bl	800b758 <_fflush_r>
 800c32e:	b938      	cbnz	r0, 800c340 <__swbuf_r+0x74>
 800c330:	4638      	mov	r0, r7
 800c332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c334:	4621      	mov	r1, r4
 800c336:	4628      	mov	r0, r5
 800c338:	f000 f806 	bl	800c348 <__swsetup_r>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	d0d5      	beq.n	800c2ec <__swbuf_r+0x20>
 800c340:	f04f 37ff 	mov.w	r7, #4294967295
 800c344:	e7f4      	b.n	800c330 <__swbuf_r+0x64>
	...

0800c348 <__swsetup_r>:
 800c348:	b538      	push	{r3, r4, r5, lr}
 800c34a:	4b2a      	ldr	r3, [pc, #168]	; (800c3f4 <__swsetup_r+0xac>)
 800c34c:	4605      	mov	r5, r0
 800c34e:	6818      	ldr	r0, [r3, #0]
 800c350:	460c      	mov	r4, r1
 800c352:	b118      	cbz	r0, 800c35c <__swsetup_r+0x14>
 800c354:	6a03      	ldr	r3, [r0, #32]
 800c356:	b90b      	cbnz	r3, 800c35c <__swsetup_r+0x14>
 800c358:	f7fc fc42 	bl	8008be0 <__sinit>
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c362:	0718      	lsls	r0, r3, #28
 800c364:	d422      	bmi.n	800c3ac <__swsetup_r+0x64>
 800c366:	06d9      	lsls	r1, r3, #27
 800c368:	d407      	bmi.n	800c37a <__swsetup_r+0x32>
 800c36a:	2309      	movs	r3, #9
 800c36c:	602b      	str	r3, [r5, #0]
 800c36e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c372:	81a3      	strh	r3, [r4, #12]
 800c374:	f04f 30ff 	mov.w	r0, #4294967295
 800c378:	e034      	b.n	800c3e4 <__swsetup_r+0x9c>
 800c37a:	0758      	lsls	r0, r3, #29
 800c37c:	d512      	bpl.n	800c3a4 <__swsetup_r+0x5c>
 800c37e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c380:	b141      	cbz	r1, 800c394 <__swsetup_r+0x4c>
 800c382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c386:	4299      	cmp	r1, r3
 800c388:	d002      	beq.n	800c390 <__swsetup_r+0x48>
 800c38a:	4628      	mov	r0, r5
 800c38c:	f7fd fbc2 	bl	8009b14 <_free_r>
 800c390:	2300      	movs	r3, #0
 800c392:	6363      	str	r3, [r4, #52]	; 0x34
 800c394:	89a3      	ldrh	r3, [r4, #12]
 800c396:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	2300      	movs	r3, #0
 800c39e:	6063      	str	r3, [r4, #4]
 800c3a0:	6923      	ldr	r3, [r4, #16]
 800c3a2:	6023      	str	r3, [r4, #0]
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	f043 0308 	orr.w	r3, r3, #8
 800c3aa:	81a3      	strh	r3, [r4, #12]
 800c3ac:	6923      	ldr	r3, [r4, #16]
 800c3ae:	b94b      	cbnz	r3, 800c3c4 <__swsetup_r+0x7c>
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3ba:	d003      	beq.n	800c3c4 <__swsetup_r+0x7c>
 800c3bc:	4621      	mov	r1, r4
 800c3be:	4628      	mov	r0, r5
 800c3c0:	f000 f884 	bl	800c4cc <__smakebuf_r>
 800c3c4:	89a0      	ldrh	r0, [r4, #12]
 800c3c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3ca:	f010 0301 	ands.w	r3, r0, #1
 800c3ce:	d00a      	beq.n	800c3e6 <__swsetup_r+0x9e>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	60a3      	str	r3, [r4, #8]
 800c3d4:	6963      	ldr	r3, [r4, #20]
 800c3d6:	425b      	negs	r3, r3
 800c3d8:	61a3      	str	r3, [r4, #24]
 800c3da:	6923      	ldr	r3, [r4, #16]
 800c3dc:	b943      	cbnz	r3, 800c3f0 <__swsetup_r+0xa8>
 800c3de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c3e2:	d1c4      	bne.n	800c36e <__swsetup_r+0x26>
 800c3e4:	bd38      	pop	{r3, r4, r5, pc}
 800c3e6:	0781      	lsls	r1, r0, #30
 800c3e8:	bf58      	it	pl
 800c3ea:	6963      	ldrpl	r3, [r4, #20]
 800c3ec:	60a3      	str	r3, [r4, #8]
 800c3ee:	e7f4      	b.n	800c3da <__swsetup_r+0x92>
 800c3f0:	2000      	movs	r0, #0
 800c3f2:	e7f7      	b.n	800c3e4 <__swsetup_r+0x9c>
 800c3f4:	20000078 	.word	0x20000078

0800c3f8 <_raise_r>:
 800c3f8:	291f      	cmp	r1, #31
 800c3fa:	b538      	push	{r3, r4, r5, lr}
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	d904      	bls.n	800c40c <_raise_r+0x14>
 800c402:	2316      	movs	r3, #22
 800c404:	6003      	str	r3, [r0, #0]
 800c406:	f04f 30ff 	mov.w	r0, #4294967295
 800c40a:	bd38      	pop	{r3, r4, r5, pc}
 800c40c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c40e:	b112      	cbz	r2, 800c416 <_raise_r+0x1e>
 800c410:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c414:	b94b      	cbnz	r3, 800c42a <_raise_r+0x32>
 800c416:	4620      	mov	r0, r4
 800c418:	f000 f830 	bl	800c47c <_getpid_r>
 800c41c:	462a      	mov	r2, r5
 800c41e:	4601      	mov	r1, r0
 800c420:	4620      	mov	r0, r4
 800c422:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c426:	f000 b817 	b.w	800c458 <_kill_r>
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d00a      	beq.n	800c444 <_raise_r+0x4c>
 800c42e:	1c59      	adds	r1, r3, #1
 800c430:	d103      	bne.n	800c43a <_raise_r+0x42>
 800c432:	2316      	movs	r3, #22
 800c434:	6003      	str	r3, [r0, #0]
 800c436:	2001      	movs	r0, #1
 800c438:	e7e7      	b.n	800c40a <_raise_r+0x12>
 800c43a:	2400      	movs	r4, #0
 800c43c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c440:	4628      	mov	r0, r5
 800c442:	4798      	blx	r3
 800c444:	2000      	movs	r0, #0
 800c446:	e7e0      	b.n	800c40a <_raise_r+0x12>

0800c448 <raise>:
 800c448:	4b02      	ldr	r3, [pc, #8]	; (800c454 <raise+0xc>)
 800c44a:	4601      	mov	r1, r0
 800c44c:	6818      	ldr	r0, [r3, #0]
 800c44e:	f7ff bfd3 	b.w	800c3f8 <_raise_r>
 800c452:	bf00      	nop
 800c454:	20000078 	.word	0x20000078

0800c458 <_kill_r>:
 800c458:	b538      	push	{r3, r4, r5, lr}
 800c45a:	4d07      	ldr	r5, [pc, #28]	; (800c478 <_kill_r+0x20>)
 800c45c:	2300      	movs	r3, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	4608      	mov	r0, r1
 800c462:	4611      	mov	r1, r2
 800c464:	602b      	str	r3, [r5, #0]
 800c466:	f7f7 f997 	bl	8003798 <_kill>
 800c46a:	1c43      	adds	r3, r0, #1
 800c46c:	d102      	bne.n	800c474 <_kill_r+0x1c>
 800c46e:	682b      	ldr	r3, [r5, #0]
 800c470:	b103      	cbz	r3, 800c474 <_kill_r+0x1c>
 800c472:	6023      	str	r3, [r4, #0]
 800c474:	bd38      	pop	{r3, r4, r5, pc}
 800c476:	bf00      	nop
 800c478:	200007d4 	.word	0x200007d4

0800c47c <_getpid_r>:
 800c47c:	f7f7 b984 	b.w	8003788 <_getpid>

0800c480 <__swhatbuf_r>:
 800c480:	b570      	push	{r4, r5, r6, lr}
 800c482:	460c      	mov	r4, r1
 800c484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c488:	2900      	cmp	r1, #0
 800c48a:	b096      	sub	sp, #88	; 0x58
 800c48c:	4615      	mov	r5, r2
 800c48e:	461e      	mov	r6, r3
 800c490:	da0d      	bge.n	800c4ae <__swhatbuf_r+0x2e>
 800c492:	89a3      	ldrh	r3, [r4, #12]
 800c494:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c498:	f04f 0100 	mov.w	r1, #0
 800c49c:	bf0c      	ite	eq
 800c49e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c4a2:	2340      	movne	r3, #64	; 0x40
 800c4a4:	2000      	movs	r0, #0
 800c4a6:	6031      	str	r1, [r6, #0]
 800c4a8:	602b      	str	r3, [r5, #0]
 800c4aa:	b016      	add	sp, #88	; 0x58
 800c4ac:	bd70      	pop	{r4, r5, r6, pc}
 800c4ae:	466a      	mov	r2, sp
 800c4b0:	f000 f848 	bl	800c544 <_fstat_r>
 800c4b4:	2800      	cmp	r0, #0
 800c4b6:	dbec      	blt.n	800c492 <__swhatbuf_r+0x12>
 800c4b8:	9901      	ldr	r1, [sp, #4]
 800c4ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c4be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c4c2:	4259      	negs	r1, r3
 800c4c4:	4159      	adcs	r1, r3
 800c4c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4ca:	e7eb      	b.n	800c4a4 <__swhatbuf_r+0x24>

0800c4cc <__smakebuf_r>:
 800c4cc:	898b      	ldrh	r3, [r1, #12]
 800c4ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4d0:	079d      	lsls	r5, r3, #30
 800c4d2:	4606      	mov	r6, r0
 800c4d4:	460c      	mov	r4, r1
 800c4d6:	d507      	bpl.n	800c4e8 <__smakebuf_r+0x1c>
 800c4d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4dc:	6023      	str	r3, [r4, #0]
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	6163      	str	r3, [r4, #20]
 800c4e4:	b002      	add	sp, #8
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}
 800c4e8:	ab01      	add	r3, sp, #4
 800c4ea:	466a      	mov	r2, sp
 800c4ec:	f7ff ffc8 	bl	800c480 <__swhatbuf_r>
 800c4f0:	9900      	ldr	r1, [sp, #0]
 800c4f2:	4605      	mov	r5, r0
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	f7fd fb81 	bl	8009bfc <_malloc_r>
 800c4fa:	b948      	cbnz	r0, 800c510 <__smakebuf_r+0x44>
 800c4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c500:	059a      	lsls	r2, r3, #22
 800c502:	d4ef      	bmi.n	800c4e4 <__smakebuf_r+0x18>
 800c504:	f023 0303 	bic.w	r3, r3, #3
 800c508:	f043 0302 	orr.w	r3, r3, #2
 800c50c:	81a3      	strh	r3, [r4, #12]
 800c50e:	e7e3      	b.n	800c4d8 <__smakebuf_r+0xc>
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	6020      	str	r0, [r4, #0]
 800c514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c518:	81a3      	strh	r3, [r4, #12]
 800c51a:	9b00      	ldr	r3, [sp, #0]
 800c51c:	6163      	str	r3, [r4, #20]
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	6120      	str	r0, [r4, #16]
 800c522:	b15b      	cbz	r3, 800c53c <__smakebuf_r+0x70>
 800c524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c528:	4630      	mov	r0, r6
 800c52a:	f000 f81d 	bl	800c568 <_isatty_r>
 800c52e:	b128      	cbz	r0, 800c53c <__smakebuf_r+0x70>
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	f023 0303 	bic.w	r3, r3, #3
 800c536:	f043 0301 	orr.w	r3, r3, #1
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	431d      	orrs	r5, r3
 800c540:	81a5      	strh	r5, [r4, #12]
 800c542:	e7cf      	b.n	800c4e4 <__smakebuf_r+0x18>

0800c544 <_fstat_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	4d07      	ldr	r5, [pc, #28]	; (800c564 <_fstat_r+0x20>)
 800c548:	2300      	movs	r3, #0
 800c54a:	4604      	mov	r4, r0
 800c54c:	4608      	mov	r0, r1
 800c54e:	4611      	mov	r1, r2
 800c550:	602b      	str	r3, [r5, #0]
 800c552:	f7f7 f980 	bl	8003856 <_fstat>
 800c556:	1c43      	adds	r3, r0, #1
 800c558:	d102      	bne.n	800c560 <_fstat_r+0x1c>
 800c55a:	682b      	ldr	r3, [r5, #0]
 800c55c:	b103      	cbz	r3, 800c560 <_fstat_r+0x1c>
 800c55e:	6023      	str	r3, [r4, #0]
 800c560:	bd38      	pop	{r3, r4, r5, pc}
 800c562:	bf00      	nop
 800c564:	200007d4 	.word	0x200007d4

0800c568 <_isatty_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d06      	ldr	r5, [pc, #24]	; (800c584 <_isatty_r+0x1c>)
 800c56c:	2300      	movs	r3, #0
 800c56e:	4604      	mov	r4, r0
 800c570:	4608      	mov	r0, r1
 800c572:	602b      	str	r3, [r5, #0]
 800c574:	f7f7 f97f 	bl	8003876 <_isatty>
 800c578:	1c43      	adds	r3, r0, #1
 800c57a:	d102      	bne.n	800c582 <_isatty_r+0x1a>
 800c57c:	682b      	ldr	r3, [r5, #0]
 800c57e:	b103      	cbz	r3, 800c582 <_isatty_r+0x1a>
 800c580:	6023      	str	r3, [r4, #0]
 800c582:	bd38      	pop	{r3, r4, r5, pc}
 800c584:	200007d4 	.word	0x200007d4

0800c588 <_init>:
 800c588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58a:	bf00      	nop
 800c58c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c58e:	bc08      	pop	{r3}
 800c590:	469e      	mov	lr, r3
 800c592:	4770      	bx	lr

0800c594 <_fini>:
 800c594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c596:	bf00      	nop
 800c598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c59a:	bc08      	pop	{r3}
 800c59c:	469e      	mov	lr, r3
 800c59e:	4770      	bx	lr
