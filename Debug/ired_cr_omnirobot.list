
ired_cr_omnirobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c114  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b8  0800c2e8  0800c2e8  0000d2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7a0  0800c7a0  0000e1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7a0  0800c7a0  0000d7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7a8  0800c7a8  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c7a8  0800c7a8  0000d7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7b0  0800c7b0  0000d7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c7b4  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005fc  200001e8  0800c99c  0000e1e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800c99c  0000e7e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015bc5  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002944  00000000  00000000  00023ddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00026728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7b  00000000  00000000  00027838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002428c  00000000  00000000  000285b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015994  00000000  00000000  0004c83f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9c00  00000000  00000000  000621d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013bdd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f0c  00000000  00000000  0013be18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00141d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c2cc 	.word	0x0800c2cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800c2cc 	.word	0x0800c2cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	0000      	movs	r0, r0
	...

08001028 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	@ 0x88
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f002 fd13 	bl	8003a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f9ad 	bl	8001390 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 fd05 	bl	8001a44 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 800103a:	f000 fa5f 	bl	80014fc <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800103e:	f000 fabf 	bl	80015c0 <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 8001042:	f000 fbb3 	bl	80017ac <_ZL12MX_TIM4_Initv>
  MX_TIM3_Init();
 8001046:	f000 fb53 	bl	80016f0 <_ZL12MX_TIM3_Initv>
  MX_I2C1_Init();
 800104a:	f000 fa23 	bl	8001494 <_ZL12MX_I2C1_Initv>
  MX_TIM5_Init();
 800104e:	f000 fc0b 	bl	8001868 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 8001052:	f000 fc67 	bl	8001924 <_ZL12MX_TIM8_Initv>
  MX_USART1_UART_Init();
 8001056:	f000 fcc7 	bl	80019e8 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */
	/* LED Status */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001060:	48b9      	ldr	r0, [pc, #740]	@ (8001348 <main+0x320>)
 8001062:	f003 f835 	bl	80040d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106c:	48b6      	ldr	r0, [pc, #728]	@ (8001348 <main+0x320>)
 800106e:	f003 f82f 	bl	80040d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001078:	48b3      	ldr	r0, [pc, #716]	@ (8001348 <main+0x320>)
 800107a:	f003 f829 	bl	80040d0 <HAL_GPIO_WritePin>

	uint8_t status = mpu.begin();
 800107e:	2200      	movs	r2, #0
 8001080:	2101      	movs	r1, #1
 8001082:	48b2      	ldr	r0, [pc, #712]	@ (800134c <main+0x324>)
 8001084:	f001 fbe8 	bl	8002858 <_ZN7MPU92505beginEii>
 8001088:	4603      	mov	r3, r0
 800108a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	while (status != HAL_OK) {
 800108e:	e010      	b.n	80010b2 <main+0x8a>
		status = mpu.begin();
 8001090:	2200      	movs	r2, #0
 8001092:	2101      	movs	r1, #1
 8001094:	48ad      	ldr	r0, [pc, #692]	@ (800134c <main+0x324>)
 8001096:	f001 fbdf 	bl	8002858 <_ZN7MPU92505beginEii>
 800109a:	4603      	mov	r3, r0
 800109c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80010a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010a4:	48a8      	ldr	r0, [pc, #672]	@ (8001348 <main+0x320>)
 80010a6:	f003 f82c 	bl	8004102 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80010aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ae:	f002 fd45 	bl	8003b3c <HAL_Delay>
	while (status != HAL_OK) {
 80010b2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1ea      	bne.n	8001090 <main+0x68>
	}
	mpu.calcOffsets();
 80010ba:	2201      	movs	r2, #1
 80010bc:	2101      	movs	r1, #1
 80010be:	48a3      	ldr	r0, [pc, #652]	@ (800134c <main+0x324>)
 80010c0:	f001 fd66 	bl	8002b90 <_ZN7MPU925011calcOffsetsEbb>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010ca:	489f      	ldr	r0, [pc, #636]	@ (8001348 <main+0x320>)
 80010cc:	f003 f800 	bl	80040d0 <HAL_GPIO_WritePin>

	/* Motor */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80010d0:	2100      	movs	r1, #0
 80010d2:	489f      	ldr	r0, [pc, #636]	@ (8001350 <main+0x328>)
 80010d4:	f004 ff16 	bl	8005f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80010d8:	2104      	movs	r1, #4
 80010da:	489d      	ldr	r0, [pc, #628]	@ (8001350 <main+0x328>)
 80010dc:	f004 ff12 	bl	8005f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80010e0:	2108      	movs	r1, #8
 80010e2:	489b      	ldr	r0, [pc, #620]	@ (8001350 <main+0x328>)
 80010e4:	f004 ff0e 	bl	8005f04 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80010e8:	210c      	movs	r1, #12
 80010ea:	4899      	ldr	r0, [pc, #612]	@ (8001350 <main+0x328>)
 80010ec:	f004 ff0a 	bl	8005f04 <HAL_TIM_PWM_Start>
	TIM2->CCR1 = 0;
 80010f0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010f4:	2200      	movs	r2, #0
 80010f6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM2->CCR2 = 0;
 80010f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010fc:	2200      	movs	r2, #0
 80010fe:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM2->CCR3 = 0;
 8001100:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001104:	2200      	movs	r2, #0
 8001106:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = 0;
 8001108:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800110c:	2200      	movs	r2, #0
 800110e:	641a      	str	r2, [r3, #64]	@ 0x40
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001110:	2201      	movs	r2, #1
 8001112:	2101      	movs	r1, #1
 8001114:	488f      	ldr	r0, [pc, #572]	@ (8001354 <main+0x32c>)
 8001116:	f002 ffdb 	bl	80040d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2102      	movs	r1, #2
 800111e:	488d      	ldr	r0, [pc, #564]	@ (8001354 <main+0x32c>)
 8001120:	f002 ffd6 	bl	80040d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2104      	movs	r1, #4
 8001128:	488a      	ldr	r0, [pc, #552]	@ (8001354 <main+0x32c>)
 800112a:	f002 ffd1 	bl	80040d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2108      	movs	r1, #8
 8001132:	4888      	ldr	r0, [pc, #544]	@ (8001354 <main+0x32c>)
 8001134:	f002 ffcc 	bl	80040d0 <HAL_GPIO_WritePin>

	/* Encoder */
	HAL_TIM_Base_Start_IT(&htim4);
 8001138:	4887      	ldr	r0, [pc, #540]	@ (8001358 <main+0x330>)
 800113a:	f004 fe23 	bl	8005d84 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800113e:	213c      	movs	r1, #60	@ 0x3c
 8001140:	4886      	ldr	r0, [pc, #536]	@ (800135c <main+0x334>)
 8001142:	f005 f84d 	bl	80061e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001146:	213c      	movs	r1, #60	@ 0x3c
 8001148:	4885      	ldr	r0, [pc, #532]	@ (8001360 <main+0x338>)
 800114a:	f005 f849 	bl	80061e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 800114e:	213c      	movs	r1, #60	@ 0x3c
 8001150:	4884      	ldr	r0, [pc, #528]	@ (8001364 <main+0x33c>)
 8001152:	f005 f845 	bl	80061e0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001156:	213c      	movs	r1, #60	@ 0x3c
 8001158:	4883      	ldr	r0, [pc, #524]	@ (8001368 <main+0x340>)
 800115a:	f005 f841 	bl	80061e0 <HAL_TIM_Encoder_Start>
	htim1.Instance->CNT = 30000;
 800115e:	4b7f      	ldr	r3, [pc, #508]	@ (800135c <main+0x334>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
	htim3.Instance->CNT = 30000;
 8001168:	4b7d      	ldr	r3, [pc, #500]	@ (8001360 <main+0x338>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001170:	625a      	str	r2, [r3, #36]	@ 0x24
	htim5.Instance->CNT = 30000;
 8001172:	4b7c      	ldr	r3, [pc, #496]	@ (8001364 <main+0x33c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f247 5230 	movw	r2, #30000	@ 0x7530
 800117a:	625a      	str	r2, [r3, #36]	@ 0x24
	htim8.Instance->CNT = 30000;
 800117c:	4b7a      	ldr	r3, [pc, #488]	@ (8001368 <main+0x340>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001184:	625a      	str	r2, [r3, #36]	@ 0x24

	/* PID Data */
	motor_initData(&motor_front_left_);
 8001186:	4879      	ldr	r0, [pc, #484]	@ (800136c <main+0x344>)
 8001188:	f001 f96a 	bl	8002460 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_front_right_);
 800118c:	4878      	ldr	r0, [pc, #480]	@ (8001370 <main+0x348>)
 800118e:	f001 f967 	bl	8002460 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_rear_left_);
 8001192:	4878      	ldr	r0, [pc, #480]	@ (8001374 <main+0x34c>)
 8001194:	f001 f964 	bl	8002460 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_rear_right_);
 8001198:	4877      	ldr	r0, [pc, #476]	@ (8001378 <main+0x350>)
 800119a:	f001 f961 	bl	8002460 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	resetPIDData(&pid_data_front_left_);
 800119e:	4877      	ldr	r0, [pc, #476]	@ (800137c <main+0x354>)
 80011a0:	f001 fa9c 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_front_right_);
 80011a4:	4876      	ldr	r0, [pc, #472]	@ (8001380 <main+0x358>)
 80011a6:	f001 fa99 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_rear_left_);
 80011aa:	4876      	ldr	r0, [pc, #472]	@ (8001384 <main+0x35c>)
 80011ac:	f001 fa96 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_rear_right_);
 80011b0:	4875      	ldr	r0, [pc, #468]	@ (8001388 <main+0x360>)
 80011b2:	f001 fa93 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
	setupPIDParameter(&pid_data_front_left_, 15.0, 85.0, 0.02);
 80011b6:	ed9f 2b5a 	vldr	d2, [pc, #360]	@ 8001320 <main+0x2f8>
 80011ba:	ed9f 1b5b 	vldr	d1, [pc, #364]	@ 8001328 <main+0x300>
 80011be:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8001330 <main+0x308>
 80011c2:	486e      	ldr	r0, [pc, #440]	@ (800137c <main+0x354>)
 80011c4:	f001 faa9 	bl	800271a <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_front_right_, 15.0, 40.2, 0.02);
 80011c8:	ed9f 2b55 	vldr	d2, [pc, #340]	@ 8001320 <main+0x2f8>
 80011cc:	ed9f 1b5a 	vldr	d1, [pc, #360]	@ 8001338 <main+0x310>
 80011d0:	ed9f 0b57 	vldr	d0, [pc, #348]	@ 8001330 <main+0x308>
 80011d4:	486a      	ldr	r0, [pc, #424]	@ (8001380 <main+0x358>)
 80011d6:	f001 faa0 	bl	800271a <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_rear_left_, 15.0, 40.2, 0.02);
 80011da:	ed9f 2b51 	vldr	d2, [pc, #324]	@ 8001320 <main+0x2f8>
 80011de:	ed9f 1b56 	vldr	d1, [pc, #344]	@ 8001338 <main+0x310>
 80011e2:	ed9f 0b53 	vldr	d0, [pc, #332]	@ 8001330 <main+0x308>
 80011e6:	4867      	ldr	r0, [pc, #412]	@ (8001384 <main+0x35c>)
 80011e8:	f001 fa97 	bl	800271a <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_rear_right_, 15.0, 40.2, 0.02);
 80011ec:	ed9f 2b4c 	vldr	d2, [pc, #304]	@ 8001320 <main+0x2f8>
 80011f0:	ed9f 1b51 	vldr	d1, [pc, #324]	@ 8001338 <main+0x310>
 80011f4:	ed9f 0b4e 	vldr	d0, [pc, #312]	@ 8001330 <main+0x308>
 80011f8:	4863      	ldr	r0, [pc, #396]	@ (8001388 <main+0x360>)
 80011fa:	f001 fa8e 	bl	800271a <_Z17setupPIDParameterP16PID_Data_Typedefddd>

	/* Timer */
	uint32_t time_now, tTime[3];
	for (int i = 0; i < 3; i++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001204:	e00e      	b.n	8001224 <main+0x1fc>
		tTime[i] = HAL_GetTick();
 8001206:	f002 fc8d 	bl	8003b24 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	3388      	adds	r3, #136	@ 0x88
 8001214:	443b      	add	r3, r7
 8001216:	f843 2c84 	str.w	r2, [r3, #-132]
	for (int i = 0; i < 3; i++) {
 800121a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800121e:	3301      	adds	r3, #1
 8001220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001224:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001228:	2b02      	cmp	r3, #2
 800122a:	ddec      	ble.n	8001206 <main+0x1de>
	}
	int count = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	67bb      	str	r3, [r7, #120]	@ 0x78
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		time_now = HAL_GetTick();
 8001230:	f002 fc78 	bl	8003b24 <HAL_GetTick>
 8001234:	6778      	str	r0, [r7, #116]	@ 0x74
		if (time_now - tTime[0] > 50) {
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b32      	cmp	r3, #50	@ 0x32
 800123e:	d906      	bls.n	800124e <main+0x226>
//			sprintf((char *)tmp_ch, "%lf %lf\r\n", motor_front_left_.speed_sp, motor_front_left_.speed_pv);
//			HAL_UART_Transmit(&huart1, tmp_ch, strlen((char *)tmp_ch), 1000);

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8001240:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001244:	4840      	ldr	r0, [pc, #256]	@ (8001348 <main+0x320>)
 8001246:	f002 ff5c 	bl	8004102 <HAL_GPIO_TogglePin>
			tTime[0] = time_now;
 800124a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800124c:	607b      	str	r3, [r7, #4]
		}

		if (time_now - tTime[1] > 10) {
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b0a      	cmp	r3, #10
 8001256:	d92e      	bls.n	80012b6 <main+0x28e>
			motor_front_left_.speed_sp = 70.0;
 8001258:	4944      	ldr	r1, [pc, #272]	@ (800136c <main+0x344>)
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b4b      	ldr	r3, [pc, #300]	@ (800138c <main+0x364>)
 8001260:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_front_right_.speed_sp = 70.0;
 8001264:	4942      	ldr	r1, [pc, #264]	@ (8001370 <main+0x348>)
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	4b48      	ldr	r3, [pc, #288]	@ (800138c <main+0x364>)
 800126c:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_rear_left_.speed_sp = 70.0;
 8001270:	4940      	ldr	r1, [pc, #256]	@ (8001374 <main+0x34c>)
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b45      	ldr	r3, [pc, #276]	@ (800138c <main+0x364>)
 8001278:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_rear_right_.speed_sp = 70.0;
 800127c:	493e      	ldr	r1, [pc, #248]	@ (8001378 <main+0x350>)
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b42      	ldr	r3, [pc, #264]	@ (800138c <main+0x364>)
 8001284:	e9c1 2308 	strd	r2, r3, [r1, #32]

			motor_front_left_drive(0.01);
 8001288:	ed9f 0b2d 	vldr	d0, [pc, #180]	@ 8001340 <main+0x318>
 800128c:	f000 fdc8 	bl	8001e20 <_Z22motor_front_left_drived>
			motor_front_right_drive(0.01);
 8001290:	ed9f 0b2b 	vldr	d0, [pc, #172]	@ 8001340 <main+0x318>
 8001294:	f000 fe8c 	bl	8001fb0 <_Z23motor_front_right_drived>
			motor_rear_left_drive(0.01);
 8001298:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8001340 <main+0x318>
 800129c:	f000 ff50 	bl	8002140 <_Z21motor_rear_left_drived>
			motor_rear_right_drive(0.01);
 80012a0:	ed9f 0b27 	vldr	d0, [pc, #156]	@ 8001340 <main+0x318>
 80012a4:	f001 f814 	bl	80022d0 <_Z22motor_rear_right_drived>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80012a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80012ac:	4826      	ldr	r0, [pc, #152]	@ (8001348 <main+0x320>)
 80012ae:	f002 ff28 	bl	8004102 <HAL_GPIO_TogglePin>
			tTime[1] = time_now;
 80012b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012b4:	60bb      	str	r3, [r7, #8]
		}

		if (time_now - tTime[2] > 10) {
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b0a      	cmp	r3, #10
 80012be:	d9b7      	bls.n	8001230 <main+0x208>
			uint8_t status = mpu.update();
 80012c0:	4822      	ldr	r0, [pc, #136]	@ (800134c <main+0x324>)
 80012c2:	f001 fe4d 	bl	8002f60 <_ZN7MPU92506updateEv>
 80012c6:	4603      	mov	r3, r0
 80012c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (status != HAL_OK) {
 80012cc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d01c      	beq.n	800130e <main+0x2e6>
				while (status != HAL_OK) {
 80012d4:	e00c      	b.n	80012f0 <main+0x2c8>
					status = mpu.begin();
 80012d6:	2200      	movs	r2, #0
 80012d8:	2101      	movs	r1, #1
 80012da:	481c      	ldr	r0, [pc, #112]	@ (800134c <main+0x324>)
 80012dc:	f001 fabc 	bl	8002858 <_ZN7MPU92505beginEii>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 80012e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012ea:	4817      	ldr	r0, [pc, #92]	@ (8001348 <main+0x320>)
 80012ec:	f002 ff09 	bl	8004102 <HAL_GPIO_TogglePin>
				while (status != HAL_OK) {
 80012f0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ee      	bne.n	80012d6 <main+0x2ae>
//					HAL_Delay(1000);
				}
				mpu.calcOffsets();
 80012f8:	2201      	movs	r2, #1
 80012fa:	2101      	movs	r1, #1
 80012fc:	4813      	ldr	r0, [pc, #76]	@ (800134c <main+0x324>)
 80012fe:	f001 fc47 	bl	8002b90 <_ZN7MPU925011calcOffsetsEbb>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001308:	480f      	ldr	r0, [pc, #60]	@ (8001348 <main+0x320>)
 800130a:	f002 fee1 	bl	80040d0 <HAL_GPIO_WritePin>
			}
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 800130e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001312:	480d      	ldr	r0, [pc, #52]	@ (8001348 <main+0x320>)
 8001314:	f002 fef5 	bl	8004102 <HAL_GPIO_TogglePin>
//		HAL_UART_Transmit(&huart1, tmp_ch, strlen((char *)tmp_ch), 1000);

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8001318:	e78a      	b.n	8001230 <main+0x208>
 800131a:	bf00      	nop
 800131c:	f3af 8000 	nop.w
 8001320:	47ae147b 	.word	0x47ae147b
 8001324:	3f947ae1 	.word	0x3f947ae1
 8001328:	00000000 	.word	0x00000000
 800132c:	40554000 	.word	0x40554000
 8001330:	00000000 	.word	0x00000000
 8001334:	402e0000 	.word	0x402e0000
 8001338:	9999999a 	.word	0x9999999a
 800133c:	40441999 	.word	0x40441999
 8001340:	47ae147b 	.word	0x47ae147b
 8001344:	3f847ae1 	.word	0x3f847ae1
 8001348:	40020400 	.word	0x40020400
 800134c:	20000450 	.word	0x20000450
 8001350:	200002a0 	.word	0x200002a0
 8001354:	40020800 	.word	0x40020800
 8001358:	20000330 	.word	0x20000330
 800135c:	20000258 	.word	0x20000258
 8001360:	200002e8 	.word	0x200002e8
 8001364:	20000378 	.word	0x20000378
 8001368:	200003c0 	.word	0x200003c0
 800136c:	20000510 	.word	0x20000510
 8001370:	20000540 	.word	0x20000540
 8001374:	20000570 	.word	0x20000570
 8001378:	200005a0 	.word	0x200005a0
 800137c:	200005d0 	.word	0x200005d0
 8001380:	20000600 	.word	0x20000600
 8001384:	20000630 	.word	0x20000630
 8001388:	20000660 	.word	0x20000660
 800138c:	40518000 	.word	0x40518000

08001390 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b094      	sub	sp, #80	@ 0x50
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	2234      	movs	r2, #52	@ 0x34
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f007 fbbf 	bl	8008b22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	4b34      	ldr	r3, [pc, #208]	@ (800148c <_Z18SystemClock_Configv+0xfc>)
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	4a33      	ldr	r2, [pc, #204]	@ (800148c <_Z18SystemClock_Configv+0xfc>)
 80013be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c4:	4b31      	ldr	r3, [pc, #196]	@ (800148c <_Z18SystemClock_Configv+0xfc>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d0:	2300      	movs	r3, #0
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <_Z18SystemClock_Configv+0x100>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a2d      	ldr	r2, [pc, #180]	@ (8001490 <_Z18SystemClock_Configv+0x100>)
 80013da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <_Z18SystemClock_Configv+0x100>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013e8:	603b      	str	r3, [r7, #0]
 80013ea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ec:	2301      	movs	r3, #1
 80013ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f6:	2302      	movs	r3, #2
 80013f8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001400:	230f      	movs	r3, #15
 8001402:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001404:	23d8      	movs	r3, #216	@ 0xd8
 8001406:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001408:	2302      	movs	r3, #2
 800140a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800140c:	2302      	movs	r3, #2
 800140e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001410:	2302      	movs	r3, #2
 8001412:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001414:	f107 031c 	add.w	r3, r7, #28
 8001418:	4618      	mov	r0, r3
 800141a:	f004 f9c5 	bl	80057a8 <HAL_RCC_OscConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800142e:	f001 f847 	bl	80024c0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001432:	f003 fea5 	bl	8005180 <HAL_PWREx_EnableOverDrive>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf14      	ite	ne
 800143c:	2301      	movne	r3, #1
 800143e:	2300      	moveq	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001446:	f001 f83b 	bl	80024c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144a:	230f      	movs	r3, #15
 800144c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144e:	2302      	movs	r3, #2
 8001450:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001456:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800145a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800145c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001460:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	2105      	movs	r1, #5
 8001468:	4618      	mov	r0, r3
 800146a:	f003 fed9 	bl	8005220 <HAL_RCC_ClockConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf14      	ite	ne
 8001474:	2301      	movne	r3, #1
 8001476:	2300      	moveq	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800147e:	f001 f81f 	bl	80024c0 <Error_Handler>
  }
}
 8001482:	bf00      	nop
 8001484:	3750      	adds	r7, #80	@ 0x50
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 800149a:	4a16      	ldr	r2, [pc, #88]	@ (80014f4 <_ZL12MX_I2C1_Initv+0x60>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149e:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80014a0:	4a15      	ldr	r2, [pc, #84]	@ (80014f8 <_ZL12MX_I2C1_Initv+0x64>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014be:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <_ZL12MX_I2C1_Initv+0x5c>)
 80014d2:	f002 fe31 	bl	8004138 <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bf14      	ite	ne
 80014dc:	2301      	movne	r3, #1
 80014de:	2300      	moveq	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80014e6:	f000 ffeb 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000204 	.word	0x20000204
 80014f4:	40005400 	.word	0x40005400
 80014f8:	000186a0 	.word	0x000186a0

080014fc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	@ 0x30
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001502:	f107 030c 	add.w	r3, r7, #12
 8001506:	2224      	movs	r2, #36	@ 0x24
 8001508:	2100      	movs	r1, #0
 800150a:	4618      	mov	r0, r3
 800150c:	f007 fb09 	bl	8008b22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <_ZL12MX_TIM1_Initv+0xbc>)
 800151a:	4a28      	ldr	r2, [pc, #160]	@ (80015bc <_ZL12MX_TIM1_Initv+0xc0>)
 800151c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800151e:	4b26      	ldr	r3, [pc, #152]	@ (80015b8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000;
 800152a:	4b23      	ldr	r3, [pc, #140]	@ (80015b8 <_ZL12MX_TIM1_Initv+0xbc>)
 800152c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001530:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001538:	4b1f      	ldr	r3, [pc, #124]	@ (80015b8 <_ZL12MX_TIM1_Initv+0xbc>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b1e      	ldr	r3, [pc, #120]	@ (80015b8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001544:	2303      	movs	r3, #3
 8001546:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800154c:	2301      	movs	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001550:	2300      	movs	r3, #0
 8001552:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800155c:	2301      	movs	r3, #1
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4812      	ldr	r0, [pc, #72]	@ (80015b8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001570:	f004 fd90 	bl	8006094 <HAL_TIM_Encoder_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 8001584:	f000 ff9c 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4619      	mov	r1, r3
 8001594:	4808      	ldr	r0, [pc, #32]	@ (80015b8 <_ZL12MX_TIM1_Initv+0xbc>)
 8001596:	f005 fc6f 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	bf14      	ite	ne
 80015a0:	2301      	movne	r3, #1
 80015a2:	2300      	moveq	r3, #0
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 80015aa:	f000 ff89 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	@ 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	20000258 	.word	0x20000258
 80015bc:	40010000 	.word	0x40010000

080015c0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c6:	f107 0320 	add.w	r3, r7, #32
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015e2:	4b42      	ldr	r3, [pc, #264]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 45-1;
 80015ea:	4b40      	ldr	r3, [pc, #256]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 80015ec:	222c      	movs	r2, #44	@ 0x2c
 80015ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b3e      	ldr	r3, [pc, #248]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80015f6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 80015f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b3b      	ldr	r3, [pc, #236]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b39      	ldr	r3, [pc, #228]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800160a:	4838      	ldr	r0, [pc, #224]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 800160c:	f004 fc2a 	bl	8005e64 <HAL_TIM_PWM_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	bf14      	ite	ne
 8001616:	2301      	movne	r3, #1
 8001618:	2300      	moveq	r3, #0
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8001620:	f000 ff4e 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001628:	2300      	movs	r3, #0
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4619      	mov	r1, r3
 8001632:	482e      	ldr	r0, [pc, #184]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 8001634:	f005 fc20 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	bf14      	ite	ne
 800163e:	2301      	movne	r3, #1
 8001640:	2300      	moveq	r3, #0
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8001648:	f000 ff3a 	bl	80024c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800164c:	2360      	movs	r3, #96	@ 0x60
 800164e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	4822      	ldr	r0, [pc, #136]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 8001664:	f004 ff3a 	bl	80064dc <HAL_TIM_PWM_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	bf14      	ite	ne
 800166e:	2301      	movne	r3, #1
 8001670:	2300      	moveq	r3, #0
 8001672:	b2db      	uxtb	r3, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8001678:	f000 ff22 	bl	80024c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2204      	movs	r2, #4
 8001680:	4619      	mov	r1, r3
 8001682:	481a      	ldr	r0, [pc, #104]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 8001684:	f004 ff2a 	bl	80064dc <HAL_TIM_PWM_ConfigChannel>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	bf14      	ite	ne
 800168e:	2301      	movne	r3, #1
 8001690:	2300      	moveq	r3, #0
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8001698:	f000 ff12 	bl	80024c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2208      	movs	r2, #8
 80016a0:	4619      	mov	r1, r3
 80016a2:	4812      	ldr	r0, [pc, #72]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 80016a4:	f004 ff1a 	bl	80064dc <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	bf14      	ite	ne
 80016ae:	2301      	movne	r3, #1
 80016b0:	2300      	moveq	r3, #0
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 80016b8:	f000 ff02 	bl	80024c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	220c      	movs	r2, #12
 80016c0:	4619      	mov	r1, r3
 80016c2:	480a      	ldr	r0, [pc, #40]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 80016c4:	f004 ff0a 	bl	80064dc <HAL_TIM_PWM_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf14      	ite	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	2300      	moveq	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <_ZL12MX_TIM2_Initv+0x11c>
  {
    Error_Handler();
 80016d8:	f000 fef2 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016dc:	4803      	ldr	r0, [pc, #12]	@ (80016ec <_ZL12MX_TIM2_Initv+0x12c>)
 80016de:	f001 ffbf 	bl	8003660 <HAL_TIM_MspPostInit>

}
 80016e2:	bf00      	nop
 80016e4:	3728      	adds	r7, #40	@ 0x28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200002a0 	.word	0x200002a0

080016f0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	@ 0x30
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016f6:	f107 030c 	add.w	r3, r7, #12
 80016fa:	2224      	movs	r2, #36	@ 0x24
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f007 fa0f 	bl	8008b22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800170c:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <_ZL12MX_TIM3_Initv+0xb4>)
 800170e:	4a26      	ldr	r2, [pc, #152]	@ (80017a8 <_ZL12MX_TIM3_Initv+0xb8>)
 8001710:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001712:	4b24      	ldr	r3, [pc, #144]	@ (80017a4 <_ZL12MX_TIM3_Initv+0xb4>)
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b22      	ldr	r3, [pc, #136]	@ (80017a4 <_ZL12MX_TIM3_Initv+0xb4>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 800171e:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <_ZL12MX_TIM3_Initv+0xb4>)
 8001720:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001724:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b1f      	ldr	r3, [pc, #124]	@ (80017a4 <_ZL12MX_TIM3_Initv+0xb4>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b1d      	ldr	r3, [pc, #116]	@ (80017a4 <_ZL12MX_TIM3_Initv+0xb4>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001732:	2303      	movs	r3, #3
 8001734:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800173a:	2301      	movs	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800174a:	2301      	movs	r3, #1
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800174e:	2300      	movs	r3, #0
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001756:	f107 030c 	add.w	r3, r7, #12
 800175a:	4619      	mov	r1, r3
 800175c:	4811      	ldr	r0, [pc, #68]	@ (80017a4 <_ZL12MX_TIM3_Initv+0xb4>)
 800175e:	f004 fc99 	bl	8006094 <HAL_TIM_Encoder_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_ZL12MX_TIM3_Initv+0x86>
  {
    Error_Handler();
 8001772:	f000 fea5 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	4808      	ldr	r0, [pc, #32]	@ (80017a4 <_ZL12MX_TIM3_Initv+0xb4>)
 8001784:	f005 fb78 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	bf14      	ite	ne
 800178e:	2301      	movne	r3, #1
 8001790:	2300      	moveq	r3, #0
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 8001798:	f000 fe92 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	3730      	adds	r7, #48	@ 0x30
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200002e8 	.word	0x200002e8
 80017a8:	40000400 	.word	0x40000400

080017ac <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017c8:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <_ZL12MX_TIM4_Initv+0xb4>)
 80017ca:	4a26      	ldr	r2, [pc, #152]	@ (8001864 <_ZL12MX_TIM4_Initv+0xb8>)
 80017cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 900-1;
 80017ce:	4b24      	ldr	r3, [pc, #144]	@ (8001860 <_ZL12MX_TIM4_Initv+0xb4>)
 80017d0:	f240 3283 	movw	r2, #899	@ 0x383
 80017d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <_ZL12MX_TIM4_Initv+0xb4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80017dc:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <_ZL12MX_TIM4_Initv+0xb4>)
 80017de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001860 <_ZL12MX_TIM4_Initv+0xb4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <_ZL12MX_TIM4_Initv+0xb4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80017f0:	481b      	ldr	r0, [pc, #108]	@ (8001860 <_ZL12MX_TIM4_Initv+0xb4>)
 80017f2:	f004 fa77 	bl	8005ce4 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	bf14      	ite	ne
 80017fc:	2301      	movne	r3, #1
 80017fe:	2300      	moveq	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <_ZL12MX_TIM4_Initv+0x5e>
  {
    Error_Handler();
 8001806:	f000 fe5b 	bl	80024c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800180a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800180e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001810:	f107 0308 	add.w	r3, r7, #8
 8001814:	4619      	mov	r1, r3
 8001816:	4812      	ldr	r0, [pc, #72]	@ (8001860 <_ZL12MX_TIM4_Initv+0xb4>)
 8001818:	f004 ff22 	bl	8006660 <HAL_TIM_ConfigClockSource>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	bf14      	ite	ne
 8001822:	2301      	movne	r3, #1
 8001824:	2300      	moveq	r3, #0
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <_ZL12MX_TIM4_Initv+0x84>
  {
    Error_Handler();
 800182c:	f000 fe48 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	4619      	mov	r1, r3
 800183c:	4808      	ldr	r0, [pc, #32]	@ (8001860 <_ZL12MX_TIM4_Initv+0xb4>)
 800183e:	f005 fb1b 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf14      	ite	ne
 8001848:	2301      	movne	r3, #1
 800184a:	2300      	moveq	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <_ZL12MX_TIM4_Initv+0xaa>
  {
    Error_Handler();
 8001852:	f000 fe35 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	3718      	adds	r7, #24
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000330 	.word	0x20000330
 8001864:	40000800 	.word	0x40000800

08001868 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	@ 0x30
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	2224      	movs	r2, #36	@ 0x24
 8001874:	2100      	movs	r1, #0
 8001876:	4618      	mov	r0, r3
 8001878:	f007 f953 	bl	8008b22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187c:	1d3b      	adds	r3, r7, #4
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001884:	4b25      	ldr	r3, [pc, #148]	@ (800191c <_ZL12MX_TIM5_Initv+0xb4>)
 8001886:	4a26      	ldr	r2, [pc, #152]	@ (8001920 <_ZL12MX_TIM5_Initv+0xb8>)
 8001888:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800188a:	4b24      	ldr	r3, [pc, #144]	@ (800191c <_ZL12MX_TIM5_Initv+0xb4>)
 800188c:	2200      	movs	r2, #0
 800188e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <_ZL12MX_TIM5_Initv+0xb4>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000;
 8001896:	4b21      	ldr	r3, [pc, #132]	@ (800191c <_ZL12MX_TIM5_Initv+0xb4>)
 8001898:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800189c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189e:	4b1f      	ldr	r3, [pc, #124]	@ (800191c <_ZL12MX_TIM5_Initv+0xb4>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <_ZL12MX_TIM5_Initv+0xb4>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018aa:	2303      	movs	r3, #3
 80018ac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018b2:	2301      	movs	r3, #1
 80018b4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018c2:	2301      	movs	r3, #1
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	4619      	mov	r1, r3
 80018d4:	4811      	ldr	r0, [pc, #68]	@ (800191c <_ZL12MX_TIM5_Initv+0xb4>)
 80018d6:	f004 fbdd 	bl	8006094 <HAL_TIM_Encoder_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	bf14      	ite	ne
 80018e0:	2301      	movne	r3, #1
 80018e2:	2300      	moveq	r3, #0
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 80018ea:	f000 fde9 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018f6:	1d3b      	adds	r3, r7, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4808      	ldr	r0, [pc, #32]	@ (800191c <_ZL12MX_TIM5_Initv+0xb4>)
 80018fc:	f005 fabc 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf14      	ite	ne
 8001906:	2301      	movne	r3, #1
 8001908:	2300      	moveq	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8001910:	f000 fdd6 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3730      	adds	r7, #48	@ 0x30
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000378 	.word	0x20000378
 8001920:	40000c00 	.word	0x40000c00

08001924 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b08c      	sub	sp, #48	@ 0x30
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800192a:	f107 030c 	add.w	r3, r7, #12
 800192e:	2224      	movs	r2, #36	@ 0x24
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f007 f8f5 	bl	8008b22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001940:	4b27      	ldr	r3, [pc, #156]	@ (80019e0 <_ZL12MX_TIM8_Initv+0xbc>)
 8001942:	4a28      	ldr	r2, [pc, #160]	@ (80019e4 <_ZL12MX_TIM8_Initv+0xc0>)
 8001944:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001946:	4b26      	ldr	r3, [pc, #152]	@ (80019e0 <_ZL12MX_TIM8_Initv+0xbc>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <_ZL12MX_TIM8_Initv+0xbc>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 60000;
 8001952:	4b23      	ldr	r3, [pc, #140]	@ (80019e0 <_ZL12MX_TIM8_Initv+0xbc>)
 8001954:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001958:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b21      	ldr	r3, [pc, #132]	@ (80019e0 <_ZL12MX_TIM8_Initv+0xbc>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001960:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <_ZL12MX_TIM8_Initv+0xbc>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001966:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <_ZL12MX_TIM8_Initv+0xbc>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800196c:	2303      	movs	r3, #3
 800196e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001974:	2301      	movs	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001978:	2300      	movs	r3, #0
 800197a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001980:	2300      	movs	r3, #0
 8001982:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001984:	2301      	movs	r3, #1
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4812      	ldr	r0, [pc, #72]	@ (80019e0 <_ZL12MX_TIM8_Initv+0xbc>)
 8001998:	f004 fb7c 	bl	8006094 <HAL_TIM_Encoder_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	bf14      	ite	ne
 80019a2:	2301      	movne	r3, #1
 80019a4:	2300      	moveq	r3, #0
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <_ZL12MX_TIM8_Initv+0x8c>
  {
    Error_Handler();
 80019ac:	f000 fd88 	bl	80024c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b0:	2300      	movs	r3, #0
 80019b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4808      	ldr	r0, [pc, #32]	@ (80019e0 <_ZL12MX_TIM8_Initv+0xbc>)
 80019be:	f005 fa5b 	bl	8006e78 <HAL_TIMEx_MasterConfigSynchronization>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	bf14      	ite	ne
 80019c8:	2301      	movne	r3, #1
 80019ca:	2300      	moveq	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 80019d2:	f000 fd75 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	3730      	adds	r7, #48	@ 0x30
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	200003c0 	.word	0x200003c0
 80019e4:	40010400 	.word	0x40010400

080019e8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019ee:	4a14      	ldr	r2, [pc, #80]	@ (8001a40 <_ZL19MX_USART1_UART_Initv+0x58>)
 80019f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019f2:	4b12      	ldr	r3, [pc, #72]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x54>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a06:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a0e:	220c      	movs	r2, #12
 8001a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a12:	4b0a      	ldr	r3, [pc, #40]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a1e:	4807      	ldr	r0, [pc, #28]	@ (8001a3c <_ZL19MX_USART1_UART_Initv+0x54>)
 8001a20:	f005 faba 	bl	8006f98 <HAL_UART_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf14      	ite	ne
 8001a2a:	2301      	movne	r3, #1
 8001a2c:	2300      	moveq	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001a34:	f000 fd44 	bl	80024c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000408 	.word	0x20000408
 8001a40:	40011000 	.word	0x40011000

08001a44 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	@ 0x28
 8001a48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	4b31      	ldr	r3, [pc, #196]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a30      	ldr	r2, [pc, #192]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	613b      	str	r3, [r7, #16]
 8001a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a29      	ldr	r2, [pc, #164]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	4b23      	ldr	r3, [pc, #140]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a22      	ldr	r2, [pc, #136]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001abe:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <_ZL12MX_GPIO_Initv+0xe0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M1_INA_Pin|M2_INA_Pin|M3_INA_Pin|M4_INA_Pin, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	210f      	movs	r1, #15
 8001ace:	4816      	ldr	r0, [pc, #88]	@ (8001b28 <_ZL12MX_GPIO_Initv+0xe4>)
 8001ad0:	f002 fafe 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001ada:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <_ZL12MX_GPIO_Initv+0xe8>)
 8001adc:	f002 faf8 	bl	80040d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M1_INA_Pin M2_INA_Pin M3_INA_Pin M4_INA_Pin */
  GPIO_InitStruct.Pin = M1_INA_Pin|M2_INA_Pin|M3_INA_Pin|M4_INA_Pin;
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4619      	mov	r1, r3
 8001af6:	480c      	ldr	r0, [pc, #48]	@ (8001b28 <_ZL12MX_GPIO_Initv+0xe4>)
 8001af8:	f002 f956 	bl	8003da8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001afc:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <_ZL12MX_GPIO_Initv+0xe8>)
 8001b16:	f002 f947 	bl	8003da8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	@ 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020400 	.word	0x40020400

08001b30 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* Encoder */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4aaa      	ldr	r2, [pc, #680]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	f040 8148 	bne.w	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x2a4>
		motor_front_left_.delta_encoder = htim1.Instance->CNT - 30000;
 8001b44:	4ba9      	ldr	r3, [pc, #676]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 8001b50:	3b30      	subs	r3, #48	@ 0x30
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	4ba6      	ldr	r3, [pc, #664]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b58:	801a      	strh	r2, [r3, #0]
		motor_front_right_.delta_encoder = htim3.Instance->CNT - 30000;
 8001b5a:	4ba6      	ldr	r3, [pc, #664]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 8001b66:	3b30      	subs	r3, #48	@ 0x30
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	4ba2      	ldr	r3, [pc, #648]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001b6e:	801a      	strh	r2, [r3, #0]
		motor_rear_left_.delta_encoder = htim5.Instance->CNT - 30000;
 8001b70:	4ba2      	ldr	r3, [pc, #648]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 8001b7c:	3b30      	subs	r3, #48	@ 0x30
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	4b9f      	ldr	r3, [pc, #636]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001b84:	801a      	strh	r2, [r3, #0]
		motor_rear_right_.delta_encoder = htim8.Instance->CNT - 30000;
 8001b86:	4b9f      	ldr	r3, [pc, #636]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 8001b92:	3b30      	subs	r3, #48	@ 0x30
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	b21a      	sxth	r2, r3
 8001b98:	4b9b      	ldr	r3, [pc, #620]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001b9a:	801a      	strh	r2, [r3, #0]

		motor_front_left_.pps = (double) motor_front_left_.delta_encoder * 100.0f;
 8001b9c:	4b94      	ldr	r3, [pc, #592]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fcde 	bl	8000564 <__aeabi_i2d>
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b97      	ldr	r3, [pc, #604]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001bae:	f7fe fd43 	bl	8000638 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	498e      	ldr	r1, [pc, #568]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001bb8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_front_right_.pps = (double) motor_front_right_.delta_encoder * 100.0f;
 8001bbc:	4b8e      	ldr	r3, [pc, #568]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fcce 	bl	8000564 <__aeabi_i2d>
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b8f      	ldr	r3, [pc, #572]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001bce:	f7fe fd33 	bl	8000638 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4988      	ldr	r1, [pc, #544]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001bd8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_rear_left_.pps = (double) motor_rear_left_.delta_encoder * 100.0f;
 8001bdc:	4b88      	ldr	r3, [pc, #544]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fcbe 	bl	8000564 <__aeabi_i2d>
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b87      	ldr	r3, [pc, #540]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001bee:	f7fe fd23 	bl	8000638 <__aeabi_dmul>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4982      	ldr	r1, [pc, #520]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001bf8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_rear_right_.pps = (double) motor_rear_right_.delta_encoder * 100.0f;
 8001bfc:	4b82      	ldr	r3, [pc, #520]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcae 	bl	8000564 <__aeabi_i2d>
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b7f      	ldr	r3, [pc, #508]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001c0e:	f7fe fd13 	bl	8000638 <__aeabi_dmul>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	497c      	ldr	r1, [pc, #496]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001c18:	e9c1 2302 	strd	r2, r3, [r1, #8]

		motor_front_left_.rpm = motor_front_left_.pps * 60 / (500.0f * 4.0f);
 8001c1c:	4b74      	ldr	r3, [pc, #464]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c1e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b7a      	ldr	r3, [pc, #488]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001c28:	f7fe fd06 	bl	8000638 <__aeabi_dmul>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b76      	ldr	r3, [pc, #472]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001c3a:	f7fe fe27 	bl	800088c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	496b      	ldr	r1, [pc, #428]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c44:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_front_left_.rpm = (motor_front_left_.rpm / 45.0f) * 1.068f;
 8001c48:	4b69      	ldr	r3, [pc, #420]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c4a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	4b71      	ldr	r3, [pc, #452]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001c54:	f7fe fe1a 	bl	800088c <__aeabi_ddiv>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	a35f      	add	r3, pc, #380	@ (adr r3, 8001de0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fce7 	bl	8000638 <__aeabi_dmul>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4960      	ldr	r1, [pc, #384]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c70:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_front_right_.rpm = motor_front_right_.pps * 60 / (500.0f * 4.0f);
 8001c74:	4b60      	ldr	r3, [pc, #384]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c76:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b64      	ldr	r3, [pc, #400]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001c80:	f7fe fcda 	bl	8000638 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4610      	mov	r0, r2
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b60      	ldr	r3, [pc, #384]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001c92:	f7fe fdfb 	bl	800088c <__aeabi_ddiv>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4957      	ldr	r1, [pc, #348]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001c9c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_front_right_.rpm = (motor_front_right_.rpm / 45.0f) * 1.068f;
 8001ca0:	4b55      	ldr	r3, [pc, #340]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ca2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b5b      	ldr	r3, [pc, #364]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001cac:	f7fe fdee 	bl	800088c <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	a349      	add	r3, pc, #292	@ (adr r3, 8001de0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbe:	f7fe fcbb 	bl	8000638 <__aeabi_dmul>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	494c      	ldr	r1, [pc, #304]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001cc8:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_rear_left_.rpm = motor_rear_left_.pps * 60 / (500.0f * 4.0f);
 8001ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001cce:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001cd8:	f7fe fcae 	bl	8000638 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b4a      	ldr	r3, [pc, #296]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001cea:	f7fe fdcf 	bl	800088c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4943      	ldr	r1, [pc, #268]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001cf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_rear_left_.rpm = (motor_rear_left_.rpm / 45.0f) * 1.068f;
 8001cf8:	4b41      	ldr	r3, [pc, #260]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001cfa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	4b45      	ldr	r3, [pc, #276]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001d04:	f7fe fdc2 	bl	800088c <__aeabi_ddiv>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	a333      	add	r3, pc, #204	@ (adr r3, 8001de0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d16:	f7fe fc8f 	bl	8000638 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4938      	ldr	r1, [pc, #224]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d20:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_rear_right_.rpm = motor_rear_right_.pps * 60 / (500.0f * 4.0f);
 8001d24:	4b38      	ldr	r3, [pc, #224]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d26:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b38      	ldr	r3, [pc, #224]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001d30:	f7fe fc82 	bl	8000638 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001d42:	f7fe fda3 	bl	800088c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	492f      	ldr	r1, [pc, #188]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_rear_right_.rpm = (motor_rear_right_.rpm / 45.0f) * 1.068f;
 8001d50:	4b2d      	ldr	r3, [pc, #180]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d52:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b2f      	ldr	r3, [pc, #188]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001d5c:	f7fe fd96 	bl	800088c <__aeabi_ddiv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	a31d      	add	r3, pc, #116	@ (adr r3, 8001de0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6e:	f7fe fc63 	bl	8000638 <__aeabi_dmul>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4924      	ldr	r1, [pc, #144]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001d78:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_front_left_.speed_pv = motor_front_left_.rpm;
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d7e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d82:	491b      	ldr	r1, [pc, #108]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d84:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_front_right_.speed_pv = motor_front_right_.rpm;
 8001d88:	4b1b      	ldr	r3, [pc, #108]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d8a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d8e:	491a      	ldr	r1, [pc, #104]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001d90:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_rear_left_.speed_pv = motor_rear_left_.rpm;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d96:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001d9a:	4919      	ldr	r1, [pc, #100]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001d9c:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_rear_right_.speed_pv = motor_rear_right_.rpm;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001da2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001da6:	4918      	ldr	r1, [pc, #96]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001da8:	e9c1 2306 	strd	r2, r3, [r1, #24]

		htim1.Instance->CNT = 30000;
 8001dac:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001db4:	625a      	str	r2, [r3, #36]	@ 0x24
		htim3.Instance->CNT = 30000;
 8001db6:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001dbe:	625a      	str	r2, [r3, #36]	@ 0x24
		htim5.Instance->CNT = 30000;
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001dc8:	625a      	str	r2, [r3, #36]	@ 0x24
		htim8.Instance->CNT = 30000;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	f3af 8000 	nop.w
 8001de0:	20000000 	.word	0x20000000
 8001de4:	3ff11687 	.word	0x3ff11687
 8001de8:	40000800 	.word	0x40000800
 8001dec:	20000258 	.word	0x20000258
 8001df0:	20000510 	.word	0x20000510
 8001df4:	200002e8 	.word	0x200002e8
 8001df8:	20000540 	.word	0x20000540
 8001dfc:	20000378 	.word	0x20000378
 8001e00:	20000570 	.word	0x20000570
 8001e04:	200003c0 	.word	0x200003c0
 8001e08:	200005a0 	.word	0x200005a0
 8001e0c:	40590000 	.word	0x40590000
 8001e10:	404e0000 	.word	0x404e0000
 8001e14:	409f4000 	.word	0x409f4000
 8001e18:	40468000 	.word	0x40468000
 8001e1c:	00000000 	.word	0x00000000

08001e20 <_Z22motor_front_left_drived>:

/* Motor */
void motor_front_left_drive(double dt) {
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_front_left_.speed_sp, motor_front_left_.speed_pv, &pid_data_front_left_, dt);
 8001e36:	4b5a      	ldr	r3, [pc, #360]	@ (8001fa0 <_Z22motor_front_left_drived+0x180>)
 8001e38:	ed93 7b08 	vldr	d7, [r3, #32]
 8001e3c:	4b58      	ldr	r3, [pc, #352]	@ (8001fa0 <_Z22motor_front_left_drived+0x180>)
 8001e3e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001e42:	ed97 2b00 	vldr	d2, [r7]
 8001e46:	4857      	ldr	r0, [pc, #348]	@ (8001fa4 <_Z22motor_front_left_drived+0x184>)
 8001e48:	eeb0 1a46 	vmov.f32	s2, s12
 8001e4c:	eef0 1a66 	vmov.f32	s3, s13
 8001e50:	eeb0 0a47 	vmov.f32	s0, s14
 8001e54:	eef0 0a67 	vmov.f32	s1, s15
 8001e58:	f000 fb5a 	bl	8002510 <_Z12calculatePIDddP16PID_Data_Typedefd>
 8001e5c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	4b50      	ldr	r3, [pc, #320]	@ (8001fa8 <_Z22motor_front_left_drived+0x188>)
 8001e66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e6a:	f7fe fe75 	bl	8000b58 <__aeabi_dcmpgt>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <_Z22motor_front_left_drived+0x5e>
		speed_command = 1000.0;
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa8 <_Z22motor_front_left_drived+0x188>)
 8001e7a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 8001e7e:	a346      	add	r3, pc, #280	@ (adr r3, 8001f98 <_Z22motor_front_left_drived+0x178>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e88:	f7fe fe48 	bl	8000b1c <__aeabi_dcmplt>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <_Z22motor_front_left_drived+0x7c>
		speed_command = -1000.0;
 8001e92:	a341      	add	r3, pc, #260	@ (adr r3, 8001f98 <_Z22motor_front_left_drived+0x178>)
 8001e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e98:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_front_left_.speed_command = speed_command;
 8001e9c:	4940      	ldr	r1, [pc, #256]	@ (8001fa0 <_Z22motor_front_left_drived+0x180>)
 8001e9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ea2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	if (speed_command > 0.0 && motor_front_left_.speed_sp > 0.0) {
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001eb2:	f7fe fe51 	bl	8000b58 <__aeabi_dcmpgt>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d019      	beq.n	8001ef0 <_Z22motor_front_left_drived+0xd0>
 8001ebc:	4b38      	ldr	r3, [pc, #224]	@ (8001fa0 <_Z22motor_front_left_drived+0x180>)
 8001ebe:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	f7fe fe45 	bl	8000b58 <__aeabi_dcmpgt>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <_Z22motor_front_left_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4834      	ldr	r0, [pc, #208]	@ (8001fac <_Z22motor_front_left_drived+0x18c>)
 8001eda:	f002 f8f9 	bl	80040d0 <HAL_GPIO_WritePin>
		TIM2->CCR1 = (int) speed_command;
 8001ede:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ee2:	f7fe fe59 	bl	8000b98 <__aeabi_d2iz>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eee:	e04f      	b.n	8001f90 <_Z22motor_front_left_drived+0x170>
	} else if (speed_command < 0.0 && motor_front_left_.speed_sp < 0.0) {
 8001ef0:	f04f 0200 	mov.w	r2, #0
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001efc:	f7fe fe0e 	bl	8000b1c <__aeabi_dcmplt>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d01f      	beq.n	8001f46 <_Z22motor_front_left_drived+0x126>
 8001f06:	4b26      	ldr	r3, [pc, #152]	@ (8001fa0 <_Z22motor_front_left_drived+0x180>)
 8001f08:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	f7fe fe02 	bl	8000b1c <__aeabi_dcmplt>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d013      	beq.n	8001f46 <_Z22motor_front_left_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2101      	movs	r1, #1
 8001f22:	4822      	ldr	r0, [pc, #136]	@ (8001fac <_Z22motor_front_left_drived+0x18c>)
 8001f24:	f002 f8d4 	bl	80040d0 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8001f28:	68bc      	ldr	r4, [r7, #8]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001f30:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR1 = (int) speed_command;
 8001f34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f38:	f7fe fe2e 	bl	8000b98 <__aeabi_d2iz>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f42:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f44:	e024      	b.n	8001f90 <_Z22motor_front_left_drived+0x170>
	} else if (speed_command == 0) {
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f52:	f7fe fdd9 	bl	8000b08 <__aeabi_dcmpeq>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00c      	beq.n	8001f76 <_Z22motor_front_left_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2101      	movs	r1, #1
 8001f60:	4812      	ldr	r0, [pc, #72]	@ (8001fac <_Z22motor_front_left_drived+0x18c>)
 8001f62:	f002 f8b5 	bl	80040d0 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_left_);
 8001f66:	480f      	ldr	r0, [pc, #60]	@ (8001fa4 <_Z22motor_front_left_drived+0x184>)
 8001f68:	f000 fbb8 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR1 = 0;
 8001f6c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f70:	2200      	movs	r2, #0
 8001f72:	635a      	str	r2, [r3, #52]	@ 0x34
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
		resetPIDData(&pid_data_front_left_);
		TIM2->CCR1 = 0;
	}
}
 8001f74:	e00c      	b.n	8001f90 <_Z22motor_front_left_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2101      	movs	r1, #1
 8001f7a:	480c      	ldr	r0, [pc, #48]	@ (8001fac <_Z22motor_front_left_drived+0x18c>)
 8001f7c:	f002 f8a8 	bl	80040d0 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_left_);
 8001f80:	4808      	ldr	r0, [pc, #32]	@ (8001fa4 <_Z22motor_front_left_drived+0x184>)
 8001f82:	f000 fbab 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR1 = 0;
 8001f86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001f8e:	e7ff      	b.n	8001f90 <_Z22motor_front_left_drived+0x170>
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bdb0      	pop	{r4, r5, r7, pc}
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	c08f4000 	.word	0xc08f4000
 8001fa0:	20000510 	.word	0x20000510
 8001fa4:	200005d0 	.word	0x200005d0
 8001fa8:	408f4000 	.word	0x408f4000
 8001fac:	40020800 	.word	0x40020800

08001fb0 <_Z23motor_front_right_drived>:

void motor_front_right_drive(double dt) {
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 8001fba:	f04f 0200 	mov.w	r2, #0
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_front_right_.speed_sp, motor_front_right_.speed_pv, &pid_data_front_right_, dt);
 8001fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8002130 <_Z23motor_front_right_drived+0x180>)
 8001fc8:	ed93 7b08 	vldr	d7, [r3, #32]
 8001fcc:	4b58      	ldr	r3, [pc, #352]	@ (8002130 <_Z23motor_front_right_drived+0x180>)
 8001fce:	ed93 6b06 	vldr	d6, [r3, #24]
 8001fd2:	ed97 2b00 	vldr	d2, [r7]
 8001fd6:	4857      	ldr	r0, [pc, #348]	@ (8002134 <_Z23motor_front_right_drived+0x184>)
 8001fd8:	eeb0 1a46 	vmov.f32	s2, s12
 8001fdc:	eef0 1a66 	vmov.f32	s3, s13
 8001fe0:	eeb0 0a47 	vmov.f32	s0, s14
 8001fe4:	eef0 0a67 	vmov.f32	s1, s15
 8001fe8:	f000 fa92 	bl	8002510 <_Z12calculatePIDddP16PID_Data_Typedefd>
 8001fec:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	4b50      	ldr	r3, [pc, #320]	@ (8002138 <_Z23motor_front_right_drived+0x188>)
 8001ff6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ffa:	f7fe fdad 	bl	8000b58 <__aeabi_dcmpgt>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d004      	beq.n	800200e <_Z23motor_front_right_drived+0x5e>
		speed_command = 1000.0;
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	4b4b      	ldr	r3, [pc, #300]	@ (8002138 <_Z23motor_front_right_drived+0x188>)
 800200a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 800200e:	a346      	add	r3, pc, #280	@ (adr r3, 8002128 <_Z23motor_front_right_drived+0x178>)
 8002010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002014:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002018:	f7fe fd80 	bl	8000b1c <__aeabi_dcmplt>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d004      	beq.n	800202c <_Z23motor_front_right_drived+0x7c>
		speed_command = -1000.0;
 8002022:	a341      	add	r3, pc, #260	@ (adr r3, 8002128 <_Z23motor_front_right_drived+0x178>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_front_right_.speed_command = speed_command;
 800202c:	4940      	ldr	r1, [pc, #256]	@ (8002130 <_Z23motor_front_right_drived+0x180>)
 800202e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002032:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	if (speed_command > 0.0 && motor_front_right_.speed_sp > 0.0) {
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002042:	f7fe fd89 	bl	8000b58 <__aeabi_dcmpgt>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d019      	beq.n	8002080 <_Z23motor_front_right_drived+0xd0>
 800204c:	4b38      	ldr	r3, [pc, #224]	@ (8002130 <_Z23motor_front_right_drived+0x180>)
 800204e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	f7fe fd7d 	bl	8000b58 <__aeabi_dcmpgt>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d00d      	beq.n	8002080 <_Z23motor_front_right_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002064:	2201      	movs	r2, #1
 8002066:	2102      	movs	r1, #2
 8002068:	4834      	ldr	r0, [pc, #208]	@ (800213c <_Z23motor_front_right_drived+0x18c>)
 800206a:	f002 f831 	bl	80040d0 <HAL_GPIO_WritePin>
		TIM2->CCR2 = (int) speed_command;
 800206e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002072:	f7fe fd91 	bl	8000b98 <__aeabi_d2iz>
 8002076:	4602      	mov	r2, r0
 8002078:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800207c:	639a      	str	r2, [r3, #56]	@ 0x38
 800207e:	e04f      	b.n	8002120 <_Z23motor_front_right_drived+0x170>
	} else if (speed_command < 0.0 && motor_front_right_.speed_sp < 0.0) {
 8002080:	f04f 0200 	mov.w	r2, #0
 8002084:	f04f 0300 	mov.w	r3, #0
 8002088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800208c:	f7fe fd46 	bl	8000b1c <__aeabi_dcmplt>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d01f      	beq.n	80020d6 <_Z23motor_front_right_drived+0x126>
 8002096:	4b26      	ldr	r3, [pc, #152]	@ (8002130 <_Z23motor_front_right_drived+0x180>)
 8002098:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	f7fe fd3a 	bl	8000b1c <__aeabi_dcmplt>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d013      	beq.n	80020d6 <_Z23motor_front_right_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2102      	movs	r1, #2
 80020b2:	4822      	ldr	r0, [pc, #136]	@ (800213c <_Z23motor_front_right_drived+0x18c>)
 80020b4:	f002 f80c 	bl	80040d0 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 80020b8:	68bc      	ldr	r4, [r7, #8]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80020c0:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR2 = (int) speed_command;
 80020c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020c8:	f7fe fd66 	bl	8000b98 <__aeabi_d2iz>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80020d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80020d4:	e024      	b.n	8002120 <_Z23motor_front_right_drived+0x170>
	} else if (speed_command == 0) {
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80020e2:	f7fe fd11 	bl	8000b08 <__aeabi_dcmpeq>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00c      	beq.n	8002106 <_Z23motor_front_right_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	2102      	movs	r1, #2
 80020f0:	4812      	ldr	r0, [pc, #72]	@ (800213c <_Z23motor_front_right_drived+0x18c>)
 80020f2:	f001 ffed 	bl	80040d0 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_right_);
 80020f6:	480f      	ldr	r0, [pc, #60]	@ (8002134 <_Z23motor_front_right_drived+0x184>)
 80020f8:	f000 faf0 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR2 = 0;
 80020fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002100:	2200      	movs	r2, #0
 8002102:	639a      	str	r2, [r3, #56]	@ 0x38
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
		resetPIDData(&pid_data_front_right_);
		TIM2->CCR2 = 0;
	}
}
 8002104:	e00c      	b.n	8002120 <_Z23motor_front_right_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002106:	2201      	movs	r2, #1
 8002108:	2102      	movs	r1, #2
 800210a:	480c      	ldr	r0, [pc, #48]	@ (800213c <_Z23motor_front_right_drived+0x18c>)
 800210c:	f001 ffe0 	bl	80040d0 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_right_);
 8002110:	4808      	ldr	r0, [pc, #32]	@ (8002134 <_Z23motor_front_right_drived+0x184>)
 8002112:	f000 fae3 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR2 = 0;
 8002116:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800211a:	2200      	movs	r2, #0
 800211c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800211e:	e7ff      	b.n	8002120 <_Z23motor_front_right_drived+0x170>
 8002120:	bf00      	nop
 8002122:	3710      	adds	r7, #16
 8002124:	46bd      	mov	sp, r7
 8002126:	bdb0      	pop	{r4, r5, r7, pc}
 8002128:	00000000 	.word	0x00000000
 800212c:	c08f4000 	.word	0xc08f4000
 8002130:	20000540 	.word	0x20000540
 8002134:	20000600 	.word	0x20000600
 8002138:	408f4000 	.word	0x408f4000
 800213c:	40020800 	.word	0x40020800

08002140 <_Z21motor_rear_left_drived>:

void motor_rear_left_drive(double dt) {
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_rear_left_.speed_sp, motor_rear_left_.speed_pv, &pid_data_rear_left_, dt);
 8002156:	4b5a      	ldr	r3, [pc, #360]	@ (80022c0 <_Z21motor_rear_left_drived+0x180>)
 8002158:	ed93 7b08 	vldr	d7, [r3, #32]
 800215c:	4b58      	ldr	r3, [pc, #352]	@ (80022c0 <_Z21motor_rear_left_drived+0x180>)
 800215e:	ed93 6b06 	vldr	d6, [r3, #24]
 8002162:	ed97 2b00 	vldr	d2, [r7]
 8002166:	4857      	ldr	r0, [pc, #348]	@ (80022c4 <_Z21motor_rear_left_drived+0x184>)
 8002168:	eeb0 1a46 	vmov.f32	s2, s12
 800216c:	eef0 1a66 	vmov.f32	s3, s13
 8002170:	eeb0 0a47 	vmov.f32	s0, s14
 8002174:	eef0 0a67 	vmov.f32	s1, s15
 8002178:	f000 f9ca 	bl	8002510 <_Z12calculatePIDddP16PID_Data_Typedefd>
 800217c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	4b50      	ldr	r3, [pc, #320]	@ (80022c8 <_Z21motor_rear_left_drived+0x188>)
 8002186:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800218a:	f7fe fce5 	bl	8000b58 <__aeabi_dcmpgt>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d004      	beq.n	800219e <_Z21motor_rear_left_drived+0x5e>
		speed_command = 1000.0;
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	4b4b      	ldr	r3, [pc, #300]	@ (80022c8 <_Z21motor_rear_left_drived+0x188>)
 800219a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 800219e:	a346      	add	r3, pc, #280	@ (adr r3, 80022b8 <_Z21motor_rear_left_drived+0x178>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021a8:	f7fe fcb8 	bl	8000b1c <__aeabi_dcmplt>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <_Z21motor_rear_left_drived+0x7c>
		speed_command = -1000.0;
 80021b2:	a341      	add	r3, pc, #260	@ (adr r3, 80022b8 <_Z21motor_rear_left_drived+0x178>)
 80021b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_rear_left_.speed_command = speed_command;
 80021bc:	4940      	ldr	r1, [pc, #256]	@ (80022c0 <_Z21motor_rear_left_drived+0x180>)
 80021be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c2:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	if (speed_command > 0.0 && motor_rear_left_.speed_sp > 0.0) {
 80021c6:	f04f 0200 	mov.w	r2, #0
 80021ca:	f04f 0300 	mov.w	r3, #0
 80021ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80021d2:	f7fe fcc1 	bl	8000b58 <__aeabi_dcmpgt>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d019      	beq.n	8002210 <_Z21motor_rear_left_drived+0xd0>
 80021dc:	4b38      	ldr	r3, [pc, #224]	@ (80022c0 <_Z21motor_rear_left_drived+0x180>)
 80021de:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	f04f 0300 	mov.w	r3, #0
 80021ea:	f7fe fcb5 	bl	8000b58 <__aeabi_dcmpgt>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <_Z21motor_rear_left_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80021f4:	2201      	movs	r2, #1
 80021f6:	2104      	movs	r1, #4
 80021f8:	4834      	ldr	r0, [pc, #208]	@ (80022cc <_Z21motor_rear_left_drived+0x18c>)
 80021fa:	f001 ff69 	bl	80040d0 <HAL_GPIO_WritePin>
		TIM2->CCR3 = (int) speed_command;
 80021fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002202:	f7fe fcc9 	bl	8000b98 <__aeabi_d2iz>
 8002206:	4602      	mov	r2, r0
 8002208:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800220c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800220e:	e04f      	b.n	80022b0 <_Z21motor_rear_left_drived+0x170>
	} else if (speed_command < 0.0 && motor_rear_left_.speed_sp < 0.0) {
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800221c:	f7fe fc7e 	bl	8000b1c <__aeabi_dcmplt>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01f      	beq.n	8002266 <_Z21motor_rear_left_drived+0x126>
 8002226:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <_Z21motor_rear_left_drived+0x180>)
 8002228:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	f7fe fc72 	bl	8000b1c <__aeabi_dcmplt>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d013      	beq.n	8002266 <_Z21motor_rear_left_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	2104      	movs	r1, #4
 8002242:	4822      	ldr	r0, [pc, #136]	@ (80022cc <_Z21motor_rear_left_drived+0x18c>)
 8002244:	f001 ff44 	bl	80040d0 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8002248:	68bc      	ldr	r4, [r7, #8]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002250:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR3 = (int) speed_command;
 8002254:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002258:	f7fe fc9e 	bl	8000b98 <__aeabi_d2iz>
 800225c:	4602      	mov	r2, r0
 800225e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002262:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002264:	e024      	b.n	80022b0 <_Z21motor_rear_left_drived+0x170>
	} else if (speed_command == 0) {
 8002266:	f04f 0200 	mov.w	r2, #0
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002272:	f7fe fc49 	bl	8000b08 <__aeabi_dcmpeq>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00c      	beq.n	8002296 <_Z21motor_rear_left_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 800227c:	2201      	movs	r2, #1
 800227e:	2104      	movs	r1, #4
 8002280:	4812      	ldr	r0, [pc, #72]	@ (80022cc <_Z21motor_rear_left_drived+0x18c>)
 8002282:	f001 ff25 	bl	80040d0 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_left_);
 8002286:	480f      	ldr	r0, [pc, #60]	@ (80022c4 <_Z21motor_rear_left_drived+0x184>)
 8002288:	f000 fa28 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR3 = 0;
 800228c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002290:	2200      	movs	r2, #0
 8002292:	63da      	str	r2, [r3, #60]	@ 0x3c
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
		resetPIDData(&pid_data_rear_left_);
		TIM2->CCR3 = 0;
	}
}
 8002294:	e00c      	b.n	80022b0 <_Z21motor_rear_left_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002296:	2201      	movs	r2, #1
 8002298:	2104      	movs	r1, #4
 800229a:	480c      	ldr	r0, [pc, #48]	@ (80022cc <_Z21motor_rear_left_drived+0x18c>)
 800229c:	f001 ff18 	bl	80040d0 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_left_);
 80022a0:	4808      	ldr	r0, [pc, #32]	@ (80022c4 <_Z21motor_rear_left_drived+0x184>)
 80022a2:	f000 fa1b 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR3 = 0;
 80022a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80022aa:	2200      	movs	r2, #0
 80022ac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80022ae:	e7ff      	b.n	80022b0 <_Z21motor_rear_left_drived+0x170>
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bdb0      	pop	{r4, r5, r7, pc}
 80022b8:	00000000 	.word	0x00000000
 80022bc:	c08f4000 	.word	0xc08f4000
 80022c0:	20000570 	.word	0x20000570
 80022c4:	20000630 	.word	0x20000630
 80022c8:	408f4000 	.word	0x408f4000
 80022cc:	40020800 	.word	0x40020800

080022d0 <_Z22motor_rear_right_drived>:

void motor_rear_right_drive(double dt) {
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_rear_right_.speed_sp, motor_rear_right_.speed_pv, &pid_data_rear_right_, dt);
 80022e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002450 <_Z22motor_rear_right_drived+0x180>)
 80022e8:	ed93 7b08 	vldr	d7, [r3, #32]
 80022ec:	4b58      	ldr	r3, [pc, #352]	@ (8002450 <_Z22motor_rear_right_drived+0x180>)
 80022ee:	ed93 6b06 	vldr	d6, [r3, #24]
 80022f2:	ed97 2b00 	vldr	d2, [r7]
 80022f6:	4857      	ldr	r0, [pc, #348]	@ (8002454 <_Z22motor_rear_right_drived+0x184>)
 80022f8:	eeb0 1a46 	vmov.f32	s2, s12
 80022fc:	eef0 1a66 	vmov.f32	s3, s13
 8002300:	eeb0 0a47 	vmov.f32	s0, s14
 8002304:	eef0 0a67 	vmov.f32	s1, s15
 8002308:	f000 f902 	bl	8002510 <_Z12calculatePIDddP16PID_Data_Typedefd>
 800230c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b50      	ldr	r3, [pc, #320]	@ (8002458 <_Z22motor_rear_right_drived+0x188>)
 8002316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800231a:	f7fe fc1d 	bl	8000b58 <__aeabi_dcmpgt>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <_Z22motor_rear_right_drived+0x5e>
		speed_command = 1000.0;
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	4b4b      	ldr	r3, [pc, #300]	@ (8002458 <_Z22motor_rear_right_drived+0x188>)
 800232a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 800232e:	a346      	add	r3, pc, #280	@ (adr r3, 8002448 <_Z22motor_rear_right_drived+0x178>)
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002338:	f7fe fbf0 	bl	8000b1c <__aeabi_dcmplt>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d004      	beq.n	800234c <_Z22motor_rear_right_drived+0x7c>
		speed_command = -1000.0;
 8002342:	a341      	add	r3, pc, #260	@ (adr r3, 8002448 <_Z22motor_rear_right_drived+0x178>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_rear_right_.speed_command = speed_command;
 800234c:	4940      	ldr	r1, [pc, #256]	@ (8002450 <_Z22motor_rear_right_drived+0x180>)
 800234e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002352:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

	if (speed_command > 0.0 && motor_rear_right_.speed_sp > 0.0) {
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002362:	f7fe fbf9 	bl	8000b58 <__aeabi_dcmpgt>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d019      	beq.n	80023a0 <_Z22motor_rear_right_drived+0xd0>
 800236c:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <_Z22motor_rear_right_drived+0x180>)
 800236e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	f7fe fbed 	bl	8000b58 <__aeabi_dcmpgt>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <_Z22motor_rear_right_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002384:	2201      	movs	r2, #1
 8002386:	2108      	movs	r1, #8
 8002388:	4834      	ldr	r0, [pc, #208]	@ (800245c <_Z22motor_rear_right_drived+0x18c>)
 800238a:	f001 fea1 	bl	80040d0 <HAL_GPIO_WritePin>
		TIM2->CCR4 = (int) speed_command;
 800238e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002392:	f7fe fc01 	bl	8000b98 <__aeabi_d2iz>
 8002396:	4602      	mov	r2, r0
 8002398:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800239c:	641a      	str	r2, [r3, #64]	@ 0x40
 800239e:	e04f      	b.n	8002440 <_Z22motor_rear_right_drived+0x170>
	} else if (speed_command < 0.0 && motor_rear_right_.speed_sp < 0.0) {
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ac:	f7fe fbb6 	bl	8000b1c <__aeabi_dcmplt>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01f      	beq.n	80023f6 <_Z22motor_rear_right_drived+0x126>
 80023b6:	4b26      	ldr	r3, [pc, #152]	@ (8002450 <_Z22motor_rear_right_drived+0x180>)
 80023b8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	f7fe fbaa 	bl	8000b1c <__aeabi_dcmplt>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d013      	beq.n	80023f6 <_Z22motor_rear_right_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80023ce:	2200      	movs	r2, #0
 80023d0:	2108      	movs	r1, #8
 80023d2:	4822      	ldr	r0, [pc, #136]	@ (800245c <_Z22motor_rear_right_drived+0x18c>)
 80023d4:	f001 fe7c 	bl	80040d0 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 80023d8:	68bc      	ldr	r4, [r7, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80023e0:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR4 = (int) speed_command;
 80023e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023e8:	f7fe fbd6 	bl	8000b98 <__aeabi_d2iz>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80023f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80023f4:	e024      	b.n	8002440 <_Z22motor_rear_right_drived+0x170>
	} else if (speed_command == 0) {
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002402:	f7fe fb81 	bl	8000b08 <__aeabi_dcmpeq>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <_Z22motor_rear_right_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800240c:	2201      	movs	r2, #1
 800240e:	2108      	movs	r1, #8
 8002410:	4812      	ldr	r0, [pc, #72]	@ (800245c <_Z22motor_rear_right_drived+0x18c>)
 8002412:	f001 fe5d 	bl	80040d0 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_right_);
 8002416:	480f      	ldr	r0, [pc, #60]	@ (8002454 <_Z22motor_rear_right_drived+0x184>)
 8002418:	f000 f960 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR4 = 0;
 800241c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
		resetPIDData(&pid_data_rear_right_);
		TIM2->CCR4 = 0;
	}
}
 8002424:	e00c      	b.n	8002440 <_Z22motor_rear_right_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002426:	2201      	movs	r2, #1
 8002428:	2108      	movs	r1, #8
 800242a:	480c      	ldr	r0, [pc, #48]	@ (800245c <_Z22motor_rear_right_drived+0x18c>)
 800242c:	f001 fe50 	bl	80040d0 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_right_);
 8002430:	4808      	ldr	r0, [pc, #32]	@ (8002454 <_Z22motor_rear_right_drived+0x184>)
 8002432:	f000 f953 	bl	80026dc <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR4 = 0;
 8002436:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800243a:	2200      	movs	r2, #0
 800243c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800243e:	e7ff      	b.n	8002440 <_Z22motor_rear_right_drived+0x170>
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bdb0      	pop	{r4, r5, r7, pc}
 8002448:	00000000 	.word	0x00000000
 800244c:	c08f4000 	.word	0xc08f4000
 8002450:	200005a0 	.word	0x200005a0
 8002454:	20000660 	.word	0x20000660
 8002458:	408f4000 	.word	0x408f4000
 800245c:	40020800 	.word	0x40020800

08002460 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>:

void motor_initData(Motor_Speed_Data_Typedef *_motor) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
	_motor->delta_encoder = 0;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	801a      	strh	r2, [r3, #0]
	_motor->pps = 0.0;
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_motor->rpm = 0.0;
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_motor->speed_command = 0.0;
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	_motor->speed_pv = 0.0;
 8002498:	6879      	ldr	r1, [r7, #4]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_motor->speed_sp = 0.0;
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c4:	b672      	cpsid	i
}
 80024c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <Error_Handler+0x8>

080024cc <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d108      	bne.n	80024ee <_Z41__static_initialization_and_destruction_0ii+0x22>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d103      	bne.n	80024ee <_Z41__static_initialization_and_destruction_0ii+0x22>
MPU9250 mpu(hi2c1);
 80024e6:	4904      	ldr	r1, [pc, #16]	@ (80024f8 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80024e8:	4804      	ldr	r0, [pc, #16]	@ (80024fc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80024ea:	f000 f981 	bl	80027f0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000204 	.word	0x20000204
 80024fc:	20000450 	.word	0x20000450

08002500 <_GLOBAL__sub_I_hi2c1>:
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
 8002504:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002508:	2001      	movs	r0, #1
 800250a:	f7ff ffdf 	bl	80024cc <_Z41__static_initialization_and_destruction_0ii>
 800250e:	bd80      	pop	{r7, pc}

08002510 <_Z12calculatePIDddP16PID_Data_Typedefd>:
#include "motor_pid.h"

double calculatePID(double _sp, double _pv, PID_Data_Typedef *_pid_data, double _dt) {
 8002510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002514:	b08a      	sub	sp, #40	@ 0x28
 8002516:	af00      	add	r7, sp, #0
 8002518:	ed87 0b06 	vstr	d0, [r7, #24]
 800251c:	ed87 1b04 	vstr	d1, [r7, #16]
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	ed87 2b00 	vstr	d2, [r7]
	_pid_data->err = _sp - _pv;
 8002526:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800252a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800252e:	f7fd fecb 	bl	80002c8 <__aeabi_dsub>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	68f9      	ldr	r1, [r7, #12]
 8002538:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if (_pid_data->err > 1000.0)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002542:	f04f 0200 	mov.w	r2, #0
 8002546:	4b64      	ldr	r3, [pc, #400]	@ (80026d8 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 8002548:	f7fe fb06 	bl	8000b58 <__aeabi_dcmpgt>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <_Z12calculatePIDddP16PID_Data_Typedefd+0x4e>
		_pid_data->err = 1000.0;
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	f04f 0200 	mov.w	r2, #0
 8002558:	4b5f      	ldr	r3, [pc, #380]	@ (80026d8 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 800255a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (_pid_data->err < -1000.0)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002564:	a35a      	add	r3, pc, #360	@ (adr r3, 80026d0 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fe fad7 	bl	8000b1c <__aeabi_dcmplt>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <_Z12calculatePIDddP16PID_Data_Typedefd+0x70>
		_pid_data->err = -1000.0;
 8002574:	68f9      	ldr	r1, [r7, #12]
 8002576:	a356      	add	r3, pc, #344	@ (adr r3, 80026d0 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	e9c1 2306 	strd	r2, r3, [r1, #24]

	_pid_data->sum_err += _pid_data->err;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800258c:	f7fd fe9e 	bl	80002cc <__adddf3>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	if (_pid_data->sum_err < -1000) {
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80025a0:	a34b      	add	r3, pc, #300	@ (adr r3, 80026d0 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f7fe fab9 	bl	8000b1c <__aeabi_dcmplt>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <_Z12calculatePIDddP16PID_Data_Typedefd+0xac>
		_pid_data->sum_err = -1000;
 80025b0:	68f9      	ldr	r1, [r7, #12]
 80025b2:	a347      	add	r3, pc, #284	@ (adr r3, 80026d0 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	}
	if (_pid_data->sum_err > 1000) {
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 80025c8:	f7fe fac6 	bl	8000b58 <__aeabi_dcmpgt>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <_Z12calculatePIDddP16PID_Data_Typedefd+0xce>
		_pid_data->sum_err = 1000;
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	4b3f      	ldr	r3, [pc, #252]	@ (80026d8 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 80025da:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	}

	double ret = (_pid_data->kp * _pid_data->err) + (_pid_data->ki * _pid_data->sum_err * _dt)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025ea:	f7fe f825 	bl	8000638 <__aeabi_dmul>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4614      	mov	r4, r2
 80025f4:	461d      	mov	r5, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002602:	f7fe f819 	bl	8000638 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002612:	f7fe f811 	bl	8000638 <__aeabi_dmul>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fd fe55 	bl	80002cc <__adddf3>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4690      	mov	r8, r2
 8002628:	4699      	mov	r9, r3
			+ (_pid_data->kd * ((_pid_data->err - _pid_data->err_l) / _dt));
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800263c:	f7fd fe44 	bl	80002c8 <__aeabi_dsub>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800264c:	f7fe f91e 	bl	800088c <__aeabi_ddiv>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4620      	mov	r0, r4
 8002656:	4629      	mov	r1, r5
 8002658:	f7fd ffee 	bl	8000638 <__aeabi_dmul>
 800265c:	4602      	mov	r2, r0
 800265e:	460b      	mov	r3, r1
	double ret = (_pid_data->kp * _pid_data->err) + (_pid_data->ki * _pid_data->sum_err * _dt)
 8002660:	4640      	mov	r0, r8
 8002662:	4649      	mov	r1, r9
 8002664:	f7fd fe32 	bl	80002cc <__adddf3>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	e9c7 2308 	strd	r2, r3, [r7, #32]

	_pid_data->err_l = _pid_data->err;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002676:	68f9      	ldr	r1, [r7, #12]
 8002678:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if (ret > 1000.0)
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 8002682:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002686:	f7fe fa67 	bl	8000b58 <__aeabi_dcmpgt>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <_Z12calculatePIDddP16PID_Data_Typedefd+0x18a>
		ret = 1000.0;
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 8002696:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ret < -1000.0)
 800269a:	a30d      	add	r3, pc, #52	@ (adr r3, 80026d0 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c0>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80026a4:	f7fe fa3a 	bl	8000b1c <__aeabi_dcmplt>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d004      	beq.n	80026b8 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1a8>
		ret = 1000.0;
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <_Z12calculatePIDddP16PID_Data_Typedefd+0x1c8>)
 80026b4:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return ret;
 80026b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80026bc:	ec43 2b17 	vmov	d7, r2, r3
}
 80026c0:	eeb0 0a47 	vmov.f32	s0, s14
 80026c4:	eef0 0a67 	vmov.f32	s1, s15
 80026c8:	3728      	adds	r7, #40	@ 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026d0:	00000000 	.word	0x00000000
 80026d4:	c08f4000 	.word	0xc08f4000
 80026d8:	408f4000 	.word	0x408f4000

080026dc <_Z12resetPIDDataP16PID_Data_Typedef>:

void resetPIDData(PID_Data_Typedef *_pid_data) {
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	_pid_data->err = 0.0;
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_pid_data->err_l = 0.0;
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9c1 2308 	strd	r2, r3, [r1, #32]
	_pid_data->sum_err = 0.0;
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	f04f 0200 	mov.w	r2, #0
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <_Z17setupPIDParameterP16PID_Data_Typedefddd>:

void setupPIDParameter(PID_Data_Typedef *_pid_data, double _kp, double _ki, double _kd) {
 800271a:	b480      	push	{r7}
 800271c:	b089      	sub	sp, #36	@ 0x24
 800271e:	af00      	add	r7, sp, #0
 8002720:	61f8      	str	r0, [r7, #28]
 8002722:	ed87 0b04 	vstr	d0, [r7, #16]
 8002726:	ed87 1b02 	vstr	d1, [r7, #8]
 800272a:	ed87 2b00 	vstr	d2, [r7]
	_pid_data->kp = _kp;
 800272e:	69f9      	ldr	r1, [r7, #28]
 8002730:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002734:	e9c1 2300 	strd	r2, r3, [r1]
	_pid_data->ki = _ki;
 8002738:	69f9      	ldr	r1, [r7, #28]
 800273a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800273e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_pid_data->kd = _kd;
 8002742:	69f9      	ldr	r1, [r7, #28]
 8002744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002748:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800274c:	bf00      	nop
 800274e:	3724      	adds	r7, #36	@ 0x24
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <_ZL4wrapdd>:
#include "mpu9250.h"

static double wrap(double angle, double limit) {
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002762:	ed87 1b00 	vstr	d1, [r7]
	while (angle > limit)
 8002766:	e00f      	b.n	8002788 <_ZL4wrapdd+0x30>
		angle -= 2 * limit;
 8002768:	e9d7 0100 	ldrd	r0, r1, [r7]
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	f7fd fdac 	bl	80002cc <__adddf3>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800277c:	f7fd fda4 	bl	80002c8 <__aeabi_dsub>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (angle > limit)
 8002788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800278c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002790:	f7fe f9e2 	bl	8000b58 <__aeabi_dcmpgt>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e6      	bne.n	8002768 <_ZL4wrapdd+0x10>
	while (angle < -limit)
 800279a:	e00f      	b.n	80027bc <_ZL4wrapdd+0x64>
		angle += 2 * limit;
 800279c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	f7fd fd92 	bl	80002cc <__adddf3>
 80027a8:	4602      	mov	r2, r0
 80027aa:	460b      	mov	r3, r1
 80027ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027b0:	f7fd fd8c 	bl	80002cc <__adddf3>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (angle < -limit)
 80027bc:	683c      	ldr	r4, [r7, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80027c4:	4622      	mov	r2, r4
 80027c6:	462b      	mov	r3, r5
 80027c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80027cc:	f7fe f9a6 	bl	8000b1c <__aeabi_dcmplt>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1e2      	bne.n	800279c <_ZL4wrapdd+0x44>
	return angle;
 80027d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027da:	ec43 2b17 	vmov	d7, r2, r3
}
 80027de:	eeb0 0a47 	vmov.f32	s0, s14
 80027e2:	eef0 0a67 	vmov.f32	s1, s15
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bdb0      	pop	{r4, r5, r7, pc}
 80027ec:	0000      	movs	r0, r0
	...

080027f0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef>:

MPU9250::MPU9250(I2C_HandleTypeDef &w) {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	22d0      	movs	r2, #208	@ 0xd0
 8002804:	721a      	strb	r2, [r3, #8]
	wire = &w;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	605a      	str	r2, [r3, #4]
	setFilterGyroCoef(DEFAULT_GYRO_COEFF);
 800280c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8002848 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x58>
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f989 	bl	8002b28 <_ZN7MPU925017setFilterGyroCoefEd>
	setGyroOffsets(0, 0, 0);
 8002816:	ed9f 2b0e 	vldr	d2, [pc, #56]	@ 8002850 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 800281a:	ed9f 1b0d 	vldr	d1, [pc, #52]	@ 8002850 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 800281e:	ed9f 0b0c 	vldr	d0, [pc, #48]	@ 8002850 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f940 	bl	8002aa8 <_ZN7MPU925014setGyroOffsetsEddd>
	setAccOffsets(0, 0, 0);
 8002828:	ed9f 2b09 	vldr	d2, [pc, #36]	@ 8002850 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 800282c:	ed9f 1b08 	vldr	d1, [pc, #32]	@ 8002850 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8002830:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 8002850 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f956 	bl	8002ae6 <_ZN7MPU925013setAccOffsetsEddd>
}
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	f3af 8000 	nop.w
 8002848:	f5c28f5c 	.word	0xf5c28f5c
 800284c:	3fef5c28 	.word	0x3fef5c28
	...

08002858 <_ZN7MPU92505beginEii>:

uint8_t MPU9250::begin(int gyro_config_num, int acc_config_num) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	@ 0x28
 800285c:	af04      	add	r7, sp, #16
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
	uint8_t check, status;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8002864:	2201      	movs	r2, #1
 8002866:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800286a:	481d      	ldr	r0, [pc, #116]	@ (80028e0 <_ZN7MPU92505beginEii+0x88>)
 800286c:	f001 fc30 	bl	80040d0 <HAL_GPIO_WritePin>
	status = HAL_I2C_Mem_Read(wire, address, MPU9250_ADDR_CHECK, 1, &check, 1, 1000);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6858      	ldr	r0, [r3, #4]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	7a1b      	ldrb	r3, [r3, #8]
 8002878:	4619      	mov	r1, r3
 800287a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	2301      	movs	r3, #1
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	f107 0316 	add.w	r3, r7, #22
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	2301      	movs	r3, #1
 800288c:	2275      	movs	r2, #117	@ 0x75
 800288e:	f001 fe91 	bl	80045b4 <HAL_I2C_Mem_Read>
 8002892:	4603      	mov	r3, r0
 8002894:	75fb      	strb	r3, [r7, #23]
	if (check == 113) {
 8002896:	7dbb      	ldrb	r3, [r7, #22]
 8002898:	2b71      	cmp	r3, #113	@ 0x71
 800289a:	d11c      	bne.n	80028d6 <_ZN7MPU92505beginEii+0x7e>
		writeData(MPU9250_PWR_MGMT_1_REGISTER, 0x01);
 800289c:	2201      	movs	r2, #1
 800289e:	216b      	movs	r1, #107	@ 0x6b
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f81f 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
		writeData(MPU9250_SMPLRT_DIV_REGISTER, 0x00);
 80028a6:	2200      	movs	r2, #0
 80028a8:	2119      	movs	r1, #25
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 f81a 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
		writeData(MPU9250_CONFIG_REGISTER, 0x00);
 80028b0:	2200      	movs	r2, #0
 80028b2:	211a      	movs	r1, #26
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f815 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
		setGyroConfig(gyro_config_num);
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f833 	bl	8002928 <_ZN7MPU925013setGyroConfigEi>
		setAccConfig(acc_config_num);
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f893 	bl	80029f0 <_ZN7MPU925012setAccConfigEi>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80028ca:	2200      	movs	r2, #0
 80028cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028d0:	4803      	ldr	r0, [pc, #12]	@ (80028e0 <_ZN7MPU92505beginEii+0x88>)
 80028d2:	f001 fbfd 	bl	80040d0 <HAL_GPIO_WritePin>
	}
	return status;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40020400 	.word	0x40020400

080028e4 <_ZN7MPU92509writeDataEhh>:

uint8_t MPU9250::writeData(uint8_t reg, uint8_t data) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af04      	add	r7, sp, #16
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
 80028f0:	4613      	mov	r3, r2
 80028f2:	70bb      	strb	r3, [r7, #2]
	uint8_t status = HAL_I2C_Mem_Write(wire, address, reg, 1, &data, 1, 1000);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6858      	ldr	r0, [r3, #4]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7a1b      	ldrb	r3, [r3, #8]
 80028fc:	4619      	mov	r1, r3
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	b29a      	uxth	r2, r3
 8002902:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002906:	9302      	str	r3, [sp, #8]
 8002908:	2301      	movs	r3, #1
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	1cbb      	adds	r3, r7, #2
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2301      	movs	r3, #1
 8002912:	f001 fd55 	bl	80043c0 <HAL_I2C_Mem_Write>
 8002916:	4603      	mov	r3, r0
 8002918:	73fb      	strb	r3, [r7, #15]
	return status;
 800291a:	7bfb      	ldrb	r3, [r7, #15]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	0000      	movs	r0, r0
	...

08002928 <_ZN7MPU925013setGyroConfigEi>:

uint8_t MPU9250::setGyroConfig(int config_num) {
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
	uint8_t status;
	switch (config_num) {
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d843      	bhi.n	80029c0 <_ZN7MPU925013setGyroConfigEi+0x98>
 8002938:	a201      	add	r2, pc, #4	@ (adr r2, 8002940 <_ZN7MPU925013setGyroConfigEi+0x18>)
 800293a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800293e:	bf00      	nop
 8002940:	08002951 	.word	0x08002951
 8002944:	0800296d 	.word	0x0800296d
 8002948:	08002989 	.word	0x08002989
 800294c:	080029a5 	.word	0x080029a5
		case 0: // range = +- 250 deg/s
			gyro_lsb_to_degsec = 131.0;
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	a31f      	add	r3, pc, #124	@ (adr r3, 80029d0 <_ZN7MPU925013setGyroConfigEi+0xa8>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x00);
 800295c:	2200      	movs	r2, #0
 800295e:	211b      	movs	r1, #27
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ffbf 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
 8002966:	4603      	mov	r3, r0
 8002968:	73fb      	strb	r3, [r7, #15]
			break;
 800296a:	e02c      	b.n	80029c6 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 1: // range = +- 500 deg/s
			gyro_lsb_to_degsec = 65.5;
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	a31a      	add	r3, pc, #104	@ (adr r3, 80029d8 <_ZN7MPU925013setGyroConfigEi+0xb0>)
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x08);
 8002978:	2208      	movs	r2, #8
 800297a:	211b      	movs	r1, #27
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff ffb1 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
 8002982:	4603      	mov	r3, r0
 8002984:	73fb      	strb	r3, [r7, #15]
			break;
 8002986:	e01e      	b.n	80029c6 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 2: // range = +- 1000 deg/s
			gyro_lsb_to_degsec = 32.8;
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	a315      	add	r3, pc, #84	@ (adr r3, 80029e0 <_ZN7MPU925013setGyroConfigEi+0xb8>)
 800298c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002990:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x10);
 8002994:	2210      	movs	r2, #16
 8002996:	211b      	movs	r1, #27
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ffa3 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
 800299e:	4603      	mov	r3, r0
 80029a0:	73fb      	strb	r3, [r7, #15]
			break;
 80029a2:	e010      	b.n	80029c6 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 3: // range = +- 2000 deg/s
			gyro_lsb_to_degsec = 16.4;
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	a310      	add	r3, pc, #64	@ (adr r3, 80029e8 <_ZN7MPU925013setGyroConfigEi+0xc0>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x18);
 80029b0:	2218      	movs	r2, #24
 80029b2:	211b      	movs	r1, #27
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff95 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
 80029ba:	4603      	mov	r3, r0
 80029bc:	73fb      	strb	r3, [r7, #15]
			break;
 80029be:	e002      	b.n	80029c6 <_ZN7MPU925013setGyroConfigEi+0x9e>
		default: // error
			status = 1;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
			break;
 80029c4:	bf00      	nop
	}
	return status;
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	00000000 	.word	0x00000000
 80029d4:	40606000 	.word	0x40606000
 80029d8:	00000000 	.word	0x00000000
 80029dc:	40506000 	.word	0x40506000
 80029e0:	66666666 	.word	0x66666666
 80029e4:	40406666 	.word	0x40406666
 80029e8:	66666666 	.word	0x66666666
 80029ec:	40306666 	.word	0x40306666

080029f0 <_ZN7MPU925012setAccConfigEi>:

uint8_t MPU9250::setAccConfig(int config_num) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
	uint8_t status;
	switch (config_num) {
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b03      	cmp	r3, #3
 80029fe:	d843      	bhi.n	8002a88 <_ZN7MPU925012setAccConfigEi+0x98>
 8002a00:	a201      	add	r2, pc, #4	@ (adr r2, 8002a08 <_ZN7MPU925012setAccConfigEi+0x18>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a35 	.word	0x08002a35
 8002a10:	08002a51 	.word	0x08002a51
 8002a14:	08002a6d 	.word	0x08002a6d
		case 0: // range = +- 2 g
			acc_lsb_to_g = 16384.0;
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002a98 <_ZN7MPU925012setAccConfigEi+0xa8>)
 8002a20:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x00);
 8002a24:	2200      	movs	r2, #0
 8002a26:	211c      	movs	r1, #28
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff5b 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	73fb      	strb	r3, [r7, #15]
			break;
 8002a32:	e02c      	b.n	8002a8e <_ZN7MPU925012setAccConfigEi+0x9e>
		case 1: // range = +- 4 g
			acc_lsb_to_g = 8192.0;
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	4b18      	ldr	r3, [pc, #96]	@ (8002a9c <_ZN7MPU925012setAccConfigEi+0xac>)
 8002a3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x08);
 8002a40:	2208      	movs	r2, #8
 8002a42:	211c      	movs	r1, #28
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f7ff ff4d 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
			break;
 8002a4e:	e01e      	b.n	8002a8e <_ZN7MPU925012setAccConfigEi+0x9e>
		case 2: // range = +- 8 g
			acc_lsb_to_g = 4096.0;
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	4b12      	ldr	r3, [pc, #72]	@ (8002aa0 <_ZN7MPU925012setAccConfigEi+0xb0>)
 8002a58:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x10);
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	211c      	movs	r1, #28
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ff3f 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
 8002a66:	4603      	mov	r3, r0
 8002a68:	73fb      	strb	r3, [r7, #15]
			break;
 8002a6a:	e010      	b.n	8002a8e <_ZN7MPU925012setAccConfigEi+0x9e>
		case 3: // range = +- 16 g
			acc_lsb_to_g = 2048.0;
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <_ZN7MPU925012setAccConfigEi+0xb4>)
 8002a74:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x18);
 8002a78:	2218      	movs	r2, #24
 8002a7a:	211c      	movs	r1, #28
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff31 	bl	80028e4 <_ZN7MPU92509writeDataEhh>
 8002a82:	4603      	mov	r3, r0
 8002a84:	73fb      	strb	r3, [r7, #15]
			break;
 8002a86:	e002      	b.n	8002a8e <_ZN7MPU925012setAccConfigEi+0x9e>
		default: // error
			status = 1;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	73fb      	strb	r3, [r7, #15]
			break;
 8002a8c:	bf00      	nop
	}
	return status;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40d00000 	.word	0x40d00000
 8002a9c:	40c00000 	.word	0x40c00000
 8002aa0:	40b00000 	.word	0x40b00000
 8002aa4:	40a00000 	.word	0x40a00000

08002aa8 <_ZN7MPU925014setGyroOffsetsEddd>:

void MPU9250::setGyroOffsets(double x, double y, double z) {
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	61f8      	str	r0, [r7, #28]
 8002ab0:	ed87 0b04 	vstr	d0, [r7, #16]
 8002ab4:	ed87 1b02 	vstr	d1, [r7, #8]
 8002ab8:	ed87 2b00 	vstr	d2, [r7]
	gyroXoffset = x;
 8002abc:	69f9      	ldr	r1, [r7, #28]
 8002abe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ac2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	gyroYoffset = y;
 8002ac6:	69f9      	ldr	r1, [r7, #28]
 8002ac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002acc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	gyroZoffset = z;
 8002ad0:	69f9      	ldr	r1, [r7, #28]
 8002ad2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ad6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 8002ada:	bf00      	nop
 8002adc:	3724      	adds	r7, #36	@ 0x24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <_ZN7MPU925013setAccOffsetsEddd>:

void MPU9250::setAccOffsets(double x, double y, double z) {
 8002ae6:	b480      	push	{r7}
 8002ae8:	b089      	sub	sp, #36	@ 0x24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	61f8      	str	r0, [r7, #28]
 8002aee:	ed87 0b04 	vstr	d0, [r7, #16]
 8002af2:	ed87 1b02 	vstr	d1, [r7, #8]
 8002af6:	ed87 2b00 	vstr	d2, [r7]
	accXoffset = x;
 8002afa:	69f9      	ldr	r1, [r7, #28]
 8002afc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b00:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	accYoffset = y;
 8002b04:	69f9      	ldr	r1, [r7, #28]
 8002b06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b0a:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	accZoffset = z;
 8002b0e:	69f9      	ldr	r1, [r7, #28]
 8002b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b14:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
}
 8002b18:	bf00      	nop
 8002b1a:	3724      	adds	r7, #36	@ 0x24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	0000      	movs	r0, r0
	...

08002b28 <_ZN7MPU925017setFilterGyroCoefEd>:

void MPU9250::setFilterGyroCoef(double gyro_coeff) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	ed87 0b00 	vstr	d0, [r7]
	if ((gyro_coeff < 0) or (gyro_coeff > 1)) {
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b40:	f7fd ffec 	bl	8000b1c <__aeabi_dcmplt>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d109      	bne.n	8002b5e <_ZN7MPU925017setFilterGyroCoefEd+0x36>
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b88 <_ZN7MPU925017setFilterGyroCoefEd+0x60>)
 8002b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b54:	f7fe f800 	bl	8000b58 <__aeabi_dcmpgt>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <_ZN7MPU925017setFilterGyroCoefEd+0x40>
		gyro_coeff = DEFAULT_GYRO_COEFF;
 8002b5e:	a308      	add	r3, pc, #32	@ (adr r3, 8002b80 <_ZN7MPU925017setFilterGyroCoefEd+0x58>)
 8002b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b64:	e9c7 2300 	strd	r2, r3, [r7]
	}
	filterGyroCoef = gyro_coeff;
 8002b68:	68f9      	ldr	r1, [r7, #12]
 8002b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b6e:	e9c1 232e 	strd	r2, r3, [r1, #184]	@ 0xb8
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w
 8002b80:	f5c28f5c 	.word	0xf5c28f5c
 8002b84:	3fef5c28 	.word	0x3fef5c28
 8002b88:	3ff00000 	.word	0x3ff00000
 8002b8c:	00000000 	.word	0x00000000

08002b90 <_ZN7MPU925011calcOffsetsEbb>:

void MPU9250::setFilterAccCoef(double acc_coeff) {
	setFilterGyroCoef(1.0 - acc_coeff);
}

void MPU9250::calcOffsets(bool is_calc_gyro, bool is_calc_acc) {
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	b090      	sub	sp, #64	@ 0x40
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	70fb      	strb	r3, [r7, #3]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	70bb      	strb	r3, [r7, #2]
	if (is_calc_gyro) {
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <_ZN7MPU925011calcOffsetsEbb+0x28>
		setGyroOffsets(0, 0, 0);
 8002ba6:	ed9f 2b64 	vldr	d2, [pc, #400]	@ 8002d38 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002baa:	ed9f 1b63 	vldr	d1, [pc, #396]	@ 8002d38 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002bae:	ed9f 0b62 	vldr	d0, [pc, #392]	@ 8002d38 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff ff78 	bl	8002aa8 <_ZN7MPU925014setGyroOffsetsEddd>
	}
	if (is_calc_acc) {
 8002bb8:	78bb      	ldrb	r3, [r7, #2]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <_ZN7MPU925011calcOffsetsEbb+0x40>
		setAccOffsets(0, 0, 0);
 8002bbe:	ed9f 2b5e 	vldr	d2, [pc, #376]	@ 8002d38 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002bc2:	ed9f 1b5d 	vldr	d1, [pc, #372]	@ 8002d38 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002bc6:	ed9f 0b5c 	vldr	d0, [pc, #368]	@ 8002d38 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff ff8b 	bl	8002ae6 <_ZN7MPU925013setAccOffsetsEddd>
	}
	double ag[6] = { 0, 0, 0, 0, 0, 0 };
 8002bd0:	f107 0308 	add.w	r3, r7, #8
 8002bd4:	2230      	movs	r2, #48	@ 0x30
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f005 ffa2 	bl	8008b22 <memset>

	for (int i = 0; i < CALIB_OFFSET_NB_MES; i++) {
 8002bde:	2300      	movs	r3, #0
 8002be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002be2:	e053      	b.n	8002c8c <_ZN7MPU925011calcOffsetsEbb+0xfc>
		this->fetchData();
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f8af 	bl	8002d48 <_ZN7MPU92509fetchDataEv>
		ag[0] += accX;
 8002bea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002bf4:	f7fd fb6a 	bl	80002cc <__adddf3>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ag[1] += accY;
 8002c00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 8002c0a:	f7fd fb5f 	bl	80002cc <__adddf3>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ag[2] += (accZ - 1.0);
 8002c16:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	4b46      	ldr	r3, [pc, #280]	@ (8002d40 <_ZN7MPU925011calcOffsetsEbb+0x1b0>)
 8002c26:	f7fd fb4f 	bl	80002c8 <__aeabi_dsub>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	f7fd fb4b 	bl	80002cc <__adddf3>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ag[3] += gyroX;
 8002c3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 8002c48:	f7fd fb40 	bl	80002cc <__adddf3>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ag[4] += gyroY;
 8002c54:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 8002c5e:	f7fd fb35 	bl	80002cc <__adddf3>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		ag[5] += gyroZ;
 8002c6a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8002c74:	f7fd fb2a 	bl	80002cc <__adddf3>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		HAL_Delay(1);
 8002c80:	2001      	movs	r0, #1
 8002c82:	f000 ff5b 	bl	8003b3c <HAL_Delay>
	for (int i = 0; i < CALIB_OFFSET_NB_MES; i++) {
 8002c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c88:	3301      	adds	r3, #1
 8002c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c8e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c92:	dba7      	blt.n	8002be4 <_ZN7MPU925011calcOffsetsEbb+0x54>
	}

	if (is_calc_acc) {
 8002c94:	78bb      	ldrb	r3, [r7, #2]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d023      	beq.n	8002ce2 <_ZN7MPU925011calcOffsetsEbb+0x152>
		accXoffset = ag[0] / CALIB_OFFSET_NB_MES;
 8002c9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	4b28      	ldr	r3, [pc, #160]	@ (8002d44 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002ca4:	f7fd fdf2 	bl	800088c <__aeabi_ddiv>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		accYoffset = ag[1] / CALIB_OFFSET_NB_MES;
 8002cb2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	4b22      	ldr	r3, [pc, #136]	@ (8002d44 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002cbc:	f7fd fde6 	bl	800088c <__aeabi_ddiv>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		accZoffset = ag[2] / CALIB_OFFSET_NB_MES;
 8002cca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d44 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002cd4:	f7fd fdda 	bl	800088c <__aeabi_ddiv>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	}

	if (is_calc_gyro) {
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <_ZN7MPU925011calcOffsetsEbb+0x1a0>
		gyroXoffset = ag[3] / CALIB_OFFSET_NB_MES;
 8002ce8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	4b14      	ldr	r3, [pc, #80]	@ (8002d44 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002cf2:	f7fd fdcb 	bl	800088c <__aeabi_ddiv>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	e9c1 2308 	strd	r2, r3, [r1, #32]
		gyroYoffset = ag[4] / CALIB_OFFSET_NB_MES;
 8002d00:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	4b0e      	ldr	r3, [pc, #56]	@ (8002d44 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002d0a:	f7fd fdbf 	bl	800088c <__aeabi_ddiv>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		gyroZoffset = ag[5] / CALIB_OFFSET_NB_MES;
 8002d18:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	4b08      	ldr	r3, [pc, #32]	@ (8002d44 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8002d22:	f7fd fdb3 	bl	800088c <__aeabi_ddiv>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	}
}
 8002d30:	bf00      	nop
 8002d32:	3740      	adds	r7, #64	@ 0x40
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8002d40:	3ff00000 	.word	0x3ff00000
 8002d44:	407f4000 	.word	0x407f4000

08002d48 <_ZN7MPU92509fetchDataEv>:

uint8_t MPU9250::fetchData() {
 8002d48:	b5b0      	push	{r4, r5, r7, lr}
 8002d4a:	b090      	sub	sp, #64	@ 0x40
 8002d4c:	af04      	add	r7, sp, #16
 8002d4e:	6078      	str	r0, [r7, #4]
	uint8_t i2cData[14], status;
	status = HAL_I2C_Mem_Read(wire, address, MPU9250_ACCEL_OUT_REGISTER, 1, i2cData, 14, 1000);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6858      	ldr	r0, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7a1b      	ldrb	r3, [r3, #8]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d5e:	9302      	str	r3, [sp, #8]
 8002d60:	230e      	movs	r3, #14
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	f107 0318 	add.w	r3, r7, #24
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	223b      	movs	r2, #59	@ 0x3b
 8002d6e:	f001 fc21 	bl	80045b4 <HAL_I2C_Mem_Read>
 8002d72:	4603      	mov	r3, r0
 8002d74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	int16_t rawData[7];
	int j = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int i = 0; i < 14; i += 2) {
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d80:	e01a      	b.n	8002db8 <_ZN7MPU92509fetchDataEv+0x70>
		rawData[j++] = (int16_t) (i2cData[i] << 8 | i2cData[i + 1]);
 8002d82:	f107 0218 	add.w	r2, r7, #24
 8002d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d88:	4413      	add	r3, r2
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	021b      	lsls	r3, r3, #8
 8002d8e:	b219      	sxth	r1, r3
 8002d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d92:	3301      	adds	r3, #1
 8002d94:	3330      	adds	r3, #48	@ 0x30
 8002d96:	443b      	add	r3, r7
 8002d98:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002d9c:	b21a      	sxth	r2, r3
 8002d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002da0:	1c58      	adds	r0, r3, #1
 8002da2:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002da4:	430a      	orrs	r2, r1
 8002da6:	b212      	sxth	r2, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	3330      	adds	r3, #48	@ 0x30
 8002dac:	443b      	add	r3, r7
 8002dae:	f823 2c28 	strh.w	r2, [r3, #-40]
	for (int i = 0; i < 14; i += 2) {
 8002db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db4:	3302      	adds	r3, #2
 8002db6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dba:	2b0d      	cmp	r3, #13
 8002dbc:	dde1      	ble.n	8002d82 <_ZN7MPU92509fetchDataEv+0x3a>
	}

	accX = ((double) rawData[0]) / acc_lsb_to_g - accXoffset;
 8002dbe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fbce 	bl	8000564 <__aeabi_i2d>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dce:	f7fd fd5d 	bl	800088c <__aeabi_ddiv>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8002de0:	f7fd fa72 	bl	80002c8 <__aeabi_dsub>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	accY = ((double) rawData[1]) / acc_lsb_to_g - accYoffset;
 8002dee:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7fd fbb6 	bl	8000564 <__aeabi_i2d>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002dfe:	f7fd fd45 	bl	800088c <__aeabi_ddiv>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8002e10:	f7fd fa5a 	bl	80002c8 <__aeabi_dsub>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	accZ = (!upsideDownMounting - upsideDownMounting) * ((double) rawData[2]) / acc_lsb_to_g - accZoffset;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	f083 0301 	eor.w	r3, r3, #1
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fb97 	bl	8000564 <__aeabi_i2d>
 8002e36:	4604      	mov	r4, r0
 8002e38:	460d      	mov	r5, r1
 8002e3a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fb90 	bl	8000564 <__aeabi_i2d>
 8002e44:	4602      	mov	r2, r0
 8002e46:	460b      	mov	r3, r1
 8002e48:	4620      	mov	r0, r4
 8002e4a:	4629      	mov	r1, r5
 8002e4c:	f7fd fbf4 	bl	8000638 <__aeabi_dmul>
 8002e50:	4602      	mov	r2, r0
 8002e52:	460b      	mov	r3, r1
 8002e54:	4610      	mov	r0, r2
 8002e56:	4619      	mov	r1, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002e5e:	f7fd fd15 	bl	800088c <__aeabi_ddiv>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	4610      	mov	r0, r2
 8002e68:	4619      	mov	r1, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8002e70:	f7fd fa2a 	bl	80002c8 <__aeabi_dsub>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
	temp = (rawData[3] + TEMP_LSB_OFFSET) / TEMP_LSB_2_DEGREE;
 8002e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb6e 	bl	8000564 <__aeabi_i2d>
 8002e88:	a332      	add	r3, pc, #200	@ (adr r3, 8002f54 <_ZN7MPU92509fetchDataEv+0x20c>)
 8002e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8e:	f7fd fa1d 	bl	80002cc <__adddf3>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f04f 0200 	mov.w	r2, #0
 8002e9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002f50 <_ZN7MPU92509fetchDataEv+0x208>)
 8002ea0:	f7fd fcf4 	bl	800088c <__aeabi_ddiv>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	gyroX = ((double) rawData[4]) / gyro_lsb_to_degsec - gyroXoffset;
 8002eae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fb56 	bl	8000564 <__aeabi_i2d>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002ebe:	f7fd fce5 	bl	800088c <__aeabi_ddiv>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002ed0:	f7fd f9fa 	bl	80002c8 <__aeabi_dsub>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	gyroY = ((double) rawData[5]) / gyro_lsb_to_degsec - gyroYoffset;
 8002ede:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fb3e 	bl	8000564 <__aeabi_i2d>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002eee:	f7fd fccd 	bl	800088c <__aeabi_ddiv>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	4619      	mov	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002f00:	f7fd f9e2 	bl	80002c8 <__aeabi_dsub>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
	gyroZ = ((double) rawData[6]) / gyro_lsb_to_degsec - gyroZoffset;
 8002f0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fb26 	bl	8000564 <__aeabi_i2d>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002f1e:	f7fd fcb5 	bl	800088c <__aeabi_ddiv>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8002f30:	f7fd f9ca 	bl	80002c8 <__aeabi_dsub>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

	return status;
 8002f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3730      	adds	r7, #48	@ 0x30
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bdb0      	pop	{r4, r5, r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	f3af 8000 	nop.w
 8002f50:	40754000 	.word	0x40754000
 8002f54:	00000000 	.word	0x00000000
 8002f58:	40c83e00 	.word	0x40c83e00
 8002f5c:	00000000 	.word	0x00000000

08002f60 <_ZN7MPU92506updateEv>:

uint8_t MPU9250::update() {
 8002f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f64:	ed2d 8b02 	vpush	{d8}
 8002f68:	b08b      	sub	sp, #44	@ 0x2c
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	uint8_t status = this->fetchData();
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff feea 	bl	8002d48 <_ZN7MPU92509fetchDataEv>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	double sgZ = (accZ >= 0) - (accZ < 0);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8002f80:	2301      	movs	r3, #1
 8002f82:	461e      	mov	r6, r3
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	f7fd fdda 	bl	8000b44 <__aeabi_dcmpge>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <_ZN7MPU92506updateEv+0x3a>
 8002f96:	2300      	movs	r3, #0
 8002f98:	461e      	mov	r6, r3
 8002f9a:	b2f3      	uxtb	r3, r6
 8002f9c:	461e      	mov	r6, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	4698      	mov	r8, r3
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	f7fd fdb4 	bl	8000b1c <__aeabi_dcmplt>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <_ZN7MPU92506updateEv+0x5e>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	4698      	mov	r8, r3
 8002fbe:	fa5f f388 	uxtb.w	r3, r8
 8002fc2:	1af3      	subs	r3, r6, r3
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fd facd 	bl	8000564 <__aeabi_i2d>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	e9c7 2306 	strd	r2, r3, [r7, #24]
	angleAccX = atan2(accY, sgZ * sqrt(accZ * accZ + accX * accX)) * RAD_2_DEG;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	ed93 8b18 	vldr	d8, [r3, #96]	@ 0x60
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8002fe4:	f7fd fb28 	bl	8000638 <__aeabi_dmul>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4690      	mov	r8, r2
 8002fee:	4699      	mov	r9, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8002ffc:	f7fd fb1c 	bl	8000638 <__aeabi_dmul>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4640      	mov	r0, r8
 8003006:	4649      	mov	r1, r9
 8003008:	f7fd f960 	bl	80002cc <__adddf3>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	ec43 2b17 	vmov	d7, r2, r3
 8003014:	eeb0 0a47 	vmov.f32	s0, s14
 8003018:	eef0 0a67 	vmov.f32	s1, s15
 800301c:	f004 fa82 	bl	8007524 <sqrt>
 8003020:	ec51 0b10 	vmov	r0, r1, d0
 8003024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003028:	f7fd fb06 	bl	8000638 <__aeabi_dmul>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	ec43 2b17 	vmov	d7, r2, r3
 8003034:	eeb0 1a47 	vmov.f32	s2, s14
 8003038:	eef0 1a67 	vmov.f32	s3, s15
 800303c:	eeb0 0a48 	vmov.f32	s0, s16
 8003040:	eef0 0a68 	vmov.f32	s1, s17
 8003044:	f004 fa6c 	bl	8007520 <atan2>
 8003048:	ec51 0b10 	vmov	r0, r1, d0
 800304c:	a3b1      	add	r3, pc, #708	@ (adr r3, 8003314 <_ZN7MPU92506updateEv+0x3b4>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f7fd faf1 	bl	8000638 <__aeabi_dmul>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
	angleAccY = -atan2(accX, sqrt(accZ * accZ + accY * accY)) * RAD_2_DEG;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	ed93 8b16 	vldr	d8, [r3, #88]	@ 0x58
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 8003072:	f7fd fae1 	bl	8000638 <__aeabi_dmul>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4690      	mov	r8, r2
 800307c:	4699      	mov	r9, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800308a:	f7fd fad5 	bl	8000638 <__aeabi_dmul>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4640      	mov	r0, r8
 8003094:	4649      	mov	r1, r9
 8003096:	f7fd f919 	bl	80002cc <__adddf3>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	ec43 2b17 	vmov	d7, r2, r3
 80030a2:	eeb0 0a47 	vmov.f32	s0, s14
 80030a6:	eef0 0a67 	vmov.f32	s1, s15
 80030aa:	f004 fa3b 	bl	8007524 <sqrt>
 80030ae:	eeb0 7a40 	vmov.f32	s14, s0
 80030b2:	eef0 7a60 	vmov.f32	s15, s1
 80030b6:	eeb0 1a47 	vmov.f32	s2, s14
 80030ba:	eef0 1a67 	vmov.f32	s3, s15
 80030be:	eeb0 0a48 	vmov.f32	s0, s16
 80030c2:	eef0 0a68 	vmov.f32	s1, s17
 80030c6:	f004 fa2b 	bl	8007520 <atan2>
 80030ca:	ec53 2b10 	vmov	r2, r3, d0
 80030ce:	4614      	mov	r4, r2
 80030d0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80030d4:	a38f      	add	r3, pc, #572	@ (adr r3, 8003314 <_ZN7MPU92506updateEv+0x3b4>)
 80030d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030da:	4620      	mov	r0, r4
 80030dc:	4629      	mov	r1, r5
 80030de:	f7fd faab 	bl	8000638 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90

	uint32_t Tnew = HAL_GetTick();
 80030ec:	f000 fd1a 	bl	8003b24 <HAL_GetTick>
 80030f0:	6178      	str	r0, [r7, #20]
	double dt = (Tnew - preInterval) * 1e-3;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fd fa21 	bl	8000544 <__aeabi_ui2d>
 8003102:	a386      	add	r3, pc, #536	@ (adr r3, 800331c <_ZN7MPU92506updateEv+0x3bc>)
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	f7fd fa96 	bl	8000638 <__aeabi_dmul>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	e9c7 2302 	strd	r2, r3, [r7, #8]
	preInterval = Tnew;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

	angleX = wrap(
			filterGyroCoef * (angleAccX + wrap(angleX + gyroX * dt - angleAccX, 180)) + (1.0 - filterGyroCoef) * angleAccX,
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	@ 0xb8
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	e9d3 8922 	ldrd	r8, r9, [r3, #136]	@ 0x88
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	e9d3 ab26 	ldrd	sl, fp, [r3, #152]	@ 0x98
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8003134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003138:	f7fd fa7e 	bl	8000638 <__aeabi_dmul>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4650      	mov	r0, sl
 8003142:	4659      	mov	r1, fp
 8003144:	f7fd f8c2 	bl	80002cc <__adddf3>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8003156:	f7fd f8b7 	bl	80002c8 <__aeabi_dsub>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	ec43 2b17 	vmov	d7, r2, r3
 8003162:	ed9f 1b67 	vldr	d1, [pc, #412]	@ 8003300 <_ZN7MPU92506updateEv+0x3a0>
 8003166:	eeb0 0a47 	vmov.f32	s0, s14
 800316a:	eef0 0a67 	vmov.f32	s1, s15
 800316e:	f7ff faf3 	bl	8002758 <_ZL4wrapdd>
 8003172:	ec53 2b10 	vmov	r2, r3, d0
 8003176:	4640      	mov	r0, r8
 8003178:	4649      	mov	r1, r9
 800317a:	f7fd f8a7 	bl	80002cc <__adddf3>
 800317e:	4602      	mov	r2, r0
 8003180:	460b      	mov	r3, r1
 8003182:	4620      	mov	r0, r4
 8003184:	4629      	mov	r1, r5
 8003186:	f7fd fa57 	bl	8000638 <__aeabi_dmul>
 800318a:	4602      	mov	r2, r0
 800318c:	460b      	mov	r3, r1
 800318e:	4614      	mov	r4, r2
 8003190:	461d      	mov	r5, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8003198:	f04f 0000 	mov.w	r0, #0
 800319c:	495c      	ldr	r1, [pc, #368]	@ (8003310 <_ZN7MPU92506updateEv+0x3b0>)
 800319e:	f7fd f893 	bl	80002c8 <__aeabi_dsub>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 80031b0:	f7fd fa42 	bl	8000638 <__aeabi_dmul>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
	angleX = wrap(
 80031b8:	4620      	mov	r0, r4
 80031ba:	4629      	mov	r1, r5
 80031bc:	f7fd f886 	bl	80002cc <__adddf3>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	ec43 2b17 	vmov	d7, r2, r3
 80031c8:	ed9f 1b4d 	vldr	d1, [pc, #308]	@ 8003300 <_ZN7MPU92506updateEv+0x3a0>
 80031cc:	eeb0 0a47 	vmov.f32	s0, s14
 80031d0:	eef0 0a67 	vmov.f32	s1, s15
 80031d4:	f7ff fac0 	bl	8002758 <_ZL4wrapdd>
 80031d8:	eeb0 7a40 	vmov.f32	s14, s0
 80031dc:	eef0 7a60 	vmov.f32	s15, s1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	ed83 7b26 	vstr	d7, [r3, #152]	@ 0x98
			180);
	angleY = wrap(
			filterGyroCoef * (angleAccY + wrap(angleY + sgZ * gyroY * dt - angleAccY, 90))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	@ 0xb8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	e9d3 8924 	ldrd	r8, r9, [r3, #144]	@ 0x90
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	e9d3 ab28 	ldrd	sl, fp, [r3, #160]	@ 0xa0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	@ 0x78
 80031fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003202:	f7fd fa19 	bl	8000638 <__aeabi_dmul>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4610      	mov	r0, r2
 800320c:	4619      	mov	r1, r3
 800320e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003212:	f7fd fa11 	bl	8000638 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4650      	mov	r0, sl
 800321c:	4659      	mov	r1, fp
 800321e:	f7fd f855 	bl	80002cc <__adddf3>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 8003230:	f7fd f84a 	bl	80002c8 <__aeabi_dsub>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	ec43 2b17 	vmov	d7, r2, r3
 800323c:	ed9f 1b32 	vldr	d1, [pc, #200]	@ 8003308 <_ZN7MPU92506updateEv+0x3a8>
 8003240:	eeb0 0a47 	vmov.f32	s0, s14
 8003244:	eef0 0a67 	vmov.f32	s1, s15
 8003248:	f7ff fa86 	bl	8002758 <_ZL4wrapdd>
 800324c:	ec53 2b10 	vmov	r2, r3, d0
 8003250:	4640      	mov	r0, r8
 8003252:	4649      	mov	r1, r9
 8003254:	f7fd f83a 	bl	80002cc <__adddf3>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4620      	mov	r0, r4
 800325e:	4629      	mov	r1, r5
 8003260:	f7fd f9ea 	bl	8000638 <__aeabi_dmul>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4614      	mov	r4, r2
 800326a:	461d      	mov	r5, r3
					+ (1.0 - filterGyroCoef) * angleAccY, 90);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 8003272:	f04f 0000 	mov.w	r0, #0
 8003276:	4926      	ldr	r1, [pc, #152]	@ (8003310 <_ZN7MPU92506updateEv+0x3b0>)
 8003278:	f7fd f826 	bl	80002c8 <__aeabi_dsub>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800328a:	f7fd f9d5 	bl	8000638 <__aeabi_dmul>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
	angleY = wrap(
 8003292:	4620      	mov	r0, r4
 8003294:	4629      	mov	r1, r5
 8003296:	f7fd f819 	bl	80002cc <__adddf3>
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	ec43 2b17 	vmov	d7, r2, r3
 80032a2:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8003308 <_ZN7MPU92506updateEv+0x3a8>
 80032a6:	eeb0 0a47 	vmov.f32	s0, s14
 80032aa:	eef0 0a67 	vmov.f32	s1, s15
 80032ae:	f7ff fa53 	bl	8002758 <_ZL4wrapdd>
 80032b2:	eeb0 7a40 	vmov.f32	s14, s0
 80032b6:	eef0 7a60 	vmov.f32	s15, s1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	ed83 7b28 	vstr	d7, [r3, #160]	@ 0xa0
	angleZ += gyroZ * dt;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	@ 0xa8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	@ 0x80
 80032cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d0:	f7fd f9b2 	bl	8000638 <__aeabi_dmul>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4620      	mov	r0, r4
 80032da:	4629      	mov	r1, r5
 80032dc:	f7fc fff6 	bl	80002cc <__adddf3>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	e9c1 232a 	strd	r2, r3, [r1, #168]	@ 0xa8

	return status;
 80032ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	372c      	adds	r7, #44	@ 0x2c
 80032f2:	46bd      	mov	sp, r7
 80032f4:	ecbd 8b02 	vpop	{d8}
 80032f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fc:	f3af 8000 	nop.w
 8003300:	00000000 	.word	0x00000000
 8003304:	40668000 	.word	0x40668000
 8003308:	00000000 	.word	0x00000000
 800330c:	40568000 	.word	0x40568000
 8003310:	3ff00000 	.word	0x3ff00000
 8003314:	1e7967cb 	.word	0x1e7967cb
 8003318:	404ca5dc 	.word	0x404ca5dc
 800331c:	d2f1a9fc 	.word	0xd2f1a9fc
 8003320:	3f50624d 	.word	0x3f50624d

08003324 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332a:	2300      	movs	r3, #0
 800332c:	607b      	str	r3, [r7, #4]
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <HAL_MspInit+0x4c>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	4a0f      	ldr	r2, [pc, #60]	@ (8003370 <HAL_MspInit+0x4c>)
 8003334:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003338:	6453      	str	r3, [r2, #68]	@ 0x44
 800333a:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <HAL_MspInit+0x4c>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	2300      	movs	r3, #0
 8003348:	603b      	str	r3, [r7, #0]
 800334a:	4b09      	ldr	r3, [pc, #36]	@ (8003370 <HAL_MspInit+0x4c>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	4a08      	ldr	r2, [pc, #32]	@ (8003370 <HAL_MspInit+0x4c>)
 8003350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003354:	6413      	str	r3, [r2, #64]	@ 0x40
 8003356:	4b06      	ldr	r3, [pc, #24]	@ (8003370 <HAL_MspInit+0x4c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800

08003374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	@ 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a19      	ldr	r2, [pc, #100]	@ (80033f8 <HAL_I2C_MspInit+0x84>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d12c      	bne.n	80033f0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	4b18      	ldr	r3, [pc, #96]	@ (80033fc <HAL_I2C_MspInit+0x88>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800339e:	4a17      	ldr	r2, [pc, #92]	@ (80033fc <HAL_I2C_MspInit+0x88>)
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033a6:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <HAL_I2C_MspInit+0x88>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	613b      	str	r3, [r7, #16]
 80033b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = SDA_Pin|SCL_Pin;
 80033b2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80033b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b8:	2312      	movs	r3, #18
 80033ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c0:	2303      	movs	r3, #3
 80033c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033c4:	2304      	movs	r3, #4
 80033c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	4619      	mov	r1, r3
 80033ce:	480c      	ldr	r0, [pc, #48]	@ (8003400 <HAL_I2C_MspInit+0x8c>)
 80033d0:	f000 fcea 	bl	8003da8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	4b08      	ldr	r3, [pc, #32]	@ (80033fc <HAL_I2C_MspInit+0x88>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	4a07      	ldr	r2, [pc, #28]	@ (80033fc <HAL_I2C_MspInit+0x88>)
 80033de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80033e4:	4b05      	ldr	r3, [pc, #20]	@ (80033fc <HAL_I2C_MspInit+0x88>)
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033f0:	bf00      	nop
 80033f2:	3728      	adds	r7, #40	@ 0x28
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40005400 	.word	0x40005400
 80033fc:	40023800 	.word	0x40023800
 8003400:	40020400 	.word	0x40020400

08003404 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b090      	sub	sp, #64	@ 0x40
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a64      	ldr	r2, [pc, #400]	@ (80035b4 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d12d      	bne.n	8003482 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800342a:	4b63      	ldr	r3, [pc, #396]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	4a62      	ldr	r2, [pc, #392]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6453      	str	r3, [r2, #68]	@ 0x44
 8003436:	4b60      	ldr	r3, [pc, #384]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003440:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
 8003446:	4b5c      	ldr	r3, [pc, #368]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	4a5b      	ldr	r2, [pc, #364]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	6313      	str	r3, [r2, #48]	@ 0x30
 8003452:	4b59      	ldr	r3, [pc, #356]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	627b      	str	r3, [r7, #36]	@ 0x24
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_M1_A_Pin|Encoder_M1_B_Pin;
 800345e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003464:	2302      	movs	r3, #2
 8003466:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346c:	2300      	movs	r3, #0
 800346e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003470:	2301      	movs	r3, #1
 8003472:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003474:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003478:	4619      	mov	r1, r3
 800347a:	4850      	ldr	r0, [pc, #320]	@ (80035bc <HAL_TIM_Encoder_MspInit+0x1b8>)
 800347c:	f000 fc94 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003480:	e094      	b.n	80035ac <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a4e      	ldr	r2, [pc, #312]	@ (80035c0 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d12c      	bne.n	80034e6 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800348c:	2300      	movs	r3, #0
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	4b49      	ldr	r3, [pc, #292]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	4a48      	ldr	r2, [pc, #288]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003496:	f043 0302 	orr.w	r3, r3, #2
 800349a:	6413      	str	r3, [r2, #64]	@ 0x40
 800349c:	4b46      	ldr	r3, [pc, #280]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	623b      	str	r3, [r7, #32]
 80034a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	4b42      	ldr	r3, [pc, #264]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80034ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b0:	4a41      	ldr	r2, [pc, #260]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80034b2:	f043 0301 	orr.w	r3, r3, #1
 80034b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80034b8:	4b3f      	ldr	r3, [pc, #252]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Encoder_M2_A_Pin|Encoder_M2_B_Pin;
 80034c4:	23c0      	movs	r3, #192	@ 0xc0
 80034c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034d4:	2302      	movs	r3, #2
 80034d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034dc:	4619      	mov	r1, r3
 80034de:	4837      	ldr	r0, [pc, #220]	@ (80035bc <HAL_TIM_Encoder_MspInit+0x1b8>)
 80034e0:	f000 fc62 	bl	8003da8 <HAL_GPIO_Init>
}
 80034e4:	e062      	b.n	80035ac <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a36      	ldr	r2, [pc, #216]	@ (80035c4 <HAL_TIM_Encoder_MspInit+0x1c0>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d12c      	bne.n	800354a <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	4b30      	ldr	r3, [pc, #192]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	4a2f      	ldr	r2, [pc, #188]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003500:	4b2d      	ldr	r3, [pc, #180]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	4b29      	ldr	r3, [pc, #164]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003514:	4a28      	ldr	r2, [pc, #160]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003516:	f043 0301 	orr.w	r3, r3, #1
 800351a:	6313      	str	r3, [r2, #48]	@ 0x30
 800351c:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_M3_A_Pin|Encoder_M3_B_Pin;
 8003528:	2303      	movs	r3, #3
 800352a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352c:	2302      	movs	r3, #2
 800352e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003534:	2300      	movs	r3, #0
 8003536:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003538:	2302      	movs	r3, #2
 800353a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003540:	4619      	mov	r1, r3
 8003542:	481e      	ldr	r0, [pc, #120]	@ (80035bc <HAL_TIM_Encoder_MspInit+0x1b8>)
 8003544:	f000 fc30 	bl	8003da8 <HAL_GPIO_Init>
}
 8003548:	e030      	b.n	80035ac <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a1e      	ldr	r2, [pc, #120]	@ (80035c8 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d12b      	bne.n	80035ac <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003554:	2300      	movs	r3, #0
 8003556:	613b      	str	r3, [r7, #16]
 8003558:	4b17      	ldr	r3, [pc, #92]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800355a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355c:	4a16      	ldr	r2, [pc, #88]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800355e:	f043 0302 	orr.w	r3, r3, #2
 8003562:	6453      	str	r3, [r2, #68]	@ 0x44
 8003564:	4b14      	ldr	r3, [pc, #80]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	4b10      	ldr	r3, [pc, #64]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003578:	4a0f      	ldr	r2, [pc, #60]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800357a:	f043 0304 	orr.w	r3, r3, #4
 800357e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003580:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8003582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_M4_A_Pin|Encoder_M4_B_Pin;
 800358c:	23c0      	movs	r3, #192	@ 0xc0
 800358e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003590:	2302      	movs	r3, #2
 8003592:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003594:	2300      	movs	r3, #0
 8003596:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003598:	2300      	movs	r3, #0
 800359a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800359c:	2303      	movs	r3, #3
 800359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80035a4:	4619      	mov	r1, r3
 80035a6:	4809      	ldr	r0, [pc, #36]	@ (80035cc <HAL_TIM_Encoder_MspInit+0x1c8>)
 80035a8:	f000 fbfe 	bl	8003da8 <HAL_GPIO_Init>
}
 80035ac:	bf00      	nop
 80035ae:	3740      	adds	r7, #64	@ 0x40
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020000 	.word	0x40020000
 80035c0:	40000400 	.word	0x40000400
 80035c4:	40000c00 	.word	0x40000c00
 80035c8:	40010400 	.word	0x40010400
 80035cc:	40020800 	.word	0x40020800

080035d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e0:	d10d      	bne.n	80035fe <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	4b09      	ldr	r3, [pc, #36]	@ (800360c <HAL_TIM_PWM_MspInit+0x3c>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	4a08      	ldr	r2, [pc, #32]	@ (800360c <HAL_TIM_PWM_MspInit+0x3c>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80035f2:	4b06      	ldr	r3, [pc, #24]	@ (800360c <HAL_TIM_PWM_MspInit+0x3c>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800

08003610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a0e      	ldr	r2, [pc, #56]	@ (8003658 <HAL_TIM_Base_MspInit+0x48>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d115      	bne.n	800364e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	4b0d      	ldr	r3, [pc, #52]	@ (800365c <HAL_TIM_Base_MspInit+0x4c>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362a:	4a0c      	ldr	r2, [pc, #48]	@ (800365c <HAL_TIM_Base_MspInit+0x4c>)
 800362c:	f043 0304 	orr.w	r3, r3, #4
 8003630:	6413      	str	r3, [r2, #64]	@ 0x40
 8003632:	4b0a      	ldr	r3, [pc, #40]	@ (800365c <HAL_TIM_Base_MspInit+0x4c>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	2100      	movs	r1, #0
 8003642:	201e      	movs	r0, #30
 8003644:	f000 fb79 	bl	8003d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003648:	201e      	movs	r0, #30
 800364a:	f000 fb92 	bl	8003d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40000800 	.word	0x40000800
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08a      	sub	sp, #40	@ 0x28
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003668:	f107 0314 	add.w	r3, r7, #20
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003680:	d13c      	bne.n	80036fc <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	4b1f      	ldr	r3, [pc, #124]	@ (8003704 <HAL_TIM_MspPostInit+0xa4>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	4a1e      	ldr	r2, [pc, #120]	@ (8003704 <HAL_TIM_MspPostInit+0xa4>)
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	6313      	str	r3, [r2, #48]	@ 0x30
 8003692:	4b1c      	ldr	r3, [pc, #112]	@ (8003704 <HAL_TIM_MspPostInit+0xa4>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b18      	ldr	r3, [pc, #96]	@ (8003704 <HAL_TIM_MspPostInit+0xa4>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a6:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <HAL_TIM_MspPostInit+0xa4>)
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80036ae:	4b15      	ldr	r3, [pc, #84]	@ (8003704 <HAL_TIM_MspPostInit+0xa4>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_M3_Pin|PWM_M4_Pin|PWM_M1_Pin;
 80036ba:	232c      	movs	r3, #44	@ 0x2c
 80036bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036be:	2302      	movs	r3, #2
 80036c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036ca:	2301      	movs	r3, #1
 80036cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	4619      	mov	r1, r3
 80036d4:	480c      	ldr	r0, [pc, #48]	@ (8003708 <HAL_TIM_MspPostInit+0xa8>)
 80036d6:	f000 fb67 	bl	8003da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_M2_Pin;
 80036da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e8:	2300      	movs	r3, #0
 80036ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036ec:	2301      	movs	r3, #1
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_M2_GPIO_Port, &GPIO_InitStruct);
 80036f0:	f107 0314 	add.w	r3, r7, #20
 80036f4:	4619      	mov	r1, r3
 80036f6:	4805      	ldr	r0, [pc, #20]	@ (800370c <HAL_TIM_MspPostInit+0xac>)
 80036f8:	f000 fb56 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80036fc:	bf00      	nop
 80036fe:	3728      	adds	r7, #40	@ 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40023800 	.word	0x40023800
 8003708:	40020000 	.word	0x40020000
 800370c:	40020400 	.word	0x40020400

08003710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	@ 0x28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 0314 	add.w	r3, r7, #20
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
 8003726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a28      	ldr	r2, [pc, #160]	@ (80037d0 <HAL_UART_MspInit+0xc0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d14a      	bne.n	80037c8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	4b27      	ldr	r3, [pc, #156]	@ (80037d4 <HAL_UART_MspInit+0xc4>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373a:	4a26      	ldr	r2, [pc, #152]	@ (80037d4 <HAL_UART_MspInit+0xc4>)
 800373c:	f043 0310 	orr.w	r3, r3, #16
 8003740:	6453      	str	r3, [r2, #68]	@ 0x44
 8003742:	4b24      	ldr	r3, [pc, #144]	@ (80037d4 <HAL_UART_MspInit+0xc4>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f003 0310 	and.w	r3, r3, #16
 800374a:	613b      	str	r3, [r7, #16]
 800374c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]
 8003752:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <HAL_UART_MspInit+0xc4>)
 8003754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003756:	4a1f      	ldr	r2, [pc, #124]	@ (80037d4 <HAL_UART_MspInit+0xc4>)
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6313      	str	r3, [r2, #48]	@ 0x30
 800375e:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <HAL_UART_MspInit+0xc4>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b19      	ldr	r3, [pc, #100]	@ (80037d4 <HAL_UART_MspInit+0xc4>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	4a18      	ldr	r2, [pc, #96]	@ (80037d4 <HAL_UART_MspInit+0xc4>)
 8003774:	f043 0302 	orr.w	r3, r3, #2
 8003778:	6313      	str	r3, [r2, #48]	@ 0x30
 800377a:	4b16      	ldr	r3, [pc, #88]	@ (80037d4 <HAL_UART_MspInit+0xc4>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800378a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378c:	2302      	movs	r3, #2
 800378e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003794:	2303      	movs	r3, #3
 8003796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003798:	2307      	movs	r3, #7
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4619      	mov	r1, r3
 80037a2:	480d      	ldr	r0, [pc, #52]	@ (80037d8 <HAL_UART_MspInit+0xc8>)
 80037a4:	f000 fb00 	bl	8003da8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037a8:	2340      	movs	r3, #64	@ 0x40
 80037aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b0:	2300      	movs	r3, #0
 80037b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b4:	2303      	movs	r3, #3
 80037b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80037b8:	2307      	movs	r3, #7
 80037ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	4619      	mov	r1, r3
 80037c2:	4806      	ldr	r0, [pc, #24]	@ (80037dc <HAL_UART_MspInit+0xcc>)
 80037c4:	f000 faf0 	bl	8003da8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80037c8:	bf00      	nop
 80037ca:	3728      	adds	r7, #40	@ 0x28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40011000 	.word	0x40011000
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40020000 	.word	0x40020000
 80037dc:	40020400 	.word	0x40020400

080037e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037e4:	bf00      	nop
 80037e6:	e7fd      	b.n	80037e4 <NMI_Handler+0x4>

080037e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <HardFault_Handler+0x4>

080037f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037f4:	bf00      	nop
 80037f6:	e7fd      	b.n	80037f4 <MemManage_Handler+0x4>

080037f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037fc:	bf00      	nop
 80037fe:	e7fd      	b.n	80037fc <BusFault_Handler+0x4>

08003800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003804:	bf00      	nop
 8003806:	e7fd      	b.n	8003804 <UsageFault_Handler+0x4>

08003808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003836:	f000 f961 	bl	8003afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003844:	4802      	ldr	r0, [pc, #8]	@ (8003850 <TIM4_IRQHandler+0x10>)
 8003846:	f002 fd59 	bl	80062fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20000330 	.word	0x20000330

08003854 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return 1;
 8003858:	2301      	movs	r3, #1
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <_kill>:

int _kill(int pid, int sig)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800386e:	f005 f9ab 	bl	8008bc8 <__errno>
 8003872:	4603      	mov	r3, r0
 8003874:	2216      	movs	r2, #22
 8003876:	601a      	str	r2, [r3, #0]
  return -1;
 8003878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <_exit>:

void _exit (int status)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b082      	sub	sp, #8
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f7ff ffe7 	bl	8003864 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003896:	bf00      	nop
 8003898:	e7fd      	b.n	8003896 <_exit+0x12>

0800389a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b086      	sub	sp, #24
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e00a      	b.n	80038c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038ac:	f3af 8000 	nop.w
 80038b0:	4601      	mov	r1, r0
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	60ba      	str	r2, [r7, #8]
 80038b8:	b2ca      	uxtb	r2, r1
 80038ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	3301      	adds	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	dbf0      	blt.n	80038ac <_read+0x12>
  }

  return len;
 80038ca:	687b      	ldr	r3, [r7, #4]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3718      	adds	r7, #24
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e009      	b.n	80038fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	60ba      	str	r2, [r7, #8]
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3301      	adds	r3, #1
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	dbf1      	blt.n	80038e6 <_write+0x12>
  }
  return len;
 8003902:	687b      	ldr	r3, [r7, #4]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <_close>:

int _close(int file)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003934:	605a      	str	r2, [r3, #4]
  return 0;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <_isatty>:

int _isatty(int file)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800394c:	2301      	movs	r3, #1
}
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b086      	sub	sp, #24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800397c:	4a14      	ldr	r2, [pc, #80]	@ (80039d0 <_sbrk+0x5c>)
 800397e:	4b15      	ldr	r3, [pc, #84]	@ (80039d4 <_sbrk+0x60>)
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003988:	4b13      	ldr	r3, [pc, #76]	@ (80039d8 <_sbrk+0x64>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d102      	bne.n	8003996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003990:	4b11      	ldr	r3, [pc, #68]	@ (80039d8 <_sbrk+0x64>)
 8003992:	4a12      	ldr	r2, [pc, #72]	@ (80039dc <_sbrk+0x68>)
 8003994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003996:	4b10      	ldr	r3, [pc, #64]	@ (80039d8 <_sbrk+0x64>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d207      	bcs.n	80039b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039a4:	f005 f910 	bl	8008bc8 <__errno>
 80039a8:	4603      	mov	r3, r0
 80039aa:	220c      	movs	r2, #12
 80039ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039ae:	f04f 33ff 	mov.w	r3, #4294967295
 80039b2:	e009      	b.n	80039c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039b4:	4b08      	ldr	r3, [pc, #32]	@ (80039d8 <_sbrk+0x64>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039ba:	4b07      	ldr	r3, [pc, #28]	@ (80039d8 <_sbrk+0x64>)
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4413      	add	r3, r2
 80039c2:	4a05      	ldr	r2, [pc, #20]	@ (80039d8 <_sbrk+0x64>)
 80039c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039c6:	68fb      	ldr	r3, [r7, #12]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20020000 	.word	0x20020000
 80039d4:	00000400 	.word	0x00000400
 80039d8:	20000690 	.word	0x20000690
 80039dc:	200007e8 	.word	0x200007e8

080039e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80039e4:	4b06      	ldr	r3, [pc, #24]	@ (8003a00 <SystemInit+0x20>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ea:	4a05      	ldr	r2, [pc, #20]	@ (8003a00 <SystemInit+0x20>)
 80039ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039f4:	bf00      	nop
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003a08:	f7ff ffea 	bl	80039e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a0c:	480c      	ldr	r0, [pc, #48]	@ (8003a40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a0e:	490d      	ldr	r1, [pc, #52]	@ (8003a44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a10:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a14:	e002      	b.n	8003a1c <LoopCopyDataInit>

08003a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a1a:	3304      	adds	r3, #4

08003a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a20:	d3f9      	bcc.n	8003a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a22:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a24:	4c0a      	ldr	r4, [pc, #40]	@ (8003a50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a28:	e001      	b.n	8003a2e <LoopFillZerobss>

08003a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a2c:	3204      	adds	r2, #4

08003a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a30:	d3fb      	bcc.n	8003a2a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a32:	f005 f8cf 	bl	8008bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a36:	f7fd faf7 	bl	8001028 <main>
  bx  lr    
 8003a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a44:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003a48:	0800c7b4 	.word	0x0800c7b4
  ldr r2, =_sbss
 8003a4c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003a50:	200007e4 	.word	0x200007e4

08003a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a54:	e7fe      	b.n	8003a54 <ADC_IRQHandler>
	...

08003a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a98 <HAL_Init+0x40>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a0d      	ldr	r2, [pc, #52]	@ (8003a98 <HAL_Init+0x40>)
 8003a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a68:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <HAL_Init+0x40>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a98 <HAL_Init+0x40>)
 8003a6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <HAL_Init+0x40>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a07      	ldr	r2, [pc, #28]	@ (8003a98 <HAL_Init+0x40>)
 8003a7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a80:	2003      	movs	r0, #3
 8003a82:	f000 f94f 	bl	8003d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a86:	200f      	movs	r0, #15
 8003a88:	f000 f808 	bl	8003a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a8c:	f7ff fc4a 	bl	8003324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023c00 	.word	0x40023c00

08003a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003aa4:	4b12      	ldr	r3, [pc, #72]	@ (8003af0 <HAL_InitTick+0x54>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	4b12      	ldr	r3, [pc, #72]	@ (8003af4 <HAL_InitTick+0x58>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	4619      	mov	r1, r3
 8003aae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 f967 	bl	8003d8e <HAL_SYSTICK_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e00e      	b.n	8003ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b0f      	cmp	r3, #15
 8003ace:	d80a      	bhi.n	8003ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	f000 f92f 	bl	8003d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003adc:	4a06      	ldr	r2, [pc, #24]	@ (8003af8 <HAL_InitTick+0x5c>)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	e000      	b.n	8003ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3708      	adds	r7, #8
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	20000000 	.word	0x20000000
 8003af4:	20000008 	.word	0x20000008
 8003af8:	20000004 	.word	0x20000004

08003afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b00:	4b06      	ldr	r3, [pc, #24]	@ (8003b1c <HAL_IncTick+0x20>)
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b06      	ldr	r3, [pc, #24]	@ (8003b20 <HAL_IncTick+0x24>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4a04      	ldr	r2, [pc, #16]	@ (8003b20 <HAL_IncTick+0x24>)
 8003b0e:	6013      	str	r3, [r2, #0]
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	20000008 	.word	0x20000008
 8003b20:	20000694 	.word	0x20000694

08003b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return uwTick;
 8003b28:	4b03      	ldr	r3, [pc, #12]	@ (8003b38 <HAL_GetTick+0x14>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000694 	.word	0x20000694

08003b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b44:	f7ff ffee 	bl	8003b24 <HAL_GetTick>
 8003b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d005      	beq.n	8003b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b56:	4b0a      	ldr	r3, [pc, #40]	@ (8003b80 <HAL_Delay+0x44>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4413      	add	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b62:	bf00      	nop
 8003b64:	f7ff ffde 	bl	8003b24 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d8f7      	bhi.n	8003b64 <HAL_Delay+0x28>
  {
  }
}
 8003b74:	bf00      	nop
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000008 	.word	0x20000008

08003b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b94:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb6:	4a04      	ldr	r2, [pc, #16]	@ (8003bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	60d3      	str	r3, [r2, #12]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	e000ed00 	.word	0xe000ed00

08003bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bd0:	4b04      	ldr	r3, [pc, #16]	@ (8003be4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	0a1b      	lsrs	r3, r3, #8
 8003bd6:	f003 0307 	and.w	r3, r3, #7
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	db0b      	blt.n	8003c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	f003 021f 	and.w	r2, r3, #31
 8003c00:	4907      	ldr	r1, [pc, #28]	@ (8003c20 <__NVIC_EnableIRQ+0x38>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	095b      	lsrs	r3, r3, #5
 8003c08:	2001      	movs	r0, #1
 8003c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c12:	bf00      	nop
 8003c14:	370c      	adds	r7, #12
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	e000e100 	.word	0xe000e100

08003c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	6039      	str	r1, [r7, #0]
 8003c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	db0a      	blt.n	8003c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	490c      	ldr	r1, [pc, #48]	@ (8003c70 <__NVIC_SetPriority+0x4c>)
 8003c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c42:	0112      	lsls	r2, r2, #4
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	440b      	add	r3, r1
 8003c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c4c:	e00a      	b.n	8003c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	4908      	ldr	r1, [pc, #32]	@ (8003c74 <__NVIC_SetPriority+0x50>)
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	3b04      	subs	r3, #4
 8003c5c:	0112      	lsls	r2, r2, #4
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	440b      	add	r3, r1
 8003c62:	761a      	strb	r2, [r3, #24]
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	e000e100 	.word	0xe000e100
 8003c74:	e000ed00 	.word	0xe000ed00

08003c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	@ 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f1c3 0307 	rsb	r3, r3, #7
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	bf28      	it	cs
 8003c96:	2304      	movcs	r3, #4
 8003c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	2b06      	cmp	r3, #6
 8003ca0:	d902      	bls.n	8003ca8 <NVIC_EncodePriority+0x30>
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	3b03      	subs	r3, #3
 8003ca6:	e000      	b.n	8003caa <NVIC_EncodePriority+0x32>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb6:	43da      	mvns	r2, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	401a      	ands	r2, r3
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cca:	43d9      	mvns	r1, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd0:	4313      	orrs	r3, r2
         );
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3724      	adds	r7, #36	@ 0x24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cf0:	d301      	bcc.n	8003cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00f      	b.n	8003d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d20 <SysTick_Config+0x40>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cfe:	210f      	movs	r1, #15
 8003d00:	f04f 30ff 	mov.w	r0, #4294967295
 8003d04:	f7ff ff8e 	bl	8003c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d08:	4b05      	ldr	r3, [pc, #20]	@ (8003d20 <SysTick_Config+0x40>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d0e:	4b04      	ldr	r3, [pc, #16]	@ (8003d20 <SysTick_Config+0x40>)
 8003d10:	2207      	movs	r2, #7
 8003d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3708      	adds	r7, #8
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	e000e010 	.word	0xe000e010

08003d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff ff29 	bl	8003b84 <__NVIC_SetPriorityGrouping>
}
 8003d32:	bf00      	nop
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	607a      	str	r2, [r7, #4]
 8003d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d4c:	f7ff ff3e 	bl	8003bcc <__NVIC_GetPriorityGrouping>
 8003d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	6978      	ldr	r0, [r7, #20]
 8003d58:	f7ff ff8e 	bl	8003c78 <NVIC_EncodePriority>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff5d 	bl	8003c24 <__NVIC_SetPriority>
}
 8003d6a:	bf00      	nop
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	4603      	mov	r3, r0
 8003d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff31 	bl	8003be8 <__NVIC_EnableIRQ>
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7ff ffa2 	bl	8003ce0 <SysTick_Config>
 8003d9c:	4603      	mov	r3, r0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b089      	sub	sp, #36	@ 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003db2:	2300      	movs	r3, #0
 8003db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	e165      	b.n	8004090 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	f040 8154 	bne.w	800408a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d005      	beq.n	8003dfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d130      	bne.n	8003e5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	2203      	movs	r2, #3
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43db      	mvns	r3, r3
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e30:	2201      	movs	r2, #1
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	091b      	lsrs	r3, r3, #4
 8003e46:	f003 0201 	and.w	r2, r3, #1
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d017      	beq.n	8003e98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	69ba      	ldr	r2, [r7, #24]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d123      	bne.n	8003eec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	08da      	lsrs	r2, r3, #3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3208      	adds	r2, #8
 8003eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	220f      	movs	r2, #15
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	f003 0307 	and.w	r3, r3, #7
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	08da      	lsrs	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3208      	adds	r2, #8
 8003ee6:	69b9      	ldr	r1, [r7, #24]
 8003ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f003 0203 	and.w	r2, r3, #3
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	69ba      	ldr	r2, [r7, #24]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80ae 	beq.w	800408a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	4b5d      	ldr	r3, [pc, #372]	@ (80040a8 <HAL_GPIO_Init+0x300>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	4a5c      	ldr	r2, [pc, #368]	@ (80040a8 <HAL_GPIO_Init+0x300>)
 8003f38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f3e:	4b5a      	ldr	r3, [pc, #360]	@ (80040a8 <HAL_GPIO_Init+0x300>)
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f4a:	4a58      	ldr	r2, [pc, #352]	@ (80040ac <HAL_GPIO_Init+0x304>)
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	089b      	lsrs	r3, r3, #2
 8003f50:	3302      	adds	r3, #2
 8003f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f003 0303 	and.w	r3, r3, #3
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4f      	ldr	r2, [pc, #316]	@ (80040b0 <HAL_GPIO_Init+0x308>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d025      	beq.n	8003fc2 <HAL_GPIO_Init+0x21a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a4e      	ldr	r2, [pc, #312]	@ (80040b4 <HAL_GPIO_Init+0x30c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01f      	beq.n	8003fbe <HAL_GPIO_Init+0x216>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a4d      	ldr	r2, [pc, #308]	@ (80040b8 <HAL_GPIO_Init+0x310>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d019      	beq.n	8003fba <HAL_GPIO_Init+0x212>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a4c      	ldr	r2, [pc, #304]	@ (80040bc <HAL_GPIO_Init+0x314>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d013      	beq.n	8003fb6 <HAL_GPIO_Init+0x20e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a4b      	ldr	r2, [pc, #300]	@ (80040c0 <HAL_GPIO_Init+0x318>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00d      	beq.n	8003fb2 <HAL_GPIO_Init+0x20a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a4a      	ldr	r2, [pc, #296]	@ (80040c4 <HAL_GPIO_Init+0x31c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <HAL_GPIO_Init+0x206>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a49      	ldr	r2, [pc, #292]	@ (80040c8 <HAL_GPIO_Init+0x320>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d101      	bne.n	8003faa <HAL_GPIO_Init+0x202>
 8003fa6:	2306      	movs	r3, #6
 8003fa8:	e00c      	b.n	8003fc4 <HAL_GPIO_Init+0x21c>
 8003faa:	2307      	movs	r3, #7
 8003fac:	e00a      	b.n	8003fc4 <HAL_GPIO_Init+0x21c>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e008      	b.n	8003fc4 <HAL_GPIO_Init+0x21c>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	e006      	b.n	8003fc4 <HAL_GPIO_Init+0x21c>
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e004      	b.n	8003fc4 <HAL_GPIO_Init+0x21c>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_Init+0x21c>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_GPIO_Init+0x21c>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	f002 0203 	and.w	r2, r2, #3
 8003fca:	0092      	lsls	r2, r2, #2
 8003fcc:	4093      	lsls	r3, r2
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd4:	4935      	ldr	r1, [pc, #212]	@ (80040ac <HAL_GPIO_Init+0x304>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fe2:	4b3a      	ldr	r3, [pc, #232]	@ (80040cc <HAL_GPIO_Init+0x324>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004006:	4a31      	ldr	r2, [pc, #196]	@ (80040cc <HAL_GPIO_Init+0x324>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800400c:	4b2f      	ldr	r3, [pc, #188]	@ (80040cc <HAL_GPIO_Init+0x324>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004030:	4a26      	ldr	r2, [pc, #152]	@ (80040cc <HAL_GPIO_Init+0x324>)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004036:	4b25      	ldr	r3, [pc, #148]	@ (80040cc <HAL_GPIO_Init+0x324>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800405a:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <HAL_GPIO_Init+0x324>)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004060:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <HAL_GPIO_Init+0x324>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004084:	4a11      	ldr	r2, [pc, #68]	@ (80040cc <HAL_GPIO_Init+0x324>)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b0f      	cmp	r3, #15
 8004094:	f67f ae96 	bls.w	8003dc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3724      	adds	r7, #36	@ 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40013800 	.word	0x40013800
 80040b0:	40020000 	.word	0x40020000
 80040b4:	40020400 	.word	0x40020400
 80040b8:	40020800 	.word	0x40020800
 80040bc:	40020c00 	.word	0x40020c00
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40021400 	.word	0x40021400
 80040c8:	40021800 	.word	0x40021800
 80040cc:	40013c00 	.word	0x40013c00

080040d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
 80040dc:	4613      	mov	r3, r2
 80040de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e0:	787b      	ldrb	r3, [r7, #1]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e6:	887a      	ldrh	r2, [r7, #2]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040ec:	e003      	b.n	80040f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	041a      	lsls	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	619a      	str	r2, [r3, #24]
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004114:	887a      	ldrh	r2, [r7, #2]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4013      	ands	r3, r2
 800411a:	041a      	lsls	r2, r3, #16
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	43d9      	mvns	r1, r3
 8004120:	887b      	ldrh	r3, [r7, #2]
 8004122:	400b      	ands	r3, r1
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	619a      	str	r2, [r3, #24]
}
 800412a:	bf00      	nop
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
	...

08004138 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e12b      	b.n	80043a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff f908 	bl	8003374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2224      	movs	r2, #36	@ 0x24
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f022 0201 	bic.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800418a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800419a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800419c:	f001 f932 	bl	8005404 <HAL_RCC_GetPCLK1Freq>
 80041a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	4a81      	ldr	r2, [pc, #516]	@ (80043ac <HAL_I2C_Init+0x274>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d807      	bhi.n	80041bc <HAL_I2C_Init+0x84>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a80      	ldr	r2, [pc, #512]	@ (80043b0 <HAL_I2C_Init+0x278>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	bf94      	ite	ls
 80041b4:	2301      	movls	r3, #1
 80041b6:	2300      	movhi	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	e006      	b.n	80041ca <HAL_I2C_Init+0x92>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a7d      	ldr	r2, [pc, #500]	@ (80043b4 <HAL_I2C_Init+0x27c>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	bf94      	ite	ls
 80041c4:	2301      	movls	r3, #1
 80041c6:	2300      	movhi	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0e7      	b.n	80043a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	4a78      	ldr	r2, [pc, #480]	@ (80043b8 <HAL_I2C_Init+0x280>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	0c9b      	lsrs	r3, r3, #18
 80041dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68ba      	ldr	r2, [r7, #8]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	4a6a      	ldr	r2, [pc, #424]	@ (80043ac <HAL_I2C_Init+0x274>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d802      	bhi.n	800420c <HAL_I2C_Init+0xd4>
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3301      	adds	r3, #1
 800420a:	e009      	b.n	8004220 <HAL_I2C_Init+0xe8>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004212:	fb02 f303 	mul.w	r3, r2, r3
 8004216:	4a69      	ldr	r2, [pc, #420]	@ (80043bc <HAL_I2C_Init+0x284>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	3301      	adds	r3, #1
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004232:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	495c      	ldr	r1, [pc, #368]	@ (80043ac <HAL_I2C_Init+0x274>)
 800423c:	428b      	cmp	r3, r1
 800423e:	d819      	bhi.n	8004274 <HAL_I2C_Init+0x13c>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1e59      	subs	r1, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	005b      	lsls	r3, r3, #1
 800424a:	fbb1 f3f3 	udiv	r3, r1, r3
 800424e:	1c59      	adds	r1, r3, #1
 8004250:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004254:	400b      	ands	r3, r1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <HAL_I2C_Init+0x138>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	1e59      	subs	r1, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	fbb1 f3f3 	udiv	r3, r1, r3
 8004268:	3301      	adds	r3, #1
 800426a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800426e:	e051      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 8004270:	2304      	movs	r3, #4
 8004272:	e04f      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d111      	bne.n	80042a0 <HAL_I2C_Init+0x168>
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	1e58      	subs	r0, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6859      	ldr	r1, [r3, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	440b      	add	r3, r1
 800428a:	fbb0 f3f3 	udiv	r3, r0, r3
 800428e:	3301      	adds	r3, #1
 8004290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004294:	2b00      	cmp	r3, #0
 8004296:	bf0c      	ite	eq
 8004298:	2301      	moveq	r3, #1
 800429a:	2300      	movne	r3, #0
 800429c:	b2db      	uxtb	r3, r3
 800429e:	e012      	b.n	80042c6 <HAL_I2C_Init+0x18e>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	1e58      	subs	r0, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	0099      	lsls	r1, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b6:	3301      	adds	r3, #1
 80042b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042bc:	2b00      	cmp	r3, #0
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_I2C_Init+0x196>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e022      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10e      	bne.n	80042f4 <HAL_I2C_Init+0x1bc>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1e58      	subs	r0, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6859      	ldr	r1, [r3, #4]
 80042de:	460b      	mov	r3, r1
 80042e0:	005b      	lsls	r3, r3, #1
 80042e2:	440b      	add	r3, r1
 80042e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042f2:	e00f      	b.n	8004314 <HAL_I2C_Init+0x1dc>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1e58      	subs	r0, r3, #1
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6859      	ldr	r1, [r3, #4]
 80042fc:	460b      	mov	r3, r1
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	0099      	lsls	r1, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	fbb0 f3f3 	udiv	r3, r0, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	6809      	ldr	r1, [r1, #0]
 8004318:	4313      	orrs	r3, r2
 800431a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004342:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6911      	ldr	r1, [r2, #16]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68d2      	ldr	r2, [r2, #12]
 800434e:	4311      	orrs	r1, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	000186a0 	.word	0x000186a0
 80043b0:	001e847f 	.word	0x001e847f
 80043b4:	003d08ff 	.word	0x003d08ff
 80043b8:	431bde83 	.word	0x431bde83
 80043bc:	10624dd3 	.word	0x10624dd3

080043c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	460b      	mov	r3, r1
 80043d4:	813b      	strh	r3, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043da:	f7ff fba3 	bl	8003b24 <HAL_GetTick>
 80043de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	f040 80d9 	bne.w	80045a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	2319      	movs	r3, #25
 80043f4:	2201      	movs	r2, #1
 80043f6:	496d      	ldr	r1, [pc, #436]	@ (80045ac <HAL_I2C_Mem_Write+0x1ec>)
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fc8b 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004404:	2302      	movs	r3, #2
 8004406:	e0cc      	b.n	80045a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800440e:	2b01      	cmp	r3, #1
 8004410:	d101      	bne.n	8004416 <HAL_I2C_Mem_Write+0x56>
 8004412:	2302      	movs	r3, #2
 8004414:	e0c5      	b.n	80045a2 <HAL_I2C_Mem_Write+0x1e2>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b01      	cmp	r3, #1
 800442a:	d007      	beq.n	800443c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800444a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2221      	movs	r2, #33	@ 0x21
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2240      	movs	r2, #64	@ 0x40
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a3a      	ldr	r2, [r7, #32]
 8004466:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800446c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4a4d      	ldr	r2, [pc, #308]	@ (80045b0 <HAL_I2C_Mem_Write+0x1f0>)
 800447c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800447e:	88f8      	ldrh	r0, [r7, #6]
 8004480:	893a      	ldrh	r2, [r7, #8]
 8004482:	8979      	ldrh	r1, [r7, #10]
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4603      	mov	r3, r0
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fac2 	bl	8004a18 <I2C_RequestMemoryWrite>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d052      	beq.n	8004540 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e081      	b.n	80045a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f000 fd50 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00d      	beq.n	80044ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d107      	bne.n	80044c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e06b      	b.n	80045a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ce:	781a      	ldrb	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044da:	1c5a      	adds	r2, r3, #1
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	3b01      	subs	r3, #1
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b04      	cmp	r3, #4
 8004506:	d11b      	bne.n	8004540 <HAL_I2C_Mem_Write+0x180>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450c:	2b00      	cmp	r3, #0
 800450e:	d017      	beq.n	8004540 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004536:	b29b      	uxth	r3, r3
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1aa      	bne.n	800449e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fd43 	bl	8004fd8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00d      	beq.n	8004574 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	2b04      	cmp	r3, #4
 800455e:	d107      	bne.n	8004570 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e016      	b.n	80045a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	e000      	b.n	80045a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80045a0:	2302      	movs	r3, #2
  }
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	00100002 	.word	0x00100002
 80045b0:	ffff0000 	.word	0xffff0000

080045b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08c      	sub	sp, #48	@ 0x30
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	4608      	mov	r0, r1
 80045be:	4611      	mov	r1, r2
 80045c0:	461a      	mov	r2, r3
 80045c2:	4603      	mov	r3, r0
 80045c4:	817b      	strh	r3, [r7, #10]
 80045c6:	460b      	mov	r3, r1
 80045c8:	813b      	strh	r3, [r7, #8]
 80045ca:	4613      	mov	r3, r2
 80045cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045ce:	f7ff faa9 	bl	8003b24 <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b20      	cmp	r3, #32
 80045de:	f040 8214 	bne.w	8004a0a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	2319      	movs	r3, #25
 80045e8:	2201      	movs	r2, #1
 80045ea:	497b      	ldr	r1, [pc, #492]	@ (80047d8 <HAL_I2C_Mem_Read+0x224>)
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fb91 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80045f8:	2302      	movs	r3, #2
 80045fa:	e207      	b.n	8004a0c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_I2C_Mem_Read+0x56>
 8004606:	2302      	movs	r3, #2
 8004608:	e200      	b.n	8004a0c <HAL_I2C_Mem_Read+0x458>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d007      	beq.n	8004630 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800463e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2222      	movs	r2, #34	@ 0x22
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2240      	movs	r2, #64	@ 0x40
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004660:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4a5b      	ldr	r2, [pc, #364]	@ (80047dc <HAL_I2C_Mem_Read+0x228>)
 8004670:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004672:	88f8      	ldrh	r0, [r7, #6]
 8004674:	893a      	ldrh	r2, [r7, #8]
 8004676:	8979      	ldrh	r1, [r7, #10]
 8004678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467e:	9300      	str	r3, [sp, #0]
 8004680:	4603      	mov	r3, r0
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fa5e 	bl	8004b44 <I2C_RequestMemoryRead>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e1bc      	b.n	8004a0c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d113      	bne.n	80046c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800469a:	2300      	movs	r3, #0
 800469c:	623b      	str	r3, [r7, #32]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	623b      	str	r3, [r7, #32]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	623b      	str	r3, [r7, #32]
 80046ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e190      	b.n	80049e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d11b      	bne.n	8004702 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046da:	2300      	movs	r3, #0
 80046dc:	61fb      	str	r3, [r7, #28]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	61fb      	str	r3, [r7, #28]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	61fb      	str	r3, [r7, #28]
 80046ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	e170      	b.n	80049e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004706:	2b02      	cmp	r3, #2
 8004708:	d11b      	bne.n	8004742 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004718:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472a:	2300      	movs	r3, #0
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	61bb      	str	r3, [r7, #24]
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	e150      	b.n	80049e4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004742:	2300      	movs	r3, #0
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	617b      	str	r3, [r7, #20]
 8004756:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004758:	e144      	b.n	80049e4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800475e:	2b03      	cmp	r3, #3
 8004760:	f200 80f1 	bhi.w	8004946 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	2b01      	cmp	r3, #1
 800476a:	d123      	bne.n	80047b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800476c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800476e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fc79 	bl	8005068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e145      	b.n	8004a0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004792:	1c5a      	adds	r2, r3, #1
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800479c:	3b01      	subs	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047b2:	e117      	b.n	80049e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d14e      	bne.n	800485a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c2:	2200      	movs	r2, #0
 80047c4:	4906      	ldr	r1, [pc, #24]	@ (80047e0 <HAL_I2C_Mem_Read+0x22c>)
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 faa4 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e11a      	b.n	8004a0c <HAL_I2C_Mem_Read+0x458>
 80047d6:	bf00      	nop
 80047d8:	00100002 	.word	0x00100002
 80047dc:	ffff0000 	.word	0xffff0000
 80047e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004810:	3b01      	subs	r3, #1
 8004812:	b29a      	uxth	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	3b01      	subs	r3, #1
 8004820:	b29a      	uxth	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691a      	ldr	r2, [r3, #16]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004830:	b2d2      	uxtb	r2, r2
 8004832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004842:	3b01      	subs	r3, #1
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004858:	e0c4      	b.n	80049e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004860:	2200      	movs	r2, #0
 8004862:	496c      	ldr	r1, [pc, #432]	@ (8004a14 <HAL_I2C_Mem_Read+0x460>)
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fa55 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e0cb      	b.n	8004a0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691a      	ldr	r2, [r3, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048bc:	2200      	movs	r2, #0
 80048be:	4955      	ldr	r1, [pc, #340]	@ (8004a14 <HAL_I2C_Mem_Read+0x460>)
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fa27 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e09d      	b.n	8004a0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	691a      	ldr	r2, [r3, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f2:	1c5a      	adds	r2, r3, #1
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492e:	3b01      	subs	r3, #1
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004944:	e04e      	b.n	80049e4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004948:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fb8c 	bl	8005068 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e058      	b.n	8004a0c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004964:	b2d2      	uxtb	r2, r2
 8004966:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	1c5a      	adds	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b04      	cmp	r3, #4
 8004998:	d124      	bne.n	80049e4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d107      	bne.n	80049b2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f47f aeb6 	bne.w	800475a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a06:	2300      	movs	r3, #0
 8004a08:	e000      	b.n	8004a0c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004a0a:	2302      	movs	r3, #2
  }
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3728      	adds	r7, #40	@ 0x28
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	00010004 	.word	0x00010004

08004a18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	461a      	mov	r2, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	817b      	strh	r3, [r7, #10]
 8004a2a:	460b      	mov	r3, r1
 8004a2c:	813b      	strh	r3, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f960 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00d      	beq.n	8004a76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a68:	d103      	bne.n	8004a72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e05f      	b.n	8004b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a76:	897b      	ldrh	r3, [r7, #10]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	6a3a      	ldr	r2, [r7, #32]
 8004a8a:	492d      	ldr	r1, [pc, #180]	@ (8004b40 <I2C_RequestMemoryWrite+0x128>)
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 f9bb 	bl	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e04c      	b.n	8004b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	617b      	str	r3, [r7, #20]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ab4:	6a39      	ldr	r1, [r7, #32]
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fa46 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00d      	beq.n	8004ade <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d107      	bne.n	8004ada <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ad8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e02b      	b.n	8004b36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ade:	88fb      	ldrh	r3, [r7, #6]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d105      	bne.n	8004af0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ae4:	893b      	ldrh	r3, [r7, #8]
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	611a      	str	r2, [r3, #16]
 8004aee:	e021      	b.n	8004b34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004af0:	893b      	ldrh	r3, [r7, #8]
 8004af2:	0a1b      	lsrs	r3, r3, #8
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	b2da      	uxtb	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b00:	6a39      	ldr	r1, [r7, #32]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fa20 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00d      	beq.n	8004b2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d107      	bne.n	8004b26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e005      	b.n	8004b36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b2a:	893b      	ldrh	r3, [r7, #8]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	00010002 	.word	0x00010002

08004b44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b088      	sub	sp, #32
 8004b48:	af02      	add	r7, sp, #8
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	4608      	mov	r0, r1
 8004b4e:	4611      	mov	r1, r2
 8004b50:	461a      	mov	r2, r3
 8004b52:	4603      	mov	r3, r0
 8004b54:	817b      	strh	r3, [r7, #10]
 8004b56:	460b      	mov	r3, r1
 8004b58:	813b      	strh	r3, [r7, #8]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	6a3b      	ldr	r3, [r7, #32]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 f8c2 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00d      	beq.n	8004bb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ba4:	d103      	bne.n	8004bae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004bac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0aa      	b.n	8004d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bb2:	897b      	ldrh	r3, [r7, #10]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004bc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc4:	6a3a      	ldr	r2, [r7, #32]
 8004bc6:	4952      	ldr	r1, [pc, #328]	@ (8004d10 <I2C_RequestMemoryRead+0x1cc>)
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f91d 	bl	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e097      	b.n	8004d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf0:	6a39      	ldr	r1, [r7, #32]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f9a8 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00d      	beq.n	8004c1a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d107      	bne.n	8004c16 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e076      	b.n	8004d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c1a:	88fb      	ldrh	r3, [r7, #6]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d105      	bne.n	8004c2c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c20:	893b      	ldrh	r3, [r7, #8]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	611a      	str	r2, [r3, #16]
 8004c2a:	e021      	b.n	8004c70 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c2c:	893b      	ldrh	r3, [r7, #8]
 8004c2e:	0a1b      	lsrs	r3, r3, #8
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c3c:	6a39      	ldr	r1, [r7, #32]
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f000 f982 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00d      	beq.n	8004c66 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d107      	bne.n	8004c62 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e050      	b.n	8004d08 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c66:	893b      	ldrh	r3, [r7, #8]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c72:	6a39      	ldr	r1, [r7, #32]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f967 	bl	8004f48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d107      	bne.n	8004c98 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c96:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e035      	b.n	8004d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004caa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cae:	9300      	str	r3, [sp, #0]
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f82b 	bl	8004d14 <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00d      	beq.n	8004ce0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd2:	d103      	bne.n	8004cdc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e013      	b.n	8004d08 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ce0:	897b      	ldrh	r3, [r7, #10]
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf2:	6a3a      	ldr	r2, [r7, #32]
 8004cf4:	4906      	ldr	r1, [pc, #24]	@ (8004d10 <I2C_RequestMemoryRead+0x1cc>)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f886 	bl	8004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	00010002 	.word	0x00010002

08004d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	603b      	str	r3, [r7, #0]
 8004d20:	4613      	mov	r3, r2
 8004d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d24:	e048      	b.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d044      	beq.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fe fef9 	bl	8003b24 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d139      	bne.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	0c1b      	lsrs	r3, r3, #16
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d10d      	bne.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	43da      	mvns	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf0c      	ite	eq
 8004d60:	2301      	moveq	r3, #1
 8004d62:	2300      	movne	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	461a      	mov	r2, r3
 8004d68:	e00c      	b.n	8004d84 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	43da      	mvns	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	4013      	ands	r3, r2
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf0c      	ite	eq
 8004d7c:	2301      	moveq	r3, #1
 8004d7e:	2300      	movne	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d116      	bne.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	f043 0220 	orr.w	r2, r3, #32
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e023      	b.n	8004e00 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	0c1b      	lsrs	r3, r3, #16
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d10d      	bne.n	8004dde <I2C_WaitOnFlagUntilTimeout+0xca>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	695b      	ldr	r3, [r3, #20]
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	bf0c      	ite	eq
 8004dd4:	2301      	moveq	r3, #1
 8004dd6:	2300      	movne	r3, #0
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	461a      	mov	r2, r3
 8004ddc:	e00c      	b.n	8004df8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	43da      	mvns	r2, r3
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	4013      	ands	r3, r2
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	461a      	mov	r2, r3
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d093      	beq.n	8004d26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e16:	e071      	b.n	8004efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e26:	d123      	bne.n	8004e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e36:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5c:	f043 0204 	orr.w	r2, r3, #4
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e067      	b.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d041      	beq.n	8004efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e78:	f7fe fe54 	bl	8003b24 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d302      	bcc.n	8004e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d136      	bne.n	8004efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	0c1b      	lsrs	r3, r3, #16
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10c      	bne.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	43da      	mvns	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	e00b      	b.n	8004eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf14      	ite	ne
 8004ec4:	2301      	movne	r3, #1
 8004ec6:	2300      	moveq	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d016      	beq.n	8004efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2220      	movs	r2, #32
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	f043 0220 	orr.w	r2, r3, #32
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e021      	b.n	8004f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	0c1b      	lsrs	r3, r3, #16
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d10c      	bne.n	8004f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	43da      	mvns	r2, r3
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	4013      	ands	r3, r2
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bf14      	ite	ne
 8004f18:	2301      	movne	r3, #1
 8004f1a:	2300      	moveq	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	e00b      	b.n	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	699b      	ldr	r3, [r3, #24]
 8004f26:	43da      	mvns	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bf14      	ite	ne
 8004f32:	2301      	movne	r3, #1
 8004f34:	2300      	moveq	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f47f af6d 	bne.w	8004e18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f54:	e034      	b.n	8004fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f8e3 	bl	8005122 <I2C_IsAcknowledgeFailed>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e034      	b.n	8004fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6c:	d028      	beq.n	8004fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f6e:	f7fe fdd9 	bl	8003b24 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	68ba      	ldr	r2, [r7, #8]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d302      	bcc.n	8004f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d11d      	bne.n	8004fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8e:	2b80      	cmp	r3, #128	@ 0x80
 8004f90:	d016      	beq.n	8004fc0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2220      	movs	r2, #32
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fac:	f043 0220 	orr.w	r2, r3, #32
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e007      	b.n	8004fd0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fca:	2b80      	cmp	r3, #128	@ 0x80
 8004fcc:	d1c3      	bne.n	8004f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3710      	adds	r7, #16
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe4:	e034      	b.n	8005050 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 f89b 	bl	8005122 <I2C_IsAcknowledgeFailed>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e034      	b.n	8005060 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d028      	beq.n	8005050 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fe fd91 	bl	8003b24 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11d      	bne.n	8005050 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b04      	cmp	r3, #4
 8005020:	d016      	beq.n	8005050 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503c:	f043 0220 	orr.w	r2, r3, #32
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e007      	b.n	8005060 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	2b04      	cmp	r3, #4
 800505c:	d1c3      	bne.n	8004fe6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005074:	e049      	b.n	800510a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b10      	cmp	r3, #16
 8005082:	d119      	bne.n	80050b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0210 	mvn.w	r2, #16
 800508c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e030      	b.n	800511a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b8:	f7fe fd34 	bl	8003b24 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d302      	bcc.n	80050ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d11d      	bne.n	800510a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b40      	cmp	r3, #64	@ 0x40
 80050da:	d016      	beq.n	800510a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f6:	f043 0220 	orr.w	r2, r3, #32
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e007      	b.n	800511a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005114:	2b40      	cmp	r3, #64	@ 0x40
 8005116:	d1ae      	bne.n	8005076 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005134:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005138:	d11b      	bne.n	8005172 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005142:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	f043 0204 	orr.w	r2, r3, #4
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800518a:	2300      	movs	r3, #0
 800518c:	603b      	str	r3, [r7, #0]
 800518e:	4b20      	ldr	r3, [pc, #128]	@ (8005210 <HAL_PWREx_EnableOverDrive+0x90>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005192:	4a1f      	ldr	r2, [pc, #124]	@ (8005210 <HAL_PWREx_EnableOverDrive+0x90>)
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005198:	6413      	str	r3, [r2, #64]	@ 0x40
 800519a:	4b1d      	ldr	r3, [pc, #116]	@ (8005210 <HAL_PWREx_EnableOverDrive+0x90>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005214 <HAL_PWREx_EnableOverDrive+0x94>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051ac:	f7fe fcba 	bl	8003b24 <HAL_GetTick>
 80051b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051b2:	e009      	b.n	80051c8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051b4:	f7fe fcb6 	bl	8003b24 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051c2:	d901      	bls.n	80051c8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e01f      	b.n	8005208 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051c8:	4b13      	ldr	r3, [pc, #76]	@ (8005218 <HAL_PWREx_EnableOverDrive+0x98>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d4:	d1ee      	bne.n	80051b4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051d6:	4b11      	ldr	r3, [pc, #68]	@ (800521c <HAL_PWREx_EnableOverDrive+0x9c>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051dc:	f7fe fca2 	bl	8003b24 <HAL_GetTick>
 80051e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051e2:	e009      	b.n	80051f8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051e4:	f7fe fc9e 	bl	8003b24 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051f2:	d901      	bls.n	80051f8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e007      	b.n	8005208 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80051f8:	4b07      	ldr	r3, [pc, #28]	@ (8005218 <HAL_PWREx_EnableOverDrive+0x98>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005204:	d1ee      	bne.n	80051e4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3708      	adds	r7, #8
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40023800 	.word	0x40023800
 8005214:	420e0040 	.word	0x420e0040
 8005218:	40007000 	.word	0x40007000
 800521c:	420e0044 	.word	0x420e0044

08005220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e0cc      	b.n	80053ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005234:	4b68      	ldr	r3, [pc, #416]	@ (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 030f 	and.w	r3, r3, #15
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	429a      	cmp	r2, r3
 8005240:	d90c      	bls.n	800525c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	4b65      	ldr	r3, [pc, #404]	@ (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524a:	4b63      	ldr	r3, [pc, #396]	@ (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	683a      	ldr	r2, [r7, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0b8      	b.n	80053ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d020      	beq.n	80052aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d005      	beq.n	8005280 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005274:	4b59      	ldr	r3, [pc, #356]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4a58      	ldr	r2, [pc, #352]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800527e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800528c:	4b53      	ldr	r3, [pc, #332]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	4a52      	ldr	r2, [pc, #328]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 8005292:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005296:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005298:	4b50      	ldr	r3, [pc, #320]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	494d      	ldr	r1, [pc, #308]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0301 	and.w	r3, r3, #1
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d044      	beq.n	8005340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d107      	bne.n	80052ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052be:	4b47      	ldr	r3, [pc, #284]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d119      	bne.n	80052fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e07f      	b.n	80053ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d003      	beq.n	80052de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d107      	bne.n	80052ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052de:	4b3f      	ldr	r3, [pc, #252]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e06f      	b.n	80053ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ee:	4b3b      	ldr	r3, [pc, #236]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e067      	b.n	80053ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052fe:	4b37      	ldr	r3, [pc, #220]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f023 0203 	bic.w	r2, r3, #3
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	4934      	ldr	r1, [pc, #208]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	4313      	orrs	r3, r2
 800530e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005310:	f7fe fc08 	bl	8003b24 <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005316:	e00a      	b.n	800532e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005318:	f7fe fc04 	bl	8003b24 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e04f      	b.n	80053ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800532e:	4b2b      	ldr	r3, [pc, #172]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 020c 	and.w	r2, r3, #12
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	429a      	cmp	r2, r3
 800533e:	d1eb      	bne.n	8005318 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005340:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d20c      	bcs.n	8005368 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534e:	4b22      	ldr	r3, [pc, #136]	@ (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005356:	4b20      	ldr	r3, [pc, #128]	@ (80053d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e032      	b.n	80053ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d008      	beq.n	8005386 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005374:	4b19      	ldr	r3, [pc, #100]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	4916      	ldr	r1, [pc, #88]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0308 	and.w	r3, r3, #8
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005392:	4b12      	ldr	r3, [pc, #72]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	490e      	ldr	r1, [pc, #56]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80053a6:	f000 f855 	bl	8005454 <HAL_RCC_GetSysClockFreq>
 80053aa:	4602      	mov	r2, r0
 80053ac:	4b0b      	ldr	r3, [pc, #44]	@ (80053dc <HAL_RCC_ClockConfig+0x1bc>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	091b      	lsrs	r3, r3, #4
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	490a      	ldr	r1, [pc, #40]	@ (80053e0 <HAL_RCC_ClockConfig+0x1c0>)
 80053b8:	5ccb      	ldrb	r3, [r1, r3]
 80053ba:	fa22 f303 	lsr.w	r3, r2, r3
 80053be:	4a09      	ldr	r2, [pc, #36]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c4>)
 80053c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053c2:	4b09      	ldr	r3, [pc, #36]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fe fb68 	bl	8003a9c <HAL_InitTick>

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40023c00 	.word	0x40023c00
 80053dc:	40023800 	.word	0x40023800
 80053e0:	0800c2e8 	.word	0x0800c2e8
 80053e4:	20000000 	.word	0x20000000
 80053e8:	20000004 	.word	0x20000004

080053ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f0:	4b03      	ldr	r3, [pc, #12]	@ (8005400 <HAL_RCC_GetHCLKFreq+0x14>)
 80053f2:	681b      	ldr	r3, [r3, #0]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	20000000 	.word	0x20000000

08005404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005408:	f7ff fff0 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 800540c:	4602      	mov	r2, r0
 800540e:	4b05      	ldr	r3, [pc, #20]	@ (8005424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	0a9b      	lsrs	r3, r3, #10
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	4903      	ldr	r1, [pc, #12]	@ (8005428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800541a:	5ccb      	ldrb	r3, [r1, r3]
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40023800 	.word	0x40023800
 8005428:	0800c2f8 	.word	0x0800c2f8

0800542c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005430:	f7ff ffdc 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 8005434:	4602      	mov	r2, r0
 8005436:	4b05      	ldr	r3, [pc, #20]	@ (800544c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	0b5b      	lsrs	r3, r3, #13
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	4903      	ldr	r1, [pc, #12]	@ (8005450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005442:	5ccb      	ldrb	r3, [r1, r3]
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005448:	4618      	mov	r0, r3
 800544a:	bd80      	pop	{r7, pc}
 800544c:	40023800 	.word	0x40023800
 8005450:	0800c2f8 	.word	0x0800c2f8

08005454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b0a6      	sub	sp, #152	@ 0x98
 800545a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800546e:	2300      	movs	r3, #0
 8005470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800547a:	4bc8      	ldr	r3, [pc, #800]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b0c      	cmp	r3, #12
 8005484:	f200 817e 	bhi.w	8005784 <HAL_RCC_GetSysClockFreq+0x330>
 8005488:	a201      	add	r2, pc, #4	@ (adr r2, 8005490 <HAL_RCC_GetSysClockFreq+0x3c>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054c5 	.word	0x080054c5
 8005494:	08005785 	.word	0x08005785
 8005498:	08005785 	.word	0x08005785
 800549c:	08005785 	.word	0x08005785
 80054a0:	080054cd 	.word	0x080054cd
 80054a4:	08005785 	.word	0x08005785
 80054a8:	08005785 	.word	0x08005785
 80054ac:	08005785 	.word	0x08005785
 80054b0:	080054d5 	.word	0x080054d5
 80054b4:	08005785 	.word	0x08005785
 80054b8:	08005785 	.word	0x08005785
 80054bc:	08005785 	.word	0x08005785
 80054c0:	0800563f 	.word	0x0800563f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054c4:	4bb6      	ldr	r3, [pc, #728]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80054c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
       break;
 80054ca:	e15f      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054cc:	4bb5      	ldr	r3, [pc, #724]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x350>)
 80054ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80054d2:	e15b      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054d4:	4bb1      	ldr	r3, [pc, #708]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e0:	4bae      	ldr	r3, [pc, #696]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d031      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ec:	4bab      	ldr	r3, [pc, #684]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	099b      	lsrs	r3, r3, #6
 80054f2:	2200      	movs	r2, #0
 80054f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80054fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8005500:	2300      	movs	r3, #0
 8005502:	667b      	str	r3, [r7, #100]	@ 0x64
 8005504:	4ba7      	ldr	r3, [pc, #668]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x350>)
 8005506:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800550a:	462a      	mov	r2, r5
 800550c:	fb03 f202 	mul.w	r2, r3, r2
 8005510:	2300      	movs	r3, #0
 8005512:	4621      	mov	r1, r4
 8005514:	fb01 f303 	mul.w	r3, r1, r3
 8005518:	4413      	add	r3, r2
 800551a:	4aa2      	ldr	r2, [pc, #648]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800551c:	4621      	mov	r1, r4
 800551e:	fba1 1202 	umull	r1, r2, r1, r2
 8005522:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005524:	460a      	mov	r2, r1
 8005526:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005528:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800552a:	4413      	add	r3, r2
 800552c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800552e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005532:	2200      	movs	r2, #0
 8005534:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005536:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8005538:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800553c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8005540:	f7fb fbc2 	bl	8000cc8 <__aeabi_uldivmod>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4613      	mov	r3, r2
 800554a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800554e:	e064      	b.n	800561a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005550:	4b92      	ldr	r3, [pc, #584]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	099b      	lsrs	r3, r3, #6
 8005556:	2200      	movs	r2, #0
 8005558:	653b      	str	r3, [r7, #80]	@ 0x50
 800555a:	657a      	str	r2, [r7, #84]	@ 0x54
 800555c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800555e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005562:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005564:	2300      	movs	r3, #0
 8005566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005568:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800556c:	4622      	mov	r2, r4
 800556e:	462b      	mov	r3, r5
 8005570:	f04f 0000 	mov.w	r0, #0
 8005574:	f04f 0100 	mov.w	r1, #0
 8005578:	0159      	lsls	r1, r3, #5
 800557a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800557e:	0150      	lsls	r0, r2, #5
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4621      	mov	r1, r4
 8005586:	1a51      	subs	r1, r2, r1
 8005588:	6139      	str	r1, [r7, #16]
 800558a:	4629      	mov	r1, r5
 800558c:	eb63 0301 	sbc.w	r3, r3, r1
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	f04f 0200 	mov.w	r2, #0
 8005596:	f04f 0300 	mov.w	r3, #0
 800559a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800559e:	4659      	mov	r1, fp
 80055a0:	018b      	lsls	r3, r1, #6
 80055a2:	4651      	mov	r1, sl
 80055a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055a8:	4651      	mov	r1, sl
 80055aa:	018a      	lsls	r2, r1, #6
 80055ac:	4651      	mov	r1, sl
 80055ae:	ebb2 0801 	subs.w	r8, r2, r1
 80055b2:	4659      	mov	r1, fp
 80055b4:	eb63 0901 	sbc.w	r9, r3, r1
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055cc:	4690      	mov	r8, r2
 80055ce:	4699      	mov	r9, r3
 80055d0:	4623      	mov	r3, r4
 80055d2:	eb18 0303 	adds.w	r3, r8, r3
 80055d6:	60bb      	str	r3, [r7, #8]
 80055d8:	462b      	mov	r3, r5
 80055da:	eb49 0303 	adc.w	r3, r9, r3
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80055ec:	4629      	mov	r1, r5
 80055ee:	028b      	lsls	r3, r1, #10
 80055f0:	4621      	mov	r1, r4
 80055f2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055f6:	4621      	mov	r1, r4
 80055f8:	028a      	lsls	r2, r1, #10
 80055fa:	4610      	mov	r0, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005602:	2200      	movs	r2, #0
 8005604:	643b      	str	r3, [r7, #64]	@ 0x40
 8005606:	647a      	str	r2, [r7, #68]	@ 0x44
 8005608:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800560c:	f7fb fb5c 	bl	8000cc8 <__aeabi_uldivmod>
 8005610:	4602      	mov	r2, r0
 8005612:	460b      	mov	r3, r1
 8005614:	4613      	mov	r3, r2
 8005616:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800561a:	4b60      	ldr	r3, [pc, #384]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	0c1b      	lsrs	r3, r3, #16
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	3301      	adds	r3, #1
 8005626:	005b      	lsls	r3, r3, #1
 8005628:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco/pllp;
 800562c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005630:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005634:	fbb2 f3f3 	udiv	r3, r2, r3
 8005638:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800563c:	e0a6      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800563e:	4b57      	ldr	r3, [pc, #348]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005646:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800564a:	4b54      	ldr	r3, [pc, #336]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02a      	beq.n	80056ac <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005656:	4b51      	ldr	r3, [pc, #324]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	099b      	lsrs	r3, r3, #6
 800565c:	2200      	movs	r2, #0
 800565e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005660:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005664:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005668:	2100      	movs	r1, #0
 800566a:	4b4e      	ldr	r3, [pc, #312]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800566c:	fb03 f201 	mul.w	r2, r3, r1
 8005670:	2300      	movs	r3, #0
 8005672:	fb00 f303 	mul.w	r3, r0, r3
 8005676:	4413      	add	r3, r2
 8005678:	4a4a      	ldr	r2, [pc, #296]	@ (80057a4 <HAL_RCC_GetSysClockFreq+0x350>)
 800567a:	fba0 1202 	umull	r1, r2, r0, r2
 800567e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005680:	460a      	mov	r2, r1
 8005682:	673a      	str	r2, [r7, #112]	@ 0x70
 8005684:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005686:	4413      	add	r3, r2
 8005688:	677b      	str	r3, [r7, #116]	@ 0x74
 800568a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800568e:	2200      	movs	r2, #0
 8005690:	633b      	str	r3, [r7, #48]	@ 0x30
 8005692:	637a      	str	r2, [r7, #52]	@ 0x34
 8005694:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8005698:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800569c:	f7fb fb14 	bl	8000cc8 <__aeabi_uldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4613      	mov	r3, r2
 80056a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056aa:	e05b      	b.n	8005764 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056ac:	4b3b      	ldr	r3, [pc, #236]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	2200      	movs	r2, #0
 80056b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056be:	623b      	str	r3, [r7, #32]
 80056c0:	2300      	movs	r3, #0
 80056c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	f04f 0000 	mov.w	r0, #0
 80056d0:	f04f 0100 	mov.w	r1, #0
 80056d4:	0159      	lsls	r1, r3, #5
 80056d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056da:	0150      	lsls	r0, r2, #5
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4641      	mov	r1, r8
 80056e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80056e6:	4649      	mov	r1, r9
 80056e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80056ec:	f04f 0200 	mov.w	r2, #0
 80056f0:	f04f 0300 	mov.w	r3, #0
 80056f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005700:	ebb2 040a 	subs.w	r4, r2, sl
 8005704:	eb63 050b 	sbc.w	r5, r3, fp
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	00eb      	lsls	r3, r5, #3
 8005712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005716:	00e2      	lsls	r2, r4, #3
 8005718:	4614      	mov	r4, r2
 800571a:	461d      	mov	r5, r3
 800571c:	4643      	mov	r3, r8
 800571e:	18e3      	adds	r3, r4, r3
 8005720:	603b      	str	r3, [r7, #0]
 8005722:	464b      	mov	r3, r9
 8005724:	eb45 0303 	adc.w	r3, r5, r3
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005736:	4629      	mov	r1, r5
 8005738:	028b      	lsls	r3, r1, #10
 800573a:	4621      	mov	r1, r4
 800573c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005740:	4621      	mov	r1, r4
 8005742:	028a      	lsls	r2, r1, #10
 8005744:	4610      	mov	r0, r2
 8005746:	4619      	mov	r1, r3
 8005748:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800574c:	2200      	movs	r2, #0
 800574e:	61bb      	str	r3, [r7, #24]
 8005750:	61fa      	str	r2, [r7, #28]
 8005752:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005756:	f7fb fab7 	bl	8000cc8 <__aeabi_uldivmod>
 800575a:	4602      	mov	r2, r0
 800575c:	460b      	mov	r3, r1
 800575e:	4613      	mov	r3, r2
 8005760:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005764:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <HAL_RCC_GetSysClockFreq+0x348>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	0f1b      	lsrs	r3, r3, #28
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco/pllr;
 8005772:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005776:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800577a:	fbb2 f3f3 	udiv	r3, r2, r3
 800577e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8005782:	e003      	b.n	800578c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005784:	4b06      	ldr	r3, [pc, #24]	@ (80057a0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800578a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800578c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8005790:	4618      	mov	r0, r3
 8005792:	3798      	adds	r7, #152	@ 0x98
 8005794:	46bd      	mov	sp, r7
 8005796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800579a:	bf00      	nop
 800579c:	40023800 	.word	0x40023800
 80057a0:	00f42400 	.word	0x00f42400
 80057a4:	017d7840 	.word	0x017d7840

080057a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e28d      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0301 	and.w	r3, r3, #1
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 8083 	beq.w	80058ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057c8:	4b94      	ldr	r3, [pc, #592]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 030c 	and.w	r3, r3, #12
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d019      	beq.n	8005808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057d4:	4b91      	ldr	r3, [pc, #580]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d106      	bne.n	80057ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057e0:	4b8e      	ldr	r3, [pc, #568]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057ec:	d00c      	beq.n	8005808 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ee:	4b8b      	ldr	r3, [pc, #556]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d112      	bne.n	8005820 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057fa:	4b88      	ldr	r3, [pc, #544]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005806:	d10b      	bne.n	8005820 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005808:	4b84      	ldr	r3, [pc, #528]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d05b      	beq.n	80058cc <HAL_RCC_OscConfig+0x124>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d157      	bne.n	80058cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	e25a      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005828:	d106      	bne.n	8005838 <HAL_RCC_OscConfig+0x90>
 800582a:	4b7c      	ldr	r3, [pc, #496]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a7b      	ldr	r2, [pc, #492]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e01d      	b.n	8005874 <HAL_RCC_OscConfig+0xcc>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005840:	d10c      	bne.n	800585c <HAL_RCC_OscConfig+0xb4>
 8005842:	4b76      	ldr	r3, [pc, #472]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a75      	ldr	r2, [pc, #468]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b73      	ldr	r3, [pc, #460]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a72      	ldr	r2, [pc, #456]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e00b      	b.n	8005874 <HAL_RCC_OscConfig+0xcc>
 800585c:	4b6f      	ldr	r3, [pc, #444]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a6e      	ldr	r2, [pc, #440]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	4b6c      	ldr	r3, [pc, #432]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a6b      	ldr	r2, [pc, #428]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 800586e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d013      	beq.n	80058a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fe f952 	bl	8003b24 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005884:	f7fe f94e 	bl	8003b24 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b64      	cmp	r3, #100	@ 0x64
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e21f      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005896:	4b61      	ldr	r3, [pc, #388]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <HAL_RCC_OscConfig+0xdc>
 80058a2:	e014      	b.n	80058ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fe f93e 	bl	8003b24 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058ac:	f7fe f93a 	bl	8003b24 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b64      	cmp	r3, #100	@ 0x64
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e20b      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058be:	4b57      	ldr	r3, [pc, #348]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1f0      	bne.n	80058ac <HAL_RCC_OscConfig+0x104>
 80058ca:	e000      	b.n	80058ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0302 	and.w	r3, r3, #2
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d06f      	beq.n	80059ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058da:	4b50      	ldr	r3, [pc, #320]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f003 030c 	and.w	r3, r3, #12
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d017      	beq.n	8005916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058e6:	4b4d      	ldr	r3, [pc, #308]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058ee:	2b08      	cmp	r3, #8
 80058f0:	d105      	bne.n	80058fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058f2:	4b4a      	ldr	r3, [pc, #296]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00b      	beq.n	8005916 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058fe:	4b47      	ldr	r3, [pc, #284]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005906:	2b0c      	cmp	r3, #12
 8005908:	d11c      	bne.n	8005944 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800590a:	4b44      	ldr	r3, [pc, #272]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d116      	bne.n	8005944 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005916:	4b41      	ldr	r3, [pc, #260]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0302 	and.w	r3, r3, #2
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <HAL_RCC_OscConfig+0x186>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d001      	beq.n	800592e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e1d3      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800592e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4937      	ldr	r1, [pc, #220]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 800593e:	4313      	orrs	r3, r2
 8005940:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005942:	e03a      	b.n	80059ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d020      	beq.n	800598e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800594c:	4b34      	ldr	r3, [pc, #208]	@ (8005a20 <HAL_RCC_OscConfig+0x278>)
 800594e:	2201      	movs	r2, #1
 8005950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fe f8e7 	bl	8003b24 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800595a:	f7fe f8e3 	bl	8003b24 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e1b4      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800596c:	4b2b      	ldr	r3, [pc, #172]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f0      	beq.n	800595a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005978:	4b28      	ldr	r3, [pc, #160]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	00db      	lsls	r3, r3, #3
 8005986:	4925      	ldr	r1, [pc, #148]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 8005988:	4313      	orrs	r3, r2
 800598a:	600b      	str	r3, [r1, #0]
 800598c:	e015      	b.n	80059ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800598e:	4b24      	ldr	r3, [pc, #144]	@ (8005a20 <HAL_RCC_OscConfig+0x278>)
 8005990:	2200      	movs	r2, #0
 8005992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fe f8c6 	bl	8003b24 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800599c:	f7fe f8c2 	bl	8003b24 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e193      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ae:	4b1b      	ldr	r3, [pc, #108]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1f0      	bne.n	800599c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d036      	beq.n	8005a34 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059ce:	4b15      	ldr	r3, [pc, #84]	@ (8005a24 <HAL_RCC_OscConfig+0x27c>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d4:	f7fe f8a6 	bl	8003b24 <HAL_GetTick>
 80059d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059da:	e008      	b.n	80059ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059dc:	f7fe f8a2 	bl	8003b24 <HAL_GetTick>
 80059e0:	4602      	mov	r2, r0
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e173      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ee:	4b0b      	ldr	r3, [pc, #44]	@ (8005a1c <HAL_RCC_OscConfig+0x274>)
 80059f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0f0      	beq.n	80059dc <HAL_RCC_OscConfig+0x234>
 80059fa:	e01b      	b.n	8005a34 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059fc:	4b09      	ldr	r3, [pc, #36]	@ (8005a24 <HAL_RCC_OscConfig+0x27c>)
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a02:	f7fe f88f 	bl	8003b24 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a08:	e00e      	b.n	8005a28 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a0a:	f7fe f88b 	bl	8003b24 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d907      	bls.n	8005a28 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005a18:	2303      	movs	r3, #3
 8005a1a:	e15c      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	42470000 	.word	0x42470000
 8005a24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a28:	4b8a      	ldr	r3, [pc, #552]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1ea      	bne.n	8005a0a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f003 0304 	and.w	r3, r3, #4
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8097 	beq.w	8005b70 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a42:	2300      	movs	r3, #0
 8005a44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a46:	4b83      	ldr	r3, [pc, #524]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10f      	bne.n	8005a72 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	4b7f      	ldr	r3, [pc, #508]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a62:	4b7c      	ldr	r3, [pc, #496]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a6a:	60bb      	str	r3, [r7, #8]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a72:	4b79      	ldr	r3, [pc, #484]	@ (8005c58 <HAL_RCC_OscConfig+0x4b0>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d118      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a7e:	4b76      	ldr	r3, [pc, #472]	@ (8005c58 <HAL_RCC_OscConfig+0x4b0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a75      	ldr	r2, [pc, #468]	@ (8005c58 <HAL_RCC_OscConfig+0x4b0>)
 8005a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a8a:	f7fe f84b 	bl	8003b24 <HAL_GetTick>
 8005a8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a90:	e008      	b.n	8005aa4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a92:	f7fe f847 	bl	8003b24 <HAL_GetTick>
 8005a96:	4602      	mov	r2, r0
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	1ad3      	subs	r3, r2, r3
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d901      	bls.n	8005aa4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e118      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa4:	4b6c      	ldr	r3, [pc, #432]	@ (8005c58 <HAL_RCC_OscConfig+0x4b0>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0f0      	beq.n	8005a92 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d106      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x31e>
 8005ab8:	4b66      	ldr	r3, [pc, #408]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005abc:	4a65      	ldr	r2, [pc, #404]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ac4:	e01c      	b.n	8005b00 <HAL_RCC_OscConfig+0x358>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	2b05      	cmp	r3, #5
 8005acc:	d10c      	bne.n	8005ae8 <HAL_RCC_OscConfig+0x340>
 8005ace:	4b61      	ldr	r3, [pc, #388]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad2:	4a60      	ldr	r2, [pc, #384]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005ad4:	f043 0304 	orr.w	r3, r3, #4
 8005ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ada:	4b5e      	ldr	r3, [pc, #376]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ade:	4a5d      	ldr	r2, [pc, #372]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae6:	e00b      	b.n	8005b00 <HAL_RCC_OscConfig+0x358>
 8005ae8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aec:	4a59      	ldr	r2, [pc, #356]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005aee:	f023 0301 	bic.w	r3, r3, #1
 8005af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005af4:	4b57      	ldr	r3, [pc, #348]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af8:	4a56      	ldr	r2, [pc, #344]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005afa:	f023 0304 	bic.w	r3, r3, #4
 8005afe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d015      	beq.n	8005b34 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b08:	f7fe f80c 	bl	8003b24 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b0e:	e00a      	b.n	8005b26 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b10:	f7fe f808 	bl	8003b24 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d901      	bls.n	8005b26 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e0d7      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b26:	4b4b      	ldr	r3, [pc, #300]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0ee      	beq.n	8005b10 <HAL_RCC_OscConfig+0x368>
 8005b32:	e014      	b.n	8005b5e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b34:	f7fd fff6 	bl	8003b24 <HAL_GetTick>
 8005b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b3a:	e00a      	b.n	8005b52 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b3c:	f7fd fff2 	bl	8003b24 <HAL_GetTick>
 8005b40:	4602      	mov	r2, r0
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e0c1      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b52:	4b40      	ldr	r3, [pc, #256]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1ee      	bne.n	8005b3c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b5e:	7dfb      	ldrb	r3, [r7, #23]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d105      	bne.n	8005b70 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b64:	4b3b      	ldr	r3, [pc, #236]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	4a3a      	ldr	r2, [pc, #232]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005b6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 80ad 	beq.w	8005cd4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b7a:	4b36      	ldr	r3, [pc, #216]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d060      	beq.n	8005c48 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699b      	ldr	r3, [r3, #24]
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d145      	bne.n	8005c1a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b8e:	4b33      	ldr	r3, [pc, #204]	@ (8005c5c <HAL_RCC_OscConfig+0x4b4>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fd ffc6 	bl	8003b24 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fd ffc2 	bl	8003b24 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e093      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bae:	4b29      	ldr	r3, [pc, #164]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	69da      	ldr	r2, [r3, #28]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	019b      	lsls	r3, r3, #6
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd0:	085b      	lsrs	r3, r3, #1
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	061b      	lsls	r3, r3, #24
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005be4:	071b      	lsls	r3, r3, #28
 8005be6:	491b      	ldr	r1, [pc, #108]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bec:	4b1b      	ldr	r3, [pc, #108]	@ (8005c5c <HAL_RCC_OscConfig+0x4b4>)
 8005bee:	2201      	movs	r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf2:	f7fd ff97 	bl	8003b24 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bfa:	f7fd ff93 	bl	8003b24 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e064      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c0c:	4b11      	ldr	r3, [pc, #68]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f0      	beq.n	8005bfa <HAL_RCC_OscConfig+0x452>
 8005c18:	e05c      	b.n	8005cd4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c1a:	4b10      	ldr	r3, [pc, #64]	@ (8005c5c <HAL_RCC_OscConfig+0x4b4>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c20:	f7fd ff80 	bl	8003b24 <HAL_GetTick>
 8005c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c26:	e008      	b.n	8005c3a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c28:	f7fd ff7c 	bl	8003b24 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d901      	bls.n	8005c3a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e04d      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c3a:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <HAL_RCC_OscConfig+0x4ac>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1f0      	bne.n	8005c28 <HAL_RCC_OscConfig+0x480>
 8005c46:	e045      	b.n	8005cd4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d107      	bne.n	8005c60 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e040      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
 8005c54:	40023800 	.word	0x40023800
 8005c58:	40007000 	.word	0x40007000
 8005c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c60:	4b1f      	ldr	r3, [pc, #124]	@ (8005ce0 <HAL_RCC_OscConfig+0x538>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d030      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d129      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d122      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c90:	4013      	ands	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d119      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca6:	085b      	lsrs	r3, r3, #1
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d10f      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d107      	bne.n	8005cd0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d001      	beq.n	8005cd4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800

08005ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e041      	b.n	8005d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fd fc80 	bl	8003610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f000 fd8c 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
	...

08005d84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b085      	sub	sp, #20
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d001      	beq.n	8005d9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e04e      	b.n	8005e3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2202      	movs	r2, #2
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a23      	ldr	r2, [pc, #140]	@ (8005e48 <HAL_TIM_Base_Start_IT+0xc4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d022      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x80>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dc6:	d01d      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x80>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8005e4c <HAL_TIM_Base_Start_IT+0xc8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d018      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x80>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e50 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d013      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x80>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e54 <HAL_TIM_Base_Start_IT+0xd0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00e      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x80>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1b      	ldr	r2, [pc, #108]	@ (8005e58 <HAL_TIM_Base_Start_IT+0xd4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d009      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x80>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a19      	ldr	r2, [pc, #100]	@ (8005e5c <HAL_TIM_Base_Start_IT+0xd8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d004      	beq.n	8005e04 <HAL_TIM_Base_Start_IT+0x80>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d111      	bne.n	8005e28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b06      	cmp	r3, #6
 8005e14:	d010      	beq.n	8005e38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0201 	orr.w	r2, r2, #1
 8005e24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e26:	e007      	b.n	8005e38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	40010000 	.word	0x40010000
 8005e4c:	40000400 	.word	0x40000400
 8005e50:	40000800 	.word	0x40000800
 8005e54:	40000c00 	.word	0x40000c00
 8005e58:	40010400 	.word	0x40010400
 8005e5c:	40014000 	.word	0x40014000
 8005e60:	40001800 	.word	0x40001800

08005e64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b082      	sub	sp, #8
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e041      	b.n	8005efa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d106      	bne.n	8005e90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7fd fba0 	bl	80035d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4610      	mov	r0, r2
 8005ea4:	f000 fccc 	bl	8006840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d109      	bne.n	8005f28 <HAL_TIM_PWM_Start+0x24>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	e022      	b.n	8005f6e <HAL_TIM_PWM_Start+0x6a>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d109      	bne.n	8005f42 <HAL_TIM_PWM_Start+0x3e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	bf14      	ite	ne
 8005f3a:	2301      	movne	r3, #1
 8005f3c:	2300      	moveq	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	e015      	b.n	8005f6e <HAL_TIM_PWM_Start+0x6a>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b08      	cmp	r3, #8
 8005f46:	d109      	bne.n	8005f5c <HAL_TIM_PWM_Start+0x58>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	e008      	b.n	8005f6e <HAL_TIM_PWM_Start+0x6a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e07c      	b.n	8006070 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d104      	bne.n	8005f86 <HAL_TIM_PWM_Start+0x82>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2202      	movs	r2, #2
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f84:	e013      	b.n	8005fae <HAL_TIM_PWM_Start+0xaa>
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d104      	bne.n	8005f96 <HAL_TIM_PWM_Start+0x92>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f94:	e00b      	b.n	8005fae <HAL_TIM_PWM_Start+0xaa>
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d104      	bne.n	8005fa6 <HAL_TIM_PWM_Start+0xa2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fa4:	e003      	b.n	8005fae <HAL_TIM_PWM_Start+0xaa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	6839      	ldr	r1, [r7, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 ff38 	bl	8006e2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a2d      	ldr	r2, [pc, #180]	@ (8006078 <HAL_TIM_PWM_Start+0x174>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <HAL_TIM_PWM_Start+0xcc>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a2c      	ldr	r2, [pc, #176]	@ (800607c <HAL_TIM_PWM_Start+0x178>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d101      	bne.n	8005fd4 <HAL_TIM_PWM_Start+0xd0>
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <HAL_TIM_PWM_Start+0xd2>
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d007      	beq.n	8005fea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fe8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a22      	ldr	r2, [pc, #136]	@ (8006078 <HAL_TIM_PWM_Start+0x174>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d022      	beq.n	800603a <HAL_TIM_PWM_Start+0x136>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ffc:	d01d      	beq.n	800603a <HAL_TIM_PWM_Start+0x136>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1f      	ldr	r2, [pc, #124]	@ (8006080 <HAL_TIM_PWM_Start+0x17c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d018      	beq.n	800603a <HAL_TIM_PWM_Start+0x136>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1d      	ldr	r2, [pc, #116]	@ (8006084 <HAL_TIM_PWM_Start+0x180>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d013      	beq.n	800603a <HAL_TIM_PWM_Start+0x136>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1c      	ldr	r2, [pc, #112]	@ (8006088 <HAL_TIM_PWM_Start+0x184>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00e      	beq.n	800603a <HAL_TIM_PWM_Start+0x136>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a16      	ldr	r2, [pc, #88]	@ (800607c <HAL_TIM_PWM_Start+0x178>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_TIM_PWM_Start+0x136>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a18      	ldr	r2, [pc, #96]	@ (800608c <HAL_TIM_PWM_Start+0x188>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIM_PWM_Start+0x136>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a16      	ldr	r2, [pc, #88]	@ (8006090 <HAL_TIM_PWM_Start+0x18c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d111      	bne.n	800605e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b06      	cmp	r3, #6
 800604a:	d010      	beq.n	800606e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f042 0201 	orr.w	r2, r2, #1
 800605a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800605c:	e007      	b.n	800606e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f042 0201 	orr.w	r2, r2, #1
 800606c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40010000 	.word	0x40010000
 800607c:	40010400 	.word	0x40010400
 8006080:	40000400 	.word	0x40000400
 8006084:	40000800 	.word	0x40000800
 8006088:	40000c00 	.word	0x40000c00
 800608c:	40014000 	.word	0x40014000
 8006090:	40001800 	.word	0x40001800

08006094 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e097      	b.n	80061d8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d106      	bne.n	80060c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fd f9a1 	bl	8003404 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2202      	movs	r2, #2
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6812      	ldr	r2, [r2, #0]
 80060d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060d8:	f023 0307 	bic.w	r3, r3, #7
 80060dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f000 fba9 	bl	8006840 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	4313      	orrs	r3, r2
 800610e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	4313      	orrs	r3, r2
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006134:	f023 030c 	bic.w	r3, r3, #12
 8006138:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006140:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	69db      	ldr	r3, [r3, #28]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	4313      	orrs	r3, r2
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	011a      	lsls	r2, r3, #4
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	031b      	lsls	r3, r3, #12
 8006164:	4313      	orrs	r3, r2
 8006166:	693a      	ldr	r2, [r7, #16]
 8006168:	4313      	orrs	r3, r2
 800616a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006172:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	4313      	orrs	r3, r2
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68fa      	ldr	r2, [r7, #12]
 80061a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006200:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006208:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d110      	bne.n	8006232 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d102      	bne.n	800621c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006216:	7b7b      	ldrb	r3, [r7, #13]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d001      	beq.n	8006220 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e069      	b.n	80062f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006230:	e031      	b.n	8006296 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b04      	cmp	r3, #4
 8006236:	d110      	bne.n	800625a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d102      	bne.n	8006244 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800623e:	7b3b      	ldrb	r3, [r7, #12]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d001      	beq.n	8006248 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e055      	b.n	80062f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2202      	movs	r2, #2
 800624c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006258:	e01d      	b.n	8006296 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d108      	bne.n	8006272 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006260:	7bbb      	ldrb	r3, [r7, #14]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d105      	bne.n	8006272 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006266:	7b7b      	ldrb	r3, [r7, #13]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d102      	bne.n	8006272 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800626c:	7b3b      	ldrb	r3, [r7, #12]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d001      	beq.n	8006276 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e03e      	b.n	80062f4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2202      	movs	r2, #2
 8006292:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_TIM_Encoder_Start+0xc4>
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d008      	beq.n	80062b4 <HAL_TIM_Encoder_Start+0xd4>
 80062a2:	e00f      	b.n	80062c4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2201      	movs	r2, #1
 80062aa:	2100      	movs	r1, #0
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fdbd 	bl	8006e2c <TIM_CCxChannelCmd>
      break;
 80062b2:	e016      	b.n	80062e2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2201      	movs	r2, #1
 80062ba:	2104      	movs	r1, #4
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 fdb5 	bl	8006e2c <TIM_CCxChannelCmd>
      break;
 80062c2:	e00e      	b.n	80062e2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2201      	movs	r2, #1
 80062ca:	2100      	movs	r1, #0
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fdad 	bl	8006e2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2201      	movs	r2, #1
 80062d8:	2104      	movs	r1, #4
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 fda6 	bl	8006e2c <TIM_CCxChannelCmd>
      break;
 80062e0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f042 0201 	orr.w	r2, r2, #1
 80062f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0302 	and.w	r3, r3, #2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d020      	beq.n	8006360 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01b      	beq.n	8006360 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0202 	mvn.w	r2, #2
 8006330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2201      	movs	r2, #1
 8006336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	f003 0303 	and.w	r3, r3, #3
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fa5b 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa4d 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fa5e 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 0304 	and.w	r3, r3, #4
 8006366:	2b00      	cmp	r3, #0
 8006368:	d020      	beq.n	80063ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d01b      	beq.n	80063ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0204 	mvn.w	r2, #4
 800637c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2202      	movs	r2, #2
 8006382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa35 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 8006398:	e005      	b.n	80063a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 fa27 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fa38 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d020      	beq.n	80063f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d01b      	beq.n	80063f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0208 	mvn.w	r2, #8
 80063c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2204      	movs	r2, #4
 80063ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fa0f 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 80063e4:	e005      	b.n	80063f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa01 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fa12 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f003 0310 	and.w	r3, r3, #16
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d020      	beq.n	8006444 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b00      	cmp	r3, #0
 800640a:	d01b      	beq.n	8006444 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f06f 0210 	mvn.w	r2, #16
 8006414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2208      	movs	r2, #8
 800641a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f9e9 	bl	8006802 <HAL_TIM_IC_CaptureCallback>
 8006430:	e005      	b.n	800643e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9db 	bl	80067ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f9ec 	bl	8006816 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00c      	beq.n	8006468 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d007      	beq.n	8006468 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f06f 0201 	mvn.w	r2, #1
 8006460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f7fb fb64 	bl	8001b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00c      	beq.n	800648c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006478:	2b00      	cmp	r3, #0
 800647a:	d007      	beq.n	800648c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fd7c 	bl	8006f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00c      	beq.n	80064b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80064a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9bd 	bl	800682a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00c      	beq.n	80064d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f06f 0220 	mvn.w	r2, #32
 80064cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fd4e 	bl	8006f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064d4:	bf00      	nop
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064e8:	2300      	movs	r3, #0
 80064ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e0ae      	b.n	8006658 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b0c      	cmp	r3, #12
 8006506:	f200 809f 	bhi.w	8006648 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800650a:	a201      	add	r2, pc, #4	@ (adr r2, 8006510 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006545 	.word	0x08006545
 8006514:	08006649 	.word	0x08006649
 8006518:	08006649 	.word	0x08006649
 800651c:	08006649 	.word	0x08006649
 8006520:	08006585 	.word	0x08006585
 8006524:	08006649 	.word	0x08006649
 8006528:	08006649 	.word	0x08006649
 800652c:	08006649 	.word	0x08006649
 8006530:	080065c7 	.word	0x080065c7
 8006534:	08006649 	.word	0x08006649
 8006538:	08006649 	.word	0x08006649
 800653c:	08006649 	.word	0x08006649
 8006540:	08006607 	.word	0x08006607
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fa24 	bl	8006998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699a      	ldr	r2, [r3, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0208 	orr.w	r2, r2, #8
 800655e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f022 0204 	bic.w	r2, r2, #4
 800656e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6999      	ldr	r1, [r3, #24]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	619a      	str	r2, [r3, #24]
      break;
 8006582:	e064      	b.n	800664e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	68b9      	ldr	r1, [r7, #8]
 800658a:	4618      	mov	r0, r3
 800658c:	f000 fa74 	bl	8006a78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699a      	ldr	r2, [r3, #24]
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800659e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6999      	ldr	r1, [r3, #24]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	021a      	lsls	r2, r3, #8
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	619a      	str	r2, [r3, #24]
      break;
 80065c4:	e043      	b.n	800664e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68b9      	ldr	r1, [r7, #8]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 fac9 	bl	8006b64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	69da      	ldr	r2, [r3, #28]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0208 	orr.w	r2, r2, #8
 80065e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 0204 	bic.w	r2, r2, #4
 80065f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69d9      	ldr	r1, [r3, #28]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	61da      	str	r2, [r3, #28]
      break;
 8006604:	e023      	b.n	800664e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68b9      	ldr	r1, [r7, #8]
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fb1d 	bl	8006c4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	69da      	ldr	r2, [r3, #28]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69da      	ldr	r2, [r3, #28]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	69d9      	ldr	r1, [r3, #28]
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	021a      	lsls	r2, r3, #8
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	430a      	orrs	r2, r1
 8006644:	61da      	str	r2, [r3, #28]
      break;
 8006646:	e002      	b.n	800664e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	75fb      	strb	r3, [r7, #23]
      break;
 800664c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006656:	7dfb      	ldrb	r3, [r7, #23]
}
 8006658:	4618      	mov	r0, r3
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_TIM_ConfigClockSource+0x1c>
 8006678:	2302      	movs	r3, #2
 800667a:	e0b4      	b.n	80067e6 <HAL_TIM_ConfigClockSource+0x186>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800669a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68ba      	ldr	r2, [r7, #8]
 80066aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b4:	d03e      	beq.n	8006734 <HAL_TIM_ConfigClockSource+0xd4>
 80066b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066ba:	f200 8087 	bhi.w	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c2:	f000 8086 	beq.w	80067d2 <HAL_TIM_ConfigClockSource+0x172>
 80066c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ca:	d87f      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066cc:	2b70      	cmp	r3, #112	@ 0x70
 80066ce:	d01a      	beq.n	8006706 <HAL_TIM_ConfigClockSource+0xa6>
 80066d0:	2b70      	cmp	r3, #112	@ 0x70
 80066d2:	d87b      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066d4:	2b60      	cmp	r3, #96	@ 0x60
 80066d6:	d050      	beq.n	800677a <HAL_TIM_ConfigClockSource+0x11a>
 80066d8:	2b60      	cmp	r3, #96	@ 0x60
 80066da:	d877      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066dc:	2b50      	cmp	r3, #80	@ 0x50
 80066de:	d03c      	beq.n	800675a <HAL_TIM_ConfigClockSource+0xfa>
 80066e0:	2b50      	cmp	r3, #80	@ 0x50
 80066e2:	d873      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066e4:	2b40      	cmp	r3, #64	@ 0x40
 80066e6:	d058      	beq.n	800679a <HAL_TIM_ConfigClockSource+0x13a>
 80066e8:	2b40      	cmp	r3, #64	@ 0x40
 80066ea:	d86f      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066ec:	2b30      	cmp	r3, #48	@ 0x30
 80066ee:	d064      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x15a>
 80066f0:	2b30      	cmp	r3, #48	@ 0x30
 80066f2:	d86b      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d060      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x15a>
 80066f8:	2b20      	cmp	r3, #32
 80066fa:	d867      	bhi.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d05c      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x15a>
 8006700:	2b10      	cmp	r3, #16
 8006702:	d05a      	beq.n	80067ba <HAL_TIM_ConfigClockSource+0x15a>
 8006704:	e062      	b.n	80067cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006716:	f000 fb69 	bl	8006dec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006728:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	609a      	str	r2, [r3, #8]
      break;
 8006732:	e04f      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006744:	f000 fb52 	bl	8006dec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006756:	609a      	str	r2, [r3, #8]
      break;
 8006758:	e03c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006766:	461a      	mov	r2, r3
 8006768:	f000 fac6 	bl	8006cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2150      	movs	r1, #80	@ 0x50
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fb1f 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 8006778:	e02c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006786:	461a      	mov	r2, r3
 8006788:	f000 fae5 	bl	8006d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2160      	movs	r1, #96	@ 0x60
 8006792:	4618      	mov	r0, r3
 8006794:	f000 fb0f 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 8006798:	e01c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a6:	461a      	mov	r2, r3
 80067a8:	f000 faa6 	bl	8006cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2140      	movs	r1, #64	@ 0x40
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 faff 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 80067b8:	e00c      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4619      	mov	r1, r3
 80067c4:	4610      	mov	r0, r2
 80067c6:	f000 faf6 	bl	8006db6 <TIM_ITRx_SetConfig>
      break;
 80067ca:	e003      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	73fb      	strb	r3, [r7, #15]
      break;
 80067d0:	e000      	b.n	80067d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006802:	b480      	push	{r7}
 8006804:	b083      	sub	sp, #12
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr

08006816 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006816:	b480      	push	{r7}
 8006818:	b083      	sub	sp, #12
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800681e:	bf00      	nop
 8006820:	370c      	adds	r7, #12
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
	...

08006840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a46      	ldr	r2, [pc, #280]	@ (800696c <TIM_Base_SetConfig+0x12c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d013      	beq.n	8006880 <TIM_Base_SetConfig+0x40>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685e:	d00f      	beq.n	8006880 <TIM_Base_SetConfig+0x40>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a43      	ldr	r2, [pc, #268]	@ (8006970 <TIM_Base_SetConfig+0x130>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00b      	beq.n	8006880 <TIM_Base_SetConfig+0x40>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a42      	ldr	r2, [pc, #264]	@ (8006974 <TIM_Base_SetConfig+0x134>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d007      	beq.n	8006880 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a41      	ldr	r2, [pc, #260]	@ (8006978 <TIM_Base_SetConfig+0x138>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d003      	beq.n	8006880 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a40      	ldr	r2, [pc, #256]	@ (800697c <TIM_Base_SetConfig+0x13c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d108      	bne.n	8006892 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006886:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	4313      	orrs	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a35      	ldr	r2, [pc, #212]	@ (800696c <TIM_Base_SetConfig+0x12c>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d02b      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a0:	d027      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a32      	ldr	r2, [pc, #200]	@ (8006970 <TIM_Base_SetConfig+0x130>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d023      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a31      	ldr	r2, [pc, #196]	@ (8006974 <TIM_Base_SetConfig+0x134>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01f      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a30      	ldr	r2, [pc, #192]	@ (8006978 <TIM_Base_SetConfig+0x138>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d01b      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2f      	ldr	r2, [pc, #188]	@ (800697c <TIM_Base_SetConfig+0x13c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d017      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006980 <TIM_Base_SetConfig+0x140>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d013      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006984 <TIM_Base_SetConfig+0x144>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00f      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006988 <TIM_Base_SetConfig+0x148>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00b      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a2b      	ldr	r2, [pc, #172]	@ (800698c <TIM_Base_SetConfig+0x14c>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d007      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006990 <TIM_Base_SetConfig+0x150>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d003      	beq.n	80068f2 <TIM_Base_SetConfig+0xb2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a29      	ldr	r2, [pc, #164]	@ (8006994 <TIM_Base_SetConfig+0x154>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d108      	bne.n	8006904 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	4313      	orrs	r3, r2
 8006910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	689a      	ldr	r2, [r3, #8]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a10      	ldr	r2, [pc, #64]	@ (800696c <TIM_Base_SetConfig+0x12c>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d003      	beq.n	8006938 <TIM_Base_SetConfig+0xf8>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a12      	ldr	r2, [pc, #72]	@ (800697c <TIM_Base_SetConfig+0x13c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d103      	bne.n	8006940 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	691a      	ldr	r2, [r3, #16]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d105      	bne.n	800695e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f023 0201 	bic.w	r2, r3, #1
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	611a      	str	r2, [r3, #16]
  }
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40010000 	.word	0x40010000
 8006970:	40000400 	.word	0x40000400
 8006974:	40000800 	.word	0x40000800
 8006978:	40000c00 	.word	0x40000c00
 800697c:	40010400 	.word	0x40010400
 8006980:	40014000 	.word	0x40014000
 8006984:	40014400 	.word	0x40014400
 8006988:	40014800 	.word	0x40014800
 800698c:	40001800 	.word	0x40001800
 8006990:	40001c00 	.word	0x40001c00
 8006994:	40002000 	.word	0x40002000

08006998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	f023 0201 	bic.w	r2, r3, #1
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 0302 	bic.w	r3, r3, #2
 80069e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a20      	ldr	r2, [pc, #128]	@ (8006a70 <TIM_OC1_SetConfig+0xd8>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_OC1_SetConfig+0x64>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006a74 <TIM_OC1_SetConfig+0xdc>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d10c      	bne.n	8006a16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0308 	bic.w	r3, r3, #8
 8006a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 0304 	bic.w	r3, r3, #4
 8006a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a15      	ldr	r2, [pc, #84]	@ (8006a70 <TIM_OC1_SetConfig+0xd8>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_OC1_SetConfig+0x8e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a14      	ldr	r2, [pc, #80]	@ (8006a74 <TIM_OC1_SetConfig+0xdc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d111      	bne.n	8006a4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	621a      	str	r2, [r3, #32]
}
 8006a64:	bf00      	nop
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	40010000 	.word	0x40010000
 8006a74:	40010400 	.word	0x40010400

08006a78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a1b      	ldr	r3, [r3, #32]
 8006a8c:	f023 0210 	bic.w	r2, r3, #16
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f023 0320 	bic.w	r3, r3, #32
 8006ac2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	011b      	lsls	r3, r3, #4
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a22      	ldr	r2, [pc, #136]	@ (8006b5c <TIM_OC2_SetConfig+0xe4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_OC2_SetConfig+0x68>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a21      	ldr	r2, [pc, #132]	@ (8006b60 <TIM_OC2_SetConfig+0xe8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10d      	bne.n	8006afc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a17      	ldr	r2, [pc, #92]	@ (8006b5c <TIM_OC2_SetConfig+0xe4>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_OC2_SetConfig+0x94>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a16      	ldr	r2, [pc, #88]	@ (8006b60 <TIM_OC2_SetConfig+0xe8>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d113      	bne.n	8006b34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40010400 	.word	0x40010400

08006b64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b087      	sub	sp, #28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0303 	bic.w	r3, r3, #3
 8006b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	021b      	lsls	r3, r3, #8
 8006bb4:	697a      	ldr	r2, [r7, #20]
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a21      	ldr	r2, [pc, #132]	@ (8006c44 <TIM_OC3_SetConfig+0xe0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_OC3_SetConfig+0x66>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a20      	ldr	r2, [pc, #128]	@ (8006c48 <TIM_OC3_SetConfig+0xe4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d10d      	bne.n	8006be6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	021b      	lsls	r3, r3, #8
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006be4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a16      	ldr	r2, [pc, #88]	@ (8006c44 <TIM_OC3_SetConfig+0xe0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d003      	beq.n	8006bf6 <TIM_OC3_SetConfig+0x92>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a15      	ldr	r2, [pc, #84]	@ (8006c48 <TIM_OC3_SetConfig+0xe4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d113      	bne.n	8006c1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	011b      	lsls	r3, r3, #4
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	011b      	lsls	r3, r3, #4
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	621a      	str	r2, [r3, #32]
}
 8006c38:	bf00      	nop
 8006c3a:	371c      	adds	r7, #28
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	40010000 	.word	0x40010000
 8006c48:	40010400 	.word	0x40010400

08006c4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b087      	sub	sp, #28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	021b      	lsls	r3, r3, #8
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	031b      	lsls	r3, r3, #12
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a12      	ldr	r2, [pc, #72]	@ (8006cf0 <TIM_OC4_SetConfig+0xa4>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d003      	beq.n	8006cb4 <TIM_OC4_SetConfig+0x68>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a11      	ldr	r2, [pc, #68]	@ (8006cf4 <TIM_OC4_SetConfig+0xa8>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d109      	bne.n	8006cc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006cba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	019b      	lsls	r3, r3, #6
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	621a      	str	r2, [r3, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40010400 	.word	0x40010400

08006cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f023 0201 	bic.w	r2, r3, #1
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	699b      	ldr	r3, [r3, #24]
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f023 030a 	bic.w	r3, r3, #10
 8006d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b087      	sub	sp, #28
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	f023 0210 	bic.w	r2, r3, #16
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	031b      	lsls	r3, r3, #12
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	697a      	ldr	r2, [r7, #20]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	621a      	str	r2, [r3, #32]
}
 8006daa:	bf00      	nop
 8006dac:	371c      	adds	r7, #28
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr

08006db6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006db6:	b480      	push	{r7}
 8006db8:	b085      	sub	sp, #20
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f043 0307 	orr.w	r3, r3, #7
 8006dd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	609a      	str	r2, [r3, #8]
}
 8006de0:	bf00      	nop
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	021a      	lsls	r2, r3, #8
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	609a      	str	r2, [r3, #8]
}
 8006e20:	bf00      	nop
 8006e22:	371c      	adds	r7, #28
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2201      	movs	r2, #1
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6a1a      	ldr	r2, [r3, #32]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	43db      	mvns	r3, r3
 8006e4e:	401a      	ands	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6a1a      	ldr	r2, [r3, #32]
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f003 031f 	and.w	r3, r3, #31
 8006e5e:	6879      	ldr	r1, [r7, #4]
 8006e60:	fa01 f303 	lsl.w	r3, r1, r3
 8006e64:	431a      	orrs	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	621a      	str	r2, [r3, #32]
}
 8006e6a:	bf00      	nop
 8006e6c:	371c      	adds	r7, #28
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
	...

08006e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d101      	bne.n	8006e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	e05a      	b.n	8006f46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2202      	movs	r2, #2
 8006e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a21      	ldr	r2, [pc, #132]	@ (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d022      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006edc:	d01d      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1b      	ldr	r2, [pc, #108]	@ (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a18      	ldr	r2, [pc, #96]	@ (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a17      	ldr	r2, [pc, #92]	@ (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a15      	ldr	r2, [pc, #84]	@ (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d10c      	bne.n	8006f34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40000400 	.word	0x40000400
 8006f5c:	40000800 	.word	0x40000800
 8006f60:	40000c00 	.word	0x40000c00
 8006f64:	40010400 	.word	0x40010400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40001800 	.word	0x40001800

08006f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e042      	b.n	8007030 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7fc fba6 	bl	8003710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2224      	movs	r2, #36	@ 0x24
 8006fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68da      	ldr	r2, [r3, #12]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f82b 	bl	8007038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695a      	ldr	r2, [r3, #20]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	68da      	ldr	r2, [r3, #12]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800703c:	b0c0      	sub	sp, #256	@ 0x100
 800703e:	af00      	add	r7, sp, #0
 8007040:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007054:	68d9      	ldr	r1, [r3, #12]
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	ea40 0301 	orr.w	r3, r0, r1
 8007060:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	431a      	orrs	r2, r3
 8007070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	431a      	orrs	r2, r3
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007090:	f021 010c 	bic.w	r1, r1, #12
 8007094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800709e:	430b      	orrs	r3, r1
 80070a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80070ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b2:	6999      	ldr	r1, [r3, #24]
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	ea40 0301 	orr.w	r3, r0, r1
 80070be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b8f      	ldr	r3, [pc, #572]	@ (8007304 <UART_SetConfig+0x2cc>)
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d005      	beq.n	80070d8 <UART_SetConfig+0xa0>
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007308 <UART_SetConfig+0x2d0>)
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d104      	bne.n	80070e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070d8:	f7fe f9a8 	bl	800542c <HAL_RCC_GetPCLK2Freq>
 80070dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80070e0:	e003      	b.n	80070ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070e2:	f7fe f98f 	bl	8005404 <HAL_RCC_GetPCLK1Freq>
 80070e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ee:	69db      	ldr	r3, [r3, #28]
 80070f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f4:	f040 810c 	bne.w	8007310 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070fc:	2200      	movs	r2, #0
 80070fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007102:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007106:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800710a:	4622      	mov	r2, r4
 800710c:	462b      	mov	r3, r5
 800710e:	1891      	adds	r1, r2, r2
 8007110:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007112:	415b      	adcs	r3, r3
 8007114:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007116:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800711a:	4621      	mov	r1, r4
 800711c:	eb12 0801 	adds.w	r8, r2, r1
 8007120:	4629      	mov	r1, r5
 8007122:	eb43 0901 	adc.w	r9, r3, r1
 8007126:	f04f 0200 	mov.w	r2, #0
 800712a:	f04f 0300 	mov.w	r3, #0
 800712e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800713a:	4690      	mov	r8, r2
 800713c:	4699      	mov	r9, r3
 800713e:	4623      	mov	r3, r4
 8007140:	eb18 0303 	adds.w	r3, r8, r3
 8007144:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007148:	462b      	mov	r3, r5
 800714a:	eb49 0303 	adc.w	r3, r9, r3
 800714e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800715e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007162:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007166:	460b      	mov	r3, r1
 8007168:	18db      	adds	r3, r3, r3
 800716a:	653b      	str	r3, [r7, #80]	@ 0x50
 800716c:	4613      	mov	r3, r2
 800716e:	eb42 0303 	adc.w	r3, r2, r3
 8007172:	657b      	str	r3, [r7, #84]	@ 0x54
 8007174:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007178:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800717c:	f7f9 fda4 	bl	8000cc8 <__aeabi_uldivmod>
 8007180:	4602      	mov	r2, r0
 8007182:	460b      	mov	r3, r1
 8007184:	4b61      	ldr	r3, [pc, #388]	@ (800730c <UART_SetConfig+0x2d4>)
 8007186:	fba3 2302 	umull	r2, r3, r3, r2
 800718a:	095b      	lsrs	r3, r3, #5
 800718c:	011c      	lsls	r4, r3, #4
 800718e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007192:	2200      	movs	r2, #0
 8007194:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007198:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800719c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80071a0:	4642      	mov	r2, r8
 80071a2:	464b      	mov	r3, r9
 80071a4:	1891      	adds	r1, r2, r2
 80071a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80071a8:	415b      	adcs	r3, r3
 80071aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80071b0:	4641      	mov	r1, r8
 80071b2:	eb12 0a01 	adds.w	sl, r2, r1
 80071b6:	4649      	mov	r1, r9
 80071b8:	eb43 0b01 	adc.w	fp, r3, r1
 80071bc:	f04f 0200 	mov.w	r2, #0
 80071c0:	f04f 0300 	mov.w	r3, #0
 80071c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071d0:	4692      	mov	sl, r2
 80071d2:	469b      	mov	fp, r3
 80071d4:	4643      	mov	r3, r8
 80071d6:	eb1a 0303 	adds.w	r3, sl, r3
 80071da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071de:	464b      	mov	r3, r9
 80071e0:	eb4b 0303 	adc.w	r3, fp, r3
 80071e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80071f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80071f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80071fc:	460b      	mov	r3, r1
 80071fe:	18db      	adds	r3, r3, r3
 8007200:	643b      	str	r3, [r7, #64]	@ 0x40
 8007202:	4613      	mov	r3, r2
 8007204:	eb42 0303 	adc.w	r3, r2, r3
 8007208:	647b      	str	r3, [r7, #68]	@ 0x44
 800720a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800720e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007212:	f7f9 fd59 	bl	8000cc8 <__aeabi_uldivmod>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4611      	mov	r1, r2
 800721c:	4b3b      	ldr	r3, [pc, #236]	@ (800730c <UART_SetConfig+0x2d4>)
 800721e:	fba3 2301 	umull	r2, r3, r3, r1
 8007222:	095b      	lsrs	r3, r3, #5
 8007224:	2264      	movs	r2, #100	@ 0x64
 8007226:	fb02 f303 	mul.w	r3, r2, r3
 800722a:	1acb      	subs	r3, r1, r3
 800722c:	00db      	lsls	r3, r3, #3
 800722e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007232:	4b36      	ldr	r3, [pc, #216]	@ (800730c <UART_SetConfig+0x2d4>)
 8007234:	fba3 2302 	umull	r2, r3, r3, r2
 8007238:	095b      	lsrs	r3, r3, #5
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007240:	441c      	add	r4, r3
 8007242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007246:	2200      	movs	r2, #0
 8007248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800724c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007250:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007254:	4642      	mov	r2, r8
 8007256:	464b      	mov	r3, r9
 8007258:	1891      	adds	r1, r2, r2
 800725a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800725c:	415b      	adcs	r3, r3
 800725e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007264:	4641      	mov	r1, r8
 8007266:	1851      	adds	r1, r2, r1
 8007268:	6339      	str	r1, [r7, #48]	@ 0x30
 800726a:	4649      	mov	r1, r9
 800726c:	414b      	adcs	r3, r1
 800726e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800727c:	4659      	mov	r1, fp
 800727e:	00cb      	lsls	r3, r1, #3
 8007280:	4651      	mov	r1, sl
 8007282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007286:	4651      	mov	r1, sl
 8007288:	00ca      	lsls	r2, r1, #3
 800728a:	4610      	mov	r0, r2
 800728c:	4619      	mov	r1, r3
 800728e:	4603      	mov	r3, r0
 8007290:	4642      	mov	r2, r8
 8007292:	189b      	adds	r3, r3, r2
 8007294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007298:	464b      	mov	r3, r9
 800729a:	460a      	mov	r2, r1
 800729c:	eb42 0303 	adc.w	r3, r2, r3
 80072a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80072b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072b8:	460b      	mov	r3, r1
 80072ba:	18db      	adds	r3, r3, r3
 80072bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072be:	4613      	mov	r3, r2
 80072c0:	eb42 0303 	adc.w	r3, r2, r3
 80072c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80072ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80072ce:	f7f9 fcfb 	bl	8000cc8 <__aeabi_uldivmod>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4b0d      	ldr	r3, [pc, #52]	@ (800730c <UART_SetConfig+0x2d4>)
 80072d8:	fba3 1302 	umull	r1, r3, r3, r2
 80072dc:	095b      	lsrs	r3, r3, #5
 80072de:	2164      	movs	r1, #100	@ 0x64
 80072e0:	fb01 f303 	mul.w	r3, r1, r3
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	3332      	adds	r3, #50	@ 0x32
 80072ea:	4a08      	ldr	r2, [pc, #32]	@ (800730c <UART_SetConfig+0x2d4>)
 80072ec:	fba2 2303 	umull	r2, r3, r2, r3
 80072f0:	095b      	lsrs	r3, r3, #5
 80072f2:	f003 0207 	and.w	r2, r3, #7
 80072f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4422      	add	r2, r4
 80072fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007300:	e106      	b.n	8007510 <UART_SetConfig+0x4d8>
 8007302:	bf00      	nop
 8007304:	40011000 	.word	0x40011000
 8007308:	40011400 	.word	0x40011400
 800730c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007314:	2200      	movs	r2, #0
 8007316:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800731a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800731e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007322:	4642      	mov	r2, r8
 8007324:	464b      	mov	r3, r9
 8007326:	1891      	adds	r1, r2, r2
 8007328:	6239      	str	r1, [r7, #32]
 800732a:	415b      	adcs	r3, r3
 800732c:	627b      	str	r3, [r7, #36]	@ 0x24
 800732e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007332:	4641      	mov	r1, r8
 8007334:	1854      	adds	r4, r2, r1
 8007336:	4649      	mov	r1, r9
 8007338:	eb43 0501 	adc.w	r5, r3, r1
 800733c:	f04f 0200 	mov.w	r2, #0
 8007340:	f04f 0300 	mov.w	r3, #0
 8007344:	00eb      	lsls	r3, r5, #3
 8007346:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800734a:	00e2      	lsls	r2, r4, #3
 800734c:	4614      	mov	r4, r2
 800734e:	461d      	mov	r5, r3
 8007350:	4643      	mov	r3, r8
 8007352:	18e3      	adds	r3, r4, r3
 8007354:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007358:	464b      	mov	r3, r9
 800735a:	eb45 0303 	adc.w	r3, r5, r3
 800735e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800736e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800737e:	4629      	mov	r1, r5
 8007380:	008b      	lsls	r3, r1, #2
 8007382:	4621      	mov	r1, r4
 8007384:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007388:	4621      	mov	r1, r4
 800738a:	008a      	lsls	r2, r1, #2
 800738c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007390:	f7f9 fc9a 	bl	8000cc8 <__aeabi_uldivmod>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4b60      	ldr	r3, [pc, #384]	@ (800751c <UART_SetConfig+0x4e4>)
 800739a:	fba3 2302 	umull	r2, r3, r3, r2
 800739e:	095b      	lsrs	r3, r3, #5
 80073a0:	011c      	lsls	r4, r3, #4
 80073a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073a6:	2200      	movs	r2, #0
 80073a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80073b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80073b4:	4642      	mov	r2, r8
 80073b6:	464b      	mov	r3, r9
 80073b8:	1891      	adds	r1, r2, r2
 80073ba:	61b9      	str	r1, [r7, #24]
 80073bc:	415b      	adcs	r3, r3
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073c4:	4641      	mov	r1, r8
 80073c6:	1851      	adds	r1, r2, r1
 80073c8:	6139      	str	r1, [r7, #16]
 80073ca:	4649      	mov	r1, r9
 80073cc:	414b      	adcs	r3, r1
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	f04f 0200 	mov.w	r2, #0
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073dc:	4659      	mov	r1, fp
 80073de:	00cb      	lsls	r3, r1, #3
 80073e0:	4651      	mov	r1, sl
 80073e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073e6:	4651      	mov	r1, sl
 80073e8:	00ca      	lsls	r2, r1, #3
 80073ea:	4610      	mov	r0, r2
 80073ec:	4619      	mov	r1, r3
 80073ee:	4603      	mov	r3, r0
 80073f0:	4642      	mov	r2, r8
 80073f2:	189b      	adds	r3, r3, r2
 80073f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073f8:	464b      	mov	r3, r9
 80073fa:	460a      	mov	r2, r1
 80073fc:	eb42 0303 	adc.w	r3, r2, r3
 8007400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800740e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007410:	f04f 0200 	mov.w	r2, #0
 8007414:	f04f 0300 	mov.w	r3, #0
 8007418:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800741c:	4649      	mov	r1, r9
 800741e:	008b      	lsls	r3, r1, #2
 8007420:	4641      	mov	r1, r8
 8007422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007426:	4641      	mov	r1, r8
 8007428:	008a      	lsls	r2, r1, #2
 800742a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800742e:	f7f9 fc4b 	bl	8000cc8 <__aeabi_uldivmod>
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	4611      	mov	r1, r2
 8007438:	4b38      	ldr	r3, [pc, #224]	@ (800751c <UART_SetConfig+0x4e4>)
 800743a:	fba3 2301 	umull	r2, r3, r3, r1
 800743e:	095b      	lsrs	r3, r3, #5
 8007440:	2264      	movs	r2, #100	@ 0x64
 8007442:	fb02 f303 	mul.w	r3, r2, r3
 8007446:	1acb      	subs	r3, r1, r3
 8007448:	011b      	lsls	r3, r3, #4
 800744a:	3332      	adds	r3, #50	@ 0x32
 800744c:	4a33      	ldr	r2, [pc, #204]	@ (800751c <UART_SetConfig+0x4e4>)
 800744e:	fba2 2303 	umull	r2, r3, r2, r3
 8007452:	095b      	lsrs	r3, r3, #5
 8007454:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007458:	441c      	add	r4, r3
 800745a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800745e:	2200      	movs	r2, #0
 8007460:	673b      	str	r3, [r7, #112]	@ 0x70
 8007462:	677a      	str	r2, [r7, #116]	@ 0x74
 8007464:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007468:	4642      	mov	r2, r8
 800746a:	464b      	mov	r3, r9
 800746c:	1891      	adds	r1, r2, r2
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	415b      	adcs	r3, r3
 8007472:	60fb      	str	r3, [r7, #12]
 8007474:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007478:	4641      	mov	r1, r8
 800747a:	1851      	adds	r1, r2, r1
 800747c:	6039      	str	r1, [r7, #0]
 800747e:	4649      	mov	r1, r9
 8007480:	414b      	adcs	r3, r1
 8007482:	607b      	str	r3, [r7, #4]
 8007484:	f04f 0200 	mov.w	r2, #0
 8007488:	f04f 0300 	mov.w	r3, #0
 800748c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007490:	4659      	mov	r1, fp
 8007492:	00cb      	lsls	r3, r1, #3
 8007494:	4651      	mov	r1, sl
 8007496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800749a:	4651      	mov	r1, sl
 800749c:	00ca      	lsls	r2, r1, #3
 800749e:	4610      	mov	r0, r2
 80074a0:	4619      	mov	r1, r3
 80074a2:	4603      	mov	r3, r0
 80074a4:	4642      	mov	r2, r8
 80074a6:	189b      	adds	r3, r3, r2
 80074a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074aa:	464b      	mov	r3, r9
 80074ac:	460a      	mov	r2, r1
 80074ae:	eb42 0303 	adc.w	r3, r2, r3
 80074b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2200      	movs	r2, #0
 80074bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80074be:	667a      	str	r2, [r7, #100]	@ 0x64
 80074c0:	f04f 0200 	mov.w	r2, #0
 80074c4:	f04f 0300 	mov.w	r3, #0
 80074c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80074cc:	4649      	mov	r1, r9
 80074ce:	008b      	lsls	r3, r1, #2
 80074d0:	4641      	mov	r1, r8
 80074d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074d6:	4641      	mov	r1, r8
 80074d8:	008a      	lsls	r2, r1, #2
 80074da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80074de:	f7f9 fbf3 	bl	8000cc8 <__aeabi_uldivmod>
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	4b0d      	ldr	r3, [pc, #52]	@ (800751c <UART_SetConfig+0x4e4>)
 80074e8:	fba3 1302 	umull	r1, r3, r3, r2
 80074ec:	095b      	lsrs	r3, r3, #5
 80074ee:	2164      	movs	r1, #100	@ 0x64
 80074f0:	fb01 f303 	mul.w	r3, r1, r3
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	3332      	adds	r3, #50	@ 0x32
 80074fa:	4a08      	ldr	r2, [pc, #32]	@ (800751c <UART_SetConfig+0x4e4>)
 80074fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007500:	095b      	lsrs	r3, r3, #5
 8007502:	f003 020f 	and.w	r2, r3, #15
 8007506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4422      	add	r2, r4
 800750e:	609a      	str	r2, [r3, #8]
}
 8007510:	bf00      	nop
 8007512:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007516:	46bd      	mov	sp, r7
 8007518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800751c:	51eb851f 	.word	0x51eb851f

08007520 <atan2>:
 8007520:	f000 b906 	b.w	8007730 <__ieee754_atan2>

08007524 <sqrt>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	ed2d 8b02 	vpush	{d8}
 800752a:	ec55 4b10 	vmov	r4, r5, d0
 800752e:	f000 f825 	bl	800757c <__ieee754_sqrt>
 8007532:	4622      	mov	r2, r4
 8007534:	462b      	mov	r3, r5
 8007536:	4620      	mov	r0, r4
 8007538:	4629      	mov	r1, r5
 800753a:	eeb0 8a40 	vmov.f32	s16, s0
 800753e:	eef0 8a60 	vmov.f32	s17, s1
 8007542:	f7f9 fb13 	bl	8000b6c <__aeabi_dcmpun>
 8007546:	b990      	cbnz	r0, 800756e <sqrt+0x4a>
 8007548:	2200      	movs	r2, #0
 800754a:	2300      	movs	r3, #0
 800754c:	4620      	mov	r0, r4
 800754e:	4629      	mov	r1, r5
 8007550:	f7f9 fae4 	bl	8000b1c <__aeabi_dcmplt>
 8007554:	b158      	cbz	r0, 800756e <sqrt+0x4a>
 8007556:	f001 fb37 	bl	8008bc8 <__errno>
 800755a:	2321      	movs	r3, #33	@ 0x21
 800755c:	6003      	str	r3, [r0, #0]
 800755e:	2200      	movs	r2, #0
 8007560:	2300      	movs	r3, #0
 8007562:	4610      	mov	r0, r2
 8007564:	4619      	mov	r1, r3
 8007566:	f7f9 f991 	bl	800088c <__aeabi_ddiv>
 800756a:	ec41 0b18 	vmov	d8, r0, r1
 800756e:	eeb0 0a48 	vmov.f32	s0, s16
 8007572:	eef0 0a68 	vmov.f32	s1, s17
 8007576:	ecbd 8b02 	vpop	{d8}
 800757a:	bd38      	pop	{r3, r4, r5, pc}

0800757c <__ieee754_sqrt>:
 800757c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	4a68      	ldr	r2, [pc, #416]	@ (8007724 <__ieee754_sqrt+0x1a8>)
 8007582:	ec55 4b10 	vmov	r4, r5, d0
 8007586:	43aa      	bics	r2, r5
 8007588:	462b      	mov	r3, r5
 800758a:	4621      	mov	r1, r4
 800758c:	d110      	bne.n	80075b0 <__ieee754_sqrt+0x34>
 800758e:	4622      	mov	r2, r4
 8007590:	4620      	mov	r0, r4
 8007592:	4629      	mov	r1, r5
 8007594:	f7f9 f850 	bl	8000638 <__aeabi_dmul>
 8007598:	4602      	mov	r2, r0
 800759a:	460b      	mov	r3, r1
 800759c:	4620      	mov	r0, r4
 800759e:	4629      	mov	r1, r5
 80075a0:	f7f8 fe94 	bl	80002cc <__adddf3>
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	ec45 4b10 	vmov	d0, r4, r5
 80075ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b0:	2d00      	cmp	r5, #0
 80075b2:	dc0e      	bgt.n	80075d2 <__ieee754_sqrt+0x56>
 80075b4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 80075b8:	4322      	orrs	r2, r4
 80075ba:	d0f5      	beq.n	80075a8 <__ieee754_sqrt+0x2c>
 80075bc:	b19d      	cbz	r5, 80075e6 <__ieee754_sqrt+0x6a>
 80075be:	4622      	mov	r2, r4
 80075c0:	4620      	mov	r0, r4
 80075c2:	4629      	mov	r1, r5
 80075c4:	f7f8 fe80 	bl	80002c8 <__aeabi_dsub>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	f7f9 f95e 	bl	800088c <__aeabi_ddiv>
 80075d0:	e7e8      	b.n	80075a4 <__ieee754_sqrt+0x28>
 80075d2:	152a      	asrs	r2, r5, #20
 80075d4:	d115      	bne.n	8007602 <__ieee754_sqrt+0x86>
 80075d6:	2000      	movs	r0, #0
 80075d8:	e009      	b.n	80075ee <__ieee754_sqrt+0x72>
 80075da:	0acb      	lsrs	r3, r1, #11
 80075dc:	3a15      	subs	r2, #21
 80075de:	0549      	lsls	r1, r1, #21
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0fa      	beq.n	80075da <__ieee754_sqrt+0x5e>
 80075e4:	e7f7      	b.n	80075d6 <__ieee754_sqrt+0x5a>
 80075e6:	462a      	mov	r2, r5
 80075e8:	e7fa      	b.n	80075e0 <__ieee754_sqrt+0x64>
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	3001      	adds	r0, #1
 80075ee:	02dc      	lsls	r4, r3, #11
 80075f0:	d5fb      	bpl.n	80075ea <__ieee754_sqrt+0x6e>
 80075f2:	1e44      	subs	r4, r0, #1
 80075f4:	1b12      	subs	r2, r2, r4
 80075f6:	f1c0 0420 	rsb	r4, r0, #32
 80075fa:	fa21 f404 	lsr.w	r4, r1, r4
 80075fe:	4323      	orrs	r3, r4
 8007600:	4081      	lsls	r1, r0
 8007602:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007606:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800760a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800760e:	07d2      	lsls	r2, r2, #31
 8007610:	bf5c      	itt	pl
 8007612:	005b      	lslpl	r3, r3, #1
 8007614:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007618:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800761c:	bf58      	it	pl
 800761e:	0049      	lslpl	r1, r1, #1
 8007620:	2600      	movs	r6, #0
 8007622:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007626:	106d      	asrs	r5, r5, #1
 8007628:	0049      	lsls	r1, r1, #1
 800762a:	2016      	movs	r0, #22
 800762c:	4632      	mov	r2, r6
 800762e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007632:	1917      	adds	r7, r2, r4
 8007634:	429f      	cmp	r7, r3
 8007636:	bfde      	ittt	le
 8007638:	193a      	addle	r2, r7, r4
 800763a:	1bdb      	suble	r3, r3, r7
 800763c:	1936      	addle	r6, r6, r4
 800763e:	0fcf      	lsrs	r7, r1, #31
 8007640:	3801      	subs	r0, #1
 8007642:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007646:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800764a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800764e:	d1f0      	bne.n	8007632 <__ieee754_sqrt+0xb6>
 8007650:	4604      	mov	r4, r0
 8007652:	2720      	movs	r7, #32
 8007654:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8007658:	429a      	cmp	r2, r3
 800765a:	eb00 0e0c 	add.w	lr, r0, ip
 800765e:	db02      	blt.n	8007666 <__ieee754_sqrt+0xea>
 8007660:	d113      	bne.n	800768a <__ieee754_sqrt+0x10e>
 8007662:	458e      	cmp	lr, r1
 8007664:	d811      	bhi.n	800768a <__ieee754_sqrt+0x10e>
 8007666:	f1be 0f00 	cmp.w	lr, #0
 800766a:	eb0e 000c 	add.w	r0, lr, ip
 800766e:	da42      	bge.n	80076f6 <__ieee754_sqrt+0x17a>
 8007670:	2800      	cmp	r0, #0
 8007672:	db40      	blt.n	80076f6 <__ieee754_sqrt+0x17a>
 8007674:	f102 0801 	add.w	r8, r2, #1
 8007678:	1a9b      	subs	r3, r3, r2
 800767a:	458e      	cmp	lr, r1
 800767c:	bf88      	it	hi
 800767e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007682:	eba1 010e 	sub.w	r1, r1, lr
 8007686:	4464      	add	r4, ip
 8007688:	4642      	mov	r2, r8
 800768a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800768e:	3f01      	subs	r7, #1
 8007690:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8007694:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007698:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800769c:	d1dc      	bne.n	8007658 <__ieee754_sqrt+0xdc>
 800769e:	4319      	orrs	r1, r3
 80076a0:	d01b      	beq.n	80076da <__ieee754_sqrt+0x15e>
 80076a2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007728 <__ieee754_sqrt+0x1ac>
 80076a6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800772c <__ieee754_sqrt+0x1b0>
 80076aa:	e9da 0100 	ldrd	r0, r1, [sl]
 80076ae:	e9db 2300 	ldrd	r2, r3, [fp]
 80076b2:	f7f8 fe09 	bl	80002c8 <__aeabi_dsub>
 80076b6:	e9da 8900 	ldrd	r8, r9, [sl]
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4640      	mov	r0, r8
 80076c0:	4649      	mov	r1, r9
 80076c2:	f7f9 fa35 	bl	8000b30 <__aeabi_dcmple>
 80076c6:	b140      	cbz	r0, 80076da <__ieee754_sqrt+0x15e>
 80076c8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80076cc:	e9da 0100 	ldrd	r0, r1, [sl]
 80076d0:	e9db 2300 	ldrd	r2, r3, [fp]
 80076d4:	d111      	bne.n	80076fa <__ieee754_sqrt+0x17e>
 80076d6:	3601      	adds	r6, #1
 80076d8:	463c      	mov	r4, r7
 80076da:	1072      	asrs	r2, r6, #1
 80076dc:	0863      	lsrs	r3, r4, #1
 80076de:	07f1      	lsls	r1, r6, #31
 80076e0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80076e4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80076e8:	bf48      	it	mi
 80076ea:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80076ee:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80076f2:	4618      	mov	r0, r3
 80076f4:	e756      	b.n	80075a4 <__ieee754_sqrt+0x28>
 80076f6:	4690      	mov	r8, r2
 80076f8:	e7be      	b.n	8007678 <__ieee754_sqrt+0xfc>
 80076fa:	f7f8 fde7 	bl	80002cc <__adddf3>
 80076fe:	e9da 8900 	ldrd	r8, r9, [sl]
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	4640      	mov	r0, r8
 8007708:	4649      	mov	r1, r9
 800770a:	f7f9 fa07 	bl	8000b1c <__aeabi_dcmplt>
 800770e:	b120      	cbz	r0, 800771a <__ieee754_sqrt+0x19e>
 8007710:	1ca0      	adds	r0, r4, #2
 8007712:	bf08      	it	eq
 8007714:	3601      	addeq	r6, #1
 8007716:	3402      	adds	r4, #2
 8007718:	e7df      	b.n	80076da <__ieee754_sqrt+0x15e>
 800771a:	1c63      	adds	r3, r4, #1
 800771c:	f023 0401 	bic.w	r4, r3, #1
 8007720:	e7db      	b.n	80076da <__ieee754_sqrt+0x15e>
 8007722:	bf00      	nop
 8007724:	7ff00000 	.word	0x7ff00000
 8007728:	20000018 	.word	0x20000018
 800772c:	20000010 	.word	0x20000010

08007730 <__ieee754_atan2>:
 8007730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007734:	ec57 6b11 	vmov	r6, r7, d1
 8007738:	4273      	negs	r3, r6
 800773a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 80078b8 <__ieee754_atan2+0x188>
 800773e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007742:	4333      	orrs	r3, r6
 8007744:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007748:	4543      	cmp	r3, r8
 800774a:	ec51 0b10 	vmov	r0, r1, d0
 800774e:	4635      	mov	r5, r6
 8007750:	d809      	bhi.n	8007766 <__ieee754_atan2+0x36>
 8007752:	4244      	negs	r4, r0
 8007754:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007758:	4304      	orrs	r4, r0
 800775a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800775e:	4544      	cmp	r4, r8
 8007760:	468e      	mov	lr, r1
 8007762:	4681      	mov	r9, r0
 8007764:	d907      	bls.n	8007776 <__ieee754_atan2+0x46>
 8007766:	4632      	mov	r2, r6
 8007768:	463b      	mov	r3, r7
 800776a:	f7f8 fdaf 	bl	80002cc <__adddf3>
 800776e:	ec41 0b10 	vmov	d0, r0, r1
 8007772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007776:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800777a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800777e:	4334      	orrs	r4, r6
 8007780:	d103      	bne.n	800778a <__ieee754_atan2+0x5a>
 8007782:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007786:	f000 b89b 	b.w	80078c0 <atan>
 800778a:	17bc      	asrs	r4, r7, #30
 800778c:	f004 0402 	and.w	r4, r4, #2
 8007790:	ea53 0909 	orrs.w	r9, r3, r9
 8007794:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8007798:	d107      	bne.n	80077aa <__ieee754_atan2+0x7a>
 800779a:	2c02      	cmp	r4, #2
 800779c:	d05f      	beq.n	800785e <__ieee754_atan2+0x12e>
 800779e:	2c03      	cmp	r4, #3
 80077a0:	d1e5      	bne.n	800776e <__ieee754_atan2+0x3e>
 80077a2:	a141      	add	r1, pc, #260	@ (adr r1, 80078a8 <__ieee754_atan2+0x178>)
 80077a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077a8:	e7e1      	b.n	800776e <__ieee754_atan2+0x3e>
 80077aa:	4315      	orrs	r5, r2
 80077ac:	d106      	bne.n	80077bc <__ieee754_atan2+0x8c>
 80077ae:	f1be 0f00 	cmp.w	lr, #0
 80077b2:	da5f      	bge.n	8007874 <__ieee754_atan2+0x144>
 80077b4:	a13e      	add	r1, pc, #248	@ (adr r1, 80078b0 <__ieee754_atan2+0x180>)
 80077b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077ba:	e7d8      	b.n	800776e <__ieee754_atan2+0x3e>
 80077bc:	4542      	cmp	r2, r8
 80077be:	d10f      	bne.n	80077e0 <__ieee754_atan2+0xb0>
 80077c0:	4293      	cmp	r3, r2
 80077c2:	f104 34ff 	add.w	r4, r4, #4294967295
 80077c6:	d107      	bne.n	80077d8 <__ieee754_atan2+0xa8>
 80077c8:	2c02      	cmp	r4, #2
 80077ca:	d84c      	bhi.n	8007866 <__ieee754_atan2+0x136>
 80077cc:	4b34      	ldr	r3, [pc, #208]	@ (80078a0 <__ieee754_atan2+0x170>)
 80077ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80077d6:	e7ca      	b.n	800776e <__ieee754_atan2+0x3e>
 80077d8:	2c02      	cmp	r4, #2
 80077da:	d848      	bhi.n	800786e <__ieee754_atan2+0x13e>
 80077dc:	4b31      	ldr	r3, [pc, #196]	@ (80078a4 <__ieee754_atan2+0x174>)
 80077de:	e7f6      	b.n	80077ce <__ieee754_atan2+0x9e>
 80077e0:	4543      	cmp	r3, r8
 80077e2:	d0e4      	beq.n	80077ae <__ieee754_atan2+0x7e>
 80077e4:	1a9b      	subs	r3, r3, r2
 80077e6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 80077ea:	ea4f 5223 	mov.w	r2, r3, asr #20
 80077ee:	da1e      	bge.n	800782e <__ieee754_atan2+0xfe>
 80077f0:	2f00      	cmp	r7, #0
 80077f2:	da01      	bge.n	80077f8 <__ieee754_atan2+0xc8>
 80077f4:	323c      	adds	r2, #60	@ 0x3c
 80077f6:	db1e      	blt.n	8007836 <__ieee754_atan2+0x106>
 80077f8:	4632      	mov	r2, r6
 80077fa:	463b      	mov	r3, r7
 80077fc:	f7f9 f846 	bl	800088c <__aeabi_ddiv>
 8007800:	ec41 0b10 	vmov	d0, r0, r1
 8007804:	f000 f9f4 	bl	8007bf0 <fabs>
 8007808:	f000 f85a 	bl	80078c0 <atan>
 800780c:	ec51 0b10 	vmov	r0, r1, d0
 8007810:	2c01      	cmp	r4, #1
 8007812:	d013      	beq.n	800783c <__ieee754_atan2+0x10c>
 8007814:	2c02      	cmp	r4, #2
 8007816:	d015      	beq.n	8007844 <__ieee754_atan2+0x114>
 8007818:	2c00      	cmp	r4, #0
 800781a:	d0a8      	beq.n	800776e <__ieee754_atan2+0x3e>
 800781c:	a318      	add	r3, pc, #96	@ (adr r3, 8007880 <__ieee754_atan2+0x150>)
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f7f8 fd51 	bl	80002c8 <__aeabi_dsub>
 8007826:	a318      	add	r3, pc, #96	@ (adr r3, 8007888 <__ieee754_atan2+0x158>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	e014      	b.n	8007858 <__ieee754_atan2+0x128>
 800782e:	a118      	add	r1, pc, #96	@ (adr r1, 8007890 <__ieee754_atan2+0x160>)
 8007830:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007834:	e7ec      	b.n	8007810 <__ieee754_atan2+0xe0>
 8007836:	2000      	movs	r0, #0
 8007838:	2100      	movs	r1, #0
 800783a:	e7e9      	b.n	8007810 <__ieee754_atan2+0xe0>
 800783c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007840:	4619      	mov	r1, r3
 8007842:	e794      	b.n	800776e <__ieee754_atan2+0x3e>
 8007844:	a30e      	add	r3, pc, #56	@ (adr r3, 8007880 <__ieee754_atan2+0x150>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f7f8 fd3d 	bl	80002c8 <__aeabi_dsub>
 800784e:	4602      	mov	r2, r0
 8007850:	460b      	mov	r3, r1
 8007852:	a10d      	add	r1, pc, #52	@ (adr r1, 8007888 <__ieee754_atan2+0x158>)
 8007854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007858:	f7f8 fd36 	bl	80002c8 <__aeabi_dsub>
 800785c:	e787      	b.n	800776e <__ieee754_atan2+0x3e>
 800785e:	a10a      	add	r1, pc, #40	@ (adr r1, 8007888 <__ieee754_atan2+0x158>)
 8007860:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007864:	e783      	b.n	800776e <__ieee754_atan2+0x3e>
 8007866:	a10c      	add	r1, pc, #48	@ (adr r1, 8007898 <__ieee754_atan2+0x168>)
 8007868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800786c:	e77f      	b.n	800776e <__ieee754_atan2+0x3e>
 800786e:	2000      	movs	r0, #0
 8007870:	2100      	movs	r1, #0
 8007872:	e77c      	b.n	800776e <__ieee754_atan2+0x3e>
 8007874:	a106      	add	r1, pc, #24	@ (adr r1, 8007890 <__ieee754_atan2+0x160>)
 8007876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800787a:	e778      	b.n	800776e <__ieee754_atan2+0x3e>
 800787c:	f3af 8000 	nop.w
 8007880:	33145c07 	.word	0x33145c07
 8007884:	3ca1a626 	.word	0x3ca1a626
 8007888:	54442d18 	.word	0x54442d18
 800788c:	400921fb 	.word	0x400921fb
 8007890:	54442d18 	.word	0x54442d18
 8007894:	3ff921fb 	.word	0x3ff921fb
 8007898:	54442d18 	.word	0x54442d18
 800789c:	3fe921fb 	.word	0x3fe921fb
 80078a0:	0800c318 	.word	0x0800c318
 80078a4:	0800c300 	.word	0x0800c300
 80078a8:	54442d18 	.word	0x54442d18
 80078ac:	c00921fb 	.word	0xc00921fb
 80078b0:	54442d18 	.word	0x54442d18
 80078b4:	bff921fb 	.word	0xbff921fb
 80078b8:	7ff00000 	.word	0x7ff00000
 80078bc:	00000000 	.word	0x00000000

080078c0 <atan>:
 80078c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c4:	ec55 4b10 	vmov	r4, r5, d0
 80078c8:	4bbf      	ldr	r3, [pc, #764]	@ (8007bc8 <atan+0x308>)
 80078ca:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80078ce:	429e      	cmp	r6, r3
 80078d0:	46ab      	mov	fp, r5
 80078d2:	d918      	bls.n	8007906 <atan+0x46>
 80078d4:	4bbd      	ldr	r3, [pc, #756]	@ (8007bcc <atan+0x30c>)
 80078d6:	429e      	cmp	r6, r3
 80078d8:	d801      	bhi.n	80078de <atan+0x1e>
 80078da:	d109      	bne.n	80078f0 <atan+0x30>
 80078dc:	b144      	cbz	r4, 80078f0 <atan+0x30>
 80078de:	4622      	mov	r2, r4
 80078e0:	462b      	mov	r3, r5
 80078e2:	4620      	mov	r0, r4
 80078e4:	4629      	mov	r1, r5
 80078e6:	f7f8 fcf1 	bl	80002cc <__adddf3>
 80078ea:	4604      	mov	r4, r0
 80078ec:	460d      	mov	r5, r1
 80078ee:	e006      	b.n	80078fe <atan+0x3e>
 80078f0:	f1bb 0f00 	cmp.w	fp, #0
 80078f4:	f340 812b 	ble.w	8007b4e <atan+0x28e>
 80078f8:	a597      	add	r5, pc, #604	@ (adr r5, 8007b58 <atan+0x298>)
 80078fa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80078fe:	ec45 4b10 	vmov	d0, r4, r5
 8007902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	4bb2      	ldr	r3, [pc, #712]	@ (8007bd0 <atan+0x310>)
 8007908:	429e      	cmp	r6, r3
 800790a:	d813      	bhi.n	8007934 <atan+0x74>
 800790c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007910:	429e      	cmp	r6, r3
 8007912:	d80c      	bhi.n	800792e <atan+0x6e>
 8007914:	a392      	add	r3, pc, #584	@ (adr r3, 8007b60 <atan+0x2a0>)
 8007916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791a:	4620      	mov	r0, r4
 800791c:	4629      	mov	r1, r5
 800791e:	f7f8 fcd5 	bl	80002cc <__adddf3>
 8007922:	4bac      	ldr	r3, [pc, #688]	@ (8007bd4 <atan+0x314>)
 8007924:	2200      	movs	r2, #0
 8007926:	f7f9 f917 	bl	8000b58 <__aeabi_dcmpgt>
 800792a:	2800      	cmp	r0, #0
 800792c:	d1e7      	bne.n	80078fe <atan+0x3e>
 800792e:	f04f 3aff 	mov.w	sl, #4294967295
 8007932:	e029      	b.n	8007988 <atan+0xc8>
 8007934:	f000 f95c 	bl	8007bf0 <fabs>
 8007938:	4ba7      	ldr	r3, [pc, #668]	@ (8007bd8 <atan+0x318>)
 800793a:	429e      	cmp	r6, r3
 800793c:	ec55 4b10 	vmov	r4, r5, d0
 8007940:	f200 80bc 	bhi.w	8007abc <atan+0x1fc>
 8007944:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007948:	429e      	cmp	r6, r3
 800794a:	f200 809e 	bhi.w	8007a8a <atan+0x1ca>
 800794e:	4622      	mov	r2, r4
 8007950:	462b      	mov	r3, r5
 8007952:	4620      	mov	r0, r4
 8007954:	4629      	mov	r1, r5
 8007956:	f7f8 fcb9 	bl	80002cc <__adddf3>
 800795a:	4b9e      	ldr	r3, [pc, #632]	@ (8007bd4 <atan+0x314>)
 800795c:	2200      	movs	r2, #0
 800795e:	f7f8 fcb3 	bl	80002c8 <__aeabi_dsub>
 8007962:	2200      	movs	r2, #0
 8007964:	4606      	mov	r6, r0
 8007966:	460f      	mov	r7, r1
 8007968:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800796c:	4620      	mov	r0, r4
 800796e:	4629      	mov	r1, r5
 8007970:	f7f8 fcac 	bl	80002cc <__adddf3>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	4630      	mov	r0, r6
 800797a:	4639      	mov	r1, r7
 800797c:	f7f8 ff86 	bl	800088c <__aeabi_ddiv>
 8007980:	f04f 0a00 	mov.w	sl, #0
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	4622      	mov	r2, r4
 800798a:	462b      	mov	r3, r5
 800798c:	4620      	mov	r0, r4
 800798e:	4629      	mov	r1, r5
 8007990:	f7f8 fe52 	bl	8000638 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	4680      	mov	r8, r0
 800799a:	4689      	mov	r9, r1
 800799c:	f7f8 fe4c 	bl	8000638 <__aeabi_dmul>
 80079a0:	a371      	add	r3, pc, #452	@ (adr r3, 8007b68 <atan+0x2a8>)
 80079a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a6:	4606      	mov	r6, r0
 80079a8:	460f      	mov	r7, r1
 80079aa:	f7f8 fe45 	bl	8000638 <__aeabi_dmul>
 80079ae:	a370      	add	r3, pc, #448	@ (adr r3, 8007b70 <atan+0x2b0>)
 80079b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b4:	f7f8 fc8a 	bl	80002cc <__adddf3>
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	f7f8 fe3c 	bl	8000638 <__aeabi_dmul>
 80079c0:	a36d      	add	r3, pc, #436	@ (adr r3, 8007b78 <atan+0x2b8>)
 80079c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c6:	f7f8 fc81 	bl	80002cc <__adddf3>
 80079ca:	4632      	mov	r2, r6
 80079cc:	463b      	mov	r3, r7
 80079ce:	f7f8 fe33 	bl	8000638 <__aeabi_dmul>
 80079d2:	a36b      	add	r3, pc, #428	@ (adr r3, 8007b80 <atan+0x2c0>)
 80079d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d8:	f7f8 fc78 	bl	80002cc <__adddf3>
 80079dc:	4632      	mov	r2, r6
 80079de:	463b      	mov	r3, r7
 80079e0:	f7f8 fe2a 	bl	8000638 <__aeabi_dmul>
 80079e4:	a368      	add	r3, pc, #416	@ (adr r3, 8007b88 <atan+0x2c8>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f7f8 fc6f 	bl	80002cc <__adddf3>
 80079ee:	4632      	mov	r2, r6
 80079f0:	463b      	mov	r3, r7
 80079f2:	f7f8 fe21 	bl	8000638 <__aeabi_dmul>
 80079f6:	a366      	add	r3, pc, #408	@ (adr r3, 8007b90 <atan+0x2d0>)
 80079f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fc:	f7f8 fc66 	bl	80002cc <__adddf3>
 8007a00:	4642      	mov	r2, r8
 8007a02:	464b      	mov	r3, r9
 8007a04:	f7f8 fe18 	bl	8000638 <__aeabi_dmul>
 8007a08:	a363      	add	r3, pc, #396	@ (adr r3, 8007b98 <atan+0x2d8>)
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	4680      	mov	r8, r0
 8007a10:	4689      	mov	r9, r1
 8007a12:	4630      	mov	r0, r6
 8007a14:	4639      	mov	r1, r7
 8007a16:	f7f8 fe0f 	bl	8000638 <__aeabi_dmul>
 8007a1a:	a361      	add	r3, pc, #388	@ (adr r3, 8007ba0 <atan+0x2e0>)
 8007a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a20:	f7f8 fc52 	bl	80002c8 <__aeabi_dsub>
 8007a24:	4632      	mov	r2, r6
 8007a26:	463b      	mov	r3, r7
 8007a28:	f7f8 fe06 	bl	8000638 <__aeabi_dmul>
 8007a2c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007ba8 <atan+0x2e8>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	f7f8 fc49 	bl	80002c8 <__aeabi_dsub>
 8007a36:	4632      	mov	r2, r6
 8007a38:	463b      	mov	r3, r7
 8007a3a:	f7f8 fdfd 	bl	8000638 <__aeabi_dmul>
 8007a3e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007bb0 <atan+0x2f0>)
 8007a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a44:	f7f8 fc40 	bl	80002c8 <__aeabi_dsub>
 8007a48:	4632      	mov	r2, r6
 8007a4a:	463b      	mov	r3, r7
 8007a4c:	f7f8 fdf4 	bl	8000638 <__aeabi_dmul>
 8007a50:	a359      	add	r3, pc, #356	@ (adr r3, 8007bb8 <atan+0x2f8>)
 8007a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a56:	f7f8 fc37 	bl	80002c8 <__aeabi_dsub>
 8007a5a:	4632      	mov	r2, r6
 8007a5c:	463b      	mov	r3, r7
 8007a5e:	f7f8 fdeb 	bl	8000638 <__aeabi_dmul>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4640      	mov	r0, r8
 8007a68:	4649      	mov	r1, r9
 8007a6a:	f7f8 fc2f 	bl	80002cc <__adddf3>
 8007a6e:	4622      	mov	r2, r4
 8007a70:	462b      	mov	r3, r5
 8007a72:	f7f8 fde1 	bl	8000638 <__aeabi_dmul>
 8007a76:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	d148      	bne.n	8007b12 <atan+0x252>
 8007a80:	4620      	mov	r0, r4
 8007a82:	4629      	mov	r1, r5
 8007a84:	f7f8 fc20 	bl	80002c8 <__aeabi_dsub>
 8007a88:	e72f      	b.n	80078ea <atan+0x2a>
 8007a8a:	4b52      	ldr	r3, [pc, #328]	@ (8007bd4 <atan+0x314>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	4620      	mov	r0, r4
 8007a90:	4629      	mov	r1, r5
 8007a92:	f7f8 fc19 	bl	80002c8 <__aeabi_dsub>
 8007a96:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd4 <atan+0x314>)
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	4629      	mov	r1, r5
 8007aa2:	f7f8 fc13 	bl	80002cc <__adddf3>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	4630      	mov	r0, r6
 8007aac:	4639      	mov	r1, r7
 8007aae:	f7f8 feed 	bl	800088c <__aeabi_ddiv>
 8007ab2:	f04f 0a01 	mov.w	sl, #1
 8007ab6:	4604      	mov	r4, r0
 8007ab8:	460d      	mov	r5, r1
 8007aba:	e765      	b.n	8007988 <atan+0xc8>
 8007abc:	4b47      	ldr	r3, [pc, #284]	@ (8007bdc <atan+0x31c>)
 8007abe:	429e      	cmp	r6, r3
 8007ac0:	d21c      	bcs.n	8007afc <atan+0x23c>
 8007ac2:	4b47      	ldr	r3, [pc, #284]	@ (8007be0 <atan+0x320>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4620      	mov	r0, r4
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7f8 fbfd 	bl	80002c8 <__aeabi_dsub>
 8007ace:	4b44      	ldr	r3, [pc, #272]	@ (8007be0 <atan+0x320>)
 8007ad0:	4606      	mov	r6, r0
 8007ad2:	460f      	mov	r7, r1
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f8 fdad 	bl	8000638 <__aeabi_dmul>
 8007ade:	4b3d      	ldr	r3, [pc, #244]	@ (8007bd4 <atan+0x314>)
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f7f8 fbf3 	bl	80002cc <__adddf3>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4630      	mov	r0, r6
 8007aec:	4639      	mov	r1, r7
 8007aee:	f7f8 fecd 	bl	800088c <__aeabi_ddiv>
 8007af2:	f04f 0a02 	mov.w	sl, #2
 8007af6:	4604      	mov	r4, r0
 8007af8:	460d      	mov	r5, r1
 8007afa:	e745      	b.n	8007988 <atan+0xc8>
 8007afc:	4622      	mov	r2, r4
 8007afe:	462b      	mov	r3, r5
 8007b00:	4938      	ldr	r1, [pc, #224]	@ (8007be4 <atan+0x324>)
 8007b02:	2000      	movs	r0, #0
 8007b04:	f7f8 fec2 	bl	800088c <__aeabi_ddiv>
 8007b08:	f04f 0a03 	mov.w	sl, #3
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	460d      	mov	r5, r1
 8007b10:	e73a      	b.n	8007988 <atan+0xc8>
 8007b12:	4b35      	ldr	r3, [pc, #212]	@ (8007be8 <atan+0x328>)
 8007b14:	4e35      	ldr	r6, [pc, #212]	@ (8007bec <atan+0x32c>)
 8007b16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	f7f8 fbd3 	bl	80002c8 <__aeabi_dsub>
 8007b22:	4622      	mov	r2, r4
 8007b24:	462b      	mov	r3, r5
 8007b26:	f7f8 fbcf 	bl	80002c8 <__aeabi_dsub>
 8007b2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007b36:	f7f8 fbc7 	bl	80002c8 <__aeabi_dsub>
 8007b3a:	f1bb 0f00 	cmp.w	fp, #0
 8007b3e:	4604      	mov	r4, r0
 8007b40:	460d      	mov	r5, r1
 8007b42:	f6bf aedc 	bge.w	80078fe <atan+0x3e>
 8007b46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b4a:	461d      	mov	r5, r3
 8007b4c:	e6d7      	b.n	80078fe <atan+0x3e>
 8007b4e:	a51c      	add	r5, pc, #112	@ (adr r5, 8007bc0 <atan+0x300>)
 8007b50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b54:	e6d3      	b.n	80078fe <atan+0x3e>
 8007b56:	bf00      	nop
 8007b58:	54442d18 	.word	0x54442d18
 8007b5c:	3ff921fb 	.word	0x3ff921fb
 8007b60:	8800759c 	.word	0x8800759c
 8007b64:	7e37e43c 	.word	0x7e37e43c
 8007b68:	e322da11 	.word	0xe322da11
 8007b6c:	3f90ad3a 	.word	0x3f90ad3a
 8007b70:	24760deb 	.word	0x24760deb
 8007b74:	3fa97b4b 	.word	0x3fa97b4b
 8007b78:	a0d03d51 	.word	0xa0d03d51
 8007b7c:	3fb10d66 	.word	0x3fb10d66
 8007b80:	c54c206e 	.word	0xc54c206e
 8007b84:	3fb745cd 	.word	0x3fb745cd
 8007b88:	920083ff 	.word	0x920083ff
 8007b8c:	3fc24924 	.word	0x3fc24924
 8007b90:	5555550d 	.word	0x5555550d
 8007b94:	3fd55555 	.word	0x3fd55555
 8007b98:	2c6a6c2f 	.word	0x2c6a6c2f
 8007b9c:	bfa2b444 	.word	0xbfa2b444
 8007ba0:	52defd9a 	.word	0x52defd9a
 8007ba4:	3fadde2d 	.word	0x3fadde2d
 8007ba8:	af749a6d 	.word	0xaf749a6d
 8007bac:	3fb3b0f2 	.word	0x3fb3b0f2
 8007bb0:	fe231671 	.word	0xfe231671
 8007bb4:	3fbc71c6 	.word	0x3fbc71c6
 8007bb8:	9998ebc4 	.word	0x9998ebc4
 8007bbc:	3fc99999 	.word	0x3fc99999
 8007bc0:	54442d18 	.word	0x54442d18
 8007bc4:	bff921fb 	.word	0xbff921fb
 8007bc8:	440fffff 	.word	0x440fffff
 8007bcc:	7ff00000 	.word	0x7ff00000
 8007bd0:	3fdbffff 	.word	0x3fdbffff
 8007bd4:	3ff00000 	.word	0x3ff00000
 8007bd8:	3ff2ffff 	.word	0x3ff2ffff
 8007bdc:	40038000 	.word	0x40038000
 8007be0:	3ff80000 	.word	0x3ff80000
 8007be4:	bff00000 	.word	0xbff00000
 8007be8:	0800c330 	.word	0x0800c330
 8007bec:	0800c350 	.word	0x0800c350

08007bf0 <fabs>:
 8007bf0:	ec51 0b10 	vmov	r0, r1, d0
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007bfa:	ec43 2b10 	vmov	d0, r2, r3
 8007bfe:	4770      	bx	lr

08007c00 <__cvt>:
 8007c00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	ec57 6b10 	vmov	r6, r7, d0
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	460c      	mov	r4, r1
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	463b      	mov	r3, r7
 8007c10:	bfbb      	ittet	lt
 8007c12:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c16:	461f      	movlt	r7, r3
 8007c18:	2300      	movge	r3, #0
 8007c1a:	232d      	movlt	r3, #45	@ 0x2d
 8007c1c:	700b      	strb	r3, [r1, #0]
 8007c1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c20:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c24:	4691      	mov	r9, r2
 8007c26:	f023 0820 	bic.w	r8, r3, #32
 8007c2a:	bfbc      	itt	lt
 8007c2c:	4632      	movlt	r2, r6
 8007c2e:	4616      	movlt	r6, r2
 8007c30:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c34:	d005      	beq.n	8007c42 <__cvt+0x42>
 8007c36:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c3a:	d100      	bne.n	8007c3e <__cvt+0x3e>
 8007c3c:	3401      	adds	r4, #1
 8007c3e:	2102      	movs	r1, #2
 8007c40:	e000      	b.n	8007c44 <__cvt+0x44>
 8007c42:	2103      	movs	r1, #3
 8007c44:	ab03      	add	r3, sp, #12
 8007c46:	9301      	str	r3, [sp, #4]
 8007c48:	ab02      	add	r3, sp, #8
 8007c4a:	9300      	str	r3, [sp, #0]
 8007c4c:	ec47 6b10 	vmov	d0, r6, r7
 8007c50:	4653      	mov	r3, sl
 8007c52:	4622      	mov	r2, r4
 8007c54:	f001 f874 	bl	8008d40 <_dtoa_r>
 8007c58:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	d119      	bne.n	8007c94 <__cvt+0x94>
 8007c60:	f019 0f01 	tst.w	r9, #1
 8007c64:	d00e      	beq.n	8007c84 <__cvt+0x84>
 8007c66:	eb00 0904 	add.w	r9, r0, r4
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4630      	mov	r0, r6
 8007c70:	4639      	mov	r1, r7
 8007c72:	f7f8 ff49 	bl	8000b08 <__aeabi_dcmpeq>
 8007c76:	b108      	cbz	r0, 8007c7c <__cvt+0x7c>
 8007c78:	f8cd 900c 	str.w	r9, [sp, #12]
 8007c7c:	2230      	movs	r2, #48	@ 0x30
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	454b      	cmp	r3, r9
 8007c82:	d31e      	bcc.n	8007cc2 <__cvt+0xc2>
 8007c84:	9b03      	ldr	r3, [sp, #12]
 8007c86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c88:	1b5b      	subs	r3, r3, r5
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	b004      	add	sp, #16
 8007c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c98:	eb00 0904 	add.w	r9, r0, r4
 8007c9c:	d1e5      	bne.n	8007c6a <__cvt+0x6a>
 8007c9e:	7803      	ldrb	r3, [r0, #0]
 8007ca0:	2b30      	cmp	r3, #48	@ 0x30
 8007ca2:	d10a      	bne.n	8007cba <__cvt+0xba>
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4630      	mov	r0, r6
 8007caa:	4639      	mov	r1, r7
 8007cac:	f7f8 ff2c 	bl	8000b08 <__aeabi_dcmpeq>
 8007cb0:	b918      	cbnz	r0, 8007cba <__cvt+0xba>
 8007cb2:	f1c4 0401 	rsb	r4, r4, #1
 8007cb6:	f8ca 4000 	str.w	r4, [sl]
 8007cba:	f8da 3000 	ldr.w	r3, [sl]
 8007cbe:	4499      	add	r9, r3
 8007cc0:	e7d3      	b.n	8007c6a <__cvt+0x6a>
 8007cc2:	1c59      	adds	r1, r3, #1
 8007cc4:	9103      	str	r1, [sp, #12]
 8007cc6:	701a      	strb	r2, [r3, #0]
 8007cc8:	e7d9      	b.n	8007c7e <__cvt+0x7e>

08007cca <__exponent>:
 8007cca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	bfba      	itte	lt
 8007cd0:	4249      	neglt	r1, r1
 8007cd2:	232d      	movlt	r3, #45	@ 0x2d
 8007cd4:	232b      	movge	r3, #43	@ 0x2b
 8007cd6:	2909      	cmp	r1, #9
 8007cd8:	7002      	strb	r2, [r0, #0]
 8007cda:	7043      	strb	r3, [r0, #1]
 8007cdc:	dd29      	ble.n	8007d32 <__exponent+0x68>
 8007cde:	f10d 0307 	add.w	r3, sp, #7
 8007ce2:	461d      	mov	r5, r3
 8007ce4:	270a      	movs	r7, #10
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	fbb1 f6f7 	udiv	r6, r1, r7
 8007cec:	fb07 1416 	mls	r4, r7, r6, r1
 8007cf0:	3430      	adds	r4, #48	@ 0x30
 8007cf2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	2c63      	cmp	r4, #99	@ 0x63
 8007cfa:	f103 33ff 	add.w	r3, r3, #4294967295
 8007cfe:	4631      	mov	r1, r6
 8007d00:	dcf1      	bgt.n	8007ce6 <__exponent+0x1c>
 8007d02:	3130      	adds	r1, #48	@ 0x30
 8007d04:	1e94      	subs	r4, r2, #2
 8007d06:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d0a:	1c41      	adds	r1, r0, #1
 8007d0c:	4623      	mov	r3, r4
 8007d0e:	42ab      	cmp	r3, r5
 8007d10:	d30a      	bcc.n	8007d28 <__exponent+0x5e>
 8007d12:	f10d 0309 	add.w	r3, sp, #9
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ac      	cmp	r4, r5
 8007d1a:	bf88      	it	hi
 8007d1c:	2300      	movhi	r3, #0
 8007d1e:	3302      	adds	r3, #2
 8007d20:	4403      	add	r3, r0
 8007d22:	1a18      	subs	r0, r3, r0
 8007d24:	b003      	add	sp, #12
 8007d26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d28:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d2c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d30:	e7ed      	b.n	8007d0e <__exponent+0x44>
 8007d32:	2330      	movs	r3, #48	@ 0x30
 8007d34:	3130      	adds	r1, #48	@ 0x30
 8007d36:	7083      	strb	r3, [r0, #2]
 8007d38:	70c1      	strb	r1, [r0, #3]
 8007d3a:	1d03      	adds	r3, r0, #4
 8007d3c:	e7f1      	b.n	8007d22 <__exponent+0x58>
	...

08007d40 <_printf_float>:
 8007d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d44:	b08d      	sub	sp, #52	@ 0x34
 8007d46:	460c      	mov	r4, r1
 8007d48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	461f      	mov	r7, r3
 8007d50:	4605      	mov	r5, r0
 8007d52:	f000 feef 	bl	8008b34 <_localeconv_r>
 8007d56:	6803      	ldr	r3, [r0, #0]
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7f8 faa8 	bl	80002b0 <strlen>
 8007d60:	2300      	movs	r3, #0
 8007d62:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d64:	f8d8 3000 	ldr.w	r3, [r8]
 8007d68:	9005      	str	r0, [sp, #20]
 8007d6a:	3307      	adds	r3, #7
 8007d6c:	f023 0307 	bic.w	r3, r3, #7
 8007d70:	f103 0208 	add.w	r2, r3, #8
 8007d74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007d78:	f8d4 b000 	ldr.w	fp, [r4]
 8007d7c:	f8c8 2000 	str.w	r2, [r8]
 8007d80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007d84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007d88:	9307      	str	r3, [sp, #28]
 8007d8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007d8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d96:	4b9c      	ldr	r3, [pc, #624]	@ (8008008 <_printf_float+0x2c8>)
 8007d98:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9c:	f7f8 fee6 	bl	8000b6c <__aeabi_dcmpun>
 8007da0:	bb70      	cbnz	r0, 8007e00 <_printf_float+0xc0>
 8007da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007da6:	4b98      	ldr	r3, [pc, #608]	@ (8008008 <_printf_float+0x2c8>)
 8007da8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dac:	f7f8 fec0 	bl	8000b30 <__aeabi_dcmple>
 8007db0:	bb30      	cbnz	r0, 8007e00 <_printf_float+0xc0>
 8007db2:	2200      	movs	r2, #0
 8007db4:	2300      	movs	r3, #0
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 feaf 	bl	8000b1c <__aeabi_dcmplt>
 8007dbe:	b110      	cbz	r0, 8007dc6 <_printf_float+0x86>
 8007dc0:	232d      	movs	r3, #45	@ 0x2d
 8007dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dc6:	4a91      	ldr	r2, [pc, #580]	@ (800800c <_printf_float+0x2cc>)
 8007dc8:	4b91      	ldr	r3, [pc, #580]	@ (8008010 <_printf_float+0x2d0>)
 8007dca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007dce:	bf94      	ite	ls
 8007dd0:	4690      	movls	r8, r2
 8007dd2:	4698      	movhi	r8, r3
 8007dd4:	2303      	movs	r3, #3
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	f02b 0304 	bic.w	r3, fp, #4
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	f04f 0900 	mov.w	r9, #0
 8007de2:	9700      	str	r7, [sp, #0]
 8007de4:	4633      	mov	r3, r6
 8007de6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007de8:	4621      	mov	r1, r4
 8007dea:	4628      	mov	r0, r5
 8007dec:	f000 f9d2 	bl	8008194 <_printf_common>
 8007df0:	3001      	adds	r0, #1
 8007df2:	f040 808d 	bne.w	8007f10 <_printf_float+0x1d0>
 8007df6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfa:	b00d      	add	sp, #52	@ 0x34
 8007dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e00:	4642      	mov	r2, r8
 8007e02:	464b      	mov	r3, r9
 8007e04:	4640      	mov	r0, r8
 8007e06:	4649      	mov	r1, r9
 8007e08:	f7f8 feb0 	bl	8000b6c <__aeabi_dcmpun>
 8007e0c:	b140      	cbz	r0, 8007e20 <_printf_float+0xe0>
 8007e0e:	464b      	mov	r3, r9
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	bfbc      	itt	lt
 8007e14:	232d      	movlt	r3, #45	@ 0x2d
 8007e16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8008014 <_printf_float+0x2d4>)
 8007e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8008018 <_printf_float+0x2d8>)
 8007e1e:	e7d4      	b.n	8007dca <_printf_float+0x8a>
 8007e20:	6863      	ldr	r3, [r4, #4]
 8007e22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e26:	9206      	str	r2, [sp, #24]
 8007e28:	1c5a      	adds	r2, r3, #1
 8007e2a:	d13b      	bne.n	8007ea4 <_printf_float+0x164>
 8007e2c:	2306      	movs	r3, #6
 8007e2e:	6063      	str	r3, [r4, #4]
 8007e30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e34:	2300      	movs	r3, #0
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	9303      	str	r3, [sp, #12]
 8007e3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e40:	ab09      	add	r3, sp, #36	@ 0x24
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	6861      	ldr	r1, [r4, #4]
 8007e46:	ec49 8b10 	vmov	d0, r8, r9
 8007e4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007e4e:	4628      	mov	r0, r5
 8007e50:	f7ff fed6 	bl	8007c00 <__cvt>
 8007e54:	9b06      	ldr	r3, [sp, #24]
 8007e56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e58:	2b47      	cmp	r3, #71	@ 0x47
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	d129      	bne.n	8007eb2 <_printf_float+0x172>
 8007e5e:	1cc8      	adds	r0, r1, #3
 8007e60:	db02      	blt.n	8007e68 <_printf_float+0x128>
 8007e62:	6863      	ldr	r3, [r4, #4]
 8007e64:	4299      	cmp	r1, r3
 8007e66:	dd41      	ble.n	8007eec <_printf_float+0x1ac>
 8007e68:	f1aa 0a02 	sub.w	sl, sl, #2
 8007e6c:	fa5f fa8a 	uxtb.w	sl, sl
 8007e70:	3901      	subs	r1, #1
 8007e72:	4652      	mov	r2, sl
 8007e74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007e78:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e7a:	f7ff ff26 	bl	8007cca <__exponent>
 8007e7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e80:	1813      	adds	r3, r2, r0
 8007e82:	2a01      	cmp	r2, #1
 8007e84:	4681      	mov	r9, r0
 8007e86:	6123      	str	r3, [r4, #16]
 8007e88:	dc02      	bgt.n	8007e90 <_printf_float+0x150>
 8007e8a:	6822      	ldr	r2, [r4, #0]
 8007e8c:	07d2      	lsls	r2, r2, #31
 8007e8e:	d501      	bpl.n	8007e94 <_printf_float+0x154>
 8007e90:	3301      	adds	r3, #1
 8007e92:	6123      	str	r3, [r4, #16]
 8007e94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0a2      	beq.n	8007de2 <_printf_float+0xa2>
 8007e9c:	232d      	movs	r3, #45	@ 0x2d
 8007e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ea2:	e79e      	b.n	8007de2 <_printf_float+0xa2>
 8007ea4:	9a06      	ldr	r2, [sp, #24]
 8007ea6:	2a47      	cmp	r2, #71	@ 0x47
 8007ea8:	d1c2      	bne.n	8007e30 <_printf_float+0xf0>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1c0      	bne.n	8007e30 <_printf_float+0xf0>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7bd      	b.n	8007e2e <_printf_float+0xee>
 8007eb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007eb6:	d9db      	bls.n	8007e70 <_printf_float+0x130>
 8007eb8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ebc:	d118      	bne.n	8007ef0 <_printf_float+0x1b0>
 8007ebe:	2900      	cmp	r1, #0
 8007ec0:	6863      	ldr	r3, [r4, #4]
 8007ec2:	dd0b      	ble.n	8007edc <_printf_float+0x19c>
 8007ec4:	6121      	str	r1, [r4, #16]
 8007ec6:	b913      	cbnz	r3, 8007ece <_printf_float+0x18e>
 8007ec8:	6822      	ldr	r2, [r4, #0]
 8007eca:	07d0      	lsls	r0, r2, #31
 8007ecc:	d502      	bpl.n	8007ed4 <_printf_float+0x194>
 8007ece:	3301      	adds	r3, #1
 8007ed0:	440b      	add	r3, r1
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ed6:	f04f 0900 	mov.w	r9, #0
 8007eda:	e7db      	b.n	8007e94 <_printf_float+0x154>
 8007edc:	b913      	cbnz	r3, 8007ee4 <_printf_float+0x1a4>
 8007ede:	6822      	ldr	r2, [r4, #0]
 8007ee0:	07d2      	lsls	r2, r2, #31
 8007ee2:	d501      	bpl.n	8007ee8 <_printf_float+0x1a8>
 8007ee4:	3302      	adds	r3, #2
 8007ee6:	e7f4      	b.n	8007ed2 <_printf_float+0x192>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e7f2      	b.n	8007ed2 <_printf_float+0x192>
 8007eec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ef2:	4299      	cmp	r1, r3
 8007ef4:	db05      	blt.n	8007f02 <_printf_float+0x1c2>
 8007ef6:	6823      	ldr	r3, [r4, #0]
 8007ef8:	6121      	str	r1, [r4, #16]
 8007efa:	07d8      	lsls	r0, r3, #31
 8007efc:	d5ea      	bpl.n	8007ed4 <_printf_float+0x194>
 8007efe:	1c4b      	adds	r3, r1, #1
 8007f00:	e7e7      	b.n	8007ed2 <_printf_float+0x192>
 8007f02:	2900      	cmp	r1, #0
 8007f04:	bfd4      	ite	le
 8007f06:	f1c1 0202 	rsble	r2, r1, #2
 8007f0a:	2201      	movgt	r2, #1
 8007f0c:	4413      	add	r3, r2
 8007f0e:	e7e0      	b.n	8007ed2 <_printf_float+0x192>
 8007f10:	6823      	ldr	r3, [r4, #0]
 8007f12:	055a      	lsls	r2, r3, #21
 8007f14:	d407      	bmi.n	8007f26 <_printf_float+0x1e6>
 8007f16:	6923      	ldr	r3, [r4, #16]
 8007f18:	4642      	mov	r2, r8
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	47b8      	blx	r7
 8007f20:	3001      	adds	r0, #1
 8007f22:	d12b      	bne.n	8007f7c <_printf_float+0x23c>
 8007f24:	e767      	b.n	8007df6 <_printf_float+0xb6>
 8007f26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f2a:	f240 80dd 	bls.w	80080e8 <_printf_float+0x3a8>
 8007f2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f32:	2200      	movs	r2, #0
 8007f34:	2300      	movs	r3, #0
 8007f36:	f7f8 fde7 	bl	8000b08 <__aeabi_dcmpeq>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d033      	beq.n	8007fa6 <_printf_float+0x266>
 8007f3e:	4a37      	ldr	r2, [pc, #220]	@ (800801c <_printf_float+0x2dc>)
 8007f40:	2301      	movs	r3, #1
 8007f42:	4631      	mov	r1, r6
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b8      	blx	r7
 8007f48:	3001      	adds	r0, #1
 8007f4a:	f43f af54 	beq.w	8007df6 <_printf_float+0xb6>
 8007f4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007f52:	4543      	cmp	r3, r8
 8007f54:	db02      	blt.n	8007f5c <_printf_float+0x21c>
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	07d8      	lsls	r0, r3, #31
 8007f5a:	d50f      	bpl.n	8007f7c <_printf_float+0x23c>
 8007f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f60:	4631      	mov	r1, r6
 8007f62:	4628      	mov	r0, r5
 8007f64:	47b8      	blx	r7
 8007f66:	3001      	adds	r0, #1
 8007f68:	f43f af45 	beq.w	8007df6 <_printf_float+0xb6>
 8007f6c:	f04f 0900 	mov.w	r9, #0
 8007f70:	f108 38ff 	add.w	r8, r8, #4294967295
 8007f74:	f104 0a1a 	add.w	sl, r4, #26
 8007f78:	45c8      	cmp	r8, r9
 8007f7a:	dc09      	bgt.n	8007f90 <_printf_float+0x250>
 8007f7c:	6823      	ldr	r3, [r4, #0]
 8007f7e:	079b      	lsls	r3, r3, #30
 8007f80:	f100 8103 	bmi.w	800818a <_printf_float+0x44a>
 8007f84:	68e0      	ldr	r0, [r4, #12]
 8007f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f88:	4298      	cmp	r0, r3
 8007f8a:	bfb8      	it	lt
 8007f8c:	4618      	movlt	r0, r3
 8007f8e:	e734      	b.n	8007dfa <_printf_float+0xba>
 8007f90:	2301      	movs	r3, #1
 8007f92:	4652      	mov	r2, sl
 8007f94:	4631      	mov	r1, r6
 8007f96:	4628      	mov	r0, r5
 8007f98:	47b8      	blx	r7
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	f43f af2b 	beq.w	8007df6 <_printf_float+0xb6>
 8007fa0:	f109 0901 	add.w	r9, r9, #1
 8007fa4:	e7e8      	b.n	8007f78 <_printf_float+0x238>
 8007fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	dc39      	bgt.n	8008020 <_printf_float+0x2e0>
 8007fac:	4a1b      	ldr	r2, [pc, #108]	@ (800801c <_printf_float+0x2dc>)
 8007fae:	2301      	movs	r3, #1
 8007fb0:	4631      	mov	r1, r6
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	47b8      	blx	r7
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	f43f af1d 	beq.w	8007df6 <_printf_float+0xb6>
 8007fbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007fc0:	ea59 0303 	orrs.w	r3, r9, r3
 8007fc4:	d102      	bne.n	8007fcc <_printf_float+0x28c>
 8007fc6:	6823      	ldr	r3, [r4, #0]
 8007fc8:	07d9      	lsls	r1, r3, #31
 8007fca:	d5d7      	bpl.n	8007f7c <_printf_float+0x23c>
 8007fcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fd0:	4631      	mov	r1, r6
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	47b8      	blx	r7
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	f43f af0d 	beq.w	8007df6 <_printf_float+0xb6>
 8007fdc:	f04f 0a00 	mov.w	sl, #0
 8007fe0:	f104 0b1a 	add.w	fp, r4, #26
 8007fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe6:	425b      	negs	r3, r3
 8007fe8:	4553      	cmp	r3, sl
 8007fea:	dc01      	bgt.n	8007ff0 <_printf_float+0x2b0>
 8007fec:	464b      	mov	r3, r9
 8007fee:	e793      	b.n	8007f18 <_printf_float+0x1d8>
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	465a      	mov	r2, fp
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	47b8      	blx	r7
 8007ffa:	3001      	adds	r0, #1
 8007ffc:	f43f aefb 	beq.w	8007df6 <_printf_float+0xb6>
 8008000:	f10a 0a01 	add.w	sl, sl, #1
 8008004:	e7ee      	b.n	8007fe4 <_printf_float+0x2a4>
 8008006:	bf00      	nop
 8008008:	7fefffff 	.word	0x7fefffff
 800800c:	0800c370 	.word	0x0800c370
 8008010:	0800c374 	.word	0x0800c374
 8008014:	0800c378 	.word	0x0800c378
 8008018:	0800c37c 	.word	0x0800c37c
 800801c:	0800c380 	.word	0x0800c380
 8008020:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008022:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008026:	4553      	cmp	r3, sl
 8008028:	bfa8      	it	ge
 800802a:	4653      	movge	r3, sl
 800802c:	2b00      	cmp	r3, #0
 800802e:	4699      	mov	r9, r3
 8008030:	dc36      	bgt.n	80080a0 <_printf_float+0x360>
 8008032:	f04f 0b00 	mov.w	fp, #0
 8008036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800803a:	f104 021a 	add.w	r2, r4, #26
 800803e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008040:	9306      	str	r3, [sp, #24]
 8008042:	eba3 0309 	sub.w	r3, r3, r9
 8008046:	455b      	cmp	r3, fp
 8008048:	dc31      	bgt.n	80080ae <_printf_float+0x36e>
 800804a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804c:	459a      	cmp	sl, r3
 800804e:	dc3a      	bgt.n	80080c6 <_printf_float+0x386>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	07da      	lsls	r2, r3, #31
 8008054:	d437      	bmi.n	80080c6 <_printf_float+0x386>
 8008056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008058:	ebaa 0903 	sub.w	r9, sl, r3
 800805c:	9b06      	ldr	r3, [sp, #24]
 800805e:	ebaa 0303 	sub.w	r3, sl, r3
 8008062:	4599      	cmp	r9, r3
 8008064:	bfa8      	it	ge
 8008066:	4699      	movge	r9, r3
 8008068:	f1b9 0f00 	cmp.w	r9, #0
 800806c:	dc33      	bgt.n	80080d6 <_printf_float+0x396>
 800806e:	f04f 0800 	mov.w	r8, #0
 8008072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008076:	f104 0b1a 	add.w	fp, r4, #26
 800807a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800807c:	ebaa 0303 	sub.w	r3, sl, r3
 8008080:	eba3 0309 	sub.w	r3, r3, r9
 8008084:	4543      	cmp	r3, r8
 8008086:	f77f af79 	ble.w	8007f7c <_printf_float+0x23c>
 800808a:	2301      	movs	r3, #1
 800808c:	465a      	mov	r2, fp
 800808e:	4631      	mov	r1, r6
 8008090:	4628      	mov	r0, r5
 8008092:	47b8      	blx	r7
 8008094:	3001      	adds	r0, #1
 8008096:	f43f aeae 	beq.w	8007df6 <_printf_float+0xb6>
 800809a:	f108 0801 	add.w	r8, r8, #1
 800809e:	e7ec      	b.n	800807a <_printf_float+0x33a>
 80080a0:	4642      	mov	r2, r8
 80080a2:	4631      	mov	r1, r6
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b8      	blx	r7
 80080a8:	3001      	adds	r0, #1
 80080aa:	d1c2      	bne.n	8008032 <_printf_float+0x2f2>
 80080ac:	e6a3      	b.n	8007df6 <_printf_float+0xb6>
 80080ae:	2301      	movs	r3, #1
 80080b0:	4631      	mov	r1, r6
 80080b2:	4628      	mov	r0, r5
 80080b4:	9206      	str	r2, [sp, #24]
 80080b6:	47b8      	blx	r7
 80080b8:	3001      	adds	r0, #1
 80080ba:	f43f ae9c 	beq.w	8007df6 <_printf_float+0xb6>
 80080be:	9a06      	ldr	r2, [sp, #24]
 80080c0:	f10b 0b01 	add.w	fp, fp, #1
 80080c4:	e7bb      	b.n	800803e <_printf_float+0x2fe>
 80080c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ca:	4631      	mov	r1, r6
 80080cc:	4628      	mov	r0, r5
 80080ce:	47b8      	blx	r7
 80080d0:	3001      	adds	r0, #1
 80080d2:	d1c0      	bne.n	8008056 <_printf_float+0x316>
 80080d4:	e68f      	b.n	8007df6 <_printf_float+0xb6>
 80080d6:	9a06      	ldr	r2, [sp, #24]
 80080d8:	464b      	mov	r3, r9
 80080da:	4442      	add	r2, r8
 80080dc:	4631      	mov	r1, r6
 80080de:	4628      	mov	r0, r5
 80080e0:	47b8      	blx	r7
 80080e2:	3001      	adds	r0, #1
 80080e4:	d1c3      	bne.n	800806e <_printf_float+0x32e>
 80080e6:	e686      	b.n	8007df6 <_printf_float+0xb6>
 80080e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80080ec:	f1ba 0f01 	cmp.w	sl, #1
 80080f0:	dc01      	bgt.n	80080f6 <_printf_float+0x3b6>
 80080f2:	07db      	lsls	r3, r3, #31
 80080f4:	d536      	bpl.n	8008164 <_printf_float+0x424>
 80080f6:	2301      	movs	r3, #1
 80080f8:	4642      	mov	r2, r8
 80080fa:	4631      	mov	r1, r6
 80080fc:	4628      	mov	r0, r5
 80080fe:	47b8      	blx	r7
 8008100:	3001      	adds	r0, #1
 8008102:	f43f ae78 	beq.w	8007df6 <_printf_float+0xb6>
 8008106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800810a:	4631      	mov	r1, r6
 800810c:	4628      	mov	r0, r5
 800810e:	47b8      	blx	r7
 8008110:	3001      	adds	r0, #1
 8008112:	f43f ae70 	beq.w	8007df6 <_printf_float+0xb6>
 8008116:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008122:	f7f8 fcf1 	bl	8000b08 <__aeabi_dcmpeq>
 8008126:	b9c0      	cbnz	r0, 800815a <_printf_float+0x41a>
 8008128:	4653      	mov	r3, sl
 800812a:	f108 0201 	add.w	r2, r8, #1
 800812e:	4631      	mov	r1, r6
 8008130:	4628      	mov	r0, r5
 8008132:	47b8      	blx	r7
 8008134:	3001      	adds	r0, #1
 8008136:	d10c      	bne.n	8008152 <_printf_float+0x412>
 8008138:	e65d      	b.n	8007df6 <_printf_float+0xb6>
 800813a:	2301      	movs	r3, #1
 800813c:	465a      	mov	r2, fp
 800813e:	4631      	mov	r1, r6
 8008140:	4628      	mov	r0, r5
 8008142:	47b8      	blx	r7
 8008144:	3001      	adds	r0, #1
 8008146:	f43f ae56 	beq.w	8007df6 <_printf_float+0xb6>
 800814a:	f108 0801 	add.w	r8, r8, #1
 800814e:	45d0      	cmp	r8, sl
 8008150:	dbf3      	blt.n	800813a <_printf_float+0x3fa>
 8008152:	464b      	mov	r3, r9
 8008154:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008158:	e6df      	b.n	8007f1a <_printf_float+0x1da>
 800815a:	f04f 0800 	mov.w	r8, #0
 800815e:	f104 0b1a 	add.w	fp, r4, #26
 8008162:	e7f4      	b.n	800814e <_printf_float+0x40e>
 8008164:	2301      	movs	r3, #1
 8008166:	4642      	mov	r2, r8
 8008168:	e7e1      	b.n	800812e <_printf_float+0x3ee>
 800816a:	2301      	movs	r3, #1
 800816c:	464a      	mov	r2, r9
 800816e:	4631      	mov	r1, r6
 8008170:	4628      	mov	r0, r5
 8008172:	47b8      	blx	r7
 8008174:	3001      	adds	r0, #1
 8008176:	f43f ae3e 	beq.w	8007df6 <_printf_float+0xb6>
 800817a:	f108 0801 	add.w	r8, r8, #1
 800817e:	68e3      	ldr	r3, [r4, #12]
 8008180:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008182:	1a5b      	subs	r3, r3, r1
 8008184:	4543      	cmp	r3, r8
 8008186:	dcf0      	bgt.n	800816a <_printf_float+0x42a>
 8008188:	e6fc      	b.n	8007f84 <_printf_float+0x244>
 800818a:	f04f 0800 	mov.w	r8, #0
 800818e:	f104 0919 	add.w	r9, r4, #25
 8008192:	e7f4      	b.n	800817e <_printf_float+0x43e>

08008194 <_printf_common>:
 8008194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008198:	4616      	mov	r6, r2
 800819a:	4698      	mov	r8, r3
 800819c:	688a      	ldr	r2, [r1, #8]
 800819e:	690b      	ldr	r3, [r1, #16]
 80081a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081a4:	4293      	cmp	r3, r2
 80081a6:	bfb8      	it	lt
 80081a8:	4613      	movlt	r3, r2
 80081aa:	6033      	str	r3, [r6, #0]
 80081ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081b0:	4607      	mov	r7, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	b10a      	cbz	r2, 80081ba <_printf_common+0x26>
 80081b6:	3301      	adds	r3, #1
 80081b8:	6033      	str	r3, [r6, #0]
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	0699      	lsls	r1, r3, #26
 80081be:	bf42      	ittt	mi
 80081c0:	6833      	ldrmi	r3, [r6, #0]
 80081c2:	3302      	addmi	r3, #2
 80081c4:	6033      	strmi	r3, [r6, #0]
 80081c6:	6825      	ldr	r5, [r4, #0]
 80081c8:	f015 0506 	ands.w	r5, r5, #6
 80081cc:	d106      	bne.n	80081dc <_printf_common+0x48>
 80081ce:	f104 0a19 	add.w	sl, r4, #25
 80081d2:	68e3      	ldr	r3, [r4, #12]
 80081d4:	6832      	ldr	r2, [r6, #0]
 80081d6:	1a9b      	subs	r3, r3, r2
 80081d8:	42ab      	cmp	r3, r5
 80081da:	dc26      	bgt.n	800822a <_printf_common+0x96>
 80081dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081e0:	6822      	ldr	r2, [r4, #0]
 80081e2:	3b00      	subs	r3, #0
 80081e4:	bf18      	it	ne
 80081e6:	2301      	movne	r3, #1
 80081e8:	0692      	lsls	r2, r2, #26
 80081ea:	d42b      	bmi.n	8008244 <_printf_common+0xb0>
 80081ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081f0:	4641      	mov	r1, r8
 80081f2:	4638      	mov	r0, r7
 80081f4:	47c8      	blx	r9
 80081f6:	3001      	adds	r0, #1
 80081f8:	d01e      	beq.n	8008238 <_printf_common+0xa4>
 80081fa:	6823      	ldr	r3, [r4, #0]
 80081fc:	6922      	ldr	r2, [r4, #16]
 80081fe:	f003 0306 	and.w	r3, r3, #6
 8008202:	2b04      	cmp	r3, #4
 8008204:	bf02      	ittt	eq
 8008206:	68e5      	ldreq	r5, [r4, #12]
 8008208:	6833      	ldreq	r3, [r6, #0]
 800820a:	1aed      	subeq	r5, r5, r3
 800820c:	68a3      	ldr	r3, [r4, #8]
 800820e:	bf0c      	ite	eq
 8008210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008214:	2500      	movne	r5, #0
 8008216:	4293      	cmp	r3, r2
 8008218:	bfc4      	itt	gt
 800821a:	1a9b      	subgt	r3, r3, r2
 800821c:	18ed      	addgt	r5, r5, r3
 800821e:	2600      	movs	r6, #0
 8008220:	341a      	adds	r4, #26
 8008222:	42b5      	cmp	r5, r6
 8008224:	d11a      	bne.n	800825c <_printf_common+0xc8>
 8008226:	2000      	movs	r0, #0
 8008228:	e008      	b.n	800823c <_printf_common+0xa8>
 800822a:	2301      	movs	r3, #1
 800822c:	4652      	mov	r2, sl
 800822e:	4641      	mov	r1, r8
 8008230:	4638      	mov	r0, r7
 8008232:	47c8      	blx	r9
 8008234:	3001      	adds	r0, #1
 8008236:	d103      	bne.n	8008240 <_printf_common+0xac>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008240:	3501      	adds	r5, #1
 8008242:	e7c6      	b.n	80081d2 <_printf_common+0x3e>
 8008244:	18e1      	adds	r1, r4, r3
 8008246:	1c5a      	adds	r2, r3, #1
 8008248:	2030      	movs	r0, #48	@ 0x30
 800824a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800824e:	4422      	add	r2, r4
 8008250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008258:	3302      	adds	r3, #2
 800825a:	e7c7      	b.n	80081ec <_printf_common+0x58>
 800825c:	2301      	movs	r3, #1
 800825e:	4622      	mov	r2, r4
 8008260:	4641      	mov	r1, r8
 8008262:	4638      	mov	r0, r7
 8008264:	47c8      	blx	r9
 8008266:	3001      	adds	r0, #1
 8008268:	d0e6      	beq.n	8008238 <_printf_common+0xa4>
 800826a:	3601      	adds	r6, #1
 800826c:	e7d9      	b.n	8008222 <_printf_common+0x8e>
	...

08008270 <_printf_i>:
 8008270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	7e0f      	ldrb	r7, [r1, #24]
 8008276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008278:	2f78      	cmp	r7, #120	@ 0x78
 800827a:	4691      	mov	r9, r2
 800827c:	4680      	mov	r8, r0
 800827e:	460c      	mov	r4, r1
 8008280:	469a      	mov	sl, r3
 8008282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008286:	d807      	bhi.n	8008298 <_printf_i+0x28>
 8008288:	2f62      	cmp	r7, #98	@ 0x62
 800828a:	d80a      	bhi.n	80082a2 <_printf_i+0x32>
 800828c:	2f00      	cmp	r7, #0
 800828e:	f000 80d2 	beq.w	8008436 <_printf_i+0x1c6>
 8008292:	2f58      	cmp	r7, #88	@ 0x58
 8008294:	f000 80b9 	beq.w	800840a <_printf_i+0x19a>
 8008298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800829c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082a0:	e03a      	b.n	8008318 <_printf_i+0xa8>
 80082a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082a6:	2b15      	cmp	r3, #21
 80082a8:	d8f6      	bhi.n	8008298 <_printf_i+0x28>
 80082aa:	a101      	add	r1, pc, #4	@ (adr r1, 80082b0 <_printf_i+0x40>)
 80082ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082b0:	08008309 	.word	0x08008309
 80082b4:	0800831d 	.word	0x0800831d
 80082b8:	08008299 	.word	0x08008299
 80082bc:	08008299 	.word	0x08008299
 80082c0:	08008299 	.word	0x08008299
 80082c4:	08008299 	.word	0x08008299
 80082c8:	0800831d 	.word	0x0800831d
 80082cc:	08008299 	.word	0x08008299
 80082d0:	08008299 	.word	0x08008299
 80082d4:	08008299 	.word	0x08008299
 80082d8:	08008299 	.word	0x08008299
 80082dc:	0800841d 	.word	0x0800841d
 80082e0:	08008347 	.word	0x08008347
 80082e4:	080083d7 	.word	0x080083d7
 80082e8:	08008299 	.word	0x08008299
 80082ec:	08008299 	.word	0x08008299
 80082f0:	0800843f 	.word	0x0800843f
 80082f4:	08008299 	.word	0x08008299
 80082f8:	08008347 	.word	0x08008347
 80082fc:	08008299 	.word	0x08008299
 8008300:	08008299 	.word	0x08008299
 8008304:	080083df 	.word	0x080083df
 8008308:	6833      	ldr	r3, [r6, #0]
 800830a:	1d1a      	adds	r2, r3, #4
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6032      	str	r2, [r6, #0]
 8008310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008318:	2301      	movs	r3, #1
 800831a:	e09d      	b.n	8008458 <_printf_i+0x1e8>
 800831c:	6833      	ldr	r3, [r6, #0]
 800831e:	6820      	ldr	r0, [r4, #0]
 8008320:	1d19      	adds	r1, r3, #4
 8008322:	6031      	str	r1, [r6, #0]
 8008324:	0606      	lsls	r6, r0, #24
 8008326:	d501      	bpl.n	800832c <_printf_i+0xbc>
 8008328:	681d      	ldr	r5, [r3, #0]
 800832a:	e003      	b.n	8008334 <_printf_i+0xc4>
 800832c:	0645      	lsls	r5, r0, #25
 800832e:	d5fb      	bpl.n	8008328 <_printf_i+0xb8>
 8008330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008334:	2d00      	cmp	r5, #0
 8008336:	da03      	bge.n	8008340 <_printf_i+0xd0>
 8008338:	232d      	movs	r3, #45	@ 0x2d
 800833a:	426d      	negs	r5, r5
 800833c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008340:	4859      	ldr	r0, [pc, #356]	@ (80084a8 <_printf_i+0x238>)
 8008342:	230a      	movs	r3, #10
 8008344:	e011      	b.n	800836a <_printf_i+0xfa>
 8008346:	6821      	ldr	r1, [r4, #0]
 8008348:	6833      	ldr	r3, [r6, #0]
 800834a:	0608      	lsls	r0, r1, #24
 800834c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008350:	d402      	bmi.n	8008358 <_printf_i+0xe8>
 8008352:	0649      	lsls	r1, r1, #25
 8008354:	bf48      	it	mi
 8008356:	b2ad      	uxthmi	r5, r5
 8008358:	2f6f      	cmp	r7, #111	@ 0x6f
 800835a:	4853      	ldr	r0, [pc, #332]	@ (80084a8 <_printf_i+0x238>)
 800835c:	6033      	str	r3, [r6, #0]
 800835e:	bf14      	ite	ne
 8008360:	230a      	movne	r3, #10
 8008362:	2308      	moveq	r3, #8
 8008364:	2100      	movs	r1, #0
 8008366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800836a:	6866      	ldr	r6, [r4, #4]
 800836c:	60a6      	str	r6, [r4, #8]
 800836e:	2e00      	cmp	r6, #0
 8008370:	bfa2      	ittt	ge
 8008372:	6821      	ldrge	r1, [r4, #0]
 8008374:	f021 0104 	bicge.w	r1, r1, #4
 8008378:	6021      	strge	r1, [r4, #0]
 800837a:	b90d      	cbnz	r5, 8008380 <_printf_i+0x110>
 800837c:	2e00      	cmp	r6, #0
 800837e:	d04b      	beq.n	8008418 <_printf_i+0x1a8>
 8008380:	4616      	mov	r6, r2
 8008382:	fbb5 f1f3 	udiv	r1, r5, r3
 8008386:	fb03 5711 	mls	r7, r3, r1, r5
 800838a:	5dc7      	ldrb	r7, [r0, r7]
 800838c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008390:	462f      	mov	r7, r5
 8008392:	42bb      	cmp	r3, r7
 8008394:	460d      	mov	r5, r1
 8008396:	d9f4      	bls.n	8008382 <_printf_i+0x112>
 8008398:	2b08      	cmp	r3, #8
 800839a:	d10b      	bne.n	80083b4 <_printf_i+0x144>
 800839c:	6823      	ldr	r3, [r4, #0]
 800839e:	07df      	lsls	r7, r3, #31
 80083a0:	d508      	bpl.n	80083b4 <_printf_i+0x144>
 80083a2:	6923      	ldr	r3, [r4, #16]
 80083a4:	6861      	ldr	r1, [r4, #4]
 80083a6:	4299      	cmp	r1, r3
 80083a8:	bfde      	ittt	le
 80083aa:	2330      	movle	r3, #48	@ 0x30
 80083ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083b4:	1b92      	subs	r2, r2, r6
 80083b6:	6122      	str	r2, [r4, #16]
 80083b8:	f8cd a000 	str.w	sl, [sp]
 80083bc:	464b      	mov	r3, r9
 80083be:	aa03      	add	r2, sp, #12
 80083c0:	4621      	mov	r1, r4
 80083c2:	4640      	mov	r0, r8
 80083c4:	f7ff fee6 	bl	8008194 <_printf_common>
 80083c8:	3001      	adds	r0, #1
 80083ca:	d14a      	bne.n	8008462 <_printf_i+0x1f2>
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	b004      	add	sp, #16
 80083d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	f043 0320 	orr.w	r3, r3, #32
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	4833      	ldr	r0, [pc, #204]	@ (80084ac <_printf_i+0x23c>)
 80083e0:	2778      	movs	r7, #120	@ 0x78
 80083e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083e6:	6823      	ldr	r3, [r4, #0]
 80083e8:	6831      	ldr	r1, [r6, #0]
 80083ea:	061f      	lsls	r7, r3, #24
 80083ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80083f0:	d402      	bmi.n	80083f8 <_printf_i+0x188>
 80083f2:	065f      	lsls	r7, r3, #25
 80083f4:	bf48      	it	mi
 80083f6:	b2ad      	uxthmi	r5, r5
 80083f8:	6031      	str	r1, [r6, #0]
 80083fa:	07d9      	lsls	r1, r3, #31
 80083fc:	bf44      	itt	mi
 80083fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008402:	6023      	strmi	r3, [r4, #0]
 8008404:	b11d      	cbz	r5, 800840e <_printf_i+0x19e>
 8008406:	2310      	movs	r3, #16
 8008408:	e7ac      	b.n	8008364 <_printf_i+0xf4>
 800840a:	4827      	ldr	r0, [pc, #156]	@ (80084a8 <_printf_i+0x238>)
 800840c:	e7e9      	b.n	80083e2 <_printf_i+0x172>
 800840e:	6823      	ldr	r3, [r4, #0]
 8008410:	f023 0320 	bic.w	r3, r3, #32
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	e7f6      	b.n	8008406 <_printf_i+0x196>
 8008418:	4616      	mov	r6, r2
 800841a:	e7bd      	b.n	8008398 <_printf_i+0x128>
 800841c:	6833      	ldr	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	6961      	ldr	r1, [r4, #20]
 8008422:	1d18      	adds	r0, r3, #4
 8008424:	6030      	str	r0, [r6, #0]
 8008426:	062e      	lsls	r6, r5, #24
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	d501      	bpl.n	8008430 <_printf_i+0x1c0>
 800842c:	6019      	str	r1, [r3, #0]
 800842e:	e002      	b.n	8008436 <_printf_i+0x1c6>
 8008430:	0668      	lsls	r0, r5, #25
 8008432:	d5fb      	bpl.n	800842c <_printf_i+0x1bc>
 8008434:	8019      	strh	r1, [r3, #0]
 8008436:	2300      	movs	r3, #0
 8008438:	6123      	str	r3, [r4, #16]
 800843a:	4616      	mov	r6, r2
 800843c:	e7bc      	b.n	80083b8 <_printf_i+0x148>
 800843e:	6833      	ldr	r3, [r6, #0]
 8008440:	1d1a      	adds	r2, r3, #4
 8008442:	6032      	str	r2, [r6, #0]
 8008444:	681e      	ldr	r6, [r3, #0]
 8008446:	6862      	ldr	r2, [r4, #4]
 8008448:	2100      	movs	r1, #0
 800844a:	4630      	mov	r0, r6
 800844c:	f7f7 fee0 	bl	8000210 <memchr>
 8008450:	b108      	cbz	r0, 8008456 <_printf_i+0x1e6>
 8008452:	1b80      	subs	r0, r0, r6
 8008454:	6060      	str	r0, [r4, #4]
 8008456:	6863      	ldr	r3, [r4, #4]
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	2300      	movs	r3, #0
 800845c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008460:	e7aa      	b.n	80083b8 <_printf_i+0x148>
 8008462:	6923      	ldr	r3, [r4, #16]
 8008464:	4632      	mov	r2, r6
 8008466:	4649      	mov	r1, r9
 8008468:	4640      	mov	r0, r8
 800846a:	47d0      	blx	sl
 800846c:	3001      	adds	r0, #1
 800846e:	d0ad      	beq.n	80083cc <_printf_i+0x15c>
 8008470:	6823      	ldr	r3, [r4, #0]
 8008472:	079b      	lsls	r3, r3, #30
 8008474:	d413      	bmi.n	800849e <_printf_i+0x22e>
 8008476:	68e0      	ldr	r0, [r4, #12]
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	4298      	cmp	r0, r3
 800847c:	bfb8      	it	lt
 800847e:	4618      	movlt	r0, r3
 8008480:	e7a6      	b.n	80083d0 <_printf_i+0x160>
 8008482:	2301      	movs	r3, #1
 8008484:	4632      	mov	r2, r6
 8008486:	4649      	mov	r1, r9
 8008488:	4640      	mov	r0, r8
 800848a:	47d0      	blx	sl
 800848c:	3001      	adds	r0, #1
 800848e:	d09d      	beq.n	80083cc <_printf_i+0x15c>
 8008490:	3501      	adds	r5, #1
 8008492:	68e3      	ldr	r3, [r4, #12]
 8008494:	9903      	ldr	r1, [sp, #12]
 8008496:	1a5b      	subs	r3, r3, r1
 8008498:	42ab      	cmp	r3, r5
 800849a:	dcf2      	bgt.n	8008482 <_printf_i+0x212>
 800849c:	e7eb      	b.n	8008476 <_printf_i+0x206>
 800849e:	2500      	movs	r5, #0
 80084a0:	f104 0619 	add.w	r6, r4, #25
 80084a4:	e7f5      	b.n	8008492 <_printf_i+0x222>
 80084a6:	bf00      	nop
 80084a8:	0800c382 	.word	0x0800c382
 80084ac:	0800c393 	.word	0x0800c393

080084b0 <_scanf_float>:
 80084b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b4:	b087      	sub	sp, #28
 80084b6:	4617      	mov	r7, r2
 80084b8:	9303      	str	r3, [sp, #12]
 80084ba:	688b      	ldr	r3, [r1, #8]
 80084bc:	1e5a      	subs	r2, r3, #1
 80084be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80084c2:	bf81      	itttt	hi
 80084c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80084c8:	eb03 0b05 	addhi.w	fp, r3, r5
 80084cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80084d0:	608b      	strhi	r3, [r1, #8]
 80084d2:	680b      	ldr	r3, [r1, #0]
 80084d4:	460a      	mov	r2, r1
 80084d6:	f04f 0500 	mov.w	r5, #0
 80084da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80084de:	f842 3b1c 	str.w	r3, [r2], #28
 80084e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80084e6:	4680      	mov	r8, r0
 80084e8:	460c      	mov	r4, r1
 80084ea:	bf98      	it	ls
 80084ec:	f04f 0b00 	movls.w	fp, #0
 80084f0:	9201      	str	r2, [sp, #4]
 80084f2:	4616      	mov	r6, r2
 80084f4:	46aa      	mov	sl, r5
 80084f6:	46a9      	mov	r9, r5
 80084f8:	9502      	str	r5, [sp, #8]
 80084fa:	68a2      	ldr	r2, [r4, #8]
 80084fc:	b152      	cbz	r2, 8008514 <_scanf_float+0x64>
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	2b4e      	cmp	r3, #78	@ 0x4e
 8008504:	d864      	bhi.n	80085d0 <_scanf_float+0x120>
 8008506:	2b40      	cmp	r3, #64	@ 0x40
 8008508:	d83c      	bhi.n	8008584 <_scanf_float+0xd4>
 800850a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800850e:	b2c8      	uxtb	r0, r1
 8008510:	280e      	cmp	r0, #14
 8008512:	d93a      	bls.n	800858a <_scanf_float+0xda>
 8008514:	f1b9 0f00 	cmp.w	r9, #0
 8008518:	d003      	beq.n	8008522 <_scanf_float+0x72>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008526:	f1ba 0f01 	cmp.w	sl, #1
 800852a:	f200 8117 	bhi.w	800875c <_scanf_float+0x2ac>
 800852e:	9b01      	ldr	r3, [sp, #4]
 8008530:	429e      	cmp	r6, r3
 8008532:	f200 8108 	bhi.w	8008746 <_scanf_float+0x296>
 8008536:	2001      	movs	r0, #1
 8008538:	b007      	add	sp, #28
 800853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800853e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008542:	2a0d      	cmp	r2, #13
 8008544:	d8e6      	bhi.n	8008514 <_scanf_float+0x64>
 8008546:	a101      	add	r1, pc, #4	@ (adr r1, 800854c <_scanf_float+0x9c>)
 8008548:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800854c:	08008693 	.word	0x08008693
 8008550:	08008515 	.word	0x08008515
 8008554:	08008515 	.word	0x08008515
 8008558:	08008515 	.word	0x08008515
 800855c:	080086f3 	.word	0x080086f3
 8008560:	080086cb 	.word	0x080086cb
 8008564:	08008515 	.word	0x08008515
 8008568:	08008515 	.word	0x08008515
 800856c:	080086a1 	.word	0x080086a1
 8008570:	08008515 	.word	0x08008515
 8008574:	08008515 	.word	0x08008515
 8008578:	08008515 	.word	0x08008515
 800857c:	08008515 	.word	0x08008515
 8008580:	08008659 	.word	0x08008659
 8008584:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008588:	e7db      	b.n	8008542 <_scanf_float+0x92>
 800858a:	290e      	cmp	r1, #14
 800858c:	d8c2      	bhi.n	8008514 <_scanf_float+0x64>
 800858e:	a001      	add	r0, pc, #4	@ (adr r0, 8008594 <_scanf_float+0xe4>)
 8008590:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008594:	08008649 	.word	0x08008649
 8008598:	08008515 	.word	0x08008515
 800859c:	08008649 	.word	0x08008649
 80085a0:	080086df 	.word	0x080086df
 80085a4:	08008515 	.word	0x08008515
 80085a8:	080085f1 	.word	0x080085f1
 80085ac:	0800862f 	.word	0x0800862f
 80085b0:	0800862f 	.word	0x0800862f
 80085b4:	0800862f 	.word	0x0800862f
 80085b8:	0800862f 	.word	0x0800862f
 80085bc:	0800862f 	.word	0x0800862f
 80085c0:	0800862f 	.word	0x0800862f
 80085c4:	0800862f 	.word	0x0800862f
 80085c8:	0800862f 	.word	0x0800862f
 80085cc:	0800862f 	.word	0x0800862f
 80085d0:	2b6e      	cmp	r3, #110	@ 0x6e
 80085d2:	d809      	bhi.n	80085e8 <_scanf_float+0x138>
 80085d4:	2b60      	cmp	r3, #96	@ 0x60
 80085d6:	d8b2      	bhi.n	800853e <_scanf_float+0x8e>
 80085d8:	2b54      	cmp	r3, #84	@ 0x54
 80085da:	d07b      	beq.n	80086d4 <_scanf_float+0x224>
 80085dc:	2b59      	cmp	r3, #89	@ 0x59
 80085de:	d199      	bne.n	8008514 <_scanf_float+0x64>
 80085e0:	2d07      	cmp	r5, #7
 80085e2:	d197      	bne.n	8008514 <_scanf_float+0x64>
 80085e4:	2508      	movs	r5, #8
 80085e6:	e02c      	b.n	8008642 <_scanf_float+0x192>
 80085e8:	2b74      	cmp	r3, #116	@ 0x74
 80085ea:	d073      	beq.n	80086d4 <_scanf_float+0x224>
 80085ec:	2b79      	cmp	r3, #121	@ 0x79
 80085ee:	e7f6      	b.n	80085de <_scanf_float+0x12e>
 80085f0:	6821      	ldr	r1, [r4, #0]
 80085f2:	05c8      	lsls	r0, r1, #23
 80085f4:	d51b      	bpl.n	800862e <_scanf_float+0x17e>
 80085f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80085fa:	6021      	str	r1, [r4, #0]
 80085fc:	f109 0901 	add.w	r9, r9, #1
 8008600:	f1bb 0f00 	cmp.w	fp, #0
 8008604:	d003      	beq.n	800860e <_scanf_float+0x15e>
 8008606:	3201      	adds	r2, #1
 8008608:	f10b 3bff 	add.w	fp, fp, #4294967295
 800860c:	60a2      	str	r2, [r4, #8]
 800860e:	68a3      	ldr	r3, [r4, #8]
 8008610:	3b01      	subs	r3, #1
 8008612:	60a3      	str	r3, [r4, #8]
 8008614:	6923      	ldr	r3, [r4, #16]
 8008616:	3301      	adds	r3, #1
 8008618:	6123      	str	r3, [r4, #16]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	3b01      	subs	r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	607b      	str	r3, [r7, #4]
 8008622:	f340 8087 	ble.w	8008734 <_scanf_float+0x284>
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	3301      	adds	r3, #1
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	e765      	b.n	80084fa <_scanf_float+0x4a>
 800862e:	eb1a 0105 	adds.w	r1, sl, r5
 8008632:	f47f af6f 	bne.w	8008514 <_scanf_float+0x64>
 8008636:	6822      	ldr	r2, [r4, #0]
 8008638:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800863c:	6022      	str	r2, [r4, #0]
 800863e:	460d      	mov	r5, r1
 8008640:	468a      	mov	sl, r1
 8008642:	f806 3b01 	strb.w	r3, [r6], #1
 8008646:	e7e2      	b.n	800860e <_scanf_float+0x15e>
 8008648:	6822      	ldr	r2, [r4, #0]
 800864a:	0610      	lsls	r0, r2, #24
 800864c:	f57f af62 	bpl.w	8008514 <_scanf_float+0x64>
 8008650:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008654:	6022      	str	r2, [r4, #0]
 8008656:	e7f4      	b.n	8008642 <_scanf_float+0x192>
 8008658:	f1ba 0f00 	cmp.w	sl, #0
 800865c:	d10e      	bne.n	800867c <_scanf_float+0x1cc>
 800865e:	f1b9 0f00 	cmp.w	r9, #0
 8008662:	d10e      	bne.n	8008682 <_scanf_float+0x1d2>
 8008664:	6822      	ldr	r2, [r4, #0]
 8008666:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800866a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800866e:	d108      	bne.n	8008682 <_scanf_float+0x1d2>
 8008670:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	f04f 0a01 	mov.w	sl, #1
 800867a:	e7e2      	b.n	8008642 <_scanf_float+0x192>
 800867c:	f1ba 0f02 	cmp.w	sl, #2
 8008680:	d055      	beq.n	800872e <_scanf_float+0x27e>
 8008682:	2d01      	cmp	r5, #1
 8008684:	d002      	beq.n	800868c <_scanf_float+0x1dc>
 8008686:	2d04      	cmp	r5, #4
 8008688:	f47f af44 	bne.w	8008514 <_scanf_float+0x64>
 800868c:	3501      	adds	r5, #1
 800868e:	b2ed      	uxtb	r5, r5
 8008690:	e7d7      	b.n	8008642 <_scanf_float+0x192>
 8008692:	f1ba 0f01 	cmp.w	sl, #1
 8008696:	f47f af3d 	bne.w	8008514 <_scanf_float+0x64>
 800869a:	f04f 0a02 	mov.w	sl, #2
 800869e:	e7d0      	b.n	8008642 <_scanf_float+0x192>
 80086a0:	b97d      	cbnz	r5, 80086c2 <_scanf_float+0x212>
 80086a2:	f1b9 0f00 	cmp.w	r9, #0
 80086a6:	f47f af38 	bne.w	800851a <_scanf_float+0x6a>
 80086aa:	6822      	ldr	r2, [r4, #0]
 80086ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086b4:	f040 8108 	bne.w	80088c8 <_scanf_float+0x418>
 80086b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086bc:	6022      	str	r2, [r4, #0]
 80086be:	2501      	movs	r5, #1
 80086c0:	e7bf      	b.n	8008642 <_scanf_float+0x192>
 80086c2:	2d03      	cmp	r5, #3
 80086c4:	d0e2      	beq.n	800868c <_scanf_float+0x1dc>
 80086c6:	2d05      	cmp	r5, #5
 80086c8:	e7de      	b.n	8008688 <_scanf_float+0x1d8>
 80086ca:	2d02      	cmp	r5, #2
 80086cc:	f47f af22 	bne.w	8008514 <_scanf_float+0x64>
 80086d0:	2503      	movs	r5, #3
 80086d2:	e7b6      	b.n	8008642 <_scanf_float+0x192>
 80086d4:	2d06      	cmp	r5, #6
 80086d6:	f47f af1d 	bne.w	8008514 <_scanf_float+0x64>
 80086da:	2507      	movs	r5, #7
 80086dc:	e7b1      	b.n	8008642 <_scanf_float+0x192>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	0591      	lsls	r1, r2, #22
 80086e2:	f57f af17 	bpl.w	8008514 <_scanf_float+0x64>
 80086e6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80086ea:	6022      	str	r2, [r4, #0]
 80086ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80086f0:	e7a7      	b.n	8008642 <_scanf_float+0x192>
 80086f2:	6822      	ldr	r2, [r4, #0]
 80086f4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80086f8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80086fc:	d006      	beq.n	800870c <_scanf_float+0x25c>
 80086fe:	0550      	lsls	r0, r2, #21
 8008700:	f57f af08 	bpl.w	8008514 <_scanf_float+0x64>
 8008704:	f1b9 0f00 	cmp.w	r9, #0
 8008708:	f000 80de 	beq.w	80088c8 <_scanf_float+0x418>
 800870c:	0591      	lsls	r1, r2, #22
 800870e:	bf58      	it	pl
 8008710:	9902      	ldrpl	r1, [sp, #8]
 8008712:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008716:	bf58      	it	pl
 8008718:	eba9 0101 	subpl.w	r1, r9, r1
 800871c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008720:	bf58      	it	pl
 8008722:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008726:	6022      	str	r2, [r4, #0]
 8008728:	f04f 0900 	mov.w	r9, #0
 800872c:	e789      	b.n	8008642 <_scanf_float+0x192>
 800872e:	f04f 0a03 	mov.w	sl, #3
 8008732:	e786      	b.n	8008642 <_scanf_float+0x192>
 8008734:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008738:	4639      	mov	r1, r7
 800873a:	4640      	mov	r0, r8
 800873c:	4798      	blx	r3
 800873e:	2800      	cmp	r0, #0
 8008740:	f43f aedb 	beq.w	80084fa <_scanf_float+0x4a>
 8008744:	e6e6      	b.n	8008514 <_scanf_float+0x64>
 8008746:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800874a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800874e:	463a      	mov	r2, r7
 8008750:	4640      	mov	r0, r8
 8008752:	4798      	blx	r3
 8008754:	6923      	ldr	r3, [r4, #16]
 8008756:	3b01      	subs	r3, #1
 8008758:	6123      	str	r3, [r4, #16]
 800875a:	e6e8      	b.n	800852e <_scanf_float+0x7e>
 800875c:	1e6b      	subs	r3, r5, #1
 800875e:	2b06      	cmp	r3, #6
 8008760:	d824      	bhi.n	80087ac <_scanf_float+0x2fc>
 8008762:	2d02      	cmp	r5, #2
 8008764:	d836      	bhi.n	80087d4 <_scanf_float+0x324>
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	429e      	cmp	r6, r3
 800876a:	f67f aee4 	bls.w	8008536 <_scanf_float+0x86>
 800876e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008772:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008776:	463a      	mov	r2, r7
 8008778:	4640      	mov	r0, r8
 800877a:	4798      	blx	r3
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	3b01      	subs	r3, #1
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	e7f0      	b.n	8008766 <_scanf_float+0x2b6>
 8008784:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008788:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800878c:	463a      	mov	r2, r7
 800878e:	4640      	mov	r0, r8
 8008790:	4798      	blx	r3
 8008792:	6923      	ldr	r3, [r4, #16]
 8008794:	3b01      	subs	r3, #1
 8008796:	6123      	str	r3, [r4, #16]
 8008798:	f10a 3aff 	add.w	sl, sl, #4294967295
 800879c:	fa5f fa8a 	uxtb.w	sl, sl
 80087a0:	f1ba 0f02 	cmp.w	sl, #2
 80087a4:	d1ee      	bne.n	8008784 <_scanf_float+0x2d4>
 80087a6:	3d03      	subs	r5, #3
 80087a8:	b2ed      	uxtb	r5, r5
 80087aa:	1b76      	subs	r6, r6, r5
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	05da      	lsls	r2, r3, #23
 80087b0:	d530      	bpl.n	8008814 <_scanf_float+0x364>
 80087b2:	055b      	lsls	r3, r3, #21
 80087b4:	d511      	bpl.n	80087da <_scanf_float+0x32a>
 80087b6:	9b01      	ldr	r3, [sp, #4]
 80087b8:	429e      	cmp	r6, r3
 80087ba:	f67f aebc 	bls.w	8008536 <_scanf_float+0x86>
 80087be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087c6:	463a      	mov	r2, r7
 80087c8:	4640      	mov	r0, r8
 80087ca:	4798      	blx	r3
 80087cc:	6923      	ldr	r3, [r4, #16]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	6123      	str	r3, [r4, #16]
 80087d2:	e7f0      	b.n	80087b6 <_scanf_float+0x306>
 80087d4:	46aa      	mov	sl, r5
 80087d6:	46b3      	mov	fp, r6
 80087d8:	e7de      	b.n	8008798 <_scanf_float+0x2e8>
 80087da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	2965      	cmp	r1, #101	@ 0x65
 80087e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80087e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80087ea:	6123      	str	r3, [r4, #16]
 80087ec:	d00c      	beq.n	8008808 <_scanf_float+0x358>
 80087ee:	2945      	cmp	r1, #69	@ 0x45
 80087f0:	d00a      	beq.n	8008808 <_scanf_float+0x358>
 80087f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087f6:	463a      	mov	r2, r7
 80087f8:	4640      	mov	r0, r8
 80087fa:	4798      	blx	r3
 80087fc:	6923      	ldr	r3, [r4, #16]
 80087fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008802:	3b01      	subs	r3, #1
 8008804:	1eb5      	subs	r5, r6, #2
 8008806:	6123      	str	r3, [r4, #16]
 8008808:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800880c:	463a      	mov	r2, r7
 800880e:	4640      	mov	r0, r8
 8008810:	4798      	blx	r3
 8008812:	462e      	mov	r6, r5
 8008814:	6822      	ldr	r2, [r4, #0]
 8008816:	f012 0210 	ands.w	r2, r2, #16
 800881a:	d001      	beq.n	8008820 <_scanf_float+0x370>
 800881c:	2000      	movs	r0, #0
 800881e:	e68b      	b.n	8008538 <_scanf_float+0x88>
 8008820:	7032      	strb	r2, [r6, #0]
 8008822:	6823      	ldr	r3, [r4, #0]
 8008824:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800882c:	d11c      	bne.n	8008868 <_scanf_float+0x3b8>
 800882e:	9b02      	ldr	r3, [sp, #8]
 8008830:	454b      	cmp	r3, r9
 8008832:	eba3 0209 	sub.w	r2, r3, r9
 8008836:	d123      	bne.n	8008880 <_scanf_float+0x3d0>
 8008838:	9901      	ldr	r1, [sp, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	4640      	mov	r0, r8
 800883e:	f002 fbf7 	bl	800b030 <_strtod_r>
 8008842:	9b03      	ldr	r3, [sp, #12]
 8008844:	6821      	ldr	r1, [r4, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f011 0f02 	tst.w	r1, #2
 800884c:	ec57 6b10 	vmov	r6, r7, d0
 8008850:	f103 0204 	add.w	r2, r3, #4
 8008854:	d01f      	beq.n	8008896 <_scanf_float+0x3e6>
 8008856:	9903      	ldr	r1, [sp, #12]
 8008858:	600a      	str	r2, [r1, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	e9c3 6700 	strd	r6, r7, [r3]
 8008860:	68e3      	ldr	r3, [r4, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60e3      	str	r3, [r4, #12]
 8008866:	e7d9      	b.n	800881c <_scanf_float+0x36c>
 8008868:	9b04      	ldr	r3, [sp, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0e4      	beq.n	8008838 <_scanf_float+0x388>
 800886e:	9905      	ldr	r1, [sp, #20]
 8008870:	230a      	movs	r3, #10
 8008872:	3101      	adds	r1, #1
 8008874:	4640      	mov	r0, r8
 8008876:	f002 fc5b 	bl	800b130 <_strtol_r>
 800887a:	9b04      	ldr	r3, [sp, #16]
 800887c:	9e05      	ldr	r6, [sp, #20]
 800887e:	1ac2      	subs	r2, r0, r3
 8008880:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008884:	429e      	cmp	r6, r3
 8008886:	bf28      	it	cs
 8008888:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800888c:	4910      	ldr	r1, [pc, #64]	@ (80088d0 <_scanf_float+0x420>)
 800888e:	4630      	mov	r0, r6
 8008890:	f000 f8e4 	bl	8008a5c <siprintf>
 8008894:	e7d0      	b.n	8008838 <_scanf_float+0x388>
 8008896:	f011 0f04 	tst.w	r1, #4
 800889a:	9903      	ldr	r1, [sp, #12]
 800889c:	600a      	str	r2, [r1, #0]
 800889e:	d1dc      	bne.n	800885a <_scanf_float+0x3aa>
 80088a0:	681d      	ldr	r5, [r3, #0]
 80088a2:	4632      	mov	r2, r6
 80088a4:	463b      	mov	r3, r7
 80088a6:	4630      	mov	r0, r6
 80088a8:	4639      	mov	r1, r7
 80088aa:	f7f8 f95f 	bl	8000b6c <__aeabi_dcmpun>
 80088ae:	b128      	cbz	r0, 80088bc <_scanf_float+0x40c>
 80088b0:	4808      	ldr	r0, [pc, #32]	@ (80088d4 <_scanf_float+0x424>)
 80088b2:	f000 f9b7 	bl	8008c24 <nanf>
 80088b6:	ed85 0a00 	vstr	s0, [r5]
 80088ba:	e7d1      	b.n	8008860 <_scanf_float+0x3b0>
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f7f8 f9b2 	bl	8000c28 <__aeabi_d2f>
 80088c4:	6028      	str	r0, [r5, #0]
 80088c6:	e7cb      	b.n	8008860 <_scanf_float+0x3b0>
 80088c8:	f04f 0900 	mov.w	r9, #0
 80088cc:	e629      	b.n	8008522 <_scanf_float+0x72>
 80088ce:	bf00      	nop
 80088d0:	0800c3a4 	.word	0x0800c3a4
 80088d4:	0800c73d 	.word	0x0800c73d

080088d8 <std>:
 80088d8:	2300      	movs	r3, #0
 80088da:	b510      	push	{r4, lr}
 80088dc:	4604      	mov	r4, r0
 80088de:	e9c0 3300 	strd	r3, r3, [r0]
 80088e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088e6:	6083      	str	r3, [r0, #8]
 80088e8:	8181      	strh	r1, [r0, #12]
 80088ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80088ec:	81c2      	strh	r2, [r0, #14]
 80088ee:	6183      	str	r3, [r0, #24]
 80088f0:	4619      	mov	r1, r3
 80088f2:	2208      	movs	r2, #8
 80088f4:	305c      	adds	r0, #92	@ 0x5c
 80088f6:	f000 f914 	bl	8008b22 <memset>
 80088fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008930 <std+0x58>)
 80088fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80088fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008934 <std+0x5c>)
 8008900:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008902:	4b0d      	ldr	r3, [pc, #52]	@ (8008938 <std+0x60>)
 8008904:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008906:	4b0d      	ldr	r3, [pc, #52]	@ (800893c <std+0x64>)
 8008908:	6323      	str	r3, [r4, #48]	@ 0x30
 800890a:	4b0d      	ldr	r3, [pc, #52]	@ (8008940 <std+0x68>)
 800890c:	6224      	str	r4, [r4, #32]
 800890e:	429c      	cmp	r4, r3
 8008910:	d006      	beq.n	8008920 <std+0x48>
 8008912:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008916:	4294      	cmp	r4, r2
 8008918:	d002      	beq.n	8008920 <std+0x48>
 800891a:	33d0      	adds	r3, #208	@ 0xd0
 800891c:	429c      	cmp	r4, r3
 800891e:	d105      	bne.n	800892c <std+0x54>
 8008920:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008928:	f000 b978 	b.w	8008c1c <__retarget_lock_init_recursive>
 800892c:	bd10      	pop	{r4, pc}
 800892e:	bf00      	nop
 8008930:	08008a9d 	.word	0x08008a9d
 8008934:	08008abf 	.word	0x08008abf
 8008938:	08008af7 	.word	0x08008af7
 800893c:	08008b1b 	.word	0x08008b1b
 8008940:	20000698 	.word	0x20000698

08008944 <stdio_exit_handler>:
 8008944:	4a02      	ldr	r2, [pc, #8]	@ (8008950 <stdio_exit_handler+0xc>)
 8008946:	4903      	ldr	r1, [pc, #12]	@ (8008954 <stdio_exit_handler+0x10>)
 8008948:	4803      	ldr	r0, [pc, #12]	@ (8008958 <stdio_exit_handler+0x14>)
 800894a:	f000 b869 	b.w	8008a20 <_fwalk_sglue>
 800894e:	bf00      	nop
 8008950:	20000020 	.word	0x20000020
 8008954:	0800b4ed 	.word	0x0800b4ed
 8008958:	20000030 	.word	0x20000030

0800895c <cleanup_stdio>:
 800895c:	6841      	ldr	r1, [r0, #4]
 800895e:	4b0c      	ldr	r3, [pc, #48]	@ (8008990 <cleanup_stdio+0x34>)
 8008960:	4299      	cmp	r1, r3
 8008962:	b510      	push	{r4, lr}
 8008964:	4604      	mov	r4, r0
 8008966:	d001      	beq.n	800896c <cleanup_stdio+0x10>
 8008968:	f002 fdc0 	bl	800b4ec <_fflush_r>
 800896c:	68a1      	ldr	r1, [r4, #8]
 800896e:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <cleanup_stdio+0x38>)
 8008970:	4299      	cmp	r1, r3
 8008972:	d002      	beq.n	800897a <cleanup_stdio+0x1e>
 8008974:	4620      	mov	r0, r4
 8008976:	f002 fdb9 	bl	800b4ec <_fflush_r>
 800897a:	68e1      	ldr	r1, [r4, #12]
 800897c:	4b06      	ldr	r3, [pc, #24]	@ (8008998 <cleanup_stdio+0x3c>)
 800897e:	4299      	cmp	r1, r3
 8008980:	d004      	beq.n	800898c <cleanup_stdio+0x30>
 8008982:	4620      	mov	r0, r4
 8008984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008988:	f002 bdb0 	b.w	800b4ec <_fflush_r>
 800898c:	bd10      	pop	{r4, pc}
 800898e:	bf00      	nop
 8008990:	20000698 	.word	0x20000698
 8008994:	20000700 	.word	0x20000700
 8008998:	20000768 	.word	0x20000768

0800899c <global_stdio_init.part.0>:
 800899c:	b510      	push	{r4, lr}
 800899e:	4b0b      	ldr	r3, [pc, #44]	@ (80089cc <global_stdio_init.part.0+0x30>)
 80089a0:	4c0b      	ldr	r4, [pc, #44]	@ (80089d0 <global_stdio_init.part.0+0x34>)
 80089a2:	4a0c      	ldr	r2, [pc, #48]	@ (80089d4 <global_stdio_init.part.0+0x38>)
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	4620      	mov	r0, r4
 80089a8:	2200      	movs	r2, #0
 80089aa:	2104      	movs	r1, #4
 80089ac:	f7ff ff94 	bl	80088d8 <std>
 80089b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80089b4:	2201      	movs	r2, #1
 80089b6:	2109      	movs	r1, #9
 80089b8:	f7ff ff8e 	bl	80088d8 <std>
 80089bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80089c0:	2202      	movs	r2, #2
 80089c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c6:	2112      	movs	r1, #18
 80089c8:	f7ff bf86 	b.w	80088d8 <std>
 80089cc:	200007d0 	.word	0x200007d0
 80089d0:	20000698 	.word	0x20000698
 80089d4:	08008945 	.word	0x08008945

080089d8 <__sfp_lock_acquire>:
 80089d8:	4801      	ldr	r0, [pc, #4]	@ (80089e0 <__sfp_lock_acquire+0x8>)
 80089da:	f000 b920 	b.w	8008c1e <__retarget_lock_acquire_recursive>
 80089de:	bf00      	nop
 80089e0:	200007d9 	.word	0x200007d9

080089e4 <__sfp_lock_release>:
 80089e4:	4801      	ldr	r0, [pc, #4]	@ (80089ec <__sfp_lock_release+0x8>)
 80089e6:	f000 b91b 	b.w	8008c20 <__retarget_lock_release_recursive>
 80089ea:	bf00      	nop
 80089ec:	200007d9 	.word	0x200007d9

080089f0 <__sinit>:
 80089f0:	b510      	push	{r4, lr}
 80089f2:	4604      	mov	r4, r0
 80089f4:	f7ff fff0 	bl	80089d8 <__sfp_lock_acquire>
 80089f8:	6a23      	ldr	r3, [r4, #32]
 80089fa:	b11b      	cbz	r3, 8008a04 <__sinit+0x14>
 80089fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a00:	f7ff bff0 	b.w	80089e4 <__sfp_lock_release>
 8008a04:	4b04      	ldr	r3, [pc, #16]	@ (8008a18 <__sinit+0x28>)
 8008a06:	6223      	str	r3, [r4, #32]
 8008a08:	4b04      	ldr	r3, [pc, #16]	@ (8008a1c <__sinit+0x2c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1f5      	bne.n	80089fc <__sinit+0xc>
 8008a10:	f7ff ffc4 	bl	800899c <global_stdio_init.part.0>
 8008a14:	e7f2      	b.n	80089fc <__sinit+0xc>
 8008a16:	bf00      	nop
 8008a18:	0800895d 	.word	0x0800895d
 8008a1c:	200007d0 	.word	0x200007d0

08008a20 <_fwalk_sglue>:
 8008a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a24:	4607      	mov	r7, r0
 8008a26:	4688      	mov	r8, r1
 8008a28:	4614      	mov	r4, r2
 8008a2a:	2600      	movs	r6, #0
 8008a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a30:	f1b9 0901 	subs.w	r9, r9, #1
 8008a34:	d505      	bpl.n	8008a42 <_fwalk_sglue+0x22>
 8008a36:	6824      	ldr	r4, [r4, #0]
 8008a38:	2c00      	cmp	r4, #0
 8008a3a:	d1f7      	bne.n	8008a2c <_fwalk_sglue+0xc>
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a42:	89ab      	ldrh	r3, [r5, #12]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d907      	bls.n	8008a58 <_fwalk_sglue+0x38>
 8008a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	d003      	beq.n	8008a58 <_fwalk_sglue+0x38>
 8008a50:	4629      	mov	r1, r5
 8008a52:	4638      	mov	r0, r7
 8008a54:	47c0      	blx	r8
 8008a56:	4306      	orrs	r6, r0
 8008a58:	3568      	adds	r5, #104	@ 0x68
 8008a5a:	e7e9      	b.n	8008a30 <_fwalk_sglue+0x10>

08008a5c <siprintf>:
 8008a5c:	b40e      	push	{r1, r2, r3}
 8008a5e:	b500      	push	{lr}
 8008a60:	b09c      	sub	sp, #112	@ 0x70
 8008a62:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a64:	9002      	str	r0, [sp, #8]
 8008a66:	9006      	str	r0, [sp, #24]
 8008a68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a6c:	4809      	ldr	r0, [pc, #36]	@ (8008a94 <siprintf+0x38>)
 8008a6e:	9107      	str	r1, [sp, #28]
 8008a70:	9104      	str	r1, [sp, #16]
 8008a72:	4909      	ldr	r1, [pc, #36]	@ (8008a98 <siprintf+0x3c>)
 8008a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a78:	9105      	str	r1, [sp, #20]
 8008a7a:	6800      	ldr	r0, [r0, #0]
 8008a7c:	9301      	str	r3, [sp, #4]
 8008a7e:	a902      	add	r1, sp, #8
 8008a80:	f002 fbb4 	bl	800b1ec <_svfiprintf_r>
 8008a84:	9b02      	ldr	r3, [sp, #8]
 8008a86:	2200      	movs	r2, #0
 8008a88:	701a      	strb	r2, [r3, #0]
 8008a8a:	b01c      	add	sp, #112	@ 0x70
 8008a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a90:	b003      	add	sp, #12
 8008a92:	4770      	bx	lr
 8008a94:	2000002c 	.word	0x2000002c
 8008a98:	ffff0208 	.word	0xffff0208

08008a9c <__sread>:
 8008a9c:	b510      	push	{r4, lr}
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa4:	f000 f86c 	bl	8008b80 <_read_r>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	bfab      	itete	ge
 8008aac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008aae:	89a3      	ldrhlt	r3, [r4, #12]
 8008ab0:	181b      	addge	r3, r3, r0
 8008ab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008ab6:	bfac      	ite	ge
 8008ab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008aba:	81a3      	strhlt	r3, [r4, #12]
 8008abc:	bd10      	pop	{r4, pc}

08008abe <__swrite>:
 8008abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac2:	461f      	mov	r7, r3
 8008ac4:	898b      	ldrh	r3, [r1, #12]
 8008ac6:	05db      	lsls	r3, r3, #23
 8008ac8:	4605      	mov	r5, r0
 8008aca:	460c      	mov	r4, r1
 8008acc:	4616      	mov	r6, r2
 8008ace:	d505      	bpl.n	8008adc <__swrite+0x1e>
 8008ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f000 f840 	bl	8008b5c <_lseek_r>
 8008adc:	89a3      	ldrh	r3, [r4, #12]
 8008ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ae2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ae6:	81a3      	strh	r3, [r4, #12]
 8008ae8:	4632      	mov	r2, r6
 8008aea:	463b      	mov	r3, r7
 8008aec:	4628      	mov	r0, r5
 8008aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008af2:	f000 b857 	b.w	8008ba4 <_write_r>

08008af6 <__sseek>:
 8008af6:	b510      	push	{r4, lr}
 8008af8:	460c      	mov	r4, r1
 8008afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afe:	f000 f82d 	bl	8008b5c <_lseek_r>
 8008b02:	1c43      	adds	r3, r0, #1
 8008b04:	89a3      	ldrh	r3, [r4, #12]
 8008b06:	bf15      	itete	ne
 8008b08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b12:	81a3      	strheq	r3, [r4, #12]
 8008b14:	bf18      	it	ne
 8008b16:	81a3      	strhne	r3, [r4, #12]
 8008b18:	bd10      	pop	{r4, pc}

08008b1a <__sclose>:
 8008b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1e:	f000 b80d 	b.w	8008b3c <_close_r>

08008b22 <memset>:
 8008b22:	4402      	add	r2, r0
 8008b24:	4603      	mov	r3, r0
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d100      	bne.n	8008b2c <memset+0xa>
 8008b2a:	4770      	bx	lr
 8008b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8008b30:	e7f9      	b.n	8008b26 <memset+0x4>
	...

08008b34 <_localeconv_r>:
 8008b34:	4800      	ldr	r0, [pc, #0]	@ (8008b38 <_localeconv_r+0x4>)
 8008b36:	4770      	bx	lr
 8008b38:	2000016c 	.word	0x2000016c

08008b3c <_close_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d06      	ldr	r5, [pc, #24]	@ (8008b58 <_close_r+0x1c>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f7fa fee0 	bl	800390c <_close>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_close_r+0x1a>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_close_r+0x1a>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	200007d4 	.word	0x200007d4

08008b5c <_lseek_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d07      	ldr	r5, [pc, #28]	@ (8008b7c <_lseek_r+0x20>)
 8008b60:	4604      	mov	r4, r0
 8008b62:	4608      	mov	r0, r1
 8008b64:	4611      	mov	r1, r2
 8008b66:	2200      	movs	r2, #0
 8008b68:	602a      	str	r2, [r5, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f7fa fef5 	bl	800395a <_lseek>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_lseek_r+0x1e>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_lseek_r+0x1e>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	200007d4 	.word	0x200007d4

08008b80 <_read_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4d07      	ldr	r5, [pc, #28]	@ (8008ba0 <_read_r+0x20>)
 8008b84:	4604      	mov	r4, r0
 8008b86:	4608      	mov	r0, r1
 8008b88:	4611      	mov	r1, r2
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	602a      	str	r2, [r5, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f7fa fe83 	bl	800389a <_read>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_read_r+0x1e>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_read_r+0x1e>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	200007d4 	.word	0x200007d4

08008ba4 <_write_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	@ (8008bc4 <_write_r+0x20>)
 8008ba8:	4604      	mov	r4, r0
 8008baa:	4608      	mov	r0, r1
 8008bac:	4611      	mov	r1, r2
 8008bae:	2200      	movs	r2, #0
 8008bb0:	602a      	str	r2, [r5, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	f7fa fe8e 	bl	80038d4 <_write>
 8008bb8:	1c43      	adds	r3, r0, #1
 8008bba:	d102      	bne.n	8008bc2 <_write_r+0x1e>
 8008bbc:	682b      	ldr	r3, [r5, #0]
 8008bbe:	b103      	cbz	r3, 8008bc2 <_write_r+0x1e>
 8008bc0:	6023      	str	r3, [r4, #0]
 8008bc2:	bd38      	pop	{r3, r4, r5, pc}
 8008bc4:	200007d4 	.word	0x200007d4

08008bc8 <__errno>:
 8008bc8:	4b01      	ldr	r3, [pc, #4]	@ (8008bd0 <__errno+0x8>)
 8008bca:	6818      	ldr	r0, [r3, #0]
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	2000002c 	.word	0x2000002c

08008bd4 <__libc_init_array>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8008c0c <__libc_init_array+0x38>)
 8008bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8008c10 <__libc_init_array+0x3c>)
 8008bda:	1b64      	subs	r4, r4, r5
 8008bdc:	10a4      	asrs	r4, r4, #2
 8008bde:	2600      	movs	r6, #0
 8008be0:	42a6      	cmp	r6, r4
 8008be2:	d109      	bne.n	8008bf8 <__libc_init_array+0x24>
 8008be4:	4d0b      	ldr	r5, [pc, #44]	@ (8008c14 <__libc_init_array+0x40>)
 8008be6:	4c0c      	ldr	r4, [pc, #48]	@ (8008c18 <__libc_init_array+0x44>)
 8008be8:	f003 fb70 	bl	800c2cc <_init>
 8008bec:	1b64      	subs	r4, r4, r5
 8008bee:	10a4      	asrs	r4, r4, #2
 8008bf0:	2600      	movs	r6, #0
 8008bf2:	42a6      	cmp	r6, r4
 8008bf4:	d105      	bne.n	8008c02 <__libc_init_array+0x2e>
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bfc:	4798      	blx	r3
 8008bfe:	3601      	adds	r6, #1
 8008c00:	e7ee      	b.n	8008be0 <__libc_init_array+0xc>
 8008c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c06:	4798      	blx	r3
 8008c08:	3601      	adds	r6, #1
 8008c0a:	e7f2      	b.n	8008bf2 <__libc_init_array+0x1e>
 8008c0c:	0800c7a8 	.word	0x0800c7a8
 8008c10:	0800c7a8 	.word	0x0800c7a8
 8008c14:	0800c7a8 	.word	0x0800c7a8
 8008c18:	0800c7b0 	.word	0x0800c7b0

08008c1c <__retarget_lock_init_recursive>:
 8008c1c:	4770      	bx	lr

08008c1e <__retarget_lock_acquire_recursive>:
 8008c1e:	4770      	bx	lr

08008c20 <__retarget_lock_release_recursive>:
 8008c20:	4770      	bx	lr
	...

08008c24 <nanf>:
 8008c24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008c2c <nanf+0x8>
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	7fc00000 	.word	0x7fc00000

08008c30 <quorem>:
 8008c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	6903      	ldr	r3, [r0, #16]
 8008c36:	690c      	ldr	r4, [r1, #16]
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	4607      	mov	r7, r0
 8008c3c:	db7e      	blt.n	8008d3c <quorem+0x10c>
 8008c3e:	3c01      	subs	r4, #1
 8008c40:	f101 0814 	add.w	r8, r1, #20
 8008c44:	00a3      	lsls	r3, r4, #2
 8008c46:	f100 0514 	add.w	r5, r0, #20
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c50:	9301      	str	r3, [sp, #4]
 8008c52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c62:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c66:	d32e      	bcc.n	8008cc6 <quorem+0x96>
 8008c68:	f04f 0a00 	mov.w	sl, #0
 8008c6c:	46c4      	mov	ip, r8
 8008c6e:	46ae      	mov	lr, r5
 8008c70:	46d3      	mov	fp, sl
 8008c72:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c76:	b298      	uxth	r0, r3
 8008c78:	fb06 a000 	mla	r0, r6, r0, sl
 8008c7c:	0c02      	lsrs	r2, r0, #16
 8008c7e:	0c1b      	lsrs	r3, r3, #16
 8008c80:	fb06 2303 	mla	r3, r6, r3, r2
 8008c84:	f8de 2000 	ldr.w	r2, [lr]
 8008c88:	b280      	uxth	r0, r0
 8008c8a:	b292      	uxth	r2, r2
 8008c8c:	1a12      	subs	r2, r2, r0
 8008c8e:	445a      	add	r2, fp
 8008c90:	f8de 0000 	ldr.w	r0, [lr]
 8008c94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008ca2:	b292      	uxth	r2, r2
 8008ca4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ca8:	45e1      	cmp	r9, ip
 8008caa:	f84e 2b04 	str.w	r2, [lr], #4
 8008cae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008cb2:	d2de      	bcs.n	8008c72 <quorem+0x42>
 8008cb4:	9b00      	ldr	r3, [sp, #0]
 8008cb6:	58eb      	ldr	r3, [r5, r3]
 8008cb8:	b92b      	cbnz	r3, 8008cc6 <quorem+0x96>
 8008cba:	9b01      	ldr	r3, [sp, #4]
 8008cbc:	3b04      	subs	r3, #4
 8008cbe:	429d      	cmp	r5, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	d32f      	bcc.n	8008d24 <quorem+0xf4>
 8008cc4:	613c      	str	r4, [r7, #16]
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	f001 f9c2 	bl	800a050 <__mcmp>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	db25      	blt.n	8008d1c <quorem+0xec>
 8008cd0:	4629      	mov	r1, r5
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cd8:	f8d1 c000 	ldr.w	ip, [r1]
 8008cdc:	fa1f fe82 	uxth.w	lr, r2
 8008ce0:	fa1f f38c 	uxth.w	r3, ip
 8008ce4:	eba3 030e 	sub.w	r3, r3, lr
 8008ce8:	4403      	add	r3, r0
 8008cea:	0c12      	lsrs	r2, r2, #16
 8008cec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008cf0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cfa:	45c1      	cmp	r9, r8
 8008cfc:	f841 3b04 	str.w	r3, [r1], #4
 8008d00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d04:	d2e6      	bcs.n	8008cd4 <quorem+0xa4>
 8008d06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d0e:	b922      	cbnz	r2, 8008d1a <quorem+0xea>
 8008d10:	3b04      	subs	r3, #4
 8008d12:	429d      	cmp	r5, r3
 8008d14:	461a      	mov	r2, r3
 8008d16:	d30b      	bcc.n	8008d30 <quorem+0x100>
 8008d18:	613c      	str	r4, [r7, #16]
 8008d1a:	3601      	adds	r6, #1
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	b003      	add	sp, #12
 8008d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d24:	6812      	ldr	r2, [r2, #0]
 8008d26:	3b04      	subs	r3, #4
 8008d28:	2a00      	cmp	r2, #0
 8008d2a:	d1cb      	bne.n	8008cc4 <quorem+0x94>
 8008d2c:	3c01      	subs	r4, #1
 8008d2e:	e7c6      	b.n	8008cbe <quorem+0x8e>
 8008d30:	6812      	ldr	r2, [r2, #0]
 8008d32:	3b04      	subs	r3, #4
 8008d34:	2a00      	cmp	r2, #0
 8008d36:	d1ef      	bne.n	8008d18 <quorem+0xe8>
 8008d38:	3c01      	subs	r4, #1
 8008d3a:	e7ea      	b.n	8008d12 <quorem+0xe2>
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e7ee      	b.n	8008d1e <quorem+0xee>

08008d40 <_dtoa_r>:
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	69c7      	ldr	r7, [r0, #28]
 8008d46:	b099      	sub	sp, #100	@ 0x64
 8008d48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008d4c:	ec55 4b10 	vmov	r4, r5, d0
 8008d50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008d52:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d54:	4683      	mov	fp, r0
 8008d56:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008d5a:	b97f      	cbnz	r7, 8008d7c <_dtoa_r+0x3c>
 8008d5c:	2010      	movs	r0, #16
 8008d5e:	f000 fdfd 	bl	800995c <malloc>
 8008d62:	4602      	mov	r2, r0
 8008d64:	f8cb 001c 	str.w	r0, [fp, #28]
 8008d68:	b920      	cbnz	r0, 8008d74 <_dtoa_r+0x34>
 8008d6a:	4ba7      	ldr	r3, [pc, #668]	@ (8009008 <_dtoa_r+0x2c8>)
 8008d6c:	21ef      	movs	r1, #239	@ 0xef
 8008d6e:	48a7      	ldr	r0, [pc, #668]	@ (800900c <_dtoa_r+0x2cc>)
 8008d70:	f002 fc36 	bl	800b5e0 <__assert_func>
 8008d74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d78:	6007      	str	r7, [r0, #0]
 8008d7a:	60c7      	str	r7, [r0, #12]
 8008d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d80:	6819      	ldr	r1, [r3, #0]
 8008d82:	b159      	cbz	r1, 8008d9c <_dtoa_r+0x5c>
 8008d84:	685a      	ldr	r2, [r3, #4]
 8008d86:	604a      	str	r2, [r1, #4]
 8008d88:	2301      	movs	r3, #1
 8008d8a:	4093      	lsls	r3, r2
 8008d8c:	608b      	str	r3, [r1, #8]
 8008d8e:	4658      	mov	r0, fp
 8008d90:	f000 feda 	bl	8009b48 <_Bfree>
 8008d94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
 8008d9c:	1e2b      	subs	r3, r5, #0
 8008d9e:	bfb9      	ittee	lt
 8008da0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008da4:	9303      	strlt	r3, [sp, #12]
 8008da6:	2300      	movge	r3, #0
 8008da8:	6033      	strge	r3, [r6, #0]
 8008daa:	9f03      	ldr	r7, [sp, #12]
 8008dac:	4b98      	ldr	r3, [pc, #608]	@ (8009010 <_dtoa_r+0x2d0>)
 8008dae:	bfbc      	itt	lt
 8008db0:	2201      	movlt	r2, #1
 8008db2:	6032      	strlt	r2, [r6, #0]
 8008db4:	43bb      	bics	r3, r7
 8008db6:	d112      	bne.n	8008dde <_dtoa_r+0x9e>
 8008db8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008dba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dc4:	4323      	orrs	r3, r4
 8008dc6:	f000 854d 	beq.w	8009864 <_dtoa_r+0xb24>
 8008dca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dcc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009024 <_dtoa_r+0x2e4>
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 854f 	beq.w	8009874 <_dtoa_r+0xb34>
 8008dd6:	f10a 0303 	add.w	r3, sl, #3
 8008dda:	f000 bd49 	b.w	8009870 <_dtoa_r+0xb30>
 8008dde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008de2:	2200      	movs	r2, #0
 8008de4:	ec51 0b17 	vmov	r0, r1, d7
 8008de8:	2300      	movs	r3, #0
 8008dea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008dee:	f7f7 fe8b 	bl	8000b08 <__aeabi_dcmpeq>
 8008df2:	4680      	mov	r8, r0
 8008df4:	b158      	cbz	r0, 8008e0e <_dtoa_r+0xce>
 8008df6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008df8:	2301      	movs	r3, #1
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008dfe:	b113      	cbz	r3, 8008e06 <_dtoa_r+0xc6>
 8008e00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e02:	4b84      	ldr	r3, [pc, #528]	@ (8009014 <_dtoa_r+0x2d4>)
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009028 <_dtoa_r+0x2e8>
 8008e0a:	f000 bd33 	b.w	8009874 <_dtoa_r+0xb34>
 8008e0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e12:	aa16      	add	r2, sp, #88	@ 0x58
 8008e14:	a917      	add	r1, sp, #92	@ 0x5c
 8008e16:	4658      	mov	r0, fp
 8008e18:	f001 fa3a 	bl	800a290 <__d2b>
 8008e1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e20:	4681      	mov	r9, r0
 8008e22:	2e00      	cmp	r6, #0
 8008e24:	d077      	beq.n	8008f16 <_dtoa_r+0x1d6>
 8008e26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008e38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008e3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008e40:	4619      	mov	r1, r3
 8008e42:	2200      	movs	r2, #0
 8008e44:	4b74      	ldr	r3, [pc, #464]	@ (8009018 <_dtoa_r+0x2d8>)
 8008e46:	f7f7 fa3f 	bl	80002c8 <__aeabi_dsub>
 8008e4a:	a369      	add	r3, pc, #420	@ (adr r3, 8008ff0 <_dtoa_r+0x2b0>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 fbf2 	bl	8000638 <__aeabi_dmul>
 8008e54:	a368      	add	r3, pc, #416	@ (adr r3, 8008ff8 <_dtoa_r+0x2b8>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	f7f7 fa37 	bl	80002cc <__adddf3>
 8008e5e:	4604      	mov	r4, r0
 8008e60:	4630      	mov	r0, r6
 8008e62:	460d      	mov	r5, r1
 8008e64:	f7f7 fb7e 	bl	8000564 <__aeabi_i2d>
 8008e68:	a365      	add	r3, pc, #404	@ (adr r3, 8009000 <_dtoa_r+0x2c0>)
 8008e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6e:	f7f7 fbe3 	bl	8000638 <__aeabi_dmul>
 8008e72:	4602      	mov	r2, r0
 8008e74:	460b      	mov	r3, r1
 8008e76:	4620      	mov	r0, r4
 8008e78:	4629      	mov	r1, r5
 8008e7a:	f7f7 fa27 	bl	80002cc <__adddf3>
 8008e7e:	4604      	mov	r4, r0
 8008e80:	460d      	mov	r5, r1
 8008e82:	f7f7 fe89 	bl	8000b98 <__aeabi_d2iz>
 8008e86:	2200      	movs	r2, #0
 8008e88:	4607      	mov	r7, r0
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	4629      	mov	r1, r5
 8008e90:	f7f7 fe44 	bl	8000b1c <__aeabi_dcmplt>
 8008e94:	b140      	cbz	r0, 8008ea8 <_dtoa_r+0x168>
 8008e96:	4638      	mov	r0, r7
 8008e98:	f7f7 fb64 	bl	8000564 <__aeabi_i2d>
 8008e9c:	4622      	mov	r2, r4
 8008e9e:	462b      	mov	r3, r5
 8008ea0:	f7f7 fe32 	bl	8000b08 <__aeabi_dcmpeq>
 8008ea4:	b900      	cbnz	r0, 8008ea8 <_dtoa_r+0x168>
 8008ea6:	3f01      	subs	r7, #1
 8008ea8:	2f16      	cmp	r7, #22
 8008eaa:	d851      	bhi.n	8008f50 <_dtoa_r+0x210>
 8008eac:	4b5b      	ldr	r3, [pc, #364]	@ (800901c <_dtoa_r+0x2dc>)
 8008eae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eba:	f7f7 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8008ebe:	2800      	cmp	r0, #0
 8008ec0:	d048      	beq.n	8008f54 <_dtoa_r+0x214>
 8008ec2:	3f01      	subs	r7, #1
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ec8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008eca:	1b9b      	subs	r3, r3, r6
 8008ecc:	1e5a      	subs	r2, r3, #1
 8008ece:	bf44      	itt	mi
 8008ed0:	f1c3 0801 	rsbmi	r8, r3, #1
 8008ed4:	2300      	movmi	r3, #0
 8008ed6:	9208      	str	r2, [sp, #32]
 8008ed8:	bf54      	ite	pl
 8008eda:	f04f 0800 	movpl.w	r8, #0
 8008ede:	9308      	strmi	r3, [sp, #32]
 8008ee0:	2f00      	cmp	r7, #0
 8008ee2:	db39      	blt.n	8008f58 <_dtoa_r+0x218>
 8008ee4:	9b08      	ldr	r3, [sp, #32]
 8008ee6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008ee8:	443b      	add	r3, r7
 8008eea:	9308      	str	r3, [sp, #32]
 8008eec:	2300      	movs	r3, #0
 8008eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef2:	2b09      	cmp	r3, #9
 8008ef4:	d864      	bhi.n	8008fc0 <_dtoa_r+0x280>
 8008ef6:	2b05      	cmp	r3, #5
 8008ef8:	bfc4      	itt	gt
 8008efa:	3b04      	subgt	r3, #4
 8008efc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f00:	f1a3 0302 	sub.w	r3, r3, #2
 8008f04:	bfcc      	ite	gt
 8008f06:	2400      	movgt	r4, #0
 8008f08:	2401      	movle	r4, #1
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d863      	bhi.n	8008fd6 <_dtoa_r+0x296>
 8008f0e:	e8df f003 	tbb	[pc, r3]
 8008f12:	372a      	.short	0x372a
 8008f14:	5535      	.short	0x5535
 8008f16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008f1a:	441e      	add	r6, r3
 8008f1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f20:	2b20      	cmp	r3, #32
 8008f22:	bfc1      	itttt	gt
 8008f24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f28:	409f      	lslgt	r7, r3
 8008f2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f32:	bfd6      	itet	le
 8008f34:	f1c3 0320 	rsble	r3, r3, #32
 8008f38:	ea47 0003 	orrgt.w	r0, r7, r3
 8008f3c:	fa04 f003 	lslle.w	r0, r4, r3
 8008f40:	f7f7 fb00 	bl	8000544 <__aeabi_ui2d>
 8008f44:	2201      	movs	r2, #1
 8008f46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008f4a:	3e01      	subs	r6, #1
 8008f4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008f4e:	e777      	b.n	8008e40 <_dtoa_r+0x100>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e7b8      	b.n	8008ec6 <_dtoa_r+0x186>
 8008f54:	9012      	str	r0, [sp, #72]	@ 0x48
 8008f56:	e7b7      	b.n	8008ec8 <_dtoa_r+0x188>
 8008f58:	427b      	negs	r3, r7
 8008f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	eba8 0807 	sub.w	r8, r8, r7
 8008f62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f64:	e7c4      	b.n	8008ef0 <_dtoa_r+0x1b0>
 8008f66:	2300      	movs	r3, #0
 8008f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	dc35      	bgt.n	8008fdc <_dtoa_r+0x29c>
 8008f70:	2301      	movs	r3, #1
 8008f72:	9300      	str	r3, [sp, #0]
 8008f74:	9307      	str	r3, [sp, #28]
 8008f76:	461a      	mov	r2, r3
 8008f78:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f7a:	e00b      	b.n	8008f94 <_dtoa_r+0x254>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e7f3      	b.n	8008f68 <_dtoa_r+0x228>
 8008f80:	2300      	movs	r3, #0
 8008f82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f86:	18fb      	adds	r3, r7, r3
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	9307      	str	r3, [sp, #28]
 8008f90:	bfb8      	it	lt
 8008f92:	2301      	movlt	r3, #1
 8008f94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008f98:	2100      	movs	r1, #0
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	f102 0514 	add.w	r5, r2, #20
 8008fa0:	429d      	cmp	r5, r3
 8008fa2:	d91f      	bls.n	8008fe4 <_dtoa_r+0x2a4>
 8008fa4:	6041      	str	r1, [r0, #4]
 8008fa6:	4658      	mov	r0, fp
 8008fa8:	f000 fd8e 	bl	8009ac8 <_Balloc>
 8008fac:	4682      	mov	sl, r0
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d13c      	bne.n	800902c <_dtoa_r+0x2ec>
 8008fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8009020 <_dtoa_r+0x2e0>)
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008fba:	e6d8      	b.n	8008d6e <_dtoa_r+0x2e>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e7e0      	b.n	8008f82 <_dtoa_r+0x242>
 8008fc0:	2401      	movs	r4, #1
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	9307      	str	r3, [sp, #28]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2312      	movs	r3, #18
 8008fd4:	e7d0      	b.n	8008f78 <_dtoa_r+0x238>
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fda:	e7f5      	b.n	8008fc8 <_dtoa_r+0x288>
 8008fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fde:	9300      	str	r3, [sp, #0]
 8008fe0:	9307      	str	r3, [sp, #28]
 8008fe2:	e7d7      	b.n	8008f94 <_dtoa_r+0x254>
 8008fe4:	3101      	adds	r1, #1
 8008fe6:	0052      	lsls	r2, r2, #1
 8008fe8:	e7d8      	b.n	8008f9c <_dtoa_r+0x25c>
 8008fea:	bf00      	nop
 8008fec:	f3af 8000 	nop.w
 8008ff0:	636f4361 	.word	0x636f4361
 8008ff4:	3fd287a7 	.word	0x3fd287a7
 8008ff8:	8b60c8b3 	.word	0x8b60c8b3
 8008ffc:	3fc68a28 	.word	0x3fc68a28
 8009000:	509f79fb 	.word	0x509f79fb
 8009004:	3fd34413 	.word	0x3fd34413
 8009008:	0800c3b6 	.word	0x0800c3b6
 800900c:	0800c3cd 	.word	0x0800c3cd
 8009010:	7ff00000 	.word	0x7ff00000
 8009014:	0800c381 	.word	0x0800c381
 8009018:	3ff80000 	.word	0x3ff80000
 800901c:	0800c4c8 	.word	0x0800c4c8
 8009020:	0800c425 	.word	0x0800c425
 8009024:	0800c3b2 	.word	0x0800c3b2
 8009028:	0800c380 	.word	0x0800c380
 800902c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009030:	6018      	str	r0, [r3, #0]
 8009032:	9b07      	ldr	r3, [sp, #28]
 8009034:	2b0e      	cmp	r3, #14
 8009036:	f200 80a4 	bhi.w	8009182 <_dtoa_r+0x442>
 800903a:	2c00      	cmp	r4, #0
 800903c:	f000 80a1 	beq.w	8009182 <_dtoa_r+0x442>
 8009040:	2f00      	cmp	r7, #0
 8009042:	dd33      	ble.n	80090ac <_dtoa_r+0x36c>
 8009044:	4bad      	ldr	r3, [pc, #692]	@ (80092fc <_dtoa_r+0x5bc>)
 8009046:	f007 020f 	and.w	r2, r7, #15
 800904a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800904e:	ed93 7b00 	vldr	d7, [r3]
 8009052:	05f8      	lsls	r0, r7, #23
 8009054:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009058:	ea4f 1427 	mov.w	r4, r7, asr #4
 800905c:	d516      	bpl.n	800908c <_dtoa_r+0x34c>
 800905e:	4ba8      	ldr	r3, [pc, #672]	@ (8009300 <_dtoa_r+0x5c0>)
 8009060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009068:	f7f7 fc10 	bl	800088c <__aeabi_ddiv>
 800906c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009070:	f004 040f 	and.w	r4, r4, #15
 8009074:	2603      	movs	r6, #3
 8009076:	4da2      	ldr	r5, [pc, #648]	@ (8009300 <_dtoa_r+0x5c0>)
 8009078:	b954      	cbnz	r4, 8009090 <_dtoa_r+0x350>
 800907a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800907e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009082:	f7f7 fc03 	bl	800088c <__aeabi_ddiv>
 8009086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800908a:	e028      	b.n	80090de <_dtoa_r+0x39e>
 800908c:	2602      	movs	r6, #2
 800908e:	e7f2      	b.n	8009076 <_dtoa_r+0x336>
 8009090:	07e1      	lsls	r1, r4, #31
 8009092:	d508      	bpl.n	80090a6 <_dtoa_r+0x366>
 8009094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800909c:	f7f7 facc 	bl	8000638 <__aeabi_dmul>
 80090a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090a4:	3601      	adds	r6, #1
 80090a6:	1064      	asrs	r4, r4, #1
 80090a8:	3508      	adds	r5, #8
 80090aa:	e7e5      	b.n	8009078 <_dtoa_r+0x338>
 80090ac:	f000 80d2 	beq.w	8009254 <_dtoa_r+0x514>
 80090b0:	427c      	negs	r4, r7
 80090b2:	4b92      	ldr	r3, [pc, #584]	@ (80092fc <_dtoa_r+0x5bc>)
 80090b4:	4d92      	ldr	r5, [pc, #584]	@ (8009300 <_dtoa_r+0x5c0>)
 80090b6:	f004 020f 	and.w	r2, r4, #15
 80090ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090c6:	f7f7 fab7 	bl	8000638 <__aeabi_dmul>
 80090ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090ce:	1124      	asrs	r4, r4, #4
 80090d0:	2300      	movs	r3, #0
 80090d2:	2602      	movs	r6, #2
 80090d4:	2c00      	cmp	r4, #0
 80090d6:	f040 80b2 	bne.w	800923e <_dtoa_r+0x4fe>
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1d3      	bne.n	8009086 <_dtoa_r+0x346>
 80090de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80090e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 80b7 	beq.w	8009258 <_dtoa_r+0x518>
 80090ea:	4b86      	ldr	r3, [pc, #536]	@ (8009304 <_dtoa_r+0x5c4>)
 80090ec:	2200      	movs	r2, #0
 80090ee:	4620      	mov	r0, r4
 80090f0:	4629      	mov	r1, r5
 80090f2:	f7f7 fd13 	bl	8000b1c <__aeabi_dcmplt>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f000 80ae 	beq.w	8009258 <_dtoa_r+0x518>
 80090fc:	9b07      	ldr	r3, [sp, #28]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 80aa 	beq.w	8009258 <_dtoa_r+0x518>
 8009104:	9b00      	ldr	r3, [sp, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	dd37      	ble.n	800917a <_dtoa_r+0x43a>
 800910a:	1e7b      	subs	r3, r7, #1
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	4620      	mov	r0, r4
 8009110:	4b7d      	ldr	r3, [pc, #500]	@ (8009308 <_dtoa_r+0x5c8>)
 8009112:	2200      	movs	r2, #0
 8009114:	4629      	mov	r1, r5
 8009116:	f7f7 fa8f 	bl	8000638 <__aeabi_dmul>
 800911a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800911e:	9c00      	ldr	r4, [sp, #0]
 8009120:	3601      	adds	r6, #1
 8009122:	4630      	mov	r0, r6
 8009124:	f7f7 fa1e 	bl	8000564 <__aeabi_i2d>
 8009128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800912c:	f7f7 fa84 	bl	8000638 <__aeabi_dmul>
 8009130:	4b76      	ldr	r3, [pc, #472]	@ (800930c <_dtoa_r+0x5cc>)
 8009132:	2200      	movs	r2, #0
 8009134:	f7f7 f8ca 	bl	80002cc <__adddf3>
 8009138:	4605      	mov	r5, r0
 800913a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800913e:	2c00      	cmp	r4, #0
 8009140:	f040 808d 	bne.w	800925e <_dtoa_r+0x51e>
 8009144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009148:	4b71      	ldr	r3, [pc, #452]	@ (8009310 <_dtoa_r+0x5d0>)
 800914a:	2200      	movs	r2, #0
 800914c:	f7f7 f8bc 	bl	80002c8 <__aeabi_dsub>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009158:	462a      	mov	r2, r5
 800915a:	4633      	mov	r3, r6
 800915c:	f7f7 fcfc 	bl	8000b58 <__aeabi_dcmpgt>
 8009160:	2800      	cmp	r0, #0
 8009162:	f040 828b 	bne.w	800967c <_dtoa_r+0x93c>
 8009166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916a:	462a      	mov	r2, r5
 800916c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009170:	f7f7 fcd4 	bl	8000b1c <__aeabi_dcmplt>
 8009174:	2800      	cmp	r0, #0
 8009176:	f040 8128 	bne.w	80093ca <_dtoa_r+0x68a>
 800917a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800917e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009182:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009184:	2b00      	cmp	r3, #0
 8009186:	f2c0 815a 	blt.w	800943e <_dtoa_r+0x6fe>
 800918a:	2f0e      	cmp	r7, #14
 800918c:	f300 8157 	bgt.w	800943e <_dtoa_r+0x6fe>
 8009190:	4b5a      	ldr	r3, [pc, #360]	@ (80092fc <_dtoa_r+0x5bc>)
 8009192:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009196:	ed93 7b00 	vldr	d7, [r3]
 800919a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800919c:	2b00      	cmp	r3, #0
 800919e:	ed8d 7b00 	vstr	d7, [sp]
 80091a2:	da03      	bge.n	80091ac <_dtoa_r+0x46c>
 80091a4:	9b07      	ldr	r3, [sp, #28]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f340 8101 	ble.w	80093ae <_dtoa_r+0x66e>
 80091ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80091b0:	4656      	mov	r6, sl
 80091b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091b6:	4620      	mov	r0, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	f7f7 fb67 	bl	800088c <__aeabi_ddiv>
 80091be:	f7f7 fceb 	bl	8000b98 <__aeabi_d2iz>
 80091c2:	4680      	mov	r8, r0
 80091c4:	f7f7 f9ce 	bl	8000564 <__aeabi_i2d>
 80091c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091cc:	f7f7 fa34 	bl	8000638 <__aeabi_dmul>
 80091d0:	4602      	mov	r2, r0
 80091d2:	460b      	mov	r3, r1
 80091d4:	4620      	mov	r0, r4
 80091d6:	4629      	mov	r1, r5
 80091d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80091dc:	f7f7 f874 	bl	80002c8 <__aeabi_dsub>
 80091e0:	f806 4b01 	strb.w	r4, [r6], #1
 80091e4:	9d07      	ldr	r5, [sp, #28]
 80091e6:	eba6 040a 	sub.w	r4, r6, sl
 80091ea:	42a5      	cmp	r5, r4
 80091ec:	4602      	mov	r2, r0
 80091ee:	460b      	mov	r3, r1
 80091f0:	f040 8117 	bne.w	8009422 <_dtoa_r+0x6e2>
 80091f4:	f7f7 f86a 	bl	80002cc <__adddf3>
 80091f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091fc:	4604      	mov	r4, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	f7f7 fcaa 	bl	8000b58 <__aeabi_dcmpgt>
 8009204:	2800      	cmp	r0, #0
 8009206:	f040 80f9 	bne.w	80093fc <_dtoa_r+0x6bc>
 800920a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800920e:	4620      	mov	r0, r4
 8009210:	4629      	mov	r1, r5
 8009212:	f7f7 fc79 	bl	8000b08 <__aeabi_dcmpeq>
 8009216:	b118      	cbz	r0, 8009220 <_dtoa_r+0x4e0>
 8009218:	f018 0f01 	tst.w	r8, #1
 800921c:	f040 80ee 	bne.w	80093fc <_dtoa_r+0x6bc>
 8009220:	4649      	mov	r1, r9
 8009222:	4658      	mov	r0, fp
 8009224:	f000 fc90 	bl	8009b48 <_Bfree>
 8009228:	2300      	movs	r3, #0
 800922a:	7033      	strb	r3, [r6, #0]
 800922c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800922e:	3701      	adds	r7, #1
 8009230:	601f      	str	r7, [r3, #0]
 8009232:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009234:	2b00      	cmp	r3, #0
 8009236:	f000 831d 	beq.w	8009874 <_dtoa_r+0xb34>
 800923a:	601e      	str	r6, [r3, #0]
 800923c:	e31a      	b.n	8009874 <_dtoa_r+0xb34>
 800923e:	07e2      	lsls	r2, r4, #31
 8009240:	d505      	bpl.n	800924e <_dtoa_r+0x50e>
 8009242:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009246:	f7f7 f9f7 	bl	8000638 <__aeabi_dmul>
 800924a:	3601      	adds	r6, #1
 800924c:	2301      	movs	r3, #1
 800924e:	1064      	asrs	r4, r4, #1
 8009250:	3508      	adds	r5, #8
 8009252:	e73f      	b.n	80090d4 <_dtoa_r+0x394>
 8009254:	2602      	movs	r6, #2
 8009256:	e742      	b.n	80090de <_dtoa_r+0x39e>
 8009258:	9c07      	ldr	r4, [sp, #28]
 800925a:	9704      	str	r7, [sp, #16]
 800925c:	e761      	b.n	8009122 <_dtoa_r+0x3e2>
 800925e:	4b27      	ldr	r3, [pc, #156]	@ (80092fc <_dtoa_r+0x5bc>)
 8009260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009262:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009266:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800926a:	4454      	add	r4, sl
 800926c:	2900      	cmp	r1, #0
 800926e:	d053      	beq.n	8009318 <_dtoa_r+0x5d8>
 8009270:	4928      	ldr	r1, [pc, #160]	@ (8009314 <_dtoa_r+0x5d4>)
 8009272:	2000      	movs	r0, #0
 8009274:	f7f7 fb0a 	bl	800088c <__aeabi_ddiv>
 8009278:	4633      	mov	r3, r6
 800927a:	462a      	mov	r2, r5
 800927c:	f7f7 f824 	bl	80002c8 <__aeabi_dsub>
 8009280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009284:	4656      	mov	r6, sl
 8009286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800928a:	f7f7 fc85 	bl	8000b98 <__aeabi_d2iz>
 800928e:	4605      	mov	r5, r0
 8009290:	f7f7 f968 	bl	8000564 <__aeabi_i2d>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800929c:	f7f7 f814 	bl	80002c8 <__aeabi_dsub>
 80092a0:	3530      	adds	r5, #48	@ 0x30
 80092a2:	4602      	mov	r2, r0
 80092a4:	460b      	mov	r3, r1
 80092a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092aa:	f806 5b01 	strb.w	r5, [r6], #1
 80092ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092b2:	f7f7 fc33 	bl	8000b1c <__aeabi_dcmplt>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d171      	bne.n	800939e <_dtoa_r+0x65e>
 80092ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092be:	4911      	ldr	r1, [pc, #68]	@ (8009304 <_dtoa_r+0x5c4>)
 80092c0:	2000      	movs	r0, #0
 80092c2:	f7f7 f801 	bl	80002c8 <__aeabi_dsub>
 80092c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80092ca:	f7f7 fc27 	bl	8000b1c <__aeabi_dcmplt>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f040 8095 	bne.w	80093fe <_dtoa_r+0x6be>
 80092d4:	42a6      	cmp	r6, r4
 80092d6:	f43f af50 	beq.w	800917a <_dtoa_r+0x43a>
 80092da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80092de:	4b0a      	ldr	r3, [pc, #40]	@ (8009308 <_dtoa_r+0x5c8>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	f7f7 f9a9 	bl	8000638 <__aeabi_dmul>
 80092e6:	4b08      	ldr	r3, [pc, #32]	@ (8009308 <_dtoa_r+0x5c8>)
 80092e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092ec:	2200      	movs	r2, #0
 80092ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092f2:	f7f7 f9a1 	bl	8000638 <__aeabi_dmul>
 80092f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092fa:	e7c4      	b.n	8009286 <_dtoa_r+0x546>
 80092fc:	0800c4c8 	.word	0x0800c4c8
 8009300:	0800c4a0 	.word	0x0800c4a0
 8009304:	3ff00000 	.word	0x3ff00000
 8009308:	40240000 	.word	0x40240000
 800930c:	401c0000 	.word	0x401c0000
 8009310:	40140000 	.word	0x40140000
 8009314:	3fe00000 	.word	0x3fe00000
 8009318:	4631      	mov	r1, r6
 800931a:	4628      	mov	r0, r5
 800931c:	f7f7 f98c 	bl	8000638 <__aeabi_dmul>
 8009320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009324:	9415      	str	r4, [sp, #84]	@ 0x54
 8009326:	4656      	mov	r6, sl
 8009328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800932c:	f7f7 fc34 	bl	8000b98 <__aeabi_d2iz>
 8009330:	4605      	mov	r5, r0
 8009332:	f7f7 f917 	bl	8000564 <__aeabi_i2d>
 8009336:	4602      	mov	r2, r0
 8009338:	460b      	mov	r3, r1
 800933a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800933e:	f7f6 ffc3 	bl	80002c8 <__aeabi_dsub>
 8009342:	3530      	adds	r5, #48	@ 0x30
 8009344:	f806 5b01 	strb.w	r5, [r6], #1
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	42a6      	cmp	r6, r4
 800934e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009352:	f04f 0200 	mov.w	r2, #0
 8009356:	d124      	bne.n	80093a2 <_dtoa_r+0x662>
 8009358:	4bac      	ldr	r3, [pc, #688]	@ (800960c <_dtoa_r+0x8cc>)
 800935a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800935e:	f7f6 ffb5 	bl	80002cc <__adddf3>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800936a:	f7f7 fbf5 	bl	8000b58 <__aeabi_dcmpgt>
 800936e:	2800      	cmp	r0, #0
 8009370:	d145      	bne.n	80093fe <_dtoa_r+0x6be>
 8009372:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009376:	49a5      	ldr	r1, [pc, #660]	@ (800960c <_dtoa_r+0x8cc>)
 8009378:	2000      	movs	r0, #0
 800937a:	f7f6 ffa5 	bl	80002c8 <__aeabi_dsub>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009386:	f7f7 fbc9 	bl	8000b1c <__aeabi_dcmplt>
 800938a:	2800      	cmp	r0, #0
 800938c:	f43f aef5 	beq.w	800917a <_dtoa_r+0x43a>
 8009390:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009392:	1e73      	subs	r3, r6, #1
 8009394:	9315      	str	r3, [sp, #84]	@ 0x54
 8009396:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800939a:	2b30      	cmp	r3, #48	@ 0x30
 800939c:	d0f8      	beq.n	8009390 <_dtoa_r+0x650>
 800939e:	9f04      	ldr	r7, [sp, #16]
 80093a0:	e73e      	b.n	8009220 <_dtoa_r+0x4e0>
 80093a2:	4b9b      	ldr	r3, [pc, #620]	@ (8009610 <_dtoa_r+0x8d0>)
 80093a4:	f7f7 f948 	bl	8000638 <__aeabi_dmul>
 80093a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093ac:	e7bc      	b.n	8009328 <_dtoa_r+0x5e8>
 80093ae:	d10c      	bne.n	80093ca <_dtoa_r+0x68a>
 80093b0:	4b98      	ldr	r3, [pc, #608]	@ (8009614 <_dtoa_r+0x8d4>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80093b8:	f7f7 f93e 	bl	8000638 <__aeabi_dmul>
 80093bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093c0:	f7f7 fbc0 	bl	8000b44 <__aeabi_dcmpge>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	f000 8157 	beq.w	8009678 <_dtoa_r+0x938>
 80093ca:	2400      	movs	r4, #0
 80093cc:	4625      	mov	r5, r4
 80093ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093d0:	43db      	mvns	r3, r3
 80093d2:	9304      	str	r3, [sp, #16]
 80093d4:	4656      	mov	r6, sl
 80093d6:	2700      	movs	r7, #0
 80093d8:	4621      	mov	r1, r4
 80093da:	4658      	mov	r0, fp
 80093dc:	f000 fbb4 	bl	8009b48 <_Bfree>
 80093e0:	2d00      	cmp	r5, #0
 80093e2:	d0dc      	beq.n	800939e <_dtoa_r+0x65e>
 80093e4:	b12f      	cbz	r7, 80093f2 <_dtoa_r+0x6b2>
 80093e6:	42af      	cmp	r7, r5
 80093e8:	d003      	beq.n	80093f2 <_dtoa_r+0x6b2>
 80093ea:	4639      	mov	r1, r7
 80093ec:	4658      	mov	r0, fp
 80093ee:	f000 fbab 	bl	8009b48 <_Bfree>
 80093f2:	4629      	mov	r1, r5
 80093f4:	4658      	mov	r0, fp
 80093f6:	f000 fba7 	bl	8009b48 <_Bfree>
 80093fa:	e7d0      	b.n	800939e <_dtoa_r+0x65e>
 80093fc:	9704      	str	r7, [sp, #16]
 80093fe:	4633      	mov	r3, r6
 8009400:	461e      	mov	r6, r3
 8009402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009406:	2a39      	cmp	r2, #57	@ 0x39
 8009408:	d107      	bne.n	800941a <_dtoa_r+0x6da>
 800940a:	459a      	cmp	sl, r3
 800940c:	d1f8      	bne.n	8009400 <_dtoa_r+0x6c0>
 800940e:	9a04      	ldr	r2, [sp, #16]
 8009410:	3201      	adds	r2, #1
 8009412:	9204      	str	r2, [sp, #16]
 8009414:	2230      	movs	r2, #48	@ 0x30
 8009416:	f88a 2000 	strb.w	r2, [sl]
 800941a:	781a      	ldrb	r2, [r3, #0]
 800941c:	3201      	adds	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
 8009420:	e7bd      	b.n	800939e <_dtoa_r+0x65e>
 8009422:	4b7b      	ldr	r3, [pc, #492]	@ (8009610 <_dtoa_r+0x8d0>)
 8009424:	2200      	movs	r2, #0
 8009426:	f7f7 f907 	bl	8000638 <__aeabi_dmul>
 800942a:	2200      	movs	r2, #0
 800942c:	2300      	movs	r3, #0
 800942e:	4604      	mov	r4, r0
 8009430:	460d      	mov	r5, r1
 8009432:	f7f7 fb69 	bl	8000b08 <__aeabi_dcmpeq>
 8009436:	2800      	cmp	r0, #0
 8009438:	f43f aebb 	beq.w	80091b2 <_dtoa_r+0x472>
 800943c:	e6f0      	b.n	8009220 <_dtoa_r+0x4e0>
 800943e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009440:	2a00      	cmp	r2, #0
 8009442:	f000 80db 	beq.w	80095fc <_dtoa_r+0x8bc>
 8009446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009448:	2a01      	cmp	r2, #1
 800944a:	f300 80bf 	bgt.w	80095cc <_dtoa_r+0x88c>
 800944e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009450:	2a00      	cmp	r2, #0
 8009452:	f000 80b7 	beq.w	80095c4 <_dtoa_r+0x884>
 8009456:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800945a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800945c:	4646      	mov	r6, r8
 800945e:	9a08      	ldr	r2, [sp, #32]
 8009460:	2101      	movs	r1, #1
 8009462:	441a      	add	r2, r3
 8009464:	4658      	mov	r0, fp
 8009466:	4498      	add	r8, r3
 8009468:	9208      	str	r2, [sp, #32]
 800946a:	f000 fc6b 	bl	8009d44 <__i2b>
 800946e:	4605      	mov	r5, r0
 8009470:	b15e      	cbz	r6, 800948a <_dtoa_r+0x74a>
 8009472:	9b08      	ldr	r3, [sp, #32]
 8009474:	2b00      	cmp	r3, #0
 8009476:	dd08      	ble.n	800948a <_dtoa_r+0x74a>
 8009478:	42b3      	cmp	r3, r6
 800947a:	9a08      	ldr	r2, [sp, #32]
 800947c:	bfa8      	it	ge
 800947e:	4633      	movge	r3, r6
 8009480:	eba8 0803 	sub.w	r8, r8, r3
 8009484:	1af6      	subs	r6, r6, r3
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	9308      	str	r3, [sp, #32]
 800948a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800948c:	b1f3      	cbz	r3, 80094cc <_dtoa_r+0x78c>
 800948e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009490:	2b00      	cmp	r3, #0
 8009492:	f000 80b7 	beq.w	8009604 <_dtoa_r+0x8c4>
 8009496:	b18c      	cbz	r4, 80094bc <_dtoa_r+0x77c>
 8009498:	4629      	mov	r1, r5
 800949a:	4622      	mov	r2, r4
 800949c:	4658      	mov	r0, fp
 800949e:	f000 fd11 	bl	8009ec4 <__pow5mult>
 80094a2:	464a      	mov	r2, r9
 80094a4:	4601      	mov	r1, r0
 80094a6:	4605      	mov	r5, r0
 80094a8:	4658      	mov	r0, fp
 80094aa:	f000 fc61 	bl	8009d70 <__multiply>
 80094ae:	4649      	mov	r1, r9
 80094b0:	9004      	str	r0, [sp, #16]
 80094b2:	4658      	mov	r0, fp
 80094b4:	f000 fb48 	bl	8009b48 <_Bfree>
 80094b8:	9b04      	ldr	r3, [sp, #16]
 80094ba:	4699      	mov	r9, r3
 80094bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094be:	1b1a      	subs	r2, r3, r4
 80094c0:	d004      	beq.n	80094cc <_dtoa_r+0x78c>
 80094c2:	4649      	mov	r1, r9
 80094c4:	4658      	mov	r0, fp
 80094c6:	f000 fcfd 	bl	8009ec4 <__pow5mult>
 80094ca:	4681      	mov	r9, r0
 80094cc:	2101      	movs	r1, #1
 80094ce:	4658      	mov	r0, fp
 80094d0:	f000 fc38 	bl	8009d44 <__i2b>
 80094d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094d6:	4604      	mov	r4, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 81cf 	beq.w	800987c <_dtoa_r+0xb3c>
 80094de:	461a      	mov	r2, r3
 80094e0:	4601      	mov	r1, r0
 80094e2:	4658      	mov	r0, fp
 80094e4:	f000 fcee 	bl	8009ec4 <__pow5mult>
 80094e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	4604      	mov	r4, r0
 80094ee:	f300 8095 	bgt.w	800961c <_dtoa_r+0x8dc>
 80094f2:	9b02      	ldr	r3, [sp, #8]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f040 8087 	bne.w	8009608 <_dtoa_r+0x8c8>
 80094fa:	9b03      	ldr	r3, [sp, #12]
 80094fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009500:	2b00      	cmp	r3, #0
 8009502:	f040 8089 	bne.w	8009618 <_dtoa_r+0x8d8>
 8009506:	9b03      	ldr	r3, [sp, #12]
 8009508:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800950c:	0d1b      	lsrs	r3, r3, #20
 800950e:	051b      	lsls	r3, r3, #20
 8009510:	b12b      	cbz	r3, 800951e <_dtoa_r+0x7de>
 8009512:	9b08      	ldr	r3, [sp, #32]
 8009514:	3301      	adds	r3, #1
 8009516:	9308      	str	r3, [sp, #32]
 8009518:	f108 0801 	add.w	r8, r8, #1
 800951c:	2301      	movs	r3, #1
 800951e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 81b0 	beq.w	8009888 <_dtoa_r+0xb48>
 8009528:	6923      	ldr	r3, [r4, #16]
 800952a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800952e:	6918      	ldr	r0, [r3, #16]
 8009530:	f000 fbbc 	bl	8009cac <__hi0bits>
 8009534:	f1c0 0020 	rsb	r0, r0, #32
 8009538:	9b08      	ldr	r3, [sp, #32]
 800953a:	4418      	add	r0, r3
 800953c:	f010 001f 	ands.w	r0, r0, #31
 8009540:	d077      	beq.n	8009632 <_dtoa_r+0x8f2>
 8009542:	f1c0 0320 	rsb	r3, r0, #32
 8009546:	2b04      	cmp	r3, #4
 8009548:	dd6b      	ble.n	8009622 <_dtoa_r+0x8e2>
 800954a:	9b08      	ldr	r3, [sp, #32]
 800954c:	f1c0 001c 	rsb	r0, r0, #28
 8009550:	4403      	add	r3, r0
 8009552:	4480      	add	r8, r0
 8009554:	4406      	add	r6, r0
 8009556:	9308      	str	r3, [sp, #32]
 8009558:	f1b8 0f00 	cmp.w	r8, #0
 800955c:	dd05      	ble.n	800956a <_dtoa_r+0x82a>
 800955e:	4649      	mov	r1, r9
 8009560:	4642      	mov	r2, r8
 8009562:	4658      	mov	r0, fp
 8009564:	f000 fd08 	bl	8009f78 <__lshift>
 8009568:	4681      	mov	r9, r0
 800956a:	9b08      	ldr	r3, [sp, #32]
 800956c:	2b00      	cmp	r3, #0
 800956e:	dd05      	ble.n	800957c <_dtoa_r+0x83c>
 8009570:	4621      	mov	r1, r4
 8009572:	461a      	mov	r2, r3
 8009574:	4658      	mov	r0, fp
 8009576:	f000 fcff 	bl	8009f78 <__lshift>
 800957a:	4604      	mov	r4, r0
 800957c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800957e:	2b00      	cmp	r3, #0
 8009580:	d059      	beq.n	8009636 <_dtoa_r+0x8f6>
 8009582:	4621      	mov	r1, r4
 8009584:	4648      	mov	r0, r9
 8009586:	f000 fd63 	bl	800a050 <__mcmp>
 800958a:	2800      	cmp	r0, #0
 800958c:	da53      	bge.n	8009636 <_dtoa_r+0x8f6>
 800958e:	1e7b      	subs	r3, r7, #1
 8009590:	9304      	str	r3, [sp, #16]
 8009592:	4649      	mov	r1, r9
 8009594:	2300      	movs	r3, #0
 8009596:	220a      	movs	r2, #10
 8009598:	4658      	mov	r0, fp
 800959a:	f000 faf7 	bl	8009b8c <__multadd>
 800959e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095a0:	4681      	mov	r9, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8172 	beq.w	800988c <_dtoa_r+0xb4c>
 80095a8:	2300      	movs	r3, #0
 80095aa:	4629      	mov	r1, r5
 80095ac:	220a      	movs	r2, #10
 80095ae:	4658      	mov	r0, fp
 80095b0:	f000 faec 	bl	8009b8c <__multadd>
 80095b4:	9b00      	ldr	r3, [sp, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	4605      	mov	r5, r0
 80095ba:	dc67      	bgt.n	800968c <_dtoa_r+0x94c>
 80095bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095be:	2b02      	cmp	r3, #2
 80095c0:	dc41      	bgt.n	8009646 <_dtoa_r+0x906>
 80095c2:	e063      	b.n	800968c <_dtoa_r+0x94c>
 80095c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80095c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80095ca:	e746      	b.n	800945a <_dtoa_r+0x71a>
 80095cc:	9b07      	ldr	r3, [sp, #28]
 80095ce:	1e5c      	subs	r4, r3, #1
 80095d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095d2:	42a3      	cmp	r3, r4
 80095d4:	bfbf      	itttt	lt
 80095d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80095d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80095da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80095dc:	1ae3      	sublt	r3, r4, r3
 80095de:	bfb4      	ite	lt
 80095e0:	18d2      	addlt	r2, r2, r3
 80095e2:	1b1c      	subge	r4, r3, r4
 80095e4:	9b07      	ldr	r3, [sp, #28]
 80095e6:	bfbc      	itt	lt
 80095e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80095ea:	2400      	movlt	r4, #0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	bfb5      	itete	lt
 80095f0:	eba8 0603 	sublt.w	r6, r8, r3
 80095f4:	9b07      	ldrge	r3, [sp, #28]
 80095f6:	2300      	movlt	r3, #0
 80095f8:	4646      	movge	r6, r8
 80095fa:	e730      	b.n	800945e <_dtoa_r+0x71e>
 80095fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80095fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009600:	4646      	mov	r6, r8
 8009602:	e735      	b.n	8009470 <_dtoa_r+0x730>
 8009604:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009606:	e75c      	b.n	80094c2 <_dtoa_r+0x782>
 8009608:	2300      	movs	r3, #0
 800960a:	e788      	b.n	800951e <_dtoa_r+0x7de>
 800960c:	3fe00000 	.word	0x3fe00000
 8009610:	40240000 	.word	0x40240000
 8009614:	40140000 	.word	0x40140000
 8009618:	9b02      	ldr	r3, [sp, #8]
 800961a:	e780      	b.n	800951e <_dtoa_r+0x7de>
 800961c:	2300      	movs	r3, #0
 800961e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009620:	e782      	b.n	8009528 <_dtoa_r+0x7e8>
 8009622:	d099      	beq.n	8009558 <_dtoa_r+0x818>
 8009624:	9a08      	ldr	r2, [sp, #32]
 8009626:	331c      	adds	r3, #28
 8009628:	441a      	add	r2, r3
 800962a:	4498      	add	r8, r3
 800962c:	441e      	add	r6, r3
 800962e:	9208      	str	r2, [sp, #32]
 8009630:	e792      	b.n	8009558 <_dtoa_r+0x818>
 8009632:	4603      	mov	r3, r0
 8009634:	e7f6      	b.n	8009624 <_dtoa_r+0x8e4>
 8009636:	9b07      	ldr	r3, [sp, #28]
 8009638:	9704      	str	r7, [sp, #16]
 800963a:	2b00      	cmp	r3, #0
 800963c:	dc20      	bgt.n	8009680 <_dtoa_r+0x940>
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009642:	2b02      	cmp	r3, #2
 8009644:	dd1e      	ble.n	8009684 <_dtoa_r+0x944>
 8009646:	9b00      	ldr	r3, [sp, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	f47f aec0 	bne.w	80093ce <_dtoa_r+0x68e>
 800964e:	4621      	mov	r1, r4
 8009650:	2205      	movs	r2, #5
 8009652:	4658      	mov	r0, fp
 8009654:	f000 fa9a 	bl	8009b8c <__multadd>
 8009658:	4601      	mov	r1, r0
 800965a:	4604      	mov	r4, r0
 800965c:	4648      	mov	r0, r9
 800965e:	f000 fcf7 	bl	800a050 <__mcmp>
 8009662:	2800      	cmp	r0, #0
 8009664:	f77f aeb3 	ble.w	80093ce <_dtoa_r+0x68e>
 8009668:	4656      	mov	r6, sl
 800966a:	2331      	movs	r3, #49	@ 0x31
 800966c:	f806 3b01 	strb.w	r3, [r6], #1
 8009670:	9b04      	ldr	r3, [sp, #16]
 8009672:	3301      	adds	r3, #1
 8009674:	9304      	str	r3, [sp, #16]
 8009676:	e6ae      	b.n	80093d6 <_dtoa_r+0x696>
 8009678:	9c07      	ldr	r4, [sp, #28]
 800967a:	9704      	str	r7, [sp, #16]
 800967c:	4625      	mov	r5, r4
 800967e:	e7f3      	b.n	8009668 <_dtoa_r+0x928>
 8009680:	9b07      	ldr	r3, [sp, #28]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009686:	2b00      	cmp	r3, #0
 8009688:	f000 8104 	beq.w	8009894 <_dtoa_r+0xb54>
 800968c:	2e00      	cmp	r6, #0
 800968e:	dd05      	ble.n	800969c <_dtoa_r+0x95c>
 8009690:	4629      	mov	r1, r5
 8009692:	4632      	mov	r2, r6
 8009694:	4658      	mov	r0, fp
 8009696:	f000 fc6f 	bl	8009f78 <__lshift>
 800969a:	4605      	mov	r5, r0
 800969c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d05a      	beq.n	8009758 <_dtoa_r+0xa18>
 80096a2:	6869      	ldr	r1, [r5, #4]
 80096a4:	4658      	mov	r0, fp
 80096a6:	f000 fa0f 	bl	8009ac8 <_Balloc>
 80096aa:	4606      	mov	r6, r0
 80096ac:	b928      	cbnz	r0, 80096ba <_dtoa_r+0x97a>
 80096ae:	4b84      	ldr	r3, [pc, #528]	@ (80098c0 <_dtoa_r+0xb80>)
 80096b0:	4602      	mov	r2, r0
 80096b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80096b6:	f7ff bb5a 	b.w	8008d6e <_dtoa_r+0x2e>
 80096ba:	692a      	ldr	r2, [r5, #16]
 80096bc:	3202      	adds	r2, #2
 80096be:	0092      	lsls	r2, r2, #2
 80096c0:	f105 010c 	add.w	r1, r5, #12
 80096c4:	300c      	adds	r0, #12
 80096c6:	f001 ff75 	bl	800b5b4 <memcpy>
 80096ca:	2201      	movs	r2, #1
 80096cc:	4631      	mov	r1, r6
 80096ce:	4658      	mov	r0, fp
 80096d0:	f000 fc52 	bl	8009f78 <__lshift>
 80096d4:	f10a 0301 	add.w	r3, sl, #1
 80096d8:	9307      	str	r3, [sp, #28]
 80096da:	9b00      	ldr	r3, [sp, #0]
 80096dc:	4453      	add	r3, sl
 80096de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096e0:	9b02      	ldr	r3, [sp, #8]
 80096e2:	f003 0301 	and.w	r3, r3, #1
 80096e6:	462f      	mov	r7, r5
 80096e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80096ea:	4605      	mov	r5, r0
 80096ec:	9b07      	ldr	r3, [sp, #28]
 80096ee:	4621      	mov	r1, r4
 80096f0:	3b01      	subs	r3, #1
 80096f2:	4648      	mov	r0, r9
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	f7ff fa9b 	bl	8008c30 <quorem>
 80096fa:	4639      	mov	r1, r7
 80096fc:	9002      	str	r0, [sp, #8]
 80096fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009702:	4648      	mov	r0, r9
 8009704:	f000 fca4 	bl	800a050 <__mcmp>
 8009708:	462a      	mov	r2, r5
 800970a:	9008      	str	r0, [sp, #32]
 800970c:	4621      	mov	r1, r4
 800970e:	4658      	mov	r0, fp
 8009710:	f000 fcba 	bl	800a088 <__mdiff>
 8009714:	68c2      	ldr	r2, [r0, #12]
 8009716:	4606      	mov	r6, r0
 8009718:	bb02      	cbnz	r2, 800975c <_dtoa_r+0xa1c>
 800971a:	4601      	mov	r1, r0
 800971c:	4648      	mov	r0, r9
 800971e:	f000 fc97 	bl	800a050 <__mcmp>
 8009722:	4602      	mov	r2, r0
 8009724:	4631      	mov	r1, r6
 8009726:	4658      	mov	r0, fp
 8009728:	920e      	str	r2, [sp, #56]	@ 0x38
 800972a:	f000 fa0d 	bl	8009b48 <_Bfree>
 800972e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009730:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009732:	9e07      	ldr	r6, [sp, #28]
 8009734:	ea43 0102 	orr.w	r1, r3, r2
 8009738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800973a:	4319      	orrs	r1, r3
 800973c:	d110      	bne.n	8009760 <_dtoa_r+0xa20>
 800973e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009742:	d029      	beq.n	8009798 <_dtoa_r+0xa58>
 8009744:	9b08      	ldr	r3, [sp, #32]
 8009746:	2b00      	cmp	r3, #0
 8009748:	dd02      	ble.n	8009750 <_dtoa_r+0xa10>
 800974a:	9b02      	ldr	r3, [sp, #8]
 800974c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009750:	9b00      	ldr	r3, [sp, #0]
 8009752:	f883 8000 	strb.w	r8, [r3]
 8009756:	e63f      	b.n	80093d8 <_dtoa_r+0x698>
 8009758:	4628      	mov	r0, r5
 800975a:	e7bb      	b.n	80096d4 <_dtoa_r+0x994>
 800975c:	2201      	movs	r2, #1
 800975e:	e7e1      	b.n	8009724 <_dtoa_r+0x9e4>
 8009760:	9b08      	ldr	r3, [sp, #32]
 8009762:	2b00      	cmp	r3, #0
 8009764:	db04      	blt.n	8009770 <_dtoa_r+0xa30>
 8009766:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009768:	430b      	orrs	r3, r1
 800976a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800976c:	430b      	orrs	r3, r1
 800976e:	d120      	bne.n	80097b2 <_dtoa_r+0xa72>
 8009770:	2a00      	cmp	r2, #0
 8009772:	dded      	ble.n	8009750 <_dtoa_r+0xa10>
 8009774:	4649      	mov	r1, r9
 8009776:	2201      	movs	r2, #1
 8009778:	4658      	mov	r0, fp
 800977a:	f000 fbfd 	bl	8009f78 <__lshift>
 800977e:	4621      	mov	r1, r4
 8009780:	4681      	mov	r9, r0
 8009782:	f000 fc65 	bl	800a050 <__mcmp>
 8009786:	2800      	cmp	r0, #0
 8009788:	dc03      	bgt.n	8009792 <_dtoa_r+0xa52>
 800978a:	d1e1      	bne.n	8009750 <_dtoa_r+0xa10>
 800978c:	f018 0f01 	tst.w	r8, #1
 8009790:	d0de      	beq.n	8009750 <_dtoa_r+0xa10>
 8009792:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009796:	d1d8      	bne.n	800974a <_dtoa_r+0xa0a>
 8009798:	9a00      	ldr	r2, [sp, #0]
 800979a:	2339      	movs	r3, #57	@ 0x39
 800979c:	7013      	strb	r3, [r2, #0]
 800979e:	4633      	mov	r3, r6
 80097a0:	461e      	mov	r6, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80097a8:	2a39      	cmp	r2, #57	@ 0x39
 80097aa:	d052      	beq.n	8009852 <_dtoa_r+0xb12>
 80097ac:	3201      	adds	r2, #1
 80097ae:	701a      	strb	r2, [r3, #0]
 80097b0:	e612      	b.n	80093d8 <_dtoa_r+0x698>
 80097b2:	2a00      	cmp	r2, #0
 80097b4:	dd07      	ble.n	80097c6 <_dtoa_r+0xa86>
 80097b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097ba:	d0ed      	beq.n	8009798 <_dtoa_r+0xa58>
 80097bc:	9a00      	ldr	r2, [sp, #0]
 80097be:	f108 0301 	add.w	r3, r8, #1
 80097c2:	7013      	strb	r3, [r2, #0]
 80097c4:	e608      	b.n	80093d8 <_dtoa_r+0x698>
 80097c6:	9b07      	ldr	r3, [sp, #28]
 80097c8:	9a07      	ldr	r2, [sp, #28]
 80097ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80097ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d028      	beq.n	8009826 <_dtoa_r+0xae6>
 80097d4:	4649      	mov	r1, r9
 80097d6:	2300      	movs	r3, #0
 80097d8:	220a      	movs	r2, #10
 80097da:	4658      	mov	r0, fp
 80097dc:	f000 f9d6 	bl	8009b8c <__multadd>
 80097e0:	42af      	cmp	r7, r5
 80097e2:	4681      	mov	r9, r0
 80097e4:	f04f 0300 	mov.w	r3, #0
 80097e8:	f04f 020a 	mov.w	r2, #10
 80097ec:	4639      	mov	r1, r7
 80097ee:	4658      	mov	r0, fp
 80097f0:	d107      	bne.n	8009802 <_dtoa_r+0xac2>
 80097f2:	f000 f9cb 	bl	8009b8c <__multadd>
 80097f6:	4607      	mov	r7, r0
 80097f8:	4605      	mov	r5, r0
 80097fa:	9b07      	ldr	r3, [sp, #28]
 80097fc:	3301      	adds	r3, #1
 80097fe:	9307      	str	r3, [sp, #28]
 8009800:	e774      	b.n	80096ec <_dtoa_r+0x9ac>
 8009802:	f000 f9c3 	bl	8009b8c <__multadd>
 8009806:	4629      	mov	r1, r5
 8009808:	4607      	mov	r7, r0
 800980a:	2300      	movs	r3, #0
 800980c:	220a      	movs	r2, #10
 800980e:	4658      	mov	r0, fp
 8009810:	f000 f9bc 	bl	8009b8c <__multadd>
 8009814:	4605      	mov	r5, r0
 8009816:	e7f0      	b.n	80097fa <_dtoa_r+0xaba>
 8009818:	9b00      	ldr	r3, [sp, #0]
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfcc      	ite	gt
 800981e:	461e      	movgt	r6, r3
 8009820:	2601      	movle	r6, #1
 8009822:	4456      	add	r6, sl
 8009824:	2700      	movs	r7, #0
 8009826:	4649      	mov	r1, r9
 8009828:	2201      	movs	r2, #1
 800982a:	4658      	mov	r0, fp
 800982c:	f000 fba4 	bl	8009f78 <__lshift>
 8009830:	4621      	mov	r1, r4
 8009832:	4681      	mov	r9, r0
 8009834:	f000 fc0c 	bl	800a050 <__mcmp>
 8009838:	2800      	cmp	r0, #0
 800983a:	dcb0      	bgt.n	800979e <_dtoa_r+0xa5e>
 800983c:	d102      	bne.n	8009844 <_dtoa_r+0xb04>
 800983e:	f018 0f01 	tst.w	r8, #1
 8009842:	d1ac      	bne.n	800979e <_dtoa_r+0xa5e>
 8009844:	4633      	mov	r3, r6
 8009846:	461e      	mov	r6, r3
 8009848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800984c:	2a30      	cmp	r2, #48	@ 0x30
 800984e:	d0fa      	beq.n	8009846 <_dtoa_r+0xb06>
 8009850:	e5c2      	b.n	80093d8 <_dtoa_r+0x698>
 8009852:	459a      	cmp	sl, r3
 8009854:	d1a4      	bne.n	80097a0 <_dtoa_r+0xa60>
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	3301      	adds	r3, #1
 800985a:	9304      	str	r3, [sp, #16]
 800985c:	2331      	movs	r3, #49	@ 0x31
 800985e:	f88a 3000 	strb.w	r3, [sl]
 8009862:	e5b9      	b.n	80093d8 <_dtoa_r+0x698>
 8009864:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009866:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80098c4 <_dtoa_r+0xb84>
 800986a:	b11b      	cbz	r3, 8009874 <_dtoa_r+0xb34>
 800986c:	f10a 0308 	add.w	r3, sl, #8
 8009870:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009872:	6013      	str	r3, [r2, #0]
 8009874:	4650      	mov	r0, sl
 8009876:	b019      	add	sp, #100	@ 0x64
 8009878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800987e:	2b01      	cmp	r3, #1
 8009880:	f77f ae37 	ble.w	80094f2 <_dtoa_r+0x7b2>
 8009884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009886:	930a      	str	r3, [sp, #40]	@ 0x28
 8009888:	2001      	movs	r0, #1
 800988a:	e655      	b.n	8009538 <_dtoa_r+0x7f8>
 800988c:	9b00      	ldr	r3, [sp, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	f77f aed6 	ble.w	8009640 <_dtoa_r+0x900>
 8009894:	4656      	mov	r6, sl
 8009896:	4621      	mov	r1, r4
 8009898:	4648      	mov	r0, r9
 800989a:	f7ff f9c9 	bl	8008c30 <quorem>
 800989e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80098a2:	f806 8b01 	strb.w	r8, [r6], #1
 80098a6:	9b00      	ldr	r3, [sp, #0]
 80098a8:	eba6 020a 	sub.w	r2, r6, sl
 80098ac:	4293      	cmp	r3, r2
 80098ae:	ddb3      	ble.n	8009818 <_dtoa_r+0xad8>
 80098b0:	4649      	mov	r1, r9
 80098b2:	2300      	movs	r3, #0
 80098b4:	220a      	movs	r2, #10
 80098b6:	4658      	mov	r0, fp
 80098b8:	f000 f968 	bl	8009b8c <__multadd>
 80098bc:	4681      	mov	r9, r0
 80098be:	e7ea      	b.n	8009896 <_dtoa_r+0xb56>
 80098c0:	0800c425 	.word	0x0800c425
 80098c4:	0800c3a9 	.word	0x0800c3a9

080098c8 <_free_r>:
 80098c8:	b538      	push	{r3, r4, r5, lr}
 80098ca:	4605      	mov	r5, r0
 80098cc:	2900      	cmp	r1, #0
 80098ce:	d041      	beq.n	8009954 <_free_r+0x8c>
 80098d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098d4:	1f0c      	subs	r4, r1, #4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	bfb8      	it	lt
 80098da:	18e4      	addlt	r4, r4, r3
 80098dc:	f000 f8e8 	bl	8009ab0 <__malloc_lock>
 80098e0:	4a1d      	ldr	r2, [pc, #116]	@ (8009958 <_free_r+0x90>)
 80098e2:	6813      	ldr	r3, [r2, #0]
 80098e4:	b933      	cbnz	r3, 80098f4 <_free_r+0x2c>
 80098e6:	6063      	str	r3, [r4, #4]
 80098e8:	6014      	str	r4, [r2, #0]
 80098ea:	4628      	mov	r0, r5
 80098ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f0:	f000 b8e4 	b.w	8009abc <__malloc_unlock>
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d908      	bls.n	800990a <_free_r+0x42>
 80098f8:	6820      	ldr	r0, [r4, #0]
 80098fa:	1821      	adds	r1, r4, r0
 80098fc:	428b      	cmp	r3, r1
 80098fe:	bf01      	itttt	eq
 8009900:	6819      	ldreq	r1, [r3, #0]
 8009902:	685b      	ldreq	r3, [r3, #4]
 8009904:	1809      	addeq	r1, r1, r0
 8009906:	6021      	streq	r1, [r4, #0]
 8009908:	e7ed      	b.n	80098e6 <_free_r+0x1e>
 800990a:	461a      	mov	r2, r3
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	b10b      	cbz	r3, 8009914 <_free_r+0x4c>
 8009910:	42a3      	cmp	r3, r4
 8009912:	d9fa      	bls.n	800990a <_free_r+0x42>
 8009914:	6811      	ldr	r1, [r2, #0]
 8009916:	1850      	adds	r0, r2, r1
 8009918:	42a0      	cmp	r0, r4
 800991a:	d10b      	bne.n	8009934 <_free_r+0x6c>
 800991c:	6820      	ldr	r0, [r4, #0]
 800991e:	4401      	add	r1, r0
 8009920:	1850      	adds	r0, r2, r1
 8009922:	4283      	cmp	r3, r0
 8009924:	6011      	str	r1, [r2, #0]
 8009926:	d1e0      	bne.n	80098ea <_free_r+0x22>
 8009928:	6818      	ldr	r0, [r3, #0]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	6053      	str	r3, [r2, #4]
 800992e:	4408      	add	r0, r1
 8009930:	6010      	str	r0, [r2, #0]
 8009932:	e7da      	b.n	80098ea <_free_r+0x22>
 8009934:	d902      	bls.n	800993c <_free_r+0x74>
 8009936:	230c      	movs	r3, #12
 8009938:	602b      	str	r3, [r5, #0]
 800993a:	e7d6      	b.n	80098ea <_free_r+0x22>
 800993c:	6820      	ldr	r0, [r4, #0]
 800993e:	1821      	adds	r1, r4, r0
 8009940:	428b      	cmp	r3, r1
 8009942:	bf04      	itt	eq
 8009944:	6819      	ldreq	r1, [r3, #0]
 8009946:	685b      	ldreq	r3, [r3, #4]
 8009948:	6063      	str	r3, [r4, #4]
 800994a:	bf04      	itt	eq
 800994c:	1809      	addeq	r1, r1, r0
 800994e:	6021      	streq	r1, [r4, #0]
 8009950:	6054      	str	r4, [r2, #4]
 8009952:	e7ca      	b.n	80098ea <_free_r+0x22>
 8009954:	bd38      	pop	{r3, r4, r5, pc}
 8009956:	bf00      	nop
 8009958:	200007e0 	.word	0x200007e0

0800995c <malloc>:
 800995c:	4b02      	ldr	r3, [pc, #8]	@ (8009968 <malloc+0xc>)
 800995e:	4601      	mov	r1, r0
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	f000 b825 	b.w	80099b0 <_malloc_r>
 8009966:	bf00      	nop
 8009968:	2000002c 	.word	0x2000002c

0800996c <sbrk_aligned>:
 800996c:	b570      	push	{r4, r5, r6, lr}
 800996e:	4e0f      	ldr	r6, [pc, #60]	@ (80099ac <sbrk_aligned+0x40>)
 8009970:	460c      	mov	r4, r1
 8009972:	6831      	ldr	r1, [r6, #0]
 8009974:	4605      	mov	r5, r0
 8009976:	b911      	cbnz	r1, 800997e <sbrk_aligned+0x12>
 8009978:	f001 fe0c 	bl	800b594 <_sbrk_r>
 800997c:	6030      	str	r0, [r6, #0]
 800997e:	4621      	mov	r1, r4
 8009980:	4628      	mov	r0, r5
 8009982:	f001 fe07 	bl	800b594 <_sbrk_r>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d103      	bne.n	8009992 <sbrk_aligned+0x26>
 800998a:	f04f 34ff 	mov.w	r4, #4294967295
 800998e:	4620      	mov	r0, r4
 8009990:	bd70      	pop	{r4, r5, r6, pc}
 8009992:	1cc4      	adds	r4, r0, #3
 8009994:	f024 0403 	bic.w	r4, r4, #3
 8009998:	42a0      	cmp	r0, r4
 800999a:	d0f8      	beq.n	800998e <sbrk_aligned+0x22>
 800999c:	1a21      	subs	r1, r4, r0
 800999e:	4628      	mov	r0, r5
 80099a0:	f001 fdf8 	bl	800b594 <_sbrk_r>
 80099a4:	3001      	adds	r0, #1
 80099a6:	d1f2      	bne.n	800998e <sbrk_aligned+0x22>
 80099a8:	e7ef      	b.n	800998a <sbrk_aligned+0x1e>
 80099aa:	bf00      	nop
 80099ac:	200007dc 	.word	0x200007dc

080099b0 <_malloc_r>:
 80099b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b4:	1ccd      	adds	r5, r1, #3
 80099b6:	f025 0503 	bic.w	r5, r5, #3
 80099ba:	3508      	adds	r5, #8
 80099bc:	2d0c      	cmp	r5, #12
 80099be:	bf38      	it	cc
 80099c0:	250c      	movcc	r5, #12
 80099c2:	2d00      	cmp	r5, #0
 80099c4:	4606      	mov	r6, r0
 80099c6:	db01      	blt.n	80099cc <_malloc_r+0x1c>
 80099c8:	42a9      	cmp	r1, r5
 80099ca:	d904      	bls.n	80099d6 <_malloc_r+0x26>
 80099cc:	230c      	movs	r3, #12
 80099ce:	6033      	str	r3, [r6, #0]
 80099d0:	2000      	movs	r0, #0
 80099d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009aac <_malloc_r+0xfc>
 80099da:	f000 f869 	bl	8009ab0 <__malloc_lock>
 80099de:	f8d8 3000 	ldr.w	r3, [r8]
 80099e2:	461c      	mov	r4, r3
 80099e4:	bb44      	cbnz	r4, 8009a38 <_malloc_r+0x88>
 80099e6:	4629      	mov	r1, r5
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7ff ffbf 	bl	800996c <sbrk_aligned>
 80099ee:	1c43      	adds	r3, r0, #1
 80099f0:	4604      	mov	r4, r0
 80099f2:	d158      	bne.n	8009aa6 <_malloc_r+0xf6>
 80099f4:	f8d8 4000 	ldr.w	r4, [r8]
 80099f8:	4627      	mov	r7, r4
 80099fa:	2f00      	cmp	r7, #0
 80099fc:	d143      	bne.n	8009a86 <_malloc_r+0xd6>
 80099fe:	2c00      	cmp	r4, #0
 8009a00:	d04b      	beq.n	8009a9a <_malloc_r+0xea>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	4639      	mov	r1, r7
 8009a06:	4630      	mov	r0, r6
 8009a08:	eb04 0903 	add.w	r9, r4, r3
 8009a0c:	f001 fdc2 	bl	800b594 <_sbrk_r>
 8009a10:	4581      	cmp	r9, r0
 8009a12:	d142      	bne.n	8009a9a <_malloc_r+0xea>
 8009a14:	6821      	ldr	r1, [r4, #0]
 8009a16:	1a6d      	subs	r5, r5, r1
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	f7ff ffa6 	bl	800996c <sbrk_aligned>
 8009a20:	3001      	adds	r0, #1
 8009a22:	d03a      	beq.n	8009a9a <_malloc_r+0xea>
 8009a24:	6823      	ldr	r3, [r4, #0]
 8009a26:	442b      	add	r3, r5
 8009a28:	6023      	str	r3, [r4, #0]
 8009a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	bb62      	cbnz	r2, 8009a8c <_malloc_r+0xdc>
 8009a32:	f8c8 7000 	str.w	r7, [r8]
 8009a36:	e00f      	b.n	8009a58 <_malloc_r+0xa8>
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	1b52      	subs	r2, r2, r5
 8009a3c:	d420      	bmi.n	8009a80 <_malloc_r+0xd0>
 8009a3e:	2a0b      	cmp	r2, #11
 8009a40:	d917      	bls.n	8009a72 <_malloc_r+0xc2>
 8009a42:	1961      	adds	r1, r4, r5
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	6025      	str	r5, [r4, #0]
 8009a48:	bf18      	it	ne
 8009a4a:	6059      	strne	r1, [r3, #4]
 8009a4c:	6863      	ldr	r3, [r4, #4]
 8009a4e:	bf08      	it	eq
 8009a50:	f8c8 1000 	streq.w	r1, [r8]
 8009a54:	5162      	str	r2, [r4, r5]
 8009a56:	604b      	str	r3, [r1, #4]
 8009a58:	4630      	mov	r0, r6
 8009a5a:	f000 f82f 	bl	8009abc <__malloc_unlock>
 8009a5e:	f104 000b 	add.w	r0, r4, #11
 8009a62:	1d23      	adds	r3, r4, #4
 8009a64:	f020 0007 	bic.w	r0, r0, #7
 8009a68:	1ac2      	subs	r2, r0, r3
 8009a6a:	bf1c      	itt	ne
 8009a6c:	1a1b      	subne	r3, r3, r0
 8009a6e:	50a3      	strne	r3, [r4, r2]
 8009a70:	e7af      	b.n	80099d2 <_malloc_r+0x22>
 8009a72:	6862      	ldr	r2, [r4, #4]
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	bf0c      	ite	eq
 8009a78:	f8c8 2000 	streq.w	r2, [r8]
 8009a7c:	605a      	strne	r2, [r3, #4]
 8009a7e:	e7eb      	b.n	8009a58 <_malloc_r+0xa8>
 8009a80:	4623      	mov	r3, r4
 8009a82:	6864      	ldr	r4, [r4, #4]
 8009a84:	e7ae      	b.n	80099e4 <_malloc_r+0x34>
 8009a86:	463c      	mov	r4, r7
 8009a88:	687f      	ldr	r7, [r7, #4]
 8009a8a:	e7b6      	b.n	80099fa <_malloc_r+0x4a>
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	d1fb      	bne.n	8009a8c <_malloc_r+0xdc>
 8009a94:	2300      	movs	r3, #0
 8009a96:	6053      	str	r3, [r2, #4]
 8009a98:	e7de      	b.n	8009a58 <_malloc_r+0xa8>
 8009a9a:	230c      	movs	r3, #12
 8009a9c:	6033      	str	r3, [r6, #0]
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f000 f80c 	bl	8009abc <__malloc_unlock>
 8009aa4:	e794      	b.n	80099d0 <_malloc_r+0x20>
 8009aa6:	6005      	str	r5, [r0, #0]
 8009aa8:	e7d6      	b.n	8009a58 <_malloc_r+0xa8>
 8009aaa:	bf00      	nop
 8009aac:	200007e0 	.word	0x200007e0

08009ab0 <__malloc_lock>:
 8009ab0:	4801      	ldr	r0, [pc, #4]	@ (8009ab8 <__malloc_lock+0x8>)
 8009ab2:	f7ff b8b4 	b.w	8008c1e <__retarget_lock_acquire_recursive>
 8009ab6:	bf00      	nop
 8009ab8:	200007d8 	.word	0x200007d8

08009abc <__malloc_unlock>:
 8009abc:	4801      	ldr	r0, [pc, #4]	@ (8009ac4 <__malloc_unlock+0x8>)
 8009abe:	f7ff b8af 	b.w	8008c20 <__retarget_lock_release_recursive>
 8009ac2:	bf00      	nop
 8009ac4:	200007d8 	.word	0x200007d8

08009ac8 <_Balloc>:
 8009ac8:	b570      	push	{r4, r5, r6, lr}
 8009aca:	69c6      	ldr	r6, [r0, #28]
 8009acc:	4604      	mov	r4, r0
 8009ace:	460d      	mov	r5, r1
 8009ad0:	b976      	cbnz	r6, 8009af0 <_Balloc+0x28>
 8009ad2:	2010      	movs	r0, #16
 8009ad4:	f7ff ff42 	bl	800995c <malloc>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	61e0      	str	r0, [r4, #28]
 8009adc:	b920      	cbnz	r0, 8009ae8 <_Balloc+0x20>
 8009ade:	4b18      	ldr	r3, [pc, #96]	@ (8009b40 <_Balloc+0x78>)
 8009ae0:	4818      	ldr	r0, [pc, #96]	@ (8009b44 <_Balloc+0x7c>)
 8009ae2:	216b      	movs	r1, #107	@ 0x6b
 8009ae4:	f001 fd7c 	bl	800b5e0 <__assert_func>
 8009ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009aec:	6006      	str	r6, [r0, #0]
 8009aee:	60c6      	str	r6, [r0, #12]
 8009af0:	69e6      	ldr	r6, [r4, #28]
 8009af2:	68f3      	ldr	r3, [r6, #12]
 8009af4:	b183      	cbz	r3, 8009b18 <_Balloc+0x50>
 8009af6:	69e3      	ldr	r3, [r4, #28]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009afe:	b9b8      	cbnz	r0, 8009b30 <_Balloc+0x68>
 8009b00:	2101      	movs	r1, #1
 8009b02:	fa01 f605 	lsl.w	r6, r1, r5
 8009b06:	1d72      	adds	r2, r6, #5
 8009b08:	0092      	lsls	r2, r2, #2
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f001 fd86 	bl	800b61c <_calloc_r>
 8009b10:	b160      	cbz	r0, 8009b2c <_Balloc+0x64>
 8009b12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b16:	e00e      	b.n	8009b36 <_Balloc+0x6e>
 8009b18:	2221      	movs	r2, #33	@ 0x21
 8009b1a:	2104      	movs	r1, #4
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	f001 fd7d 	bl	800b61c <_calloc_r>
 8009b22:	69e3      	ldr	r3, [r4, #28]
 8009b24:	60f0      	str	r0, [r6, #12]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1e4      	bne.n	8009af6 <_Balloc+0x2e>
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	bd70      	pop	{r4, r5, r6, pc}
 8009b30:	6802      	ldr	r2, [r0, #0]
 8009b32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b36:	2300      	movs	r3, #0
 8009b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b3c:	e7f7      	b.n	8009b2e <_Balloc+0x66>
 8009b3e:	bf00      	nop
 8009b40:	0800c3b6 	.word	0x0800c3b6
 8009b44:	0800c436 	.word	0x0800c436

08009b48 <_Bfree>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	69c6      	ldr	r6, [r0, #28]
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	460c      	mov	r4, r1
 8009b50:	b976      	cbnz	r6, 8009b70 <_Bfree+0x28>
 8009b52:	2010      	movs	r0, #16
 8009b54:	f7ff ff02 	bl	800995c <malloc>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	61e8      	str	r0, [r5, #28]
 8009b5c:	b920      	cbnz	r0, 8009b68 <_Bfree+0x20>
 8009b5e:	4b09      	ldr	r3, [pc, #36]	@ (8009b84 <_Bfree+0x3c>)
 8009b60:	4809      	ldr	r0, [pc, #36]	@ (8009b88 <_Bfree+0x40>)
 8009b62:	218f      	movs	r1, #143	@ 0x8f
 8009b64:	f001 fd3c 	bl	800b5e0 <__assert_func>
 8009b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b6c:	6006      	str	r6, [r0, #0]
 8009b6e:	60c6      	str	r6, [r0, #12]
 8009b70:	b13c      	cbz	r4, 8009b82 <_Bfree+0x3a>
 8009b72:	69eb      	ldr	r3, [r5, #28]
 8009b74:	6862      	ldr	r2, [r4, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b7c:	6021      	str	r1, [r4, #0]
 8009b7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b82:	bd70      	pop	{r4, r5, r6, pc}
 8009b84:	0800c3b6 	.word	0x0800c3b6
 8009b88:	0800c436 	.word	0x0800c436

08009b8c <__multadd>:
 8009b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b90:	690d      	ldr	r5, [r1, #16]
 8009b92:	4607      	mov	r7, r0
 8009b94:	460c      	mov	r4, r1
 8009b96:	461e      	mov	r6, r3
 8009b98:	f101 0c14 	add.w	ip, r1, #20
 8009b9c:	2000      	movs	r0, #0
 8009b9e:	f8dc 3000 	ldr.w	r3, [ip]
 8009ba2:	b299      	uxth	r1, r3
 8009ba4:	fb02 6101 	mla	r1, r2, r1, r6
 8009ba8:	0c1e      	lsrs	r6, r3, #16
 8009baa:	0c0b      	lsrs	r3, r1, #16
 8009bac:	fb02 3306 	mla	r3, r2, r6, r3
 8009bb0:	b289      	uxth	r1, r1
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009bb8:	4285      	cmp	r5, r0
 8009bba:	f84c 1b04 	str.w	r1, [ip], #4
 8009bbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009bc2:	dcec      	bgt.n	8009b9e <__multadd+0x12>
 8009bc4:	b30e      	cbz	r6, 8009c0a <__multadd+0x7e>
 8009bc6:	68a3      	ldr	r3, [r4, #8]
 8009bc8:	42ab      	cmp	r3, r5
 8009bca:	dc19      	bgt.n	8009c00 <__multadd+0x74>
 8009bcc:	6861      	ldr	r1, [r4, #4]
 8009bce:	4638      	mov	r0, r7
 8009bd0:	3101      	adds	r1, #1
 8009bd2:	f7ff ff79 	bl	8009ac8 <_Balloc>
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	b928      	cbnz	r0, 8009be6 <__multadd+0x5a>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8009c10 <__multadd+0x84>)
 8009bde:	480d      	ldr	r0, [pc, #52]	@ (8009c14 <__multadd+0x88>)
 8009be0:	21ba      	movs	r1, #186	@ 0xba
 8009be2:	f001 fcfd 	bl	800b5e0 <__assert_func>
 8009be6:	6922      	ldr	r2, [r4, #16]
 8009be8:	3202      	adds	r2, #2
 8009bea:	f104 010c 	add.w	r1, r4, #12
 8009bee:	0092      	lsls	r2, r2, #2
 8009bf0:	300c      	adds	r0, #12
 8009bf2:	f001 fcdf 	bl	800b5b4 <memcpy>
 8009bf6:	4621      	mov	r1, r4
 8009bf8:	4638      	mov	r0, r7
 8009bfa:	f7ff ffa5 	bl	8009b48 <_Bfree>
 8009bfe:	4644      	mov	r4, r8
 8009c00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c04:	3501      	adds	r5, #1
 8009c06:	615e      	str	r6, [r3, #20]
 8009c08:	6125      	str	r5, [r4, #16]
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c10:	0800c425 	.word	0x0800c425
 8009c14:	0800c436 	.word	0x0800c436

08009c18 <__s2b>:
 8009c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c1c:	460c      	mov	r4, r1
 8009c1e:	4615      	mov	r5, r2
 8009c20:	461f      	mov	r7, r3
 8009c22:	2209      	movs	r2, #9
 8009c24:	3308      	adds	r3, #8
 8009c26:	4606      	mov	r6, r0
 8009c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8009c2c:	2100      	movs	r1, #0
 8009c2e:	2201      	movs	r2, #1
 8009c30:	429a      	cmp	r2, r3
 8009c32:	db09      	blt.n	8009c48 <__s2b+0x30>
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff ff47 	bl	8009ac8 <_Balloc>
 8009c3a:	b940      	cbnz	r0, 8009c4e <__s2b+0x36>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	4b19      	ldr	r3, [pc, #100]	@ (8009ca4 <__s2b+0x8c>)
 8009c40:	4819      	ldr	r0, [pc, #100]	@ (8009ca8 <__s2b+0x90>)
 8009c42:	21d3      	movs	r1, #211	@ 0xd3
 8009c44:	f001 fccc 	bl	800b5e0 <__assert_func>
 8009c48:	0052      	lsls	r2, r2, #1
 8009c4a:	3101      	adds	r1, #1
 8009c4c:	e7f0      	b.n	8009c30 <__s2b+0x18>
 8009c4e:	9b08      	ldr	r3, [sp, #32]
 8009c50:	6143      	str	r3, [r0, #20]
 8009c52:	2d09      	cmp	r5, #9
 8009c54:	f04f 0301 	mov.w	r3, #1
 8009c58:	6103      	str	r3, [r0, #16]
 8009c5a:	dd16      	ble.n	8009c8a <__s2b+0x72>
 8009c5c:	f104 0909 	add.w	r9, r4, #9
 8009c60:	46c8      	mov	r8, r9
 8009c62:	442c      	add	r4, r5
 8009c64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c68:	4601      	mov	r1, r0
 8009c6a:	3b30      	subs	r3, #48	@ 0x30
 8009c6c:	220a      	movs	r2, #10
 8009c6e:	4630      	mov	r0, r6
 8009c70:	f7ff ff8c 	bl	8009b8c <__multadd>
 8009c74:	45a0      	cmp	r8, r4
 8009c76:	d1f5      	bne.n	8009c64 <__s2b+0x4c>
 8009c78:	f1a5 0408 	sub.w	r4, r5, #8
 8009c7c:	444c      	add	r4, r9
 8009c7e:	1b2d      	subs	r5, r5, r4
 8009c80:	1963      	adds	r3, r4, r5
 8009c82:	42bb      	cmp	r3, r7
 8009c84:	db04      	blt.n	8009c90 <__s2b+0x78>
 8009c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c8a:	340a      	adds	r4, #10
 8009c8c:	2509      	movs	r5, #9
 8009c8e:	e7f6      	b.n	8009c7e <__s2b+0x66>
 8009c90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c94:	4601      	mov	r1, r0
 8009c96:	3b30      	subs	r3, #48	@ 0x30
 8009c98:	220a      	movs	r2, #10
 8009c9a:	4630      	mov	r0, r6
 8009c9c:	f7ff ff76 	bl	8009b8c <__multadd>
 8009ca0:	e7ee      	b.n	8009c80 <__s2b+0x68>
 8009ca2:	bf00      	nop
 8009ca4:	0800c425 	.word	0x0800c425
 8009ca8:	0800c436 	.word	0x0800c436

08009cac <__hi0bits>:
 8009cac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	bf36      	itet	cc
 8009cb4:	0403      	lslcc	r3, r0, #16
 8009cb6:	2000      	movcs	r0, #0
 8009cb8:	2010      	movcc	r0, #16
 8009cba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cbe:	bf3c      	itt	cc
 8009cc0:	021b      	lslcc	r3, r3, #8
 8009cc2:	3008      	addcc	r0, #8
 8009cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cc8:	bf3c      	itt	cc
 8009cca:	011b      	lslcc	r3, r3, #4
 8009ccc:	3004      	addcc	r0, #4
 8009cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cd2:	bf3c      	itt	cc
 8009cd4:	009b      	lslcc	r3, r3, #2
 8009cd6:	3002      	addcc	r0, #2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	db05      	blt.n	8009ce8 <__hi0bits+0x3c>
 8009cdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ce0:	f100 0001 	add.w	r0, r0, #1
 8009ce4:	bf08      	it	eq
 8009ce6:	2020      	moveq	r0, #32
 8009ce8:	4770      	bx	lr

08009cea <__lo0bits>:
 8009cea:	6803      	ldr	r3, [r0, #0]
 8009cec:	4602      	mov	r2, r0
 8009cee:	f013 0007 	ands.w	r0, r3, #7
 8009cf2:	d00b      	beq.n	8009d0c <__lo0bits+0x22>
 8009cf4:	07d9      	lsls	r1, r3, #31
 8009cf6:	d421      	bmi.n	8009d3c <__lo0bits+0x52>
 8009cf8:	0798      	lsls	r0, r3, #30
 8009cfa:	bf49      	itett	mi
 8009cfc:	085b      	lsrmi	r3, r3, #1
 8009cfe:	089b      	lsrpl	r3, r3, #2
 8009d00:	2001      	movmi	r0, #1
 8009d02:	6013      	strmi	r3, [r2, #0]
 8009d04:	bf5c      	itt	pl
 8009d06:	6013      	strpl	r3, [r2, #0]
 8009d08:	2002      	movpl	r0, #2
 8009d0a:	4770      	bx	lr
 8009d0c:	b299      	uxth	r1, r3
 8009d0e:	b909      	cbnz	r1, 8009d14 <__lo0bits+0x2a>
 8009d10:	0c1b      	lsrs	r3, r3, #16
 8009d12:	2010      	movs	r0, #16
 8009d14:	b2d9      	uxtb	r1, r3
 8009d16:	b909      	cbnz	r1, 8009d1c <__lo0bits+0x32>
 8009d18:	3008      	adds	r0, #8
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	0719      	lsls	r1, r3, #28
 8009d1e:	bf04      	itt	eq
 8009d20:	091b      	lsreq	r3, r3, #4
 8009d22:	3004      	addeq	r0, #4
 8009d24:	0799      	lsls	r1, r3, #30
 8009d26:	bf04      	itt	eq
 8009d28:	089b      	lsreq	r3, r3, #2
 8009d2a:	3002      	addeq	r0, #2
 8009d2c:	07d9      	lsls	r1, r3, #31
 8009d2e:	d403      	bmi.n	8009d38 <__lo0bits+0x4e>
 8009d30:	085b      	lsrs	r3, r3, #1
 8009d32:	f100 0001 	add.w	r0, r0, #1
 8009d36:	d003      	beq.n	8009d40 <__lo0bits+0x56>
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	4770      	bx	lr
 8009d3c:	2000      	movs	r0, #0
 8009d3e:	4770      	bx	lr
 8009d40:	2020      	movs	r0, #32
 8009d42:	4770      	bx	lr

08009d44 <__i2b>:
 8009d44:	b510      	push	{r4, lr}
 8009d46:	460c      	mov	r4, r1
 8009d48:	2101      	movs	r1, #1
 8009d4a:	f7ff febd 	bl	8009ac8 <_Balloc>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	b928      	cbnz	r0, 8009d5e <__i2b+0x1a>
 8009d52:	4b05      	ldr	r3, [pc, #20]	@ (8009d68 <__i2b+0x24>)
 8009d54:	4805      	ldr	r0, [pc, #20]	@ (8009d6c <__i2b+0x28>)
 8009d56:	f240 1145 	movw	r1, #325	@ 0x145
 8009d5a:	f001 fc41 	bl	800b5e0 <__assert_func>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	6144      	str	r4, [r0, #20]
 8009d62:	6103      	str	r3, [r0, #16]
 8009d64:	bd10      	pop	{r4, pc}
 8009d66:	bf00      	nop
 8009d68:	0800c425 	.word	0x0800c425
 8009d6c:	0800c436 	.word	0x0800c436

08009d70 <__multiply>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	4614      	mov	r4, r2
 8009d76:	690a      	ldr	r2, [r1, #16]
 8009d78:	6923      	ldr	r3, [r4, #16]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	bfa8      	it	ge
 8009d7e:	4623      	movge	r3, r4
 8009d80:	460f      	mov	r7, r1
 8009d82:	bfa4      	itt	ge
 8009d84:	460c      	movge	r4, r1
 8009d86:	461f      	movge	r7, r3
 8009d88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009d8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009d90:	68a3      	ldr	r3, [r4, #8]
 8009d92:	6861      	ldr	r1, [r4, #4]
 8009d94:	eb0a 0609 	add.w	r6, sl, r9
 8009d98:	42b3      	cmp	r3, r6
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	bfb8      	it	lt
 8009d9e:	3101      	addlt	r1, #1
 8009da0:	f7ff fe92 	bl	8009ac8 <_Balloc>
 8009da4:	b930      	cbnz	r0, 8009db4 <__multiply+0x44>
 8009da6:	4602      	mov	r2, r0
 8009da8:	4b44      	ldr	r3, [pc, #272]	@ (8009ebc <__multiply+0x14c>)
 8009daa:	4845      	ldr	r0, [pc, #276]	@ (8009ec0 <__multiply+0x150>)
 8009dac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009db0:	f001 fc16 	bl	800b5e0 <__assert_func>
 8009db4:	f100 0514 	add.w	r5, r0, #20
 8009db8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	4543      	cmp	r3, r8
 8009dc2:	d321      	bcc.n	8009e08 <__multiply+0x98>
 8009dc4:	f107 0114 	add.w	r1, r7, #20
 8009dc8:	f104 0214 	add.w	r2, r4, #20
 8009dcc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009dd0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	1b13      	subs	r3, r2, r4
 8009dd8:	3b15      	subs	r3, #21
 8009dda:	f023 0303 	bic.w	r3, r3, #3
 8009dde:	3304      	adds	r3, #4
 8009de0:	f104 0715 	add.w	r7, r4, #21
 8009de4:	42ba      	cmp	r2, r7
 8009de6:	bf38      	it	cc
 8009de8:	2304      	movcc	r3, #4
 8009dea:	9301      	str	r3, [sp, #4]
 8009dec:	9b02      	ldr	r3, [sp, #8]
 8009dee:	9103      	str	r1, [sp, #12]
 8009df0:	428b      	cmp	r3, r1
 8009df2:	d80c      	bhi.n	8009e0e <__multiply+0x9e>
 8009df4:	2e00      	cmp	r6, #0
 8009df6:	dd03      	ble.n	8009e00 <__multiply+0x90>
 8009df8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d05b      	beq.n	8009eb8 <__multiply+0x148>
 8009e00:	6106      	str	r6, [r0, #16]
 8009e02:	b005      	add	sp, #20
 8009e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e08:	f843 2b04 	str.w	r2, [r3], #4
 8009e0c:	e7d8      	b.n	8009dc0 <__multiply+0x50>
 8009e0e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e12:	f1ba 0f00 	cmp.w	sl, #0
 8009e16:	d024      	beq.n	8009e62 <__multiply+0xf2>
 8009e18:	f104 0e14 	add.w	lr, r4, #20
 8009e1c:	46a9      	mov	r9, r5
 8009e1e:	f04f 0c00 	mov.w	ip, #0
 8009e22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e26:	f8d9 3000 	ldr.w	r3, [r9]
 8009e2a:	fa1f fb87 	uxth.w	fp, r7
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	fb0a 330b 	mla	r3, sl, fp, r3
 8009e34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009e38:	f8d9 7000 	ldr.w	r7, [r9]
 8009e3c:	4463      	add	r3, ip
 8009e3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e42:	fb0a c70b 	mla	r7, sl, fp, ip
 8009e46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e50:	4572      	cmp	r2, lr
 8009e52:	f849 3b04 	str.w	r3, [r9], #4
 8009e56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009e5a:	d8e2      	bhi.n	8009e22 <__multiply+0xb2>
 8009e5c:	9b01      	ldr	r3, [sp, #4]
 8009e5e:	f845 c003 	str.w	ip, [r5, r3]
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009e68:	3104      	adds	r1, #4
 8009e6a:	f1b9 0f00 	cmp.w	r9, #0
 8009e6e:	d021      	beq.n	8009eb4 <__multiply+0x144>
 8009e70:	682b      	ldr	r3, [r5, #0]
 8009e72:	f104 0c14 	add.w	ip, r4, #20
 8009e76:	46ae      	mov	lr, r5
 8009e78:	f04f 0a00 	mov.w	sl, #0
 8009e7c:	f8bc b000 	ldrh.w	fp, [ip]
 8009e80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009e84:	fb09 770b 	mla	r7, r9, fp, r7
 8009e88:	4457      	add	r7, sl
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009e90:	f84e 3b04 	str.w	r3, [lr], #4
 8009e94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e9c:	f8be 3000 	ldrh.w	r3, [lr]
 8009ea0:	fb09 330a 	mla	r3, r9, sl, r3
 8009ea4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009ea8:	4562      	cmp	r2, ip
 8009eaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009eae:	d8e5      	bhi.n	8009e7c <__multiply+0x10c>
 8009eb0:	9f01      	ldr	r7, [sp, #4]
 8009eb2:	51eb      	str	r3, [r5, r7]
 8009eb4:	3504      	adds	r5, #4
 8009eb6:	e799      	b.n	8009dec <__multiply+0x7c>
 8009eb8:	3e01      	subs	r6, #1
 8009eba:	e79b      	b.n	8009df4 <__multiply+0x84>
 8009ebc:	0800c425 	.word	0x0800c425
 8009ec0:	0800c436 	.word	0x0800c436

08009ec4 <__pow5mult>:
 8009ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec8:	4615      	mov	r5, r2
 8009eca:	f012 0203 	ands.w	r2, r2, #3
 8009ece:	4607      	mov	r7, r0
 8009ed0:	460e      	mov	r6, r1
 8009ed2:	d007      	beq.n	8009ee4 <__pow5mult+0x20>
 8009ed4:	4c25      	ldr	r4, [pc, #148]	@ (8009f6c <__pow5mult+0xa8>)
 8009ed6:	3a01      	subs	r2, #1
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ede:	f7ff fe55 	bl	8009b8c <__multadd>
 8009ee2:	4606      	mov	r6, r0
 8009ee4:	10ad      	asrs	r5, r5, #2
 8009ee6:	d03d      	beq.n	8009f64 <__pow5mult+0xa0>
 8009ee8:	69fc      	ldr	r4, [r7, #28]
 8009eea:	b97c      	cbnz	r4, 8009f0c <__pow5mult+0x48>
 8009eec:	2010      	movs	r0, #16
 8009eee:	f7ff fd35 	bl	800995c <malloc>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	61f8      	str	r0, [r7, #28]
 8009ef6:	b928      	cbnz	r0, 8009f04 <__pow5mult+0x40>
 8009ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8009f70 <__pow5mult+0xac>)
 8009efa:	481e      	ldr	r0, [pc, #120]	@ (8009f74 <__pow5mult+0xb0>)
 8009efc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f00:	f001 fb6e 	bl	800b5e0 <__assert_func>
 8009f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f08:	6004      	str	r4, [r0, #0]
 8009f0a:	60c4      	str	r4, [r0, #12]
 8009f0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f14:	b94c      	cbnz	r4, 8009f2a <__pow5mult+0x66>
 8009f16:	f240 2171 	movw	r1, #625	@ 0x271
 8009f1a:	4638      	mov	r0, r7
 8009f1c:	f7ff ff12 	bl	8009d44 <__i2b>
 8009f20:	2300      	movs	r3, #0
 8009f22:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f26:	4604      	mov	r4, r0
 8009f28:	6003      	str	r3, [r0, #0]
 8009f2a:	f04f 0900 	mov.w	r9, #0
 8009f2e:	07eb      	lsls	r3, r5, #31
 8009f30:	d50a      	bpl.n	8009f48 <__pow5mult+0x84>
 8009f32:	4631      	mov	r1, r6
 8009f34:	4622      	mov	r2, r4
 8009f36:	4638      	mov	r0, r7
 8009f38:	f7ff ff1a 	bl	8009d70 <__multiply>
 8009f3c:	4631      	mov	r1, r6
 8009f3e:	4680      	mov	r8, r0
 8009f40:	4638      	mov	r0, r7
 8009f42:	f7ff fe01 	bl	8009b48 <_Bfree>
 8009f46:	4646      	mov	r6, r8
 8009f48:	106d      	asrs	r5, r5, #1
 8009f4a:	d00b      	beq.n	8009f64 <__pow5mult+0xa0>
 8009f4c:	6820      	ldr	r0, [r4, #0]
 8009f4e:	b938      	cbnz	r0, 8009f60 <__pow5mult+0x9c>
 8009f50:	4622      	mov	r2, r4
 8009f52:	4621      	mov	r1, r4
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff ff0b 	bl	8009d70 <__multiply>
 8009f5a:	6020      	str	r0, [r4, #0]
 8009f5c:	f8c0 9000 	str.w	r9, [r0]
 8009f60:	4604      	mov	r4, r0
 8009f62:	e7e4      	b.n	8009f2e <__pow5mult+0x6a>
 8009f64:	4630      	mov	r0, r6
 8009f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f6a:	bf00      	nop
 8009f6c:	0800c490 	.word	0x0800c490
 8009f70:	0800c3b6 	.word	0x0800c3b6
 8009f74:	0800c436 	.word	0x0800c436

08009f78 <__lshift>:
 8009f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	6849      	ldr	r1, [r1, #4]
 8009f80:	6923      	ldr	r3, [r4, #16]
 8009f82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f86:	68a3      	ldr	r3, [r4, #8]
 8009f88:	4607      	mov	r7, r0
 8009f8a:	4691      	mov	r9, r2
 8009f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f90:	f108 0601 	add.w	r6, r8, #1
 8009f94:	42b3      	cmp	r3, r6
 8009f96:	db0b      	blt.n	8009fb0 <__lshift+0x38>
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f7ff fd95 	bl	8009ac8 <_Balloc>
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	b948      	cbnz	r0, 8009fb6 <__lshift+0x3e>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	4b28      	ldr	r3, [pc, #160]	@ (800a048 <__lshift+0xd0>)
 8009fa6:	4829      	ldr	r0, [pc, #164]	@ (800a04c <__lshift+0xd4>)
 8009fa8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009fac:	f001 fb18 	bl	800b5e0 <__assert_func>
 8009fb0:	3101      	adds	r1, #1
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	e7ee      	b.n	8009f94 <__lshift+0x1c>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f100 0114 	add.w	r1, r0, #20
 8009fbc:	f100 0210 	add.w	r2, r0, #16
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	4553      	cmp	r3, sl
 8009fc4:	db33      	blt.n	800a02e <__lshift+0xb6>
 8009fc6:	6920      	ldr	r0, [r4, #16]
 8009fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fcc:	f104 0314 	add.w	r3, r4, #20
 8009fd0:	f019 091f 	ands.w	r9, r9, #31
 8009fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fdc:	d02b      	beq.n	800a036 <__lshift+0xbe>
 8009fde:	f1c9 0e20 	rsb	lr, r9, #32
 8009fe2:	468a      	mov	sl, r1
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	6818      	ldr	r0, [r3, #0]
 8009fe8:	fa00 f009 	lsl.w	r0, r0, r9
 8009fec:	4310      	orrs	r0, r2
 8009fee:	f84a 0b04 	str.w	r0, [sl], #4
 8009ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ff6:	459c      	cmp	ip, r3
 8009ff8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ffc:	d8f3      	bhi.n	8009fe6 <__lshift+0x6e>
 8009ffe:	ebac 0304 	sub.w	r3, ip, r4
 800a002:	3b15      	subs	r3, #21
 800a004:	f023 0303 	bic.w	r3, r3, #3
 800a008:	3304      	adds	r3, #4
 800a00a:	f104 0015 	add.w	r0, r4, #21
 800a00e:	4584      	cmp	ip, r0
 800a010:	bf38      	it	cc
 800a012:	2304      	movcc	r3, #4
 800a014:	50ca      	str	r2, [r1, r3]
 800a016:	b10a      	cbz	r2, 800a01c <__lshift+0xa4>
 800a018:	f108 0602 	add.w	r6, r8, #2
 800a01c:	3e01      	subs	r6, #1
 800a01e:	4638      	mov	r0, r7
 800a020:	612e      	str	r6, [r5, #16]
 800a022:	4621      	mov	r1, r4
 800a024:	f7ff fd90 	bl	8009b48 <_Bfree>
 800a028:	4628      	mov	r0, r5
 800a02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a02e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a032:	3301      	adds	r3, #1
 800a034:	e7c5      	b.n	8009fc2 <__lshift+0x4a>
 800a036:	3904      	subs	r1, #4
 800a038:	f853 2b04 	ldr.w	r2, [r3], #4
 800a03c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a040:	459c      	cmp	ip, r3
 800a042:	d8f9      	bhi.n	800a038 <__lshift+0xc0>
 800a044:	e7ea      	b.n	800a01c <__lshift+0xa4>
 800a046:	bf00      	nop
 800a048:	0800c425 	.word	0x0800c425
 800a04c:	0800c436 	.word	0x0800c436

0800a050 <__mcmp>:
 800a050:	690a      	ldr	r2, [r1, #16]
 800a052:	4603      	mov	r3, r0
 800a054:	6900      	ldr	r0, [r0, #16]
 800a056:	1a80      	subs	r0, r0, r2
 800a058:	b530      	push	{r4, r5, lr}
 800a05a:	d10e      	bne.n	800a07a <__mcmp+0x2a>
 800a05c:	3314      	adds	r3, #20
 800a05e:	3114      	adds	r1, #20
 800a060:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a064:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a068:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a06c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a070:	4295      	cmp	r5, r2
 800a072:	d003      	beq.n	800a07c <__mcmp+0x2c>
 800a074:	d205      	bcs.n	800a082 <__mcmp+0x32>
 800a076:	f04f 30ff 	mov.w	r0, #4294967295
 800a07a:	bd30      	pop	{r4, r5, pc}
 800a07c:	42a3      	cmp	r3, r4
 800a07e:	d3f3      	bcc.n	800a068 <__mcmp+0x18>
 800a080:	e7fb      	b.n	800a07a <__mcmp+0x2a>
 800a082:	2001      	movs	r0, #1
 800a084:	e7f9      	b.n	800a07a <__mcmp+0x2a>
	...

0800a088 <__mdiff>:
 800a088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	4689      	mov	r9, r1
 800a08e:	4606      	mov	r6, r0
 800a090:	4611      	mov	r1, r2
 800a092:	4648      	mov	r0, r9
 800a094:	4614      	mov	r4, r2
 800a096:	f7ff ffdb 	bl	800a050 <__mcmp>
 800a09a:	1e05      	subs	r5, r0, #0
 800a09c:	d112      	bne.n	800a0c4 <__mdiff+0x3c>
 800a09e:	4629      	mov	r1, r5
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f7ff fd11 	bl	8009ac8 <_Balloc>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	b928      	cbnz	r0, 800a0b6 <__mdiff+0x2e>
 800a0aa:	4b3f      	ldr	r3, [pc, #252]	@ (800a1a8 <__mdiff+0x120>)
 800a0ac:	f240 2137 	movw	r1, #567	@ 0x237
 800a0b0:	483e      	ldr	r0, [pc, #248]	@ (800a1ac <__mdiff+0x124>)
 800a0b2:	f001 fa95 	bl	800b5e0 <__assert_func>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0bc:	4610      	mov	r0, r2
 800a0be:	b003      	add	sp, #12
 800a0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c4:	bfbc      	itt	lt
 800a0c6:	464b      	movlt	r3, r9
 800a0c8:	46a1      	movlt	r9, r4
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a0d0:	bfba      	itte	lt
 800a0d2:	461c      	movlt	r4, r3
 800a0d4:	2501      	movlt	r5, #1
 800a0d6:	2500      	movge	r5, #0
 800a0d8:	f7ff fcf6 	bl	8009ac8 <_Balloc>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	b918      	cbnz	r0, 800a0e8 <__mdiff+0x60>
 800a0e0:	4b31      	ldr	r3, [pc, #196]	@ (800a1a8 <__mdiff+0x120>)
 800a0e2:	f240 2145 	movw	r1, #581	@ 0x245
 800a0e6:	e7e3      	b.n	800a0b0 <__mdiff+0x28>
 800a0e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a0ec:	6926      	ldr	r6, [r4, #16]
 800a0ee:	60c5      	str	r5, [r0, #12]
 800a0f0:	f109 0310 	add.w	r3, r9, #16
 800a0f4:	f109 0514 	add.w	r5, r9, #20
 800a0f8:	f104 0e14 	add.w	lr, r4, #20
 800a0fc:	f100 0b14 	add.w	fp, r0, #20
 800a100:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a104:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a108:	9301      	str	r3, [sp, #4]
 800a10a:	46d9      	mov	r9, fp
 800a10c:	f04f 0c00 	mov.w	ip, #0
 800a110:	9b01      	ldr	r3, [sp, #4]
 800a112:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a116:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	fa1f f38a 	uxth.w	r3, sl
 800a120:	4619      	mov	r1, r3
 800a122:	b283      	uxth	r3, r0
 800a124:	1acb      	subs	r3, r1, r3
 800a126:	0c00      	lsrs	r0, r0, #16
 800a128:	4463      	add	r3, ip
 800a12a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a12e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a132:	b29b      	uxth	r3, r3
 800a134:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a138:	4576      	cmp	r6, lr
 800a13a:	f849 3b04 	str.w	r3, [r9], #4
 800a13e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a142:	d8e5      	bhi.n	800a110 <__mdiff+0x88>
 800a144:	1b33      	subs	r3, r6, r4
 800a146:	3b15      	subs	r3, #21
 800a148:	f023 0303 	bic.w	r3, r3, #3
 800a14c:	3415      	adds	r4, #21
 800a14e:	3304      	adds	r3, #4
 800a150:	42a6      	cmp	r6, r4
 800a152:	bf38      	it	cc
 800a154:	2304      	movcc	r3, #4
 800a156:	441d      	add	r5, r3
 800a158:	445b      	add	r3, fp
 800a15a:	461e      	mov	r6, r3
 800a15c:	462c      	mov	r4, r5
 800a15e:	4544      	cmp	r4, r8
 800a160:	d30e      	bcc.n	800a180 <__mdiff+0xf8>
 800a162:	f108 0103 	add.w	r1, r8, #3
 800a166:	1b49      	subs	r1, r1, r5
 800a168:	f021 0103 	bic.w	r1, r1, #3
 800a16c:	3d03      	subs	r5, #3
 800a16e:	45a8      	cmp	r8, r5
 800a170:	bf38      	it	cc
 800a172:	2100      	movcc	r1, #0
 800a174:	440b      	add	r3, r1
 800a176:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a17a:	b191      	cbz	r1, 800a1a2 <__mdiff+0x11a>
 800a17c:	6117      	str	r7, [r2, #16]
 800a17e:	e79d      	b.n	800a0bc <__mdiff+0x34>
 800a180:	f854 1b04 	ldr.w	r1, [r4], #4
 800a184:	46e6      	mov	lr, ip
 800a186:	0c08      	lsrs	r0, r1, #16
 800a188:	fa1c fc81 	uxtah	ip, ip, r1
 800a18c:	4471      	add	r1, lr
 800a18e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a192:	b289      	uxth	r1, r1
 800a194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a198:	f846 1b04 	str.w	r1, [r6], #4
 800a19c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1a0:	e7dd      	b.n	800a15e <__mdiff+0xd6>
 800a1a2:	3f01      	subs	r7, #1
 800a1a4:	e7e7      	b.n	800a176 <__mdiff+0xee>
 800a1a6:	bf00      	nop
 800a1a8:	0800c425 	.word	0x0800c425
 800a1ac:	0800c436 	.word	0x0800c436

0800a1b0 <__ulp>:
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	ed8d 0b00 	vstr	d0, [sp]
 800a1b6:	9a01      	ldr	r2, [sp, #4]
 800a1b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a1f8 <__ulp+0x48>)
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	dc08      	bgt.n	800a1d6 <__ulp+0x26>
 800a1c4:	425b      	negs	r3, r3
 800a1c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a1ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a1ce:	da04      	bge.n	800a1da <__ulp+0x2a>
 800a1d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a1d4:	4113      	asrs	r3, r2
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	e008      	b.n	800a1ec <__ulp+0x3c>
 800a1da:	f1a2 0314 	sub.w	r3, r2, #20
 800a1de:	2b1e      	cmp	r3, #30
 800a1e0:	bfda      	itte	le
 800a1e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a1e6:	40da      	lsrle	r2, r3
 800a1e8:	2201      	movgt	r2, #1
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4610      	mov	r0, r2
 800a1f0:	ec41 0b10 	vmov	d0, r0, r1
 800a1f4:	b002      	add	sp, #8
 800a1f6:	4770      	bx	lr
 800a1f8:	7ff00000 	.word	0x7ff00000

0800a1fc <__b2d>:
 800a1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a200:	6906      	ldr	r6, [r0, #16]
 800a202:	f100 0814 	add.w	r8, r0, #20
 800a206:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a20a:	1f37      	subs	r7, r6, #4
 800a20c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a210:	4610      	mov	r0, r2
 800a212:	f7ff fd4b 	bl	8009cac <__hi0bits>
 800a216:	f1c0 0320 	rsb	r3, r0, #32
 800a21a:	280a      	cmp	r0, #10
 800a21c:	600b      	str	r3, [r1, #0]
 800a21e:	491b      	ldr	r1, [pc, #108]	@ (800a28c <__b2d+0x90>)
 800a220:	dc15      	bgt.n	800a24e <__b2d+0x52>
 800a222:	f1c0 0c0b 	rsb	ip, r0, #11
 800a226:	fa22 f30c 	lsr.w	r3, r2, ip
 800a22a:	45b8      	cmp	r8, r7
 800a22c:	ea43 0501 	orr.w	r5, r3, r1
 800a230:	bf34      	ite	cc
 800a232:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a236:	2300      	movcs	r3, #0
 800a238:	3015      	adds	r0, #21
 800a23a:	fa02 f000 	lsl.w	r0, r2, r0
 800a23e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a242:	4303      	orrs	r3, r0
 800a244:	461c      	mov	r4, r3
 800a246:	ec45 4b10 	vmov	d0, r4, r5
 800a24a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a24e:	45b8      	cmp	r8, r7
 800a250:	bf3a      	itte	cc
 800a252:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a256:	f1a6 0708 	subcc.w	r7, r6, #8
 800a25a:	2300      	movcs	r3, #0
 800a25c:	380b      	subs	r0, #11
 800a25e:	d012      	beq.n	800a286 <__b2d+0x8a>
 800a260:	f1c0 0120 	rsb	r1, r0, #32
 800a264:	fa23 f401 	lsr.w	r4, r3, r1
 800a268:	4082      	lsls	r2, r0
 800a26a:	4322      	orrs	r2, r4
 800a26c:	4547      	cmp	r7, r8
 800a26e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a272:	bf8c      	ite	hi
 800a274:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a278:	2200      	movls	r2, #0
 800a27a:	4083      	lsls	r3, r0
 800a27c:	40ca      	lsrs	r2, r1
 800a27e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a282:	4313      	orrs	r3, r2
 800a284:	e7de      	b.n	800a244 <__b2d+0x48>
 800a286:	ea42 0501 	orr.w	r5, r2, r1
 800a28a:	e7db      	b.n	800a244 <__b2d+0x48>
 800a28c:	3ff00000 	.word	0x3ff00000

0800a290 <__d2b>:
 800a290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a294:	460f      	mov	r7, r1
 800a296:	2101      	movs	r1, #1
 800a298:	ec59 8b10 	vmov	r8, r9, d0
 800a29c:	4616      	mov	r6, r2
 800a29e:	f7ff fc13 	bl	8009ac8 <_Balloc>
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	b930      	cbnz	r0, 800a2b4 <__d2b+0x24>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	4b23      	ldr	r3, [pc, #140]	@ (800a338 <__d2b+0xa8>)
 800a2aa:	4824      	ldr	r0, [pc, #144]	@ (800a33c <__d2b+0xac>)
 800a2ac:	f240 310f 	movw	r1, #783	@ 0x30f
 800a2b0:	f001 f996 	bl	800b5e0 <__assert_func>
 800a2b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a2b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a2bc:	b10d      	cbz	r5, 800a2c2 <__d2b+0x32>
 800a2be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	f1b8 0300 	subs.w	r3, r8, #0
 800a2c8:	d023      	beq.n	800a312 <__d2b+0x82>
 800a2ca:	4668      	mov	r0, sp
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	f7ff fd0c 	bl	8009cea <__lo0bits>
 800a2d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a2d6:	b1d0      	cbz	r0, 800a30e <__d2b+0x7e>
 800a2d8:	f1c0 0320 	rsb	r3, r0, #32
 800a2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e0:	430b      	orrs	r3, r1
 800a2e2:	40c2      	lsrs	r2, r0
 800a2e4:	6163      	str	r3, [r4, #20]
 800a2e6:	9201      	str	r2, [sp, #4]
 800a2e8:	9b01      	ldr	r3, [sp, #4]
 800a2ea:	61a3      	str	r3, [r4, #24]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	bf0c      	ite	eq
 800a2f0:	2201      	moveq	r2, #1
 800a2f2:	2202      	movne	r2, #2
 800a2f4:	6122      	str	r2, [r4, #16]
 800a2f6:	b1a5      	cbz	r5, 800a322 <__d2b+0x92>
 800a2f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a2fc:	4405      	add	r5, r0
 800a2fe:	603d      	str	r5, [r7, #0]
 800a300:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a304:	6030      	str	r0, [r6, #0]
 800a306:	4620      	mov	r0, r4
 800a308:	b003      	add	sp, #12
 800a30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a30e:	6161      	str	r1, [r4, #20]
 800a310:	e7ea      	b.n	800a2e8 <__d2b+0x58>
 800a312:	a801      	add	r0, sp, #4
 800a314:	f7ff fce9 	bl	8009cea <__lo0bits>
 800a318:	9b01      	ldr	r3, [sp, #4]
 800a31a:	6163      	str	r3, [r4, #20]
 800a31c:	3020      	adds	r0, #32
 800a31e:	2201      	movs	r2, #1
 800a320:	e7e8      	b.n	800a2f4 <__d2b+0x64>
 800a322:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a326:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a32a:	6038      	str	r0, [r7, #0]
 800a32c:	6918      	ldr	r0, [r3, #16]
 800a32e:	f7ff fcbd 	bl	8009cac <__hi0bits>
 800a332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a336:	e7e5      	b.n	800a304 <__d2b+0x74>
 800a338:	0800c425 	.word	0x0800c425
 800a33c:	0800c436 	.word	0x0800c436

0800a340 <__ratio>:
 800a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a344:	b085      	sub	sp, #20
 800a346:	e9cd 1000 	strd	r1, r0, [sp]
 800a34a:	a902      	add	r1, sp, #8
 800a34c:	f7ff ff56 	bl	800a1fc <__b2d>
 800a350:	9800      	ldr	r0, [sp, #0]
 800a352:	a903      	add	r1, sp, #12
 800a354:	ec55 4b10 	vmov	r4, r5, d0
 800a358:	f7ff ff50 	bl	800a1fc <__b2d>
 800a35c:	9b01      	ldr	r3, [sp, #4]
 800a35e:	6919      	ldr	r1, [r3, #16]
 800a360:	9b00      	ldr	r3, [sp, #0]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	1ac9      	subs	r1, r1, r3
 800a366:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a36a:	1a9b      	subs	r3, r3, r2
 800a36c:	ec5b ab10 	vmov	sl, fp, d0
 800a370:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a374:	2b00      	cmp	r3, #0
 800a376:	bfce      	itee	gt
 800a378:	462a      	movgt	r2, r5
 800a37a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a37e:	465a      	movle	r2, fp
 800a380:	462f      	mov	r7, r5
 800a382:	46d9      	mov	r9, fp
 800a384:	bfcc      	ite	gt
 800a386:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a38a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a38e:	464b      	mov	r3, r9
 800a390:	4652      	mov	r2, sl
 800a392:	4620      	mov	r0, r4
 800a394:	4639      	mov	r1, r7
 800a396:	f7f6 fa79 	bl	800088c <__aeabi_ddiv>
 800a39a:	ec41 0b10 	vmov	d0, r0, r1
 800a39e:	b005      	add	sp, #20
 800a3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a3a4 <__copybits>:
 800a3a4:	3901      	subs	r1, #1
 800a3a6:	b570      	push	{r4, r5, r6, lr}
 800a3a8:	1149      	asrs	r1, r1, #5
 800a3aa:	6914      	ldr	r4, [r2, #16]
 800a3ac:	3101      	adds	r1, #1
 800a3ae:	f102 0314 	add.w	r3, r2, #20
 800a3b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a3b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a3ba:	1f05      	subs	r5, r0, #4
 800a3bc:	42a3      	cmp	r3, r4
 800a3be:	d30c      	bcc.n	800a3da <__copybits+0x36>
 800a3c0:	1aa3      	subs	r3, r4, r2
 800a3c2:	3b11      	subs	r3, #17
 800a3c4:	f023 0303 	bic.w	r3, r3, #3
 800a3c8:	3211      	adds	r2, #17
 800a3ca:	42a2      	cmp	r2, r4
 800a3cc:	bf88      	it	hi
 800a3ce:	2300      	movhi	r3, #0
 800a3d0:	4418      	add	r0, r3
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	4288      	cmp	r0, r1
 800a3d6:	d305      	bcc.n	800a3e4 <__copybits+0x40>
 800a3d8:	bd70      	pop	{r4, r5, r6, pc}
 800a3da:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3de:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3e2:	e7eb      	b.n	800a3bc <__copybits+0x18>
 800a3e4:	f840 3b04 	str.w	r3, [r0], #4
 800a3e8:	e7f4      	b.n	800a3d4 <__copybits+0x30>

0800a3ea <__any_on>:
 800a3ea:	f100 0214 	add.w	r2, r0, #20
 800a3ee:	6900      	ldr	r0, [r0, #16]
 800a3f0:	114b      	asrs	r3, r1, #5
 800a3f2:	4298      	cmp	r0, r3
 800a3f4:	b510      	push	{r4, lr}
 800a3f6:	db11      	blt.n	800a41c <__any_on+0x32>
 800a3f8:	dd0a      	ble.n	800a410 <__any_on+0x26>
 800a3fa:	f011 011f 	ands.w	r1, r1, #31
 800a3fe:	d007      	beq.n	800a410 <__any_on+0x26>
 800a400:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a404:	fa24 f001 	lsr.w	r0, r4, r1
 800a408:	fa00 f101 	lsl.w	r1, r0, r1
 800a40c:	428c      	cmp	r4, r1
 800a40e:	d10b      	bne.n	800a428 <__any_on+0x3e>
 800a410:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a414:	4293      	cmp	r3, r2
 800a416:	d803      	bhi.n	800a420 <__any_on+0x36>
 800a418:	2000      	movs	r0, #0
 800a41a:	bd10      	pop	{r4, pc}
 800a41c:	4603      	mov	r3, r0
 800a41e:	e7f7      	b.n	800a410 <__any_on+0x26>
 800a420:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a424:	2900      	cmp	r1, #0
 800a426:	d0f5      	beq.n	800a414 <__any_on+0x2a>
 800a428:	2001      	movs	r0, #1
 800a42a:	e7f6      	b.n	800a41a <__any_on+0x30>

0800a42c <sulp>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	4604      	mov	r4, r0
 800a430:	460d      	mov	r5, r1
 800a432:	ec45 4b10 	vmov	d0, r4, r5
 800a436:	4616      	mov	r6, r2
 800a438:	f7ff feba 	bl	800a1b0 <__ulp>
 800a43c:	ec51 0b10 	vmov	r0, r1, d0
 800a440:	b17e      	cbz	r6, 800a462 <sulp+0x36>
 800a442:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a446:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	dd09      	ble.n	800a462 <sulp+0x36>
 800a44e:	051b      	lsls	r3, r3, #20
 800a450:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a454:	2400      	movs	r4, #0
 800a456:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a45a:	4622      	mov	r2, r4
 800a45c:	462b      	mov	r3, r5
 800a45e:	f7f6 f8eb 	bl	8000638 <__aeabi_dmul>
 800a462:	ec41 0b10 	vmov	d0, r0, r1
 800a466:	bd70      	pop	{r4, r5, r6, pc}

0800a468 <_strtod_l>:
 800a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a46c:	b09f      	sub	sp, #124	@ 0x7c
 800a46e:	460c      	mov	r4, r1
 800a470:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a472:	2200      	movs	r2, #0
 800a474:	921a      	str	r2, [sp, #104]	@ 0x68
 800a476:	9005      	str	r0, [sp, #20]
 800a478:	f04f 0a00 	mov.w	sl, #0
 800a47c:	f04f 0b00 	mov.w	fp, #0
 800a480:	460a      	mov	r2, r1
 800a482:	9219      	str	r2, [sp, #100]	@ 0x64
 800a484:	7811      	ldrb	r1, [r2, #0]
 800a486:	292b      	cmp	r1, #43	@ 0x2b
 800a488:	d04a      	beq.n	800a520 <_strtod_l+0xb8>
 800a48a:	d838      	bhi.n	800a4fe <_strtod_l+0x96>
 800a48c:	290d      	cmp	r1, #13
 800a48e:	d832      	bhi.n	800a4f6 <_strtod_l+0x8e>
 800a490:	2908      	cmp	r1, #8
 800a492:	d832      	bhi.n	800a4fa <_strtod_l+0x92>
 800a494:	2900      	cmp	r1, #0
 800a496:	d03b      	beq.n	800a510 <_strtod_l+0xa8>
 800a498:	2200      	movs	r2, #0
 800a49a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a49c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a49e:	782a      	ldrb	r2, [r5, #0]
 800a4a0:	2a30      	cmp	r2, #48	@ 0x30
 800a4a2:	f040 80b3 	bne.w	800a60c <_strtod_l+0x1a4>
 800a4a6:	786a      	ldrb	r2, [r5, #1]
 800a4a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a4ac:	2a58      	cmp	r2, #88	@ 0x58
 800a4ae:	d16e      	bne.n	800a58e <_strtod_l+0x126>
 800a4b0:	9302      	str	r3, [sp, #8]
 800a4b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a4b8:	9300      	str	r3, [sp, #0]
 800a4ba:	4a8e      	ldr	r2, [pc, #568]	@ (800a6f4 <_strtod_l+0x28c>)
 800a4bc:	9805      	ldr	r0, [sp, #20]
 800a4be:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a4c0:	a919      	add	r1, sp, #100	@ 0x64
 800a4c2:	f001 f927 	bl	800b714 <__gethex>
 800a4c6:	f010 060f 	ands.w	r6, r0, #15
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	d005      	beq.n	800a4da <_strtod_l+0x72>
 800a4ce:	2e06      	cmp	r6, #6
 800a4d0:	d128      	bne.n	800a524 <_strtod_l+0xbc>
 800a4d2:	3501      	adds	r5, #1
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a4d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a4da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f040 858e 	bne.w	800affe <_strtod_l+0xb96>
 800a4e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4e4:	b1cb      	cbz	r3, 800a51a <_strtod_l+0xb2>
 800a4e6:	4652      	mov	r2, sl
 800a4e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a4ec:	ec43 2b10 	vmov	d0, r2, r3
 800a4f0:	b01f      	add	sp, #124	@ 0x7c
 800a4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f6:	2920      	cmp	r1, #32
 800a4f8:	d1ce      	bne.n	800a498 <_strtod_l+0x30>
 800a4fa:	3201      	adds	r2, #1
 800a4fc:	e7c1      	b.n	800a482 <_strtod_l+0x1a>
 800a4fe:	292d      	cmp	r1, #45	@ 0x2d
 800a500:	d1ca      	bne.n	800a498 <_strtod_l+0x30>
 800a502:	2101      	movs	r1, #1
 800a504:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a506:	1c51      	adds	r1, r2, #1
 800a508:	9119      	str	r1, [sp, #100]	@ 0x64
 800a50a:	7852      	ldrb	r2, [r2, #1]
 800a50c:	2a00      	cmp	r2, #0
 800a50e:	d1c5      	bne.n	800a49c <_strtod_l+0x34>
 800a510:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a512:	9419      	str	r4, [sp, #100]	@ 0x64
 800a514:	2b00      	cmp	r3, #0
 800a516:	f040 8570 	bne.w	800affa <_strtod_l+0xb92>
 800a51a:	4652      	mov	r2, sl
 800a51c:	465b      	mov	r3, fp
 800a51e:	e7e5      	b.n	800a4ec <_strtod_l+0x84>
 800a520:	2100      	movs	r1, #0
 800a522:	e7ef      	b.n	800a504 <_strtod_l+0x9c>
 800a524:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a526:	b13a      	cbz	r2, 800a538 <_strtod_l+0xd0>
 800a528:	2135      	movs	r1, #53	@ 0x35
 800a52a:	a81c      	add	r0, sp, #112	@ 0x70
 800a52c:	f7ff ff3a 	bl	800a3a4 <__copybits>
 800a530:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a532:	9805      	ldr	r0, [sp, #20]
 800a534:	f7ff fb08 	bl	8009b48 <_Bfree>
 800a538:	3e01      	subs	r6, #1
 800a53a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a53c:	2e04      	cmp	r6, #4
 800a53e:	d806      	bhi.n	800a54e <_strtod_l+0xe6>
 800a540:	e8df f006 	tbb	[pc, r6]
 800a544:	201d0314 	.word	0x201d0314
 800a548:	14          	.byte	0x14
 800a549:	00          	.byte	0x00
 800a54a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a54e:	05e1      	lsls	r1, r4, #23
 800a550:	bf48      	it	mi
 800a552:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a556:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a55a:	0d1b      	lsrs	r3, r3, #20
 800a55c:	051b      	lsls	r3, r3, #20
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1bb      	bne.n	800a4da <_strtod_l+0x72>
 800a562:	f7fe fb31 	bl	8008bc8 <__errno>
 800a566:	2322      	movs	r3, #34	@ 0x22
 800a568:	6003      	str	r3, [r0, #0]
 800a56a:	e7b6      	b.n	800a4da <_strtod_l+0x72>
 800a56c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a570:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a574:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a578:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a57c:	e7e7      	b.n	800a54e <_strtod_l+0xe6>
 800a57e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a6fc <_strtod_l+0x294>
 800a582:	e7e4      	b.n	800a54e <_strtod_l+0xe6>
 800a584:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a588:	f04f 3aff 	mov.w	sl, #4294967295
 800a58c:	e7df      	b.n	800a54e <_strtod_l+0xe6>
 800a58e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a590:	1c5a      	adds	r2, r3, #1
 800a592:	9219      	str	r2, [sp, #100]	@ 0x64
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2b30      	cmp	r3, #48	@ 0x30
 800a598:	d0f9      	beq.n	800a58e <_strtod_l+0x126>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d09d      	beq.n	800a4da <_strtod_l+0x72>
 800a59e:	2301      	movs	r3, #1
 800a5a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a5a4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	9308      	str	r3, [sp, #32]
 800a5aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800a5ac:	461f      	mov	r7, r3
 800a5ae:	220a      	movs	r2, #10
 800a5b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a5b2:	7805      	ldrb	r5, [r0, #0]
 800a5b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a5b8:	b2d9      	uxtb	r1, r3
 800a5ba:	2909      	cmp	r1, #9
 800a5bc:	d928      	bls.n	800a610 <_strtod_l+0x1a8>
 800a5be:	494e      	ldr	r1, [pc, #312]	@ (800a6f8 <_strtod_l+0x290>)
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f000 ffd5 	bl	800b570 <strncmp>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d032      	beq.n	800a630 <_strtod_l+0x1c8>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	462a      	mov	r2, r5
 800a5ce:	4681      	mov	r9, r0
 800a5d0:	463d      	mov	r5, r7
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2a65      	cmp	r2, #101	@ 0x65
 800a5d6:	d001      	beq.n	800a5dc <_strtod_l+0x174>
 800a5d8:	2a45      	cmp	r2, #69	@ 0x45
 800a5da:	d114      	bne.n	800a606 <_strtod_l+0x19e>
 800a5dc:	b91d      	cbnz	r5, 800a5e6 <_strtod_l+0x17e>
 800a5de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5e0:	4302      	orrs	r2, r0
 800a5e2:	d095      	beq.n	800a510 <_strtod_l+0xa8>
 800a5e4:	2500      	movs	r5, #0
 800a5e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a5e8:	1c62      	adds	r2, r4, #1
 800a5ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800a5ec:	7862      	ldrb	r2, [r4, #1]
 800a5ee:	2a2b      	cmp	r2, #43	@ 0x2b
 800a5f0:	d077      	beq.n	800a6e2 <_strtod_l+0x27a>
 800a5f2:	2a2d      	cmp	r2, #45	@ 0x2d
 800a5f4:	d07b      	beq.n	800a6ee <_strtod_l+0x286>
 800a5f6:	f04f 0c00 	mov.w	ip, #0
 800a5fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a5fe:	2909      	cmp	r1, #9
 800a600:	f240 8082 	bls.w	800a708 <_strtod_l+0x2a0>
 800a604:	9419      	str	r4, [sp, #100]	@ 0x64
 800a606:	f04f 0800 	mov.w	r8, #0
 800a60a:	e0a2      	b.n	800a752 <_strtod_l+0x2ea>
 800a60c:	2300      	movs	r3, #0
 800a60e:	e7c7      	b.n	800a5a0 <_strtod_l+0x138>
 800a610:	2f08      	cmp	r7, #8
 800a612:	bfd5      	itete	le
 800a614:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a616:	9908      	ldrgt	r1, [sp, #32]
 800a618:	fb02 3301 	mlale	r3, r2, r1, r3
 800a61c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a620:	f100 0001 	add.w	r0, r0, #1
 800a624:	bfd4      	ite	le
 800a626:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a628:	9308      	strgt	r3, [sp, #32]
 800a62a:	3701      	adds	r7, #1
 800a62c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a62e:	e7bf      	b.n	800a5b0 <_strtod_l+0x148>
 800a630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	9219      	str	r2, [sp, #100]	@ 0x64
 800a636:	785a      	ldrb	r2, [r3, #1]
 800a638:	b37f      	cbz	r7, 800a69a <_strtod_l+0x232>
 800a63a:	4681      	mov	r9, r0
 800a63c:	463d      	mov	r5, r7
 800a63e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a642:	2b09      	cmp	r3, #9
 800a644:	d912      	bls.n	800a66c <_strtod_l+0x204>
 800a646:	2301      	movs	r3, #1
 800a648:	e7c4      	b.n	800a5d4 <_strtod_l+0x16c>
 800a64a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a650:	785a      	ldrb	r2, [r3, #1]
 800a652:	3001      	adds	r0, #1
 800a654:	2a30      	cmp	r2, #48	@ 0x30
 800a656:	d0f8      	beq.n	800a64a <_strtod_l+0x1e2>
 800a658:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a65c:	2b08      	cmp	r3, #8
 800a65e:	f200 84d3 	bhi.w	800b008 <_strtod_l+0xba0>
 800a662:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a664:	930c      	str	r3, [sp, #48]	@ 0x30
 800a666:	4681      	mov	r9, r0
 800a668:	2000      	movs	r0, #0
 800a66a:	4605      	mov	r5, r0
 800a66c:	3a30      	subs	r2, #48	@ 0x30
 800a66e:	f100 0301 	add.w	r3, r0, #1
 800a672:	d02a      	beq.n	800a6ca <_strtod_l+0x262>
 800a674:	4499      	add	r9, r3
 800a676:	eb00 0c05 	add.w	ip, r0, r5
 800a67a:	462b      	mov	r3, r5
 800a67c:	210a      	movs	r1, #10
 800a67e:	4563      	cmp	r3, ip
 800a680:	d10d      	bne.n	800a69e <_strtod_l+0x236>
 800a682:	1c69      	adds	r1, r5, #1
 800a684:	4401      	add	r1, r0
 800a686:	4428      	add	r0, r5
 800a688:	2808      	cmp	r0, #8
 800a68a:	dc16      	bgt.n	800a6ba <_strtod_l+0x252>
 800a68c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a68e:	230a      	movs	r3, #10
 800a690:	fb03 2300 	mla	r3, r3, r0, r2
 800a694:	930a      	str	r3, [sp, #40]	@ 0x28
 800a696:	2300      	movs	r3, #0
 800a698:	e018      	b.n	800a6cc <_strtod_l+0x264>
 800a69a:	4638      	mov	r0, r7
 800a69c:	e7da      	b.n	800a654 <_strtod_l+0x1ec>
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	f103 0301 	add.w	r3, r3, #1
 800a6a4:	dc03      	bgt.n	800a6ae <_strtod_l+0x246>
 800a6a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a6a8:	434e      	muls	r6, r1
 800a6aa:	960a      	str	r6, [sp, #40]	@ 0x28
 800a6ac:	e7e7      	b.n	800a67e <_strtod_l+0x216>
 800a6ae:	2b10      	cmp	r3, #16
 800a6b0:	bfde      	ittt	le
 800a6b2:	9e08      	ldrle	r6, [sp, #32]
 800a6b4:	434e      	mulle	r6, r1
 800a6b6:	9608      	strle	r6, [sp, #32]
 800a6b8:	e7e1      	b.n	800a67e <_strtod_l+0x216>
 800a6ba:	280f      	cmp	r0, #15
 800a6bc:	dceb      	bgt.n	800a696 <_strtod_l+0x22e>
 800a6be:	9808      	ldr	r0, [sp, #32]
 800a6c0:	230a      	movs	r3, #10
 800a6c2:	fb03 2300 	mla	r3, r3, r0, r2
 800a6c6:	9308      	str	r3, [sp, #32]
 800a6c8:	e7e5      	b.n	800a696 <_strtod_l+0x22e>
 800a6ca:	4629      	mov	r1, r5
 800a6cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a6ce:	1c50      	adds	r0, r2, #1
 800a6d0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a6d2:	7852      	ldrb	r2, [r2, #1]
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	460d      	mov	r5, r1
 800a6d8:	e7b1      	b.n	800a63e <_strtod_l+0x1d6>
 800a6da:	f04f 0900 	mov.w	r9, #0
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e77d      	b.n	800a5de <_strtod_l+0x176>
 800a6e2:	f04f 0c00 	mov.w	ip, #0
 800a6e6:	1ca2      	adds	r2, r4, #2
 800a6e8:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6ea:	78a2      	ldrb	r2, [r4, #2]
 800a6ec:	e785      	b.n	800a5fa <_strtod_l+0x192>
 800a6ee:	f04f 0c01 	mov.w	ip, #1
 800a6f2:	e7f8      	b.n	800a6e6 <_strtod_l+0x27e>
 800a6f4:	0800c5a8 	.word	0x0800c5a8
 800a6f8:	0800c590 	.word	0x0800c590
 800a6fc:	7ff00000 	.word	0x7ff00000
 800a700:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a702:	1c51      	adds	r1, r2, #1
 800a704:	9119      	str	r1, [sp, #100]	@ 0x64
 800a706:	7852      	ldrb	r2, [r2, #1]
 800a708:	2a30      	cmp	r2, #48	@ 0x30
 800a70a:	d0f9      	beq.n	800a700 <_strtod_l+0x298>
 800a70c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a710:	2908      	cmp	r1, #8
 800a712:	f63f af78 	bhi.w	800a606 <_strtod_l+0x19e>
 800a716:	3a30      	subs	r2, #48	@ 0x30
 800a718:	920e      	str	r2, [sp, #56]	@ 0x38
 800a71a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a71c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a71e:	f04f 080a 	mov.w	r8, #10
 800a722:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a724:	1c56      	adds	r6, r2, #1
 800a726:	9619      	str	r6, [sp, #100]	@ 0x64
 800a728:	7852      	ldrb	r2, [r2, #1]
 800a72a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a72e:	f1be 0f09 	cmp.w	lr, #9
 800a732:	d939      	bls.n	800a7a8 <_strtod_l+0x340>
 800a734:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a736:	1a76      	subs	r6, r6, r1
 800a738:	2e08      	cmp	r6, #8
 800a73a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a73e:	dc03      	bgt.n	800a748 <_strtod_l+0x2e0>
 800a740:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a742:	4588      	cmp	r8, r1
 800a744:	bfa8      	it	ge
 800a746:	4688      	movge	r8, r1
 800a748:	f1bc 0f00 	cmp.w	ip, #0
 800a74c:	d001      	beq.n	800a752 <_strtod_l+0x2ea>
 800a74e:	f1c8 0800 	rsb	r8, r8, #0
 800a752:	2d00      	cmp	r5, #0
 800a754:	d14e      	bne.n	800a7f4 <_strtod_l+0x38c>
 800a756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a758:	4308      	orrs	r0, r1
 800a75a:	f47f aebe 	bne.w	800a4da <_strtod_l+0x72>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	f47f aed6 	bne.w	800a510 <_strtod_l+0xa8>
 800a764:	2a69      	cmp	r2, #105	@ 0x69
 800a766:	d028      	beq.n	800a7ba <_strtod_l+0x352>
 800a768:	dc25      	bgt.n	800a7b6 <_strtod_l+0x34e>
 800a76a:	2a49      	cmp	r2, #73	@ 0x49
 800a76c:	d025      	beq.n	800a7ba <_strtod_l+0x352>
 800a76e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a770:	f47f aece 	bne.w	800a510 <_strtod_l+0xa8>
 800a774:	499b      	ldr	r1, [pc, #620]	@ (800a9e4 <_strtod_l+0x57c>)
 800a776:	a819      	add	r0, sp, #100	@ 0x64
 800a778:	f001 f9ee 	bl	800bb58 <__match>
 800a77c:	2800      	cmp	r0, #0
 800a77e:	f43f aec7 	beq.w	800a510 <_strtod_l+0xa8>
 800a782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	2b28      	cmp	r3, #40	@ 0x28
 800a788:	d12e      	bne.n	800a7e8 <_strtod_l+0x380>
 800a78a:	4997      	ldr	r1, [pc, #604]	@ (800a9e8 <_strtod_l+0x580>)
 800a78c:	aa1c      	add	r2, sp, #112	@ 0x70
 800a78e:	a819      	add	r0, sp, #100	@ 0x64
 800a790:	f001 f9f6 	bl	800bb80 <__hexnan>
 800a794:	2805      	cmp	r0, #5
 800a796:	d127      	bne.n	800a7e8 <_strtod_l+0x380>
 800a798:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a79a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a79e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a7a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a7a6:	e698      	b.n	800a4da <_strtod_l+0x72>
 800a7a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a7aa:	fb08 2101 	mla	r1, r8, r1, r2
 800a7ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a7b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a7b4:	e7b5      	b.n	800a722 <_strtod_l+0x2ba>
 800a7b6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a7b8:	e7da      	b.n	800a770 <_strtod_l+0x308>
 800a7ba:	498c      	ldr	r1, [pc, #560]	@ (800a9ec <_strtod_l+0x584>)
 800a7bc:	a819      	add	r0, sp, #100	@ 0x64
 800a7be:	f001 f9cb 	bl	800bb58 <__match>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	f43f aea4 	beq.w	800a510 <_strtod_l+0xa8>
 800a7c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7ca:	4989      	ldr	r1, [pc, #548]	@ (800a9f0 <_strtod_l+0x588>)
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	a819      	add	r0, sp, #100	@ 0x64
 800a7d0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7d2:	f001 f9c1 	bl	800bb58 <__match>
 800a7d6:	b910      	cbnz	r0, 800a7de <_strtod_l+0x376>
 800a7d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7da:	3301      	adds	r3, #1
 800a7dc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a7de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aa00 <_strtod_l+0x598>
 800a7e2:	f04f 0a00 	mov.w	sl, #0
 800a7e6:	e678      	b.n	800a4da <_strtod_l+0x72>
 800a7e8:	4882      	ldr	r0, [pc, #520]	@ (800a9f4 <_strtod_l+0x58c>)
 800a7ea:	f000 fef1 	bl	800b5d0 <nan>
 800a7ee:	ec5b ab10 	vmov	sl, fp, d0
 800a7f2:	e672      	b.n	800a4da <_strtod_l+0x72>
 800a7f4:	eba8 0309 	sub.w	r3, r8, r9
 800a7f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a7fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7fc:	2f00      	cmp	r7, #0
 800a7fe:	bf08      	it	eq
 800a800:	462f      	moveq	r7, r5
 800a802:	2d10      	cmp	r5, #16
 800a804:	462c      	mov	r4, r5
 800a806:	bfa8      	it	ge
 800a808:	2410      	movge	r4, #16
 800a80a:	f7f5 fe9b 	bl	8000544 <__aeabi_ui2d>
 800a80e:	2d09      	cmp	r5, #9
 800a810:	4682      	mov	sl, r0
 800a812:	468b      	mov	fp, r1
 800a814:	dc13      	bgt.n	800a83e <_strtod_l+0x3d6>
 800a816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a818:	2b00      	cmp	r3, #0
 800a81a:	f43f ae5e 	beq.w	800a4da <_strtod_l+0x72>
 800a81e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a820:	dd78      	ble.n	800a914 <_strtod_l+0x4ac>
 800a822:	2b16      	cmp	r3, #22
 800a824:	dc5f      	bgt.n	800a8e6 <_strtod_l+0x47e>
 800a826:	4974      	ldr	r1, [pc, #464]	@ (800a9f8 <_strtod_l+0x590>)
 800a828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a82c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a830:	4652      	mov	r2, sl
 800a832:	465b      	mov	r3, fp
 800a834:	f7f5 ff00 	bl	8000638 <__aeabi_dmul>
 800a838:	4682      	mov	sl, r0
 800a83a:	468b      	mov	fp, r1
 800a83c:	e64d      	b.n	800a4da <_strtod_l+0x72>
 800a83e:	4b6e      	ldr	r3, [pc, #440]	@ (800a9f8 <_strtod_l+0x590>)
 800a840:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a844:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a848:	f7f5 fef6 	bl	8000638 <__aeabi_dmul>
 800a84c:	4682      	mov	sl, r0
 800a84e:	9808      	ldr	r0, [sp, #32]
 800a850:	468b      	mov	fp, r1
 800a852:	f7f5 fe77 	bl	8000544 <__aeabi_ui2d>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	4650      	mov	r0, sl
 800a85c:	4659      	mov	r1, fp
 800a85e:	f7f5 fd35 	bl	80002cc <__adddf3>
 800a862:	2d0f      	cmp	r5, #15
 800a864:	4682      	mov	sl, r0
 800a866:	468b      	mov	fp, r1
 800a868:	ddd5      	ble.n	800a816 <_strtod_l+0x3ae>
 800a86a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a86c:	1b2c      	subs	r4, r5, r4
 800a86e:	441c      	add	r4, r3
 800a870:	2c00      	cmp	r4, #0
 800a872:	f340 8096 	ble.w	800a9a2 <_strtod_l+0x53a>
 800a876:	f014 030f 	ands.w	r3, r4, #15
 800a87a:	d00a      	beq.n	800a892 <_strtod_l+0x42a>
 800a87c:	495e      	ldr	r1, [pc, #376]	@ (800a9f8 <_strtod_l+0x590>)
 800a87e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a882:	4652      	mov	r2, sl
 800a884:	465b      	mov	r3, fp
 800a886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a88a:	f7f5 fed5 	bl	8000638 <__aeabi_dmul>
 800a88e:	4682      	mov	sl, r0
 800a890:	468b      	mov	fp, r1
 800a892:	f034 040f 	bics.w	r4, r4, #15
 800a896:	d073      	beq.n	800a980 <_strtod_l+0x518>
 800a898:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a89c:	dd48      	ble.n	800a930 <_strtod_l+0x4c8>
 800a89e:	2400      	movs	r4, #0
 800a8a0:	46a0      	mov	r8, r4
 800a8a2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a8a4:	46a1      	mov	r9, r4
 800a8a6:	9a05      	ldr	r2, [sp, #20]
 800a8a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aa00 <_strtod_l+0x598>
 800a8ac:	2322      	movs	r3, #34	@ 0x22
 800a8ae:	6013      	str	r3, [r2, #0]
 800a8b0:	f04f 0a00 	mov.w	sl, #0
 800a8b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f43f ae0f 	beq.w	800a4da <_strtod_l+0x72>
 800a8bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8be:	9805      	ldr	r0, [sp, #20]
 800a8c0:	f7ff f942 	bl	8009b48 <_Bfree>
 800a8c4:	9805      	ldr	r0, [sp, #20]
 800a8c6:	4649      	mov	r1, r9
 800a8c8:	f7ff f93e 	bl	8009b48 <_Bfree>
 800a8cc:	9805      	ldr	r0, [sp, #20]
 800a8ce:	4641      	mov	r1, r8
 800a8d0:	f7ff f93a 	bl	8009b48 <_Bfree>
 800a8d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8d6:	9805      	ldr	r0, [sp, #20]
 800a8d8:	f7ff f936 	bl	8009b48 <_Bfree>
 800a8dc:	9805      	ldr	r0, [sp, #20]
 800a8de:	4621      	mov	r1, r4
 800a8e0:	f7ff f932 	bl	8009b48 <_Bfree>
 800a8e4:	e5f9      	b.n	800a4da <_strtod_l+0x72>
 800a8e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	dbbc      	blt.n	800a86a <_strtod_l+0x402>
 800a8f0:	4c41      	ldr	r4, [pc, #260]	@ (800a9f8 <_strtod_l+0x590>)
 800a8f2:	f1c5 050f 	rsb	r5, r5, #15
 800a8f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a8fa:	4652      	mov	r2, sl
 800a8fc:	465b      	mov	r3, fp
 800a8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a902:	f7f5 fe99 	bl	8000638 <__aeabi_dmul>
 800a906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a908:	1b5d      	subs	r5, r3, r5
 800a90a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a90e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a912:	e78f      	b.n	800a834 <_strtod_l+0x3cc>
 800a914:	3316      	adds	r3, #22
 800a916:	dba8      	blt.n	800a86a <_strtod_l+0x402>
 800a918:	4b37      	ldr	r3, [pc, #220]	@ (800a9f8 <_strtod_l+0x590>)
 800a91a:	eba9 0808 	sub.w	r8, r9, r8
 800a91e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a922:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a926:	4650      	mov	r0, sl
 800a928:	4659      	mov	r1, fp
 800a92a:	f7f5 ffaf 	bl	800088c <__aeabi_ddiv>
 800a92e:	e783      	b.n	800a838 <_strtod_l+0x3d0>
 800a930:	4b32      	ldr	r3, [pc, #200]	@ (800a9fc <_strtod_l+0x594>)
 800a932:	9308      	str	r3, [sp, #32]
 800a934:	2300      	movs	r3, #0
 800a936:	1124      	asrs	r4, r4, #4
 800a938:	4650      	mov	r0, sl
 800a93a:	4659      	mov	r1, fp
 800a93c:	461e      	mov	r6, r3
 800a93e:	2c01      	cmp	r4, #1
 800a940:	dc21      	bgt.n	800a986 <_strtod_l+0x51e>
 800a942:	b10b      	cbz	r3, 800a948 <_strtod_l+0x4e0>
 800a944:	4682      	mov	sl, r0
 800a946:	468b      	mov	fp, r1
 800a948:	492c      	ldr	r1, [pc, #176]	@ (800a9fc <_strtod_l+0x594>)
 800a94a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a94e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a952:	4652      	mov	r2, sl
 800a954:	465b      	mov	r3, fp
 800a956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a95a:	f7f5 fe6d 	bl	8000638 <__aeabi_dmul>
 800a95e:	4b28      	ldr	r3, [pc, #160]	@ (800aa00 <_strtod_l+0x598>)
 800a960:	460a      	mov	r2, r1
 800a962:	400b      	ands	r3, r1
 800a964:	4927      	ldr	r1, [pc, #156]	@ (800aa04 <_strtod_l+0x59c>)
 800a966:	428b      	cmp	r3, r1
 800a968:	4682      	mov	sl, r0
 800a96a:	d898      	bhi.n	800a89e <_strtod_l+0x436>
 800a96c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a970:	428b      	cmp	r3, r1
 800a972:	bf86      	itte	hi
 800a974:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aa08 <_strtod_l+0x5a0>
 800a978:	f04f 3aff 	movhi.w	sl, #4294967295
 800a97c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a980:	2300      	movs	r3, #0
 800a982:	9308      	str	r3, [sp, #32]
 800a984:	e07a      	b.n	800aa7c <_strtod_l+0x614>
 800a986:	07e2      	lsls	r2, r4, #31
 800a988:	d505      	bpl.n	800a996 <_strtod_l+0x52e>
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a990:	f7f5 fe52 	bl	8000638 <__aeabi_dmul>
 800a994:	2301      	movs	r3, #1
 800a996:	9a08      	ldr	r2, [sp, #32]
 800a998:	3208      	adds	r2, #8
 800a99a:	3601      	adds	r6, #1
 800a99c:	1064      	asrs	r4, r4, #1
 800a99e:	9208      	str	r2, [sp, #32]
 800a9a0:	e7cd      	b.n	800a93e <_strtod_l+0x4d6>
 800a9a2:	d0ed      	beq.n	800a980 <_strtod_l+0x518>
 800a9a4:	4264      	negs	r4, r4
 800a9a6:	f014 020f 	ands.w	r2, r4, #15
 800a9aa:	d00a      	beq.n	800a9c2 <_strtod_l+0x55a>
 800a9ac:	4b12      	ldr	r3, [pc, #72]	@ (800a9f8 <_strtod_l+0x590>)
 800a9ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a9b2:	4650      	mov	r0, sl
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ba:	f7f5 ff67 	bl	800088c <__aeabi_ddiv>
 800a9be:	4682      	mov	sl, r0
 800a9c0:	468b      	mov	fp, r1
 800a9c2:	1124      	asrs	r4, r4, #4
 800a9c4:	d0dc      	beq.n	800a980 <_strtod_l+0x518>
 800a9c6:	2c1f      	cmp	r4, #31
 800a9c8:	dd20      	ble.n	800aa0c <_strtod_l+0x5a4>
 800a9ca:	2400      	movs	r4, #0
 800a9cc:	46a0      	mov	r8, r4
 800a9ce:	940a      	str	r4, [sp, #40]	@ 0x28
 800a9d0:	46a1      	mov	r9, r4
 800a9d2:	9a05      	ldr	r2, [sp, #20]
 800a9d4:	2322      	movs	r3, #34	@ 0x22
 800a9d6:	f04f 0a00 	mov.w	sl, #0
 800a9da:	f04f 0b00 	mov.w	fp, #0
 800a9de:	6013      	str	r3, [r2, #0]
 800a9e0:	e768      	b.n	800a8b4 <_strtod_l+0x44c>
 800a9e2:	bf00      	nop
 800a9e4:	0800c37d 	.word	0x0800c37d
 800a9e8:	0800c594 	.word	0x0800c594
 800a9ec:	0800c375 	.word	0x0800c375
 800a9f0:	0800c3ac 	.word	0x0800c3ac
 800a9f4:	0800c73d 	.word	0x0800c73d
 800a9f8:	0800c4c8 	.word	0x0800c4c8
 800a9fc:	0800c4a0 	.word	0x0800c4a0
 800aa00:	7ff00000 	.word	0x7ff00000
 800aa04:	7ca00000 	.word	0x7ca00000
 800aa08:	7fefffff 	.word	0x7fefffff
 800aa0c:	f014 0310 	ands.w	r3, r4, #16
 800aa10:	bf18      	it	ne
 800aa12:	236a      	movne	r3, #106	@ 0x6a
 800aa14:	4ea9      	ldr	r6, [pc, #676]	@ (800acbc <_strtod_l+0x854>)
 800aa16:	9308      	str	r3, [sp, #32]
 800aa18:	4650      	mov	r0, sl
 800aa1a:	4659      	mov	r1, fp
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	07e2      	lsls	r2, r4, #31
 800aa20:	d504      	bpl.n	800aa2c <_strtod_l+0x5c4>
 800aa22:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa26:	f7f5 fe07 	bl	8000638 <__aeabi_dmul>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	1064      	asrs	r4, r4, #1
 800aa2e:	f106 0608 	add.w	r6, r6, #8
 800aa32:	d1f4      	bne.n	800aa1e <_strtod_l+0x5b6>
 800aa34:	b10b      	cbz	r3, 800aa3a <_strtod_l+0x5d2>
 800aa36:	4682      	mov	sl, r0
 800aa38:	468b      	mov	fp, r1
 800aa3a:	9b08      	ldr	r3, [sp, #32]
 800aa3c:	b1b3      	cbz	r3, 800aa6c <_strtod_l+0x604>
 800aa3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aa42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	4659      	mov	r1, fp
 800aa4a:	dd0f      	ble.n	800aa6c <_strtod_l+0x604>
 800aa4c:	2b1f      	cmp	r3, #31
 800aa4e:	dd55      	ble.n	800aafc <_strtod_l+0x694>
 800aa50:	2b34      	cmp	r3, #52	@ 0x34
 800aa52:	bfde      	ittt	le
 800aa54:	f04f 33ff 	movle.w	r3, #4294967295
 800aa58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aa5c:	4093      	lslle	r3, r2
 800aa5e:	f04f 0a00 	mov.w	sl, #0
 800aa62:	bfcc      	ite	gt
 800aa64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aa68:	ea03 0b01 	andle.w	fp, r3, r1
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	2300      	movs	r3, #0
 800aa70:	4650      	mov	r0, sl
 800aa72:	4659      	mov	r1, fp
 800aa74:	f7f6 f848 	bl	8000b08 <__aeabi_dcmpeq>
 800aa78:	2800      	cmp	r0, #0
 800aa7a:	d1a6      	bne.n	800a9ca <_strtod_l+0x562>
 800aa7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aa82:	9805      	ldr	r0, [sp, #20]
 800aa84:	462b      	mov	r3, r5
 800aa86:	463a      	mov	r2, r7
 800aa88:	f7ff f8c6 	bl	8009c18 <__s2b>
 800aa8c:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	f43f af05 	beq.w	800a89e <_strtod_l+0x436>
 800aa94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa96:	2a00      	cmp	r2, #0
 800aa98:	eba9 0308 	sub.w	r3, r9, r8
 800aa9c:	bfa8      	it	ge
 800aa9e:	2300      	movge	r3, #0
 800aaa0:	9312      	str	r3, [sp, #72]	@ 0x48
 800aaa2:	2400      	movs	r4, #0
 800aaa4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800aaa8:	9316      	str	r3, [sp, #88]	@ 0x58
 800aaaa:	46a0      	mov	r8, r4
 800aaac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaae:	9805      	ldr	r0, [sp, #20]
 800aab0:	6859      	ldr	r1, [r3, #4]
 800aab2:	f7ff f809 	bl	8009ac8 <_Balloc>
 800aab6:	4681      	mov	r9, r0
 800aab8:	2800      	cmp	r0, #0
 800aaba:	f43f aef4 	beq.w	800a8a6 <_strtod_l+0x43e>
 800aabe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aac0:	691a      	ldr	r2, [r3, #16]
 800aac2:	3202      	adds	r2, #2
 800aac4:	f103 010c 	add.w	r1, r3, #12
 800aac8:	0092      	lsls	r2, r2, #2
 800aaca:	300c      	adds	r0, #12
 800aacc:	f000 fd72 	bl	800b5b4 <memcpy>
 800aad0:	ec4b ab10 	vmov	d0, sl, fp
 800aad4:	9805      	ldr	r0, [sp, #20]
 800aad6:	aa1c      	add	r2, sp, #112	@ 0x70
 800aad8:	a91b      	add	r1, sp, #108	@ 0x6c
 800aada:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800aade:	f7ff fbd7 	bl	800a290 <__d2b>
 800aae2:	901a      	str	r0, [sp, #104]	@ 0x68
 800aae4:	2800      	cmp	r0, #0
 800aae6:	f43f aede 	beq.w	800a8a6 <_strtod_l+0x43e>
 800aaea:	9805      	ldr	r0, [sp, #20]
 800aaec:	2101      	movs	r1, #1
 800aaee:	f7ff f929 	bl	8009d44 <__i2b>
 800aaf2:	4680      	mov	r8, r0
 800aaf4:	b948      	cbnz	r0, 800ab0a <_strtod_l+0x6a2>
 800aaf6:	f04f 0800 	mov.w	r8, #0
 800aafa:	e6d4      	b.n	800a8a6 <_strtod_l+0x43e>
 800aafc:	f04f 32ff 	mov.w	r2, #4294967295
 800ab00:	fa02 f303 	lsl.w	r3, r2, r3
 800ab04:	ea03 0a0a 	and.w	sl, r3, sl
 800ab08:	e7b0      	b.n	800aa6c <_strtod_l+0x604>
 800ab0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ab0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	bfab      	itete	ge
 800ab12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ab14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ab16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ab18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ab1a:	bfac      	ite	ge
 800ab1c:	18ef      	addge	r7, r5, r3
 800ab1e:	1b5e      	sublt	r6, r3, r5
 800ab20:	9b08      	ldr	r3, [sp, #32]
 800ab22:	1aed      	subs	r5, r5, r3
 800ab24:	4415      	add	r5, r2
 800ab26:	4b66      	ldr	r3, [pc, #408]	@ (800acc0 <_strtod_l+0x858>)
 800ab28:	3d01      	subs	r5, #1
 800ab2a:	429d      	cmp	r5, r3
 800ab2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ab30:	da50      	bge.n	800abd4 <_strtod_l+0x76c>
 800ab32:	1b5b      	subs	r3, r3, r5
 800ab34:	2b1f      	cmp	r3, #31
 800ab36:	eba2 0203 	sub.w	r2, r2, r3
 800ab3a:	f04f 0101 	mov.w	r1, #1
 800ab3e:	dc3d      	bgt.n	800abbc <_strtod_l+0x754>
 800ab40:	fa01 f303 	lsl.w	r3, r1, r3
 800ab44:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab46:	2300      	movs	r3, #0
 800ab48:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab4a:	18bd      	adds	r5, r7, r2
 800ab4c:	9b08      	ldr	r3, [sp, #32]
 800ab4e:	42af      	cmp	r7, r5
 800ab50:	4416      	add	r6, r2
 800ab52:	441e      	add	r6, r3
 800ab54:	463b      	mov	r3, r7
 800ab56:	bfa8      	it	ge
 800ab58:	462b      	movge	r3, r5
 800ab5a:	42b3      	cmp	r3, r6
 800ab5c:	bfa8      	it	ge
 800ab5e:	4633      	movge	r3, r6
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bfc2      	ittt	gt
 800ab64:	1aed      	subgt	r5, r5, r3
 800ab66:	1af6      	subgt	r6, r6, r3
 800ab68:	1aff      	subgt	r7, r7, r3
 800ab6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	dd16      	ble.n	800ab9e <_strtod_l+0x736>
 800ab70:	4641      	mov	r1, r8
 800ab72:	9805      	ldr	r0, [sp, #20]
 800ab74:	461a      	mov	r2, r3
 800ab76:	f7ff f9a5 	bl	8009ec4 <__pow5mult>
 800ab7a:	4680      	mov	r8, r0
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	d0ba      	beq.n	800aaf6 <_strtod_l+0x68e>
 800ab80:	4601      	mov	r1, r0
 800ab82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ab84:	9805      	ldr	r0, [sp, #20]
 800ab86:	f7ff f8f3 	bl	8009d70 <__multiply>
 800ab8a:	900e      	str	r0, [sp, #56]	@ 0x38
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	f43f ae8a 	beq.w	800a8a6 <_strtod_l+0x43e>
 800ab92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab94:	9805      	ldr	r0, [sp, #20]
 800ab96:	f7fe ffd7 	bl	8009b48 <_Bfree>
 800ab9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab9c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	dc1d      	bgt.n	800abde <_strtod_l+0x776>
 800aba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	dd23      	ble.n	800abf0 <_strtod_l+0x788>
 800aba8:	4649      	mov	r1, r9
 800abaa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800abac:	9805      	ldr	r0, [sp, #20]
 800abae:	f7ff f989 	bl	8009ec4 <__pow5mult>
 800abb2:	4681      	mov	r9, r0
 800abb4:	b9e0      	cbnz	r0, 800abf0 <_strtod_l+0x788>
 800abb6:	f04f 0900 	mov.w	r9, #0
 800abba:	e674      	b.n	800a8a6 <_strtod_l+0x43e>
 800abbc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800abc0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800abc4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800abc8:	35e2      	adds	r5, #226	@ 0xe2
 800abca:	fa01 f305 	lsl.w	r3, r1, r5
 800abce:	9310      	str	r3, [sp, #64]	@ 0x40
 800abd0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800abd2:	e7ba      	b.n	800ab4a <_strtod_l+0x6e2>
 800abd4:	2300      	movs	r3, #0
 800abd6:	9310      	str	r3, [sp, #64]	@ 0x40
 800abd8:	2301      	movs	r3, #1
 800abda:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abdc:	e7b5      	b.n	800ab4a <_strtod_l+0x6e2>
 800abde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800abe0:	9805      	ldr	r0, [sp, #20]
 800abe2:	462a      	mov	r2, r5
 800abe4:	f7ff f9c8 	bl	8009f78 <__lshift>
 800abe8:	901a      	str	r0, [sp, #104]	@ 0x68
 800abea:	2800      	cmp	r0, #0
 800abec:	d1d9      	bne.n	800aba2 <_strtod_l+0x73a>
 800abee:	e65a      	b.n	800a8a6 <_strtod_l+0x43e>
 800abf0:	2e00      	cmp	r6, #0
 800abf2:	dd07      	ble.n	800ac04 <_strtod_l+0x79c>
 800abf4:	4649      	mov	r1, r9
 800abf6:	9805      	ldr	r0, [sp, #20]
 800abf8:	4632      	mov	r2, r6
 800abfa:	f7ff f9bd 	bl	8009f78 <__lshift>
 800abfe:	4681      	mov	r9, r0
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d0d8      	beq.n	800abb6 <_strtod_l+0x74e>
 800ac04:	2f00      	cmp	r7, #0
 800ac06:	dd08      	ble.n	800ac1a <_strtod_l+0x7b2>
 800ac08:	4641      	mov	r1, r8
 800ac0a:	9805      	ldr	r0, [sp, #20]
 800ac0c:	463a      	mov	r2, r7
 800ac0e:	f7ff f9b3 	bl	8009f78 <__lshift>
 800ac12:	4680      	mov	r8, r0
 800ac14:	2800      	cmp	r0, #0
 800ac16:	f43f ae46 	beq.w	800a8a6 <_strtod_l+0x43e>
 800ac1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac1c:	9805      	ldr	r0, [sp, #20]
 800ac1e:	464a      	mov	r2, r9
 800ac20:	f7ff fa32 	bl	800a088 <__mdiff>
 800ac24:	4604      	mov	r4, r0
 800ac26:	2800      	cmp	r0, #0
 800ac28:	f43f ae3d 	beq.w	800a8a6 <_strtod_l+0x43e>
 800ac2c:	68c3      	ldr	r3, [r0, #12]
 800ac2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ac30:	2300      	movs	r3, #0
 800ac32:	60c3      	str	r3, [r0, #12]
 800ac34:	4641      	mov	r1, r8
 800ac36:	f7ff fa0b 	bl	800a050 <__mcmp>
 800ac3a:	2800      	cmp	r0, #0
 800ac3c:	da46      	bge.n	800accc <_strtod_l+0x864>
 800ac3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac40:	ea53 030a 	orrs.w	r3, r3, sl
 800ac44:	d16c      	bne.n	800ad20 <_strtod_l+0x8b8>
 800ac46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d168      	bne.n	800ad20 <_strtod_l+0x8b8>
 800ac4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac52:	0d1b      	lsrs	r3, r3, #20
 800ac54:	051b      	lsls	r3, r3, #20
 800ac56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac5a:	d961      	bls.n	800ad20 <_strtod_l+0x8b8>
 800ac5c:	6963      	ldr	r3, [r4, #20]
 800ac5e:	b913      	cbnz	r3, 800ac66 <_strtod_l+0x7fe>
 800ac60:	6923      	ldr	r3, [r4, #16]
 800ac62:	2b01      	cmp	r3, #1
 800ac64:	dd5c      	ble.n	800ad20 <_strtod_l+0x8b8>
 800ac66:	4621      	mov	r1, r4
 800ac68:	2201      	movs	r2, #1
 800ac6a:	9805      	ldr	r0, [sp, #20]
 800ac6c:	f7ff f984 	bl	8009f78 <__lshift>
 800ac70:	4641      	mov	r1, r8
 800ac72:	4604      	mov	r4, r0
 800ac74:	f7ff f9ec 	bl	800a050 <__mcmp>
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	dd51      	ble.n	800ad20 <_strtod_l+0x8b8>
 800ac7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac80:	9a08      	ldr	r2, [sp, #32]
 800ac82:	0d1b      	lsrs	r3, r3, #20
 800ac84:	051b      	lsls	r3, r3, #20
 800ac86:	2a00      	cmp	r2, #0
 800ac88:	d06b      	beq.n	800ad62 <_strtod_l+0x8fa>
 800ac8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ac8e:	d868      	bhi.n	800ad62 <_strtod_l+0x8fa>
 800ac90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ac94:	f67f ae9d 	bls.w	800a9d2 <_strtod_l+0x56a>
 800ac98:	4b0a      	ldr	r3, [pc, #40]	@ (800acc4 <_strtod_l+0x85c>)
 800ac9a:	4650      	mov	r0, sl
 800ac9c:	4659      	mov	r1, fp
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f7f5 fcca 	bl	8000638 <__aeabi_dmul>
 800aca4:	4b08      	ldr	r3, [pc, #32]	@ (800acc8 <_strtod_l+0x860>)
 800aca6:	400b      	ands	r3, r1
 800aca8:	4682      	mov	sl, r0
 800acaa:	468b      	mov	fp, r1
 800acac:	2b00      	cmp	r3, #0
 800acae:	f47f ae05 	bne.w	800a8bc <_strtod_l+0x454>
 800acb2:	9a05      	ldr	r2, [sp, #20]
 800acb4:	2322      	movs	r3, #34	@ 0x22
 800acb6:	6013      	str	r3, [r2, #0]
 800acb8:	e600      	b.n	800a8bc <_strtod_l+0x454>
 800acba:	bf00      	nop
 800acbc:	0800c5c0 	.word	0x0800c5c0
 800acc0:	fffffc02 	.word	0xfffffc02
 800acc4:	39500000 	.word	0x39500000
 800acc8:	7ff00000 	.word	0x7ff00000
 800accc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800acd0:	d165      	bne.n	800ad9e <_strtod_l+0x936>
 800acd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800acd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acd8:	b35a      	cbz	r2, 800ad32 <_strtod_l+0x8ca>
 800acda:	4a9f      	ldr	r2, [pc, #636]	@ (800af58 <_strtod_l+0xaf0>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d12b      	bne.n	800ad38 <_strtod_l+0x8d0>
 800ace0:	9b08      	ldr	r3, [sp, #32]
 800ace2:	4651      	mov	r1, sl
 800ace4:	b303      	cbz	r3, 800ad28 <_strtod_l+0x8c0>
 800ace6:	4b9d      	ldr	r3, [pc, #628]	@ (800af5c <_strtod_l+0xaf4>)
 800ace8:	465a      	mov	r2, fp
 800acea:	4013      	ands	r3, r2
 800acec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800acf0:	f04f 32ff 	mov.w	r2, #4294967295
 800acf4:	d81b      	bhi.n	800ad2e <_strtod_l+0x8c6>
 800acf6:	0d1b      	lsrs	r3, r3, #20
 800acf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800acfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ad00:	4299      	cmp	r1, r3
 800ad02:	d119      	bne.n	800ad38 <_strtod_l+0x8d0>
 800ad04:	4b96      	ldr	r3, [pc, #600]	@ (800af60 <_strtod_l+0xaf8>)
 800ad06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d102      	bne.n	800ad12 <_strtod_l+0x8aa>
 800ad0c:	3101      	adds	r1, #1
 800ad0e:	f43f adca 	beq.w	800a8a6 <_strtod_l+0x43e>
 800ad12:	4b92      	ldr	r3, [pc, #584]	@ (800af5c <_strtod_l+0xaf4>)
 800ad14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad16:	401a      	ands	r2, r3
 800ad18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ad1c:	f04f 0a00 	mov.w	sl, #0
 800ad20:	9b08      	ldr	r3, [sp, #32]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d1b8      	bne.n	800ac98 <_strtod_l+0x830>
 800ad26:	e5c9      	b.n	800a8bc <_strtod_l+0x454>
 800ad28:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2c:	e7e8      	b.n	800ad00 <_strtod_l+0x898>
 800ad2e:	4613      	mov	r3, r2
 800ad30:	e7e6      	b.n	800ad00 <_strtod_l+0x898>
 800ad32:	ea53 030a 	orrs.w	r3, r3, sl
 800ad36:	d0a1      	beq.n	800ac7c <_strtod_l+0x814>
 800ad38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad3a:	b1db      	cbz	r3, 800ad74 <_strtod_l+0x90c>
 800ad3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad3e:	4213      	tst	r3, r2
 800ad40:	d0ee      	beq.n	800ad20 <_strtod_l+0x8b8>
 800ad42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad44:	9a08      	ldr	r2, [sp, #32]
 800ad46:	4650      	mov	r0, sl
 800ad48:	4659      	mov	r1, fp
 800ad4a:	b1bb      	cbz	r3, 800ad7c <_strtod_l+0x914>
 800ad4c:	f7ff fb6e 	bl	800a42c <sulp>
 800ad50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad54:	ec53 2b10 	vmov	r2, r3, d0
 800ad58:	f7f5 fab8 	bl	80002cc <__adddf3>
 800ad5c:	4682      	mov	sl, r0
 800ad5e:	468b      	mov	fp, r1
 800ad60:	e7de      	b.n	800ad20 <_strtod_l+0x8b8>
 800ad62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ad66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad6e:	f04f 3aff 	mov.w	sl, #4294967295
 800ad72:	e7d5      	b.n	800ad20 <_strtod_l+0x8b8>
 800ad74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ad76:	ea13 0f0a 	tst.w	r3, sl
 800ad7a:	e7e1      	b.n	800ad40 <_strtod_l+0x8d8>
 800ad7c:	f7ff fb56 	bl	800a42c <sulp>
 800ad80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ad84:	ec53 2b10 	vmov	r2, r3, d0
 800ad88:	f7f5 fa9e 	bl	80002c8 <__aeabi_dsub>
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	2300      	movs	r3, #0
 800ad90:	4682      	mov	sl, r0
 800ad92:	468b      	mov	fp, r1
 800ad94:	f7f5 feb8 	bl	8000b08 <__aeabi_dcmpeq>
 800ad98:	2800      	cmp	r0, #0
 800ad9a:	d0c1      	beq.n	800ad20 <_strtod_l+0x8b8>
 800ad9c:	e619      	b.n	800a9d2 <_strtod_l+0x56a>
 800ad9e:	4641      	mov	r1, r8
 800ada0:	4620      	mov	r0, r4
 800ada2:	f7ff facd 	bl	800a340 <__ratio>
 800ada6:	ec57 6b10 	vmov	r6, r7, d0
 800adaa:	2200      	movs	r2, #0
 800adac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800adb0:	4630      	mov	r0, r6
 800adb2:	4639      	mov	r1, r7
 800adb4:	f7f5 febc 	bl	8000b30 <__aeabi_dcmple>
 800adb8:	2800      	cmp	r0, #0
 800adba:	d06f      	beq.n	800ae9c <_strtod_l+0xa34>
 800adbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d17a      	bne.n	800aeb8 <_strtod_l+0xa50>
 800adc2:	f1ba 0f00 	cmp.w	sl, #0
 800adc6:	d158      	bne.n	800ae7a <_strtod_l+0xa12>
 800adc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800adca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adce:	2b00      	cmp	r3, #0
 800add0:	d15a      	bne.n	800ae88 <_strtod_l+0xa20>
 800add2:	4b64      	ldr	r3, [pc, #400]	@ (800af64 <_strtod_l+0xafc>)
 800add4:	2200      	movs	r2, #0
 800add6:	4630      	mov	r0, r6
 800add8:	4639      	mov	r1, r7
 800adda:	f7f5 fe9f 	bl	8000b1c <__aeabi_dcmplt>
 800adde:	2800      	cmp	r0, #0
 800ade0:	d159      	bne.n	800ae96 <_strtod_l+0xa2e>
 800ade2:	4630      	mov	r0, r6
 800ade4:	4639      	mov	r1, r7
 800ade6:	4b60      	ldr	r3, [pc, #384]	@ (800af68 <_strtod_l+0xb00>)
 800ade8:	2200      	movs	r2, #0
 800adea:	f7f5 fc25 	bl	8000638 <__aeabi_dmul>
 800adee:	4606      	mov	r6, r0
 800adf0:	460f      	mov	r7, r1
 800adf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800adf6:	9606      	str	r6, [sp, #24]
 800adf8:	9307      	str	r3, [sp, #28]
 800adfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800adfe:	4d57      	ldr	r5, [pc, #348]	@ (800af5c <_strtod_l+0xaf4>)
 800ae00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae06:	401d      	ands	r5, r3
 800ae08:	4b58      	ldr	r3, [pc, #352]	@ (800af6c <_strtod_l+0xb04>)
 800ae0a:	429d      	cmp	r5, r3
 800ae0c:	f040 80b2 	bne.w	800af74 <_strtod_l+0xb0c>
 800ae10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ae16:	ec4b ab10 	vmov	d0, sl, fp
 800ae1a:	f7ff f9c9 	bl	800a1b0 <__ulp>
 800ae1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae22:	ec51 0b10 	vmov	r0, r1, d0
 800ae26:	f7f5 fc07 	bl	8000638 <__aeabi_dmul>
 800ae2a:	4652      	mov	r2, sl
 800ae2c:	465b      	mov	r3, fp
 800ae2e:	f7f5 fa4d 	bl	80002cc <__adddf3>
 800ae32:	460b      	mov	r3, r1
 800ae34:	4949      	ldr	r1, [pc, #292]	@ (800af5c <_strtod_l+0xaf4>)
 800ae36:	4a4e      	ldr	r2, [pc, #312]	@ (800af70 <_strtod_l+0xb08>)
 800ae38:	4019      	ands	r1, r3
 800ae3a:	4291      	cmp	r1, r2
 800ae3c:	4682      	mov	sl, r0
 800ae3e:	d942      	bls.n	800aec6 <_strtod_l+0xa5e>
 800ae40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ae42:	4b47      	ldr	r3, [pc, #284]	@ (800af60 <_strtod_l+0xaf8>)
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d103      	bne.n	800ae50 <_strtod_l+0x9e8>
 800ae48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	f43f ad2b 	beq.w	800a8a6 <_strtod_l+0x43e>
 800ae50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800af60 <_strtod_l+0xaf8>
 800ae54:	f04f 3aff 	mov.w	sl, #4294967295
 800ae58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae5a:	9805      	ldr	r0, [sp, #20]
 800ae5c:	f7fe fe74 	bl	8009b48 <_Bfree>
 800ae60:	9805      	ldr	r0, [sp, #20]
 800ae62:	4649      	mov	r1, r9
 800ae64:	f7fe fe70 	bl	8009b48 <_Bfree>
 800ae68:	9805      	ldr	r0, [sp, #20]
 800ae6a:	4641      	mov	r1, r8
 800ae6c:	f7fe fe6c 	bl	8009b48 <_Bfree>
 800ae70:	9805      	ldr	r0, [sp, #20]
 800ae72:	4621      	mov	r1, r4
 800ae74:	f7fe fe68 	bl	8009b48 <_Bfree>
 800ae78:	e618      	b.n	800aaac <_strtod_l+0x644>
 800ae7a:	f1ba 0f01 	cmp.w	sl, #1
 800ae7e:	d103      	bne.n	800ae88 <_strtod_l+0xa20>
 800ae80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	f43f ada5 	beq.w	800a9d2 <_strtod_l+0x56a>
 800ae88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800af38 <_strtod_l+0xad0>
 800ae8c:	4f35      	ldr	r7, [pc, #212]	@ (800af64 <_strtod_l+0xafc>)
 800ae8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ae92:	2600      	movs	r6, #0
 800ae94:	e7b1      	b.n	800adfa <_strtod_l+0x992>
 800ae96:	4f34      	ldr	r7, [pc, #208]	@ (800af68 <_strtod_l+0xb00>)
 800ae98:	2600      	movs	r6, #0
 800ae9a:	e7aa      	b.n	800adf2 <_strtod_l+0x98a>
 800ae9c:	4b32      	ldr	r3, [pc, #200]	@ (800af68 <_strtod_l+0xb00>)
 800ae9e:	4630      	mov	r0, r6
 800aea0:	4639      	mov	r1, r7
 800aea2:	2200      	movs	r2, #0
 800aea4:	f7f5 fbc8 	bl	8000638 <__aeabi_dmul>
 800aea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aeaa:	4606      	mov	r6, r0
 800aeac:	460f      	mov	r7, r1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d09f      	beq.n	800adf2 <_strtod_l+0x98a>
 800aeb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aeb6:	e7a0      	b.n	800adfa <_strtod_l+0x992>
 800aeb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800af40 <_strtod_l+0xad8>
 800aebc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aec0:	ec57 6b17 	vmov	r6, r7, d7
 800aec4:	e799      	b.n	800adfa <_strtod_l+0x992>
 800aec6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aeca:	9b08      	ldr	r3, [sp, #32]
 800aecc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1c1      	bne.n	800ae58 <_strtod_l+0x9f0>
 800aed4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aed8:	0d1b      	lsrs	r3, r3, #20
 800aeda:	051b      	lsls	r3, r3, #20
 800aedc:	429d      	cmp	r5, r3
 800aede:	d1bb      	bne.n	800ae58 <_strtod_l+0x9f0>
 800aee0:	4630      	mov	r0, r6
 800aee2:	4639      	mov	r1, r7
 800aee4:	f7f5 ff08 	bl	8000cf8 <__aeabi_d2lz>
 800aee8:	f7f5 fb78 	bl	80005dc <__aeabi_l2d>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4630      	mov	r0, r6
 800aef2:	4639      	mov	r1, r7
 800aef4:	f7f5 f9e8 	bl	80002c8 <__aeabi_dsub>
 800aef8:	460b      	mov	r3, r1
 800aefa:	4602      	mov	r2, r0
 800aefc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800af04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af06:	ea46 060a 	orr.w	r6, r6, sl
 800af0a:	431e      	orrs	r6, r3
 800af0c:	d06f      	beq.n	800afee <_strtod_l+0xb86>
 800af0e:	a30e      	add	r3, pc, #56	@ (adr r3, 800af48 <_strtod_l+0xae0>)
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	f7f5 fe02 	bl	8000b1c <__aeabi_dcmplt>
 800af18:	2800      	cmp	r0, #0
 800af1a:	f47f accf 	bne.w	800a8bc <_strtod_l+0x454>
 800af1e:	a30c      	add	r3, pc, #48	@ (adr r3, 800af50 <_strtod_l+0xae8>)
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af28:	f7f5 fe16 	bl	8000b58 <__aeabi_dcmpgt>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d093      	beq.n	800ae58 <_strtod_l+0x9f0>
 800af30:	e4c4      	b.n	800a8bc <_strtod_l+0x454>
 800af32:	bf00      	nop
 800af34:	f3af 8000 	nop.w
 800af38:	00000000 	.word	0x00000000
 800af3c:	bff00000 	.word	0xbff00000
 800af40:	00000000 	.word	0x00000000
 800af44:	3ff00000 	.word	0x3ff00000
 800af48:	94a03595 	.word	0x94a03595
 800af4c:	3fdfffff 	.word	0x3fdfffff
 800af50:	35afe535 	.word	0x35afe535
 800af54:	3fe00000 	.word	0x3fe00000
 800af58:	000fffff 	.word	0x000fffff
 800af5c:	7ff00000 	.word	0x7ff00000
 800af60:	7fefffff 	.word	0x7fefffff
 800af64:	3ff00000 	.word	0x3ff00000
 800af68:	3fe00000 	.word	0x3fe00000
 800af6c:	7fe00000 	.word	0x7fe00000
 800af70:	7c9fffff 	.word	0x7c9fffff
 800af74:	9b08      	ldr	r3, [sp, #32]
 800af76:	b323      	cbz	r3, 800afc2 <_strtod_l+0xb5a>
 800af78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800af7c:	d821      	bhi.n	800afc2 <_strtod_l+0xb5a>
 800af7e:	a328      	add	r3, pc, #160	@ (adr r3, 800b020 <_strtod_l+0xbb8>)
 800af80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af84:	4630      	mov	r0, r6
 800af86:	4639      	mov	r1, r7
 800af88:	f7f5 fdd2 	bl	8000b30 <__aeabi_dcmple>
 800af8c:	b1a0      	cbz	r0, 800afb8 <_strtod_l+0xb50>
 800af8e:	4639      	mov	r1, r7
 800af90:	4630      	mov	r0, r6
 800af92:	f7f5 fe29 	bl	8000be8 <__aeabi_d2uiz>
 800af96:	2801      	cmp	r0, #1
 800af98:	bf38      	it	cc
 800af9a:	2001      	movcc	r0, #1
 800af9c:	f7f5 fad2 	bl	8000544 <__aeabi_ui2d>
 800afa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afa2:	4606      	mov	r6, r0
 800afa4:	460f      	mov	r7, r1
 800afa6:	b9fb      	cbnz	r3, 800afe8 <_strtod_l+0xb80>
 800afa8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800afac:	9014      	str	r0, [sp, #80]	@ 0x50
 800afae:	9315      	str	r3, [sp, #84]	@ 0x54
 800afb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800afb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800afb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800afba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800afbe:	1b5b      	subs	r3, r3, r5
 800afc0:	9311      	str	r3, [sp, #68]	@ 0x44
 800afc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800afc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800afca:	f7ff f8f1 	bl	800a1b0 <__ulp>
 800afce:	4650      	mov	r0, sl
 800afd0:	ec53 2b10 	vmov	r2, r3, d0
 800afd4:	4659      	mov	r1, fp
 800afd6:	f7f5 fb2f 	bl	8000638 <__aeabi_dmul>
 800afda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800afde:	f7f5 f975 	bl	80002cc <__adddf3>
 800afe2:	4682      	mov	sl, r0
 800afe4:	468b      	mov	fp, r1
 800afe6:	e770      	b.n	800aeca <_strtod_l+0xa62>
 800afe8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800afec:	e7e0      	b.n	800afb0 <_strtod_l+0xb48>
 800afee:	a30e      	add	r3, pc, #56	@ (adr r3, 800b028 <_strtod_l+0xbc0>)
 800aff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff4:	f7f5 fd92 	bl	8000b1c <__aeabi_dcmplt>
 800aff8:	e798      	b.n	800af2c <_strtod_l+0xac4>
 800affa:	2300      	movs	r3, #0
 800affc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800affe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b002:	6013      	str	r3, [r2, #0]
 800b004:	f7ff ba6d 	b.w	800a4e2 <_strtod_l+0x7a>
 800b008:	2a65      	cmp	r2, #101	@ 0x65
 800b00a:	f43f ab66 	beq.w	800a6da <_strtod_l+0x272>
 800b00e:	2a45      	cmp	r2, #69	@ 0x45
 800b010:	f43f ab63 	beq.w	800a6da <_strtod_l+0x272>
 800b014:	2301      	movs	r3, #1
 800b016:	f7ff bb9e 	b.w	800a756 <_strtod_l+0x2ee>
 800b01a:	bf00      	nop
 800b01c:	f3af 8000 	nop.w
 800b020:	ffc00000 	.word	0xffc00000
 800b024:	41dfffff 	.word	0x41dfffff
 800b028:	94a03595 	.word	0x94a03595
 800b02c:	3fcfffff 	.word	0x3fcfffff

0800b030 <_strtod_r>:
 800b030:	4b01      	ldr	r3, [pc, #4]	@ (800b038 <_strtod_r+0x8>)
 800b032:	f7ff ba19 	b.w	800a468 <_strtod_l>
 800b036:	bf00      	nop
 800b038:	2000007c 	.word	0x2000007c

0800b03c <_strtol_l.constprop.0>:
 800b03c:	2b24      	cmp	r3, #36	@ 0x24
 800b03e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b042:	4686      	mov	lr, r0
 800b044:	4690      	mov	r8, r2
 800b046:	d801      	bhi.n	800b04c <_strtol_l.constprop.0+0x10>
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d106      	bne.n	800b05a <_strtol_l.constprop.0+0x1e>
 800b04c:	f7fd fdbc 	bl	8008bc8 <__errno>
 800b050:	2316      	movs	r3, #22
 800b052:	6003      	str	r3, [r0, #0]
 800b054:	2000      	movs	r0, #0
 800b056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b05a:	4834      	ldr	r0, [pc, #208]	@ (800b12c <_strtol_l.constprop.0+0xf0>)
 800b05c:	460d      	mov	r5, r1
 800b05e:	462a      	mov	r2, r5
 800b060:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b064:	5d06      	ldrb	r6, [r0, r4]
 800b066:	f016 0608 	ands.w	r6, r6, #8
 800b06a:	d1f8      	bne.n	800b05e <_strtol_l.constprop.0+0x22>
 800b06c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b06e:	d12d      	bne.n	800b0cc <_strtol_l.constprop.0+0x90>
 800b070:	782c      	ldrb	r4, [r5, #0]
 800b072:	2601      	movs	r6, #1
 800b074:	1c95      	adds	r5, r2, #2
 800b076:	f033 0210 	bics.w	r2, r3, #16
 800b07a:	d109      	bne.n	800b090 <_strtol_l.constprop.0+0x54>
 800b07c:	2c30      	cmp	r4, #48	@ 0x30
 800b07e:	d12a      	bne.n	800b0d6 <_strtol_l.constprop.0+0x9a>
 800b080:	782a      	ldrb	r2, [r5, #0]
 800b082:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b086:	2a58      	cmp	r2, #88	@ 0x58
 800b088:	d125      	bne.n	800b0d6 <_strtol_l.constprop.0+0x9a>
 800b08a:	786c      	ldrb	r4, [r5, #1]
 800b08c:	2310      	movs	r3, #16
 800b08e:	3502      	adds	r5, #2
 800b090:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b094:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b098:	2200      	movs	r2, #0
 800b09a:	fbbc f9f3 	udiv	r9, ip, r3
 800b09e:	4610      	mov	r0, r2
 800b0a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b0a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b0a8:	2f09      	cmp	r7, #9
 800b0aa:	d81b      	bhi.n	800b0e4 <_strtol_l.constprop.0+0xa8>
 800b0ac:	463c      	mov	r4, r7
 800b0ae:	42a3      	cmp	r3, r4
 800b0b0:	dd27      	ble.n	800b102 <_strtol_l.constprop.0+0xc6>
 800b0b2:	1c57      	adds	r7, r2, #1
 800b0b4:	d007      	beq.n	800b0c6 <_strtol_l.constprop.0+0x8a>
 800b0b6:	4581      	cmp	r9, r0
 800b0b8:	d320      	bcc.n	800b0fc <_strtol_l.constprop.0+0xc0>
 800b0ba:	d101      	bne.n	800b0c0 <_strtol_l.constprop.0+0x84>
 800b0bc:	45a2      	cmp	sl, r4
 800b0be:	db1d      	blt.n	800b0fc <_strtol_l.constprop.0+0xc0>
 800b0c0:	fb00 4003 	mla	r0, r0, r3, r4
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0ca:	e7eb      	b.n	800b0a4 <_strtol_l.constprop.0+0x68>
 800b0cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b0ce:	bf04      	itt	eq
 800b0d0:	782c      	ldrbeq	r4, [r5, #0]
 800b0d2:	1c95      	addeq	r5, r2, #2
 800b0d4:	e7cf      	b.n	800b076 <_strtol_l.constprop.0+0x3a>
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1da      	bne.n	800b090 <_strtol_l.constprop.0+0x54>
 800b0da:	2c30      	cmp	r4, #48	@ 0x30
 800b0dc:	bf0c      	ite	eq
 800b0de:	2308      	moveq	r3, #8
 800b0e0:	230a      	movne	r3, #10
 800b0e2:	e7d5      	b.n	800b090 <_strtol_l.constprop.0+0x54>
 800b0e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b0e8:	2f19      	cmp	r7, #25
 800b0ea:	d801      	bhi.n	800b0f0 <_strtol_l.constprop.0+0xb4>
 800b0ec:	3c37      	subs	r4, #55	@ 0x37
 800b0ee:	e7de      	b.n	800b0ae <_strtol_l.constprop.0+0x72>
 800b0f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b0f4:	2f19      	cmp	r7, #25
 800b0f6:	d804      	bhi.n	800b102 <_strtol_l.constprop.0+0xc6>
 800b0f8:	3c57      	subs	r4, #87	@ 0x57
 800b0fa:	e7d8      	b.n	800b0ae <_strtol_l.constprop.0+0x72>
 800b0fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b100:	e7e1      	b.n	800b0c6 <_strtol_l.constprop.0+0x8a>
 800b102:	1c53      	adds	r3, r2, #1
 800b104:	d108      	bne.n	800b118 <_strtol_l.constprop.0+0xdc>
 800b106:	2322      	movs	r3, #34	@ 0x22
 800b108:	f8ce 3000 	str.w	r3, [lr]
 800b10c:	4660      	mov	r0, ip
 800b10e:	f1b8 0f00 	cmp.w	r8, #0
 800b112:	d0a0      	beq.n	800b056 <_strtol_l.constprop.0+0x1a>
 800b114:	1e69      	subs	r1, r5, #1
 800b116:	e006      	b.n	800b126 <_strtol_l.constprop.0+0xea>
 800b118:	b106      	cbz	r6, 800b11c <_strtol_l.constprop.0+0xe0>
 800b11a:	4240      	negs	r0, r0
 800b11c:	f1b8 0f00 	cmp.w	r8, #0
 800b120:	d099      	beq.n	800b056 <_strtol_l.constprop.0+0x1a>
 800b122:	2a00      	cmp	r2, #0
 800b124:	d1f6      	bne.n	800b114 <_strtol_l.constprop.0+0xd8>
 800b126:	f8c8 1000 	str.w	r1, [r8]
 800b12a:	e794      	b.n	800b056 <_strtol_l.constprop.0+0x1a>
 800b12c:	0800c5e9 	.word	0x0800c5e9

0800b130 <_strtol_r>:
 800b130:	f7ff bf84 	b.w	800b03c <_strtol_l.constprop.0>

0800b134 <__ssputs_r>:
 800b134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b138:	688e      	ldr	r6, [r1, #8]
 800b13a:	461f      	mov	r7, r3
 800b13c:	42be      	cmp	r6, r7
 800b13e:	680b      	ldr	r3, [r1, #0]
 800b140:	4682      	mov	sl, r0
 800b142:	460c      	mov	r4, r1
 800b144:	4690      	mov	r8, r2
 800b146:	d82d      	bhi.n	800b1a4 <__ssputs_r+0x70>
 800b148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b14c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b150:	d026      	beq.n	800b1a0 <__ssputs_r+0x6c>
 800b152:	6965      	ldr	r5, [r4, #20]
 800b154:	6909      	ldr	r1, [r1, #16]
 800b156:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b15a:	eba3 0901 	sub.w	r9, r3, r1
 800b15e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b162:	1c7b      	adds	r3, r7, #1
 800b164:	444b      	add	r3, r9
 800b166:	106d      	asrs	r5, r5, #1
 800b168:	429d      	cmp	r5, r3
 800b16a:	bf38      	it	cc
 800b16c:	461d      	movcc	r5, r3
 800b16e:	0553      	lsls	r3, r2, #21
 800b170:	d527      	bpl.n	800b1c2 <__ssputs_r+0x8e>
 800b172:	4629      	mov	r1, r5
 800b174:	f7fe fc1c 	bl	80099b0 <_malloc_r>
 800b178:	4606      	mov	r6, r0
 800b17a:	b360      	cbz	r0, 800b1d6 <__ssputs_r+0xa2>
 800b17c:	6921      	ldr	r1, [r4, #16]
 800b17e:	464a      	mov	r2, r9
 800b180:	f000 fa18 	bl	800b5b4 <memcpy>
 800b184:	89a3      	ldrh	r3, [r4, #12]
 800b186:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b18a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	6126      	str	r6, [r4, #16]
 800b192:	6165      	str	r5, [r4, #20]
 800b194:	444e      	add	r6, r9
 800b196:	eba5 0509 	sub.w	r5, r5, r9
 800b19a:	6026      	str	r6, [r4, #0]
 800b19c:	60a5      	str	r5, [r4, #8]
 800b19e:	463e      	mov	r6, r7
 800b1a0:	42be      	cmp	r6, r7
 800b1a2:	d900      	bls.n	800b1a6 <__ssputs_r+0x72>
 800b1a4:	463e      	mov	r6, r7
 800b1a6:	6820      	ldr	r0, [r4, #0]
 800b1a8:	4632      	mov	r2, r6
 800b1aa:	4641      	mov	r1, r8
 800b1ac:	f000 f9c6 	bl	800b53c <memmove>
 800b1b0:	68a3      	ldr	r3, [r4, #8]
 800b1b2:	1b9b      	subs	r3, r3, r6
 800b1b4:	60a3      	str	r3, [r4, #8]
 800b1b6:	6823      	ldr	r3, [r4, #0]
 800b1b8:	4433      	add	r3, r6
 800b1ba:	6023      	str	r3, [r4, #0]
 800b1bc:	2000      	movs	r0, #0
 800b1be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	f000 fd89 	bl	800bcda <_realloc_r>
 800b1c8:	4606      	mov	r6, r0
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d1e0      	bne.n	800b190 <__ssputs_r+0x5c>
 800b1ce:	6921      	ldr	r1, [r4, #16]
 800b1d0:	4650      	mov	r0, sl
 800b1d2:	f7fe fb79 	bl	80098c8 <_free_r>
 800b1d6:	230c      	movs	r3, #12
 800b1d8:	f8ca 3000 	str.w	r3, [sl]
 800b1dc:	89a3      	ldrh	r3, [r4, #12]
 800b1de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1e2:	81a3      	strh	r3, [r4, #12]
 800b1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1e8:	e7e9      	b.n	800b1be <__ssputs_r+0x8a>
	...

0800b1ec <_svfiprintf_r>:
 800b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1f0:	4698      	mov	r8, r3
 800b1f2:	898b      	ldrh	r3, [r1, #12]
 800b1f4:	061b      	lsls	r3, r3, #24
 800b1f6:	b09d      	sub	sp, #116	@ 0x74
 800b1f8:	4607      	mov	r7, r0
 800b1fa:	460d      	mov	r5, r1
 800b1fc:	4614      	mov	r4, r2
 800b1fe:	d510      	bpl.n	800b222 <_svfiprintf_r+0x36>
 800b200:	690b      	ldr	r3, [r1, #16]
 800b202:	b973      	cbnz	r3, 800b222 <_svfiprintf_r+0x36>
 800b204:	2140      	movs	r1, #64	@ 0x40
 800b206:	f7fe fbd3 	bl	80099b0 <_malloc_r>
 800b20a:	6028      	str	r0, [r5, #0]
 800b20c:	6128      	str	r0, [r5, #16]
 800b20e:	b930      	cbnz	r0, 800b21e <_svfiprintf_r+0x32>
 800b210:	230c      	movs	r3, #12
 800b212:	603b      	str	r3, [r7, #0]
 800b214:	f04f 30ff 	mov.w	r0, #4294967295
 800b218:	b01d      	add	sp, #116	@ 0x74
 800b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b21e:	2340      	movs	r3, #64	@ 0x40
 800b220:	616b      	str	r3, [r5, #20]
 800b222:	2300      	movs	r3, #0
 800b224:	9309      	str	r3, [sp, #36]	@ 0x24
 800b226:	2320      	movs	r3, #32
 800b228:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b22c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b230:	2330      	movs	r3, #48	@ 0x30
 800b232:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3d0 <_svfiprintf_r+0x1e4>
 800b236:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b23a:	f04f 0901 	mov.w	r9, #1
 800b23e:	4623      	mov	r3, r4
 800b240:	469a      	mov	sl, r3
 800b242:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b246:	b10a      	cbz	r2, 800b24c <_svfiprintf_r+0x60>
 800b248:	2a25      	cmp	r2, #37	@ 0x25
 800b24a:	d1f9      	bne.n	800b240 <_svfiprintf_r+0x54>
 800b24c:	ebba 0b04 	subs.w	fp, sl, r4
 800b250:	d00b      	beq.n	800b26a <_svfiprintf_r+0x7e>
 800b252:	465b      	mov	r3, fp
 800b254:	4622      	mov	r2, r4
 800b256:	4629      	mov	r1, r5
 800b258:	4638      	mov	r0, r7
 800b25a:	f7ff ff6b 	bl	800b134 <__ssputs_r>
 800b25e:	3001      	adds	r0, #1
 800b260:	f000 80a7 	beq.w	800b3b2 <_svfiprintf_r+0x1c6>
 800b264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b266:	445a      	add	r2, fp
 800b268:	9209      	str	r2, [sp, #36]	@ 0x24
 800b26a:	f89a 3000 	ldrb.w	r3, [sl]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f000 809f 	beq.w	800b3b2 <_svfiprintf_r+0x1c6>
 800b274:	2300      	movs	r3, #0
 800b276:	f04f 32ff 	mov.w	r2, #4294967295
 800b27a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b27e:	f10a 0a01 	add.w	sl, sl, #1
 800b282:	9304      	str	r3, [sp, #16]
 800b284:	9307      	str	r3, [sp, #28]
 800b286:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b28a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b28c:	4654      	mov	r4, sl
 800b28e:	2205      	movs	r2, #5
 800b290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b294:	484e      	ldr	r0, [pc, #312]	@ (800b3d0 <_svfiprintf_r+0x1e4>)
 800b296:	f7f4 ffbb 	bl	8000210 <memchr>
 800b29a:	9a04      	ldr	r2, [sp, #16]
 800b29c:	b9d8      	cbnz	r0, 800b2d6 <_svfiprintf_r+0xea>
 800b29e:	06d0      	lsls	r0, r2, #27
 800b2a0:	bf44      	itt	mi
 800b2a2:	2320      	movmi	r3, #32
 800b2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2a8:	0711      	lsls	r1, r2, #28
 800b2aa:	bf44      	itt	mi
 800b2ac:	232b      	movmi	r3, #43	@ 0x2b
 800b2ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2b8:	d015      	beq.n	800b2e6 <_svfiprintf_r+0xfa>
 800b2ba:	9a07      	ldr	r2, [sp, #28]
 800b2bc:	4654      	mov	r4, sl
 800b2be:	2000      	movs	r0, #0
 800b2c0:	f04f 0c0a 	mov.w	ip, #10
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2ca:	3b30      	subs	r3, #48	@ 0x30
 800b2cc:	2b09      	cmp	r3, #9
 800b2ce:	d94b      	bls.n	800b368 <_svfiprintf_r+0x17c>
 800b2d0:	b1b0      	cbz	r0, 800b300 <_svfiprintf_r+0x114>
 800b2d2:	9207      	str	r2, [sp, #28]
 800b2d4:	e014      	b.n	800b300 <_svfiprintf_r+0x114>
 800b2d6:	eba0 0308 	sub.w	r3, r0, r8
 800b2da:	fa09 f303 	lsl.w	r3, r9, r3
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	9304      	str	r3, [sp, #16]
 800b2e2:	46a2      	mov	sl, r4
 800b2e4:	e7d2      	b.n	800b28c <_svfiprintf_r+0xa0>
 800b2e6:	9b03      	ldr	r3, [sp, #12]
 800b2e8:	1d19      	adds	r1, r3, #4
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	9103      	str	r1, [sp, #12]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	bfbb      	ittet	lt
 800b2f2:	425b      	neglt	r3, r3
 800b2f4:	f042 0202 	orrlt.w	r2, r2, #2
 800b2f8:	9307      	strge	r3, [sp, #28]
 800b2fa:	9307      	strlt	r3, [sp, #28]
 800b2fc:	bfb8      	it	lt
 800b2fe:	9204      	strlt	r2, [sp, #16]
 800b300:	7823      	ldrb	r3, [r4, #0]
 800b302:	2b2e      	cmp	r3, #46	@ 0x2e
 800b304:	d10a      	bne.n	800b31c <_svfiprintf_r+0x130>
 800b306:	7863      	ldrb	r3, [r4, #1]
 800b308:	2b2a      	cmp	r3, #42	@ 0x2a
 800b30a:	d132      	bne.n	800b372 <_svfiprintf_r+0x186>
 800b30c:	9b03      	ldr	r3, [sp, #12]
 800b30e:	1d1a      	adds	r2, r3, #4
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	9203      	str	r2, [sp, #12]
 800b314:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b318:	3402      	adds	r4, #2
 800b31a:	9305      	str	r3, [sp, #20]
 800b31c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b3e0 <_svfiprintf_r+0x1f4>
 800b320:	7821      	ldrb	r1, [r4, #0]
 800b322:	2203      	movs	r2, #3
 800b324:	4650      	mov	r0, sl
 800b326:	f7f4 ff73 	bl	8000210 <memchr>
 800b32a:	b138      	cbz	r0, 800b33c <_svfiprintf_r+0x150>
 800b32c:	9b04      	ldr	r3, [sp, #16]
 800b32e:	eba0 000a 	sub.w	r0, r0, sl
 800b332:	2240      	movs	r2, #64	@ 0x40
 800b334:	4082      	lsls	r2, r0
 800b336:	4313      	orrs	r3, r2
 800b338:	3401      	adds	r4, #1
 800b33a:	9304      	str	r3, [sp, #16]
 800b33c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b340:	4824      	ldr	r0, [pc, #144]	@ (800b3d4 <_svfiprintf_r+0x1e8>)
 800b342:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b346:	2206      	movs	r2, #6
 800b348:	f7f4 ff62 	bl	8000210 <memchr>
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d036      	beq.n	800b3be <_svfiprintf_r+0x1d2>
 800b350:	4b21      	ldr	r3, [pc, #132]	@ (800b3d8 <_svfiprintf_r+0x1ec>)
 800b352:	bb1b      	cbnz	r3, 800b39c <_svfiprintf_r+0x1b0>
 800b354:	9b03      	ldr	r3, [sp, #12]
 800b356:	3307      	adds	r3, #7
 800b358:	f023 0307 	bic.w	r3, r3, #7
 800b35c:	3308      	adds	r3, #8
 800b35e:	9303      	str	r3, [sp, #12]
 800b360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b362:	4433      	add	r3, r6
 800b364:	9309      	str	r3, [sp, #36]	@ 0x24
 800b366:	e76a      	b.n	800b23e <_svfiprintf_r+0x52>
 800b368:	fb0c 3202 	mla	r2, ip, r2, r3
 800b36c:	460c      	mov	r4, r1
 800b36e:	2001      	movs	r0, #1
 800b370:	e7a8      	b.n	800b2c4 <_svfiprintf_r+0xd8>
 800b372:	2300      	movs	r3, #0
 800b374:	3401      	adds	r4, #1
 800b376:	9305      	str	r3, [sp, #20]
 800b378:	4619      	mov	r1, r3
 800b37a:	f04f 0c0a 	mov.w	ip, #10
 800b37e:	4620      	mov	r0, r4
 800b380:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b384:	3a30      	subs	r2, #48	@ 0x30
 800b386:	2a09      	cmp	r2, #9
 800b388:	d903      	bls.n	800b392 <_svfiprintf_r+0x1a6>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0c6      	beq.n	800b31c <_svfiprintf_r+0x130>
 800b38e:	9105      	str	r1, [sp, #20]
 800b390:	e7c4      	b.n	800b31c <_svfiprintf_r+0x130>
 800b392:	fb0c 2101 	mla	r1, ip, r1, r2
 800b396:	4604      	mov	r4, r0
 800b398:	2301      	movs	r3, #1
 800b39a:	e7f0      	b.n	800b37e <_svfiprintf_r+0x192>
 800b39c:	ab03      	add	r3, sp, #12
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	462a      	mov	r2, r5
 800b3a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b3dc <_svfiprintf_r+0x1f0>)
 800b3a4:	a904      	add	r1, sp, #16
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	f7fc fcca 	bl	8007d40 <_printf_float>
 800b3ac:	1c42      	adds	r2, r0, #1
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	d1d6      	bne.n	800b360 <_svfiprintf_r+0x174>
 800b3b2:	89ab      	ldrh	r3, [r5, #12]
 800b3b4:	065b      	lsls	r3, r3, #25
 800b3b6:	f53f af2d 	bmi.w	800b214 <_svfiprintf_r+0x28>
 800b3ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3bc:	e72c      	b.n	800b218 <_svfiprintf_r+0x2c>
 800b3be:	ab03      	add	r3, sp, #12
 800b3c0:	9300      	str	r3, [sp, #0]
 800b3c2:	462a      	mov	r2, r5
 800b3c4:	4b05      	ldr	r3, [pc, #20]	@ (800b3dc <_svfiprintf_r+0x1f0>)
 800b3c6:	a904      	add	r1, sp, #16
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7fc ff51 	bl	8008270 <_printf_i>
 800b3ce:	e7ed      	b.n	800b3ac <_svfiprintf_r+0x1c0>
 800b3d0:	0800c6e9 	.word	0x0800c6e9
 800b3d4:	0800c6f3 	.word	0x0800c6f3
 800b3d8:	08007d41 	.word	0x08007d41
 800b3dc:	0800b135 	.word	0x0800b135
 800b3e0:	0800c6ef 	.word	0x0800c6ef

0800b3e4 <__sflush_r>:
 800b3e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ec:	0716      	lsls	r6, r2, #28
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	d454      	bmi.n	800b49e <__sflush_r+0xba>
 800b3f4:	684b      	ldr	r3, [r1, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	dc02      	bgt.n	800b400 <__sflush_r+0x1c>
 800b3fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	dd48      	ble.n	800b492 <__sflush_r+0xae>
 800b400:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b402:	2e00      	cmp	r6, #0
 800b404:	d045      	beq.n	800b492 <__sflush_r+0xae>
 800b406:	2300      	movs	r3, #0
 800b408:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b40c:	682f      	ldr	r7, [r5, #0]
 800b40e:	6a21      	ldr	r1, [r4, #32]
 800b410:	602b      	str	r3, [r5, #0]
 800b412:	d030      	beq.n	800b476 <__sflush_r+0x92>
 800b414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b416:	89a3      	ldrh	r3, [r4, #12]
 800b418:	0759      	lsls	r1, r3, #29
 800b41a:	d505      	bpl.n	800b428 <__sflush_r+0x44>
 800b41c:	6863      	ldr	r3, [r4, #4]
 800b41e:	1ad2      	subs	r2, r2, r3
 800b420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b422:	b10b      	cbz	r3, 800b428 <__sflush_r+0x44>
 800b424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b426:	1ad2      	subs	r2, r2, r3
 800b428:	2300      	movs	r3, #0
 800b42a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b42c:	6a21      	ldr	r1, [r4, #32]
 800b42e:	4628      	mov	r0, r5
 800b430:	47b0      	blx	r6
 800b432:	1c43      	adds	r3, r0, #1
 800b434:	89a3      	ldrh	r3, [r4, #12]
 800b436:	d106      	bne.n	800b446 <__sflush_r+0x62>
 800b438:	6829      	ldr	r1, [r5, #0]
 800b43a:	291d      	cmp	r1, #29
 800b43c:	d82b      	bhi.n	800b496 <__sflush_r+0xb2>
 800b43e:	4a2a      	ldr	r2, [pc, #168]	@ (800b4e8 <__sflush_r+0x104>)
 800b440:	410a      	asrs	r2, r1
 800b442:	07d6      	lsls	r6, r2, #31
 800b444:	d427      	bmi.n	800b496 <__sflush_r+0xb2>
 800b446:	2200      	movs	r2, #0
 800b448:	6062      	str	r2, [r4, #4]
 800b44a:	04d9      	lsls	r1, r3, #19
 800b44c:	6922      	ldr	r2, [r4, #16]
 800b44e:	6022      	str	r2, [r4, #0]
 800b450:	d504      	bpl.n	800b45c <__sflush_r+0x78>
 800b452:	1c42      	adds	r2, r0, #1
 800b454:	d101      	bne.n	800b45a <__sflush_r+0x76>
 800b456:	682b      	ldr	r3, [r5, #0]
 800b458:	b903      	cbnz	r3, 800b45c <__sflush_r+0x78>
 800b45a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b45c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b45e:	602f      	str	r7, [r5, #0]
 800b460:	b1b9      	cbz	r1, 800b492 <__sflush_r+0xae>
 800b462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b466:	4299      	cmp	r1, r3
 800b468:	d002      	beq.n	800b470 <__sflush_r+0x8c>
 800b46a:	4628      	mov	r0, r5
 800b46c:	f7fe fa2c 	bl	80098c8 <_free_r>
 800b470:	2300      	movs	r3, #0
 800b472:	6363      	str	r3, [r4, #52]	@ 0x34
 800b474:	e00d      	b.n	800b492 <__sflush_r+0xae>
 800b476:	2301      	movs	r3, #1
 800b478:	4628      	mov	r0, r5
 800b47a:	47b0      	blx	r6
 800b47c:	4602      	mov	r2, r0
 800b47e:	1c50      	adds	r0, r2, #1
 800b480:	d1c9      	bne.n	800b416 <__sflush_r+0x32>
 800b482:	682b      	ldr	r3, [r5, #0]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d0c6      	beq.n	800b416 <__sflush_r+0x32>
 800b488:	2b1d      	cmp	r3, #29
 800b48a:	d001      	beq.n	800b490 <__sflush_r+0xac>
 800b48c:	2b16      	cmp	r3, #22
 800b48e:	d11e      	bne.n	800b4ce <__sflush_r+0xea>
 800b490:	602f      	str	r7, [r5, #0]
 800b492:	2000      	movs	r0, #0
 800b494:	e022      	b.n	800b4dc <__sflush_r+0xf8>
 800b496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b49a:	b21b      	sxth	r3, r3
 800b49c:	e01b      	b.n	800b4d6 <__sflush_r+0xf2>
 800b49e:	690f      	ldr	r7, [r1, #16]
 800b4a0:	2f00      	cmp	r7, #0
 800b4a2:	d0f6      	beq.n	800b492 <__sflush_r+0xae>
 800b4a4:	0793      	lsls	r3, r2, #30
 800b4a6:	680e      	ldr	r6, [r1, #0]
 800b4a8:	bf08      	it	eq
 800b4aa:	694b      	ldreq	r3, [r1, #20]
 800b4ac:	600f      	str	r7, [r1, #0]
 800b4ae:	bf18      	it	ne
 800b4b0:	2300      	movne	r3, #0
 800b4b2:	eba6 0807 	sub.w	r8, r6, r7
 800b4b6:	608b      	str	r3, [r1, #8]
 800b4b8:	f1b8 0f00 	cmp.w	r8, #0
 800b4bc:	dde9      	ble.n	800b492 <__sflush_r+0xae>
 800b4be:	6a21      	ldr	r1, [r4, #32]
 800b4c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b4c2:	4643      	mov	r3, r8
 800b4c4:	463a      	mov	r2, r7
 800b4c6:	4628      	mov	r0, r5
 800b4c8:	47b0      	blx	r6
 800b4ca:	2800      	cmp	r0, #0
 800b4cc:	dc08      	bgt.n	800b4e0 <__sflush_r+0xfc>
 800b4ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4d6:	81a3      	strh	r3, [r4, #12]
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e0:	4407      	add	r7, r0
 800b4e2:	eba8 0800 	sub.w	r8, r8, r0
 800b4e6:	e7e7      	b.n	800b4b8 <__sflush_r+0xd4>
 800b4e8:	dfbffffe 	.word	0xdfbffffe

0800b4ec <_fflush_r>:
 800b4ec:	b538      	push	{r3, r4, r5, lr}
 800b4ee:	690b      	ldr	r3, [r1, #16]
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	460c      	mov	r4, r1
 800b4f4:	b913      	cbnz	r3, 800b4fc <_fflush_r+0x10>
 800b4f6:	2500      	movs	r5, #0
 800b4f8:	4628      	mov	r0, r5
 800b4fa:	bd38      	pop	{r3, r4, r5, pc}
 800b4fc:	b118      	cbz	r0, 800b506 <_fflush_r+0x1a>
 800b4fe:	6a03      	ldr	r3, [r0, #32]
 800b500:	b90b      	cbnz	r3, 800b506 <_fflush_r+0x1a>
 800b502:	f7fd fa75 	bl	80089f0 <__sinit>
 800b506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d0f3      	beq.n	800b4f6 <_fflush_r+0xa>
 800b50e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b510:	07d0      	lsls	r0, r2, #31
 800b512:	d404      	bmi.n	800b51e <_fflush_r+0x32>
 800b514:	0599      	lsls	r1, r3, #22
 800b516:	d402      	bmi.n	800b51e <_fflush_r+0x32>
 800b518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b51a:	f7fd fb80 	bl	8008c1e <__retarget_lock_acquire_recursive>
 800b51e:	4628      	mov	r0, r5
 800b520:	4621      	mov	r1, r4
 800b522:	f7ff ff5f 	bl	800b3e4 <__sflush_r>
 800b526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b528:	07da      	lsls	r2, r3, #31
 800b52a:	4605      	mov	r5, r0
 800b52c:	d4e4      	bmi.n	800b4f8 <_fflush_r+0xc>
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	059b      	lsls	r3, r3, #22
 800b532:	d4e1      	bmi.n	800b4f8 <_fflush_r+0xc>
 800b534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b536:	f7fd fb73 	bl	8008c20 <__retarget_lock_release_recursive>
 800b53a:	e7dd      	b.n	800b4f8 <_fflush_r+0xc>

0800b53c <memmove>:
 800b53c:	4288      	cmp	r0, r1
 800b53e:	b510      	push	{r4, lr}
 800b540:	eb01 0402 	add.w	r4, r1, r2
 800b544:	d902      	bls.n	800b54c <memmove+0x10>
 800b546:	4284      	cmp	r4, r0
 800b548:	4623      	mov	r3, r4
 800b54a:	d807      	bhi.n	800b55c <memmove+0x20>
 800b54c:	1e43      	subs	r3, r0, #1
 800b54e:	42a1      	cmp	r1, r4
 800b550:	d008      	beq.n	800b564 <memmove+0x28>
 800b552:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b55a:	e7f8      	b.n	800b54e <memmove+0x12>
 800b55c:	4402      	add	r2, r0
 800b55e:	4601      	mov	r1, r0
 800b560:	428a      	cmp	r2, r1
 800b562:	d100      	bne.n	800b566 <memmove+0x2a>
 800b564:	bd10      	pop	{r4, pc}
 800b566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b56a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b56e:	e7f7      	b.n	800b560 <memmove+0x24>

0800b570 <strncmp>:
 800b570:	b510      	push	{r4, lr}
 800b572:	b16a      	cbz	r2, 800b590 <strncmp+0x20>
 800b574:	3901      	subs	r1, #1
 800b576:	1884      	adds	r4, r0, r2
 800b578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b57c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b580:	429a      	cmp	r2, r3
 800b582:	d103      	bne.n	800b58c <strncmp+0x1c>
 800b584:	42a0      	cmp	r0, r4
 800b586:	d001      	beq.n	800b58c <strncmp+0x1c>
 800b588:	2a00      	cmp	r2, #0
 800b58a:	d1f5      	bne.n	800b578 <strncmp+0x8>
 800b58c:	1ad0      	subs	r0, r2, r3
 800b58e:	bd10      	pop	{r4, pc}
 800b590:	4610      	mov	r0, r2
 800b592:	e7fc      	b.n	800b58e <strncmp+0x1e>

0800b594 <_sbrk_r>:
 800b594:	b538      	push	{r3, r4, r5, lr}
 800b596:	4d06      	ldr	r5, [pc, #24]	@ (800b5b0 <_sbrk_r+0x1c>)
 800b598:	2300      	movs	r3, #0
 800b59a:	4604      	mov	r4, r0
 800b59c:	4608      	mov	r0, r1
 800b59e:	602b      	str	r3, [r5, #0]
 800b5a0:	f7f8 f9e8 	bl	8003974 <_sbrk>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d102      	bne.n	800b5ae <_sbrk_r+0x1a>
 800b5a8:	682b      	ldr	r3, [r5, #0]
 800b5aa:	b103      	cbz	r3, 800b5ae <_sbrk_r+0x1a>
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	bd38      	pop	{r3, r4, r5, pc}
 800b5b0:	200007d4 	.word	0x200007d4

0800b5b4 <memcpy>:
 800b5b4:	440a      	add	r2, r1
 800b5b6:	4291      	cmp	r1, r2
 800b5b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5bc:	d100      	bne.n	800b5c0 <memcpy+0xc>
 800b5be:	4770      	bx	lr
 800b5c0:	b510      	push	{r4, lr}
 800b5c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ca:	4291      	cmp	r1, r2
 800b5cc:	d1f9      	bne.n	800b5c2 <memcpy+0xe>
 800b5ce:	bd10      	pop	{r4, pc}

0800b5d0 <nan>:
 800b5d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b5d8 <nan+0x8>
 800b5d4:	4770      	bx	lr
 800b5d6:	bf00      	nop
 800b5d8:	00000000 	.word	0x00000000
 800b5dc:	7ff80000 	.word	0x7ff80000

0800b5e0 <__assert_func>:
 800b5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5e2:	4614      	mov	r4, r2
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	4b09      	ldr	r3, [pc, #36]	@ (800b60c <__assert_func+0x2c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4605      	mov	r5, r0
 800b5ec:	68d8      	ldr	r0, [r3, #12]
 800b5ee:	b954      	cbnz	r4, 800b606 <__assert_func+0x26>
 800b5f0:	4b07      	ldr	r3, [pc, #28]	@ (800b610 <__assert_func+0x30>)
 800b5f2:	461c      	mov	r4, r3
 800b5f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5f8:	9100      	str	r1, [sp, #0]
 800b5fa:	462b      	mov	r3, r5
 800b5fc:	4905      	ldr	r1, [pc, #20]	@ (800b614 <__assert_func+0x34>)
 800b5fe:	f000 fba7 	bl	800bd50 <fiprintf>
 800b602:	f000 fbb7 	bl	800bd74 <abort>
 800b606:	4b04      	ldr	r3, [pc, #16]	@ (800b618 <__assert_func+0x38>)
 800b608:	e7f4      	b.n	800b5f4 <__assert_func+0x14>
 800b60a:	bf00      	nop
 800b60c:	2000002c 	.word	0x2000002c
 800b610:	0800c73d 	.word	0x0800c73d
 800b614:	0800c70f 	.word	0x0800c70f
 800b618:	0800c702 	.word	0x0800c702

0800b61c <_calloc_r>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	fba1 5402 	umull	r5, r4, r1, r2
 800b622:	b93c      	cbnz	r4, 800b634 <_calloc_r+0x18>
 800b624:	4629      	mov	r1, r5
 800b626:	f7fe f9c3 	bl	80099b0 <_malloc_r>
 800b62a:	4606      	mov	r6, r0
 800b62c:	b928      	cbnz	r0, 800b63a <_calloc_r+0x1e>
 800b62e:	2600      	movs	r6, #0
 800b630:	4630      	mov	r0, r6
 800b632:	bd70      	pop	{r4, r5, r6, pc}
 800b634:	220c      	movs	r2, #12
 800b636:	6002      	str	r2, [r0, #0]
 800b638:	e7f9      	b.n	800b62e <_calloc_r+0x12>
 800b63a:	462a      	mov	r2, r5
 800b63c:	4621      	mov	r1, r4
 800b63e:	f7fd fa70 	bl	8008b22 <memset>
 800b642:	e7f5      	b.n	800b630 <_calloc_r+0x14>

0800b644 <rshift>:
 800b644:	6903      	ldr	r3, [r0, #16]
 800b646:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b64a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b64e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b652:	f100 0414 	add.w	r4, r0, #20
 800b656:	dd45      	ble.n	800b6e4 <rshift+0xa0>
 800b658:	f011 011f 	ands.w	r1, r1, #31
 800b65c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b660:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b664:	d10c      	bne.n	800b680 <rshift+0x3c>
 800b666:	f100 0710 	add.w	r7, r0, #16
 800b66a:	4629      	mov	r1, r5
 800b66c:	42b1      	cmp	r1, r6
 800b66e:	d334      	bcc.n	800b6da <rshift+0x96>
 800b670:	1a9b      	subs	r3, r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	1eea      	subs	r2, r5, #3
 800b676:	4296      	cmp	r6, r2
 800b678:	bf38      	it	cc
 800b67a:	2300      	movcc	r3, #0
 800b67c:	4423      	add	r3, r4
 800b67e:	e015      	b.n	800b6ac <rshift+0x68>
 800b680:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b684:	f1c1 0820 	rsb	r8, r1, #32
 800b688:	40cf      	lsrs	r7, r1
 800b68a:	f105 0e04 	add.w	lr, r5, #4
 800b68e:	46a1      	mov	r9, r4
 800b690:	4576      	cmp	r6, lr
 800b692:	46f4      	mov	ip, lr
 800b694:	d815      	bhi.n	800b6c2 <rshift+0x7e>
 800b696:	1a9a      	subs	r2, r3, r2
 800b698:	0092      	lsls	r2, r2, #2
 800b69a:	3a04      	subs	r2, #4
 800b69c:	3501      	adds	r5, #1
 800b69e:	42ae      	cmp	r6, r5
 800b6a0:	bf38      	it	cc
 800b6a2:	2200      	movcc	r2, #0
 800b6a4:	18a3      	adds	r3, r4, r2
 800b6a6:	50a7      	str	r7, [r4, r2]
 800b6a8:	b107      	cbz	r7, 800b6ac <rshift+0x68>
 800b6aa:	3304      	adds	r3, #4
 800b6ac:	1b1a      	subs	r2, r3, r4
 800b6ae:	42a3      	cmp	r3, r4
 800b6b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b6b4:	bf08      	it	eq
 800b6b6:	2300      	moveq	r3, #0
 800b6b8:	6102      	str	r2, [r0, #16]
 800b6ba:	bf08      	it	eq
 800b6bc:	6143      	streq	r3, [r0, #20]
 800b6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6c2:	f8dc c000 	ldr.w	ip, [ip]
 800b6c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b6ca:	ea4c 0707 	orr.w	r7, ip, r7
 800b6ce:	f849 7b04 	str.w	r7, [r9], #4
 800b6d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b6d6:	40cf      	lsrs	r7, r1
 800b6d8:	e7da      	b.n	800b690 <rshift+0x4c>
 800b6da:	f851 cb04 	ldr.w	ip, [r1], #4
 800b6de:	f847 cf04 	str.w	ip, [r7, #4]!
 800b6e2:	e7c3      	b.n	800b66c <rshift+0x28>
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	e7e1      	b.n	800b6ac <rshift+0x68>

0800b6e8 <__hexdig_fun>:
 800b6e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b6ec:	2b09      	cmp	r3, #9
 800b6ee:	d802      	bhi.n	800b6f6 <__hexdig_fun+0xe>
 800b6f0:	3820      	subs	r0, #32
 800b6f2:	b2c0      	uxtb	r0, r0
 800b6f4:	4770      	bx	lr
 800b6f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b6fa:	2b05      	cmp	r3, #5
 800b6fc:	d801      	bhi.n	800b702 <__hexdig_fun+0x1a>
 800b6fe:	3847      	subs	r0, #71	@ 0x47
 800b700:	e7f7      	b.n	800b6f2 <__hexdig_fun+0xa>
 800b702:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b706:	2b05      	cmp	r3, #5
 800b708:	d801      	bhi.n	800b70e <__hexdig_fun+0x26>
 800b70a:	3827      	subs	r0, #39	@ 0x27
 800b70c:	e7f1      	b.n	800b6f2 <__hexdig_fun+0xa>
 800b70e:	2000      	movs	r0, #0
 800b710:	4770      	bx	lr
	...

0800b714 <__gethex>:
 800b714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b718:	b085      	sub	sp, #20
 800b71a:	468a      	mov	sl, r1
 800b71c:	9302      	str	r3, [sp, #8]
 800b71e:	680b      	ldr	r3, [r1, #0]
 800b720:	9001      	str	r0, [sp, #4]
 800b722:	4690      	mov	r8, r2
 800b724:	1c9c      	adds	r4, r3, #2
 800b726:	46a1      	mov	r9, r4
 800b728:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b72c:	2830      	cmp	r0, #48	@ 0x30
 800b72e:	d0fa      	beq.n	800b726 <__gethex+0x12>
 800b730:	eba9 0303 	sub.w	r3, r9, r3
 800b734:	f1a3 0b02 	sub.w	fp, r3, #2
 800b738:	f7ff ffd6 	bl	800b6e8 <__hexdig_fun>
 800b73c:	4605      	mov	r5, r0
 800b73e:	2800      	cmp	r0, #0
 800b740:	d168      	bne.n	800b814 <__gethex+0x100>
 800b742:	49a0      	ldr	r1, [pc, #640]	@ (800b9c4 <__gethex+0x2b0>)
 800b744:	2201      	movs	r2, #1
 800b746:	4648      	mov	r0, r9
 800b748:	f7ff ff12 	bl	800b570 <strncmp>
 800b74c:	4607      	mov	r7, r0
 800b74e:	2800      	cmp	r0, #0
 800b750:	d167      	bne.n	800b822 <__gethex+0x10e>
 800b752:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b756:	4626      	mov	r6, r4
 800b758:	f7ff ffc6 	bl	800b6e8 <__hexdig_fun>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	d062      	beq.n	800b826 <__gethex+0x112>
 800b760:	4623      	mov	r3, r4
 800b762:	7818      	ldrb	r0, [r3, #0]
 800b764:	2830      	cmp	r0, #48	@ 0x30
 800b766:	4699      	mov	r9, r3
 800b768:	f103 0301 	add.w	r3, r3, #1
 800b76c:	d0f9      	beq.n	800b762 <__gethex+0x4e>
 800b76e:	f7ff ffbb 	bl	800b6e8 <__hexdig_fun>
 800b772:	fab0 f580 	clz	r5, r0
 800b776:	096d      	lsrs	r5, r5, #5
 800b778:	f04f 0b01 	mov.w	fp, #1
 800b77c:	464a      	mov	r2, r9
 800b77e:	4616      	mov	r6, r2
 800b780:	3201      	adds	r2, #1
 800b782:	7830      	ldrb	r0, [r6, #0]
 800b784:	f7ff ffb0 	bl	800b6e8 <__hexdig_fun>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d1f8      	bne.n	800b77e <__gethex+0x6a>
 800b78c:	498d      	ldr	r1, [pc, #564]	@ (800b9c4 <__gethex+0x2b0>)
 800b78e:	2201      	movs	r2, #1
 800b790:	4630      	mov	r0, r6
 800b792:	f7ff feed 	bl	800b570 <strncmp>
 800b796:	2800      	cmp	r0, #0
 800b798:	d13f      	bne.n	800b81a <__gethex+0x106>
 800b79a:	b944      	cbnz	r4, 800b7ae <__gethex+0x9a>
 800b79c:	1c74      	adds	r4, r6, #1
 800b79e:	4622      	mov	r2, r4
 800b7a0:	4616      	mov	r6, r2
 800b7a2:	3201      	adds	r2, #1
 800b7a4:	7830      	ldrb	r0, [r6, #0]
 800b7a6:	f7ff ff9f 	bl	800b6e8 <__hexdig_fun>
 800b7aa:	2800      	cmp	r0, #0
 800b7ac:	d1f8      	bne.n	800b7a0 <__gethex+0x8c>
 800b7ae:	1ba4      	subs	r4, r4, r6
 800b7b0:	00a7      	lsls	r7, r4, #2
 800b7b2:	7833      	ldrb	r3, [r6, #0]
 800b7b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b7b8:	2b50      	cmp	r3, #80	@ 0x50
 800b7ba:	d13e      	bne.n	800b83a <__gethex+0x126>
 800b7bc:	7873      	ldrb	r3, [r6, #1]
 800b7be:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7c0:	d033      	beq.n	800b82a <__gethex+0x116>
 800b7c2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b7c4:	d034      	beq.n	800b830 <__gethex+0x11c>
 800b7c6:	1c71      	adds	r1, r6, #1
 800b7c8:	2400      	movs	r4, #0
 800b7ca:	7808      	ldrb	r0, [r1, #0]
 800b7cc:	f7ff ff8c 	bl	800b6e8 <__hexdig_fun>
 800b7d0:	1e43      	subs	r3, r0, #1
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b18      	cmp	r3, #24
 800b7d6:	d830      	bhi.n	800b83a <__gethex+0x126>
 800b7d8:	f1a0 0210 	sub.w	r2, r0, #16
 800b7dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b7e0:	f7ff ff82 	bl	800b6e8 <__hexdig_fun>
 800b7e4:	f100 3cff 	add.w	ip, r0, #4294967295
 800b7e8:	fa5f fc8c 	uxtb.w	ip, ip
 800b7ec:	f1bc 0f18 	cmp.w	ip, #24
 800b7f0:	f04f 030a 	mov.w	r3, #10
 800b7f4:	d91e      	bls.n	800b834 <__gethex+0x120>
 800b7f6:	b104      	cbz	r4, 800b7fa <__gethex+0xe6>
 800b7f8:	4252      	negs	r2, r2
 800b7fa:	4417      	add	r7, r2
 800b7fc:	f8ca 1000 	str.w	r1, [sl]
 800b800:	b1ed      	cbz	r5, 800b83e <__gethex+0x12a>
 800b802:	f1bb 0f00 	cmp.w	fp, #0
 800b806:	bf0c      	ite	eq
 800b808:	2506      	moveq	r5, #6
 800b80a:	2500      	movne	r5, #0
 800b80c:	4628      	mov	r0, r5
 800b80e:	b005      	add	sp, #20
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	2500      	movs	r5, #0
 800b816:	462c      	mov	r4, r5
 800b818:	e7b0      	b.n	800b77c <__gethex+0x68>
 800b81a:	2c00      	cmp	r4, #0
 800b81c:	d1c7      	bne.n	800b7ae <__gethex+0x9a>
 800b81e:	4627      	mov	r7, r4
 800b820:	e7c7      	b.n	800b7b2 <__gethex+0x9e>
 800b822:	464e      	mov	r6, r9
 800b824:	462f      	mov	r7, r5
 800b826:	2501      	movs	r5, #1
 800b828:	e7c3      	b.n	800b7b2 <__gethex+0x9e>
 800b82a:	2400      	movs	r4, #0
 800b82c:	1cb1      	adds	r1, r6, #2
 800b82e:	e7cc      	b.n	800b7ca <__gethex+0xb6>
 800b830:	2401      	movs	r4, #1
 800b832:	e7fb      	b.n	800b82c <__gethex+0x118>
 800b834:	fb03 0002 	mla	r0, r3, r2, r0
 800b838:	e7ce      	b.n	800b7d8 <__gethex+0xc4>
 800b83a:	4631      	mov	r1, r6
 800b83c:	e7de      	b.n	800b7fc <__gethex+0xe8>
 800b83e:	eba6 0309 	sub.w	r3, r6, r9
 800b842:	3b01      	subs	r3, #1
 800b844:	4629      	mov	r1, r5
 800b846:	2b07      	cmp	r3, #7
 800b848:	dc0a      	bgt.n	800b860 <__gethex+0x14c>
 800b84a:	9801      	ldr	r0, [sp, #4]
 800b84c:	f7fe f93c 	bl	8009ac8 <_Balloc>
 800b850:	4604      	mov	r4, r0
 800b852:	b940      	cbnz	r0, 800b866 <__gethex+0x152>
 800b854:	4b5c      	ldr	r3, [pc, #368]	@ (800b9c8 <__gethex+0x2b4>)
 800b856:	4602      	mov	r2, r0
 800b858:	21e4      	movs	r1, #228	@ 0xe4
 800b85a:	485c      	ldr	r0, [pc, #368]	@ (800b9cc <__gethex+0x2b8>)
 800b85c:	f7ff fec0 	bl	800b5e0 <__assert_func>
 800b860:	3101      	adds	r1, #1
 800b862:	105b      	asrs	r3, r3, #1
 800b864:	e7ef      	b.n	800b846 <__gethex+0x132>
 800b866:	f100 0a14 	add.w	sl, r0, #20
 800b86a:	2300      	movs	r3, #0
 800b86c:	4655      	mov	r5, sl
 800b86e:	469b      	mov	fp, r3
 800b870:	45b1      	cmp	r9, r6
 800b872:	d337      	bcc.n	800b8e4 <__gethex+0x1d0>
 800b874:	f845 bb04 	str.w	fp, [r5], #4
 800b878:	eba5 050a 	sub.w	r5, r5, sl
 800b87c:	10ad      	asrs	r5, r5, #2
 800b87e:	6125      	str	r5, [r4, #16]
 800b880:	4658      	mov	r0, fp
 800b882:	f7fe fa13 	bl	8009cac <__hi0bits>
 800b886:	016d      	lsls	r5, r5, #5
 800b888:	f8d8 6000 	ldr.w	r6, [r8]
 800b88c:	1a2d      	subs	r5, r5, r0
 800b88e:	42b5      	cmp	r5, r6
 800b890:	dd54      	ble.n	800b93c <__gethex+0x228>
 800b892:	1bad      	subs	r5, r5, r6
 800b894:	4629      	mov	r1, r5
 800b896:	4620      	mov	r0, r4
 800b898:	f7fe fda7 	bl	800a3ea <__any_on>
 800b89c:	4681      	mov	r9, r0
 800b89e:	b178      	cbz	r0, 800b8c0 <__gethex+0x1ac>
 800b8a0:	1e6b      	subs	r3, r5, #1
 800b8a2:	1159      	asrs	r1, r3, #5
 800b8a4:	f003 021f 	and.w	r2, r3, #31
 800b8a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b8ac:	f04f 0901 	mov.w	r9, #1
 800b8b0:	fa09 f202 	lsl.w	r2, r9, r2
 800b8b4:	420a      	tst	r2, r1
 800b8b6:	d003      	beq.n	800b8c0 <__gethex+0x1ac>
 800b8b8:	454b      	cmp	r3, r9
 800b8ba:	dc36      	bgt.n	800b92a <__gethex+0x216>
 800b8bc:	f04f 0902 	mov.w	r9, #2
 800b8c0:	4629      	mov	r1, r5
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f7ff febe 	bl	800b644 <rshift>
 800b8c8:	442f      	add	r7, r5
 800b8ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b8ce:	42bb      	cmp	r3, r7
 800b8d0:	da42      	bge.n	800b958 <__gethex+0x244>
 800b8d2:	9801      	ldr	r0, [sp, #4]
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	f7fe f937 	bl	8009b48 <_Bfree>
 800b8da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8dc:	2300      	movs	r3, #0
 800b8de:	6013      	str	r3, [r2, #0]
 800b8e0:	25a3      	movs	r5, #163	@ 0xa3
 800b8e2:	e793      	b.n	800b80c <__gethex+0xf8>
 800b8e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b8e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b8ea:	d012      	beq.n	800b912 <__gethex+0x1fe>
 800b8ec:	2b20      	cmp	r3, #32
 800b8ee:	d104      	bne.n	800b8fa <__gethex+0x1e6>
 800b8f0:	f845 bb04 	str.w	fp, [r5], #4
 800b8f4:	f04f 0b00 	mov.w	fp, #0
 800b8f8:	465b      	mov	r3, fp
 800b8fa:	7830      	ldrb	r0, [r6, #0]
 800b8fc:	9303      	str	r3, [sp, #12]
 800b8fe:	f7ff fef3 	bl	800b6e8 <__hexdig_fun>
 800b902:	9b03      	ldr	r3, [sp, #12]
 800b904:	f000 000f 	and.w	r0, r0, #15
 800b908:	4098      	lsls	r0, r3
 800b90a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b90e:	3304      	adds	r3, #4
 800b910:	e7ae      	b.n	800b870 <__gethex+0x15c>
 800b912:	45b1      	cmp	r9, r6
 800b914:	d8ea      	bhi.n	800b8ec <__gethex+0x1d8>
 800b916:	492b      	ldr	r1, [pc, #172]	@ (800b9c4 <__gethex+0x2b0>)
 800b918:	9303      	str	r3, [sp, #12]
 800b91a:	2201      	movs	r2, #1
 800b91c:	4630      	mov	r0, r6
 800b91e:	f7ff fe27 	bl	800b570 <strncmp>
 800b922:	9b03      	ldr	r3, [sp, #12]
 800b924:	2800      	cmp	r0, #0
 800b926:	d1e1      	bne.n	800b8ec <__gethex+0x1d8>
 800b928:	e7a2      	b.n	800b870 <__gethex+0x15c>
 800b92a:	1ea9      	subs	r1, r5, #2
 800b92c:	4620      	mov	r0, r4
 800b92e:	f7fe fd5c 	bl	800a3ea <__any_on>
 800b932:	2800      	cmp	r0, #0
 800b934:	d0c2      	beq.n	800b8bc <__gethex+0x1a8>
 800b936:	f04f 0903 	mov.w	r9, #3
 800b93a:	e7c1      	b.n	800b8c0 <__gethex+0x1ac>
 800b93c:	da09      	bge.n	800b952 <__gethex+0x23e>
 800b93e:	1b75      	subs	r5, r6, r5
 800b940:	4621      	mov	r1, r4
 800b942:	9801      	ldr	r0, [sp, #4]
 800b944:	462a      	mov	r2, r5
 800b946:	f7fe fb17 	bl	8009f78 <__lshift>
 800b94a:	1b7f      	subs	r7, r7, r5
 800b94c:	4604      	mov	r4, r0
 800b94e:	f100 0a14 	add.w	sl, r0, #20
 800b952:	f04f 0900 	mov.w	r9, #0
 800b956:	e7b8      	b.n	800b8ca <__gethex+0x1b6>
 800b958:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b95c:	42bd      	cmp	r5, r7
 800b95e:	dd6f      	ble.n	800ba40 <__gethex+0x32c>
 800b960:	1bed      	subs	r5, r5, r7
 800b962:	42ae      	cmp	r6, r5
 800b964:	dc34      	bgt.n	800b9d0 <__gethex+0x2bc>
 800b966:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b96a:	2b02      	cmp	r3, #2
 800b96c:	d022      	beq.n	800b9b4 <__gethex+0x2a0>
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d024      	beq.n	800b9bc <__gethex+0x2a8>
 800b972:	2b01      	cmp	r3, #1
 800b974:	d115      	bne.n	800b9a2 <__gethex+0x28e>
 800b976:	42ae      	cmp	r6, r5
 800b978:	d113      	bne.n	800b9a2 <__gethex+0x28e>
 800b97a:	2e01      	cmp	r6, #1
 800b97c:	d10b      	bne.n	800b996 <__gethex+0x282>
 800b97e:	9a02      	ldr	r2, [sp, #8]
 800b980:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	2301      	movs	r3, #1
 800b988:	6123      	str	r3, [r4, #16]
 800b98a:	f8ca 3000 	str.w	r3, [sl]
 800b98e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b990:	2562      	movs	r5, #98	@ 0x62
 800b992:	601c      	str	r4, [r3, #0]
 800b994:	e73a      	b.n	800b80c <__gethex+0xf8>
 800b996:	1e71      	subs	r1, r6, #1
 800b998:	4620      	mov	r0, r4
 800b99a:	f7fe fd26 	bl	800a3ea <__any_on>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d1ed      	bne.n	800b97e <__gethex+0x26a>
 800b9a2:	9801      	ldr	r0, [sp, #4]
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	f7fe f8cf 	bl	8009b48 <_Bfree>
 800b9aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	2550      	movs	r5, #80	@ 0x50
 800b9b2:	e72b      	b.n	800b80c <__gethex+0xf8>
 800b9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d1f3      	bne.n	800b9a2 <__gethex+0x28e>
 800b9ba:	e7e0      	b.n	800b97e <__gethex+0x26a>
 800b9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1dd      	bne.n	800b97e <__gethex+0x26a>
 800b9c2:	e7ee      	b.n	800b9a2 <__gethex+0x28e>
 800b9c4:	0800c590 	.word	0x0800c590
 800b9c8:	0800c425 	.word	0x0800c425
 800b9cc:	0800c73e 	.word	0x0800c73e
 800b9d0:	1e6f      	subs	r7, r5, #1
 800b9d2:	f1b9 0f00 	cmp.w	r9, #0
 800b9d6:	d130      	bne.n	800ba3a <__gethex+0x326>
 800b9d8:	b127      	cbz	r7, 800b9e4 <__gethex+0x2d0>
 800b9da:	4639      	mov	r1, r7
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f7fe fd04 	bl	800a3ea <__any_on>
 800b9e2:	4681      	mov	r9, r0
 800b9e4:	117a      	asrs	r2, r7, #5
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b9ec:	f007 071f 	and.w	r7, r7, #31
 800b9f0:	40bb      	lsls	r3, r7
 800b9f2:	4213      	tst	r3, r2
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	bf18      	it	ne
 800b9fa:	f049 0902 	orrne.w	r9, r9, #2
 800b9fe:	f7ff fe21 	bl	800b644 <rshift>
 800ba02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ba06:	1b76      	subs	r6, r6, r5
 800ba08:	2502      	movs	r5, #2
 800ba0a:	f1b9 0f00 	cmp.w	r9, #0
 800ba0e:	d047      	beq.n	800baa0 <__gethex+0x38c>
 800ba10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d015      	beq.n	800ba44 <__gethex+0x330>
 800ba18:	2b03      	cmp	r3, #3
 800ba1a:	d017      	beq.n	800ba4c <__gethex+0x338>
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d109      	bne.n	800ba34 <__gethex+0x320>
 800ba20:	f019 0f02 	tst.w	r9, #2
 800ba24:	d006      	beq.n	800ba34 <__gethex+0x320>
 800ba26:	f8da 3000 	ldr.w	r3, [sl]
 800ba2a:	ea49 0903 	orr.w	r9, r9, r3
 800ba2e:	f019 0f01 	tst.w	r9, #1
 800ba32:	d10e      	bne.n	800ba52 <__gethex+0x33e>
 800ba34:	f045 0510 	orr.w	r5, r5, #16
 800ba38:	e032      	b.n	800baa0 <__gethex+0x38c>
 800ba3a:	f04f 0901 	mov.w	r9, #1
 800ba3e:	e7d1      	b.n	800b9e4 <__gethex+0x2d0>
 800ba40:	2501      	movs	r5, #1
 800ba42:	e7e2      	b.n	800ba0a <__gethex+0x2f6>
 800ba44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba46:	f1c3 0301 	rsb	r3, r3, #1
 800ba4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ba4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d0f0      	beq.n	800ba34 <__gethex+0x320>
 800ba52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ba56:	f104 0314 	add.w	r3, r4, #20
 800ba5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ba5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ba62:	f04f 0c00 	mov.w	ip, #0
 800ba66:	4618      	mov	r0, r3
 800ba68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ba70:	d01b      	beq.n	800baaa <__gethex+0x396>
 800ba72:	3201      	adds	r2, #1
 800ba74:	6002      	str	r2, [r0, #0]
 800ba76:	2d02      	cmp	r5, #2
 800ba78:	f104 0314 	add.w	r3, r4, #20
 800ba7c:	d13c      	bne.n	800baf8 <__gethex+0x3e4>
 800ba7e:	f8d8 2000 	ldr.w	r2, [r8]
 800ba82:	3a01      	subs	r2, #1
 800ba84:	42b2      	cmp	r2, r6
 800ba86:	d109      	bne.n	800ba9c <__gethex+0x388>
 800ba88:	1171      	asrs	r1, r6, #5
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba90:	f006 061f 	and.w	r6, r6, #31
 800ba94:	fa02 f606 	lsl.w	r6, r2, r6
 800ba98:	421e      	tst	r6, r3
 800ba9a:	d13a      	bne.n	800bb12 <__gethex+0x3fe>
 800ba9c:	f045 0520 	orr.w	r5, r5, #32
 800baa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800baa2:	601c      	str	r4, [r3, #0]
 800baa4:	9b02      	ldr	r3, [sp, #8]
 800baa6:	601f      	str	r7, [r3, #0]
 800baa8:	e6b0      	b.n	800b80c <__gethex+0xf8>
 800baaa:	4299      	cmp	r1, r3
 800baac:	f843 cc04 	str.w	ip, [r3, #-4]
 800bab0:	d8d9      	bhi.n	800ba66 <__gethex+0x352>
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	459b      	cmp	fp, r3
 800bab6:	db17      	blt.n	800bae8 <__gethex+0x3d4>
 800bab8:	6861      	ldr	r1, [r4, #4]
 800baba:	9801      	ldr	r0, [sp, #4]
 800babc:	3101      	adds	r1, #1
 800babe:	f7fe f803 	bl	8009ac8 <_Balloc>
 800bac2:	4681      	mov	r9, r0
 800bac4:	b918      	cbnz	r0, 800bace <__gethex+0x3ba>
 800bac6:	4b1a      	ldr	r3, [pc, #104]	@ (800bb30 <__gethex+0x41c>)
 800bac8:	4602      	mov	r2, r0
 800baca:	2184      	movs	r1, #132	@ 0x84
 800bacc:	e6c5      	b.n	800b85a <__gethex+0x146>
 800bace:	6922      	ldr	r2, [r4, #16]
 800bad0:	3202      	adds	r2, #2
 800bad2:	f104 010c 	add.w	r1, r4, #12
 800bad6:	0092      	lsls	r2, r2, #2
 800bad8:	300c      	adds	r0, #12
 800bada:	f7ff fd6b 	bl	800b5b4 <memcpy>
 800bade:	4621      	mov	r1, r4
 800bae0:	9801      	ldr	r0, [sp, #4]
 800bae2:	f7fe f831 	bl	8009b48 <_Bfree>
 800bae6:	464c      	mov	r4, r9
 800bae8:	6923      	ldr	r3, [r4, #16]
 800baea:	1c5a      	adds	r2, r3, #1
 800baec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800baf0:	6122      	str	r2, [r4, #16]
 800baf2:	2201      	movs	r2, #1
 800baf4:	615a      	str	r2, [r3, #20]
 800baf6:	e7be      	b.n	800ba76 <__gethex+0x362>
 800baf8:	6922      	ldr	r2, [r4, #16]
 800bafa:	455a      	cmp	r2, fp
 800bafc:	dd0b      	ble.n	800bb16 <__gethex+0x402>
 800bafe:	2101      	movs	r1, #1
 800bb00:	4620      	mov	r0, r4
 800bb02:	f7ff fd9f 	bl	800b644 <rshift>
 800bb06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb0a:	3701      	adds	r7, #1
 800bb0c:	42bb      	cmp	r3, r7
 800bb0e:	f6ff aee0 	blt.w	800b8d2 <__gethex+0x1be>
 800bb12:	2501      	movs	r5, #1
 800bb14:	e7c2      	b.n	800ba9c <__gethex+0x388>
 800bb16:	f016 061f 	ands.w	r6, r6, #31
 800bb1a:	d0fa      	beq.n	800bb12 <__gethex+0x3fe>
 800bb1c:	4453      	add	r3, sl
 800bb1e:	f1c6 0620 	rsb	r6, r6, #32
 800bb22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb26:	f7fe f8c1 	bl	8009cac <__hi0bits>
 800bb2a:	42b0      	cmp	r0, r6
 800bb2c:	dbe7      	blt.n	800bafe <__gethex+0x3ea>
 800bb2e:	e7f0      	b.n	800bb12 <__gethex+0x3fe>
 800bb30:	0800c425 	.word	0x0800c425

0800bb34 <L_shift>:
 800bb34:	f1c2 0208 	rsb	r2, r2, #8
 800bb38:	0092      	lsls	r2, r2, #2
 800bb3a:	b570      	push	{r4, r5, r6, lr}
 800bb3c:	f1c2 0620 	rsb	r6, r2, #32
 800bb40:	6843      	ldr	r3, [r0, #4]
 800bb42:	6804      	ldr	r4, [r0, #0]
 800bb44:	fa03 f506 	lsl.w	r5, r3, r6
 800bb48:	432c      	orrs	r4, r5
 800bb4a:	40d3      	lsrs	r3, r2
 800bb4c:	6004      	str	r4, [r0, #0]
 800bb4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800bb52:	4288      	cmp	r0, r1
 800bb54:	d3f4      	bcc.n	800bb40 <L_shift+0xc>
 800bb56:	bd70      	pop	{r4, r5, r6, pc}

0800bb58 <__match>:
 800bb58:	b530      	push	{r4, r5, lr}
 800bb5a:	6803      	ldr	r3, [r0, #0]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb62:	b914      	cbnz	r4, 800bb6a <__match+0x12>
 800bb64:	6003      	str	r3, [r0, #0]
 800bb66:	2001      	movs	r0, #1
 800bb68:	bd30      	pop	{r4, r5, pc}
 800bb6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bb72:	2d19      	cmp	r5, #25
 800bb74:	bf98      	it	ls
 800bb76:	3220      	addls	r2, #32
 800bb78:	42a2      	cmp	r2, r4
 800bb7a:	d0f0      	beq.n	800bb5e <__match+0x6>
 800bb7c:	2000      	movs	r0, #0
 800bb7e:	e7f3      	b.n	800bb68 <__match+0x10>

0800bb80 <__hexnan>:
 800bb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb84:	680b      	ldr	r3, [r1, #0]
 800bb86:	6801      	ldr	r1, [r0, #0]
 800bb88:	115e      	asrs	r6, r3, #5
 800bb8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bb8e:	f013 031f 	ands.w	r3, r3, #31
 800bb92:	b087      	sub	sp, #28
 800bb94:	bf18      	it	ne
 800bb96:	3604      	addne	r6, #4
 800bb98:	2500      	movs	r5, #0
 800bb9a:	1f37      	subs	r7, r6, #4
 800bb9c:	4682      	mov	sl, r0
 800bb9e:	4690      	mov	r8, r2
 800bba0:	9301      	str	r3, [sp, #4]
 800bba2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bba6:	46b9      	mov	r9, r7
 800bba8:	463c      	mov	r4, r7
 800bbaa:	9502      	str	r5, [sp, #8]
 800bbac:	46ab      	mov	fp, r5
 800bbae:	784a      	ldrb	r2, [r1, #1]
 800bbb0:	1c4b      	adds	r3, r1, #1
 800bbb2:	9303      	str	r3, [sp, #12]
 800bbb4:	b342      	cbz	r2, 800bc08 <__hexnan+0x88>
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	9105      	str	r1, [sp, #20]
 800bbba:	9204      	str	r2, [sp, #16]
 800bbbc:	f7ff fd94 	bl	800b6e8 <__hexdig_fun>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	d151      	bne.n	800bc68 <__hexnan+0xe8>
 800bbc4:	9a04      	ldr	r2, [sp, #16]
 800bbc6:	9905      	ldr	r1, [sp, #20]
 800bbc8:	2a20      	cmp	r2, #32
 800bbca:	d818      	bhi.n	800bbfe <__hexnan+0x7e>
 800bbcc:	9b02      	ldr	r3, [sp, #8]
 800bbce:	459b      	cmp	fp, r3
 800bbd0:	dd13      	ble.n	800bbfa <__hexnan+0x7a>
 800bbd2:	454c      	cmp	r4, r9
 800bbd4:	d206      	bcs.n	800bbe4 <__hexnan+0x64>
 800bbd6:	2d07      	cmp	r5, #7
 800bbd8:	dc04      	bgt.n	800bbe4 <__hexnan+0x64>
 800bbda:	462a      	mov	r2, r5
 800bbdc:	4649      	mov	r1, r9
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f7ff ffa8 	bl	800bb34 <L_shift>
 800bbe4:	4544      	cmp	r4, r8
 800bbe6:	d952      	bls.n	800bc8e <__hexnan+0x10e>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f1a4 0904 	sub.w	r9, r4, #4
 800bbee:	f844 3c04 	str.w	r3, [r4, #-4]
 800bbf2:	f8cd b008 	str.w	fp, [sp, #8]
 800bbf6:	464c      	mov	r4, r9
 800bbf8:	461d      	mov	r5, r3
 800bbfa:	9903      	ldr	r1, [sp, #12]
 800bbfc:	e7d7      	b.n	800bbae <__hexnan+0x2e>
 800bbfe:	2a29      	cmp	r2, #41	@ 0x29
 800bc00:	d157      	bne.n	800bcb2 <__hexnan+0x132>
 800bc02:	3102      	adds	r1, #2
 800bc04:	f8ca 1000 	str.w	r1, [sl]
 800bc08:	f1bb 0f00 	cmp.w	fp, #0
 800bc0c:	d051      	beq.n	800bcb2 <__hexnan+0x132>
 800bc0e:	454c      	cmp	r4, r9
 800bc10:	d206      	bcs.n	800bc20 <__hexnan+0xa0>
 800bc12:	2d07      	cmp	r5, #7
 800bc14:	dc04      	bgt.n	800bc20 <__hexnan+0xa0>
 800bc16:	462a      	mov	r2, r5
 800bc18:	4649      	mov	r1, r9
 800bc1a:	4620      	mov	r0, r4
 800bc1c:	f7ff ff8a 	bl	800bb34 <L_shift>
 800bc20:	4544      	cmp	r4, r8
 800bc22:	d936      	bls.n	800bc92 <__hexnan+0x112>
 800bc24:	f1a8 0204 	sub.w	r2, r8, #4
 800bc28:	4623      	mov	r3, r4
 800bc2a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc2e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc32:	429f      	cmp	r7, r3
 800bc34:	d2f9      	bcs.n	800bc2a <__hexnan+0xaa>
 800bc36:	1b3b      	subs	r3, r7, r4
 800bc38:	f023 0303 	bic.w	r3, r3, #3
 800bc3c:	3304      	adds	r3, #4
 800bc3e:	3401      	adds	r4, #1
 800bc40:	3e03      	subs	r6, #3
 800bc42:	42b4      	cmp	r4, r6
 800bc44:	bf88      	it	hi
 800bc46:	2304      	movhi	r3, #4
 800bc48:	4443      	add	r3, r8
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f843 2b04 	str.w	r2, [r3], #4
 800bc50:	429f      	cmp	r7, r3
 800bc52:	d2fb      	bcs.n	800bc4c <__hexnan+0xcc>
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	b91b      	cbnz	r3, 800bc60 <__hexnan+0xe0>
 800bc58:	4547      	cmp	r7, r8
 800bc5a:	d128      	bne.n	800bcae <__hexnan+0x12e>
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	603b      	str	r3, [r7, #0]
 800bc60:	2005      	movs	r0, #5
 800bc62:	b007      	add	sp, #28
 800bc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc68:	3501      	adds	r5, #1
 800bc6a:	2d08      	cmp	r5, #8
 800bc6c:	f10b 0b01 	add.w	fp, fp, #1
 800bc70:	dd06      	ble.n	800bc80 <__hexnan+0x100>
 800bc72:	4544      	cmp	r4, r8
 800bc74:	d9c1      	bls.n	800bbfa <__hexnan+0x7a>
 800bc76:	2300      	movs	r3, #0
 800bc78:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc7c:	2501      	movs	r5, #1
 800bc7e:	3c04      	subs	r4, #4
 800bc80:	6822      	ldr	r2, [r4, #0]
 800bc82:	f000 000f 	and.w	r0, r0, #15
 800bc86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bc8a:	6020      	str	r0, [r4, #0]
 800bc8c:	e7b5      	b.n	800bbfa <__hexnan+0x7a>
 800bc8e:	2508      	movs	r5, #8
 800bc90:	e7b3      	b.n	800bbfa <__hexnan+0x7a>
 800bc92:	9b01      	ldr	r3, [sp, #4]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d0dd      	beq.n	800bc54 <__hexnan+0xd4>
 800bc98:	f1c3 0320 	rsb	r3, r3, #32
 800bc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bca0:	40da      	lsrs	r2, r3
 800bca2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bca6:	4013      	ands	r3, r2
 800bca8:	f846 3c04 	str.w	r3, [r6, #-4]
 800bcac:	e7d2      	b.n	800bc54 <__hexnan+0xd4>
 800bcae:	3f04      	subs	r7, #4
 800bcb0:	e7d0      	b.n	800bc54 <__hexnan+0xd4>
 800bcb2:	2004      	movs	r0, #4
 800bcb4:	e7d5      	b.n	800bc62 <__hexnan+0xe2>

0800bcb6 <__ascii_mbtowc>:
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	b901      	cbnz	r1, 800bcbc <__ascii_mbtowc+0x6>
 800bcba:	a901      	add	r1, sp, #4
 800bcbc:	b142      	cbz	r2, 800bcd0 <__ascii_mbtowc+0x1a>
 800bcbe:	b14b      	cbz	r3, 800bcd4 <__ascii_mbtowc+0x1e>
 800bcc0:	7813      	ldrb	r3, [r2, #0]
 800bcc2:	600b      	str	r3, [r1, #0]
 800bcc4:	7812      	ldrb	r2, [r2, #0]
 800bcc6:	1e10      	subs	r0, r2, #0
 800bcc8:	bf18      	it	ne
 800bcca:	2001      	movne	r0, #1
 800bccc:	b002      	add	sp, #8
 800bcce:	4770      	bx	lr
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	e7fb      	b.n	800bccc <__ascii_mbtowc+0x16>
 800bcd4:	f06f 0001 	mvn.w	r0, #1
 800bcd8:	e7f8      	b.n	800bccc <__ascii_mbtowc+0x16>

0800bcda <_realloc_r>:
 800bcda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcde:	4680      	mov	r8, r0
 800bce0:	4615      	mov	r5, r2
 800bce2:	460c      	mov	r4, r1
 800bce4:	b921      	cbnz	r1, 800bcf0 <_realloc_r+0x16>
 800bce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bcea:	4611      	mov	r1, r2
 800bcec:	f7fd be60 	b.w	80099b0 <_malloc_r>
 800bcf0:	b92a      	cbnz	r2, 800bcfe <_realloc_r+0x24>
 800bcf2:	f7fd fde9 	bl	80098c8 <_free_r>
 800bcf6:	2400      	movs	r4, #0
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcfe:	f000 f840 	bl	800bd82 <_malloc_usable_size_r>
 800bd02:	4285      	cmp	r5, r0
 800bd04:	4606      	mov	r6, r0
 800bd06:	d802      	bhi.n	800bd0e <_realloc_r+0x34>
 800bd08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd0c:	d8f4      	bhi.n	800bcf8 <_realloc_r+0x1e>
 800bd0e:	4629      	mov	r1, r5
 800bd10:	4640      	mov	r0, r8
 800bd12:	f7fd fe4d 	bl	80099b0 <_malloc_r>
 800bd16:	4607      	mov	r7, r0
 800bd18:	2800      	cmp	r0, #0
 800bd1a:	d0ec      	beq.n	800bcf6 <_realloc_r+0x1c>
 800bd1c:	42b5      	cmp	r5, r6
 800bd1e:	462a      	mov	r2, r5
 800bd20:	4621      	mov	r1, r4
 800bd22:	bf28      	it	cs
 800bd24:	4632      	movcs	r2, r6
 800bd26:	f7ff fc45 	bl	800b5b4 <memcpy>
 800bd2a:	4621      	mov	r1, r4
 800bd2c:	4640      	mov	r0, r8
 800bd2e:	f7fd fdcb 	bl	80098c8 <_free_r>
 800bd32:	463c      	mov	r4, r7
 800bd34:	e7e0      	b.n	800bcf8 <_realloc_r+0x1e>

0800bd36 <__ascii_wctomb>:
 800bd36:	4603      	mov	r3, r0
 800bd38:	4608      	mov	r0, r1
 800bd3a:	b141      	cbz	r1, 800bd4e <__ascii_wctomb+0x18>
 800bd3c:	2aff      	cmp	r2, #255	@ 0xff
 800bd3e:	d904      	bls.n	800bd4a <__ascii_wctomb+0x14>
 800bd40:	228a      	movs	r2, #138	@ 0x8a
 800bd42:	601a      	str	r2, [r3, #0]
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295
 800bd48:	4770      	bx	lr
 800bd4a:	700a      	strb	r2, [r1, #0]
 800bd4c:	2001      	movs	r0, #1
 800bd4e:	4770      	bx	lr

0800bd50 <fiprintf>:
 800bd50:	b40e      	push	{r1, r2, r3}
 800bd52:	b503      	push	{r0, r1, lr}
 800bd54:	4601      	mov	r1, r0
 800bd56:	ab03      	add	r3, sp, #12
 800bd58:	4805      	ldr	r0, [pc, #20]	@ (800bd70 <fiprintf+0x20>)
 800bd5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd5e:	6800      	ldr	r0, [r0, #0]
 800bd60:	9301      	str	r3, [sp, #4]
 800bd62:	f000 f83f 	bl	800bde4 <_vfiprintf_r>
 800bd66:	b002      	add	sp, #8
 800bd68:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd6c:	b003      	add	sp, #12
 800bd6e:	4770      	bx	lr
 800bd70:	2000002c 	.word	0x2000002c

0800bd74 <abort>:
 800bd74:	b508      	push	{r3, lr}
 800bd76:	2006      	movs	r0, #6
 800bd78:	f000 fa08 	bl	800c18c <raise>
 800bd7c:	2001      	movs	r0, #1
 800bd7e:	f7f7 fd81 	bl	8003884 <_exit>

0800bd82 <_malloc_usable_size_r>:
 800bd82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd86:	1f18      	subs	r0, r3, #4
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	bfbc      	itt	lt
 800bd8c:	580b      	ldrlt	r3, [r1, r0]
 800bd8e:	18c0      	addlt	r0, r0, r3
 800bd90:	4770      	bx	lr

0800bd92 <__sfputc_r>:
 800bd92:	6893      	ldr	r3, [r2, #8]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	b410      	push	{r4}
 800bd9a:	6093      	str	r3, [r2, #8]
 800bd9c:	da08      	bge.n	800bdb0 <__sfputc_r+0x1e>
 800bd9e:	6994      	ldr	r4, [r2, #24]
 800bda0:	42a3      	cmp	r3, r4
 800bda2:	db01      	blt.n	800bda8 <__sfputc_r+0x16>
 800bda4:	290a      	cmp	r1, #10
 800bda6:	d103      	bne.n	800bdb0 <__sfputc_r+0x1e>
 800bda8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdac:	f000 b932 	b.w	800c014 <__swbuf_r>
 800bdb0:	6813      	ldr	r3, [r2, #0]
 800bdb2:	1c58      	adds	r0, r3, #1
 800bdb4:	6010      	str	r0, [r2, #0]
 800bdb6:	7019      	strb	r1, [r3, #0]
 800bdb8:	4608      	mov	r0, r1
 800bdba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <__sfputs_r>:
 800bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	4614      	mov	r4, r2
 800bdc8:	18d5      	adds	r5, r2, r3
 800bdca:	42ac      	cmp	r4, r5
 800bdcc:	d101      	bne.n	800bdd2 <__sfputs_r+0x12>
 800bdce:	2000      	movs	r0, #0
 800bdd0:	e007      	b.n	800bde2 <__sfputs_r+0x22>
 800bdd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd6:	463a      	mov	r2, r7
 800bdd8:	4630      	mov	r0, r6
 800bdda:	f7ff ffda 	bl	800bd92 <__sfputc_r>
 800bdde:	1c43      	adds	r3, r0, #1
 800bde0:	d1f3      	bne.n	800bdca <__sfputs_r+0xa>
 800bde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bde4 <_vfiprintf_r>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	460d      	mov	r5, r1
 800bdea:	b09d      	sub	sp, #116	@ 0x74
 800bdec:	4614      	mov	r4, r2
 800bdee:	4698      	mov	r8, r3
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	b118      	cbz	r0, 800bdfc <_vfiprintf_r+0x18>
 800bdf4:	6a03      	ldr	r3, [r0, #32]
 800bdf6:	b90b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x18>
 800bdf8:	f7fc fdfa 	bl	80089f0 <__sinit>
 800bdfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bdfe:	07d9      	lsls	r1, r3, #31
 800be00:	d405      	bmi.n	800be0e <_vfiprintf_r+0x2a>
 800be02:	89ab      	ldrh	r3, [r5, #12]
 800be04:	059a      	lsls	r2, r3, #22
 800be06:	d402      	bmi.n	800be0e <_vfiprintf_r+0x2a>
 800be08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be0a:	f7fc ff08 	bl	8008c1e <__retarget_lock_acquire_recursive>
 800be0e:	89ab      	ldrh	r3, [r5, #12]
 800be10:	071b      	lsls	r3, r3, #28
 800be12:	d501      	bpl.n	800be18 <_vfiprintf_r+0x34>
 800be14:	692b      	ldr	r3, [r5, #16]
 800be16:	b99b      	cbnz	r3, 800be40 <_vfiprintf_r+0x5c>
 800be18:	4629      	mov	r1, r5
 800be1a:	4630      	mov	r0, r6
 800be1c:	f000 f938 	bl	800c090 <__swsetup_r>
 800be20:	b170      	cbz	r0, 800be40 <_vfiprintf_r+0x5c>
 800be22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be24:	07dc      	lsls	r4, r3, #31
 800be26:	d504      	bpl.n	800be32 <_vfiprintf_r+0x4e>
 800be28:	f04f 30ff 	mov.w	r0, #4294967295
 800be2c:	b01d      	add	sp, #116	@ 0x74
 800be2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be32:	89ab      	ldrh	r3, [r5, #12]
 800be34:	0598      	lsls	r0, r3, #22
 800be36:	d4f7      	bmi.n	800be28 <_vfiprintf_r+0x44>
 800be38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be3a:	f7fc fef1 	bl	8008c20 <__retarget_lock_release_recursive>
 800be3e:	e7f3      	b.n	800be28 <_vfiprintf_r+0x44>
 800be40:	2300      	movs	r3, #0
 800be42:	9309      	str	r3, [sp, #36]	@ 0x24
 800be44:	2320      	movs	r3, #32
 800be46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be4e:	2330      	movs	r3, #48	@ 0x30
 800be50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c000 <_vfiprintf_r+0x21c>
 800be54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be58:	f04f 0901 	mov.w	r9, #1
 800be5c:	4623      	mov	r3, r4
 800be5e:	469a      	mov	sl, r3
 800be60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be64:	b10a      	cbz	r2, 800be6a <_vfiprintf_r+0x86>
 800be66:	2a25      	cmp	r2, #37	@ 0x25
 800be68:	d1f9      	bne.n	800be5e <_vfiprintf_r+0x7a>
 800be6a:	ebba 0b04 	subs.w	fp, sl, r4
 800be6e:	d00b      	beq.n	800be88 <_vfiprintf_r+0xa4>
 800be70:	465b      	mov	r3, fp
 800be72:	4622      	mov	r2, r4
 800be74:	4629      	mov	r1, r5
 800be76:	4630      	mov	r0, r6
 800be78:	f7ff ffa2 	bl	800bdc0 <__sfputs_r>
 800be7c:	3001      	adds	r0, #1
 800be7e:	f000 80a7 	beq.w	800bfd0 <_vfiprintf_r+0x1ec>
 800be82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be84:	445a      	add	r2, fp
 800be86:	9209      	str	r2, [sp, #36]	@ 0x24
 800be88:	f89a 3000 	ldrb.w	r3, [sl]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	f000 809f 	beq.w	800bfd0 <_vfiprintf_r+0x1ec>
 800be92:	2300      	movs	r3, #0
 800be94:	f04f 32ff 	mov.w	r2, #4294967295
 800be98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be9c:	f10a 0a01 	add.w	sl, sl, #1
 800bea0:	9304      	str	r3, [sp, #16]
 800bea2:	9307      	str	r3, [sp, #28]
 800bea4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bea8:	931a      	str	r3, [sp, #104]	@ 0x68
 800beaa:	4654      	mov	r4, sl
 800beac:	2205      	movs	r2, #5
 800beae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800beb2:	4853      	ldr	r0, [pc, #332]	@ (800c000 <_vfiprintf_r+0x21c>)
 800beb4:	f7f4 f9ac 	bl	8000210 <memchr>
 800beb8:	9a04      	ldr	r2, [sp, #16]
 800beba:	b9d8      	cbnz	r0, 800bef4 <_vfiprintf_r+0x110>
 800bebc:	06d1      	lsls	r1, r2, #27
 800bebe:	bf44      	itt	mi
 800bec0:	2320      	movmi	r3, #32
 800bec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bec6:	0713      	lsls	r3, r2, #28
 800bec8:	bf44      	itt	mi
 800beca:	232b      	movmi	r3, #43	@ 0x2b
 800becc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bed0:	f89a 3000 	ldrb.w	r3, [sl]
 800bed4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bed6:	d015      	beq.n	800bf04 <_vfiprintf_r+0x120>
 800bed8:	9a07      	ldr	r2, [sp, #28]
 800beda:	4654      	mov	r4, sl
 800bedc:	2000      	movs	r0, #0
 800bede:	f04f 0c0a 	mov.w	ip, #10
 800bee2:	4621      	mov	r1, r4
 800bee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bee8:	3b30      	subs	r3, #48	@ 0x30
 800beea:	2b09      	cmp	r3, #9
 800beec:	d94b      	bls.n	800bf86 <_vfiprintf_r+0x1a2>
 800beee:	b1b0      	cbz	r0, 800bf1e <_vfiprintf_r+0x13a>
 800bef0:	9207      	str	r2, [sp, #28]
 800bef2:	e014      	b.n	800bf1e <_vfiprintf_r+0x13a>
 800bef4:	eba0 0308 	sub.w	r3, r0, r8
 800bef8:	fa09 f303 	lsl.w	r3, r9, r3
 800befc:	4313      	orrs	r3, r2
 800befe:	9304      	str	r3, [sp, #16]
 800bf00:	46a2      	mov	sl, r4
 800bf02:	e7d2      	b.n	800beaa <_vfiprintf_r+0xc6>
 800bf04:	9b03      	ldr	r3, [sp, #12]
 800bf06:	1d19      	adds	r1, r3, #4
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	9103      	str	r1, [sp, #12]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	bfbb      	ittet	lt
 800bf10:	425b      	neglt	r3, r3
 800bf12:	f042 0202 	orrlt.w	r2, r2, #2
 800bf16:	9307      	strge	r3, [sp, #28]
 800bf18:	9307      	strlt	r3, [sp, #28]
 800bf1a:	bfb8      	it	lt
 800bf1c:	9204      	strlt	r2, [sp, #16]
 800bf1e:	7823      	ldrb	r3, [r4, #0]
 800bf20:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf22:	d10a      	bne.n	800bf3a <_vfiprintf_r+0x156>
 800bf24:	7863      	ldrb	r3, [r4, #1]
 800bf26:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf28:	d132      	bne.n	800bf90 <_vfiprintf_r+0x1ac>
 800bf2a:	9b03      	ldr	r3, [sp, #12]
 800bf2c:	1d1a      	adds	r2, r3, #4
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	9203      	str	r2, [sp, #12]
 800bf32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf36:	3402      	adds	r4, #2
 800bf38:	9305      	str	r3, [sp, #20]
 800bf3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c010 <_vfiprintf_r+0x22c>
 800bf3e:	7821      	ldrb	r1, [r4, #0]
 800bf40:	2203      	movs	r2, #3
 800bf42:	4650      	mov	r0, sl
 800bf44:	f7f4 f964 	bl	8000210 <memchr>
 800bf48:	b138      	cbz	r0, 800bf5a <_vfiprintf_r+0x176>
 800bf4a:	9b04      	ldr	r3, [sp, #16]
 800bf4c:	eba0 000a 	sub.w	r0, r0, sl
 800bf50:	2240      	movs	r2, #64	@ 0x40
 800bf52:	4082      	lsls	r2, r0
 800bf54:	4313      	orrs	r3, r2
 800bf56:	3401      	adds	r4, #1
 800bf58:	9304      	str	r3, [sp, #16]
 800bf5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf5e:	4829      	ldr	r0, [pc, #164]	@ (800c004 <_vfiprintf_r+0x220>)
 800bf60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf64:	2206      	movs	r2, #6
 800bf66:	f7f4 f953 	bl	8000210 <memchr>
 800bf6a:	2800      	cmp	r0, #0
 800bf6c:	d03f      	beq.n	800bfee <_vfiprintf_r+0x20a>
 800bf6e:	4b26      	ldr	r3, [pc, #152]	@ (800c008 <_vfiprintf_r+0x224>)
 800bf70:	bb1b      	cbnz	r3, 800bfba <_vfiprintf_r+0x1d6>
 800bf72:	9b03      	ldr	r3, [sp, #12]
 800bf74:	3307      	adds	r3, #7
 800bf76:	f023 0307 	bic.w	r3, r3, #7
 800bf7a:	3308      	adds	r3, #8
 800bf7c:	9303      	str	r3, [sp, #12]
 800bf7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf80:	443b      	add	r3, r7
 800bf82:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf84:	e76a      	b.n	800be5c <_vfiprintf_r+0x78>
 800bf86:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	2001      	movs	r0, #1
 800bf8e:	e7a8      	b.n	800bee2 <_vfiprintf_r+0xfe>
 800bf90:	2300      	movs	r3, #0
 800bf92:	3401      	adds	r4, #1
 800bf94:	9305      	str	r3, [sp, #20]
 800bf96:	4619      	mov	r1, r3
 800bf98:	f04f 0c0a 	mov.w	ip, #10
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfa2:	3a30      	subs	r2, #48	@ 0x30
 800bfa4:	2a09      	cmp	r2, #9
 800bfa6:	d903      	bls.n	800bfb0 <_vfiprintf_r+0x1cc>
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d0c6      	beq.n	800bf3a <_vfiprintf_r+0x156>
 800bfac:	9105      	str	r1, [sp, #20]
 800bfae:	e7c4      	b.n	800bf3a <_vfiprintf_r+0x156>
 800bfb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e7f0      	b.n	800bf9c <_vfiprintf_r+0x1b8>
 800bfba:	ab03      	add	r3, sp, #12
 800bfbc:	9300      	str	r3, [sp, #0]
 800bfbe:	462a      	mov	r2, r5
 800bfc0:	4b12      	ldr	r3, [pc, #72]	@ (800c00c <_vfiprintf_r+0x228>)
 800bfc2:	a904      	add	r1, sp, #16
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f7fb febb 	bl	8007d40 <_printf_float>
 800bfca:	4607      	mov	r7, r0
 800bfcc:	1c78      	adds	r0, r7, #1
 800bfce:	d1d6      	bne.n	800bf7e <_vfiprintf_r+0x19a>
 800bfd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bfd2:	07d9      	lsls	r1, r3, #31
 800bfd4:	d405      	bmi.n	800bfe2 <_vfiprintf_r+0x1fe>
 800bfd6:	89ab      	ldrh	r3, [r5, #12]
 800bfd8:	059a      	lsls	r2, r3, #22
 800bfda:	d402      	bmi.n	800bfe2 <_vfiprintf_r+0x1fe>
 800bfdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bfde:	f7fc fe1f 	bl	8008c20 <__retarget_lock_release_recursive>
 800bfe2:	89ab      	ldrh	r3, [r5, #12]
 800bfe4:	065b      	lsls	r3, r3, #25
 800bfe6:	f53f af1f 	bmi.w	800be28 <_vfiprintf_r+0x44>
 800bfea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bfec:	e71e      	b.n	800be2c <_vfiprintf_r+0x48>
 800bfee:	ab03      	add	r3, sp, #12
 800bff0:	9300      	str	r3, [sp, #0]
 800bff2:	462a      	mov	r2, r5
 800bff4:	4b05      	ldr	r3, [pc, #20]	@ (800c00c <_vfiprintf_r+0x228>)
 800bff6:	a904      	add	r1, sp, #16
 800bff8:	4630      	mov	r0, r6
 800bffa:	f7fc f939 	bl	8008270 <_printf_i>
 800bffe:	e7e4      	b.n	800bfca <_vfiprintf_r+0x1e6>
 800c000:	0800c6e9 	.word	0x0800c6e9
 800c004:	0800c6f3 	.word	0x0800c6f3
 800c008:	08007d41 	.word	0x08007d41
 800c00c:	0800bdc1 	.word	0x0800bdc1
 800c010:	0800c6ef 	.word	0x0800c6ef

0800c014 <__swbuf_r>:
 800c014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c016:	460e      	mov	r6, r1
 800c018:	4614      	mov	r4, r2
 800c01a:	4605      	mov	r5, r0
 800c01c:	b118      	cbz	r0, 800c026 <__swbuf_r+0x12>
 800c01e:	6a03      	ldr	r3, [r0, #32]
 800c020:	b90b      	cbnz	r3, 800c026 <__swbuf_r+0x12>
 800c022:	f7fc fce5 	bl	80089f0 <__sinit>
 800c026:	69a3      	ldr	r3, [r4, #24]
 800c028:	60a3      	str	r3, [r4, #8]
 800c02a:	89a3      	ldrh	r3, [r4, #12]
 800c02c:	071a      	lsls	r2, r3, #28
 800c02e:	d501      	bpl.n	800c034 <__swbuf_r+0x20>
 800c030:	6923      	ldr	r3, [r4, #16]
 800c032:	b943      	cbnz	r3, 800c046 <__swbuf_r+0x32>
 800c034:	4621      	mov	r1, r4
 800c036:	4628      	mov	r0, r5
 800c038:	f000 f82a 	bl	800c090 <__swsetup_r>
 800c03c:	b118      	cbz	r0, 800c046 <__swbuf_r+0x32>
 800c03e:	f04f 37ff 	mov.w	r7, #4294967295
 800c042:	4638      	mov	r0, r7
 800c044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c046:	6823      	ldr	r3, [r4, #0]
 800c048:	6922      	ldr	r2, [r4, #16]
 800c04a:	1a98      	subs	r0, r3, r2
 800c04c:	6963      	ldr	r3, [r4, #20]
 800c04e:	b2f6      	uxtb	r6, r6
 800c050:	4283      	cmp	r3, r0
 800c052:	4637      	mov	r7, r6
 800c054:	dc05      	bgt.n	800c062 <__swbuf_r+0x4e>
 800c056:	4621      	mov	r1, r4
 800c058:	4628      	mov	r0, r5
 800c05a:	f7ff fa47 	bl	800b4ec <_fflush_r>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d1ed      	bne.n	800c03e <__swbuf_r+0x2a>
 800c062:	68a3      	ldr	r3, [r4, #8]
 800c064:	3b01      	subs	r3, #1
 800c066:	60a3      	str	r3, [r4, #8]
 800c068:	6823      	ldr	r3, [r4, #0]
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	6022      	str	r2, [r4, #0]
 800c06e:	701e      	strb	r6, [r3, #0]
 800c070:	6962      	ldr	r2, [r4, #20]
 800c072:	1c43      	adds	r3, r0, #1
 800c074:	429a      	cmp	r2, r3
 800c076:	d004      	beq.n	800c082 <__swbuf_r+0x6e>
 800c078:	89a3      	ldrh	r3, [r4, #12]
 800c07a:	07db      	lsls	r3, r3, #31
 800c07c:	d5e1      	bpl.n	800c042 <__swbuf_r+0x2e>
 800c07e:	2e0a      	cmp	r6, #10
 800c080:	d1df      	bne.n	800c042 <__swbuf_r+0x2e>
 800c082:	4621      	mov	r1, r4
 800c084:	4628      	mov	r0, r5
 800c086:	f7ff fa31 	bl	800b4ec <_fflush_r>
 800c08a:	2800      	cmp	r0, #0
 800c08c:	d0d9      	beq.n	800c042 <__swbuf_r+0x2e>
 800c08e:	e7d6      	b.n	800c03e <__swbuf_r+0x2a>

0800c090 <__swsetup_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4b29      	ldr	r3, [pc, #164]	@ (800c138 <__swsetup_r+0xa8>)
 800c094:	4605      	mov	r5, r0
 800c096:	6818      	ldr	r0, [r3, #0]
 800c098:	460c      	mov	r4, r1
 800c09a:	b118      	cbz	r0, 800c0a4 <__swsetup_r+0x14>
 800c09c:	6a03      	ldr	r3, [r0, #32]
 800c09e:	b90b      	cbnz	r3, 800c0a4 <__swsetup_r+0x14>
 800c0a0:	f7fc fca6 	bl	80089f0 <__sinit>
 800c0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a8:	0719      	lsls	r1, r3, #28
 800c0aa:	d422      	bmi.n	800c0f2 <__swsetup_r+0x62>
 800c0ac:	06da      	lsls	r2, r3, #27
 800c0ae:	d407      	bmi.n	800c0c0 <__swsetup_r+0x30>
 800c0b0:	2209      	movs	r2, #9
 800c0b2:	602a      	str	r2, [r5, #0]
 800c0b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0b8:	81a3      	strh	r3, [r4, #12]
 800c0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800c0be:	e033      	b.n	800c128 <__swsetup_r+0x98>
 800c0c0:	0758      	lsls	r0, r3, #29
 800c0c2:	d512      	bpl.n	800c0ea <__swsetup_r+0x5a>
 800c0c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0c6:	b141      	cbz	r1, 800c0da <__swsetup_r+0x4a>
 800c0c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0cc:	4299      	cmp	r1, r3
 800c0ce:	d002      	beq.n	800c0d6 <__swsetup_r+0x46>
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	f7fd fbf9 	bl	80098c8 <_free_r>
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0da:	89a3      	ldrh	r3, [r4, #12]
 800c0dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c0e0:	81a3      	strh	r3, [r4, #12]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	6063      	str	r3, [r4, #4]
 800c0e6:	6923      	ldr	r3, [r4, #16]
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	89a3      	ldrh	r3, [r4, #12]
 800c0ec:	f043 0308 	orr.w	r3, r3, #8
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	6923      	ldr	r3, [r4, #16]
 800c0f4:	b94b      	cbnz	r3, 800c10a <__swsetup_r+0x7a>
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c0fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c100:	d003      	beq.n	800c10a <__swsetup_r+0x7a>
 800c102:	4621      	mov	r1, r4
 800c104:	4628      	mov	r0, r5
 800c106:	f000 f883 	bl	800c210 <__smakebuf_r>
 800c10a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c10e:	f013 0201 	ands.w	r2, r3, #1
 800c112:	d00a      	beq.n	800c12a <__swsetup_r+0x9a>
 800c114:	2200      	movs	r2, #0
 800c116:	60a2      	str	r2, [r4, #8]
 800c118:	6962      	ldr	r2, [r4, #20]
 800c11a:	4252      	negs	r2, r2
 800c11c:	61a2      	str	r2, [r4, #24]
 800c11e:	6922      	ldr	r2, [r4, #16]
 800c120:	b942      	cbnz	r2, 800c134 <__swsetup_r+0xa4>
 800c122:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c126:	d1c5      	bne.n	800c0b4 <__swsetup_r+0x24>
 800c128:	bd38      	pop	{r3, r4, r5, pc}
 800c12a:	0799      	lsls	r1, r3, #30
 800c12c:	bf58      	it	pl
 800c12e:	6962      	ldrpl	r2, [r4, #20]
 800c130:	60a2      	str	r2, [r4, #8]
 800c132:	e7f4      	b.n	800c11e <__swsetup_r+0x8e>
 800c134:	2000      	movs	r0, #0
 800c136:	e7f7      	b.n	800c128 <__swsetup_r+0x98>
 800c138:	2000002c 	.word	0x2000002c

0800c13c <_raise_r>:
 800c13c:	291f      	cmp	r1, #31
 800c13e:	b538      	push	{r3, r4, r5, lr}
 800c140:	4605      	mov	r5, r0
 800c142:	460c      	mov	r4, r1
 800c144:	d904      	bls.n	800c150 <_raise_r+0x14>
 800c146:	2316      	movs	r3, #22
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	f04f 30ff 	mov.w	r0, #4294967295
 800c14e:	bd38      	pop	{r3, r4, r5, pc}
 800c150:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c152:	b112      	cbz	r2, 800c15a <_raise_r+0x1e>
 800c154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c158:	b94b      	cbnz	r3, 800c16e <_raise_r+0x32>
 800c15a:	4628      	mov	r0, r5
 800c15c:	f000 f830 	bl	800c1c0 <_getpid_r>
 800c160:	4622      	mov	r2, r4
 800c162:	4601      	mov	r1, r0
 800c164:	4628      	mov	r0, r5
 800c166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c16a:	f000 b817 	b.w	800c19c <_kill_r>
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d00a      	beq.n	800c188 <_raise_r+0x4c>
 800c172:	1c59      	adds	r1, r3, #1
 800c174:	d103      	bne.n	800c17e <_raise_r+0x42>
 800c176:	2316      	movs	r3, #22
 800c178:	6003      	str	r3, [r0, #0]
 800c17a:	2001      	movs	r0, #1
 800c17c:	e7e7      	b.n	800c14e <_raise_r+0x12>
 800c17e:	2100      	movs	r1, #0
 800c180:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c184:	4620      	mov	r0, r4
 800c186:	4798      	blx	r3
 800c188:	2000      	movs	r0, #0
 800c18a:	e7e0      	b.n	800c14e <_raise_r+0x12>

0800c18c <raise>:
 800c18c:	4b02      	ldr	r3, [pc, #8]	@ (800c198 <raise+0xc>)
 800c18e:	4601      	mov	r1, r0
 800c190:	6818      	ldr	r0, [r3, #0]
 800c192:	f7ff bfd3 	b.w	800c13c <_raise_r>
 800c196:	bf00      	nop
 800c198:	2000002c 	.word	0x2000002c

0800c19c <_kill_r>:
 800c19c:	b538      	push	{r3, r4, r5, lr}
 800c19e:	4d07      	ldr	r5, [pc, #28]	@ (800c1bc <_kill_r+0x20>)
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	4604      	mov	r4, r0
 800c1a4:	4608      	mov	r0, r1
 800c1a6:	4611      	mov	r1, r2
 800c1a8:	602b      	str	r3, [r5, #0]
 800c1aa:	f7f7 fb5b 	bl	8003864 <_kill>
 800c1ae:	1c43      	adds	r3, r0, #1
 800c1b0:	d102      	bne.n	800c1b8 <_kill_r+0x1c>
 800c1b2:	682b      	ldr	r3, [r5, #0]
 800c1b4:	b103      	cbz	r3, 800c1b8 <_kill_r+0x1c>
 800c1b6:	6023      	str	r3, [r4, #0]
 800c1b8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ba:	bf00      	nop
 800c1bc:	200007d4 	.word	0x200007d4

0800c1c0 <_getpid_r>:
 800c1c0:	f7f7 bb48 	b.w	8003854 <_getpid>

0800c1c4 <__swhatbuf_r>:
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	460c      	mov	r4, r1
 800c1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1cc:	2900      	cmp	r1, #0
 800c1ce:	b096      	sub	sp, #88	@ 0x58
 800c1d0:	4615      	mov	r5, r2
 800c1d2:	461e      	mov	r6, r3
 800c1d4:	da0d      	bge.n	800c1f2 <__swhatbuf_r+0x2e>
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1dc:	f04f 0100 	mov.w	r1, #0
 800c1e0:	bf14      	ite	ne
 800c1e2:	2340      	movne	r3, #64	@ 0x40
 800c1e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	6031      	str	r1, [r6, #0]
 800c1ec:	602b      	str	r3, [r5, #0]
 800c1ee:	b016      	add	sp, #88	@ 0x58
 800c1f0:	bd70      	pop	{r4, r5, r6, pc}
 800c1f2:	466a      	mov	r2, sp
 800c1f4:	f000 f848 	bl	800c288 <_fstat_r>
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	dbec      	blt.n	800c1d6 <__swhatbuf_r+0x12>
 800c1fc:	9901      	ldr	r1, [sp, #4]
 800c1fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c202:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c206:	4259      	negs	r1, r3
 800c208:	4159      	adcs	r1, r3
 800c20a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c20e:	e7eb      	b.n	800c1e8 <__swhatbuf_r+0x24>

0800c210 <__smakebuf_r>:
 800c210:	898b      	ldrh	r3, [r1, #12]
 800c212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c214:	079d      	lsls	r5, r3, #30
 800c216:	4606      	mov	r6, r0
 800c218:	460c      	mov	r4, r1
 800c21a:	d507      	bpl.n	800c22c <__smakebuf_r+0x1c>
 800c21c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	6123      	str	r3, [r4, #16]
 800c224:	2301      	movs	r3, #1
 800c226:	6163      	str	r3, [r4, #20]
 800c228:	b003      	add	sp, #12
 800c22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c22c:	ab01      	add	r3, sp, #4
 800c22e:	466a      	mov	r2, sp
 800c230:	f7ff ffc8 	bl	800c1c4 <__swhatbuf_r>
 800c234:	9f00      	ldr	r7, [sp, #0]
 800c236:	4605      	mov	r5, r0
 800c238:	4639      	mov	r1, r7
 800c23a:	4630      	mov	r0, r6
 800c23c:	f7fd fbb8 	bl	80099b0 <_malloc_r>
 800c240:	b948      	cbnz	r0, 800c256 <__smakebuf_r+0x46>
 800c242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c246:	059a      	lsls	r2, r3, #22
 800c248:	d4ee      	bmi.n	800c228 <__smakebuf_r+0x18>
 800c24a:	f023 0303 	bic.w	r3, r3, #3
 800c24e:	f043 0302 	orr.w	r3, r3, #2
 800c252:	81a3      	strh	r3, [r4, #12]
 800c254:	e7e2      	b.n	800c21c <__smakebuf_r+0xc>
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	6020      	str	r0, [r4, #0]
 800c25a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c25e:	81a3      	strh	r3, [r4, #12]
 800c260:	9b01      	ldr	r3, [sp, #4]
 800c262:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c266:	b15b      	cbz	r3, 800c280 <__smakebuf_r+0x70>
 800c268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c26c:	4630      	mov	r0, r6
 800c26e:	f000 f81d 	bl	800c2ac <_isatty_r>
 800c272:	b128      	cbz	r0, 800c280 <__smakebuf_r+0x70>
 800c274:	89a3      	ldrh	r3, [r4, #12]
 800c276:	f023 0303 	bic.w	r3, r3, #3
 800c27a:	f043 0301 	orr.w	r3, r3, #1
 800c27e:	81a3      	strh	r3, [r4, #12]
 800c280:	89a3      	ldrh	r3, [r4, #12]
 800c282:	431d      	orrs	r5, r3
 800c284:	81a5      	strh	r5, [r4, #12]
 800c286:	e7cf      	b.n	800c228 <__smakebuf_r+0x18>

0800c288 <_fstat_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d07      	ldr	r5, [pc, #28]	@ (800c2a8 <_fstat_r+0x20>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	4611      	mov	r1, r2
 800c294:	602b      	str	r3, [r5, #0]
 800c296:	f7f7 fb45 	bl	8003924 <_fstat>
 800c29a:	1c43      	adds	r3, r0, #1
 800c29c:	d102      	bne.n	800c2a4 <_fstat_r+0x1c>
 800c29e:	682b      	ldr	r3, [r5, #0]
 800c2a0:	b103      	cbz	r3, 800c2a4 <_fstat_r+0x1c>
 800c2a2:	6023      	str	r3, [r4, #0]
 800c2a4:	bd38      	pop	{r3, r4, r5, pc}
 800c2a6:	bf00      	nop
 800c2a8:	200007d4 	.word	0x200007d4

0800c2ac <_isatty_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d06      	ldr	r5, [pc, #24]	@ (800c2c8 <_isatty_r+0x1c>)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	602b      	str	r3, [r5, #0]
 800c2b8:	f7f7 fb44 	bl	8003944 <_isatty>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_isatty_r+0x1a>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_isatty_r+0x1a>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	200007d4 	.word	0x200007d4

0800c2cc <_init>:
 800c2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ce:	bf00      	nop
 800c2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2d2:	bc08      	pop	{r3}
 800c2d4:	469e      	mov	lr, r3
 800c2d6:	4770      	bx	lr

0800c2d8 <_fini>:
 800c2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2da:	bf00      	nop
 800c2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2de:	bc08      	pop	{r3}
 800c2e0:	469e      	mov	lr, r3
 800c2e2:	4770      	bx	lr
