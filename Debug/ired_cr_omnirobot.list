
ired_cr_omnirobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ad0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c8  08012ca0  08012ca0  00022ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013568  08013568  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08013568  08013568  00023568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013570  08013570  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013570  08013570  00023570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013578  08013578  00023578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801357c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011cc  200001e8  08013764  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200013b4  08013764  000313b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f67c  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035de  00000000  00000000  0004f8d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00052eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010c8  00000000  00000000  00054400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026ea6  00000000  00000000  000554c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b4a7  00000000  00000000  0007c36e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de2a9  00000000  00000000  00097815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007278  00000000  00000000  00175ac0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0017cd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08012c88 	.word	0x08012c88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08012c88 	.word	0x08012c88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_ZN3ros22normalizeSecNSecSignedERlS0_>:
#include "ros/duration.h"

namespace ros
{
void normalizeSecNSecSigned(int32_t &sec, int32_t &nsec)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  int32_t nsec_part = nsec;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	60fb      	str	r3, [r7, #12]
  int32_t sec_part = sec;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	60bb      	str	r3, [r7, #8]

  while (nsec_part > 1000000000L)
 8001046:	e006      	b.n	8001056 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x26>
  {
    nsec_part -= 1000000000L;
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <_ZN3ros22normalizeSecNSecSignedERlS0_+0x5c>)
 800104c:	4413      	add	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]
    ++sec_part;
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	3301      	adds	r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
  while (nsec_part > 1000000000L)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x60>)
 800105a:	4293      	cmp	r3, r2
 800105c:	dcf4      	bgt.n	8001048 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x18>
  }
  while (nsec_part < 0)
 800105e:	e006      	b.n	800106e <_ZN3ros22normalizeSecNSecSignedERlS0_+0x3e>
  {
    nsec_part += 1000000000L;
 8001060:	68fa      	ldr	r2, [r7, #12]
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x60>)
 8001064:	4413      	add	r3, r2
 8001066:	60fb      	str	r3, [r7, #12]
    --sec_part;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	3b01      	subs	r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
  while (nsec_part < 0)
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2b00      	cmp	r3, #0
 8001072:	dbf5      	blt.n	8001060 <_ZN3ros22normalizeSecNSecSignedERlS0_+0x30>
  }
  sec = sec_part;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	601a      	str	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	c4653600 	.word	0xc4653600
 8001090:	3b9aca00 	.word	0x3b9aca00

08001094 <_ZN3ros8DurationC1Ev>:
class Duration
{
public:
  int32_t sec, nsec;

  Duration() : sec(0), nsec(0) {}
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	605a      	str	r2, [r3, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	0a5a      	lsrs	r2, r3, #9
 80010c8:	490f      	ldr	r1, [pc, #60]	; (8001108 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80010ca:	fba1 1202 	umull	r1, r2, r1, r2
 80010ce:	09d2      	lsrs	r2, r2, #7
 80010d0:	490e      	ldr	r1, [pc, #56]	; (800110c <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80010d2:	fb01 f202 	mul.w	r2, r1, r2
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	0a5b      	lsrs	r3, r3, #9
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	09db      	lsrs	r3, r3, #7
 80010e8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	441a      	add	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	00044b83 	.word	0x00044b83
 800110c:	3b9aca00 	.word	0x3b9aca00

08001110 <_ZNK3ros4TimemiERKS0_>:
  nsec = nsec + 1000000000UL - rhs.nsec;
  normalizeSecNSec(sec, nsec);
  return *this;
}

Duration Time::operator-(const Time &rhs) const {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  // Note: Considers wrap around as a continuation of time, e.g.,
  // (0,0) - (0xFFFFFFFF, 0) = (1, 0)
  Duration d;
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f7ff ffb9 	bl	8001094 <_ZN3ros8DurationC1Ev>
  d.sec = sec > rhs.sec ? sec - rhs.sec : -(rhs.sec - sec);
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	461a      	mov	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	601a      	str	r2, [r3, #0]
  d.nsec = nsec > rhs.nsec ? nsec - rhs.nsec : -(rhs.nsec - nsec);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	461a      	mov	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	605a      	str	r2, [r3, #4]
  normalizeSecNSecSigned(d.sec, d.nsec);
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	3304      	adds	r3, #4
 8001146:	4619      	mov	r1, r3
 8001148:	68f8      	ldr	r0, [r7, #12]
 800114a:	f7ff ff71 	bl	8001030 <_ZN3ros22normalizeSecNSecSignedERlS0_>
  return d;
 800114e:	bf00      	nop
}
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <_ZN7MPU92509getAngleXEv>:
		double getAccAngleY() {
			return angleAccY;
		}
		;

		double getAngleX() {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
			return angleX;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8001166:	ec43 2b17 	vmov	d7, r2, r3
		}
 800116a:	eeb0 0a47 	vmov.f32	s0, s14
 800116e:	eef0 0a67 	vmov.f32	s1, s15
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <_ZN7MPU92509getAngleYEv>:
		;
		double getAngleY() {
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
			return angleY;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800118a:	ec43 2b17 	vmov	d7, r2, r3
		}
 800118e:	eeb0 0a47 	vmov.f32	s0, s14
 8001192:	eef0 0a67 	vmov.f32	s1, s15
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_ZN7MPU92509getAngleZEv>:
		;
		double getAngleZ() {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
			return angleZ;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80011ae:	ec43 2b17 	vmov	d7, r2, r3
		}
 80011b2:	eeb0 0a47 	vmov.f32	s0, s14
 80011b6:	eef0 0a67 	vmov.f32	s1, s15
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	0000      	movs	r0, r0
	...

080011c8 <_ZNK3ros8Duration5toSecEv>:
  Duration(int32_t _sec, int32_t _nsec) : sec(_sec), nsec(_nsec)
  {
    normalizeSecNSecSigned(sec, nsec);
  }

  double toSec() const
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  {
    return (double)sec + 1e-9 * (double)nsec;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9c5 	bl	8000564 <__aeabi_i2d>
 80011da:	4604      	mov	r4, r0
 80011dc:	460d      	mov	r5, r1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9be 	bl	8000564 <__aeabi_i2d>
 80011e8:	a30b      	add	r3, pc, #44	; (adr r3, 8001218 <_ZNK3ros8Duration5toSecEv+0x50>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	f7ff fa23 	bl	8000638 <__aeabi_dmul>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff f867 	bl	80002cc <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	ec43 2b17 	vmov	d7, r2, r3
  };
 8001206:	eeb0 0a47 	vmov.f32	s0, s14
 800120a:	eef0 0a67 	vmov.f32	s1, s15
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bdb0      	pop	{r4, r5, r7, pc}
 8001214:	f3af 8000 	nop.w
 8001218:	e826d695 	.word	0xe826d695
 800121c:	3e112e0b 	.word	0x3e112e0b

08001220 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	4a04      	ldr	r2, [pc, #16]	; (8001260 <_ZN3ros3MsgC1Ev+0x1c>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	0801309c 	.word	0x0801309c

08001264 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
      data()
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ffe8 	bl	8001244 <_ZN3ros3MsgC1Ev>
 8001274:	4a06      	ldr	r2, [pc, #24]	; (8001290 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3304      	adds	r3, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ffce 	bl	8001220 <_ZN3ros4TimeC1Ev>
    {
    }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	08013084 	.word	0x08013084

08001294 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6859      	ldr	r1, [r3, #4]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	b2ca      	uxtb	r2, r1
 80012ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	0a19      	lsrs	r1, r3, #8
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	3301      	adds	r3, #1
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4413      	add	r3, r2
 80012be:	b2ca      	uxtb	r2, r1
 80012c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	0c19      	lsrs	r1, r3, #16
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3302      	adds	r3, #2
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	b2ca      	uxtb	r2, r1
 80012d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	0e19      	lsrs	r1, r3, #24
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	3303      	adds	r3, #3
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	4413      	add	r3, r2
 80012e2:	b2ca      	uxtb	r2, r1
 80012e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3304      	adds	r3, #4
 80012ea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	4413      	add	r3, r2
 80012f6:	b2ca      	uxtb	r2, r1
 80012f8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	0a19      	lsrs	r1, r3, #8
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	3301      	adds	r3, #1
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	b2ca      	uxtb	r2, r1
 800130a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	0c19      	lsrs	r1, r3, #16
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3302      	adds	r3, #2
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	4413      	add	r3, r2
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	0e19      	lsrs	r1, r3, #24
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3303      	adds	r3, #3
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	4413      	add	r3, r2
 800132c:	b2ca      	uxtb	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	3304      	adds	r3, #4
 8001334:	60fb      	str	r3, [r7, #12]
      return offset;
 8001336:	68fb      	ldr	r3, [r7, #12]
    }
 8001338:	4618      	mov	r0, r3
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685a      	ldr	r2, [r3, #4]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	3301      	adds	r3, #1
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	440b      	add	r3, r1
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3302      	adds	r3, #2
 800137e:	6839      	ldr	r1, [r7, #0]
 8001380:	440b      	add	r3, r1
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	041b      	lsls	r3, r3, #16
 8001386:	431a      	orrs	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3303      	adds	r3, #3
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	440b      	add	r3, r1
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	061b      	lsls	r3, r3, #24
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	3304      	adds	r3, #4
 80013a6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	4413      	add	r3, r2
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689a      	ldr	r2, [r3, #8]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3301      	adds	r3, #1
 80013be:	6839      	ldr	r1, [r7, #0]
 80013c0:	440b      	add	r3, r1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3302      	adds	r3, #2
 80013d4:	6839      	ldr	r1, [r7, #0]
 80013d6:	440b      	add	r3, r1
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	041b      	lsls	r3, r3, #16
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3303      	adds	r3, #3
 80013ea:	6839      	ldr	r1, [r7, #0]
 80013ec:	440b      	add	r3, r1
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	061b      	lsls	r3, r3, #24
 80013f2:	431a      	orrs	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3304      	adds	r3, #4
 80013fc:	60fb      	str	r3, [r7, #12]
     return offset;
 80013fe:	68fb      	ldr	r3, [r7, #12]
    }
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	08012ca0 	.word	0x08012ca0

08001428 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	08012cb0 	.word	0x08012cb0

08001444 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fef8 	bl	8001244 <_ZN3ros3MsgC1Ev>
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001464:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a07      	ldr	r2, [pc, #28]	; (8001488 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800146a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a06      	ldr	r2, [pc, #24]	; (8001488 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001470:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
    {
    }
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	0801306c 	.word	0x0801306c
 8001488:	08012cd4 	.word	0x08012cd4

0800148c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	8899      	ldrh	r1, [r3, #4]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	b2ca      	uxtb	r2, r1
 80014a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	889b      	ldrh	r3, [r3, #4]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b299      	uxth	r1, r3
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3301      	adds	r3, #1
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	4413      	add	r3, r2
 80014b8:	b2ca      	uxtb	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	3302      	adds	r3, #2
 80014c0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe fef2 	bl	80002b0 <strlen>
 80014cc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	69b9      	ldr	r1, [r7, #24]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f005 fa75 	bl	80069c6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	3304      	adds	r3, #4
 80014e0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	18d0      	adds	r0, r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4619      	mov	r1, r3
 80014f0:	f00e f83f 	bl	800f572 <memcpy>
      offset += length_topic_name;
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4413      	add	r3, r2
 80014fa:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4618      	mov	r0, r3
 8001502:	f7fe fed5 	bl	80002b0 <strlen>
 8001506:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	4413      	add	r3, r2
 800150e:	6979      	ldr	r1, [r7, #20]
 8001510:	4618      	mov	r0, r3
 8001512:	f005 fa58 	bl	80069c6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	18d0      	adds	r0, r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	4619      	mov	r1, r3
 800152a:	f00e f822 	bl	800f572 <memcpy>
      offset += length_message_type;
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	4413      	add	r3, r2
 8001534:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe feb8 	bl	80002b0 <strlen>
 8001540:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	4413      	add	r3, r2
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	4618      	mov	r0, r3
 800154c:	f005 fa3b 	bl	80069c6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	3304      	adds	r3, #4
 8001554:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	18d0      	adds	r0, r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4619      	mov	r1, r3
 8001564:	f00e f805 	bl	800f572 <memcpy>
      offset += length_md5sum;
 8001568:	69fa      	ldr	r2, [r7, #28]
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4413      	add	r3, r2
 800156e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001576:	68f9      	ldr	r1, [r7, #12]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	4413      	add	r3, r2
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	0a19      	lsrs	r1, r3, #8
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3301      	adds	r3, #1
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	4413      	add	r3, r2
 800158e:	b2ca      	uxtb	r2, r1
 8001590:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0c19      	lsrs	r1, r3, #16
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3302      	adds	r3, #2
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	4413      	add	r3, r2
 800159e:	b2ca      	uxtb	r2, r1
 80015a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	0e19      	lsrs	r1, r3, #24
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3303      	adds	r3, #3
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	4413      	add	r3, r2
 80015ae:	b2ca      	uxtb	r2, r1
 80015b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	61fb      	str	r3, [r7, #28]
      return offset;
 80015b8:	69fb      	ldr	r3, [r7, #28]
    }
 80015ba:	4618      	mov	r0, r3
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b08a      	sub	sp, #40	; 0x28
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	889b      	ldrh	r3, [r3, #4]
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	3301      	adds	r3, #1
 80015e8:	6839      	ldr	r1, [r7, #0]
 80015ea:	440b      	add	r3, r1
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	4313      	orrs	r3, r2
 80015f4:	b21b      	sxth	r3, r3
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3302      	adds	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	441a      	add	r2, r3
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4611      	mov	r1, r2
 800160e:	4618      	mov	r0, r3
 8001610:	f005 f9f8 	bl	8006a04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	3304      	adds	r3, #4
 8001618:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
 800161e:	e00b      	b.n	8001638 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	441a      	add	r2, r3
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	3b01      	subs	r3, #1
 800162a:	6839      	ldr	r1, [r7, #0]
 800162c:	440b      	add	r3, r1
 800162e:	7812      	ldrb	r2, [r2, #0]
 8001630:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4413      	add	r3, r2
 800163e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001640:	429a      	cmp	r2, r3
 8001642:	d3ed      	bcc.n	8001620 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	4413      	add	r3, r2
 800164a:	3b01      	subs	r3, #1
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	4413      	add	r3, r2
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	3b01      	subs	r3, #1
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	441a      	add	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	4413      	add	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	441a      	add	r2, r3
 800166e:	f107 0310 	add.w	r3, r7, #16
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f005 f9c5 	bl	8006a04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	3304      	adds	r3, #4
 800167e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	e00b      	b.n	800169e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8001686:	683a      	ldr	r2, [r7, #0]
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	441a      	add	r2, r3
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	3b01      	subs	r3, #1
 8001690:	6839      	ldr	r1, [r7, #0]
 8001692:	440b      	add	r3, r1
 8001694:	7812      	ldrb	r2, [r2, #0]
 8001696:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	3301      	adds	r3, #1
 800169c:	623b      	str	r3, [r7, #32]
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4413      	add	r3, r2
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d3ed      	bcc.n	8001686 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	4413      	add	r3, r2
 80016b0:	3b01      	subs	r3, #1
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	3b01      	subs	r3, #1
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	441a      	add	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4413      	add	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	441a      	add	r2, r3
 80016d4:	f107 030c 	add.w	r3, r7, #12
 80016d8:	4611      	mov	r1, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f005 f992 	bl	8006a04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	3304      	adds	r3, #4
 80016e4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	61fb      	str	r3, [r7, #28]
 80016ea:	e00b      	b.n	8001704 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	441a      	add	r2, r3
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	440b      	add	r3, r1
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3301      	adds	r3, #1
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	d3ed      	bcc.n	80016ec <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4413      	add	r3, r2
 8001716:	3b01      	subs	r3, #1
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	4413      	add	r3, r2
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	3b01      	subs	r3, #1
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	441a      	add	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4413      	add	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	440a      	add	r2, r1
 8001740:	7812      	ldrb	r2, [r2, #0]
 8001742:	4313      	orrs	r3, r2
 8001744:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	3301      	adds	r3, #1
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	440b      	add	r3, r1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	021b      	lsls	r3, r3, #8
 8001754:	4313      	orrs	r3, r2
 8001756:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	69bb      	ldr	r3, [r7, #24]
 800175c:	3302      	adds	r3, #2
 800175e:	6839      	ldr	r1, [r7, #0]
 8001760:	440b      	add	r3, r1
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	041b      	lsls	r3, r3, #16
 8001766:	4313      	orrs	r3, r2
 8001768:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	3303      	adds	r3, #3
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	440b      	add	r3, r1
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	061b      	lsls	r3, r3, #24
 8001778:	4313      	orrs	r3, r2
 800177a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800177c:	68ba      	ldr	r2, [r7, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	3304      	adds	r3, #4
 8001786:	61bb      	str	r3, [r7, #24]
     return offset;
 8001788:	69bb      	ldr	r3, [r7, #24]
    }
 800178a:	4618      	mov	r0, r3
 800178c:	3728      	adds	r7, #40	; 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	4b03      	ldr	r3, [pc, #12]	; (80017ac <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	08012cd8 	.word	0x08012cd8

080017b0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	08012cf4 	.word	0x08012cf4

080017cc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fd34 	bl	8001244 <_ZN3ros3MsgC1Ev>
 80017dc:	4a06      	ldr	r2, [pc, #24]	; (80017f8 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	601a      	str	r2, [r3, #0]
      level(0),
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	711a      	strb	r2, [r3, #4]
      msg("")
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a04      	ldr	r2, [pc, #16]	; (80017fc <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80017ec:	609a      	str	r2, [r3, #8]
    {
    }
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	08013054 	.word	0x08013054
 80017fc:	08012cd4 	.word	0x08012cd4

08001800 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	4413      	add	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	7912      	ldrb	r2, [r2, #4]
 8001818:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3301      	adds	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fd43 	bl	80002b0 <strlen>
 800182a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	4413      	add	r3, r2
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	4618      	mov	r0, r3
 8001836:	f005 f8c6 	bl	80069c6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	3304      	adds	r3, #4
 800183e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	18d0      	adds	r0, r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	4619      	mov	r1, r3
 800184e:	f00d fe90 	bl	800f572 <memcpy>
      offset += length_msg;
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
      return offset;
 800185a:	68fb      	ldr	r3, [r7, #12]
    }
 800185c:	4618      	mov	r0, r3
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	4413      	add	r3, r2
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	3301      	adds	r3, #1
 8001882:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	441a      	add	r2, r3
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f005 f8b7 	bl	8006a04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	3304      	adds	r3, #4
 800189a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00b      	b.n	80018ba <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	441a      	add	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	6839      	ldr	r1, [r7, #0]
 80018ae:	440b      	add	r3, r1
 80018b0:	7812      	ldrb	r2, [r2, #0]
 80018b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4413      	add	r3, r2
 80018c0:	697a      	ldr	r2, [r7, #20]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3ed      	bcc.n	80018a2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4413      	add	r3, r2
 80018cc:	3b01      	subs	r3, #1
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4413      	add	r3, r2
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	3b01      	subs	r3, #1
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	441a      	add	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4413      	add	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
     return offset;
 80018ea:	693b      	ldr	r3, [r7, #16]
    }
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80018fe:	4618      	mov	r0, r3
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	08012d18 	.word	0x08012d18

08001910 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	08012d2c 	.word	0x08012d2c

0800192c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fc84 	bl	8001244 <_ZN3ros3MsgC1Ev>
 800193c:	4a11      	ldr	r2, [pc, #68]	; (8001984 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2200      	movs	r2, #0
 8001952:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	61da      	str	r2, [r3, #28]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	621a      	str	r2, [r3, #32]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	0801303c 	.word	0x0801303c

08001988 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	; 0x28
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6859      	ldr	r1, [r3, #4]
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	4413      	add	r3, r2
 80019a0:	b2ca      	uxtb	r2, r1
 80019a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0a19      	lsrs	r1, r3, #8
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	3301      	adds	r3, #1
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	4413      	add	r3, r2
 80019b2:	b2ca      	uxtb	r2, r1
 80019b4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	0c19      	lsrs	r1, r3, #16
 80019bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019be:	3302      	adds	r3, #2
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	b2ca      	uxtb	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	0e19      	lsrs	r1, r3, #24
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	3303      	adds	r3, #3
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	b2ca      	uxtb	r2, r1
 80019d8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	3304      	adds	r3, #4
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80019e0:	2300      	movs	r3, #0
 80019e2:	623b      	str	r3, [r7, #32]
 80019e4:	e02a      	b.n	8001a3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80019f4:	6939      	ldr	r1, [r7, #16]
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	b2ca      	uxtb	r2, r1
 80019fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	0a19      	lsrs	r1, r3, #8
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	3301      	adds	r3, #1
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b2ca      	uxtb	r2, r1
 8001a0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	0c19      	lsrs	r1, r3, #16
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	3302      	adds	r3, #2
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2ca      	uxtb	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	0e19      	lsrs	r1, r3, #24
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	3303      	adds	r3, #3
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b2ca      	uxtb	r2, r1
 8001a2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	3304      	adds	r3, #4
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	623b      	str	r3, [r7, #32]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	6a3a      	ldr	r2, [r7, #32]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d3cf      	bcc.n	80019e6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	b2ca      	uxtb	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	0a19      	lsrs	r1, r3, #8
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	683a      	ldr	r2, [r7, #0]
 8001a60:	4413      	add	r3, r2
 8001a62:	b2ca      	uxtb	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	0c19      	lsrs	r1, r3, #16
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6e:	3302      	adds	r3, #2
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	b2ca      	uxtb	r2, r1
 8001a76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	0e19      	lsrs	r1, r3, #24
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	3303      	adds	r3, #3
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	b2ca      	uxtb	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001a90:	2300      	movs	r3, #0
 8001a92:	61fb      	str	r3, [r7, #28]
 8001a94:	e02a      	b.n	8001aec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	4413      	add	r3, r2
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001aa4:	68f9      	ldr	r1, [r7, #12]
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	0a19      	lsrs	r1, r3, #8
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	b2ca      	uxtb	r2, r1
 8001abe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	0c19      	lsrs	r1, r3, #16
 8001ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac6:	3302      	adds	r3, #2
 8001ac8:	683a      	ldr	r2, [r7, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	b2ca      	uxtb	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	0e19      	lsrs	r1, r3, #24
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	3303      	adds	r3, #3
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	b2ca      	uxtb	r2, r1
 8001ade:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d3cf      	bcc.n	8001a96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69d9      	ldr	r1, [r3, #28]
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	b2ca      	uxtb	r2, r1
 8001b02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	0a19      	lsrs	r1, r3, #8
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	4413      	add	r3, r2
 8001b12:	b2ca      	uxtb	r2, r1
 8001b14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	0c19      	lsrs	r1, r3, #16
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	3302      	adds	r3, #2
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	0e19      	lsrs	r1, r3, #24
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	3303      	adds	r3, #3
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001b40:	2300      	movs	r3, #0
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	e027      	b.n	8001b96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	4413      	add	r3, r2
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fbac 	bl	80002b0 <strlen>
 8001b58:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	4413      	add	r3, r2
 8001b60:	6979      	ldr	r1, [r7, #20]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 ff2f 	bl	80069c6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	18d0      	adds	r0, r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	4619      	mov	r1, r3
 8001b84:	f00d fcf5 	bl	800f572 <memcpy>
      offset += length_stringsi;
 8001b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	3301      	adds	r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3d2      	bcc.n	8001b46 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3728      	adds	r7, #40	; 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b08e      	sub	sp, #56	; 0x38
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	4413      	add	r3, r2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	6a3a      	ldr	r2, [r7, #32]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	041b      	lsls	r3, r3, #16
 8001be0:	6a3a      	ldr	r2, [r7, #32]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be8:	3303      	adds	r3, #3
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	4413      	add	r3, r2
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	061b      	lsls	r3, r3, #24
 8001bf2:	6a3a      	ldr	r2, [r7, #32]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	6a3a      	ldr	r2, [r7, #32]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d90a      	bls.n	8001c1e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f00c fc5a 	bl	800e4cc <realloc>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a3a      	ldr	r2, [r7, #32]
 8001c22:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001c24:	2300      	movs	r3, #0
 8001c26:	633b      	str	r3, [r7, #48]	; 0x30
 8001c28:	e035      	b.n	8001c96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c32:	6839      	ldr	r1, [r7, #0]
 8001c34:	440a      	add	r2, r1
 8001c36:	7812      	ldrb	r2, [r2, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c40:	3301      	adds	r3, #1
 8001c42:	6839      	ldr	r1, [r7, #0]
 8001c44:	440b      	add	r3, r1
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c4e:	697a      	ldr	r2, [r7, #20]
 8001c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c52:	3302      	adds	r3, #2
 8001c54:	6839      	ldr	r1, [r7, #0]
 8001c56:	440b      	add	r3, r1
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	041b      	lsls	r3, r3, #16
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c64:	3303      	adds	r3, #3
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	440b      	add	r3, r1
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	061b      	lsls	r3, r3, #24
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7a:	3304      	adds	r3, #4
 8001c7c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c92:	3301      	adds	r3, #1
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3c4      	bcc.n	8001c2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cac:	3301      	adds	r3, #1
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	021b      	lsls	r3, r3, #8
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	041b      	lsls	r3, r3, #16
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd0:	3303      	adds	r3, #3
 8001cd2:	683a      	ldr	r2, [r7, #0]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	69fa      	ldr	r2, [r7, #28]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	69fa      	ldr	r2, [r7, #28]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d90a      	bls.n	8001d06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f00c fbe6 	bl	800e4cc <realloc>
 8001d00:	4602      	mov	r2, r0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d10:	e035      	b.n	8001d7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	440a      	add	r2, r1
 8001d1e:	7812      	ldrb	r2, [r2, #0]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d28:	3301      	adds	r3, #1
 8001d2a:	6839      	ldr	r1, [r7, #0]
 8001d2c:	440b      	add	r3, r1
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	4313      	orrs	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	6839      	ldr	r1, [r7, #0]
 8001d3e:	440b      	add	r3, r1
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	041b      	lsls	r3, r3, #16
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4c:	3303      	adds	r3, #3
 8001d4e:	6839      	ldr	r1, [r7, #0]
 8001d50:	440b      	add	r3, r1
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d62:	3304      	adds	r3, #4
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	699a      	ldr	r2, [r3, #24]
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	3214      	adds	r2, #20
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d3c4      	bcc.n	8001d12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d94:	3301      	adds	r3, #1
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	3302      	adds	r3, #2
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	4413      	add	r3, r2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db8:	3303      	adds	r3, #3
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	3304      	adds	r3, #4
 8001dcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d90a      	bls.n	8001dee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4619      	mov	r1, r3
 8001de2:	4610      	mov	r0, r2
 8001de4:	f00c fb72 	bl	800e4cc <realloc>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df8:	e03e      	b.n	8001e78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	441a      	add	r2, r3
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	4611      	mov	r1, r2
 8001e06:	4618      	mov	r0, r3
 8001e08:	f004 fdfc 	bl	8006a04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0e:	3304      	adds	r3, #4
 8001e10:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
 8001e16:	e00b      	b.n	8001e30 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	441a      	add	r2, r3
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	3b01      	subs	r3, #1
 8001e22:	6839      	ldr	r1, [r7, #0]
 8001e24:	440b      	add	r3, r1
 8001e26:	7812      	ldrb	r2, [r2, #0]
 8001e28:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4413      	add	r3, r2
 8001e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d3ed      	bcc.n	8001e18 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	3b01      	subs	r3, #1
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	4413      	add	r3, r2
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	441a      	add	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	3220      	adds	r2, #32
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	3301      	adds	r3, #1
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d3bb      	bcc.n	8001dfa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001e84:	4618      	mov	r0, r3
 8001e86:	3738      	adds	r7, #56	; 0x38
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	4b03      	ldr	r3, [pc, #12]	; (8001ea4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	08012f30 	.word	0x08012f30

08001ea8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	08012d50 	.word	0x08012d50

08001ec4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68d8      	ldr	r0, [r3, #12]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6891      	ldr	r1, [r2, #8]
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4798      	blx	r3
 8001f10:	4603      	mov	r3, r0
  };
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
  }
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
      huart(&huart1), rind(0), twind(0), tfind(0){
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <_ZN13STM32HardwareC1Ev+0x34>)
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4618      	mov	r0, r3
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	2000040c 	.word	0x2000040c

08001f90 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f804 	bl	8001fa6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f00a fdfc 	bl	800cbb8 <HAL_UART_Receive_DMA>
    }
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd4:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ffa8 	bl	8001f32 <_ZN13STM32Hardware10getRdmaIndEv>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	429c      	cmp	r4, r3
 8001fe6:	bf14      	ite	ne
 8001fe8:	2301      	movne	r3, #1
 8001fea:	2300      	moveq	r3, #0
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d012      	beq.n	8002018 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ff8:	1c59      	adds	r1, r3, #1
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4413      	add	r3, r2
 8002004:	791b      	ldrb	r3, [r3, #4]
 8002006:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800200e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002018:	68fb      	ldr	r3, [r7, #12]
    }
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bd90      	pop	{r4, r7, pc}
	...

08002024 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b20      	cmp	r3, #32
 8002038:	d108      	bne.n	800204c <_ZN13STM32Hardware5flushEv+0x28>
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <_ZN13STM32Hardware5flushEv+0xb8>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f083 0301 	eor.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <_ZN13STM32Hardware5flushEv+0x28>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <_ZN13STM32Hardware5flushEv+0x2a>
 800204c:	2300      	movs	r3, #0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03f      	beq.n	80020d2 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002052:	4b22      	ldr	r3, [pc, #136]	; (80020dc <_ZN13STM32Hardware5flushEv+0xb8>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002064:	429a      	cmp	r2, r3
 8002066:	d031      	beq.n	80020cc <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002074:	429a      	cmp	r2, r3
 8002076:	d20a      	bcs.n	800208e <_ZN13STM32Hardware5flushEv+0x6a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800207e:	b29a      	uxth	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002086:	b29b      	uxth	r3, r3
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	b29b      	uxth	r3, r3
 800208c:	e006      	b.n	800209c <_ZN13STM32Hardware5flushEv+0x78>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002094:	b29b      	uxth	r3, r3
 8002096:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800209a:	b29b      	uxth	r3, r3
 800209c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020a8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	4413      	add	r3, r2
 80020b0:	89fa      	ldrh	r2, [r7, #14]
 80020b2:	4619      	mov	r1, r3
 80020b4:	f00a fd10 	bl	800cad8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80020be:	89fb      	ldrh	r3, [r7, #14]
 80020c0:	4413      	add	r3, r2
 80020c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <_ZN13STM32Hardware5flushEv+0xb8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
      }
    }
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	20000204 	.word	0x20000204

080020e0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
      int n = length;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f6:	bfa8      	it	ge
 80020f8:	f44f 7300 	movge.w	r3, #512	; 0x200
 80020fc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= (int)(tbuflen - twind) ? n : tbuflen - twind;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002104:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002108:	461a      	mov	r2, r3
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	4293      	cmp	r3, r2
 800210e:	bfa8      	it	ge
 8002110:	4613      	movge	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800211a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	4618      	mov	r0, r3
 8002128:	f00d fa23 	bl	800f572 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	4413      	add	r3, r2
 8002136:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	429a      	cmp	r2, r3
 8002146:	d00b      	beq.n	8002160 <_ZN13STM32Hardware5writeEPhi+0x80>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	18d1      	adds	r1, r2, r3
 8002154:	697a      	ldr	r2, [r7, #20]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	461a      	mov	r2, r3
 800215c:	f00d fa09 	bl	800f572 <memcpy>
      }

      flush();
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff ff5f 	bl	8002024 <_ZN13STM32Hardware5flushEv>
    }
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
 8002176:	f006 fe23 	bl	8008dc0 <HAL_GetTick>
 800217a:	4603      	mov	r3, r0
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff f858 	bl	8001244 <_ZN3ros3MsgC1Ev>
 8002194:	4a0e      	ldr	r2, [pc, #56]	; (80021d0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	601a      	str	r2, [r3, #0]
      x(0),
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80021a8:	6879      	ldr	r1, [r7, #4]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	08012ff8 	.word	0x08012ff8

080021d4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80021d4:	b480      	push	{r7}
 80021d6:	b08b      	sub	sp, #44	; 0x2c
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80021e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80021ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f2:	6838      	ldr	r0, [r7, #0]
 80021f4:	4401      	add	r1, r0
 80021f6:	b2d3      	uxtb	r3, r2
 80021f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80021fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	0a02      	lsrs	r2, r0, #8
 8002208:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800220c:	0a0b      	lsrs	r3, r1, #8
 800220e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002210:	3101      	adds	r1, #1
 8002212:	6838      	ldr	r0, [r7, #0]
 8002214:	4401      	add	r1, r0
 8002216:	b2d3      	uxtb	r3, r2
 8002218:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800221a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	0c02      	lsrs	r2, r0, #16
 8002228:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800222c:	0c0b      	lsrs	r3, r1, #16
 800222e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002230:	3102      	adds	r1, #2
 8002232:	6838      	ldr	r0, [r7, #0]
 8002234:	4401      	add	r1, r0
 8002236:	b2d3      	uxtb	r3, r2
 8002238:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800223a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800223e:	f04f 0200 	mov.w	r2, #0
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	0e02      	lsrs	r2, r0, #24
 8002248:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800224c:	0e0b      	lsrs	r3, r1, #24
 800224e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002250:	3103      	adds	r1, #3
 8002252:	6838      	ldr	r0, [r7, #0]
 8002254:	4401      	add	r1, r0
 8002256:	b2d3      	uxtb	r3, r2
 8002258:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800225a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	000a      	movs	r2, r1
 8002268:	2300      	movs	r3, #0
 800226a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800226c:	3104      	adds	r1, #4
 800226e:	6838      	ldr	r0, [r7, #0]
 8002270:	4401      	add	r1, r0
 8002272:	b2d3      	uxtb	r3, r2
 8002274:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8002276:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	0a0a      	lsrs	r2, r1, #8
 8002284:	2300      	movs	r3, #0
 8002286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002288:	3105      	adds	r1, #5
 800228a:	6838      	ldr	r0, [r7, #0]
 800228c:	4401      	add	r1, r0
 800228e:	b2d3      	uxtb	r3, r2
 8002290:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002292:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	0c0a      	lsrs	r2, r1, #16
 80022a0:	2300      	movs	r3, #0
 80022a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a4:	3106      	adds	r1, #6
 80022a6:	6838      	ldr	r0, [r7, #0]
 80022a8:	4401      	add	r1, r0
 80022aa:	b2d3      	uxtb	r3, r2
 80022ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80022ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	0e0a      	lsrs	r2, r1, #24
 80022bc:	2300      	movs	r3, #0
 80022be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022c0:	3107      	adds	r1, #7
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	4401      	add	r1, r0
 80022c6:	b2d3      	uxtb	r3, r2
 80022c8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	3308      	adds	r3, #8
 80022ce:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80022d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80022da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022e0:	6838      	ldr	r0, [r7, #0]
 80022e2:	4401      	add	r1, r0
 80022e4:	b2d3      	uxtb	r3, r2
 80022e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80022e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022ec:	f04f 0200 	mov.w	r2, #0
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	0a02      	lsrs	r2, r0, #8
 80022f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80022fa:	0a0b      	lsrs	r3, r1, #8
 80022fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022fe:	3101      	adds	r1, #1
 8002300:	6838      	ldr	r0, [r7, #0]
 8002302:	4401      	add	r1, r0
 8002304:	b2d3      	uxtb	r3, r2
 8002306:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002308:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	0c02      	lsrs	r2, r0, #16
 8002316:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800231a:	0c0b      	lsrs	r3, r1, #16
 800231c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800231e:	3102      	adds	r1, #2
 8002320:	6838      	ldr	r0, [r7, #0]
 8002322:	4401      	add	r1, r0
 8002324:	b2d3      	uxtb	r3, r2
 8002326:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002328:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	0e02      	lsrs	r2, r0, #24
 8002336:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800233a:	0e0b      	lsrs	r3, r1, #24
 800233c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800233e:	3103      	adds	r1, #3
 8002340:	6838      	ldr	r0, [r7, #0]
 8002342:	4401      	add	r1, r0
 8002344:	b2d3      	uxtb	r3, r2
 8002346:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002348:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	000a      	movs	r2, r1
 8002356:	2300      	movs	r3, #0
 8002358:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800235a:	3104      	adds	r1, #4
 800235c:	6838      	ldr	r0, [r7, #0]
 800235e:	4401      	add	r1, r0
 8002360:	b2d3      	uxtb	r3, r2
 8002362:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002364:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	0a0a      	lsrs	r2, r1, #8
 8002372:	2300      	movs	r3, #0
 8002374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002376:	3105      	adds	r1, #5
 8002378:	6838      	ldr	r0, [r7, #0]
 800237a:	4401      	add	r1, r0
 800237c:	b2d3      	uxtb	r3, r2
 800237e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002380:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	f04f 0300 	mov.w	r3, #0
 800238c:	0c0a      	lsrs	r2, r1, #16
 800238e:	2300      	movs	r3, #0
 8002390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002392:	3106      	adds	r1, #6
 8002394:	6838      	ldr	r0, [r7, #0]
 8002396:	4401      	add	r1, r0
 8002398:	b2d3      	uxtb	r3, r2
 800239a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800239c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	0e0a      	lsrs	r2, r1, #24
 80023aa:	2300      	movs	r3, #0
 80023ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ae:	3107      	adds	r1, #7
 80023b0:	6838      	ldr	r0, [r7, #0]
 80023b2:	4401      	add	r1, r0
 80023b4:	b2d3      	uxtb	r3, r2
 80023b6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	3308      	adds	r3, #8
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023c4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80023c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ce:	6838      	ldr	r0, [r7, #0]
 80023d0:	4401      	add	r1, r0
 80023d2:	b2d3      	uxtb	r3, r2
 80023d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80023d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	0a02      	lsrs	r2, r0, #8
 80023e4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80023e8:	0a0b      	lsrs	r3, r1, #8
 80023ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ec:	3101      	adds	r1, #1
 80023ee:	6838      	ldr	r0, [r7, #0]
 80023f0:	4401      	add	r1, r0
 80023f2:	b2d3      	uxtb	r3, r2
 80023f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80023f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	0c02      	lsrs	r2, r0, #16
 8002404:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002408:	0c0b      	lsrs	r3, r1, #16
 800240a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240c:	3102      	adds	r1, #2
 800240e:	6838      	ldr	r0, [r7, #0]
 8002410:	4401      	add	r1, r0
 8002412:	b2d3      	uxtb	r3, r2
 8002414:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8002416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	0e02      	lsrs	r2, r0, #24
 8002424:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002428:	0e0b      	lsrs	r3, r1, #24
 800242a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800242c:	3103      	adds	r1, #3
 800242e:	6838      	ldr	r0, [r7, #0]
 8002430:	4401      	add	r1, r0
 8002432:	b2d3      	uxtb	r3, r2
 8002434:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8002436:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	000a      	movs	r2, r1
 8002444:	2300      	movs	r3, #0
 8002446:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002448:	3104      	adds	r1, #4
 800244a:	6838      	ldr	r0, [r7, #0]
 800244c:	4401      	add	r1, r0
 800244e:	b2d3      	uxtb	r3, r2
 8002450:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002452:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	0a0a      	lsrs	r2, r1, #8
 8002460:	2300      	movs	r3, #0
 8002462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002464:	3105      	adds	r1, #5
 8002466:	6838      	ldr	r0, [r7, #0]
 8002468:	4401      	add	r1, r0
 800246a:	b2d3      	uxtb	r3, r2
 800246c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800246e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	0c0a      	lsrs	r2, r1, #16
 800247c:	2300      	movs	r3, #0
 800247e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002480:	3106      	adds	r1, #6
 8002482:	6838      	ldr	r0, [r7, #0]
 8002484:	4401      	add	r1, r0
 8002486:	b2d3      	uxtb	r3, r2
 8002488:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800248a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	f04f 0300 	mov.w	r3, #0
 8002496:	0e0a      	lsrs	r2, r1, #24
 8002498:	2300      	movs	r3, #0
 800249a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800249c:	3107      	adds	r1, #7
 800249e:	6838      	ldr	r0, [r7, #0]
 80024a0:	4401      	add	r1, r0
 80024a2:	b2d3      	uxtb	r3, r2
 80024a4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	3308      	adds	r3, #8
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80024ae:	4618      	mov	r0, r3
 80024b0:	372c      	adds	r7, #44	; 0x2c
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80024ba:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024be:	b0eb      	sub	sp, #428	; 0x1ac
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80024c6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80024dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024e0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80024e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024e8:	4413      	add	r3, r2
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2200      	movs	r2, #0
 80024f0:	461c      	mov	r4, r3
 80024f2:	4615      	mov	r5, r2
 80024f4:	ea40 0804 	orr.w	r8, r0, r4
 80024f8:	ea41 0905 	orr.w	r9, r1, r5
 80024fc:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002500:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002504:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800250e:	4413      	add	r3, r2
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2200      	movs	r2, #0
 8002516:	469a      	mov	sl, r3
 8002518:	4693      	mov	fp, r2
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002526:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800252a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800252e:	ea40 0402 	orr.w	r4, r0, r2
 8002532:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002536:	430b      	orrs	r3, r1
 8002538:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800253c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002540:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002544:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002548:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800254c:	1c9a      	adds	r2, r3, #2
 800254e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002552:	4413      	add	r3, r2
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2200      	movs	r2, #0
 800255a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800255e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002562:	f04f 0200 	mov.w	r2, #0
 8002566:	f04f 0300 	mov.w	r3, #0
 800256a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800256e:	464c      	mov	r4, r9
 8002570:	0423      	lsls	r3, r4, #16
 8002572:	4644      	mov	r4, r8
 8002574:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002578:	4644      	mov	r4, r8
 800257a:	0422      	lsls	r2, r4, #16
 800257c:	ea40 0402 	orr.w	r4, r0, r2
 8002580:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002584:	430b      	orrs	r3, r1
 8002586:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800258a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800258e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002592:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002596:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800259a:	1cda      	adds	r2, r3, #3
 800259c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025a0:	4413      	add	r3, r2
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2200      	movs	r2, #0
 80025a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80025ac:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80025b0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80025b4:	4623      	mov	r3, r4
 80025b6:	0a1b      	lsrs	r3, r3, #8
 80025b8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80025bc:	4623      	mov	r3, r4
 80025be:	061b      	lsls	r3, r3, #24
 80025c0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80025c4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80025c8:	4623      	mov	r3, r4
 80025ca:	4303      	orrs	r3, r0
 80025cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025d0:	462b      	mov	r3, r5
 80025d2:	430b      	orrs	r3, r1
 80025d4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025d8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80025dc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80025e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80025e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025e8:	1d1a      	adds	r2, r3, #4
 80025ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025ee:	4413      	add	r3, r2
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2200      	movs	r2, #0
 80025f6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80025fa:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800260a:	0023      	movs	r3, r4
 800260c:	2200      	movs	r2, #0
 800260e:	ea40 0402 	orr.w	r4, r0, r2
 8002612:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002616:	430b      	orrs	r3, r1
 8002618:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800261c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002620:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002624:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002628:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800262c:	1d5a      	adds	r2, r3, #5
 800262e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002632:	4413      	add	r3, r2
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2200      	movs	r2, #0
 800263a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800263e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002642:	f04f 0200 	mov.w	r2, #0
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800264e:	0223      	lsls	r3, r4, #8
 8002650:	2200      	movs	r2, #0
 8002652:	ea40 0402 	orr.w	r4, r0, r2
 8002656:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800265a:	430b      	orrs	r3, r1
 800265c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002660:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002664:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002668:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800266c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002670:	1d9a      	adds	r2, r3, #6
 8002672:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002676:	4413      	add	r3, r2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002682:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002692:	0423      	lsls	r3, r4, #16
 8002694:	2200      	movs	r2, #0
 8002696:	ea40 0402 	orr.w	r4, r0, r2
 800269a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800269e:	430b      	orrs	r3, r1
 80026a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026a4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80026a8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80026ac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80026b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026b4:	1dda      	adds	r2, r3, #7
 80026b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80026c6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80026d6:	0623      	lsls	r3, r4, #24
 80026d8:	2200      	movs	r2, #0
 80026da:	ea40 0402 	orr.w	r4, r0, r2
 80026de:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80026e2:	430b      	orrs	r3, r1
 80026e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80026e8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80026ec:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80026f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80026f4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80026f8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80026fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002700:	3308      	adds	r3, #8
 8002702:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002712:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002716:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800271a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800271e:	4413      	add	r3, r2
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2200      	movs	r2, #0
 8002726:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800272a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800272e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002732:	4623      	mov	r3, r4
 8002734:	4303      	orrs	r3, r0
 8002736:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800273a:	462b      	mov	r3, r5
 800273c:	430b      	orrs	r3, r1
 800273e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002742:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002746:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800274a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800274e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002758:	4413      	add	r3, r2
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2200      	movs	r2, #0
 8002760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002764:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002774:	464c      	mov	r4, r9
 8002776:	0223      	lsls	r3, r4, #8
 8002778:	4644      	mov	r4, r8
 800277a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800277e:	4644      	mov	r4, r8
 8002780:	0222      	lsls	r2, r4, #8
 8002782:	ea40 0402 	orr.w	r4, r0, r2
 8002786:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800278a:	430b      	orrs	r3, r1
 800278c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002790:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002794:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002798:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800279c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027a0:	1c9a      	adds	r2, r3, #2
 80027a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80027c2:	464c      	mov	r4, r9
 80027c4:	0423      	lsls	r3, r4, #16
 80027c6:	4644      	mov	r4, r8
 80027c8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80027cc:	4644      	mov	r4, r8
 80027ce:	0422      	lsls	r2, r4, #16
 80027d0:	ea40 0402 	orr.w	r4, r0, r2
 80027d4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80027d8:	430b      	orrs	r3, r1
 80027da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027de:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80027e2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027e6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027ee:	1cda      	adds	r2, r3, #3
 80027f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027f4:	4413      	add	r3, r2
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002800:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002804:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002808:	4623      	mov	r3, r4
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002810:	4623      	mov	r3, r4
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002818:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800281c:	4623      	mov	r3, r4
 800281e:	4303      	orrs	r3, r0
 8002820:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002824:	462b      	mov	r3, r5
 8002826:	430b      	orrs	r3, r1
 8002828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800282c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002830:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002834:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002838:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800283c:	1d1a      	adds	r2, r3, #4
 800283e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002842:	4413      	add	r3, r2
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2200      	movs	r2, #0
 800284a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800284e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002852:	f04f 0200 	mov.w	r2, #0
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800285e:	0023      	movs	r3, r4
 8002860:	2200      	movs	r2, #0
 8002862:	ea40 0402 	orr.w	r4, r0, r2
 8002866:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800286a:	430b      	orrs	r3, r1
 800286c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002870:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002874:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002878:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800287c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002880:	1d5a      	adds	r2, r3, #5
 8002882:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2200      	movs	r2, #0
 800288e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002892:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80028a2:	0223      	lsls	r3, r4, #8
 80028a4:	2200      	movs	r2, #0
 80028a6:	ea40 0402 	orr.w	r4, r0, r2
 80028aa:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80028ae:	430b      	orrs	r3, r1
 80028b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028b4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80028b8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80028bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80028c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028c4:	1d9a      	adds	r2, r3, #6
 80028c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028ca:	4413      	add	r3, r2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2200      	movs	r2, #0
 80028d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80028d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80028e6:	0423      	lsls	r3, r4, #16
 80028e8:	2200      	movs	r2, #0
 80028ea:	ea40 0402 	orr.w	r4, r0, r2
 80028ee:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80028f2:	430b      	orrs	r3, r1
 80028f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80028f8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80028fc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002900:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002904:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002908:	1dda      	adds	r2, r3, #7
 800290a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800290e:	4413      	add	r3, r2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2200      	movs	r2, #0
 8002916:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800291a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800292a:	0623      	lsls	r3, r4, #24
 800292c:	2200      	movs	r2, #0
 800292e:	ea40 0402 	orr.w	r4, r0, r2
 8002932:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002936:	430b      	orrs	r3, r1
 8002938:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800293c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002940:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002944:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002948:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800294c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002950:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002954:	3308      	adds	r3, #8
 8002956:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002966:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800296a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800296e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002972:	4413      	add	r3, r2
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2200      	movs	r2, #0
 800297a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800297e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002982:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002986:	4623      	mov	r3, r4
 8002988:	4303      	orrs	r3, r0
 800298a:	67bb      	str	r3, [r7, #120]	; 0x78
 800298c:	462b      	mov	r3, r5
 800298e:	430b      	orrs	r3, r1
 8002990:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002992:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002996:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800299a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800299e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2200      	movs	r2, #0
 80029b0:	673b      	str	r3, [r7, #112]	; 0x70
 80029b2:	677a      	str	r2, [r7, #116]	; 0x74
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80029c0:	464c      	mov	r4, r9
 80029c2:	0223      	lsls	r3, r4, #8
 80029c4:	4644      	mov	r4, r8
 80029c6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80029ca:	4644      	mov	r4, r8
 80029cc:	0222      	lsls	r2, r4, #8
 80029ce:	ea40 0402 	orr.w	r4, r0, r2
 80029d2:	66bc      	str	r4, [r7, #104]	; 0x68
 80029d4:	430b      	orrs	r3, r1
 80029d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029d8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80029dc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80029e0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029e8:	1c9a      	adds	r2, r3, #2
 80029ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029ee:	4413      	add	r3, r2
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2200      	movs	r2, #0
 80029f6:	663b      	str	r3, [r7, #96]	; 0x60
 80029f8:	667a      	str	r2, [r7, #100]	; 0x64
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a06:	464c      	mov	r4, r9
 8002a08:	0423      	lsls	r3, r4, #16
 8002a0a:	4644      	mov	r4, r8
 8002a0c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a10:	4644      	mov	r4, r8
 8002a12:	0422      	lsls	r2, r4, #16
 8002a14:	ea40 0402 	orr.w	r4, r0, r2
 8002a18:	65bc      	str	r4, [r7, #88]	; 0x58
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a1e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002a22:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a26:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a2e:	1cda      	adds	r2, r3, #3
 8002a30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a34:	4413      	add	r3, r2
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8002a3e:	657a      	str	r2, [r7, #84]	; 0x54
 8002a40:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002a44:	4623      	mov	r3, r4
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a4a:	4623      	mov	r3, r4
 8002a4c:	061b      	lsls	r3, r3, #24
 8002a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a50:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002a54:	4623      	mov	r3, r4
 8002a56:	4303      	orrs	r3, r0
 8002a58:	643b      	str	r3, [r7, #64]	; 0x40
 8002a5a:	462b      	mov	r3, r5
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a60:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002a64:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a68:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a70:	1d1a      	adds	r2, r3, #4
 8002a72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002a8c:	0023      	movs	r3, r4
 8002a8e:	2200      	movs	r2, #0
 8002a90:	ea40 0402 	orr.w	r4, r0, r2
 8002a94:	633c      	str	r4, [r7, #48]	; 0x30
 8002a96:	430b      	orrs	r3, r1
 8002a98:	637b      	str	r3, [r7, #52]	; 0x34
 8002a9a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002a9e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002aa2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002aa6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002aaa:	1d5a      	adds	r2, r3, #5
 8002aac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ab0:	4413      	add	r3, r2
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002abc:	f04f 0200 	mov.w	r2, #0
 8002ac0:	f04f 0300 	mov.w	r3, #0
 8002ac4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002ac6:	0223      	lsls	r3, r4, #8
 8002ac8:	2200      	movs	r2, #0
 8002aca:	ea40 0402 	orr.w	r4, r0, r2
 8002ace:	623c      	str	r4, [r7, #32]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002ad8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002adc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ae0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ae4:	3306      	adds	r3, #6
 8002ae6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2200      	movs	r2, #0
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	61fa      	str	r2, [r7, #28]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	69bc      	ldr	r4, [r7, #24]
 8002b00:	0423      	lsls	r3, r4, #16
 8002b02:	2200      	movs	r2, #0
 8002b04:	ea40 0402 	orr.w	r4, r0, r2
 8002b08:	613c      	str	r4, [r7, #16]
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b12:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b1e:	3307      	adds	r3, #7
 8002b20:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002b24:	4413      	add	r3, r2
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	60fa      	str	r2, [r7, #12]
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	68bc      	ldr	r4, [r7, #8]
 8002b3a:	0623      	lsls	r3, r4, #24
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	ea40 0402 	orr.w	r4, r0, r2
 8002b42:	603c      	str	r4, [r7, #0]
 8002b44:	430b      	orrs	r3, r1
 8002b46:	607b      	str	r3, [r7, #4]
 8002b48:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b4c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002b50:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002b54:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002b58:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002b5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b60:	3308      	adds	r3, #8
 8002b62:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002b66:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002b76:	4770      	bx	lr

08002b78 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	4b03      	ldr	r3, [pc, #12]	; (8002b90 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	08012d74 	.word	0x08012d74

08002b94 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	4b03      	ldr	r3, [pc, #12]	; (8002bac <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	08012d8c 	.word	0x08012d8c

08002bb0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe fb42 	bl	8001244 <_ZN3ros3MsgC1Ev>
 8002bc0:	4a08      	ldr	r2, [pc, #32]	; (8002be4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	601a      	str	r2, [r3, #0]
      linear(),
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3308      	adds	r3, #8
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fada 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3328      	adds	r3, #40	; 0x28
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fad5 	bl	8002184 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	08012fe0 	.word	0x08012fe0

08002be8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f103 0008 	add.w	r0, r3, #8
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7ff fae6 	bl	80021d4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f7ff fad9 	bl	80021d4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c22:	4602      	mov	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
    }
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f103 0008 	add.w	r0, r3, #8
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	4619      	mov	r1, r3
 8002c50:	f7ff fc33 	bl	80024ba <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4413      	add	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	4413      	add	r3, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f7ff fc26 	bl	80024ba <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
     return offset;
 8002c76:	68fb      	ldr	r3, [r7, #12]
    }
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	08012db0 	.word	0x08012db0

08002c9c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	4b03      	ldr	r3, [pc, #12]	; (8002cb4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	08012dc4 	.word	0x08012dc4

08002cb8 <_ZN9ired_msgs3IMUC1Ev>:
      typedef double _pitch_type;
      _pitch_type pitch;
      typedef double _yaw_type;
      _yaw_type yaw;

    IMU():
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
      roll(0),
      pitch(0),
      yaw(0)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fabe 	bl	8001244 <_ZN3ros3MsgC1Ev>
 8002cc8:	4a0e      	ldr	r2, [pc, #56]	; (8002d04 <_ZN9ired_msgs3IMUC1Ev+0x4c>)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	601a      	str	r2, [r3, #0]
      roll(0),
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	f04f 0200 	mov.w	r2, #0
 8002cd4:	f04f 0300 	mov.w	r3, #0
 8002cd8:	e9c1 2302 	strd	r2, r3, [r1, #8]
      pitch(0),
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	e9c1 2304 	strd	r2, r3, [r1, #16]
      yaw(0)
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	08012fc8 	.word	0x08012fc8

08002d08 <_ZNK9ired_msgs3IMU9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d08:	b480      	push	{r7}
 8002d0a:	b08b      	sub	sp, #44	; 0x2c
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d12:	2300      	movs	r3, #0
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_roll;
      u_roll.real = this->roll;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002d1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_roll.base >> (8 * 0)) & 0xFF;
 8002d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d26:	6838      	ldr	r0, [r7, #0]
 8002d28:	4401      	add	r1, r0
 8002d2a:	b2d3      	uxtb	r3, r2
 8002d2c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_roll.base >> (8 * 1)) & 0xFF;
 8002d2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	f04f 0300 	mov.w	r3, #0
 8002d3a:	0a02      	lsrs	r2, r0, #8
 8002d3c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002d40:	0a0b      	lsrs	r3, r1, #8
 8002d42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d44:	3101      	adds	r1, #1
 8002d46:	6838      	ldr	r0, [r7, #0]
 8002d48:	4401      	add	r1, r0
 8002d4a:	b2d3      	uxtb	r3, r2
 8002d4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_roll.base >> (8 * 2)) & 0xFF;
 8002d4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	0c02      	lsrs	r2, r0, #16
 8002d5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002d60:	0c0b      	lsrs	r3, r1, #16
 8002d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d64:	3102      	adds	r1, #2
 8002d66:	6838      	ldr	r0, [r7, #0]
 8002d68:	4401      	add	r1, r0
 8002d6a:	b2d3      	uxtb	r3, r2
 8002d6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_roll.base >> (8 * 3)) & 0xFF;
 8002d6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	0e02      	lsrs	r2, r0, #24
 8002d7c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d80:	0e0b      	lsrs	r3, r1, #24
 8002d82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d84:	3103      	adds	r1, #3
 8002d86:	6838      	ldr	r0, [r7, #0]
 8002d88:	4401      	add	r1, r0
 8002d8a:	b2d3      	uxtb	r3, r2
 8002d8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_roll.base >> (8 * 4)) & 0xFF;
 8002d8e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	000a      	movs	r2, r1
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002da0:	3104      	adds	r1, #4
 8002da2:	6838      	ldr	r0, [r7, #0]
 8002da4:	4401      	add	r1, r0
 8002da6:	b2d3      	uxtb	r3, r2
 8002da8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_roll.base >> (8 * 5)) & 0xFF;
 8002daa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	0a0a      	lsrs	r2, r1, #8
 8002db8:	2300      	movs	r3, #0
 8002dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbc:	3105      	adds	r1, #5
 8002dbe:	6838      	ldr	r0, [r7, #0]
 8002dc0:	4401      	add	r1, r0
 8002dc2:	b2d3      	uxtb	r3, r2
 8002dc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_roll.base >> (8 * 6)) & 0xFF;
 8002dc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	0c0a      	lsrs	r2, r1, #16
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dd8:	3106      	adds	r1, #6
 8002dda:	6838      	ldr	r0, [r7, #0]
 8002ddc:	4401      	add	r1, r0
 8002dde:	b2d3      	uxtb	r3, r2
 8002de0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_roll.base >> (8 * 7)) & 0xFF;
 8002de2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	0e0a      	lsrs	r2, r1, #24
 8002df0:	2300      	movs	r3, #0
 8002df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df4:	3107      	adds	r1, #7
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	4401      	add	r1, r0
 8002dfa:	b2d3      	uxtb	r3, r2
 8002dfc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->roll);
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	3308      	adds	r3, #8
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_pitch;
      u_pitch.real = this->pitch;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e0a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_pitch.base >> (8 * 0)) & 0xFF;
 8002e0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e14:	6838      	ldr	r0, [r7, #0]
 8002e16:	4401      	add	r1, r0
 8002e18:	b2d3      	uxtb	r3, r2
 8002e1a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pitch.base >> (8 * 1)) & 0xFF;
 8002e1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	0a02      	lsrs	r2, r0, #8
 8002e2a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002e2e:	0a0b      	lsrs	r3, r1, #8
 8002e30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e32:	3101      	adds	r1, #1
 8002e34:	6838      	ldr	r0, [r7, #0]
 8002e36:	4401      	add	r1, r0
 8002e38:	b2d3      	uxtb	r3, r2
 8002e3a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pitch.base >> (8 * 2)) & 0xFF;
 8002e3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	0c02      	lsrs	r2, r0, #16
 8002e4a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e4e:	0c0b      	lsrs	r3, r1, #16
 8002e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e52:	3102      	adds	r1, #2
 8002e54:	6838      	ldr	r0, [r7, #0]
 8002e56:	4401      	add	r1, r0
 8002e58:	b2d3      	uxtb	r3, r2
 8002e5a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pitch.base >> (8 * 3)) & 0xFF;
 8002e5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e60:	f04f 0200 	mov.w	r2, #0
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	0e02      	lsrs	r2, r0, #24
 8002e6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002e6e:	0e0b      	lsrs	r3, r1, #24
 8002e70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e72:	3103      	adds	r1, #3
 8002e74:	6838      	ldr	r0, [r7, #0]
 8002e76:	4401      	add	r1, r0
 8002e78:	b2d3      	uxtb	r3, r2
 8002e7a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pitch.base >> (8 * 4)) & 0xFF;
 8002e7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	000a      	movs	r2, r1
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e8e:	3104      	adds	r1, #4
 8002e90:	6838      	ldr	r0, [r7, #0]
 8002e92:	4401      	add	r1, r0
 8002e94:	b2d3      	uxtb	r3, r2
 8002e96:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pitch.base >> (8 * 5)) & 0xFF;
 8002e98:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	0a0a      	lsrs	r2, r1, #8
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eaa:	3105      	adds	r1, #5
 8002eac:	6838      	ldr	r0, [r7, #0]
 8002eae:	4401      	add	r1, r0
 8002eb0:	b2d3      	uxtb	r3, r2
 8002eb2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pitch.base >> (8 * 6)) & 0xFF;
 8002eb4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	0c0a      	lsrs	r2, r1, #16
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec6:	3106      	adds	r1, #6
 8002ec8:	6838      	ldr	r0, [r7, #0]
 8002eca:	4401      	add	r1, r0
 8002ecc:	b2d3      	uxtb	r3, r2
 8002ece:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pitch.base >> (8 * 7)) & 0xFF;
 8002ed0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	0e0a      	lsrs	r2, r1, #24
 8002ede:	2300      	movs	r3, #0
 8002ee0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ee2:	3107      	adds	r1, #7
 8002ee4:	6838      	ldr	r0, [r7, #0]
 8002ee6:	4401      	add	r1, r0
 8002ee8:	b2d3      	uxtb	r3, r2
 8002eea:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pitch);
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	3308      	adds	r3, #8
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_yaw;
      u_yaw.real = this->yaw;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002ef8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_yaw.base >> (8 * 0)) & 0xFF;
 8002efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f02:	6838      	ldr	r0, [r7, #0]
 8002f04:	4401      	add	r1, r0
 8002f06:	b2d3      	uxtb	r3, r2
 8002f08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_yaw.base >> (8 * 1)) & 0xFF;
 8002f0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f0e:	f04f 0200 	mov.w	r2, #0
 8002f12:	f04f 0300 	mov.w	r3, #0
 8002f16:	0a02      	lsrs	r2, r0, #8
 8002f18:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f1c:	0a0b      	lsrs	r3, r1, #8
 8002f1e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f20:	3101      	adds	r1, #1
 8002f22:	6838      	ldr	r0, [r7, #0]
 8002f24:	4401      	add	r1, r0
 8002f26:	b2d3      	uxtb	r3, r2
 8002f28:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_yaw.base >> (8 * 2)) & 0xFF;
 8002f2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	0c02      	lsrs	r2, r0, #16
 8002f38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f3c:	0c0b      	lsrs	r3, r1, #16
 8002f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f40:	3102      	adds	r1, #2
 8002f42:	6838      	ldr	r0, [r7, #0]
 8002f44:	4401      	add	r1, r0
 8002f46:	b2d3      	uxtb	r3, r2
 8002f48:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_yaw.base >> (8 * 3)) & 0xFF;
 8002f4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	0e02      	lsrs	r2, r0, #24
 8002f58:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002f5c:	0e0b      	lsrs	r3, r1, #24
 8002f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f60:	3103      	adds	r1, #3
 8002f62:	6838      	ldr	r0, [r7, #0]
 8002f64:	4401      	add	r1, r0
 8002f66:	b2d3      	uxtb	r3, r2
 8002f68:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_yaw.base >> (8 * 4)) & 0xFF;
 8002f6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	000a      	movs	r2, r1
 8002f78:	2300      	movs	r3, #0
 8002f7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f7c:	3104      	adds	r1, #4
 8002f7e:	6838      	ldr	r0, [r7, #0]
 8002f80:	4401      	add	r1, r0
 8002f82:	b2d3      	uxtb	r3, r2
 8002f84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_yaw.base >> (8 * 5)) & 0xFF;
 8002f86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	0a0a      	lsrs	r2, r1, #8
 8002f94:	2300      	movs	r3, #0
 8002f96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f98:	3105      	adds	r1, #5
 8002f9a:	6838      	ldr	r0, [r7, #0]
 8002f9c:	4401      	add	r1, r0
 8002f9e:	b2d3      	uxtb	r3, r2
 8002fa0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_yaw.base >> (8 * 6)) & 0xFF;
 8002fa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	0c0a      	lsrs	r2, r1, #16
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fb4:	3106      	adds	r1, #6
 8002fb6:	6838      	ldr	r0, [r7, #0]
 8002fb8:	4401      	add	r1, r0
 8002fba:	b2d3      	uxtb	r3, r2
 8002fbc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_yaw.base >> (8 * 7)) & 0xFF;
 8002fbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	0e0a      	lsrs	r2, r1, #24
 8002fcc:	2300      	movs	r3, #0
 8002fce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fd0:	3107      	adds	r1, #7
 8002fd2:	6838      	ldr	r0, [r7, #0]
 8002fd4:	4401      	add	r1, r0
 8002fd6:	b2d3      	uxtb	r3, r2
 8002fd8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->yaw);
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	3308      	adds	r3, #8
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	372c      	adds	r7, #44	; 0x2c
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <_ZN9ired_msgs3IMU11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002fee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ff2:	b0eb      	sub	sp, #428	; 0x1ac
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8002ffa:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002ffe:	2300      	movs	r3, #0
 8003000:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_roll;
      u_roll.base = 0;
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003010:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003014:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003018:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800301c:	4413      	add	r3, r2
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2200      	movs	r2, #0
 8003024:	461c      	mov	r4, r3
 8003026:	4615      	mov	r5, r2
 8003028:	ea40 0804 	orr.w	r8, r0, r4
 800302c:	ea41 0905 	orr.w	r9, r1, r5
 8003030:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003034:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003038:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003042:	4413      	add	r3, r2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2200      	movs	r2, #0
 800304a:	469a      	mov	sl, r3
 800304c:	4693      	mov	fp, r2
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800305a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800305e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003062:	ea40 0402 	orr.w	r4, r0, r2
 8003066:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800306a:	430b      	orrs	r3, r1
 800306c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003070:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003074:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003078:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800307c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003080:	1c9a      	adds	r2, r3, #2
 8003082:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003086:	4413      	add	r3, r2
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2200      	movs	r2, #0
 800308e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003092:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80030a2:	464c      	mov	r4, r9
 80030a4:	0423      	lsls	r3, r4, #16
 80030a6:	4644      	mov	r4, r8
 80030a8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80030ac:	4644      	mov	r4, r8
 80030ae:	0422      	lsls	r2, r4, #16
 80030b0:	ea40 0402 	orr.w	r4, r0, r2
 80030b4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80030b8:	430b      	orrs	r3, r1
 80030ba:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80030be:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80030c2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80030c6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80030ca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030ce:	1cda      	adds	r2, r3, #3
 80030d0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80030d4:	4413      	add	r3, r2
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80030e0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80030e4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80030e8:	4623      	mov	r3, r4
 80030ea:	0a1b      	lsrs	r3, r3, #8
 80030ec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80030f0:	4623      	mov	r3, r4
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80030f8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80030fc:	4623      	mov	r3, r4
 80030fe:	4303      	orrs	r3, r0
 8003100:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003104:	462b      	mov	r3, r5
 8003106:	430b      	orrs	r3, r1
 8003108:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800310c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003110:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003114:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003118:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800311c:	1d1a      	adds	r2, r3, #4
 800311e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003122:	4413      	add	r3, r2
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2200      	movs	r2, #0
 800312a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800312e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800313e:	0023      	movs	r3, r4
 8003140:	2200      	movs	r2, #0
 8003142:	ea40 0402 	orr.w	r4, r0, r2
 8003146:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800314a:	430b      	orrs	r3, r1
 800314c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003150:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003154:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003158:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800315c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003160:	1d5a      	adds	r2, r3, #5
 8003162:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003166:	4413      	add	r3, r2
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2200      	movs	r2, #0
 800316e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003172:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003182:	0223      	lsls	r3, r4, #8
 8003184:	2200      	movs	r2, #0
 8003186:	ea40 0402 	orr.w	r4, r0, r2
 800318a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800318e:	430b      	orrs	r3, r1
 8003190:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003194:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003198:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800319c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80031a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031a4:	1d9a      	adds	r2, r3, #6
 80031a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031aa:	4413      	add	r3, r2
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80031b6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80031ba:	f04f 0200 	mov.w	r2, #0
 80031be:	f04f 0300 	mov.w	r3, #0
 80031c2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80031c6:	0423      	lsls	r3, r4, #16
 80031c8:	2200      	movs	r2, #0
 80031ca:	ea40 0402 	orr.w	r4, r0, r2
 80031ce:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80031d2:	430b      	orrs	r3, r1
 80031d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80031d8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80031dc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_roll.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80031e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80031e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80031e8:	1dda      	adds	r2, r3, #7
 80031ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80031ee:	4413      	add	r3, r2
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	2200      	movs	r2, #0
 80031f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80031fa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800320a:	0623      	lsls	r3, r4, #24
 800320c:	2200      	movs	r2, #0
 800320e:	ea40 0402 	orr.w	r4, r0, r2
 8003212:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003216:	430b      	orrs	r3, r1
 8003218:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800321c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003220:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->roll = u_roll.real;
 8003224:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003228:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800322c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->roll);
 8003230:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003234:	3308      	adds	r3, #8
 8003236:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_pitch;
      u_pitch.base = 0;
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003246:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800324a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800324e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003252:	4413      	add	r3, r2
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2200      	movs	r2, #0
 800325a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800325e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003262:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003266:	4623      	mov	r3, r4
 8003268:	4303      	orrs	r3, r0
 800326a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800326e:	462b      	mov	r3, r5
 8003270:	430b      	orrs	r3, r1
 8003272:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003276:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800327a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800327e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003282:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800328c:	4413      	add	r3, r2
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2200      	movs	r2, #0
 8003294:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003298:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80032a8:	464c      	mov	r4, r9
 80032aa:	0223      	lsls	r3, r4, #8
 80032ac:	4644      	mov	r4, r8
 80032ae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032b2:	4644      	mov	r4, r8
 80032b4:	0222      	lsls	r2, r4, #8
 80032b6:	ea40 0402 	orr.w	r4, r0, r2
 80032ba:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80032be:	430b      	orrs	r3, r1
 80032c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80032c4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80032c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80032d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2200      	movs	r2, #0
 80032e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80032e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80032f6:	464c      	mov	r4, r9
 80032f8:	0423      	lsls	r3, r4, #16
 80032fa:	4644      	mov	r4, r8
 80032fc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003300:	4644      	mov	r4, r8
 8003302:	0422      	lsls	r2, r4, #16
 8003304:	ea40 0402 	orr.w	r4, r0, r2
 8003308:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 800330c:	430b      	orrs	r3, r1
 800330e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003312:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003316:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800331a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800331e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003322:	1cda      	adds	r2, r3, #3
 8003324:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003328:	4413      	add	r3, r2
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2200      	movs	r2, #0
 8003330:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003334:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003338:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800333c:	4623      	mov	r3, r4
 800333e:	0a1b      	lsrs	r3, r3, #8
 8003340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003344:	4623      	mov	r3, r4
 8003346:	061b      	lsls	r3, r3, #24
 8003348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800334c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003350:	4623      	mov	r3, r4
 8003352:	4303      	orrs	r3, r0
 8003354:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003358:	462b      	mov	r3, r5
 800335a:	430b      	orrs	r3, r1
 800335c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003360:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003364:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003368:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800336c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003370:	1d1a      	adds	r2, r3, #4
 8003372:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003376:	4413      	add	r3, r2
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2200      	movs	r2, #0
 800337e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003382:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003392:	0023      	movs	r3, r4
 8003394:	2200      	movs	r2, #0
 8003396:	ea40 0402 	orr.w	r4, r0, r2
 800339a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 800339e:	430b      	orrs	r3, r1
 80033a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80033a4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80033a8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80033ac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80033b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033b4:	1d5a      	adds	r2, r3, #5
 80033b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033ba:	4413      	add	r3, r2
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2200      	movs	r2, #0
 80033c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033c6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80033d6:	0223      	lsls	r3, r4, #8
 80033d8:	2200      	movs	r2, #0
 80033da:	ea40 0402 	orr.w	r4, r0, r2
 80033de:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80033e2:	430b      	orrs	r3, r1
 80033e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033e8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80033ec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033f0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80033f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80033f8:	1d9a      	adds	r2, r3, #6
 80033fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80033fe:	4413      	add	r3, r2
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2200      	movs	r2, #0
 8003406:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800340a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800341a:	0423      	lsls	r3, r4, #16
 800341c:	2200      	movs	r2, #0
 800341e:	ea40 0402 	orr.w	r4, r0, r2
 8003422:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003426:	430b      	orrs	r3, r1
 8003428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800342c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003430:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_pitch.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003434:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003438:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800343c:	1dda      	adds	r2, r3, #7
 800343e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003442:	4413      	add	r3, r2
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2200      	movs	r2, #0
 800344a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800344e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 800345e:	0623      	lsls	r3, r4, #24
 8003460:	2200      	movs	r2, #0
 8003462:	ea40 0402 	orr.w	r4, r0, r2
 8003466:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800346a:	430b      	orrs	r3, r1
 800346c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003470:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003474:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->pitch = u_pitch.real;
 8003478:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800347c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003480:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->pitch);
 8003484:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003488:	3308      	adds	r3, #8
 800348a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_yaw;
      u_yaw.base = 0;
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800349a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800349e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80034a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034a6:	4413      	add	r3, r2
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034b2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80034b6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80034ba:	4623      	mov	r3, r4
 80034bc:	4303      	orrs	r3, r0
 80034be:	67bb      	str	r3, [r7, #120]	; 0x78
 80034c0:	462b      	mov	r3, r5
 80034c2:	430b      	orrs	r3, r1
 80034c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034c6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80034ca:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80034ce:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80034d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80034dc:	4413      	add	r3, r2
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2200      	movs	r2, #0
 80034e4:	673b      	str	r3, [r7, #112]	; 0x70
 80034e6:	677a      	str	r2, [r7, #116]	; 0x74
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034f4:	464c      	mov	r4, r9
 80034f6:	0223      	lsls	r3, r4, #8
 80034f8:	4644      	mov	r4, r8
 80034fa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80034fe:	4644      	mov	r4, r8
 8003500:	0222      	lsls	r2, r4, #8
 8003502:	ea40 0402 	orr.w	r4, r0, r2
 8003506:	66bc      	str	r4, [r7, #104]	; 0x68
 8003508:	430b      	orrs	r3, r1
 800350a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800350c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003510:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003514:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003518:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800351c:	1c9a      	adds	r2, r3, #2
 800351e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003522:	4413      	add	r3, r2
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	2200      	movs	r2, #0
 800352a:	663b      	str	r3, [r7, #96]	; 0x60
 800352c:	667a      	str	r2, [r7, #100]	; 0x64
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800353a:	464c      	mov	r4, r9
 800353c:	0423      	lsls	r3, r4, #16
 800353e:	4644      	mov	r4, r8
 8003540:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003544:	4644      	mov	r4, r8
 8003546:	0422      	lsls	r2, r4, #16
 8003548:	ea40 0402 	orr.w	r4, r0, r2
 800354c:	65bc      	str	r4, [r7, #88]	; 0x58
 800354e:	430b      	orrs	r3, r1
 8003550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003552:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003556:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800355a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800355e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003562:	1cda      	adds	r2, r3, #3
 8003564:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003568:	4413      	add	r3, r2
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2200      	movs	r2, #0
 8003570:	653b      	str	r3, [r7, #80]	; 0x50
 8003572:	657a      	str	r2, [r7, #84]	; 0x54
 8003574:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003578:	4623      	mov	r3, r4
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800357e:	4623      	mov	r3, r4
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	64bb      	str	r3, [r7, #72]	; 0x48
 8003584:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003588:	4623      	mov	r3, r4
 800358a:	4303      	orrs	r3, r0
 800358c:	643b      	str	r3, [r7, #64]	; 0x40
 800358e:	462b      	mov	r3, r5
 8003590:	430b      	orrs	r3, r1
 8003592:	647b      	str	r3, [r7, #68]	; 0x44
 8003594:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003598:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800359c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80035a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035a4:	1d1a      	adds	r2, r3, #4
 80035a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035aa:	4413      	add	r3, r2
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2200      	movs	r2, #0
 80035b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80035b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80035c0:	0023      	movs	r3, r4
 80035c2:	2200      	movs	r2, #0
 80035c4:	ea40 0402 	orr.w	r4, r0, r2
 80035c8:	633c      	str	r4, [r7, #48]	; 0x30
 80035ca:	430b      	orrs	r3, r1
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
 80035ce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80035d2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80035d6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80035da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035de:	1d5a      	adds	r2, r3, #5
 80035e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035e4:	4413      	add	r3, r2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2200      	movs	r2, #0
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80035fa:	0223      	lsls	r3, r4, #8
 80035fc:	2200      	movs	r2, #0
 80035fe:	ea40 0402 	orr.w	r4, r0, r2
 8003602:	623c      	str	r4, [r7, #32]
 8003604:	430b      	orrs	r3, r1
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
 8003608:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800360c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003610:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003614:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003618:	3306      	adds	r3, #6
 800361a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800361e:	4413      	add	r3, r2
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2200      	movs	r2, #0
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	61fa      	str	r2, [r7, #28]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	69bc      	ldr	r4, [r7, #24]
 8003634:	0423      	lsls	r3, r4, #16
 8003636:	2200      	movs	r2, #0
 8003638:	ea40 0402 	orr.w	r4, r0, r2
 800363c:	613c      	str	r4, [r7, #16]
 800363e:	430b      	orrs	r3, r1
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003646:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_yaw.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800364a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800364e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003652:	3307      	adds	r3, #7
 8003654:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003658:	4413      	add	r3, r2
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2200      	movs	r2, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	60fa      	str	r2, [r7, #12]
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	68bc      	ldr	r4, [r7, #8]
 800366e:	0623      	lsls	r3, r4, #24
 8003670:	2200      	movs	r2, #0
 8003672:	ea40 0402 	orr.w	r4, r0, r2
 8003676:	603c      	str	r4, [r7, #0]
 8003678:	430b      	orrs	r3, r1
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003680:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->yaw = u_yaw.real;
 8003684:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003688:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800368c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->yaw);
 8003690:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003694:	3308      	adds	r3, #8
 8003696:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800369a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800369e:	4618      	mov	r0, r3
 80036a0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80036a4:	46bd      	mov	sp, r7
 80036a6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80036aa:	4770      	bx	lr

080036ac <_ZN9ired_msgs3IMU7getTypeEv>:

    virtual const char * getType() override { return "ired_msgs/IMU"; };
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <_ZN9ired_msgs3IMU7getTypeEv+0x18>)
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr
 80036c2:	bf00      	nop
 80036c4:	08012de8 	.word	0x08012de8

080036c8 <_ZN9ired_msgs3IMU6getMD5Ev>:
    virtual const char * getMD5() override { return "eeec8b25a660789a89540dedcb2b06d6"; };
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	4b03      	ldr	r3, [pc, #12]	; (80036e0 <_ZN9ired_msgs3IMU6getMD5Ev+0x18>)
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	08012df8 	.word	0x08012df8

080036e4 <_ZN9ired_msgs5MotorC1Ev>:
      double pid_motor_front_left[3];
      double pid_motor_front_right[3];
      double pid_motor_rear_left[3];
      double pid_motor_rear_right[3];

    Motor():
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
      speed_sp(),
      speed_fb(),
      pid_motor_front_left(),
      pid_motor_front_right(),
      pid_motor_rear_left(),
      pid_motor_rear_right()
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fd fda8 	bl	8001244 <_ZN3ros3MsgC1Ev>
 80036f4:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <_ZN9ired_msgs5MotorC1Ev+0xd4>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	601a      	str	r2, [r3, #0]
      speed_sp(),
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f103 0208 	add.w	r2, r3, #8
 8003700:	2303      	movs	r3, #3
 8003702:	e007      	b.n	8003714 <_ZN9ired_msgs5MotorC1Ev+0x30>
 8003704:	f04f 0000 	mov.w	r0, #0
 8003708:	f04f 0100 	mov.w	r1, #0
 800370c:	e9c2 0100 	strd	r0, r1, [r2]
 8003710:	3208      	adds	r2, #8
 8003712:	3b01      	subs	r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	daf5      	bge.n	8003704 <_ZN9ired_msgs5MotorC1Ev+0x20>
      speed_fb(),
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800371e:	2303      	movs	r3, #3
 8003720:	e007      	b.n	8003732 <_ZN9ired_msgs5MotorC1Ev+0x4e>
 8003722:	f04f 0000 	mov.w	r0, #0
 8003726:	f04f 0100 	mov.w	r1, #0
 800372a:	e9c2 0100 	strd	r0, r1, [r2]
 800372e:	3208      	adds	r2, #8
 8003730:	3b01      	subs	r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	daf5      	bge.n	8003722 <_ZN9ired_msgs5MotorC1Ev+0x3e>
      pid_motor_front_left(),
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800373c:	2302      	movs	r3, #2
 800373e:	e007      	b.n	8003750 <_ZN9ired_msgs5MotorC1Ev+0x6c>
 8003740:	f04f 0000 	mov.w	r0, #0
 8003744:	f04f 0100 	mov.w	r1, #0
 8003748:	e9c2 0100 	strd	r0, r1, [r2]
 800374c:	3208      	adds	r2, #8
 800374e:	3b01      	subs	r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	daf5      	bge.n	8003740 <_ZN9ired_msgs5MotorC1Ev+0x5c>
      pid_motor_front_right(),
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800375a:	2302      	movs	r3, #2
 800375c:	e007      	b.n	800376e <_ZN9ired_msgs5MotorC1Ev+0x8a>
 800375e:	f04f 0000 	mov.w	r0, #0
 8003762:	f04f 0100 	mov.w	r1, #0
 8003766:	e9c2 0100 	strd	r0, r1, [r2]
 800376a:	3208      	adds	r2, #8
 800376c:	3b01      	subs	r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	daf5      	bge.n	800375e <_ZN9ired_msgs5MotorC1Ev+0x7a>
      pid_motor_rear_left(),
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8003778:	2302      	movs	r3, #2
 800377a:	e007      	b.n	800378c <_ZN9ired_msgs5MotorC1Ev+0xa8>
 800377c:	f04f 0000 	mov.w	r0, #0
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	e9c2 0100 	strd	r0, r1, [r2]
 8003788:	3208      	adds	r2, #8
 800378a:	3b01      	subs	r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	daf5      	bge.n	800377c <_ZN9ired_msgs5MotorC1Ev+0x98>
      pid_motor_rear_right()
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f103 0290 	add.w	r2, r3, #144	; 0x90
 8003796:	2302      	movs	r3, #2
 8003798:	e007      	b.n	80037aa <_ZN9ired_msgs5MotorC1Ev+0xc6>
 800379a:	f04f 0000 	mov.w	r0, #0
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	e9c2 0100 	strd	r0, r1, [r2]
 80037a6:	3208      	adds	r2, #8
 80037a8:	3b01      	subs	r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	daf5      	bge.n	800379a <_ZN9ired_msgs5MotorC1Ev+0xb6>
    {
    }
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	08012fb0 	.word	0x08012fb0

080037bc <_ZNK9ired_msgs5Motor9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80037bc:	b480      	push	{r7}
 80037be:	b097      	sub	sp, #92	; 0x5c
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	657b      	str	r3, [r7, #84]	; 0x54
      for( uint32_t i = 0; i < 4; i++){
 80037ca:	2300      	movs	r3, #0
 80037cc:	653b      	str	r3, [r7, #80]	; 0x50
 80037ce:	e07d      	b.n	80038cc <_ZNK9ired_msgs5Motor9serializeEPh+0x110>
      union {
        double real;
        uint64_t base;
      } u_speed_spi;
      u_speed_spi.real = this->speed_sp[i];
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d4:	3301      	adds	r3, #1
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	4413      	add	r3, r2
 80037da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037de:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
      *(outbuffer + offset + 0) = (u_speed_spi.base >> (8 * 0)) & 0xFF;
 80037e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80037e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037e8:	6838      	ldr	r0, [r7, #0]
 80037ea:	4401      	add	r1, r0
 80037ec:	b2d3      	uxtb	r3, r2
 80037ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_speed_spi.base >> (8 * 1)) & 0xFF;
 80037f0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	0a02      	lsrs	r2, r0, #8
 80037fe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003802:	0a0b      	lsrs	r3, r1, #8
 8003804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003806:	3101      	adds	r1, #1
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	4401      	add	r1, r0
 800380c:	b2d3      	uxtb	r3, r2
 800380e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_speed_spi.base >> (8 * 2)) & 0xFF;
 8003810:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	0c02      	lsrs	r2, r0, #16
 800381e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003822:	0c0b      	lsrs	r3, r1, #16
 8003824:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003826:	3102      	adds	r1, #2
 8003828:	6838      	ldr	r0, [r7, #0]
 800382a:	4401      	add	r1, r0
 800382c:	b2d3      	uxtb	r3, r2
 800382e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_speed_spi.base >> (8 * 3)) & 0xFF;
 8003830:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	0e02      	lsrs	r2, r0, #24
 800383e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003842:	0e0b      	lsrs	r3, r1, #24
 8003844:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003846:	3103      	adds	r1, #3
 8003848:	6838      	ldr	r0, [r7, #0]
 800384a:	4401      	add	r1, r0
 800384c:	b2d3      	uxtb	r3, r2
 800384e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_speed_spi.base >> (8 * 4)) & 0xFF;
 8003850:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003854:	f04f 0200 	mov.w	r2, #0
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	000a      	movs	r2, r1
 800385e:	2300      	movs	r3, #0
 8003860:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003862:	3104      	adds	r1, #4
 8003864:	6838      	ldr	r0, [r7, #0]
 8003866:	4401      	add	r1, r0
 8003868:	b2d3      	uxtb	r3, r2
 800386a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_speed_spi.base >> (8 * 5)) & 0xFF;
 800386c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	0a0a      	lsrs	r2, r1, #8
 800387a:	2300      	movs	r3, #0
 800387c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800387e:	3105      	adds	r1, #5
 8003880:	6838      	ldr	r0, [r7, #0]
 8003882:	4401      	add	r1, r0
 8003884:	b2d3      	uxtb	r3, r2
 8003886:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_speed_spi.base >> (8 * 6)) & 0xFF;
 8003888:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	0c0a      	lsrs	r2, r1, #16
 8003896:	2300      	movs	r3, #0
 8003898:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800389a:	3106      	adds	r1, #6
 800389c:	6838      	ldr	r0, [r7, #0]
 800389e:	4401      	add	r1, r0
 80038a0:	b2d3      	uxtb	r3, r2
 80038a2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_speed_spi.base >> (8 * 7)) & 0xFF;
 80038a4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	0e0a      	lsrs	r2, r1, #24
 80038b2:	2300      	movs	r3, #0
 80038b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038b6:	3107      	adds	r1, #7
 80038b8:	6838      	ldr	r0, [r7, #0]
 80038ba:	4401      	add	r1, r0
 80038bc:	b2d3      	uxtb	r3, r2
 80038be:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->speed_sp[i]);
 80038c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038c2:	3308      	adds	r3, #8
 80038c4:	657b      	str	r3, [r7, #84]	; 0x54
      for( uint32_t i = 0; i < 4; i++){
 80038c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c8:	3301      	adds	r3, #1
 80038ca:	653b      	str	r3, [r7, #80]	; 0x50
 80038cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	f67f af7e 	bls.w	80037d0 <_ZNK9ired_msgs5Motor9serializeEPh+0x14>
      }
      for( uint32_t i = 0; i < 4; i++){
 80038d4:	2300      	movs	r3, #0
 80038d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038d8:	e07d      	b.n	80039d6 <_ZNK9ired_msgs5Motor9serializeEPh+0x21a>
      union {
        double real;
        uint64_t base;
      } u_speed_fbi;
      u_speed_fbi.real = this->speed_fb[i];
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038de:	3305      	adds	r3, #5
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
      *(outbuffer + offset + 0) = (u_speed_fbi.base >> (8 * 0)) & 0xFF;
 80038ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80038f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80038f2:	6838      	ldr	r0, [r7, #0]
 80038f4:	4401      	add	r1, r0
 80038f6:	b2d3      	uxtb	r3, r2
 80038f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_speed_fbi.base >> (8 * 1)) & 0xFF;
 80038fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80038fe:	f04f 0200 	mov.w	r2, #0
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	0a02      	lsrs	r2, r0, #8
 8003908:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800390c:	0a0b      	lsrs	r3, r1, #8
 800390e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003910:	3101      	adds	r1, #1
 8003912:	6838      	ldr	r0, [r7, #0]
 8003914:	4401      	add	r1, r0
 8003916:	b2d3      	uxtb	r3, r2
 8003918:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_speed_fbi.base >> (8 * 2)) & 0xFF;
 800391a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800391e:	f04f 0200 	mov.w	r2, #0
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	0c02      	lsrs	r2, r0, #16
 8003928:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800392c:	0c0b      	lsrs	r3, r1, #16
 800392e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003930:	3102      	adds	r1, #2
 8003932:	6838      	ldr	r0, [r7, #0]
 8003934:	4401      	add	r1, r0
 8003936:	b2d3      	uxtb	r3, r2
 8003938:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_speed_fbi.base >> (8 * 3)) & 0xFF;
 800393a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	0e02      	lsrs	r2, r0, #24
 8003948:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800394c:	0e0b      	lsrs	r3, r1, #24
 800394e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003950:	3103      	adds	r1, #3
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	4401      	add	r1, r0
 8003956:	b2d3      	uxtb	r3, r2
 8003958:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_speed_fbi.base >> (8 * 4)) & 0xFF;
 800395a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	000a      	movs	r2, r1
 8003968:	2300      	movs	r3, #0
 800396a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800396c:	3104      	adds	r1, #4
 800396e:	6838      	ldr	r0, [r7, #0]
 8003970:	4401      	add	r1, r0
 8003972:	b2d3      	uxtb	r3, r2
 8003974:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_speed_fbi.base >> (8 * 5)) & 0xFF;
 8003976:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	0a0a      	lsrs	r2, r1, #8
 8003984:	2300      	movs	r3, #0
 8003986:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003988:	3105      	adds	r1, #5
 800398a:	6838      	ldr	r0, [r7, #0]
 800398c:	4401      	add	r1, r0
 800398e:	b2d3      	uxtb	r3, r2
 8003990:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_speed_fbi.base >> (8 * 6)) & 0xFF;
 8003992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	0c0a      	lsrs	r2, r1, #16
 80039a0:	2300      	movs	r3, #0
 80039a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039a4:	3106      	adds	r1, #6
 80039a6:	6838      	ldr	r0, [r7, #0]
 80039a8:	4401      	add	r1, r0
 80039aa:	b2d3      	uxtb	r3, r2
 80039ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_speed_fbi.base >> (8 * 7)) & 0xFF;
 80039ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	0e0a      	lsrs	r2, r1, #24
 80039bc:	2300      	movs	r3, #0
 80039be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039c0:	3107      	adds	r1, #7
 80039c2:	6838      	ldr	r0, [r7, #0]
 80039c4:	4401      	add	r1, r0
 80039c6:	b2d3      	uxtb	r3, r2
 80039c8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->speed_fb[i]);
 80039ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039cc:	3308      	adds	r3, #8
 80039ce:	657b      	str	r3, [r7, #84]	; 0x54
      for( uint32_t i = 0; i < 4; i++){
 80039d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d2:	3301      	adds	r3, #1
 80039d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d8:	2b03      	cmp	r3, #3
 80039da:	f67f af7e 	bls.w	80038da <_ZNK9ired_msgs5Motor9serializeEPh+0x11e>
      }
      for( uint32_t i = 0; i < 3; i++){
 80039de:	2300      	movs	r3, #0
 80039e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80039e2:	e07d      	b.n	8003ae0 <_ZNK9ired_msgs5Motor9serializeEPh+0x324>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_front_lefti;
      u_pid_motor_front_lefti.real = this->pid_motor_front_left[i];
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039e8:	3309      	adds	r3, #9
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4413      	add	r3, r2
 80039ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f2:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_pid_motor_front_lefti.base >> (8 * 0)) & 0xFF;
 80039f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039fc:	6838      	ldr	r0, [r7, #0]
 80039fe:	4401      	add	r1, r0
 8003a00:	b2d3      	uxtb	r3, r2
 8003a02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pid_motor_front_lefti.base >> (8 * 1)) & 0xFF;
 8003a04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	0a02      	lsrs	r2, r0, #8
 8003a12:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003a16:	0a0b      	lsrs	r3, r1, #8
 8003a18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a1a:	3101      	adds	r1, #1
 8003a1c:	6838      	ldr	r0, [r7, #0]
 8003a1e:	4401      	add	r1, r0
 8003a20:	b2d3      	uxtb	r3, r2
 8003a22:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pid_motor_front_lefti.base >> (8 * 2)) & 0xFF;
 8003a24:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	0c02      	lsrs	r2, r0, #16
 8003a32:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a36:	0c0b      	lsrs	r3, r1, #16
 8003a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a3a:	3102      	adds	r1, #2
 8003a3c:	6838      	ldr	r0, [r7, #0]
 8003a3e:	4401      	add	r1, r0
 8003a40:	b2d3      	uxtb	r3, r2
 8003a42:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pid_motor_front_lefti.base >> (8 * 3)) & 0xFF;
 8003a44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	0e02      	lsrs	r2, r0, #24
 8003a52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003a56:	0e0b      	lsrs	r3, r1, #24
 8003a58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a5a:	3103      	adds	r1, #3
 8003a5c:	6838      	ldr	r0, [r7, #0]
 8003a5e:	4401      	add	r1, r0
 8003a60:	b2d3      	uxtb	r3, r2
 8003a62:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pid_motor_front_lefti.base >> (8 * 4)) & 0xFF;
 8003a64:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a68:	f04f 0200 	mov.w	r2, #0
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	000a      	movs	r2, r1
 8003a72:	2300      	movs	r3, #0
 8003a74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a76:	3104      	adds	r1, #4
 8003a78:	6838      	ldr	r0, [r7, #0]
 8003a7a:	4401      	add	r1, r0
 8003a7c:	b2d3      	uxtb	r3, r2
 8003a7e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pid_motor_front_lefti.base >> (8 * 5)) & 0xFF;
 8003a80:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	0a0a      	lsrs	r2, r1, #8
 8003a8e:	2300      	movs	r3, #0
 8003a90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003a92:	3105      	adds	r1, #5
 8003a94:	6838      	ldr	r0, [r7, #0]
 8003a96:	4401      	add	r1, r0
 8003a98:	b2d3      	uxtb	r3, r2
 8003a9a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pid_motor_front_lefti.base >> (8 * 6)) & 0xFF;
 8003a9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	0c0a      	lsrs	r2, r1, #16
 8003aaa:	2300      	movs	r3, #0
 8003aac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aae:	3106      	adds	r1, #6
 8003ab0:	6838      	ldr	r0, [r7, #0]
 8003ab2:	4401      	add	r1, r0
 8003ab4:	b2d3      	uxtb	r3, r2
 8003ab6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pid_motor_front_lefti.base >> (8 * 7)) & 0xFF;
 8003ab8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003abc:	f04f 0200 	mov.w	r2, #0
 8003ac0:	f04f 0300 	mov.w	r3, #0
 8003ac4:	0e0a      	lsrs	r2, r1, #24
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aca:	3107      	adds	r1, #7
 8003acc:	6838      	ldr	r0, [r7, #0]
 8003ace:	4401      	add	r1, r0
 8003ad0:	b2d3      	uxtb	r3, r2
 8003ad2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pid_motor_front_left[i]);
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	657b      	str	r3, [r7, #84]	; 0x54
      for( uint32_t i = 0; i < 3; i++){
 8003ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003adc:	3301      	adds	r3, #1
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	f67f af7e 	bls.w	80039e4 <_ZNK9ired_msgs5Motor9serializeEPh+0x228>
      }
      for( uint32_t i = 0; i < 3; i++){
 8003ae8:	2300      	movs	r3, #0
 8003aea:	647b      	str	r3, [r7, #68]	; 0x44
 8003aec:	e07d      	b.n	8003bea <_ZNK9ired_msgs5Motor9serializeEPh+0x42e>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_front_righti;
      u_pid_motor_front_righti.real = this->pid_motor_front_right[i];
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af2:	330c      	adds	r3, #12
 8003af4:	00db      	lsls	r3, r3, #3
 8003af6:	4413      	add	r3, r2
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_pid_motor_front_righti.base >> (8 * 0)) & 0xFF;
 8003b00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b06:	6838      	ldr	r0, [r7, #0]
 8003b08:	4401      	add	r1, r0
 8003b0a:	b2d3      	uxtb	r3, r2
 8003b0c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pid_motor_front_righti.base >> (8 * 1)) & 0xFF;
 8003b0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	0a02      	lsrs	r2, r0, #8
 8003b1c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003b20:	0a0b      	lsrs	r3, r1, #8
 8003b22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b24:	3101      	adds	r1, #1
 8003b26:	6838      	ldr	r0, [r7, #0]
 8003b28:	4401      	add	r1, r0
 8003b2a:	b2d3      	uxtb	r3, r2
 8003b2c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pid_motor_front_righti.base >> (8 * 2)) & 0xFF;
 8003b2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	0c02      	lsrs	r2, r0, #16
 8003b3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b40:	0c0b      	lsrs	r3, r1, #16
 8003b42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b44:	3102      	adds	r1, #2
 8003b46:	6838      	ldr	r0, [r7, #0]
 8003b48:	4401      	add	r1, r0
 8003b4a:	b2d3      	uxtb	r3, r2
 8003b4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pid_motor_front_righti.base >> (8 * 3)) & 0xFF;
 8003b4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	0e02      	lsrs	r2, r0, #24
 8003b5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003b60:	0e0b      	lsrs	r3, r1, #24
 8003b62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b64:	3103      	adds	r1, #3
 8003b66:	6838      	ldr	r0, [r7, #0]
 8003b68:	4401      	add	r1, r0
 8003b6a:	b2d3      	uxtb	r3, r2
 8003b6c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pid_motor_front_righti.base >> (8 * 4)) & 0xFF;
 8003b6e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	000a      	movs	r2, r1
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b80:	3104      	adds	r1, #4
 8003b82:	6838      	ldr	r0, [r7, #0]
 8003b84:	4401      	add	r1, r0
 8003b86:	b2d3      	uxtb	r3, r2
 8003b88:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pid_motor_front_righti.base >> (8 * 5)) & 0xFF;
 8003b8a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	0a0a      	lsrs	r2, r1, #8
 8003b98:	2300      	movs	r3, #0
 8003b9a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b9c:	3105      	adds	r1, #5
 8003b9e:	6838      	ldr	r0, [r7, #0]
 8003ba0:	4401      	add	r1, r0
 8003ba2:	b2d3      	uxtb	r3, r2
 8003ba4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pid_motor_front_righti.base >> (8 * 6)) & 0xFF;
 8003ba6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	0c0a      	lsrs	r2, r1, #16
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bb8:	3106      	adds	r1, #6
 8003bba:	6838      	ldr	r0, [r7, #0]
 8003bbc:	4401      	add	r1, r0
 8003bbe:	b2d3      	uxtb	r3, r2
 8003bc0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pid_motor_front_righti.base >> (8 * 7)) & 0xFF;
 8003bc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	0e0a      	lsrs	r2, r1, #24
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003bd4:	3107      	adds	r1, #7
 8003bd6:	6838      	ldr	r0, [r7, #0]
 8003bd8:	4401      	add	r1, r0
 8003bda:	b2d3      	uxtb	r3, r2
 8003bdc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pid_motor_front_right[i]);
 8003bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be0:	3308      	adds	r3, #8
 8003be2:	657b      	str	r3, [r7, #84]	; 0x54
      for( uint32_t i = 0; i < 3; i++){
 8003be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003be6:	3301      	adds	r3, #1
 8003be8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	f67f af7e 	bls.w	8003aee <_ZNK9ired_msgs5Motor9serializeEPh+0x332>
      }
      for( uint32_t i = 0; i < 3; i++){
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf6:	e07d      	b.n	8003cf4 <_ZNK9ired_msgs5Motor9serializeEPh+0x538>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_rear_lefti;
      u_pid_motor_rear_lefti.real = this->pid_motor_rear_left[i];
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfc:	330f      	adds	r3, #15
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_pid_motor_rear_lefti.base >> (8 * 0)) & 0xFF;
 8003c0a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c10:	6838      	ldr	r0, [r7, #0]
 8003c12:	4401      	add	r1, r0
 8003c14:	b2d3      	uxtb	r3, r2
 8003c16:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pid_motor_rear_lefti.base >> (8 * 1)) & 0xFF;
 8003c18:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	0a02      	lsrs	r2, r0, #8
 8003c26:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003c2a:	0a0b      	lsrs	r3, r1, #8
 8003c2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c2e:	3101      	adds	r1, #1
 8003c30:	6838      	ldr	r0, [r7, #0]
 8003c32:	4401      	add	r1, r0
 8003c34:	b2d3      	uxtb	r3, r2
 8003c36:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pid_motor_rear_lefti.base >> (8 * 2)) & 0xFF;
 8003c38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	0c02      	lsrs	r2, r0, #16
 8003c46:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003c4a:	0c0b      	lsrs	r3, r1, #16
 8003c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c4e:	3102      	adds	r1, #2
 8003c50:	6838      	ldr	r0, [r7, #0]
 8003c52:	4401      	add	r1, r0
 8003c54:	b2d3      	uxtb	r3, r2
 8003c56:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pid_motor_rear_lefti.base >> (8 * 3)) & 0xFF;
 8003c58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c5c:	f04f 0200 	mov.w	r2, #0
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	0e02      	lsrs	r2, r0, #24
 8003c66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003c6a:	0e0b      	lsrs	r3, r1, #24
 8003c6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c6e:	3103      	adds	r1, #3
 8003c70:	6838      	ldr	r0, [r7, #0]
 8003c72:	4401      	add	r1, r0
 8003c74:	b2d3      	uxtb	r3, r2
 8003c76:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pid_motor_rear_lefti.base >> (8 * 4)) & 0xFF;
 8003c78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	000a      	movs	r2, r1
 8003c86:	2300      	movs	r3, #0
 8003c88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003c8a:	3104      	adds	r1, #4
 8003c8c:	6838      	ldr	r0, [r7, #0]
 8003c8e:	4401      	add	r1, r0
 8003c90:	b2d3      	uxtb	r3, r2
 8003c92:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pid_motor_rear_lefti.base >> (8 * 5)) & 0xFF;
 8003c94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	0a0a      	lsrs	r2, r1, #8
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003ca6:	3105      	adds	r1, #5
 8003ca8:	6838      	ldr	r0, [r7, #0]
 8003caa:	4401      	add	r1, r0
 8003cac:	b2d3      	uxtb	r3, r2
 8003cae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pid_motor_rear_lefti.base >> (8 * 6)) & 0xFF;
 8003cb0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	0c0a      	lsrs	r2, r1, #16
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cc2:	3106      	adds	r1, #6
 8003cc4:	6838      	ldr	r0, [r7, #0]
 8003cc6:	4401      	add	r1, r0
 8003cc8:	b2d3      	uxtb	r3, r2
 8003cca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pid_motor_rear_lefti.base >> (8 * 7)) & 0xFF;
 8003ccc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003cd0:	f04f 0200 	mov.w	r2, #0
 8003cd4:	f04f 0300 	mov.w	r3, #0
 8003cd8:	0e0a      	lsrs	r2, r1, #24
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cde:	3107      	adds	r1, #7
 8003ce0:	6838      	ldr	r0, [r7, #0]
 8003ce2:	4401      	add	r1, r0
 8003ce4:	b2d3      	uxtb	r3, r2
 8003ce6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pid_motor_rear_left[i]);
 8003ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cea:	3308      	adds	r3, #8
 8003cec:	657b      	str	r3, [r7, #84]	; 0x54
      for( uint32_t i = 0; i < 3; i++){
 8003cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8003cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	f67f af7e 	bls.w	8003bf8 <_ZNK9ired_msgs5Motor9serializeEPh+0x43c>
      }
      for( uint32_t i = 0; i < 3; i++){
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d00:	e07d      	b.n	8003dfe <_ZNK9ired_msgs5Motor9serializeEPh+0x642>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_rear_righti;
      u_pid_motor_rear_righti.real = this->pid_motor_rear_right[i];
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d06:	3312      	adds	r3, #18
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_pid_motor_rear_righti.base >> (8 * 0)) & 0xFF;
 8003d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d1a:	6838      	ldr	r0, [r7, #0]
 8003d1c:	4401      	add	r1, r0
 8003d1e:	b2d3      	uxtb	r3, r2
 8003d20:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_pid_motor_rear_righti.base >> (8 * 1)) & 0xFF;
 8003d22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	0a02      	lsrs	r2, r0, #8
 8003d30:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003d34:	0a0b      	lsrs	r3, r1, #8
 8003d36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d38:	3101      	adds	r1, #1
 8003d3a:	6838      	ldr	r0, [r7, #0]
 8003d3c:	4401      	add	r1, r0
 8003d3e:	b2d3      	uxtb	r3, r2
 8003d40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_pid_motor_rear_righti.base >> (8 * 2)) & 0xFF;
 8003d42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	0c02      	lsrs	r2, r0, #16
 8003d50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003d54:	0c0b      	lsrs	r3, r1, #16
 8003d56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d58:	3102      	adds	r1, #2
 8003d5a:	6838      	ldr	r0, [r7, #0]
 8003d5c:	4401      	add	r1, r0
 8003d5e:	b2d3      	uxtb	r3, r2
 8003d60:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_pid_motor_rear_righti.base >> (8 * 3)) & 0xFF;
 8003d62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	0e02      	lsrs	r2, r0, #24
 8003d70:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003d74:	0e0b      	lsrs	r3, r1, #24
 8003d76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d78:	3103      	adds	r1, #3
 8003d7a:	6838      	ldr	r0, [r7, #0]
 8003d7c:	4401      	add	r1, r0
 8003d7e:	b2d3      	uxtb	r3, r2
 8003d80:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_pid_motor_rear_righti.base >> (8 * 4)) & 0xFF;
 8003d82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	000a      	movs	r2, r1
 8003d90:	2300      	movs	r3, #0
 8003d92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d94:	3104      	adds	r1, #4
 8003d96:	6838      	ldr	r0, [r7, #0]
 8003d98:	4401      	add	r1, r0
 8003d9a:	b2d3      	uxtb	r3, r2
 8003d9c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_pid_motor_rear_righti.base >> (8 * 5)) & 0xFF;
 8003d9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	f04f 0300 	mov.w	r3, #0
 8003daa:	0a0a      	lsrs	r2, r1, #8
 8003dac:	2300      	movs	r3, #0
 8003dae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003db0:	3105      	adds	r1, #5
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	4401      	add	r1, r0
 8003db6:	b2d3      	uxtb	r3, r2
 8003db8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_pid_motor_rear_righti.base >> (8 * 6)) & 0xFF;
 8003dba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	0c0a      	lsrs	r2, r1, #16
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dcc:	3106      	adds	r1, #6
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	4401      	add	r1, r0
 8003dd2:	b2d3      	uxtb	r3, r2
 8003dd4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_pid_motor_rear_righti.base >> (8 * 7)) & 0xFF;
 8003dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dda:	f04f 0200 	mov.w	r2, #0
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	0e0a      	lsrs	r2, r1, #24
 8003de4:	2300      	movs	r3, #0
 8003de6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003de8:	3107      	adds	r1, #7
 8003dea:	6838      	ldr	r0, [r7, #0]
 8003dec:	4401      	add	r1, r0
 8003dee:	b2d3      	uxtb	r3, r2
 8003df0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->pid_motor_rear_right[i]);
 8003df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df4:	3308      	adds	r3, #8
 8003df6:	657b      	str	r3, [r7, #84]	; 0x54
      for( uint32_t i = 0; i < 3; i++){
 8003df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	f67f af7e 	bls.w	8003d02 <_ZNK9ired_msgs5Motor9serializeEPh+0x546>
      }
      return offset;
 8003e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    }
 8003e08:	4618      	mov	r0, r3
 8003e0a:	375c      	adds	r7, #92	; 0x5c
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <_ZN9ired_msgs5Motor11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003e14:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e18:	f5ad 7d5c 	sub.w	sp, sp, #880	; 0x370
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	f8c7 031c 	str.w	r0, [r7, #796]	; 0x31c
 8003e22:	f8c7 1318 	str.w	r1, [r7, #792]	; 0x318
    {
      int offset = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
      for( uint32_t i = 0; i < 4; i++){
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8003e32:	e124      	b.n	800407e <_ZN9ired_msgs5Motor11deserializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_speed_spi;
      u_speed_spi.base = 0;
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	f04f 0300 	mov.w	r3, #0
 8003e3c:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003e40:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8003e44:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8003e48:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8003e4c:	4413      	add	r3, r2
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2200      	movs	r2, #0
 8003e54:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
 8003e58:	f8c7 230c 	str.w	r2, [r7, #780]	; 0x30c
 8003e5c:	f8d7 3308 	ldr.w	r3, [r7, #776]	; 0x308
 8003e60:	4303      	orrs	r3, r0
 8003e62:	f8c7 32f8 	str.w	r3, [r7, #760]	; 0x2f8
 8003e66:	f8d7 330c 	ldr.w	r3, [r7, #780]	; 0x30c
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8003e70:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8003e74:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003e78:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8003e7c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8003e86:	4413      	add	r3, r2
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8003e92:	f8c7 2314 	str.w	r2, [r7, #788]	; 0x314
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	f8d7 6314 	ldr.w	r6, [r7, #788]	; 0x314
 8003ea2:	0233      	lsls	r3, r6, #8
 8003ea4:	f8d7 6310 	ldr.w	r6, [r7, #784]	; 0x310
 8003ea8:	ea43 6316 	orr.w	r3, r3, r6, lsr #24
 8003eac:	f8d7 6310 	ldr.w	r6, [r7, #784]	; 0x310
 8003eb0:	0232      	lsls	r2, r6, #8
 8003eb2:	ea40 0602 	orr.w	r6, r0, r2
 8003eb6:	f8c7 62f0 	str.w	r6, [r7, #752]	; 0x2f0
 8003eba:	430b      	orrs	r3, r1
 8003ebc:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8003ec0:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8003ec4:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ec8:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8003ecc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003ed0:	1c9a      	adds	r2, r3, #2
 8003ed2:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8003ed6:	4413      	add	r3, r2
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2200      	movs	r2, #0
 8003ede:	4698      	mov	r8, r3
 8003ee0:	4691      	mov	r9, r2
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003eee:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ef2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003ef6:	ea40 0602 	orr.w	r6, r0, r2
 8003efa:	f8c7 62e8 	str.w	r6, [r7, #744]	; 0x2e8
 8003efe:	430b      	orrs	r3, r1
 8003f00:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8003f04:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8003f08:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003f0c:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8003f10:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003f14:	1cda      	adds	r2, r3, #3
 8003f16:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8003f1a:	4413      	add	r3, r2
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2200      	movs	r2, #0
 8003f22:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8003f26:	f8c7 2304 	str.w	r2, [r7, #772]	; 0x304
 8003f2a:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8003f2e:	0a1d      	lsrs	r5, r3, #8
 8003f30:	f8d7 3300 	ldr.w	r3, [r7, #768]	; 0x300
 8003f34:	061c      	lsls	r4, r3, #24
 8003f36:	ea40 0304 	orr.w	r3, r0, r4
 8003f3a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8003f3e:	ea41 0305 	orr.w	r3, r1, r5
 8003f42:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8003f46:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8003f4a:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003f4e:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8003f52:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003f56:	1d1a      	adds	r2, r3, #4
 8003f58:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8003f5c:	4413      	add	r3, r2
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
 8003f68:	f8c7 22dc 	str.w	r2, [r7, #732]	; 0x2dc
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	f8d7 62d8 	ldr.w	r6, [r7, #728]	; 0x2d8
 8003f78:	0033      	movs	r3, r6
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	ea40 0602 	orr.w	r6, r0, r2
 8003f80:	f8c7 62d0 	str.w	r6, [r7, #720]	; 0x2d0
 8003f84:	430b      	orrs	r3, r1
 8003f86:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8003f8a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8003f8e:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003f92:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8003f96:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003f9a:	1d5a      	adds	r2, r3, #5
 8003f9c:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8003fa0:	4413      	add	r3, r2
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
 8003fac:	f8c7 22cc 	str.w	r2, [r7, #716]	; 0x2cc
 8003fb0:	f04f 0200 	mov.w	r2, #0
 8003fb4:	f04f 0300 	mov.w	r3, #0
 8003fb8:	f8d7 62c8 	ldr.w	r6, [r7, #712]	; 0x2c8
 8003fbc:	0233      	lsls	r3, r6, #8
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	ea40 0602 	orr.w	r6, r0, r2
 8003fc4:	f8c7 62c0 	str.w	r6, [r7, #704]	; 0x2c0
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 8003fce:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 8003fd2:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003fd6:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8003fda:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8003fde:	1d9a      	adds	r2, r3, #6
 8003fe0:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8003fe4:	4413      	add	r3, r2
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 32b8 	str.w	r3, [r7, #696]	; 0x2b8
 8003ff0:	f8c7 22bc 	str.w	r2, [r7, #700]	; 0x2bc
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	f8d7 62b8 	ldr.w	r6, [r7, #696]	; 0x2b8
 8004000:	0433      	lsls	r3, r6, #16
 8004002:	2200      	movs	r2, #0
 8004004:	ea40 0602 	orr.w	r6, r0, r2
 8004008:	f8c7 62b0 	str.w	r6, [r7, #688]	; 0x2b0
 800400c:	430b      	orrs	r3, r1
 800400e:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 8004012:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 8004016:	e9c7 23d2 	strd	r2, r3, [r7, #840]	; 0x348
      u_speed_spi.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800401a:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 800401e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004022:	1dda      	adds	r2, r3, #7
 8004024:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004028:	4413      	add	r3, r2
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2200      	movs	r2, #0
 8004030:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
 8004034:	f8c7 22ac 	str.w	r2, [r7, #684]	; 0x2ac
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	f04f 0300 	mov.w	r3, #0
 8004040:	f8d7 62a8 	ldr.w	r6, [r7, #680]	; 0x2a8
 8004044:	0633      	lsls	r3, r6, #24
 8004046:	2200      	movs	r2, #0
 8004048:	ea40 0a02 	orr.w	sl, r0, r2
 800404c:	ea41 0b03 	orr.w	fp, r1, r3
 8004050:	e9c7 abd2 	strd	sl, fp, [r7, #840]	; 0x348
      this->speed_sp[i] = u_speed_spi.real;
 8004054:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	; 0x348
 8004058:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 800405c:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8004060:	3301      	adds	r3, #1
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->speed_sp[i]);
 800406a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800406e:	3308      	adds	r3, #8
 8004070:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
      for( uint32_t i = 0; i < 4; i++){
 8004074:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8004078:	3301      	adds	r3, #1
 800407a:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 800407e:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 8004082:	2b03      	cmp	r3, #3
 8004084:	f67f aed6 	bls.w	8003e34 <_ZN9ired_msgs5Motor11deserializeEPh+0x20>
      }
      for( uint32_t i = 0; i < 4; i++){
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 800408e:	e133      	b.n	80042f8 <_ZN9ired_msgs5Motor11deserializeEPh+0x4e4>
      union {
        double real;
        uint64_t base;
      } u_speed_fbi;
      u_speed_fbi.base = 0;
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9c7 23d0 	strd	r2, r3, [r7, #832]	; 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800409c:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 80040a0:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 80040a4:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80040a8:	4413      	add	r3, r2
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2200      	movs	r2, #0
 80040b0:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
 80040b4:	f8c7 22a4 	str.w	r2, [r7, #676]	; 0x2a4
 80040b8:	e9d7 45a8 	ldrd	r4, r5, [r7, #672]	; 0x2a0
 80040bc:	4623      	mov	r3, r4
 80040be:	4303      	orrs	r3, r0
 80040c0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 80040c4:	462b      	mov	r3, r5
 80040c6:	430b      	orrs	r3, r1
 80040c8:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 80040cc:	e9d7 34a6 	ldrd	r3, r4, [r7, #664]	; 0x298
 80040d0:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80040d4:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 80040d8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80040e2:	4413      	add	r3, r2
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2200      	movs	r2, #0
 80040ea:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80040ee:	f8c7 2294 	str.w	r2, [r7, #660]	; 0x294
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 56a4 	ldrd	r5, r6, [r7, #656]	; 0x290
 80040fe:	4634      	mov	r4, r6
 8004100:	0223      	lsls	r3, r4, #8
 8004102:	462c      	mov	r4, r5
 8004104:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004108:	462c      	mov	r4, r5
 800410a:	0222      	lsls	r2, r4, #8
 800410c:	ea40 0402 	orr.w	r4, r0, r2
 8004110:	f8c7 4288 	str.w	r4, [r7, #648]	; 0x288
 8004114:	430b      	orrs	r3, r1
 8004116:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 800411a:	e9d7 34a2 	ldrd	r3, r4, [r7, #648]	; 0x288
 800411e:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004122:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8004126:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800412a:	1c9a      	adds	r2, r3, #2
 800412c:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004130:	4413      	add	r3, r2
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 3280 	str.w	r3, [r7, #640]	; 0x280
 800413c:	f8c7 2284 	str.w	r2, [r7, #644]	; 0x284
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	e9d7 56a0 	ldrd	r5, r6, [r7, #640]	; 0x280
 800414c:	4634      	mov	r4, r6
 800414e:	0423      	lsls	r3, r4, #16
 8004150:	462c      	mov	r4, r5
 8004152:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004156:	462c      	mov	r4, r5
 8004158:	0422      	lsls	r2, r4, #16
 800415a:	ea40 0402 	orr.w	r4, r0, r2
 800415e:	f8c7 4278 	str.w	r4, [r7, #632]	; 0x278
 8004162:	430b      	orrs	r3, r1
 8004164:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 8004168:	e9d7 349e 	ldrd	r3, r4, [r7, #632]	; 0x278
 800416c:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004170:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8004174:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004178:	1cda      	adds	r2, r3, #3
 800417a:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800417e:	4413      	add	r3, r2
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2200      	movs	r2, #0
 8004186:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 800418a:	f8c7 2274 	str.w	r2, [r7, #628]	; 0x274
 800418e:	e9d7 459c 	ldrd	r4, r5, [r7, #624]	; 0x270
 8004192:	4623      	mov	r3, r4
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 800419a:	4623      	mov	r3, r4
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80041a2:	e9d7 459a 	ldrd	r4, r5, [r7, #616]	; 0x268
 80041a6:	4623      	mov	r3, r4
 80041a8:	4303      	orrs	r3, r0
 80041aa:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 80041ae:	462b      	mov	r3, r5
 80041b0:	430b      	orrs	r3, r1
 80041b2:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80041b6:	e9d7 3498 	ldrd	r3, r4, [r7, #608]	; 0x260
 80041ba:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80041be:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 80041c2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80041c6:	1d1a      	adds	r2, r3, #4
 80041c8:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80041cc:	4413      	add	r3, r2
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80041d8:	f8c7 225c 	str.w	r2, [r7, #604]	; 0x25c
 80041dc:	f04f 0200 	mov.w	r2, #0
 80041e0:	f04f 0300 	mov.w	r3, #0
 80041e4:	f8d7 4258 	ldr.w	r4, [r7, #600]	; 0x258
 80041e8:	0023      	movs	r3, r4
 80041ea:	2200      	movs	r2, #0
 80041ec:	ea40 0402 	orr.w	r4, r0, r2
 80041f0:	f8c7 4250 	str.w	r4, [r7, #592]	; 0x250
 80041f4:	430b      	orrs	r3, r1
 80041f6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80041fa:	e9d7 3494 	ldrd	r3, r4, [r7, #592]	; 0x250
 80041fe:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004202:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 8004206:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800420a:	1d5a      	adds	r2, r3, #5
 800420c:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004210:	4413      	add	r3, r2
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	b2db      	uxtb	r3, r3
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800421c:	f8c7 224c 	str.w	r2, [r7, #588]	; 0x24c
 8004220:	f04f 0200 	mov.w	r2, #0
 8004224:	f04f 0300 	mov.w	r3, #0
 8004228:	f8d7 4248 	ldr.w	r4, [r7, #584]	; 0x248
 800422c:	0223      	lsls	r3, r4, #8
 800422e:	2200      	movs	r2, #0
 8004230:	ea40 0402 	orr.w	r4, r0, r2
 8004234:	f8c7 4240 	str.w	r4, [r7, #576]	; 0x240
 8004238:	430b      	orrs	r3, r1
 800423a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 800423e:	e9d7 3490 	ldrd	r3, r4, [r7, #576]	; 0x240
 8004242:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004246:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 800424a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800424e:	1d9a      	adds	r2, r3, #6
 8004250:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004254:	4413      	add	r3, r2
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2200      	movs	r2, #0
 800425c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8004260:	f8c7 223c 	str.w	r2, [r7, #572]	; 0x23c
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	f8d7 4238 	ldr.w	r4, [r7, #568]	; 0x238
 8004270:	0423      	lsls	r3, r4, #16
 8004272:	2200      	movs	r2, #0
 8004274:	ea40 0402 	orr.w	r4, r0, r2
 8004278:	f8c7 4230 	str.w	r4, [r7, #560]	; 0x230
 800427c:	430b      	orrs	r3, r1
 800427e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8004282:	e9d7 348c 	ldrd	r3, r4, [r7, #560]	; 0x230
 8004286:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
      u_speed_fbi.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800428a:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 800428e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004292:	1dda      	adds	r2, r3, #7
 8004294:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004298:	4413      	add	r3, r2
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80042a4:	f8c7 222c 	str.w	r2, [r7, #556]	; 0x22c
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	f04f 0300 	mov.w	r3, #0
 80042b0:	f8d7 4228 	ldr.w	r4, [r7, #552]	; 0x228
 80042b4:	0623      	lsls	r3, r4, #24
 80042b6:	2200      	movs	r2, #0
 80042b8:	ea40 0402 	orr.w	r4, r0, r2
 80042bc:	f8c7 4220 	str.w	r4, [r7, #544]	; 0x220
 80042c0:	430b      	orrs	r3, r1
 80042c2:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80042c6:	e9d7 3488 	ldrd	r3, r4, [r7, #544]	; 0x220
 80042ca:	e9c7 34d0 	strd	r3, r4, [r7, #832]	; 0x340
      this->speed_fb[i] = u_speed_fbi.real;
 80042ce:	e9d7 01d0 	ldrd	r0, r1, [r7, #832]	; 0x340
 80042d2:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 80042d6:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80042da:	3305      	adds	r3, #5
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	4413      	add	r3, r2
 80042e0:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->speed_fb[i]);
 80042e4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80042e8:	3308      	adds	r3, #8
 80042ea:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
      for( uint32_t i = 0; i < 4; i++){
 80042ee:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80042f2:	3301      	adds	r3, #1
 80042f4:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80042f8:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	f67f aec7 	bls.w	8004090 <_ZN9ired_msgs5Motor11deserializeEPh+0x27c>
      }
      for( uint32_t i = 0; i < 3; i++){
 8004302:	2300      	movs	r3, #0
 8004304:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8004308:	e133      	b.n	8004572 <_ZN9ired_msgs5Motor11deserializeEPh+0x75e>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_front_lefti;
      u_pid_motor_front_lefti.base = 0;
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	e9c7 23ce 	strd	r2, r3, [r7, #824]	; 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004316:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 800431a:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 800431e:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004322:	4413      	add	r3, r2
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2200      	movs	r2, #0
 800432a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800432e:	f8c7 221c 	str.w	r2, [r7, #540]	; 0x21c
 8004332:	e9d7 4586 	ldrd	r4, r5, [r7, #536]	; 0x218
 8004336:	4623      	mov	r3, r4
 8004338:	4303      	orrs	r3, r0
 800433a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800433e:	462b      	mov	r3, r5
 8004340:	430b      	orrs	r3, r1
 8004342:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8004346:	e9d7 3484 	ldrd	r3, r4, [r7, #528]	; 0x210
 800434a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800434e:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8004352:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800435c:	4413      	add	r3, r2
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2200      	movs	r2, #0
 8004364:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8004368:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	e9d7 5682 	ldrd	r5, r6, [r7, #520]	; 0x208
 8004378:	4634      	mov	r4, r6
 800437a:	0223      	lsls	r3, r4, #8
 800437c:	462c      	mov	r4, r5
 800437e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004382:	462c      	mov	r4, r5
 8004384:	0222      	lsls	r2, r4, #8
 8004386:	ea40 0402 	orr.w	r4, r0, r2
 800438a:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 800438e:	430b      	orrs	r3, r1
 8004390:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8004394:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 8004398:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800439c:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80043a0:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80043a4:	1c9a      	adds	r2, r3, #2
 80043a6:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80043aa:	4413      	add	r3, r2
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2200      	movs	r2, #0
 80043b2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80043b6:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 80043ba:	f04f 0200 	mov.w	r2, #0
 80043be:	f04f 0300 	mov.w	r3, #0
 80043c2:	e9d7 567e 	ldrd	r5, r6, [r7, #504]	; 0x1f8
 80043c6:	4634      	mov	r4, r6
 80043c8:	0423      	lsls	r3, r4, #16
 80043ca:	462c      	mov	r4, r5
 80043cc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80043d0:	462c      	mov	r4, r5
 80043d2:	0422      	lsls	r2, r4, #16
 80043d4:	ea40 0402 	orr.w	r4, r0, r2
 80043d8:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80043dc:	430b      	orrs	r3, r1
 80043de:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80043e2:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80043e6:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80043ea:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80043ee:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80043f2:	1cda      	adds	r2, r3, #3
 80043f4:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80043f8:	4413      	add	r3, r2
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004404:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 8004408:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 800440c:	4623      	mov	r3, r4
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8004414:	4623      	mov	r3, r4
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800441c:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8004420:	4623      	mov	r3, r4
 8004422:	4303      	orrs	r3, r0
 8004424:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8004428:	462b      	mov	r3, r5
 800442a:	430b      	orrs	r3, r1
 800442c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8004430:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8004434:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004438:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 800443c:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004440:	1d1a      	adds	r2, r3, #4
 8004442:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004446:	4413      	add	r3, r2
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2200      	movs	r2, #0
 800444e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8004452:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 8004462:	0023      	movs	r3, r4
 8004464:	2200      	movs	r2, #0
 8004466:	ea40 0402 	orr.w	r4, r0, r2
 800446a:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 800446e:	430b      	orrs	r3, r1
 8004470:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8004474:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 8004478:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800447c:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8004480:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004484:	1d5a      	adds	r2, r3, #5
 8004486:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800448a:	4413      	add	r3, r2
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2200      	movs	r2, #0
 8004492:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004496:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 80044a6:	0223      	lsls	r3, r4, #8
 80044a8:	2200      	movs	r2, #0
 80044aa:	ea40 0402 	orr.w	r4, r0, r2
 80044ae:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 80044b2:	430b      	orrs	r3, r1
 80044b4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80044b8:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 80044bc:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80044c0:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 80044c4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80044c8:	1d9a      	adds	r2, r3, #6
 80044ca:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80044ce:	4413      	add	r3, r2
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80044da:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80044de:	f04f 0200 	mov.w	r2, #0
 80044e2:	f04f 0300 	mov.w	r3, #0
 80044e6:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 80044ea:	0423      	lsls	r3, r4, #16
 80044ec:	2200      	movs	r2, #0
 80044ee:	ea40 0402 	orr.w	r4, r0, r2
 80044f2:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 80044f6:	430b      	orrs	r3, r1
 80044f8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 80044fc:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8004500:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
      u_pid_motor_front_lefti.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004504:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 8004508:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800450c:	1dda      	adds	r2, r3, #7
 800450e:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004512:	4413      	add	r3, r2
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2200      	movs	r2, #0
 800451a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800451e:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 800452e:	0623      	lsls	r3, r4, #24
 8004530:	2200      	movs	r2, #0
 8004532:	ea40 0402 	orr.w	r4, r0, r2
 8004536:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800453a:	430b      	orrs	r3, r1
 800453c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8004540:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8004544:	e9c7 34ce 	strd	r3, r4, [r7, #824]	; 0x338
      this->pid_motor_front_left[i] = u_pid_motor_front_lefti.real;
 8004548:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	; 0x338
 800454c:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8004550:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8004554:	3309      	adds	r3, #9
 8004556:	00db      	lsls	r3, r3, #3
 8004558:	4413      	add	r3, r2
 800455a:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->pid_motor_front_left[i]);
 800455e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004562:	3308      	adds	r3, #8
 8004564:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
      for( uint32_t i = 0; i < 3; i++){
 8004568:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 800456c:	3301      	adds	r3, #1
 800456e:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8004572:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8004576:	2b02      	cmp	r3, #2
 8004578:	f67f aec7 	bls.w	800430a <_ZN9ired_msgs5Motor11deserializeEPh+0x4f6>
      }
      for( uint32_t i = 0; i < 3; i++){
 800457c:	2300      	movs	r3, #0
 800457e:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8004582:	e133      	b.n	80047ec <_ZN9ired_msgs5Motor11deserializeEPh+0x9d8>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_front_righti;
      u_pid_motor_front_righti.base = 0;
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9c7 23cc 	strd	r2, r3, [r7, #816]	; 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004590:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 8004594:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004598:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800459c:	4413      	add	r3, r2
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80045a8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80045ac:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 80045b0:	4623      	mov	r3, r4
 80045b2:	4303      	orrs	r3, r0
 80045b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80045b8:	462b      	mov	r3, r5
 80045ba:	430b      	orrs	r3, r1
 80045bc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80045c0:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80045c4:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80045c8:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80045cc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80045d0:	1c5a      	adds	r2, r3, #1
 80045d2:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80045d6:	4413      	add	r3, r2
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80045e2:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	e9d7 5660 	ldrd	r5, r6, [r7, #384]	; 0x180
 80045f2:	4634      	mov	r4, r6
 80045f4:	0223      	lsls	r3, r4, #8
 80045f6:	462c      	mov	r4, r5
 80045f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045fc:	462c      	mov	r4, r5
 80045fe:	0222      	lsls	r2, r4, #8
 8004600:	ea40 0402 	orr.w	r4, r0, r2
 8004604:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8004608:	430b      	orrs	r3, r1
 800460a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800460e:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004612:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004616:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 800461a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800461e:	1c9a      	adds	r2, r3, #2
 8004620:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004624:	4413      	add	r3, r2
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2200      	movs	r2, #0
 800462c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004630:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	e9d7 565c 	ldrd	r5, r6, [r7, #368]	; 0x170
 8004640:	4634      	mov	r4, r6
 8004642:	0423      	lsls	r3, r4, #16
 8004644:	462c      	mov	r4, r5
 8004646:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800464a:	462c      	mov	r4, r5
 800464c:	0422      	lsls	r2, r4, #16
 800464e:	ea40 0402 	orr.w	r4, r0, r2
 8004652:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8004656:	430b      	orrs	r3, r1
 8004658:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800465c:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004660:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004664:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 8004668:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800466c:	1cda      	adds	r2, r3, #3
 800466e:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004672:	4413      	add	r3, r2
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800467e:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004682:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004686:	4623      	mov	r3, r4
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800468e:	4623      	mov	r3, r4
 8004690:	061b      	lsls	r3, r3, #24
 8004692:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004696:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 800469a:	4623      	mov	r3, r4
 800469c:	4303      	orrs	r3, r0
 800469e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80046a2:	462b      	mov	r3, r5
 80046a4:	430b      	orrs	r3, r1
 80046a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80046aa:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80046ae:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80046b2:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80046b6:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80046c0:	4413      	add	r3, r2
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80046cc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80046dc:	0023      	movs	r3, r4
 80046de:	2200      	movs	r2, #0
 80046e0:	ea40 0402 	orr.w	r4, r0, r2
 80046e4:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80046e8:	430b      	orrs	r3, r1
 80046ea:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80046ee:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80046f2:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80046f6:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80046fa:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80046fe:	1d5a      	adds	r2, r3, #5
 8004700:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004704:	4413      	add	r3, r2
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2200      	movs	r2, #0
 800470c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004710:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004714:	f04f 0200 	mov.w	r2, #0
 8004718:	f04f 0300 	mov.w	r3, #0
 800471c:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8004720:	0223      	lsls	r3, r4, #8
 8004722:	2200      	movs	r2, #0
 8004724:	ea40 0402 	orr.w	r4, r0, r2
 8004728:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800472c:	430b      	orrs	r3, r1
 800472e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004732:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8004736:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800473a:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 800473e:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004742:	1d9a      	adds	r2, r3, #6
 8004744:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004748:	4413      	add	r3, r2
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2200      	movs	r2, #0
 8004750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004754:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8004764:	0423      	lsls	r3, r4, #16
 8004766:	2200      	movs	r2, #0
 8004768:	ea40 0402 	orr.w	r4, r0, r2
 800476c:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8004770:	430b      	orrs	r3, r1
 8004772:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004776:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800477a:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
      u_pid_motor_front_righti.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800477e:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 8004782:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004786:	1dda      	adds	r2, r3, #7
 8004788:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800478c:	4413      	add	r3, r2
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2200      	movs	r2, #0
 8004794:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004798:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80047a8:	0623      	lsls	r3, r4, #24
 80047aa:	2200      	movs	r2, #0
 80047ac:	ea40 0402 	orr.w	r4, r0, r2
 80047b0:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80047b4:	430b      	orrs	r3, r1
 80047b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80047ba:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80047be:	e9c7 34cc 	strd	r3, r4, [r7, #816]	; 0x330
      this->pid_motor_front_right[i] = u_pid_motor_front_righti.real;
 80047c2:	e9d7 01cc 	ldrd	r0, r1, [r7, #816]	; 0x330
 80047c6:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 80047ca:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80047ce:	330c      	adds	r3, #12
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->pid_motor_front_right[i]);
 80047d8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80047dc:	3308      	adds	r3, #8
 80047de:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
      for( uint32_t i = 0; i < 3; i++){
 80047e2:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80047e6:	3301      	adds	r3, #1
 80047e8:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80047ec:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	f67f aec7 	bls.w	8004584 <_ZN9ired_msgs5Motor11deserializeEPh+0x770>
      }
      for( uint32_t i = 0; i < 3; i++){
 80047f6:	2300      	movs	r3, #0
 80047f8:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80047fc:	e133      	b.n	8004a66 <_ZN9ired_msgs5Motor11deserializeEPh+0xc52>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_rear_lefti;
      u_pid_motor_rear_lefti.base = 0;
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	e9c7 23ca 	strd	r2, r3, [r7, #808]	; 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800480a:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 800480e:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004812:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004816:	4413      	add	r3, r2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2200      	movs	r2, #0
 800481e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004822:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004826:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800482a:	4623      	mov	r3, r4
 800482c:	4303      	orrs	r3, r0
 800482e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004832:	462b      	mov	r3, r5
 8004834:	430b      	orrs	r3, r1
 8004836:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800483a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800483e:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004842:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8004846:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004850:	4413      	add	r3, r2
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2200      	movs	r2, #0
 8004858:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800485c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8004860:	f04f 0200 	mov.w	r2, #0
 8004864:	f04f 0300 	mov.w	r3, #0
 8004868:	e9d7 563e 	ldrd	r5, r6, [r7, #248]	; 0xf8
 800486c:	4634      	mov	r4, r6
 800486e:	0223      	lsls	r3, r4, #8
 8004870:	462c      	mov	r4, r5
 8004872:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004876:	462c      	mov	r4, r5
 8004878:	0222      	lsls	r2, r4, #8
 800487a:	ea40 0402 	orr.w	r4, r0, r2
 800487e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8004882:	430b      	orrs	r3, r1
 8004884:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004888:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800488c:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004890:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8004894:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004898:	1c9a      	adds	r2, r3, #2
 800489a:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800489e:	4413      	add	r3, r2
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	e9d7 563a 	ldrd	r5, r6, [r7, #232]	; 0xe8
 80048ba:	4634      	mov	r4, r6
 80048bc:	0423      	lsls	r3, r4, #16
 80048be:	462c      	mov	r4, r5
 80048c0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80048c4:	462c      	mov	r4, r5
 80048c6:	0422      	lsls	r2, r4, #16
 80048c8:	ea40 0402 	orr.w	r4, r0, r2
 80048cc:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80048d0:	430b      	orrs	r3, r1
 80048d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048d6:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80048da:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80048de:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 80048e2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80048e6:	1cda      	adds	r2, r3, #3
 80048e8:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80048ec:	4413      	add	r3, r2
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048f8:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048fc:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004900:	4623      	mov	r3, r4
 8004902:	0a1b      	lsrs	r3, r3, #8
 8004904:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004908:	4623      	mov	r3, r4
 800490a:	061b      	lsls	r3, r3, #24
 800490c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004910:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004914:	4623      	mov	r3, r4
 8004916:	4303      	orrs	r3, r0
 8004918:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800491c:	462b      	mov	r3, r5
 800491e:	430b      	orrs	r3, r1
 8004920:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004924:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8004928:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800492c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8004930:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004934:	1d1a      	adds	r2, r3, #4
 8004936:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800493a:	4413      	add	r3, r2
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2200      	movs	r2, #0
 8004942:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004946:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8004956:	0023      	movs	r3, r4
 8004958:	2200      	movs	r2, #0
 800495a:	ea40 0402 	orr.w	r4, r0, r2
 800495e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8004962:	430b      	orrs	r3, r1
 8004964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004968:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 800496c:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004970:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8004974:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004978:	1d5a      	adds	r2, r3, #5
 800497a:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 800497e:	4413      	add	r3, r2
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2200      	movs	r2, #0
 8004986:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800498a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800499a:	0223      	lsls	r3, r4, #8
 800499c:	2200      	movs	r2, #0
 800499e:	ea40 0402 	orr.w	r4, r0, r2
 80049a2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80049a6:	430b      	orrs	r3, r1
 80049a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049ac:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80049b0:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80049b4:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 80049b8:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 80049bc:	1d9a      	adds	r2, r3, #6
 80049be:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 80049c2:	4413      	add	r3, r2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80049de:	0423      	lsls	r3, r4, #16
 80049e0:	2200      	movs	r2, #0
 80049e2:	ea40 0402 	orr.w	r4, r0, r2
 80049e6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80049ea:	430b      	orrs	r3, r1
 80049ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049f0:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80049f4:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
      u_pid_motor_rear_lefti.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80049f8:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 80049fc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004a00:	1dda      	adds	r2, r3, #7
 8004a02:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004a06:	4413      	add	r3, r2
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8004a22:	0623      	lsls	r3, r4, #24
 8004a24:	2200      	movs	r2, #0
 8004a26:	ea40 0402 	orr.w	r4, r0, r2
 8004a2a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004a2e:	430b      	orrs	r3, r1
 8004a30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004a34:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8004a38:	e9c7 34ca 	strd	r3, r4, [r7, #808]	; 0x328
      this->pid_motor_rear_left[i] = u_pid_motor_rear_lefti.real;
 8004a3c:	e9d7 01ca 	ldrd	r0, r1, [r7, #808]	; 0x328
 8004a40:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8004a44:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8004a48:	330f      	adds	r3, #15
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->pid_motor_rear_left[i]);
 8004a52:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004a56:	3308      	adds	r3, #8
 8004a58:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
      for( uint32_t i = 0; i < 3; i++){
 8004a5c:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8004a60:	3301      	adds	r3, #1
 8004a62:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8004a66:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	f67f aec7 	bls.w	80047fe <_ZN9ired_msgs5Motor11deserializeEPh+0x9ea>
      }
      for( uint32_t i = 0; i < 3; i++){
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004a76:	e10f      	b.n	8004c98 <_ZN9ired_msgs5Motor11deserializeEPh+0xe84>
      union {
        double real;
        uint64_t base;
      } u_pid_motor_rear_righti;
      u_pid_motor_rear_righti.base = 0;
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9c7 23c8 	strd	r2, r3, [r7, #800]	; 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004a84:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8004a88:	f8d7 236c 	ldr.w	r2, [r7, #876]	; 0x36c
 8004a8c:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004a90:	4413      	add	r3, r2
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004aa0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8004aa4:	4623      	mov	r3, r4
 8004aa6:	4303      	orrs	r3, r0
 8004aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aaa:	462b      	mov	r3, r5
 8004aac:	430b      	orrs	r3, r1
 8004aae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004ab0:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004ab4:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004ab8:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8004abc:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004ac6:	4413      	add	r3, r2
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2200      	movs	r2, #0
 8004ace:	673b      	str	r3, [r7, #112]	; 0x70
 8004ad0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 561c 	ldrd	r5, r6, [r7, #112]	; 0x70
 8004ade:	4634      	mov	r4, r6
 8004ae0:	0223      	lsls	r3, r4, #8
 8004ae2:	462c      	mov	r4, r5
 8004ae4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ae8:	462c      	mov	r4, r5
 8004aea:	0222      	lsls	r2, r4, #8
 8004aec:	ea40 0402 	orr.w	r4, r0, r2
 8004af0:	66bc      	str	r4, [r7, #104]	; 0x68
 8004af2:	430b      	orrs	r3, r1
 8004af4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004af6:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004afa:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004afe:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8004b02:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004b06:	1c9a      	adds	r2, r3, #2
 8004b08:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004b0c:	4413      	add	r3, r2
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2200      	movs	r2, #0
 8004b14:	663b      	str	r3, [r7, #96]	; 0x60
 8004b16:	667a      	str	r2, [r7, #100]	; 0x64
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	e9d7 5618 	ldrd	r5, r6, [r7, #96]	; 0x60
 8004b24:	4634      	mov	r4, r6
 8004b26:	0423      	lsls	r3, r4, #16
 8004b28:	462c      	mov	r4, r5
 8004b2a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004b2e:	462c      	mov	r4, r5
 8004b30:	0422      	lsls	r2, r4, #16
 8004b32:	ea40 0402 	orr.w	r4, r0, r2
 8004b36:	65bc      	str	r4, [r7, #88]	; 0x58
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b3c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004b40:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004b44:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8004b48:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004b4c:	1cda      	adds	r2, r3, #3
 8004b4e:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004b52:	4413      	add	r3, r2
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2200      	movs	r2, #0
 8004b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b5c:	657a      	str	r2, [r7, #84]	; 0x54
 8004b5e:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004b62:	4623      	mov	r3, r4
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b68:	4623      	mov	r3, r4
 8004b6a:	061b      	lsls	r3, r3, #24
 8004b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b6e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004b72:	4623      	mov	r3, r4
 8004b74:	4303      	orrs	r3, r0
 8004b76:	643b      	str	r3, [r7, #64]	; 0x40
 8004b78:	462b      	mov	r3, r5
 8004b7a:	430b      	orrs	r3, r1
 8004b7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b7e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004b82:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004b86:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8004b8a:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004b8e:	1d1a      	adds	r2, r3, #4
 8004b90:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004b94:	4413      	add	r3, r2
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b9e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8004baa:	0023      	movs	r3, r4
 8004bac:	2200      	movs	r2, #0
 8004bae:	ea40 0402 	orr.w	r4, r0, r2
 8004bb2:	633c      	str	r4, [r7, #48]	; 0x30
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bb8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004bbc:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004bc0:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8004bc4:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004bc8:	1d5a      	adds	r2, r3, #5
 8004bca:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004bce:	4413      	add	r3, r2
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8004be4:	0223      	lsls	r3, r4, #8
 8004be6:	2200      	movs	r2, #0
 8004be8:	ea40 0402 	orr.w	r4, r0, r2
 8004bec:	623c      	str	r4, [r7, #32]
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004bf6:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004bfa:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8004bfe:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004c02:	1d9a      	adds	r2, r3, #6
 8004c04:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004c08:	4413      	add	r3, r2
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2200      	movs	r2, #0
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	61fa      	str	r2, [r7, #28]
 8004c14:	f04f 0200 	mov.w	r2, #0
 8004c18:	f04f 0300 	mov.w	r3, #0
 8004c1c:	69bc      	ldr	r4, [r7, #24]
 8004c1e:	0423      	lsls	r3, r4, #16
 8004c20:	2200      	movs	r2, #0
 8004c22:	ea40 0402 	orr.w	r4, r0, r2
 8004c26:	613c      	str	r4, [r7, #16]
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004c30:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
      u_pid_motor_rear_righti.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004c34:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8004c38:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004c3c:	1dda      	adds	r2, r3, #7
 8004c3e:	f8d7 3318 	ldr.w	r3, [r7, #792]	; 0x318
 8004c42:	4413      	add	r3, r2
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2200      	movs	r2, #0
 8004c4a:	60bb      	str	r3, [r7, #8]
 8004c4c:	60fa      	str	r2, [r7, #12]
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	68bc      	ldr	r4, [r7, #8]
 8004c58:	0623      	lsls	r3, r4, #24
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	ea40 0402 	orr.w	r4, r0, r2
 8004c60:	603c      	str	r4, [r7, #0]
 8004c62:	430b      	orrs	r3, r1
 8004c64:	607b      	str	r3, [r7, #4]
 8004c66:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004c6a:	e9c7 34c8 	strd	r3, r4, [r7, #800]	; 0x320
      this->pid_motor_rear_right[i] = u_pid_motor_rear_righti.real;
 8004c6e:	e9d7 01c8 	ldrd	r0, r1, [r7, #800]	; 0x320
 8004c72:	f8d7 231c 	ldr.w	r2, [r7, #796]	; 0x31c
 8004c76:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c7a:	3312      	adds	r3, #18
 8004c7c:	00db      	lsls	r3, r3, #3
 8004c7e:	4413      	add	r3, r2
 8004c80:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->pid_motor_rear_right[i]);
 8004c84:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
 8004c88:	3308      	adds	r3, #8
 8004c8a:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
      for( uint32_t i = 0; i < 3; i++){
 8004c8e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c92:	3301      	adds	r3, #1
 8004c94:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004c98:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	f67f aeeb 	bls.w	8004a78 <_ZN9ired_msgs5Motor11deserializeEPh+0xc64>
      }
     return offset;
 8004ca2:	f8d7 336c 	ldr.w	r3, [r7, #876]	; 0x36c
    }
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f507 775c 	add.w	r7, r7, #880	; 0x370
 8004cac:	46bd      	mov	sp, r7
 8004cae:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cb2:	4770      	bx	lr

08004cb4 <_ZN9ired_msgs5Motor7getTypeEv>:

    virtual const char * getType() override { return "ired_msgs/Motor"; };
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	4b03      	ldr	r3, [pc, #12]	; (8004ccc <_ZN9ired_msgs5Motor7getTypeEv+0x18>)
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	370c      	adds	r7, #12
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	08012e1c 	.word	0x08012e1c

08004cd0 <_ZN9ired_msgs5Motor6getMD5Ev>:
    virtual const char * getMD5() override { return "ec2526e9a146e07c0941072e0ef16c7b"; };
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	4b03      	ldr	r3, [pc, #12]	; (8004ce8 <_ZN9ired_msgs5Motor6getMD5Ev+0x18>)
 8004cda:	4618      	mov	r0, r3
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	08012e2c 	.word	0x08012e2c

08004cec <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
    {
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fc faa4 	bl	8001244 <_ZN3ros3MsgC1Ev>
 8004cfc:	4a03      	ldr	r2, [pc, #12]	; (8004d0c <_ZN8std_msgs5EmptyC1Ev+0x20>)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
    }
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	08012f98 	.word	0x08012f98

08004d10 <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
      return offset;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
    }
 8004d20:	4618      	mov	r0, r3
 8004d22:	3714      	adds	r7, #20
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
     return offset;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
    }
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3714      	adds	r7, #20
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <_ZN8std_msgs5Empty7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Empty"; };
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 8004d52:	4618      	mov	r0, r3
 8004d54:	370c      	adds	r7, #12
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	08012e50 	.word	0x08012e50

08004d64 <_ZN8std_msgs5Empty6getMD5Ev>:
    virtual const char * getMD5() override { return "d41d8cd98f00b204e9800998ecf8427e"; };
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	4b03      	ldr	r3, [pc, #12]	; (8004d7c <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 8004d6e:	4618      	mov	r0, r3
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	08012e60 	.word	0x08012e60

08004d80 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	4a04      	ldr	r2, [pc, #16]	; (8004d9c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	08013028 	.word	0x08013028

08004da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff ffe8 	bl	8004d80 <_ZN3ros15NodeHandleBase_C1Ev>
 8004db0:	4a36      	ldr	r2, [pc, #216]	; (8004e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fd f8cc 	bl	8001f58 <_ZN13STM32HardwareC1Ev>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004de6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f00a fb40 	bl	800f472 <memset>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f00a fb37 	bl	800f472 <memset>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004e0a:	2264      	movs	r2, #100	; 0x64
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f00a fb2f 	bl	800f472 <memset>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8004e1a:	2264      	movs	r2, #100	; 0x64
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f00a fb27 	bl	800f472 <memset>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fc fd56 	bl	800192c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	08012f84 	.word	0x08012f84

08004e90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004e90:	b5b0      	push	{r4, r5, r7, lr}
 8004e92:	b096      	sub	sp, #88	; 0x58
 8004e94:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004e96:	f003 ff2d 	bl	8008cf4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004e9a:	f000 fadb 	bl	8005454 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004e9e:	f000 fe5b 	bl	8005b58 <_ZL12MX_GPIO_Initv>
	MX_DMA_Init();
 8004ea2:	f000 fe31 	bl	8005b08 <_ZL11MX_DMA_Initv>
	MX_TIM1_Init();
 8004ea6:	f000 fb8b 	bl	80055c0 <_ZL12MX_TIM1_Initv>
	MX_TIM2_Init();
 8004eaa:	f000 fbeb 	bl	8005684 <_ZL12MX_TIM2_Initv>
	MX_TIM4_Init();
 8004eae:	f000 fcdf 	bl	8005870 <_ZL12MX_TIM4_Initv>
	MX_TIM3_Init();
 8004eb2:	f000 fc7f 	bl	80057b4 <_ZL12MX_TIM3_Initv>
	MX_I2C1_Init();
 8004eb6:	f000 fb4f 	bl	8005558 <_ZL12MX_I2C1_Initv>
	MX_TIM5_Init();
 8004eba:	f000 fd37 	bl	800592c <_ZL12MX_TIM5_Initv>
	MX_TIM8_Init();
 8004ebe:	f000 fd93 	bl	80059e8 <_ZL12MX_TIM8_Initv>
	MX_USART1_UART_Init();
 8004ec2:	f000 fdf3 	bl	8005aac <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */
	/* LED Status */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ecc:	4876      	ldr	r0, [pc, #472]	; (80050a8 <main+0x218>)
 8004ece:	f004 fe4f 	bl	8009b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ed8:	4873      	ldr	r0, [pc, #460]	; (80050a8 <main+0x218>)
 8004eda:	f004 fe49 	bl	8009b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ee4:	4870      	ldr	r0, [pc, #448]	; (80050a8 <main+0x218>)
 8004ee6:	f004 fe43 	bl	8009b70 <HAL_GPIO_WritePin>

	uint8_t status = mpu.begin();
 8004eea:	2200      	movs	r2, #0
 8004eec:	2101      	movs	r1, #1
 8004eee:	486f      	ldr	r0, [pc, #444]	; (80050ac <main+0x21c>)
 8004ef0:	f002 fd7a 	bl	80079e8 <_ZN7MPU92505beginEii>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while (status != HAL_OK) {
 8004efa:	e010      	b.n	8004f1e <main+0x8e>
		status = mpu.begin();
 8004efc:	2200      	movs	r2, #0
 8004efe:	2101      	movs	r1, #1
 8004f00:	486a      	ldr	r0, [pc, #424]	; (80050ac <main+0x21c>)
 8004f02:	f002 fd71 	bl	80079e8 <_ZN7MPU92505beginEii>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8004f0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f10:	4865      	ldr	r0, [pc, #404]	; (80050a8 <main+0x218>)
 8004f12:	f004 fe46 	bl	8009ba2 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8004f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f1a:	f003 ff5d 	bl	8008dd8 <HAL_Delay>
	while (status != HAL_OK) {
 8004f1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1ea      	bne.n	8004efc <main+0x6c>
	}
	mpu.calcOffsets();
 8004f26:	2201      	movs	r2, #1
 8004f28:	2101      	movs	r1, #1
 8004f2a:	4860      	ldr	r0, [pc, #384]	; (80050ac <main+0x21c>)
 8004f2c:	f002 fef8 	bl	8007d20 <_ZN7MPU925011calcOffsetsEbb>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8004f30:	2201      	movs	r2, #1
 8004f32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f36:	485c      	ldr	r0, [pc, #368]	; (80050a8 <main+0x218>)
 8004f38:	f004 fe1a 	bl	8009b70 <HAL_GPIO_WritePin>

	/* Motor */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	485c      	ldr	r0, [pc, #368]	; (80050b0 <main+0x220>)
 8004f40:	f006 fd30 	bl	800b9a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8004f44:	2104      	movs	r1, #4
 8004f46:	485a      	ldr	r0, [pc, #360]	; (80050b0 <main+0x220>)
 8004f48:	f006 fd2c 	bl	800b9a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8004f4c:	2108      	movs	r1, #8
 8004f4e:	4858      	ldr	r0, [pc, #352]	; (80050b0 <main+0x220>)
 8004f50:	f006 fd28 	bl	800b9a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8004f54:	210c      	movs	r1, #12
 8004f56:	4856      	ldr	r0, [pc, #344]	; (80050b0 <main+0x220>)
 8004f58:	f006 fd24 	bl	800b9a4 <HAL_TIM_PWM_Start>
	TIM2->CCR1 = 0;
 8004f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f60:	2200      	movs	r2, #0
 8004f62:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCR2 = 0;
 8004f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f68:	2200      	movs	r2, #0
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR3 = 0;
 8004f6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f70:	2200      	movs	r2, #0
 8004f72:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CCR4 = 0;
 8004f74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f78:	2200      	movs	r2, #0
 8004f7a:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	2101      	movs	r1, #1
 8004f80:	484c      	ldr	r0, [pc, #304]	; (80050b4 <main+0x224>)
 8004f82:	f004 fdf5 	bl	8009b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8004f86:	2201      	movs	r2, #1
 8004f88:	2102      	movs	r1, #2
 8004f8a:	484a      	ldr	r0, [pc, #296]	; (80050b4 <main+0x224>)
 8004f8c:	f004 fdf0 	bl	8009b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8004f90:	2201      	movs	r2, #1
 8004f92:	2104      	movs	r1, #4
 8004f94:	4847      	ldr	r0, [pc, #284]	; (80050b4 <main+0x224>)
 8004f96:	f004 fdeb 	bl	8009b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	2108      	movs	r1, #8
 8004f9e:	4845      	ldr	r0, [pc, #276]	; (80050b4 <main+0x224>)
 8004fa0:	f004 fde6 	bl	8009b70 <HAL_GPIO_WritePin>

	/* Encoder */
	HAL_TIM_Base_Start_IT(&htim4);
 8004fa4:	4844      	ldr	r0, [pc, #272]	; (80050b8 <main+0x228>)
 8004fa6:	f006 fc3d 	bl	800b824 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8004faa:	213c      	movs	r1, #60	; 0x3c
 8004fac:	4843      	ldr	r0, [pc, #268]	; (80050bc <main+0x22c>)
 8004fae:	f006 fe67 	bl	800bc80 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8004fb2:	213c      	movs	r1, #60	; 0x3c
 8004fb4:	4842      	ldr	r0, [pc, #264]	; (80050c0 <main+0x230>)
 8004fb6:	f006 fe63 	bl	800bc80 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8004fba:	213c      	movs	r1, #60	; 0x3c
 8004fbc:	4841      	ldr	r0, [pc, #260]	; (80050c4 <main+0x234>)
 8004fbe:	f006 fe5f 	bl	800bc80 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8004fc2:	213c      	movs	r1, #60	; 0x3c
 8004fc4:	4840      	ldr	r0, [pc, #256]	; (80050c8 <main+0x238>)
 8004fc6:	f006 fe5b 	bl	800bc80 <HAL_TIM_Encoder_Start>
	htim1.Instance->CNT = 30000;
 8004fca:	4b3c      	ldr	r3, [pc, #240]	; (80050bc <main+0x22c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f247 5230 	movw	r2, #30000	; 0x7530
 8004fd2:	625a      	str	r2, [r3, #36]	; 0x24
	htim3.Instance->CNT = 30000;
 8004fd4:	4b3a      	ldr	r3, [pc, #232]	; (80050c0 <main+0x230>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f247 5230 	movw	r2, #30000	; 0x7530
 8004fdc:	625a      	str	r2, [r3, #36]	; 0x24
	htim5.Instance->CNT = 30000;
 8004fde:	4b39      	ldr	r3, [pc, #228]	; (80050c4 <main+0x234>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f247 5230 	movw	r2, #30000	; 0x7530
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24
	htim8.Instance->CNT = 30000;
 8004fe8:	4b37      	ldr	r3, [pc, #220]	; (80050c8 <main+0x238>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f247 5230 	movw	r2, #30000	; 0x7530
 8004ff0:	625a      	str	r2, [r3, #36]	; 0x24

	/* PID Data */
	motor_initData(&motor_front_left_);
 8004ff2:	4836      	ldr	r0, [pc, #216]	; (80050cc <main+0x23c>)
 8004ff4:	f001 fa64 	bl	80064c0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_front_right_);
 8004ff8:	4835      	ldr	r0, [pc, #212]	; (80050d0 <main+0x240>)
 8004ffa:	f001 fa61 	bl	80064c0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_rear_left_);
 8004ffe:	4835      	ldr	r0, [pc, #212]	; (80050d4 <main+0x244>)
 8005000:	f001 fa5e 	bl	80064c0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	motor_initData(&motor_rear_right_);
 8005004:	4834      	ldr	r0, [pc, #208]	; (80050d8 <main+0x248>)
 8005006:	f001 fa5b 	bl	80064c0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>
	resetPIDData(&pid_data_front_left_);
 800500a:	4834      	ldr	r0, [pc, #208]	; (80050dc <main+0x24c>)
 800500c:	f002 fc2e 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_front_right_);
 8005010:	4833      	ldr	r0, [pc, #204]	; (80050e0 <main+0x250>)
 8005012:	f002 fc2b 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_rear_left_);
 8005016:	4833      	ldr	r0, [pc, #204]	; (80050e4 <main+0x254>)
 8005018:	f002 fc28 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
	resetPIDData(&pid_data_rear_right_);
 800501c:	4832      	ldr	r0, [pc, #200]	; (80050e8 <main+0x258>)
 800501e:	f002 fc25 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
	setupPIDParameter(&pid_data_front_left_, 1.0, 0.0, 0.0);
 8005022:	ed9f 2b1d 	vldr	d2, [pc, #116]	; 8005098 <main+0x208>
 8005026:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8005098 <main+0x208>
 800502a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 80050a0 <main+0x210>
 800502e:	482b      	ldr	r0, [pc, #172]	; (80050dc <main+0x24c>)
 8005030:	f002 fc3b 	bl	80078aa <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_front_right_, 1.0, 0.0, 0.0);
 8005034:	ed9f 2b18 	vldr	d2, [pc, #96]	; 8005098 <main+0x208>
 8005038:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8005098 <main+0x208>
 800503c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80050a0 <main+0x210>
 8005040:	4827      	ldr	r0, [pc, #156]	; (80050e0 <main+0x250>)
 8005042:	f002 fc32 	bl	80078aa <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_rear_left_, 1.0, 0.0, 0.0);
 8005046:	ed9f 2b14 	vldr	d2, [pc, #80]	; 8005098 <main+0x208>
 800504a:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8005098 <main+0x208>
 800504e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80050a0 <main+0x210>
 8005052:	4824      	ldr	r0, [pc, #144]	; (80050e4 <main+0x254>)
 8005054:	f002 fc29 	bl	80078aa <_Z17setupPIDParameterP16PID_Data_Typedefddd>
	setupPIDParameter(&pid_data_rear_right_, 1.0, 0.0, 0.0);
 8005058:	ed9f 2b0f 	vldr	d2, [pc, #60]	; 8005098 <main+0x208>
 800505c:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8005098 <main+0x208>
 8005060:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80050a0 <main+0x210>
 8005064:	4820      	ldr	r0, [pc, #128]	; (80050e8 <main+0x258>)
 8005066:	f002 fc20 	bl	80078aa <_Z17setupPIDParameterP16PID_Data_Typedefddd>

	/* ROS */
	ROS_setup();
 800506a:	f001 fc15 	bl	8006898 <_Z9ROS_setupv>

	/* Timer */
	ros::Time time_now, tTime[3];
 800506e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005072:	4618      	mov	r0, r3
 8005074:	f7fc f8d4 	bl	8001220 <_ZN3ros4TimeC1Ev>
 8005078:	f107 030c 	add.w	r3, r7, #12
 800507c:	2402      	movs	r4, #2
 800507e:	461d      	mov	r5, r3
 8005080:	e004      	b.n	800508c <main+0x1fc>
 8005082:	4628      	mov	r0, r5
 8005084:	f7fc f8cc 	bl	8001220 <_ZN3ros4TimeC1Ev>
 8005088:	3508      	adds	r5, #8
 800508a:	3c01      	subs	r4, #1
 800508c:	2c00      	cmp	r4, #0
 800508e:	daf8      	bge.n	8005082 <main+0x1f2>
	for (int i = 1; i < 3; i++) {
 8005090:	2301      	movs	r3, #1
 8005092:	653b      	str	r3, [r7, #80]	; 0x50
 8005094:	e03e      	b.n	8005114 <main+0x284>
 8005096:	bf00      	nop
	...
 80050a4:	3ff00000 	.word	0x3ff00000
 80050a8:	40020400 	.word	0x40020400
 80050ac:	20000518 	.word	0x20000518
 80050b0:	200002a4 	.word	0x200002a4
 80050b4:	40020800 	.word	0x40020800
 80050b8:	20000334 	.word	0x20000334
 80050bc:	2000025c 	.word	0x2000025c
 80050c0:	200002ec 	.word	0x200002ec
 80050c4:	2000037c 	.word	0x2000037c
 80050c8:	200003c4 	.word	0x200003c4
 80050cc:	200005d8 	.word	0x200005d8
 80050d0:	20000608 	.word	0x20000608
 80050d4:	20000638 	.word	0x20000638
 80050d8:	20000668 	.word	0x20000668
 80050dc:	20000698 	.word	0x20000698
 80050e0:	200006c8 	.word	0x200006c8
 80050e4:	200006f8 	.word	0x200006f8
 80050e8:	20000728 	.word	0x20000728
		tTime[i] = nh_.now();
 80050ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050ee:	00dc      	lsls	r4, r3, #3
 80050f0:	f104 0358 	add.w	r3, r4, #88	; 0x58
 80050f4:	19dc      	adds	r4, r3, r7
 80050f6:	463b      	mov	r3, r7
 80050f8:	49b3      	ldr	r1, [pc, #716]	; (80053c8 <main+0x538>)
 80050fa:	4618      	mov	r0, r3
 80050fc:	f001 fd00 	bl	8006b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8005100:	f1a4 034c 	sub.w	r3, r4, #76	; 0x4c
 8005104:	463a      	mov	r2, r7
 8005106:	e892 0003 	ldmia.w	r2, {r0, r1}
 800510a:	e883 0003 	stmia.w	r3, {r0, r1}
	for (int i = 1; i < 3; i++) {
 800510e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005110:	3301      	adds	r3, #1
 8005112:	653b      	str	r3, [r7, #80]	; 0x50
 8005114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005116:	2b02      	cmp	r3, #2
 8005118:	dde8      	ble.n	80050ec <main+0x25c>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		time_now = nh_.now();
 800511a:	463b      	mov	r3, r7
 800511c:	49aa      	ldr	r1, [pc, #680]	; (80053c8 <main+0x538>)
 800511e:	4618      	mov	r0, r3
 8005120:	f001 fcee 	bl	8006b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 8005124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005128:	463a      	mov	r2, r7
 800512a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800512e:	e883 0003 	stmia.w	r3, {r0, r1}
		if ((time_now - tTime[0]).toSec() > 0.05) {
 8005132:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005136:	f107 020c 	add.w	r2, r7, #12
 800513a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800513e:	4618      	mov	r0, r3
 8005140:	f7fb ffe6 	bl	8001110 <_ZNK3ros4TimemiERKS0_>
 8005144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005148:	4618      	mov	r0, r3
 800514a:	f7fc f83d 	bl	80011c8 <_ZNK3ros8Duration5toSecEv>
 800514e:	ec51 0b10 	vmov	r0, r1, d0
 8005152:	2301      	movs	r3, #1
 8005154:	461c      	mov	r4, r3
 8005156:	a398      	add	r3, pc, #608	; (adr r3, 80053b8 <main+0x528>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7fb fcfc 	bl	8000b58 <__aeabi_dcmpgt>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <main+0x2da>
 8005166:	2300      	movs	r3, #0
 8005168:	461c      	mov	r4, r3
 800516a:	b2e3      	uxtb	r3, r4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d065      	beq.n	800523c <main+0x3ac>
			/* IMU */
			imu_.roll = mpu.getAngleX();
 8005170:	4896      	ldr	r0, [pc, #600]	; (80053cc <main+0x53c>)
 8005172:	f7fb fff1 	bl	8001158 <_ZN7MPU92509getAngleXEv>
 8005176:	eeb0 7a40 	vmov.f32	s14, s0
 800517a:	eef0 7a60 	vmov.f32	s15, s1
 800517e:	4b94      	ldr	r3, [pc, #592]	; (80053d0 <main+0x540>)
 8005180:	ed83 7b02 	vstr	d7, [r3, #8]
			imu_.pitch = mpu.getAngleY();
 8005184:	4891      	ldr	r0, [pc, #580]	; (80053cc <main+0x53c>)
 8005186:	f7fb fff9 	bl	800117c <_ZN7MPU92509getAngleYEv>
 800518a:	eeb0 7a40 	vmov.f32	s14, s0
 800518e:	eef0 7a60 	vmov.f32	s15, s1
 8005192:	4b8f      	ldr	r3, [pc, #572]	; (80053d0 <main+0x540>)
 8005194:	ed83 7b04 	vstr	d7, [r3, #16]
			imu_.yaw = mpu.getAngleZ();
 8005198:	488c      	ldr	r0, [pc, #560]	; (80053cc <main+0x53c>)
 800519a:	f7fc f801 	bl	80011a0 <_ZN7MPU92509getAngleZEv>
 800519e:	eeb0 7a40 	vmov.f32	s14, s0
 80051a2:	eef0 7a60 	vmov.f32	s15, s1
 80051a6:	4b8a      	ldr	r3, [pc, #552]	; (80053d0 <main+0x540>)
 80051a8:	ed83 7b06 	vstr	d7, [r3, #24]
			imu_pub_.publish(&imu_);
 80051ac:	4988      	ldr	r1, [pc, #544]	; (80053d0 <main+0x540>)
 80051ae:	4889      	ldr	r0, [pc, #548]	; (80053d4 <main+0x544>)
 80051b0:	f7fc fe9f 	bl	8001ef2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

			/* Motor */
			motor_.speed_sp[FRONT_LEFT] = motor_front_left_.speed_sp;
 80051b4:	4b88      	ldr	r3, [pc, #544]	; (80053d8 <main+0x548>)
 80051b6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051ba:	4988      	ldr	r1, [pc, #544]	; (80053dc <main+0x54c>)
 80051bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
			motor_.speed_sp[FRONT_RIGHT] = motor_front_right_.speed_sp;
 80051c0:	4b87      	ldr	r3, [pc, #540]	; (80053e0 <main+0x550>)
 80051c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051c6:	4985      	ldr	r1, [pc, #532]	; (80053dc <main+0x54c>)
 80051c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
			motor_.speed_sp[REAR_LEFT] = motor_rear_left_.speed_sp;
 80051cc:	4b85      	ldr	r3, [pc, #532]	; (80053e4 <main+0x554>)
 80051ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051d2:	4982      	ldr	r1, [pc, #520]	; (80053dc <main+0x54c>)
 80051d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
			motor_.speed_sp[REAR_RIGHT] = motor_rear_right_.speed_sp;
 80051d8:	4b83      	ldr	r3, [pc, #524]	; (80053e8 <main+0x558>)
 80051da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80051de:	497f      	ldr	r1, [pc, #508]	; (80053dc <main+0x54c>)
 80051e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_.speed_fb[FRONT_LEFT] = motor_front_left_.speed_pv;
 80051e4:	4b7c      	ldr	r3, [pc, #496]	; (80053d8 <main+0x548>)
 80051e6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051ea:	497c      	ldr	r1, [pc, #496]	; (80053dc <main+0x54c>)
 80051ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			motor_.speed_fb[FRONT_RIGHT] = motor_front_right_.speed_pv;
 80051f0:	4b7b      	ldr	r3, [pc, #492]	; (80053e0 <main+0x550>)
 80051f2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80051f6:	4979      	ldr	r1, [pc, #484]	; (80053dc <main+0x54c>)
 80051f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
			motor_.speed_fb[REAR_LEFT] = motor_rear_left_.speed_pv;
 80051fc:	4b79      	ldr	r3, [pc, #484]	; (80053e4 <main+0x554>)
 80051fe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005202:	4976      	ldr	r1, [pc, #472]	; (80053dc <main+0x54c>)
 8005204:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
			motor_.speed_fb[REAR_RIGHT] = motor_rear_right_.speed_pv;
 8005208:	4b77      	ldr	r3, [pc, #476]	; (80053e8 <main+0x558>)
 800520a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800520e:	4973      	ldr	r1, [pc, #460]	; (80053dc <main+0x54c>)
 8005210:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
			motor_pub_.publish(&motor_);
 8005214:	4971      	ldr	r1, [pc, #452]	; (80053dc <main+0x54c>)
 8005216:	4875      	ldr	r0, [pc, #468]	; (80053ec <main+0x55c>)
 8005218:	f7fc fe6b 	bl	8001ef2 <_ZN3ros9Publisher7publishEPKNS_3MsgE>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 800521c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005220:	4873      	ldr	r0, [pc, #460]	; (80053f0 <main+0x560>)
 8005222:	f004 fcbe 	bl	8009ba2 <HAL_GPIO_TogglePin>
			nh_.spinOnce();
 8005226:	4868      	ldr	r0, [pc, #416]	; (80053c8 <main+0x538>)
 8005228:	f001 fca6 	bl	8006b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

			tTime[0] = time_now;
 800522c:	f107 030c 	add.w	r3, r7, #12
 8005230:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005234:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005238:	e883 0003 	stmia.w	r3, {r0, r1}
		}

		if ((time_now - tTime[1]).toSec() > 0.01) {
 800523c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8005240:	f107 030c 	add.w	r3, r7, #12
 8005244:	f103 0208 	add.w	r2, r3, #8
 8005248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800524c:	4619      	mov	r1, r3
 800524e:	f7fb ff5f 	bl	8001110 <_ZNK3ros4TimemiERKS0_>
 8005252:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005256:	4618      	mov	r0, r3
 8005258:	f7fb ffb6 	bl	80011c8 <_ZNK3ros8Duration5toSecEv>
 800525c:	ec51 0b10 	vmov	r0, r1, d0
 8005260:	2301      	movs	r3, #1
 8005262:	461c      	mov	r4, r3
 8005264:	a356      	add	r3, pc, #344	; (adr r3, 80053c0 <main+0x530>)
 8005266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526a:	f7fb fc75 	bl	8000b58 <__aeabi_dcmpgt>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <main+0x3e8>
 8005274:	2300      	movs	r3, #0
 8005276:	461c      	mov	r4, r3
 8005278:	b2e3      	uxtb	r3, r4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d06e      	beq.n	800535c <main+0x4cc>
			motor_front_left_.speed_sp = set_speed_motor_[FRONT_LEFT];
 800527e:	4b5d      	ldr	r3, [pc, #372]	; (80053f4 <main+0x564>)
 8005280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005284:	4954      	ldr	r1, [pc, #336]	; (80053d8 <main+0x548>)
 8005286:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_front_right_.speed_sp = set_speed_motor_[FRONT_RIGHT];
 800528a:	4b5a      	ldr	r3, [pc, #360]	; (80053f4 <main+0x564>)
 800528c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005290:	4953      	ldr	r1, [pc, #332]	; (80053e0 <main+0x550>)
 8005292:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_rear_left_.speed_sp = set_speed_motor_[REAR_LEFT];
 8005296:	4b57      	ldr	r3, [pc, #348]	; (80053f4 <main+0x564>)
 8005298:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800529c:	4951      	ldr	r1, [pc, #324]	; (80053e4 <main+0x554>)
 800529e:	e9c1 2308 	strd	r2, r3, [r1, #32]
			motor_rear_right_.speed_sp = set_speed_motor_[REAR_RIGHT];
 80052a2:	4b54      	ldr	r3, [pc, #336]	; (80053f4 <main+0x564>)
 80052a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80052a8:	494f      	ldr	r1, [pc, #316]	; (80053e8 <main+0x558>)
 80052aa:	e9c1 2308 	strd	r2, r3, [r1, #32]

			if ((time_now - last_time_cmd_vel_).toSec() > 1.0) {
 80052ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052b2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80052b6:	4a50      	ldr	r2, [pc, #320]	; (80053f8 <main+0x568>)
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7fb ff29 	bl	8001110 <_ZNK3ros4TimemiERKS0_>
 80052be:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7fb ff80 	bl	80011c8 <_ZNK3ros8Duration5toSecEv>
 80052c8:	ec51 0b10 	vmov	r0, r1, d0
 80052cc:	2301      	movs	r3, #1
 80052ce:	461c      	mov	r4, r3
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	4b49      	ldr	r3, [pc, #292]	; (80053fc <main+0x56c>)
 80052d6:	f7fb fc3f 	bl	8000b58 <__aeabi_dcmpgt>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <main+0x454>
 80052e0:	2300      	movs	r3, #0
 80052e2:	461c      	mov	r4, r3
 80052e4:	b2e3      	uxtb	r3, r4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d01b      	beq.n	8005322 <main+0x492>
				motor_front_left_.speed_sp = 0.0f;
 80052ea:	493b      	ldr	r1, [pc, #236]	; (80053d8 <main+0x548>)
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	e9c1 2308 	strd	r2, r3, [r1, #32]
				motor_front_right_.speed_sp = 0.0f;
 80052f8:	4939      	ldr	r1, [pc, #228]	; (80053e0 <main+0x550>)
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	e9c1 2308 	strd	r2, r3, [r1, #32]
				motor_rear_left_.speed_sp = 0.0f;
 8005306:	4937      	ldr	r1, [pc, #220]	; (80053e4 <main+0x554>)
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	e9c1 2308 	strd	r2, r3, [r1, #32]
				motor_rear_right_.speed_sp = 0.0f;
 8005314:	4934      	ldr	r1, [pc, #208]	; (80053e8 <main+0x558>)
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	e9c1 2308 	strd	r2, r3, [r1, #32]
			}

			motor_front_left_drive(0.01);
 8005322:	ed9f 0b27 	vldr	d0, [pc, #156]	; 80053c0 <main+0x530>
 8005326:	f000 fdab 	bl	8005e80 <_Z22motor_front_left_drived>
			motor_front_right_drive(0.01);
 800532a:	ed9f 0b25 	vldr	d0, [pc, #148]	; 80053c0 <main+0x530>
 800532e:	f000 fe6f 	bl	8006010 <_Z23motor_front_right_drived>
			motor_rear_left_drive(0.01);
 8005332:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80053c0 <main+0x530>
 8005336:	f000 ff33 	bl	80061a0 <_Z21motor_rear_left_drived>
			motor_rear_right_drive(0.01);
 800533a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 80053c0 <main+0x530>
 800533e:	f000 fff7 	bl	8006330 <_Z22motor_rear_right_drived>

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 8005342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005346:	482a      	ldr	r0, [pc, #168]	; (80053f0 <main+0x560>)
 8005348:	f004 fc2b 	bl	8009ba2 <HAL_GPIO_TogglePin>
			tTime[1] = time_now;
 800534c:	f107 0314 	add.w	r3, r7, #20
 8005350:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8005354:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005358:	e883 0003 	stmia.w	r3, {r0, r1}
		}

		if ((time_now - tTime[2]).toSec() > 0.01) {
 800535c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8005360:	f107 030c 	add.w	r3, r7, #12
 8005364:	f103 0210 	add.w	r2, r3, #16
 8005368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536c:	4619      	mov	r1, r3
 800536e:	f7fb fecf 	bl	8001110 <_ZNK3ros4TimemiERKS0_>
 8005372:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005376:	4618      	mov	r0, r3
 8005378:	f7fb ff26 	bl	80011c8 <_ZNK3ros8Duration5toSecEv>
 800537c:	ec51 0b10 	vmov	r0, r1, d0
 8005380:	2301      	movs	r3, #1
 8005382:	461c      	mov	r4, r3
 8005384:	a30e      	add	r3, pc, #56	; (adr r3, 80053c0 <main+0x530>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	f7fb fbe5 	bl	8000b58 <__aeabi_dcmpgt>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <main+0x508>
 8005394:	2300      	movs	r3, #0
 8005396:	461c      	mov	r4, r3
 8005398:	b2e3      	uxtb	r3, r4
 800539a:	2b00      	cmp	r3, #0
 800539c:	f43f aebd 	beq.w	800511a <main+0x28a>
			uint8_t status = mpu.update();
 80053a0:	480a      	ldr	r0, [pc, #40]	; (80053cc <main+0x53c>)
 80053a2:	f002 fea5 	bl	80080f0 <_ZN7MPU92506updateEv>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (status != HAL_OK) {
 80053ac:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d045      	beq.n	8005440 <main+0x5b0>
				while (status != HAL_OK) {
 80053b4:	e035      	b.n	8005422 <main+0x592>
 80053b6:	bf00      	nop
 80053b8:	9999999a 	.word	0x9999999a
 80053bc:	3fa99999 	.word	0x3fa99999
 80053c0:	47ae147b 	.word	0x47ae147b
 80053c4:	3f847ae1 	.word	0x3f847ae1
 80053c8:	20000758 	.word	0x20000758
 80053cc:	20000518 	.word	0x20000518
 80053d0:	200010a0 	.word	0x200010a0
 80053d4:	20001168 	.word	0x20001168
 80053d8:	200005d8 	.word	0x200005d8
 80053dc:	200010c0 	.word	0x200010c0
 80053e0:	20000608 	.word	0x20000608
 80053e4:	20000638 	.word	0x20000638
 80053e8:	20000668 	.word	0x20000668
 80053ec:	2000117c 	.word	0x2000117c
 80053f0:	40020400 	.word	0x40020400
 80053f4:	20001240 	.word	0x20001240
 80053f8:	20001094 	.word	0x20001094
 80053fc:	3ff00000 	.word	0x3ff00000
					status = mpu.begin();
 8005400:	2200      	movs	r2, #0
 8005402:	2101      	movs	r1, #1
 8005404:	4811      	ldr	r0, [pc, #68]	; (800544c <main+0x5bc>)
 8005406:	f002 faef 	bl	80079e8 <_ZN7MPU92505beginEii>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8005410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005414:	480e      	ldr	r0, [pc, #56]	; (8005450 <main+0x5c0>)
 8005416:	f004 fbc4 	bl	8009ba2 <HAL_GPIO_TogglePin>
					HAL_Delay(1000);
 800541a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800541e:	f003 fcdb 	bl	8008dd8 <HAL_Delay>
				while (status != HAL_OK) {
 8005422:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ea      	bne.n	8005400 <main+0x570>
				}
				mpu.calcOffsets();
 800542a:	2201      	movs	r2, #1
 800542c:	2101      	movs	r1, #1
 800542e:	4807      	ldr	r0, [pc, #28]	; (800544c <main+0x5bc>)
 8005430:	f002 fc76 	bl	8007d20 <_ZN7MPU925011calcOffsetsEbb>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8005434:	2201      	movs	r2, #1
 8005436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800543a:	4805      	ldr	r0, [pc, #20]	; (8005450 <main+0x5c0>)
 800543c:	f004 fb98 	bl	8009b70 <HAL_GPIO_WritePin>
			}
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
 8005440:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005444:	4802      	ldr	r0, [pc, #8]	; (8005450 <main+0x5c0>)
 8005446:	f004 fbac 	bl	8009ba2 <HAL_GPIO_TogglePin>
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
 800544a:	e666      	b.n	800511a <main+0x28a>
 800544c:	20000518 	.word	0x20000518
 8005450:	40020400 	.word	0x40020400

08005454 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b094      	sub	sp, #80	; 0x50
 8005458:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800545a:	f107 031c 	add.w	r3, r7, #28
 800545e:	2234      	movs	r2, #52	; 0x34
 8005460:	2100      	movs	r1, #0
 8005462:	4618      	mov	r0, r3
 8005464:	f00a f805 	bl	800f472 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005468:	f107 0308 	add.w	r3, r7, #8
 800546c:	2200      	movs	r2, #0
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	605a      	str	r2, [r3, #4]
 8005472:	609a      	str	r2, [r3, #8]
 8005474:	60da      	str	r2, [r3, #12]
 8005476:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8005478:	2300      	movs	r3, #0
 800547a:	607b      	str	r3, [r7, #4]
 800547c:	4b34      	ldr	r3, [pc, #208]	; (8005550 <_Z18SystemClock_Configv+0xfc>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	4a33      	ldr	r2, [pc, #204]	; (8005550 <_Z18SystemClock_Configv+0xfc>)
 8005482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005486:	6413      	str	r3, [r2, #64]	; 0x40
 8005488:	4b31      	ldr	r3, [pc, #196]	; (8005550 <_Z18SystemClock_Configv+0xfc>)
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005490:	607b      	str	r3, [r7, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005494:	2300      	movs	r3, #0
 8005496:	603b      	str	r3, [r7, #0]
 8005498:	4b2e      	ldr	r3, [pc, #184]	; (8005554 <_Z18SystemClock_Configv+0x100>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2d      	ldr	r2, [pc, #180]	; (8005554 <_Z18SystemClock_Configv+0x100>)
 800549e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <_Z18SystemClock_Configv+0x100>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80054ac:	603b      	str	r3, [r7, #0]
 80054ae:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80054b8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054ba:	2302      	movs	r3, #2
 80054bc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80054c2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 15;
 80054c4:	230f      	movs	r3, #15
 80054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 216;
 80054c8:	23d8      	movs	r3, #216	; 0xd8
 80054ca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80054cc:	2302      	movs	r3, #2
 80054ce:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80054d0:	2302      	movs	r3, #2
 80054d2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80054d4:	2302      	movs	r3, #2
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80054d8:	f107 031c 	add.w	r3, r7, #28
 80054dc:	4618      	mov	r0, r3
 80054de:	f005 feb3 	bl	800b248 <HAL_RCC_OscConfig>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	bf14      	ite	ne
 80054e8:	2301      	movne	r3, #1
 80054ea:	2300      	moveq	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d001      	beq.n	80054f6 <_Z18SystemClock_Configv+0xa2>
		Error_Handler();
 80054f2:	f001 fa63 	bl	80069bc <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80054f6:	f005 fb93 	bl	800ac20 <HAL_PWREx_EnableOverDrive>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	bf14      	ite	ne
 8005500:	2301      	movne	r3, #1
 8005502:	2300      	moveq	r3, #0
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <_Z18SystemClock_Configv+0xba>
		Error_Handler();
 800550a:	f001 fa57 	bl	80069bc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800550e:	230f      	movs	r3, #15
 8005510:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005512:	2302      	movs	r3, #2
 8005514:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800551a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800551e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005524:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8005526:	f107 0308 	add.w	r3, r7, #8
 800552a:	2105      	movs	r1, #5
 800552c:	4618      	mov	r0, r3
 800552e:	f005 fbc7 	bl	800acc0 <HAL_RCC_ClockConfig>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	bf14      	ite	ne
 8005538:	2301      	movne	r3, #1
 800553a:	2300      	moveq	r3, #0
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <_Z18SystemClock_Configv+0xf2>
		Error_Handler();
 8005542:	f001 fa3b 	bl	80069bc <Error_Handler>
	}
}
 8005546:	bf00      	nop
 8005548:	3750      	adds	r7, #80	; 0x50
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40023800 	.word	0x40023800
 8005554:	40007000 	.word	0x40007000

08005558 <_ZL12MX_I2C1_Initv>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800555c:	4b15      	ldr	r3, [pc, #84]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800555e:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <_ZL12MX_I2C1_Initv+0x60>)
 8005560:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8005562:	4b14      	ldr	r3, [pc, #80]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8005564:	4a15      	ldr	r2, [pc, #84]	; (80055bc <_ZL12MX_I2C1_Initv+0x64>)
 8005566:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005568:	4b12      	ldr	r3, [pc, #72]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800556a:	2200      	movs	r2, #0
 800556c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800556e:	4b11      	ldr	r3, [pc, #68]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8005570:	2200      	movs	r2, #0
 8005572:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005574:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8005576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800557a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800557c:	4b0d      	ldr	r3, [pc, #52]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800557e:	2200      	movs	r2, #0
 8005580:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8005582:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8005584:	2200      	movs	r2, #0
 8005586:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005588:	4b0a      	ldr	r3, [pc, #40]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 800558a:	2200      	movs	r2, #0
 800558c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800558e:	4b09      	ldr	r3, [pc, #36]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8005590:	2200      	movs	r2, #0
 8005592:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8005594:	4807      	ldr	r0, [pc, #28]	; (80055b4 <_ZL12MX_I2C1_Initv+0x5c>)
 8005596:	f004 fb1f 	bl	8009bd8 <HAL_I2C_Init>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	bf14      	ite	ne
 80055a0:	2301      	movne	r3, #1
 80055a2:	2300      	moveq	r3, #0
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <_ZL12MX_I2C1_Initv+0x56>
		Error_Handler();
 80055aa:	f001 fa07 	bl	80069bc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80055ae:	bf00      	nop
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000208 	.word	0x20000208
 80055b8:	40005400 	.word	0x40005400
 80055bc:	000186a0 	.word	0x000186a0

080055c0 <_ZL12MX_TIM1_Initv>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08c      	sub	sp, #48	; 0x30
 80055c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80055c6:	f107 030c 	add.w	r3, r7, #12
 80055ca:	2224      	movs	r2, #36	; 0x24
 80055cc:	2100      	movs	r1, #0
 80055ce:	4618      	mov	r0, r3
 80055d0:	f009 ff4f 	bl	800f472 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80055d4:	1d3b      	adds	r3, r7, #4
 80055d6:	2200      	movs	r2, #0
 80055d8:	601a      	str	r2, [r3, #0]
 80055da:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80055dc:	4b27      	ldr	r3, [pc, #156]	; (800567c <_ZL12MX_TIM1_Initv+0xbc>)
 80055de:	4a28      	ldr	r2, [pc, #160]	; (8005680 <_ZL12MX_TIM1_Initv+0xc0>)
 80055e0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80055e2:	4b26      	ldr	r3, [pc, #152]	; (800567c <_ZL12MX_TIM1_Initv+0xbc>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055e8:	4b24      	ldr	r3, [pc, #144]	; (800567c <_ZL12MX_TIM1_Initv+0xbc>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 60000;
 80055ee:	4b23      	ldr	r3, [pc, #140]	; (800567c <_ZL12MX_TIM1_Initv+0xbc>)
 80055f0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80055f4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055f6:	4b21      	ldr	r3, [pc, #132]	; (800567c <_ZL12MX_TIM1_Initv+0xbc>)
 80055f8:	2200      	movs	r2, #0
 80055fa:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80055fc:	4b1f      	ldr	r3, [pc, #124]	; (800567c <_ZL12MX_TIM1_Initv+0xbc>)
 80055fe:	2200      	movs	r2, #0
 8005600:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005602:	4b1e      	ldr	r3, [pc, #120]	; (800567c <_ZL12MX_TIM1_Initv+0xbc>)
 8005604:	2200      	movs	r2, #0
 8005606:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005608:	2303      	movs	r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005610:	2301      	movs	r3, #1
 8005612:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005614:	2300      	movs	r3, #0
 8005616:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800561c:	2300      	movs	r3, #0
 800561e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005620:	2301      	movs	r3, #1
 8005622:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005624:	2300      	movs	r3, #0
 8005626:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 800562c:	f107 030c 	add.w	r3, r7, #12
 8005630:	4619      	mov	r1, r3
 8005632:	4812      	ldr	r0, [pc, #72]	; (800567c <_ZL12MX_TIM1_Initv+0xbc>)
 8005634:	f006 fa7e 	bl	800bb34 <HAL_TIM_Encoder_Init>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	bf14      	ite	ne
 800563e:	2301      	movne	r3, #1
 8005640:	2300      	moveq	r3, #0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d001      	beq.n	800564c <_ZL12MX_TIM1_Initv+0x8c>
		Error_Handler();
 8005648:	f001 f9b8 	bl	80069bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800564c:	2300      	movs	r3, #0
 800564e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005650:	2300      	movs	r3, #0
 8005652:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8005654:	1d3b      	adds	r3, r7, #4
 8005656:	4619      	mov	r1, r3
 8005658:	4808      	ldr	r0, [pc, #32]	; (800567c <_ZL12MX_TIM1_Initv+0xbc>)
 800565a:	f007 f95d 	bl	800c918 <HAL_TIMEx_MasterConfigSynchronization>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d001      	beq.n	8005672 <_ZL12MX_TIM1_Initv+0xb2>
		Error_Handler();
 800566e:	f001 f9a5 	bl	80069bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8005672:	bf00      	nop
 8005674:	3730      	adds	r7, #48	; 0x30
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	2000025c 	.word	0x2000025c
 8005680:	40010000 	.word	0x40010000

08005684 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8005684:	b580      	push	{r7, lr}
 8005686:	b08a      	sub	sp, #40	; 0x28
 8005688:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800568a:	f107 0320 	add.w	r3, r7, #32
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8005694:	1d3b      	adds	r3, r7, #4
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	605a      	str	r2, [r3, #4]
 800569c:	609a      	str	r2, [r3, #8]
 800569e:	60da      	str	r2, [r3, #12]
 80056a0:	611a      	str	r2, [r3, #16]
 80056a2:	615a      	str	r2, [r3, #20]
 80056a4:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80056a6:	4b42      	ldr	r3, [pc, #264]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 80056a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056ac:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 45 - 1;
 80056ae:	4b40      	ldr	r3, [pc, #256]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 80056b0:	222c      	movs	r2, #44	; 0x2c
 80056b2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056b4:	4b3e      	ldr	r3, [pc, #248]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80056ba:	4b3d      	ldr	r3, [pc, #244]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 80056bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056c0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056c2:	4b3b      	ldr	r3, [pc, #236]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056c8:	4b39      	ldr	r3, [pc, #228]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80056ce:	4838      	ldr	r0, [pc, #224]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 80056d0:	f006 f918 	bl	800b904 <HAL_TIM_PWM_Init>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <_ZL12MX_TIM2_Initv+0x64>
		Error_Handler();
 80056e4:	f001 f96a 	bl	80069bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056e8:	2300      	movs	r3, #0
 80056ea:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80056f0:	f107 0320 	add.w	r3, r7, #32
 80056f4:	4619      	mov	r1, r3
 80056f6:	482e      	ldr	r0, [pc, #184]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 80056f8:	f007 f90e 	bl	800c918 <HAL_TIMEx_MasterConfigSynchronization>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bf14      	ite	ne
 8005702:	2301      	movne	r3, #1
 8005704:	2300      	moveq	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <_ZL12MX_TIM2_Initv+0x8c>
		Error_Handler();
 800570c:	f001 f956 	bl	80069bc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005710:	2360      	movs	r3, #96	; 0x60
 8005712:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	2200      	movs	r2, #0
 8005724:	4619      	mov	r1, r3
 8005726:	4822      	ldr	r0, [pc, #136]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 8005728:	f006 fc28 	bl	800bf7c <HAL_TIM_PWM_ConfigChannel>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	bf14      	ite	ne
 8005732:	2301      	movne	r3, #1
 8005734:	2300      	moveq	r3, #0
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <_ZL12MX_TIM2_Initv+0xbc>
		Error_Handler();
 800573c:	f001 f93e 	bl	80069bc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8005740:	1d3b      	adds	r3, r7, #4
 8005742:	2204      	movs	r2, #4
 8005744:	4619      	mov	r1, r3
 8005746:	481a      	ldr	r0, [pc, #104]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 8005748:	f006 fc18 	bl	800bf7c <HAL_TIM_PWM_ConfigChannel>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	bf14      	ite	ne
 8005752:	2301      	movne	r3, #1
 8005754:	2300      	moveq	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <_ZL12MX_TIM2_Initv+0xdc>
		Error_Handler();
 800575c:	f001 f92e 	bl	80069bc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8005760:	1d3b      	adds	r3, r7, #4
 8005762:	2208      	movs	r2, #8
 8005764:	4619      	mov	r1, r3
 8005766:	4812      	ldr	r0, [pc, #72]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 8005768:	f006 fc08 	bl	800bf7c <HAL_TIM_PWM_ConfigChannel>
 800576c:	4603      	mov	r3, r0
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <_ZL12MX_TIM2_Initv+0xfc>
		Error_Handler();
 800577c:	f001 f91e 	bl	80069bc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK) {
 8005780:	1d3b      	adds	r3, r7, #4
 8005782:	220c      	movs	r2, #12
 8005784:	4619      	mov	r1, r3
 8005786:	480a      	ldr	r0, [pc, #40]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 8005788:	f006 fbf8 	bl	800bf7c <HAL_TIM_PWM_ConfigChannel>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	bf14      	ite	ne
 8005792:	2301      	movne	r3, #1
 8005794:	2300      	moveq	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <_ZL12MX_TIM2_Initv+0x11c>
		Error_Handler();
 800579c:	f001 f90e 	bl	80069bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80057a0:	4803      	ldr	r0, [pc, #12]	; (80057b0 <_ZL12MX_TIM2_Initv+0x12c>)
 80057a2:	f003 f825 	bl	80087f0 <HAL_TIM_MspPostInit>

}
 80057a6:	bf00      	nop
 80057a8:	3728      	adds	r7, #40	; 0x28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	200002a4 	.word	0x200002a4

080057b4 <_ZL12MX_TIM3_Initv>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b08c      	sub	sp, #48	; 0x30
 80057b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80057ba:	f107 030c 	add.w	r3, r7, #12
 80057be:	2224      	movs	r2, #36	; 0x24
 80057c0:	2100      	movs	r1, #0
 80057c2:	4618      	mov	r0, r3
 80057c4:	f009 fe55 	bl	800f472 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80057c8:	1d3b      	adds	r3, r7, #4
 80057ca:	2200      	movs	r2, #0
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80057d0:	4b25      	ldr	r3, [pc, #148]	; (8005868 <_ZL12MX_TIM3_Initv+0xb4>)
 80057d2:	4a26      	ldr	r2, [pc, #152]	; (800586c <_ZL12MX_TIM3_Initv+0xb8>)
 80057d4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80057d6:	4b24      	ldr	r3, [pc, #144]	; (8005868 <_ZL12MX_TIM3_Initv+0xb4>)
 80057d8:	2200      	movs	r2, #0
 80057da:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057dc:	4b22      	ldr	r3, [pc, #136]	; (8005868 <_ZL12MX_TIM3_Initv+0xb4>)
 80057de:	2200      	movs	r2, #0
 80057e0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 60000;
 80057e2:	4b21      	ldr	r3, [pc, #132]	; (8005868 <_ZL12MX_TIM3_Initv+0xb4>)
 80057e4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80057e8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057ea:	4b1f      	ldr	r3, [pc, #124]	; (8005868 <_ZL12MX_TIM3_Initv+0xb4>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057f0:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <_ZL12MX_TIM3_Initv+0xb4>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80057f6:	2303      	movs	r3, #3
 80057f8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80057fa:	2300      	movs	r3, #0
 80057fc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80057fe:	2301      	movs	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005802:	2300      	movs	r3, #0
 8005804:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800580a:	2300      	movs	r3, #0
 800580c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800580e:	2301      	movs	r3, #1
 8005810:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005812:	2300      	movs	r3, #0
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 800581a:	f107 030c 	add.w	r3, r7, #12
 800581e:	4619      	mov	r1, r3
 8005820:	4811      	ldr	r0, [pc, #68]	; (8005868 <_ZL12MX_TIM3_Initv+0xb4>)
 8005822:	f006 f987 	bl	800bb34 <HAL_TIM_Encoder_Init>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	bf14      	ite	ne
 800582c:	2301      	movne	r3, #1
 800582e:	2300      	moveq	r3, #0
 8005830:	b2db      	uxtb	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <_ZL12MX_TIM3_Initv+0x86>
		Error_Handler();
 8005836:	f001 f8c1 	bl	80069bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800583e:	2300      	movs	r3, #0
 8005840:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8005842:	1d3b      	adds	r3, r7, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4808      	ldr	r0, [pc, #32]	; (8005868 <_ZL12MX_TIM3_Initv+0xb4>)
 8005848:	f007 f866 	bl	800c918 <HAL_TIMEx_MasterConfigSynchronization>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <_ZL12MX_TIM3_Initv+0xac>
		Error_Handler();
 800585c:	f001 f8ae 	bl	80069bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8005860:	bf00      	nop
 8005862:	3730      	adds	r7, #48	; 0x30
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	200002ec 	.word	0x200002ec
 800586c:	40000400 	.word	0x40000400

08005870 <_ZL12MX_TIM4_Initv>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8005876:	f107 0308 	add.w	r3, r7, #8
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	605a      	str	r2, [r3, #4]
 8005880:	609a      	str	r2, [r3, #8]
 8005882:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005884:	463b      	mov	r3, r7
 8005886:	2200      	movs	r2, #0
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800588c:	4b25      	ldr	r3, [pc, #148]	; (8005924 <_ZL12MX_TIM4_Initv+0xb4>)
 800588e:	4a26      	ldr	r2, [pc, #152]	; (8005928 <_ZL12MX_TIM4_Initv+0xb8>)
 8005890:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 900 - 1;
 8005892:	4b24      	ldr	r3, [pc, #144]	; (8005924 <_ZL12MX_TIM4_Initv+0xb4>)
 8005894:	f240 3283 	movw	r2, #899	; 0x383
 8005898:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800589a:	4b22      	ldr	r3, [pc, #136]	; (8005924 <_ZL12MX_TIM4_Initv+0xb4>)
 800589c:	2200      	movs	r2, #0
 800589e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 1000;
 80058a0:	4b20      	ldr	r3, [pc, #128]	; (8005924 <_ZL12MX_TIM4_Initv+0xb4>)
 80058a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058a6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058a8:	4b1e      	ldr	r3, [pc, #120]	; (8005924 <_ZL12MX_TIM4_Initv+0xb4>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058ae:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <_ZL12MX_TIM4_Initv+0xb4>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80058b4:	481b      	ldr	r0, [pc, #108]	; (8005924 <_ZL12MX_TIM4_Initv+0xb4>)
 80058b6:	f005 ff65 	bl	800b784 <HAL_TIM_Base_Init>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <_ZL12MX_TIM4_Initv+0x5e>
		Error_Handler();
 80058ca:	f001 f877 	bl	80069bc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80058ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058d2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80058d4:	f107 0308 	add.w	r3, r7, #8
 80058d8:	4619      	mov	r1, r3
 80058da:	4812      	ldr	r0, [pc, #72]	; (8005924 <_ZL12MX_TIM4_Initv+0xb4>)
 80058dc:	f006 fc10 	bl	800c100 <HAL_TIM_ConfigClockSource>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	bf14      	ite	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	2300      	moveq	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <_ZL12MX_TIM4_Initv+0x84>
		Error_Handler();
 80058f0:	f001 f864 	bl	80069bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058f4:	2300      	movs	r3, #0
 80058f6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80058fc:	463b      	mov	r3, r7
 80058fe:	4619      	mov	r1, r3
 8005900:	4808      	ldr	r0, [pc, #32]	; (8005924 <_ZL12MX_TIM4_Initv+0xb4>)
 8005902:	f007 f809 	bl	800c918 <HAL_TIMEx_MasterConfigSynchronization>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf14      	ite	ne
 800590c:	2301      	movne	r3, #1
 800590e:	2300      	moveq	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <_ZL12MX_TIM4_Initv+0xaa>
		Error_Handler();
 8005916:	f001 f851 	bl	80069bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800591a:	bf00      	nop
 800591c:	3718      	adds	r7, #24
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	20000334 	.word	0x20000334
 8005928:	40000800 	.word	0x40000800

0800592c <_ZL12MX_TIM5_Initv>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b08c      	sub	sp, #48	; 0x30
 8005930:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8005932:	f107 030c 	add.w	r3, r7, #12
 8005936:	2224      	movs	r2, #36	; 0x24
 8005938:	2100      	movs	r1, #0
 800593a:	4618      	mov	r0, r3
 800593c:	f009 fd99 	bl	800f472 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8005940:	1d3b      	adds	r3, r7, #4
 8005942:	2200      	movs	r2, #0
 8005944:	601a      	str	r2, [r3, #0]
 8005946:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8005948:	4b25      	ldr	r3, [pc, #148]	; (80059e0 <_ZL12MX_TIM5_Initv+0xb4>)
 800594a:	4a26      	ldr	r2, [pc, #152]	; (80059e4 <_ZL12MX_TIM5_Initv+0xb8>)
 800594c:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800594e:	4b24      	ldr	r3, [pc, #144]	; (80059e0 <_ZL12MX_TIM5_Initv+0xb4>)
 8005950:	2200      	movs	r2, #0
 8005952:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005954:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <_ZL12MX_TIM5_Initv+0xb4>)
 8005956:	2200      	movs	r2, #0
 8005958:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 60000;
 800595a:	4b21      	ldr	r3, [pc, #132]	; (80059e0 <_ZL12MX_TIM5_Initv+0xb4>)
 800595c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005960:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005962:	4b1f      	ldr	r3, [pc, #124]	; (80059e0 <_ZL12MX_TIM5_Initv+0xb4>)
 8005964:	2200      	movs	r2, #0
 8005966:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005968:	4b1d      	ldr	r3, [pc, #116]	; (80059e0 <_ZL12MX_TIM5_Initv+0xb4>)
 800596a:	2200      	movs	r2, #0
 800596c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800596e:	2303      	movs	r3, #3
 8005970:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005972:	2300      	movs	r3, #0
 8005974:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005976:	2301      	movs	r3, #1
 8005978:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005982:	2300      	movs	r3, #0
 8005984:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005986:	2301      	movs	r3, #1
 8005988:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800598a:	2300      	movs	r3, #0
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 8005992:	f107 030c 	add.w	r3, r7, #12
 8005996:	4619      	mov	r1, r3
 8005998:	4811      	ldr	r0, [pc, #68]	; (80059e0 <_ZL12MX_TIM5_Initv+0xb4>)
 800599a:	f006 f8cb 	bl	800bb34 <HAL_TIM_Encoder_Init>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	bf14      	ite	ne
 80059a4:	2301      	movne	r3, #1
 80059a6:	2300      	moveq	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <_ZL12MX_TIM5_Initv+0x86>
		Error_Handler();
 80059ae:	f001 f805 	bl	80069bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059b2:	2300      	movs	r3, #0
 80059b4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	4619      	mov	r1, r3
 80059be:	4808      	ldr	r0, [pc, #32]	; (80059e0 <_ZL12MX_TIM5_Initv+0xb4>)
 80059c0:	f006 ffaa 	bl	800c918 <HAL_TIMEx_MasterConfigSynchronization>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bf14      	ite	ne
 80059ca:	2301      	movne	r3, #1
 80059cc:	2300      	moveq	r3, #0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <_ZL12MX_TIM5_Initv+0xac>
		Error_Handler();
 80059d4:	f000 fff2 	bl	80069bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80059d8:	bf00      	nop
 80059da:	3730      	adds	r7, #48	; 0x30
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	2000037c 	.word	0x2000037c
 80059e4:	40000c00 	.word	0x40000c00

080059e8 <_ZL12MX_TIM8_Initv>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08c      	sub	sp, #48	; 0x30
 80059ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80059ee:	f107 030c 	add.w	r3, r7, #12
 80059f2:	2224      	movs	r2, #36	; 0x24
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f009 fd3b 	bl	800f472 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80059fc:	1d3b      	adds	r3, r7, #4
 80059fe:	2200      	movs	r2, #0
 8005a00:	601a      	str	r2, [r3, #0]
 8005a02:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8005a04:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <_ZL12MX_TIM8_Initv+0xbc>)
 8005a06:	4a28      	ldr	r2, [pc, #160]	; (8005aa8 <_ZL12MX_TIM8_Initv+0xc0>)
 8005a08:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8005a0a:	4b26      	ldr	r3, [pc, #152]	; (8005aa4 <_ZL12MX_TIM8_Initv+0xbc>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a10:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <_ZL12MX_TIM8_Initv+0xbc>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 60000;
 8005a16:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <_ZL12MX_TIM8_Initv+0xbc>)
 8005a18:	f64e 2260 	movw	r2, #60000	; 0xea60
 8005a1c:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a1e:	4b21      	ldr	r3, [pc, #132]	; (8005aa4 <_ZL12MX_TIM8_Initv+0xbc>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8005a24:	4b1f      	ldr	r3, [pc, #124]	; (8005aa4 <_ZL12MX_TIM8_Initv+0xbc>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a2a:	4b1e      	ldr	r3, [pc, #120]	; (8005aa4 <_ZL12MX_TIM8_Initv+0xbc>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005a30:	2303      	movs	r3, #3
 8005a32:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005a34:	2300      	movs	r3, #0
 8005a36:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8005a40:	2300      	movs	r3, #0
 8005a42:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005a44:	2300      	movs	r3, #0
 8005a46:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 8005a54:	f107 030c 	add.w	r3, r7, #12
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4812      	ldr	r0, [pc, #72]	; (8005aa4 <_ZL12MX_TIM8_Initv+0xbc>)
 8005a5c:	f006 f86a 	bl	800bb34 <HAL_TIM_Encoder_Init>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	bf14      	ite	ne
 8005a66:	2301      	movne	r3, #1
 8005a68:	2300      	moveq	r3, #0
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d001      	beq.n	8005a74 <_ZL12MX_TIM8_Initv+0x8c>
		Error_Handler();
 8005a70:	f000 ffa4 	bl	80069bc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a74:	2300      	movs	r3, #0
 8005a76:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8005a7c:	1d3b      	adds	r3, r7, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4808      	ldr	r0, [pc, #32]	; (8005aa4 <_ZL12MX_TIM8_Initv+0xbc>)
 8005a82:	f006 ff49 	bl	800c918 <HAL_TIMEx_MasterConfigSynchronization>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	bf14      	ite	ne
 8005a8c:	2301      	movne	r3, #1
 8005a8e:	2300      	moveq	r3, #0
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d001      	beq.n	8005a9a <_ZL12MX_TIM8_Initv+0xb2>
		Error_Handler();
 8005a96:	f000 ff91 	bl	80069bc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8005a9a:	bf00      	nop
 8005a9c:	3730      	adds	r7, #48	; 0x30
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200003c4 	.word	0x200003c4
 8005aa8:	40010400 	.word	0x40010400

08005aac <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ab2:	4a14      	ldr	r2, [pc, #80]	; (8005b04 <_ZL19MX_USART1_UART_Initv+0x58>)
 8005ab4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ab8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005abc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005abe:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8005ac4:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8005aca:	4b0d      	ldr	r3, [pc, #52]	; (8005b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ad2:	220c      	movs	r2, #12
 8005ad4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005adc:	4b08      	ldr	r3, [pc, #32]	; (8005b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8005ae2:	4807      	ldr	r0, [pc, #28]	; (8005b00 <_ZL19MX_USART1_UART_Initv+0x54>)
 8005ae4:	f006 ffa8 	bl	800ca38 <HAL_UART_Init>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bf14      	ite	ne
 8005aee:	2301      	movne	r3, #1
 8005af0:	2300      	moveq	r3, #0
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d001      	beq.n	8005afc <_ZL19MX_USART1_UART_Initv+0x50>
		Error_Handler();
 8005af8:	f000 ff60 	bl	80069bc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8005afc:	bf00      	nop
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	2000040c 	.word	0x2000040c
 8005b04:	40011000 	.word	0x40011000

08005b08 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8005b0e:	2300      	movs	r3, #0
 8005b10:	607b      	str	r3, [r7, #4]
 8005b12:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <_ZL11MX_DMA_Initv+0x4c>)
 8005b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b16:	4a0f      	ldr	r2, [pc, #60]	; (8005b54 <_ZL11MX_DMA_Initv+0x4c>)
 8005b18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	; (8005b54 <_ZL11MX_DMA_Initv+0x4c>)
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b26:	607b      	str	r3, [r7, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	203a      	movs	r0, #58	; 0x3a
 8005b30:	f003 fa51 	bl	8008fd6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005b34:	203a      	movs	r0, #58	; 0x3a
 8005b36:	f003 fa6a 	bl	800900e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	2046      	movs	r0, #70	; 0x46
 8005b40:	f003 fa49 	bl	8008fd6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8005b44:	2046      	movs	r0, #70	; 0x46
 8005b46:	f003 fa62 	bl	800900e <HAL_NVIC_EnableIRQ>

}
 8005b4a:	bf00      	nop
 8005b4c:	3708      	adds	r7, #8
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40023800 	.word	0x40023800

08005b58 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b08a      	sub	sp, #40	; 0x28
 8005b5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005b5e:	f107 0314 	add.w	r3, r7, #20
 8005b62:	2200      	movs	r2, #0
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	605a      	str	r2, [r3, #4]
 8005b68:	609a      	str	r2, [r3, #8]
 8005b6a:	60da      	str	r2, [r3, #12]
 8005b6c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8005b6e:	2300      	movs	r3, #0
 8005b70:	613b      	str	r3, [r7, #16]
 8005b72:	4b31      	ldr	r3, [pc, #196]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	4a30      	ldr	r2, [pc, #192]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b78:	f043 0304 	orr.w	r3, r3, #4
 8005b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b7e:	4b2e      	ldr	r3, [pc, #184]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b82:	f003 0304 	and.w	r3, r3, #4
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b98:	6313      	str	r3, [r2, #48]	; 0x30
 8005b9a:	4b27      	ldr	r3, [pc, #156]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	4b23      	ldr	r3, [pc, #140]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	4a22      	ldr	r2, [pc, #136]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8005bb6:	4b20      	ldr	r3, [pc, #128]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	4b1c      	ldr	r3, [pc, #112]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bcc:	f043 0302 	orr.w	r3, r3, #2
 8005bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8005bd2:	4b19      	ldr	r3, [pc, #100]	; (8005c38 <_ZL12MX_GPIO_Initv+0xe0>)
 8005bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	607b      	str	r3, [r7, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, M1_INA_Pin | M2_INA_Pin | M3_INA_Pin | M4_INA_Pin, GPIO_PIN_RESET);
 8005bde:	2200      	movs	r2, #0
 8005be0:	210f      	movs	r1, #15
 8005be2:	4816      	ldr	r0, [pc, #88]	; (8005c3c <_ZL12MX_GPIO_Initv+0xe4>)
 8005be4:	f003 ffc4 	bl	8009b70 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8005be8:	2200      	movs	r2, #0
 8005bea:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8005bee:	4814      	ldr	r0, [pc, #80]	; (8005c40 <_ZL12MX_GPIO_Initv+0xe8>)
 8005bf0:	f003 ffbe 	bl	8009b70 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : M1_INA_Pin M2_INA_Pin M3_INA_Pin M4_INA_Pin */
	GPIO_InitStruct.Pin = M1_INA_Pin | M2_INA_Pin | M3_INA_Pin | M4_INA_Pin;
 8005bf4:	230f      	movs	r3, #15
 8005bf6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c00:	2300      	movs	r3, #0
 8005c02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c04:	f107 0314 	add.w	r3, r7, #20
 8005c08:	4619      	mov	r1, r3
 8005c0a:	480c      	ldr	r0, [pc, #48]	; (8005c3c <_ZL12MX_GPIO_Initv+0xe4>)
 8005c0c:	f003 fe1c 	bl	8009848 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8005c10:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8005c14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c16:	2301      	movs	r3, #1
 8005c18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c22:	f107 0314 	add.w	r3, r7, #20
 8005c26:	4619      	mov	r1, r3
 8005c28:	4805      	ldr	r0, [pc, #20]	; (8005c40 <_ZL12MX_GPIO_Initv+0xe8>)
 8005c2a:	f003 fe0d 	bl	8009848 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005c2e:	bf00      	nop
 8005c30:	3728      	adds	r7, #40	; 0x28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	40020800 	.word	0x40020800
 8005c40:	40020400 	.word	0x40020400
 8005c44:	00000000 	.word	0x00000000

08005c48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

/* Encoder */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a7e      	ldr	r2, [pc, #504]	; (8005e50 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	f040 80f0 	bne.w	8005e3c <HAL_TIM_PeriodElapsedCallback+0x1f4>
		motor_front_left_.delta_encoder = htim1.Instance->CNT - 30000;
 8005c5c:	4b7d      	ldr	r3, [pc, #500]	; (8005e54 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8005c68:	3b30      	subs	r3, #48	; 0x30
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	b21a      	sxth	r2, r3
 8005c6e:	4b7a      	ldr	r3, [pc, #488]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005c70:	801a      	strh	r2, [r3, #0]
		motor_front_right_.delta_encoder = htim3.Instance->CNT - 30000;
 8005c72:	4b7a      	ldr	r3, [pc, #488]	; (8005e5c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8005c7e:	3b30      	subs	r3, #48	; 0x30
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	b21a      	sxth	r2, r3
 8005c84:	4b76      	ldr	r3, [pc, #472]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005c86:	801a      	strh	r2, [r3, #0]
		motor_rear_left_.delta_encoder = htim5.Instance->CNT - 30000;
 8005c88:	4b76      	ldr	r3, [pc, #472]	; (8005e64 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8005c94:	3b30      	subs	r3, #48	; 0x30
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	b21a      	sxth	r2, r3
 8005c9a:	4b73      	ldr	r3, [pc, #460]	; (8005e68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005c9c:	801a      	strh	r2, [r3, #0]
		motor_rear_right_.delta_encoder = htim8.Instance->CNT - 30000;
 8005c9e:	4b73      	ldr	r3, [pc, #460]	; (8005e6c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f5a3 43ea 	sub.w	r3, r3, #29952	; 0x7500
 8005caa:	3b30      	subs	r3, #48	; 0x30
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	b21a      	sxth	r2, r3
 8005cb0:	4b6f      	ldr	r3, [pc, #444]	; (8005e70 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005cb2:	801a      	strh	r2, [r3, #0]

		motor_front_left_.pps = (double) motor_front_left_.delta_encoder * 100.0f;
 8005cb4:	4b68      	ldr	r3, [pc, #416]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7fa fc52 	bl	8000564 <__aeabi_i2d>
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	4b6b      	ldr	r3, [pc, #428]	; (8005e74 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005cc6:	f7fa fcb7 	bl	8000638 <__aeabi_dmul>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	460b      	mov	r3, r1
 8005cce:	4962      	ldr	r1, [pc, #392]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005cd0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_front_right_.pps = (double) motor_front_right_.delta_encoder * 100.0f;
 8005cd4:	4b62      	ldr	r3, [pc, #392]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f7fa fc42 	bl	8000564 <__aeabi_i2d>
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	4b63      	ldr	r3, [pc, #396]	; (8005e74 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005ce6:	f7fa fca7 	bl	8000638 <__aeabi_dmul>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	495c      	ldr	r1, [pc, #368]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005cf0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_rear_left_.pps = (double) motor_rear_left_.delta_encoder * 100.0f;
 8005cf4:	4b5c      	ldr	r3, [pc, #368]	; (8005e68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f7fa fc32 	bl	8000564 <__aeabi_i2d>
 8005d00:	f04f 0200 	mov.w	r2, #0
 8005d04:	4b5b      	ldr	r3, [pc, #364]	; (8005e74 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005d06:	f7fa fc97 	bl	8000638 <__aeabi_dmul>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4956      	ldr	r1, [pc, #344]	; (8005e68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005d10:	e9c1 2302 	strd	r2, r3, [r1, #8]
		motor_rear_right_.pps = (double) motor_rear_right_.delta_encoder * 100.0f;
 8005d14:	4b56      	ldr	r3, [pc, #344]	; (8005e70 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fa fc22 	bl	8000564 <__aeabi_i2d>
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	4b53      	ldr	r3, [pc, #332]	; (8005e74 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005d26:	f7fa fc87 	bl	8000638 <__aeabi_dmul>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4950      	ldr	r1, [pc, #320]	; (8005e70 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005d30:	e9c1 2302 	strd	r2, r3, [r1, #8]

		motor_front_left_.rpm = motor_front_left_.pps * 60 / (448.0f * 43.8f * 4.0f);
 8005d34:	4b48      	ldr	r3, [pc, #288]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005d36:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	4b4e      	ldr	r3, [pc, #312]	; (8005e78 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005d40:	f7fa fc7a 	bl	8000638 <__aeabi_dmul>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	4610      	mov	r0, r2
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	a33e      	add	r3, pc, #248	; (adr r3, 8005e48 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	f7fa fd9b 	bl	800088c <__aeabi_ddiv>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	493f      	ldr	r1, [pc, #252]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005d5c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_front_right_.rpm = motor_front_right_.pps * 60 / (448.0f * 43.8f * 4.0f);
 8005d60:	4b3f      	ldr	r3, [pc, #252]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005d62:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	4b43      	ldr	r3, [pc, #268]	; (8005e78 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005d6c:	f7fa fc64 	bl	8000638 <__aeabi_dmul>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4610      	mov	r0, r2
 8005d76:	4619      	mov	r1, r3
 8005d78:	a333      	add	r3, pc, #204	; (adr r3, 8005e48 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f7fa fd85 	bl	800088c <__aeabi_ddiv>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	4936      	ldr	r1, [pc, #216]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005d88:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_rear_left_.rpm = motor_rear_left_.pps * 60 / (448.0f * 43.8f * 4.0f);
 8005d8c:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005d8e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	4b38      	ldr	r3, [pc, #224]	; (8005e78 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005d98:	f7fa fc4e 	bl	8000638 <__aeabi_dmul>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4610      	mov	r0, r2
 8005da2:	4619      	mov	r1, r3
 8005da4:	a328      	add	r3, pc, #160	; (adr r3, 8005e48 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fd6f 	bl	800088c <__aeabi_ddiv>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	492d      	ldr	r1, [pc, #180]	; (8005e68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005db4:	e9c1 2304 	strd	r2, r3, [r1, #16]
		motor_rear_right_.rpm = motor_rear_right_.pps * 60 / (448.0f * 43.8f * 4.0f);
 8005db8:	4b2d      	ldr	r3, [pc, #180]	; (8005e70 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005dba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	4b2d      	ldr	r3, [pc, #180]	; (8005e78 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005dc4:	f7fa fc38 	bl	8000638 <__aeabi_dmul>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4610      	mov	r0, r2
 8005dce:	4619      	mov	r1, r3
 8005dd0:	a31d      	add	r3, pc, #116	; (adr r3, 8005e48 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fd59 	bl	800088c <__aeabi_ddiv>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4924      	ldr	r1, [pc, #144]	; (8005e70 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005de0:	e9c1 2304 	strd	r2, r3, [r1, #16]

		motor_front_left_.speed_pv = motor_front_left_.rpm;
 8005de4:	4b1c      	ldr	r3, [pc, #112]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005de6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005dea:	491b      	ldr	r1, [pc, #108]	; (8005e58 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005dec:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_front_right_.speed_pv = motor_front_right_.rpm;
 8005df0:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005df2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005df6:	491a      	ldr	r1, [pc, #104]	; (8005e60 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005df8:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_rear_left_.speed_pv = motor_rear_left_.rpm;
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	; (8005e68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005dfe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e02:	4919      	ldr	r1, [pc, #100]	; (8005e68 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005e04:	e9c1 2306 	strd	r2, r3, [r1, #24]
		motor_rear_right_.speed_pv = motor_rear_right_.rpm;
 8005e08:	4b19      	ldr	r3, [pc, #100]	; (8005e70 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005e0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005e0e:	4918      	ldr	r1, [pc, #96]	; (8005e70 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005e10:	e9c1 2306 	strd	r2, r3, [r1, #24]

		htim1.Instance->CNT = 30000;
 8005e14:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f247 5230 	movw	r2, #30000	; 0x7530
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24
		htim3.Instance->CNT = 30000;
 8005e1e:	4b0f      	ldr	r3, [pc, #60]	; (8005e5c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f247 5230 	movw	r2, #30000	; 0x7530
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
		htim5.Instance->CNT = 30000;
 8005e28:	4b0e      	ldr	r3, [pc, #56]	; (8005e64 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f247 5230 	movw	r2, #30000	; 0x7530
 8005e30:	625a      	str	r2, [r3, #36]	; 0x24
		htim8.Instance->CNT = 30000;
 8005e32:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f247 5230 	movw	r2, #30000	; 0x7530
 8005e3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	f3af 8000 	nop.w
 8005e48:	a0000000 	.word	0xa0000000
 8005e4c:	40f32999 	.word	0x40f32999
 8005e50:	40000800 	.word	0x40000800
 8005e54:	2000025c 	.word	0x2000025c
 8005e58:	200005d8 	.word	0x200005d8
 8005e5c:	200002ec 	.word	0x200002ec
 8005e60:	20000608 	.word	0x20000608
 8005e64:	2000037c 	.word	0x2000037c
 8005e68:	20000638 	.word	0x20000638
 8005e6c:	200003c4 	.word	0x200003c4
 8005e70:	20000668 	.word	0x20000668
 8005e74:	40590000 	.word	0x40590000
 8005e78:	404e0000 	.word	0x404e0000
 8005e7c:	00000000 	.word	0x00000000

08005e80 <_Z22motor_front_left_drived>:

/* Motor */
void motor_front_left_drive(double dt) {
 8005e80:	b5b0      	push	{r4, r5, r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_front_left_.speed_sp, motor_front_left_.speed_pv, &pid_data_front_left_, dt);
 8005e96:	4b5a      	ldr	r3, [pc, #360]	; (8006000 <_Z22motor_front_left_drived+0x180>)
 8005e98:	ed93 7b08 	vldr	d7, [r3, #32]
 8005e9c:	4b58      	ldr	r3, [pc, #352]	; (8006000 <_Z22motor_front_left_drived+0x180>)
 8005e9e:	ed93 6b06 	vldr	d6, [r3, #24]
 8005ea2:	ed97 2b00 	vldr	d2, [r7]
 8005ea6:	4857      	ldr	r0, [pc, #348]	; (8006004 <_Z22motor_front_left_drived+0x184>)
 8005ea8:	eeb0 1a46 	vmov.f32	s2, s12
 8005eac:	eef0 1a66 	vmov.f32	s3, s13
 8005eb0:	eeb0 0a47 	vmov.f32	s0, s14
 8005eb4:	eef0 0a67 	vmov.f32	s1, s15
 8005eb8:	f001 fc12 	bl	80076e0 <_Z12calculatePIDddP16PID_Data_Typedefd>
 8005ebc:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	4b50      	ldr	r3, [pc, #320]	; (8006008 <_Z22motor_front_left_drived+0x188>)
 8005ec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eca:	f7fa fe45 	bl	8000b58 <__aeabi_dcmpgt>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <_Z22motor_front_left_drived+0x5e>
		speed_command = 1000.0;
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	4b4b      	ldr	r3, [pc, #300]	; (8006008 <_Z22motor_front_left_drived+0x188>)
 8005eda:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 8005ede:	a346      	add	r3, pc, #280	; (adr r3, 8005ff8 <_Z22motor_front_left_drived+0x178>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ee8:	f7fa fe18 	bl	8000b1c <__aeabi_dcmplt>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d004      	beq.n	8005efc <_Z22motor_front_left_drived+0x7c>
		speed_command = -1000.0;
 8005ef2:	a341      	add	r3, pc, #260	; (adr r3, 8005ff8 <_Z22motor_front_left_drived+0x178>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_front_left_.speed_command = speed_command;
 8005efc:	4940      	ldr	r1, [pc, #256]	; (8006000 <_Z22motor_front_left_drived+0x180>)
 8005efe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f02:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (speed_command > 0.0 && motor_front_left_.speed_sp > 0.0) {
 8005f06:	f04f 0200 	mov.w	r2, #0
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f12:	f7fa fe21 	bl	8000b58 <__aeabi_dcmpgt>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d019      	beq.n	8005f50 <_Z22motor_front_left_drived+0xd0>
 8005f1c:	4b38      	ldr	r3, [pc, #224]	; (8006000 <_Z22motor_front_left_drived+0x180>)
 8005f1e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005f22:	f04f 0200 	mov.w	r2, #0
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	f7fa fe15 	bl	8000b58 <__aeabi_dcmpgt>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00d      	beq.n	8005f50 <_Z22motor_front_left_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8005f34:	2201      	movs	r2, #1
 8005f36:	2101      	movs	r1, #1
 8005f38:	4834      	ldr	r0, [pc, #208]	; (800600c <_Z22motor_front_left_drived+0x18c>)
 8005f3a:	f003 fe19 	bl	8009b70 <HAL_GPIO_WritePin>
		TIM2->CCR1 = (int) speed_command;
 8005f3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f42:	f7fa fe29 	bl	8000b98 <__aeabi_d2iz>
 8005f46:	4602      	mov	r2, r0
 8005f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8005f4e:	e04f      	b.n	8005ff0 <_Z22motor_front_left_drived+0x170>
	} else if (speed_command < 0.0 && motor_front_left_.speed_sp < 0.0) {
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f5c:	f7fa fdde 	bl	8000b1c <__aeabi_dcmplt>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01f      	beq.n	8005fa6 <_Z22motor_front_left_drived+0x126>
 8005f66:	4b26      	ldr	r3, [pc, #152]	; (8006000 <_Z22motor_front_left_drived+0x180>)
 8005f68:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	f7fa fdd2 	bl	8000b1c <__aeabi_dcmplt>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d013      	beq.n	8005fa6 <_Z22motor_front_left_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2101      	movs	r1, #1
 8005f82:	4822      	ldr	r0, [pc, #136]	; (800600c <_Z22motor_front_left_drived+0x18c>)
 8005f84:	f003 fdf4 	bl	8009b70 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8005f88:	68bc      	ldr	r4, [r7, #8]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8005f90:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR1 = (int) speed_command;
 8005f94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f98:	f7fa fdfe 	bl	8000b98 <__aeabi_d2iz>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fa2:	635a      	str	r2, [r3, #52]	; 0x34
 8005fa4:	e024      	b.n	8005ff0 <_Z22motor_front_left_drived+0x170>
	} else if (speed_command == 0) {
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fb2:	f7fa fda9 	bl	8000b08 <__aeabi_dcmpeq>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00c      	beq.n	8005fd6 <_Z22motor_front_left_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4812      	ldr	r0, [pc, #72]	; (800600c <_Z22motor_front_left_drived+0x18c>)
 8005fc2:	f003 fdd5 	bl	8009b70 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_left_);
 8005fc6:	480f      	ldr	r0, [pc, #60]	; (8006004 <_Z22motor_front_left_drived+0x184>)
 8005fc8:	f001 fc50 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR1 = 0;
 8005fcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	635a      	str	r2, [r3, #52]	; 0x34
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
		resetPIDData(&pid_data_front_left_);
		TIM2->CCR1 = 0;
	}
}
 8005fd4:	e00c      	b.n	8005ff0 <_Z22motor_front_left_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	2101      	movs	r1, #1
 8005fda:	480c      	ldr	r0, [pc, #48]	; (800600c <_Z22motor_front_left_drived+0x18c>)
 8005fdc:	f003 fdc8 	bl	8009b70 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_left_);
 8005fe0:	4808      	ldr	r0, [pc, #32]	; (8006004 <_Z22motor_front_left_drived+0x184>)
 8005fe2:	f001 fc43 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR1 = 0;
 8005fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fea:	2200      	movs	r2, #0
 8005fec:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005fee:	e7ff      	b.n	8005ff0 <_Z22motor_front_left_drived+0x170>
 8005ff0:	bf00      	nop
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bdb0      	pop	{r4, r5, r7, pc}
 8005ff8:	00000000 	.word	0x00000000
 8005ffc:	c08f4000 	.word	0xc08f4000
 8006000:	200005d8 	.word	0x200005d8
 8006004:	20000698 	.word	0x20000698
 8006008:	408f4000 	.word	0x408f4000
 800600c:	40020800 	.word	0x40020800

08006010 <_Z23motor_front_right_drived>:

void motor_front_right_drive(double dt) {
 8006010:	b5b0      	push	{r4, r5, r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_front_right_.speed_sp, motor_front_right_.speed_pv, &pid_data_front_right_, dt);
 8006026:	4b5a      	ldr	r3, [pc, #360]	; (8006190 <_Z23motor_front_right_drived+0x180>)
 8006028:	ed93 7b08 	vldr	d7, [r3, #32]
 800602c:	4b58      	ldr	r3, [pc, #352]	; (8006190 <_Z23motor_front_right_drived+0x180>)
 800602e:	ed93 6b06 	vldr	d6, [r3, #24]
 8006032:	ed97 2b00 	vldr	d2, [r7]
 8006036:	4857      	ldr	r0, [pc, #348]	; (8006194 <_Z23motor_front_right_drived+0x184>)
 8006038:	eeb0 1a46 	vmov.f32	s2, s12
 800603c:	eef0 1a66 	vmov.f32	s3, s13
 8006040:	eeb0 0a47 	vmov.f32	s0, s14
 8006044:	eef0 0a67 	vmov.f32	s1, s15
 8006048:	f001 fb4a 	bl	80076e0 <_Z12calculatePIDddP16PID_Data_Typedefd>
 800604c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8006050:	f04f 0200 	mov.w	r2, #0
 8006054:	4b50      	ldr	r3, [pc, #320]	; (8006198 <_Z23motor_front_right_drived+0x188>)
 8006056:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800605a:	f7fa fd7d 	bl	8000b58 <__aeabi_dcmpgt>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <_Z23motor_front_right_drived+0x5e>
		speed_command = 1000.0;
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	4b4b      	ldr	r3, [pc, #300]	; (8006198 <_Z23motor_front_right_drived+0x188>)
 800606a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 800606e:	a346      	add	r3, pc, #280	; (adr r3, 8006188 <_Z23motor_front_right_drived+0x178>)
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006078:	f7fa fd50 	bl	8000b1c <__aeabi_dcmplt>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d004      	beq.n	800608c <_Z23motor_front_right_drived+0x7c>
		speed_command = -1000.0;
 8006082:	a341      	add	r3, pc, #260	; (adr r3, 8006188 <_Z23motor_front_right_drived+0x178>)
 8006084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006088:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_front_right_.speed_command = speed_command;
 800608c:	4940      	ldr	r1, [pc, #256]	; (8006190 <_Z23motor_front_right_drived+0x180>)
 800608e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006092:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (speed_command > 0.0 && motor_front_right_.speed_sp > 0.0) {
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	f04f 0300 	mov.w	r3, #0
 800609e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060a2:	f7fa fd59 	bl	8000b58 <__aeabi_dcmpgt>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d019      	beq.n	80060e0 <_Z23motor_front_right_drived+0xd0>
 80060ac:	4b38      	ldr	r3, [pc, #224]	; (8006190 <_Z23motor_front_right_drived+0x180>)
 80060ae:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80060b2:	f04f 0200 	mov.w	r2, #0
 80060b6:	f04f 0300 	mov.w	r3, #0
 80060ba:	f7fa fd4d 	bl	8000b58 <__aeabi_dcmpgt>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00d      	beq.n	80060e0 <_Z23motor_front_right_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80060c4:	2201      	movs	r2, #1
 80060c6:	2102      	movs	r1, #2
 80060c8:	4834      	ldr	r0, [pc, #208]	; (800619c <_Z23motor_front_right_drived+0x18c>)
 80060ca:	f003 fd51 	bl	8009b70 <HAL_GPIO_WritePin>
		TIM2->CCR2 = (int) speed_command;
 80060ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060d2:	f7fa fd61 	bl	8000b98 <__aeabi_d2iz>
 80060d6:	4602      	mov	r2, r0
 80060d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060dc:	639a      	str	r2, [r3, #56]	; 0x38
 80060de:	e04f      	b.n	8006180 <_Z23motor_front_right_drived+0x170>
	} else if (speed_command < 0.0 && motor_front_right_.speed_sp < 0.0) {
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060ec:	f7fa fd16 	bl	8000b1c <__aeabi_dcmplt>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01f      	beq.n	8006136 <_Z23motor_front_right_drived+0x126>
 80060f6:	4b26      	ldr	r3, [pc, #152]	; (8006190 <_Z23motor_front_right_drived+0x180>)
 80060f8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80060fc:	f04f 0200 	mov.w	r2, #0
 8006100:	f04f 0300 	mov.w	r3, #0
 8006104:	f7fa fd0a 	bl	8000b1c <__aeabi_dcmplt>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d013      	beq.n	8006136 <_Z23motor_front_right_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800610e:	2200      	movs	r2, #0
 8006110:	2102      	movs	r1, #2
 8006112:	4822      	ldr	r0, [pc, #136]	; (800619c <_Z23motor_front_right_drived+0x18c>)
 8006114:	f003 fd2c 	bl	8009b70 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8006118:	68bc      	ldr	r4, [r7, #8]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006120:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR2 = (int) speed_command;
 8006124:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006128:	f7fa fd36 	bl	8000b98 <__aeabi_d2iz>
 800612c:	4602      	mov	r2, r0
 800612e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006132:	639a      	str	r2, [r3, #56]	; 0x38
 8006134:	e024      	b.n	8006180 <_Z23motor_front_right_drived+0x170>
	} else if (speed_command == 0) {
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006142:	f7fa fce1 	bl	8000b08 <__aeabi_dcmpeq>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00c      	beq.n	8006166 <_Z23motor_front_right_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800614c:	2201      	movs	r2, #1
 800614e:	2102      	movs	r1, #2
 8006150:	4812      	ldr	r0, [pc, #72]	; (800619c <_Z23motor_front_right_drived+0x18c>)
 8006152:	f003 fd0d 	bl	8009b70 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_right_);
 8006156:	480f      	ldr	r0, [pc, #60]	; (8006194 <_Z23motor_front_right_drived+0x184>)
 8006158:	f001 fb88 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR2 = 0;
 800615c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006160:	2200      	movs	r2, #0
 8006162:	639a      	str	r2, [r3, #56]	; 0x38
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
		resetPIDData(&pid_data_front_right_);
		TIM2->CCR2 = 0;
	}
}
 8006164:	e00c      	b.n	8006180 <_Z23motor_front_right_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8006166:	2201      	movs	r2, #1
 8006168:	2102      	movs	r1, #2
 800616a:	480c      	ldr	r0, [pc, #48]	; (800619c <_Z23motor_front_right_drived+0x18c>)
 800616c:	f003 fd00 	bl	8009b70 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_front_right_);
 8006170:	4808      	ldr	r0, [pc, #32]	; (8006194 <_Z23motor_front_right_drived+0x184>)
 8006172:	f001 fb7b 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR2 = 0;
 8006176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800617a:	2200      	movs	r2, #0
 800617c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800617e:	e7ff      	b.n	8006180 <_Z23motor_front_right_drived+0x170>
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bdb0      	pop	{r4, r5, r7, pc}
 8006188:	00000000 	.word	0x00000000
 800618c:	c08f4000 	.word	0xc08f4000
 8006190:	20000608 	.word	0x20000608
 8006194:	200006c8 	.word	0x200006c8
 8006198:	408f4000 	.word	0x408f4000
 800619c:	40020800 	.word	0x40020800

080061a0 <_Z21motor_rear_left_drived>:

void motor_rear_left_drive(double dt) {
 80061a0:	b5b0      	push	{r4, r5, r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_rear_left_.speed_sp, motor_rear_left_.speed_pv, &pid_data_rear_left_, dt);
 80061b6:	4b5a      	ldr	r3, [pc, #360]	; (8006320 <_Z21motor_rear_left_drived+0x180>)
 80061b8:	ed93 7b08 	vldr	d7, [r3, #32]
 80061bc:	4b58      	ldr	r3, [pc, #352]	; (8006320 <_Z21motor_rear_left_drived+0x180>)
 80061be:	ed93 6b06 	vldr	d6, [r3, #24]
 80061c2:	ed97 2b00 	vldr	d2, [r7]
 80061c6:	4857      	ldr	r0, [pc, #348]	; (8006324 <_Z21motor_rear_left_drived+0x184>)
 80061c8:	eeb0 1a46 	vmov.f32	s2, s12
 80061cc:	eef0 1a66 	vmov.f32	s3, s13
 80061d0:	eeb0 0a47 	vmov.f32	s0, s14
 80061d4:	eef0 0a67 	vmov.f32	s1, s15
 80061d8:	f001 fa82 	bl	80076e0 <_Z12calculatePIDddP16PID_Data_Typedefd>
 80061dc:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 80061e0:	f04f 0200 	mov.w	r2, #0
 80061e4:	4b50      	ldr	r3, [pc, #320]	; (8006328 <_Z21motor_rear_left_drived+0x188>)
 80061e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80061ea:	f7fa fcb5 	bl	8000b58 <__aeabi_dcmpgt>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <_Z21motor_rear_left_drived+0x5e>
		speed_command = 1000.0;
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	4b4b      	ldr	r3, [pc, #300]	; (8006328 <_Z21motor_rear_left_drived+0x188>)
 80061fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 80061fe:	a346      	add	r3, pc, #280	; (adr r3, 8006318 <_Z21motor_rear_left_drived+0x178>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006208:	f7fa fc88 	bl	8000b1c <__aeabi_dcmplt>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d004      	beq.n	800621c <_Z21motor_rear_left_drived+0x7c>
		speed_command = -1000.0;
 8006212:	a341      	add	r3, pc, #260	; (adr r3, 8006318 <_Z21motor_rear_left_drived+0x178>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_rear_left_.speed_command = speed_command;
 800621c:	4940      	ldr	r1, [pc, #256]	; (8006320 <_Z21motor_rear_left_drived+0x180>)
 800621e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006222:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (speed_command > 0.0 && motor_rear_left_.speed_sp > 0.0) {
 8006226:	f04f 0200 	mov.w	r2, #0
 800622a:	f04f 0300 	mov.w	r3, #0
 800622e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006232:	f7fa fc91 	bl	8000b58 <__aeabi_dcmpgt>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d019      	beq.n	8006270 <_Z21motor_rear_left_drived+0xd0>
 800623c:	4b38      	ldr	r3, [pc, #224]	; (8006320 <_Z21motor_rear_left_drived+0x180>)
 800623e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	f7fa fc85 	bl	8000b58 <__aeabi_dcmpgt>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00d      	beq.n	8006270 <_Z21motor_rear_left_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8006254:	2201      	movs	r2, #1
 8006256:	2104      	movs	r1, #4
 8006258:	4834      	ldr	r0, [pc, #208]	; (800632c <_Z21motor_rear_left_drived+0x18c>)
 800625a:	f003 fc89 	bl	8009b70 <HAL_GPIO_WritePin>
		TIM2->CCR3 = (int) speed_command;
 800625e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006262:	f7fa fc99 	bl	8000b98 <__aeabi_d2iz>
 8006266:	4602      	mov	r2, r0
 8006268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800626c:	63da      	str	r2, [r3, #60]	; 0x3c
 800626e:	e04f      	b.n	8006310 <_Z21motor_rear_left_drived+0x170>
	} else if (speed_command < 0.0 && motor_rear_left_.speed_sp < 0.0) {
 8006270:	f04f 0200 	mov.w	r2, #0
 8006274:	f04f 0300 	mov.w	r3, #0
 8006278:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800627c:	f7fa fc4e 	bl	8000b1c <__aeabi_dcmplt>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d01f      	beq.n	80062c6 <_Z21motor_rear_left_drived+0x126>
 8006286:	4b26      	ldr	r3, [pc, #152]	; (8006320 <_Z21motor_rear_left_drived+0x180>)
 8006288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	f7fa fc42 	bl	8000b1c <__aeabi_dcmplt>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d013      	beq.n	80062c6 <_Z21motor_rear_left_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 800629e:	2200      	movs	r2, #0
 80062a0:	2104      	movs	r1, #4
 80062a2:	4822      	ldr	r0, [pc, #136]	; (800632c <_Z21motor_rear_left_drived+0x18c>)
 80062a4:	f003 fc64 	bl	8009b70 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 80062a8:	68bc      	ldr	r4, [r7, #8]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80062b0:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR3 = (int) speed_command;
 80062b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062b8:	f7fa fc6e 	bl	8000b98 <__aeabi_d2iz>
 80062bc:	4602      	mov	r2, r0
 80062be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80062c4:	e024      	b.n	8006310 <_Z21motor_rear_left_drived+0x170>
	} else if (speed_command == 0) {
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062d2:	f7fa fc19 	bl	8000b08 <__aeabi_dcmpeq>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00c      	beq.n	80062f6 <_Z21motor_rear_left_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80062dc:	2201      	movs	r2, #1
 80062de:	2104      	movs	r1, #4
 80062e0:	4812      	ldr	r0, [pc, #72]	; (800632c <_Z21motor_rear_left_drived+0x18c>)
 80062e2:	f003 fc45 	bl	8009b70 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_left_);
 80062e6:	480f      	ldr	r0, [pc, #60]	; (8006324 <_Z21motor_rear_left_drived+0x184>)
 80062e8:	f001 fac0 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR3 = 0;
 80062ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062f0:	2200      	movs	r2, #0
 80062f2:	63da      	str	r2, [r3, #60]	; 0x3c
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
		resetPIDData(&pid_data_rear_left_);
		TIM2->CCR3 = 0;
	}
}
 80062f4:	e00c      	b.n	8006310 <_Z21motor_rear_left_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 80062f6:	2201      	movs	r2, #1
 80062f8:	2104      	movs	r1, #4
 80062fa:	480c      	ldr	r0, [pc, #48]	; (800632c <_Z21motor_rear_left_drived+0x18c>)
 80062fc:	f003 fc38 	bl	8009b70 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_left_);
 8006300:	4808      	ldr	r0, [pc, #32]	; (8006324 <_Z21motor_rear_left_drived+0x184>)
 8006302:	f001 fab3 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR3 = 0;
 8006306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800630a:	2200      	movs	r2, #0
 800630c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800630e:	e7ff      	b.n	8006310 <_Z21motor_rear_left_drived+0x170>
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bdb0      	pop	{r4, r5, r7, pc}
 8006318:	00000000 	.word	0x00000000
 800631c:	c08f4000 	.word	0xc08f4000
 8006320:	20000638 	.word	0x20000638
 8006324:	200006f8 	.word	0x200006f8
 8006328:	408f4000 	.word	0x408f4000
 800632c:	40020800 	.word	0x40020800

08006330 <_Z22motor_rear_right_drived>:

void motor_rear_right_drive(double dt) {
 8006330:	b5b0      	push	{r4, r5, r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	ed87 0b00 	vstr	d0, [r7]
	double speed_command = 0.0;
 800633a:	f04f 0200 	mov.w	r2, #0
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	e9c7 2302 	strd	r2, r3, [r7, #8]
	speed_command = calculatePID(motor_rear_right_.speed_sp, motor_rear_right_.speed_pv, &pid_data_rear_right_, dt);
 8006346:	4b5a      	ldr	r3, [pc, #360]	; (80064b0 <_Z22motor_rear_right_drived+0x180>)
 8006348:	ed93 7b08 	vldr	d7, [r3, #32]
 800634c:	4b58      	ldr	r3, [pc, #352]	; (80064b0 <_Z22motor_rear_right_drived+0x180>)
 800634e:	ed93 6b06 	vldr	d6, [r3, #24]
 8006352:	ed97 2b00 	vldr	d2, [r7]
 8006356:	4857      	ldr	r0, [pc, #348]	; (80064b4 <_Z22motor_rear_right_drived+0x184>)
 8006358:	eeb0 1a46 	vmov.f32	s2, s12
 800635c:	eef0 1a66 	vmov.f32	s3, s13
 8006360:	eeb0 0a47 	vmov.f32	s0, s14
 8006364:	eef0 0a67 	vmov.f32	s1, s15
 8006368:	f001 f9ba 	bl	80076e0 <_Z12calculatePIDddP16PID_Data_Typedefd>
 800636c:	ed87 0b02 	vstr	d0, [r7, #8]
	if (speed_command > 1000.0)
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	4b50      	ldr	r3, [pc, #320]	; (80064b8 <_Z22motor_rear_right_drived+0x188>)
 8006376:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800637a:	f7fa fbed 	bl	8000b58 <__aeabi_dcmpgt>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <_Z22motor_rear_right_drived+0x5e>
		speed_command = 1000.0;
 8006384:	f04f 0200 	mov.w	r2, #0
 8006388:	4b4b      	ldr	r3, [pc, #300]	; (80064b8 <_Z22motor_rear_right_drived+0x188>)
 800638a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (speed_command < -1000.0)
 800638e:	a346      	add	r3, pc, #280	; (adr r3, 80064a8 <_Z22motor_rear_right_drived+0x178>)
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006398:	f7fa fbc0 	bl	8000b1c <__aeabi_dcmplt>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <_Z22motor_rear_right_drived+0x7c>
		speed_command = -1000.0;
 80063a2:	a341      	add	r3, pc, #260	; (adr r3, 80064a8 <_Z22motor_rear_right_drived+0x178>)
 80063a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a8:	e9c7 2302 	strd	r2, r3, [r7, #8]

	motor_rear_right_.speed_command = speed_command;
 80063ac:	4940      	ldr	r1, [pc, #256]	; (80064b0 <_Z22motor_rear_right_drived+0x180>)
 80063ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	if (speed_command > 0.0 && motor_rear_right_.speed_sp > 0.0) {
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	f04f 0300 	mov.w	r3, #0
 80063be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063c2:	f7fa fbc9 	bl	8000b58 <__aeabi_dcmpgt>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d019      	beq.n	8006400 <_Z22motor_rear_right_drived+0xd0>
 80063cc:	4b38      	ldr	r3, [pc, #224]	; (80064b0 <_Z22motor_rear_right_drived+0x180>)
 80063ce:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80063d2:	f04f 0200 	mov.w	r2, #0
 80063d6:	f04f 0300 	mov.w	r3, #0
 80063da:	f7fa fbbd 	bl	8000b58 <__aeabi_dcmpgt>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00d      	beq.n	8006400 <_Z22motor_rear_right_drived+0xd0>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80063e4:	2201      	movs	r2, #1
 80063e6:	2108      	movs	r1, #8
 80063e8:	4834      	ldr	r0, [pc, #208]	; (80064bc <_Z22motor_rear_right_drived+0x18c>)
 80063ea:	f003 fbc1 	bl	8009b70 <HAL_GPIO_WritePin>
		TIM2->CCR4 = (int) speed_command;
 80063ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063f2:	f7fa fbd1 	bl	8000b98 <__aeabi_d2iz>
 80063f6:	4602      	mov	r2, r0
 80063f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063fc:	641a      	str	r2, [r3, #64]	; 0x40
 80063fe:	e04f      	b.n	80064a0 <_Z22motor_rear_right_drived+0x170>
	} else if (speed_command < 0.0 && motor_rear_right_.speed_sp < 0.0) {
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	f04f 0300 	mov.w	r3, #0
 8006408:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800640c:	f7fa fb86 	bl	8000b1c <__aeabi_dcmplt>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d01f      	beq.n	8006456 <_Z22motor_rear_right_drived+0x126>
 8006416:	4b26      	ldr	r3, [pc, #152]	; (80064b0 <_Z22motor_rear_right_drived+0x180>)
 8006418:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	f7fa fb7a 	bl	8000b1c <__aeabi_dcmplt>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d013      	beq.n	8006456 <_Z22motor_rear_right_drived+0x126>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800642e:	2200      	movs	r2, #0
 8006430:	2108      	movs	r1, #8
 8006432:	4822      	ldr	r0, [pc, #136]	; (80064bc <_Z22motor_rear_right_drived+0x18c>)
 8006434:	f003 fb9c 	bl	8009b70 <HAL_GPIO_WritePin>
		speed_command *= -1.0;
 8006438:	68bc      	ldr	r4, [r7, #8]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006440:	e9c7 4502 	strd	r4, r5, [r7, #8]
		TIM2->CCR4 = (int) speed_command;
 8006444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006448:	f7fa fba6 	bl	8000b98 <__aeabi_d2iz>
 800644c:	4602      	mov	r2, r0
 800644e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006452:	641a      	str	r2, [r3, #64]	; 0x40
 8006454:	e024      	b.n	80064a0 <_Z22motor_rear_right_drived+0x170>
	} else if (speed_command == 0) {
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	f04f 0300 	mov.w	r3, #0
 800645e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006462:	f7fa fb51 	bl	8000b08 <__aeabi_dcmpeq>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00c      	beq.n	8006486 <_Z22motor_rear_right_drived+0x156>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800646c:	2201      	movs	r2, #1
 800646e:	2108      	movs	r1, #8
 8006470:	4812      	ldr	r0, [pc, #72]	; (80064bc <_Z22motor_rear_right_drived+0x18c>)
 8006472:	f003 fb7d 	bl	8009b70 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_right_);
 8006476:	480f      	ldr	r0, [pc, #60]	; (80064b4 <_Z22motor_rear_right_drived+0x184>)
 8006478:	f001 f9f8 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR4 = 0;
 800647c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006480:	2200      	movs	r2, #0
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
		resetPIDData(&pid_data_rear_right_);
		TIM2->CCR4 = 0;
	}
}
 8006484:	e00c      	b.n	80064a0 <_Z22motor_rear_right_drived+0x170>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8006486:	2201      	movs	r2, #1
 8006488:	2108      	movs	r1, #8
 800648a:	480c      	ldr	r0, [pc, #48]	; (80064bc <_Z22motor_rear_right_drived+0x18c>)
 800648c:	f003 fb70 	bl	8009b70 <HAL_GPIO_WritePin>
		resetPIDData(&pid_data_rear_right_);
 8006490:	4808      	ldr	r0, [pc, #32]	; (80064b4 <_Z22motor_rear_right_drived+0x184>)
 8006492:	f001 f9eb 	bl	800786c <_Z12resetPIDDataP16PID_Data_Typedef>
		TIM2->CCR4 = 0;
 8006496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800649a:	2200      	movs	r2, #0
 800649c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800649e:	e7ff      	b.n	80064a0 <_Z22motor_rear_right_drived+0x170>
 80064a0:	bf00      	nop
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bdb0      	pop	{r4, r5, r7, pc}
 80064a8:	00000000 	.word	0x00000000
 80064ac:	c08f4000 	.word	0xc08f4000
 80064b0:	20000668 	.word	0x20000668
 80064b4:	20000728 	.word	0x20000728
 80064b8:	408f4000 	.word	0x408f4000
 80064bc:	40020800 	.word	0x40020800

080064c0 <_Z14motor_initDataP24Motor_Speed_Data_Typedef>:

void motor_initData(Motor_Speed_Data_Typedef *_motor) {
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
	_motor->delta_encoder = 0;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	801a      	strh	r2, [r3, #0]
	_motor->pps = 0.0;
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_motor->rpm = 0.0;
 80064dc:	6879      	ldr	r1, [r7, #4]
 80064de:	f04f 0200 	mov.w	r2, #0
 80064e2:	f04f 0300 	mov.w	r3, #0
 80064e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	_motor->speed_command = 0.0;
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	f04f 0200 	mov.w	r2, #0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	_motor->speed_pv = 0.0;
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	f04f 0300 	mov.w	r3, #0
 8006502:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_motor->speed_sp = 0.0;
 8006506:	6879      	ldr	r1, [r7, #4]
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <_Z20commandResetCallbackRKN8std_msgs5EmptyE>:

/* ROS */
void commandResetCallback(const std_msgs::Empty &msg) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b090      	sub	sp, #64	; 0x40
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	char log_msg[50];
	(void) (msg);

	sprintf(log_msg, "Start Calibration of MPU6050");
 8006528:	f107 030c 	add.w	r3, r7, #12
 800652c:	4918      	ldr	r1, [pc, #96]	; (8006590 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x70>)
 800652e:	4618      	mov	r0, r3
 8006530:	f008 ff3c 	bl	800f3ac <siprintf>
	nh_.loginfo(log_msg);
 8006534:	f107 030c 	add.w	r3, r7, #12
 8006538:	4619      	mov	r1, r3
 800653a:	4816      	ldr	r0, [pc, #88]	; (8006594 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x74>)
 800653c:	f000 fd0a 	bl	8006f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8006540:	2201      	movs	r2, #1
 8006542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006546:	4814      	ldr	r0, [pc, #80]	; (8006598 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x78>)
 8006548:	f003 fb12 	bl	8009b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800654c:	2201      	movs	r2, #1
 800654e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006552:	4811      	ldr	r0, [pc, #68]	; (8006598 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x78>)
 8006554:	f003 fb0c 	bl	8009b70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8006558:	2200      	movs	r2, #0
 800655a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800655e:	480e      	ldr	r0, [pc, #56]	; (8006598 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x78>)
 8006560:	f003 fb06 	bl	8009b70 <HAL_GPIO_WritePin>

	mpu.calcOffsets();
 8006564:	2201      	movs	r2, #1
 8006566:	2101      	movs	r1, #1
 8006568:	480c      	ldr	r0, [pc, #48]	; (800659c <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x7c>)
 800656a:	f001 fbd9 	bl	8007d20 <_ZN7MPU925011calcOffsetsEbb>

	sprintf(log_msg, "Calibration End");
 800656e:	f107 030c 	add.w	r3, r7, #12
 8006572:	490b      	ldr	r1, [pc, #44]	; (80065a0 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x80>)
 8006574:	4618      	mov	r0, r3
 8006576:	f008 ff19 	bl	800f3ac <siprintf>
	nh_.loginfo(log_msg);
 800657a:	f107 030c 	add.w	r3, r7, #12
 800657e:	4619      	mov	r1, r3
 8006580:	4804      	ldr	r0, [pc, #16]	; (8006594 <_Z20commandResetCallbackRKN8std_msgs5EmptyE+0x74>)
 8006582:	f000 fce7 	bl	8006f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>
}
 8006586:	bf00      	nop
 8006588:	3740      	adds	r7, #64	; 0x40
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	08012e84 	.word	0x08012e84
 8006594:	20000758 	.word	0x20000758
 8006598:	40020400 	.word	0x40020400
 800659c:	20000518 	.word	0x20000518
 80065a0:	08012ea4 	.word	0x08012ea4
 80065a4:	00000000 	.word	0x00000000

080065a8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE>:

void commandVelocityCallback(const geometry_msgs::Twist &msg) {
 80065a8:	b5b0      	push	{r4, r5, r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	60f8      	str	r0, [r7, #12]
	last_time_cmd_vel_ = nh_.now();
 80065b0:	4c9f      	ldr	r4, [pc, #636]	; (8006830 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x288>)
 80065b2:	463b      	mov	r3, r7
 80065b4:	499f      	ldr	r1, [pc, #636]	; (8006834 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x28c>)
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 faa2 	bl	8006b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>
 80065bc:	4622      	mov	r2, r4
 80065be:	463b      	mov	r3, r7
 80065c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80065c4:	e882 0003 	stmia.w	r2, {r0, r1}
	goal_linear_x_velocity_ = msg.linear.x;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80065ce:	499a      	ldr	r1, [pc, #616]	; (8006838 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x290>)
 80065d0:	e9c1 2300 	strd	r2, r3, [r1]
	goal_linear_y_velocity_ = msg.linear.y;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80065da:	4998      	ldr	r1, [pc, #608]	; (800683c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x294>)
 80065dc:	e9c1 2300 	strd	r2, r3, [r1]
	goal_angular_velocity_ = msg.angular.z;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80065e6:	4996      	ldr	r1, [pc, #600]	; (8006840 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x298>)
 80065e8:	e9c1 2300 	strd	r2, r3, [r1]

	wheel_speed_cmd_[FRONT_LEFT] = goal_linear_x_velocity_ * cos(DEG2RAD(45.0))
 80065ec:	4b92      	ldr	r3, [pc, #584]	; (8006838 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x290>)
 80065ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065f2:	a37d      	add	r3, pc, #500	; (adr r3, 80067e8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x240>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	f7fa f81e 	bl	8000638 <__aeabi_dmul>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4614      	mov	r4, r2
 8006602:	461d      	mov	r5, r3
			+ goal_linear_y_velocity_ * sin(DEG2RAD(45.0)) + goal_angular_velocity_ * (LENGHT + WIDTH);
 8006604:	4b8d      	ldr	r3, [pc, #564]	; (800683c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x294>)
 8006606:	e9d3 0100 	ldrd	r0, r1, [r3]
 800660a:	a379      	add	r3, pc, #484	; (adr r3, 80067f0 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x248>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f7fa f812 	bl	8000638 <__aeabi_dmul>
 8006614:	4602      	mov	r2, r0
 8006616:	460b      	mov	r3, r1
 8006618:	4620      	mov	r0, r4
 800661a:	4629      	mov	r1, r5
 800661c:	f7f9 fe56 	bl	80002cc <__adddf3>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4614      	mov	r4, r2
 8006626:	461d      	mov	r5, r3
 8006628:	4b85      	ldr	r3, [pc, #532]	; (8006840 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x298>)
 800662a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	4b84      	ldr	r3, [pc, #528]	; (8006844 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x29c>)
 8006634:	f7fa f800 	bl	8000638 <__aeabi_dmul>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4620      	mov	r0, r4
 800663e:	4629      	mov	r1, r5
 8006640:	f7f9 fe44 	bl	80002cc <__adddf3>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
	wheel_speed_cmd_[FRONT_LEFT] = goal_linear_x_velocity_ * cos(DEG2RAD(45.0))
 8006648:	497f      	ldr	r1, [pc, #508]	; (8006848 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a0>)
 800664a:	e9c1 2300 	strd	r2, r3, [r1]
	wheel_speed_cmd_[FRONT_RIGHT] = goal_linear_x_velocity_ * cos(DEG2RAD(135.0))
 800664e:	4b7a      	ldr	r3, [pc, #488]	; (8006838 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x290>)
 8006650:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006654:	a368      	add	r3, pc, #416	; (adr r3, 80067f8 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x250>)
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f7f9 ffed 	bl	8000638 <__aeabi_dmul>
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	4614      	mov	r4, r2
 8006664:	461d      	mov	r5, r3
			+ goal_linear_y_velocity_ * sin(DEG2RAD(135.0)) + goal_angular_velocity_ * (LENGHT + WIDTH);
 8006666:	4b75      	ldr	r3, [pc, #468]	; (800683c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x294>)
 8006668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800666c:	a364      	add	r3, pc, #400	; (adr r3, 8006800 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x258>)
 800666e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006672:	f7f9 ffe1 	bl	8000638 <__aeabi_dmul>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
 800667a:	4620      	mov	r0, r4
 800667c:	4629      	mov	r1, r5
 800667e:	f7f9 fe25 	bl	80002cc <__adddf3>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4614      	mov	r4, r2
 8006688:	461d      	mov	r5, r3
 800668a:	4b6d      	ldr	r3, [pc, #436]	; (8006840 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x298>)
 800668c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	4b6b      	ldr	r3, [pc, #428]	; (8006844 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x29c>)
 8006696:	f7f9 ffcf 	bl	8000638 <__aeabi_dmul>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4620      	mov	r0, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	f7f9 fe13 	bl	80002cc <__adddf3>
 80066a6:	4602      	mov	r2, r0
 80066a8:	460b      	mov	r3, r1
	wheel_speed_cmd_[FRONT_RIGHT] = goal_linear_x_velocity_ * cos(DEG2RAD(135.0))
 80066aa:	4967      	ldr	r1, [pc, #412]	; (8006848 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a0>)
 80066ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	wheel_speed_cmd_[REAR_LEFT] = goal_linear_x_velocity_ * cos(DEG2RAD(315.0))
 80066b0:	4b61      	ldr	r3, [pc, #388]	; (8006838 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x290>)
 80066b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066b6:	a354      	add	r3, pc, #336	; (adr r3, 8006808 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x260>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f7f9 ffbc 	bl	8000638 <__aeabi_dmul>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	461d      	mov	r5, r3
			+ goal_linear_y_velocity_ * sin(DEG2RAD(315.0)) + goal_angular_velocity_ * (LENGHT + WIDTH);
 80066c8:	4b5c      	ldr	r3, [pc, #368]	; (800683c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x294>)
 80066ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ce:	a350      	add	r3, pc, #320	; (adr r3, 8006810 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x268>)
 80066d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d4:	f7f9 ffb0 	bl	8000638 <__aeabi_dmul>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4620      	mov	r0, r4
 80066de:	4629      	mov	r1, r5
 80066e0:	f7f9 fdf4 	bl	80002cc <__adddf3>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
 80066e8:	4614      	mov	r4, r2
 80066ea:	461d      	mov	r5, r3
 80066ec:	4b54      	ldr	r3, [pc, #336]	; (8006840 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x298>)
 80066ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	4b53      	ldr	r3, [pc, #332]	; (8006844 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x29c>)
 80066f8:	f7f9 ff9e 	bl	8000638 <__aeabi_dmul>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4620      	mov	r0, r4
 8006702:	4629      	mov	r1, r5
 8006704:	f7f9 fde2 	bl	80002cc <__adddf3>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
	wheel_speed_cmd_[REAR_LEFT] = goal_linear_x_velocity_ * cos(DEG2RAD(315.0))
 800670c:	494e      	ldr	r1, [pc, #312]	; (8006848 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a0>)
 800670e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	wheel_speed_cmd_[REAR_RIGHT] = goal_linear_x_velocity_ * cos(DEG2RAD(225.0))
 8006712:	4b49      	ldr	r3, [pc, #292]	; (8006838 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x290>)
 8006714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006718:	a33f      	add	r3, pc, #252	; (adr r3, 8006818 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x270>)
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f7f9 ff8b 	bl	8000638 <__aeabi_dmul>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4614      	mov	r4, r2
 8006728:	461d      	mov	r5, r3
			+ goal_linear_y_velocity_ * sin(DEG2RAD(225.0)) + goal_angular_velocity_ * (LENGHT + WIDTH);
 800672a:	4b44      	ldr	r3, [pc, #272]	; (800683c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x294>)
 800672c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006730:	a33b      	add	r3, pc, #236	; (adr r3, 8006820 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x278>)
 8006732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006736:	f7f9 ff7f 	bl	8000638 <__aeabi_dmul>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4620      	mov	r0, r4
 8006740:	4629      	mov	r1, r5
 8006742:	f7f9 fdc3 	bl	80002cc <__adddf3>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4614      	mov	r4, r2
 800674c:	461d      	mov	r5, r3
 800674e:	4b3c      	ldr	r3, [pc, #240]	; (8006840 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x298>)
 8006750:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	4b3a      	ldr	r3, [pc, #232]	; (8006844 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x29c>)
 800675a:	f7f9 ff6d 	bl	8000638 <__aeabi_dmul>
 800675e:	4602      	mov	r2, r0
 8006760:	460b      	mov	r3, r1
 8006762:	4620      	mov	r0, r4
 8006764:	4629      	mov	r1, r5
 8006766:	f7f9 fdb1 	bl	80002cc <__adddf3>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
	wheel_speed_cmd_[REAR_RIGHT] = goal_linear_x_velocity_ * cos(DEG2RAD(225.0))
 800676e:	4936      	ldr	r1, [pc, #216]	; (8006848 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a0>)
 8006770:	e9c1 2306 	strd	r2, r3, [r1, #24]

	set_speed_motor_[FRONT_LEFT] = MPS2RPM(wheel_speed_cmd_[FRONT_LEFT]);
 8006774:	4b34      	ldr	r3, [pc, #208]	; (8006848 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a0>)
 8006776:	e9d3 0100 	ldrd	r0, r1, [r3]
 800677a:	a32b      	add	r3, pc, #172	; (adr r3, 8006828 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x280>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f7f9 ff5a 	bl	8000638 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4930      	ldr	r1, [pc, #192]	; (800684c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a4>)
 800678a:	e9c1 2300 	strd	r2, r3, [r1]
	set_speed_motor_[FRONT_RIGHT] = MPS2RPM(wheel_speed_cmd_[FRONT_RIGHT]);
 800678e:	4b2e      	ldr	r3, [pc, #184]	; (8006848 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a0>)
 8006790:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006794:	a324      	add	r3, pc, #144	; (adr r3, 8006828 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x280>)
 8006796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679a:	f7f9 ff4d 	bl	8000638 <__aeabi_dmul>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	492a      	ldr	r1, [pc, #168]	; (800684c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a4>)
 80067a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	set_speed_motor_[REAR_LEFT] = MPS2RPM(wheel_speed_cmd_[REAR_LEFT]);
 80067a8:	4b27      	ldr	r3, [pc, #156]	; (8006848 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a0>)
 80067aa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80067ae:	a31e      	add	r3, pc, #120	; (adr r3, 8006828 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x280>)
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f7f9 ff40 	bl	8000638 <__aeabi_dmul>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	4923      	ldr	r1, [pc, #140]	; (800684c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a4>)
 80067be:	e9c1 2304 	strd	r2, r3, [r1, #16]
	set_speed_motor_[REAR_RIGHT] = MPS2RPM(wheel_speed_cmd_[REAR_RIGHT]);
 80067c2:	4b21      	ldr	r3, [pc, #132]	; (8006848 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a0>)
 80067c4:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80067c8:	a317      	add	r3, pc, #92	; (adr r3, 8006828 <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x280>)
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f7f9 ff33 	bl	8000638 <__aeabi_dmul>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	491d      	ldr	r1, [pc, #116]	; (800684c <_Z23commandVelocityCallbackRKN13geometry_msgs5TwistE+0x2a4>)
 80067d8:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bdb0      	pop	{r4, r5, r7, pc}
 80067e4:	f3af 8000 	nop.w
 80067e8:	66d67384 	.word	0x66d67384
 80067ec:	3fe6a09e 	.word	0x3fe6a09e
 80067f0:	66280416 	.word	0x66280416
 80067f4:	3fe6a09e 	.word	0x3fe6a09e
 80067f8:	657994a7 	.word	0x657994a7
 80067fc:	bfe6a09e 	.word	0xbfe6a09e
 8006800:	6784e2f2 	.word	0x6784e2f2
 8006804:	3fe6a09e 	.word	0x3fe6a09e
 8006808:	641cb5cb 	.word	0x641cb5cb
 800680c:	3fe6a09e 	.word	0x3fe6a09e
 8006810:	68e1c1ce 	.word	0x68e1c1ce
 8006814:	bfe6a09e 	.word	0xbfe6a09e
 8006818:	68335260 	.word	0x68335260
 800681c:	bfe6a09e 	.word	0xbfe6a09e
 8006820:	64cb2539 	.word	0x64cb2539
 8006824:	bfe6a09e 	.word	0xbfe6a09e
 8006828:	607bddf5 	.word	0x607bddf5
 800682c:	40718dc9 	.word	0x40718dc9
 8006830:	20001094 	.word	0x20001094
 8006834:	20000758 	.word	0x20000758
 8006838:	20001208 	.word	0x20001208
 800683c:	20001210 	.word	0x20001210
 8006840:	20001218 	.word	0x20001218
 8006844:	40080000 	.word	0x40080000
 8006848:	20001220 	.word	0x20001220
 800684c:	20001240 	.word	0x20001240

08006850 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
	nh_.getHardware()->flush();
 8006858:	4805      	ldr	r0, [pc, #20]	; (8006870 <HAL_UART_TxCpltCallback+0x20>)
 800685a:	f000 fb89 	bl	8006f70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800685e:	4603      	mov	r3, r0
 8006860:	4618      	mov	r0, r3
 8006862:	f7fb fbdf 	bl	8002024 <_ZN13STM32Hardware5flushEv>
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000758 	.word	0x20000758

08006874 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
	nh_.getHardware()->reset_rbuf();
 800687c:	4805      	ldr	r0, [pc, #20]	; (8006894 <HAL_UART_RxCpltCallback+0x20>)
 800687e:	f000 fb77 	bl	8006f70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8006882:	4603      	mov	r3, r0
 8006884:	4618      	mov	r0, r3
 8006886:	f7fb fb8e 	bl	8001fa6 <_ZN13STM32Hardware10reset_rbufEv>
}
 800688a:	bf00      	nop
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000758 	.word	0x20000758

08006898 <_Z9ROS_setupv>:

void ROS_setup(void) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
	nh_.initNode();
 800689e:	4840      	ldr	r0, [pc, #256]	; (80069a0 <_Z9ROS_setupv+0x108>)
 80068a0:	f000 fb72 	bl	8006f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh_.advertise(imu_pub_);
 80068a4:	493f      	ldr	r1, [pc, #252]	; (80069a4 <_Z9ROS_setupv+0x10c>)
 80068a6:	483e      	ldr	r0, [pc, #248]	; (80069a0 <_Z9ROS_setupv+0x108>)
 80068a8:	f000 fb8b 	bl	8006fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh_.advertise(motor_pub_);
 80068ac:	493e      	ldr	r1, [pc, #248]	; (80069a8 <_Z9ROS_setupv+0x110>)
 80068ae:	483c      	ldr	r0, [pc, #240]	; (80069a0 <_Z9ROS_setupv+0x108>)
 80068b0:	f000 fb87 	bl	8006fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh_.subscribe(cmd_vel_sub_);
 80068b4:	493d      	ldr	r1, [pc, #244]	; (80069ac <_Z9ROS_setupv+0x114>)
 80068b6:	483a      	ldr	r0, [pc, #232]	; (80069a0 <_Z9ROS_setupv+0x108>)
 80068b8:	f000 fbb3 	bl	8007022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh_.subscribe(reset_sub_);
 80068bc:	493c      	ldr	r1, [pc, #240]	; (80069b0 <_Z9ROS_setupv+0x118>)
 80068be:	4838      	ldr	r0, [pc, #224]	; (80069a0 <_Z9ROS_setupv+0x108>)
 80068c0:	f000 fbaf 	bl	8007022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

	/* ired_msgs/IMU */
	imu_.roll = 0.0;
 80068c4:	493b      	ldr	r1, [pc, #236]	; (80069b4 <_Z9ROS_setupv+0x11c>)
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
	imu_.pitch = 0.0;
 80068d2:	4938      	ldr	r1, [pc, #224]	; (80069b4 <_Z9ROS_setupv+0x11c>)
 80068d4:	f04f 0200 	mov.w	r2, #0
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	imu_.yaw = 0.0;
 80068e0:	4934      	ldr	r1, [pc, #208]	; (80069b4 <_Z9ROS_setupv+0x11c>)
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	f04f 0300 	mov.w	r3, #0
 80068ea:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/* ired_msgs/Motor */
	for (int i = 0; i < 4; i++) {
 80068ee:	2300      	movs	r3, #0
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	e018      	b.n	8006926 <_Z9ROS_setupv+0x8e>
		motor_.speed_fb[i] = 0.0;
 80068f4:	4a30      	ldr	r2, [pc, #192]	; (80069b8 <_Z9ROS_setupv+0x120>)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3305      	adds	r3, #5
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	18d1      	adds	r1, r2, r3
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	e9c1 2300 	strd	r2, r3, [r1]
		motor_.speed_sp[i] = 0.0;
 800690a:	4a2b      	ldr	r2, [pc, #172]	; (80069b8 <_Z9ROS_setupv+0x120>)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	3301      	adds	r3, #1
 8006910:	00db      	lsls	r3, r3, #3
 8006912:	18d1      	adds	r1, r2, r3
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 4; i++) {
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	3301      	adds	r3, #1
 8006924:	607b      	str	r3, [r7, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2b03      	cmp	r3, #3
 800692a:	dde3      	ble.n	80068f4 <_Z9ROS_setupv+0x5c>
	}
	for (int i = 0; i < 3; i++) {
 800692c:	2300      	movs	r3, #0
 800692e:	603b      	str	r3, [r7, #0]
 8006930:	e02e      	b.n	8006990 <_Z9ROS_setupv+0xf8>
		motor_.pid_motor_front_left[i] = 0.0;
 8006932:	4a21      	ldr	r2, [pc, #132]	; (80069b8 <_Z9ROS_setupv+0x120>)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	3309      	adds	r3, #9
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	18d1      	adds	r1, r2, r3
 800693c:	f04f 0200 	mov.w	r2, #0
 8006940:	f04f 0300 	mov.w	r3, #0
 8006944:	e9c1 2300 	strd	r2, r3, [r1]
		motor_.pid_motor_front_right[i] = 0.0;
 8006948:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <_Z9ROS_setupv+0x120>)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	00db      	lsls	r3, r3, #3
 8006950:	18d1      	adds	r1, r2, r3
 8006952:	f04f 0200 	mov.w	r2, #0
 8006956:	f04f 0300 	mov.w	r3, #0
 800695a:	e9c1 2300 	strd	r2, r3, [r1]
		motor_.pid_motor_rear_left[i] = 0.0;
 800695e:	4a16      	ldr	r2, [pc, #88]	; (80069b8 <_Z9ROS_setupv+0x120>)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	330f      	adds	r3, #15
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	18d1      	adds	r1, r2, r3
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	e9c1 2300 	strd	r2, r3, [r1]
		motor_.pid_motor_rear_right[i] = 0.0;
 8006974:	4a10      	ldr	r2, [pc, #64]	; (80069b8 <_Z9ROS_setupv+0x120>)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	3312      	adds	r3, #18
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	18d1      	adds	r1, r2, r3
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 3; i++) {
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	3301      	adds	r3, #1
 800698e:	603b      	str	r3, [r7, #0]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	2b02      	cmp	r3, #2
 8006994:	ddcd      	ble.n	8006932 <_Z9ROS_setupv+0x9a>
	}
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000758 	.word	0x20000758
 80069a4:	20001168 	.word	0x20001168
 80069a8:	2000117c 	.word	0x2000117c
 80069ac:	20001190 	.word	0x20001190
 80069b0:	200011f0 	.word	0x200011f0
 80069b4:	200010a0 	.word	0x200010a0
 80069b8:	200010c0 	.word	0x200010c0

080069bc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80069c0:	b672      	cpsid	i
}
 80069c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80069c4:	e7fe      	b.n	80069c4 <Error_Handler+0x8>

080069c6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	e00c      	b.n	80069f0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	fa22 f103 	lsr.w	r1, r2, r3
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	b2ca      	uxtb	r2, r1
 80069e8:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d9ef      	bls.n	80069d6 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8006a04:	b480      	push	{r7}
 8006a06:	b085      	sub	sp, #20
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006a14:	2300      	movs	r3, #0
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	e010      	b.n	8006a3c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6839      	ldr	r1, [r7, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	440a      	add	r2, r1
 8006a24:	7812      	ldrb	r2, [r2, #0]
 8006a26:	4611      	mov	r1, r2
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	00d2      	lsls	r2, r2, #3
 8006a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d9eb      	bls.n	8006a1a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8006a42:	bf00      	nop
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	4a04      	ldr	r2, [pc, #16]	; (8006a6c <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4618      	mov	r0, r3
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	08013010 	.word	0x08013010

08006a70 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7ff ffe5 	bl	8006a50 <_ZN3ros11Subscriber_C1Ev>
 8006a86:	4a0b      	ldr	r2, [pc, #44]	; (8006ab4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3310      	adds	r3, #16
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fc f88d 	bl	8002bb0 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	609a      	str	r2, [r3, #8]
  };
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	08012f6c 	.word	0x08012f6c

08006ab8 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff ffc1 	bl	8006a50 <_ZN3ros11Subscriber_C1Ev>
 8006ace:	4a0b      	ldr	r2, [pc, #44]	; (8006afc <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	330c      	adds	r3, #12
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe f907 	bl	8004cec <_ZN8std_msgs5EmptyC1Ev>
    cb_(cb),
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	611a      	str	r2, [r3, #16]
    endpoint_(endpoint)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	615a      	str	r2, [r3, #20]
    topic_ = topic_name;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	609a      	str	r2, [r3, #8]
  };
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	08012f54 	.word	0x08012f54

08006b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv>:

    this->setNow(t.data);
    last_sync_receive_time = hardware_.time();
  }

  Time now()
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  {
    uint32_t ms = hardware_.time();
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	3304      	adds	r3, #4
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fb fb2d 	bl	800216e <_ZN13STM32Hardware4timeEv>
 8006b14:	60f8      	str	r0, [r7, #12]
    Time current_time;
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fa fb82 	bl	8001220 <_ZN3ros4TimeC1Ev>
    current_time.sec = ms / 1000 + sec_offset;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4a14      	ldr	r2, [pc, #80]	; (8006b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8006b20:	fba2 2303 	umull	r2, r3, r2, r3
 8006b24:	099a      	lsrs	r2, r3, #6
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8006b2c:	441a      	add	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	601a      	str	r2, [r3, #0]
    current_time.nsec = (ms % 1000) * 1000000UL + nsec_offset;
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	4b0e      	ldr	r3, [pc, #56]	; (8006b70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x70>)
 8006b36:	fba3 1302 	umull	r1, r3, r3, r2
 8006b3a:	099b      	lsrs	r3, r3, #6
 8006b3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b40:	fb01 f303 	mul.w	r3, r1, r3
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	4a0b      	ldr	r2, [pc, #44]	; (8006b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3nowEv+0x74>)
 8006b48:	fb03 f202 	mul.w	r2, r3, r2
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8006b52:	441a      	add	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	605a      	str	r2, [r3, #4]
    normalizeSecNSec(current_time.sec, current_time.nsec);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7fa faaa 	bl	80010b8 <_ZN3ros16normalizeSecNSecERmS0_>
    return current_time;
 8006b64:	bf00      	nop
  }
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	10624dd3 	.word	0x10624dd3
 8006b74:	000f4240 	.word	0x000f4240

08006b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	3304      	adds	r3, #4
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7fb faf2 	bl	800216e <_ZN13STM32Hardware4timeEv>
 8006b8a:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d903      	bls.n	8006ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d009      	beq.n	8006bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d903      	bls.n	8006bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bool tx_stop_requested = false;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d014      	beq.n	8006c00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	3304      	adds	r3, #4
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fb fac7 	bl	800216e <_ZN13STM32Hardware4timeEv>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad2      	subs	r2, r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8006bec:	429a      	cmp	r2, r3
 8006bee:	bf8c      	ite	hi
 8006bf0:	2301      	movhi	r3, #1
 8006bf2:	2300      	movls	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x88>
          return SPIN_TIMEOUT;
 8006bfa:	f06f 0301 	mvn.w	r3, #1
 8006bfe:	e1a5      	b.n	8006f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      int data = hardware_.read();
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fb f9df 	bl	8001fc8 <_ZN13STM32Hardware4readEv>
 8006c0a:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f2c0 8178 	blt.w	8006f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>
      checksum_ += data;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	441a      	add	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006c2a:	2b07      	cmp	r3, #7
 8006c2c:	d11e      	bne.n	8006c6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xf4>
        message_in[index_++] = data;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8006c34:	1c59      	adds	r1, r3, #1
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	b2d1      	uxtb	r1, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	460a      	mov	r2, r1
 8006c46:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8006c50:	1e5a      	subs	r2, r3, #1
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1b4      	bne.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2208      	movs	r2, #8
 8006c66:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006c6a:	e7af      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_FIRST_FF)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d128      	bne.n	8006cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x150>
        if (data == 0xff)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2bff      	cmp	r3, #255	; 0xff
 8006c7a:	d10d      	bne.n	8006c98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x120>
          mode_++;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f103 0214 	add.w	r2, r3, #20
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8006c96:	e799      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	3304      	adds	r3, #4
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fb fa66 	bl	800216e <_ZN13STM32Hardware4timeEv>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cac:	4293      	cmp	r3, r2
 8006cae:	bf8c      	ite	hi
 8006cb0:	2301      	movhi	r3, #1
 8006cb2:	2300      	movls	r3, #0
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d088      	beq.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          configured_ = false;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8006cc2:	f06f 0301 	mvn.w	r3, #1
 8006cc6:	e141      	b.n	8006f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
      else if (mode_ == MODE_PROTOCOL_VER)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d118      	bne.n	8006d04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x18c>
        if (data == PROTOCOL_VER)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2bfe      	cmp	r3, #254	; 0xfe
 8006cd6:	d107      	bne.n	8006ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x170>
          mode_++;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006ce6:	e771      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f47f af68 	bne.w	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f9bb 	bl	8007078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8006d02:	e763      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d113      	bne.n	8006d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1be>
        bytes_ = data;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8006d34:	e74a      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006d3c:	2b03      	cmp	r3, #3
 8006d3e:	d110      	bne.n	8006d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ea>
        bytes_ += data << 8;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	021b      	lsls	r3, r3, #8
 8006d4a:	441a      	add	r2, r3
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006d60:	e734      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d116      	bne.n	8006d9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x222>
        if ((checksum_ % 256) == 255)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8006d72:	425a      	negs	r2, r3
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	bf58      	it	pl
 8006d7a:	4253      	negpl	r3, r2
 8006d7c:	2bff      	cmp	r3, #255	; 0xff
 8006d7e:	d107      	bne.n	8006d90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x218>
          mode_++;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006d8e:	e71d      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006d98:	e718      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006da0:	2b05      	cmp	r3, #5
 8006da2:	d10f      	bne.n	8006dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24c>
        topic_ = data;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8006dc2:	e703      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006dca:	2b06      	cmp	r3, #6
 8006dcc:	d117      	bne.n	8006dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x286>
        topic_ += data << 8;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	021b      	lsls	r3, r3, #8
 8006dd8:	441a      	add	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2207      	movs	r2, #7
 8006de4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f47f aeec 	bne.w	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          mode_ = MODE_MSG_CHECKSUM;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2208      	movs	r2, #8
 8006df8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8006dfc:	e6e6      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	f47f aee1 	bne.w	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        mode_ = MODE_FIRST_FF;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8006e18:	425a      	negs	r2, r3
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	b2d2      	uxtb	r2, r2
 8006e1e:	bf58      	it	pl
 8006e20:	4253      	negpl	r3, r2
 8006e22:	2bff      	cmp	r3, #255	; 0xff
 8006e24:	f47f aed2 	bne.w	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d110      	bne.n	8006e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2dc>
            requestSyncTime();
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f920 	bl	8007078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f93b 	bl	80070b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8006e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e52:	e07b      	b.n	8006f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d4>
          else if (topic_ == TopicInfo::ID_TIME)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006e5a:	2b0a      	cmp	r3, #10
 8006e5c:	d109      	bne.n	8006e72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2fa>
            saw_time_msg = true;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa02 	bl	8007274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8006e70:	e6ac      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006e78:	2b06      	cmp	r3, #6
 8006e7a:	d10e      	bne.n	8006e9a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x322>
            req_param_resp.deserialize(message_in);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8006e88:	4619      	mov	r1, r3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	f7fa fe8d 	bl	8001baa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8006e98:	e698      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006ea0:	2b0b      	cmp	r3, #11
 8006ea2:	d106      	bne.n	8006eb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x33a>
            configured_ = false;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
            tx_stop_requested = true;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
 8006eb0:	e68c      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
            if (subscribers[topic_ - 100])
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006eb8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f43f ae80 	beq.w	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
              subscribers[topic_ - 100]->callback(message_in);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006ed2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006edc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8006ee6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f202 2222 	addw	r2, r2, #546	; 0x222
 8006ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8006efe:	4611      	mov	r1, r2
 8006f00:	4798      	blx	r3
    while (true)
 8006f02:	e663      	b.n	8006bcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x54>
        break;
 8006f04:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00f      	beq.n	8006f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8006f16:	693a      	ldr	r2, [r7, #16]
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d906      	bls.n	8006f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3b8>
      requestSyncTime();
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f8a8 	bl	8007078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8006f30:	7dbb      	ldrb	r3, [r7, #22]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c4>
 8006f36:	f06f 0303 	mvn.w	r3, #3
 8006f3a:	e006      	b.n	8006f4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d0>
 8006f42:	f06f 0302 	mvn.w	r3, #2
 8006f46:	e000      	b.n	8006f4a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3d2>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	bf00      	nop
  }
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7loginfoEPKc>:
public:
  void logdebug(const char* msg)
  {
    log(rosserial_msgs::Log::ROSDEBUG, msg);
  }
  void loginfo(const char * msg)
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::INFO, msg);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	2101      	movs	r1, #1
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9d2 	bl	800730c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8006f68:	bf00      	nop
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
  }
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  void initNode()
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
    hardware_.init();
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fa fffb 	bl	8001f90 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8006fc2:	b480      	push	{r7}
 8006fc4:	b085      	sub	sp, #20
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e01d      	b.n	800700e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
      if (publishers[i] == 0) // empty slot
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d111      	bne.n	8007008 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
        publishers[i] = &p;
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	60da      	str	r2, [r3, #12]
        return true;
 8007004:	2301      	movs	r3, #1
 8007006:	e006      	b.n	8007016 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	3301      	adds	r3, #1
 800700c:	60fb      	str	r3, [r7, #12]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b18      	cmp	r3, #24
 8007012:	ddde      	ble.n	8006fd2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
    return false;
 8007014:	2300      	movs	r3, #0
  }
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr

08007022 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
  bool subscribe(Subscriber_& s)
 8007022:	b480      	push	{r7}
 8007024:	b085      	sub	sp, #20
 8007026:	af00      	add	r7, sp, #0
 8007028:	6078      	str	r0, [r7, #4]
 800702a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e018      	b.n	8007064 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
      if (subscribers[i] == 0) // empty slot
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	f202 2222 	addw	r2, r2, #546	; 0x222
 800703a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d10d      	bne.n	800705e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
        subscribers[i] = &s;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	f202 2222 	addw	r2, r2, #546	; 0x222
 800704a:	6839      	ldr	r1, [r7, #0]
 800704c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	605a      	str	r2, [r3, #4]
        return true;
 800705a:	2301      	movs	r3, #1
 800705c:	e006      	b.n	800706c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b18      	cmp	r3, #24
 8007068:	dde3      	ble.n	8007032 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
    return false;
 800706a:	2300      	movs	r3, #0
  }
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8007080:	f107 030c 	add.w	r3, r7, #12
 8007084:	4618      	mov	r0, r3
 8007086:	f7fa f8ed 	bl	8001264 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f107 020c 	add.w	r2, r7, #12
 8007094:	210a      	movs	r1, #10
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	4798      	blx	r3
    rt_time = hardware_.time();
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	3304      	adds	r3, #4
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fb f865 	bl	800216e <_ZN13STM32Hardware4timeEv>
 80070a4:	4602      	mov	r2, r0
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80070ac:	bf00      	nop
 80070ae:	3718      	adds	r7, #24
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
  void negotiateTopics()
 80070b4:	b590      	push	{r4, r7, lr}
 80070b6:	b08b      	sub	sp, #44	; 0x2c
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
    rosserial_msgs::TopicInfo ti;
 80070bc:	f107 030c 	add.w	r3, r7, #12
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fa f9bf 	bl	8001444 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80070c6:	2300      	movs	r3, #0
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
 80070ca:	e062      	b.n	8007192 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
      if (publishers[i] != 0) // non-empty slot
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d056      	beq.n	800718c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
        ti.topic_id = publishers[i]->id_;
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070e6:	009b      	lsls	r3, r3, #2
 80070e8:	4413      	add	r3, r2
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	4413      	add	r3, r2
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	6859      	ldr	r1, [r3, #4]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4608      	mov	r0, r1
 800712c:	4798      	blx	r3
 800712e:	4603      	mov	r3, r0
 8007130:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	6859      	ldr	r1, [r3, #4]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	4413      	add	r3, r2
 800714e:	685b      	ldr	r3, [r3, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	330c      	adds	r3, #12
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4608      	mov	r0, r1
 800715a:	4798      	blx	r3
 800715c:	4603      	mov	r3, r0
 800715e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8007160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007164:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681c      	ldr	r4, [r3, #0]
 800716c:	687a      	ldr	r2, [r7, #4]
 800716e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007170:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4618      	mov	r0, r3
 800717c:	f7fa fecd 	bl	8001f1a <_ZN3ros9Publisher15getEndpointTypeEv>
 8007180:	4601      	mov	r1, r0
 8007182:	f107 030c 	add.w	r3, r7, #12
 8007186:	461a      	mov	r2, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	3301      	adds	r3, #1
 8007190:	627b      	str	r3, [r7, #36]	; 0x24
 8007192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007194:	2b18      	cmp	r3, #24
 8007196:	dd99      	ble.n	80070cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007198:	2300      	movs	r3, #0
 800719a:	627b      	str	r3, [r7, #36]	; 0x24
 800719c:	e05e      	b.n	800725c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
      if (subscribers[i] != 0) // non-empty slot
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80071a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d053      	beq.n	8007256 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
        ti.topic_id = subscribers[i]->id_;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071b2:	f202 2222 	addw	r2, r2, #546	; 0x222
 80071b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071c4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071d4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80071d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e0:	f202 2222 	addw	r2, r2, #546	; 0x222
 80071e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	3308      	adds	r3, #8
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4608      	mov	r0, r1
 80071f0:	4798      	blx	r3
 80071f2:	4603      	mov	r3, r0
 80071f4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fa:	f202 2222 	addw	r2, r2, #546	; 0x222
 80071fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007206:	f202 2222 	addw	r2, r2, #546	; 0x222
 800720a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	330c      	adds	r3, #12
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4608      	mov	r0, r1
 8007216:	4798      	blx	r3
 8007218:	4603      	mov	r3, r0
 800721a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800721c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007220:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681c      	ldr	r4, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800722c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8007230:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007238:	f202 2222 	addw	r2, r2, #546	; 0x222
 800723c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	3304      	adds	r3, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4608      	mov	r0, r1
 8007248:	4798      	blx	r3
 800724a:	4601      	mov	r1, r0
 800724c:	f107 030c 	add.w	r3, r7, #12
 8007250:	461a      	mov	r2, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	3301      	adds	r3, #1
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
 800725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725e:	2b18      	cmp	r3, #24
 8007260:	dd9d      	ble.n	800719e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
    configured_ = true;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 800726a:	bf00      	nop
 800726c:	372c      	adds	r7, #44	; 0x2c
 800726e:	46bd      	mov	sp, r7
 8007270:	bd90      	pop	{r4, r7, pc}
	...

08007274 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800727e:	f107 0308 	add.w	r3, r7, #8
 8007282:	4618      	mov	r0, r3
 8007284:	f7f9 ffee 	bl	8001264 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	3304      	adds	r3, #4
 800728c:	4618      	mov	r0, r3
 800728e:	f7fa ff6e 	bl	800216e <_ZN13STM32Hardware4timeEv>
 8007292:	4602      	mov	r2, r0
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 800729e:	f107 0308 	add.w	r3, r7, #8
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7fa f84d 	bl	8001344 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	4915      	ldr	r1, [pc, #84]	; (8007304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80072b0:	fba1 1303 	umull	r1, r3, r1, r3
 80072b4:	099b      	lsrs	r3, r3, #6
 80072b6:	4413      	add	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80072ba:	6939      	ldr	r1, [r7, #16]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	4b11      	ldr	r3, [pc, #68]	; (8007304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 80072c0:	fba3 0302 	umull	r0, r3, r3, r2
 80072c4:	099b      	lsrs	r3, r3, #6
 80072c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80072ca:	fb00 f303 	mul.w	r3, r0, r3
 80072ce:	1ad3      	subs	r3, r2, r3
 80072d0:	4a0d      	ldr	r2, [pc, #52]	; (8007308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80072d2:	fb02 f303 	mul.w	r3, r2, r3
 80072d6:	440b      	add	r3, r1
 80072d8:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80072da:	f107 0308 	add.w	r3, r7, #8
 80072de:	3304      	adds	r3, #4
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f8c2 	bl	800746c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	3304      	adds	r3, #4
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fa ff3e 	bl	800216e <_ZN13STM32Hardware4timeEv>
 80072f2:	4602      	mov	r2, r0
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 80072fa:	bf00      	nop
 80072fc:	3718      	adds	r7, #24
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	10624dd3 	.word	0x10624dd3
 8007308:	000f4240 	.word	0x000f4240

0800730c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	460b      	mov	r3, r1
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800731a:	f107 0314 	add.w	r3, r7, #20
 800731e:	4618      	mov	r0, r3
 8007320:	f7fa fa54 	bl	80017cc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8007324:	7afb      	ldrb	r3, [r7, #11]
 8007326:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f107 0214 	add.w	r2, r7, #20
 8007336:	2107      	movs	r1, #7
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	4798      	blx	r3
  }
 800733c:	bf00      	nop
 800733e:	3720      	adds	r7, #32
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:
  virtual int publish(int id, const Msg * msg) override
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
    if (id >= 100 && !configured_)
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	2b63      	cmp	r3, #99	; 0x63
 8007354:	dd09      	ble.n	800736a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800735c:	f083 0301 	eor.w	r3, r3, #1
 8007360:	b2db      	uxtb	r3, r3
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8007366:	2300      	movs	r3, #0
 8007368:	e079      	b.n	800745e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    int l = msg->serialize(message_out + 7);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8007376:	3207      	adds	r2, #7
 8007378:	4611      	mov	r1, r2
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
 800737e:	6178      	str	r0, [r7, #20]
    message_out[0] = 0xff;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	22ff      	movs	r2, #255	; 0xff
 8007384:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	22fe      	movs	r2, #254	; 0xfe
 800738c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	b2da      	uxtb	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	b29b      	uxth	r3, r3
 800739e:	0a1b      	lsrs	r3, r3, #8
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 80073b6:	4413      	add	r3, r2
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	43db      	mvns	r3, r3
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	b2da      	uxtb	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	b21b      	sxth	r3, r3
 80073d2:	121b      	asrs	r3, r3, #8
 80073d4:	b21b      	sxth	r3, r3
 80073d6:	b2da      	uxtb	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
    int chk = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80073e2:	2305      	movs	r3, #5
 80073e4:	61bb      	str	r3, [r7, #24]
 80073e6:	e00c      	b.n	8007402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	4413      	add	r3, r2
 80073ee:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	3301      	adds	r3, #1
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	3306      	adds	r3, #6
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	429a      	cmp	r2, r3
 800740a:	dded      	ble.n	80073e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	3307      	adds	r3, #7
 8007410:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	425a      	negs	r2, r3
 8007416:	b2db      	uxtb	r3, r3
 8007418:	b2d2      	uxtb	r2, r2
 800741a:	bf58      	it	pl
 800741c:	4253      	negpl	r3, r2
 800741e:	b2da      	uxtb	r2, r3
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	1c59      	adds	r1, r3, #1
 8007424:	6179      	str	r1, [r7, #20]
 8007426:	43d2      	mvns	r2, r2
 8007428:	b2d1      	uxtb	r1, r2
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	460a      	mov	r2, r1
 8007430:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    if (l <= OUTPUT_SIZE)
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743a:	dc0a      	bgt.n	8007452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
      hardware_.write(message_out, l);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	1d18      	adds	r0, r3, #4
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4619      	mov	r1, r3
 800744a:	f7fa fe49 	bl	80020e0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	e005      	b.n	800745e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
      logerror("Message from device dropped: message larger than buffer.");
 8007452:	4905      	ldr	r1, [pc, #20]	; (8007468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f849 	bl	80074ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800745a:	f04f 33ff 	mov.w	r3, #4294967295
  }
 800745e:	4618      	mov	r0, r3
 8007460:	3720      	adds	r7, #32
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	08012eb4 	.word	0x08012eb4

0800746c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3304      	adds	r3, #4
 800747a:	4618      	mov	r0, r3
 800747c:	f7fa fe77 	bl	800216e <_ZN13STM32Hardware4timeEv>
 8007480:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	4915      	ldr	r1, [pc, #84]	; (80074e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 800748a:	fba1 1303 	umull	r1, r3, r1, r3
 800748e:	099b      	lsrs	r3, r3, #6
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	1e5a      	subs	r2, r3, #1
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	6859      	ldr	r1, [r3, #4]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 80074a2:	fba3 0302 	umull	r0, r3, r3, r2
 80074a6:	099b      	lsrs	r3, r3, #6
 80074a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80074ac:	fb00 f303 	mul.w	r3, r0, r3
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	4a0c      	ldr	r2, [pc, #48]	; (80074e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 80074b4:	fb02 f303 	mul.w	r3, r2, r3
 80074b8:	1aca      	subs	r2, r1, r3
 80074ba:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 80074bc:	4413      	add	r3, r2
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 80074d0:	4619      	mov	r1, r3
 80074d2:	4610      	mov	r0, r2
 80074d4:	f7f9 fdf0 	bl	80010b8 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80074d8:	bf00      	nop
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	10624dd3 	.word	0x10624dd3
 80074e4:	000f4240 	.word	0x000f4240
 80074e8:	3b9aca00 	.word	0x3b9aca00

080074ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	2103      	movs	r1, #3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f7ff ff06 	bl	800730c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8007500:	bf00      	nop
 8007502:	3708      	adds	r7, #8
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d12c      	bne.n	8007572 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800751e:	4293      	cmp	r3, r2
 8007520:	d127      	bne.n	8007572 <_Z41__static_initialization_and_destruction_0ii+0x6a>
MPU9250 mpu(hi2c1);
 8007522:	4916      	ldr	r1, [pc, #88]	; (800757c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8007524:	4816      	ldr	r0, [pc, #88]	; (8007580 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8007526:	f000 fa2b 	bl	8007980 <_ZN7MPU9250C1ER17I2C_HandleTypeDef>
ros::NodeHandle nh_;
 800752a:	4816      	ldr	r0, [pc, #88]	; (8007584 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800752c:	f7fd fc38 	bl	8004da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Time last_time_cmd_vel_;
 8007530:	4815      	ldr	r0, [pc, #84]	; (8007588 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8007532:	f7f9 fe75 	bl	8001220 <_ZN3ros4TimeC1Ev>
ired_msgs::IMU imu_;
 8007536:	4815      	ldr	r0, [pc, #84]	; (800758c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007538:	f7fb fbbe 	bl	8002cb8 <_ZN9ired_msgs3IMUC1Ev>
ired_msgs::Motor motor_;
 800753c:	4814      	ldr	r0, [pc, #80]	; (8007590 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 800753e:	f7fc f8d1 	bl	80036e4 <_ZN9ired_msgs5MotorC1Ev>
ros::Publisher imu_pub_("/ired/rollpitchyaw", &imu_);
 8007542:	2300      	movs	r3, #0
 8007544:	4a11      	ldr	r2, [pc, #68]	; (800758c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8007546:	4913      	ldr	r1, [pc, #76]	; (8007594 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8007548:	4813      	ldr	r0, [pc, #76]	; (8007598 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800754a:	f7fa fcbb 	bl	8001ec4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher motor_pub_("/ired/motor/speed", &motor_);
 800754e:	2300      	movs	r3, #0
 8007550:	4a0f      	ldr	r2, [pc, #60]	; (8007590 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8007552:	4912      	ldr	r1, [pc, #72]	; (800759c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8007554:	4812      	ldr	r0, [pc, #72]	; (80075a0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8007556:	f7fa fcb5 	bl	8001ec4 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> cmd_vel_sub_("/cmd_vel", &commandVelocityCallback);
 800755a:	2301      	movs	r3, #1
 800755c:	4a11      	ldr	r2, [pc, #68]	; (80075a4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 800755e:	4912      	ldr	r1, [pc, #72]	; (80075a8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8007560:	4812      	ldr	r0, [pc, #72]	; (80075ac <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8007562:	f7ff fa85 	bl	8006a70 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<std_msgs::Empty> reset_sub_("/ired/reset", commandResetCallback);
 8007566:	2301      	movs	r3, #1
 8007568:	4a11      	ldr	r2, [pc, #68]	; (80075b0 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 800756a:	4912      	ldr	r1, [pc, #72]	; (80075b4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800756c:	4812      	ldr	r0, [pc, #72]	; (80075b8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800756e:	f7ff faa3 	bl	8006ab8 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>
}
 8007572:	bf00      	nop
 8007574:	3708      	adds	r7, #8
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000208 	.word	0x20000208
 8007580:	20000518 	.word	0x20000518
 8007584:	20000758 	.word	0x20000758
 8007588:	20001094 	.word	0x20001094
 800758c:	200010a0 	.word	0x200010a0
 8007590:	200010c0 	.word	0x200010c0
 8007594:	08012ef0 	.word	0x08012ef0
 8007598:	20001168 	.word	0x20001168
 800759c:	08012f04 	.word	0x08012f04
 80075a0:	2000117c 	.word	0x2000117c
 80075a4:	080065a9 	.word	0x080065a9
 80075a8:	08012f18 	.word	0x08012f18
 80075ac:	20001190 	.word	0x20001190
 80075b0:	08006521 	.word	0x08006521
 80075b4:	08012f24 	.word	0x08012f24
 80075b8:	200011f0 	.word	0x200011f0

080075bc <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	330c      	adds	r3, #12
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fd fbad 	bl	8004d2c <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	320c      	adds	r2, #12
 80075da:	4610      	mov	r0, r2
 80075dc:	4798      	blx	r3
  }
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	695b      	ldr	r3, [r3, #20]
  }
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	330c      	adds	r3, #12
 800760a:	4618      	mov	r0, r3
 800760c:	f7fd fb9c 	bl	8004d48 <_ZN8std_msgs5Empty7getTypeEv>
 8007610:	4603      	mov	r3, r0
  }
 8007612:	4618      	mov	r0, r3
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}

0800761a <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 800761a:	b580      	push	{r7, lr}
 800761c:	b082      	sub	sp, #8
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	330c      	adds	r3, #12
 8007626:	4618      	mov	r0, r3
 8007628:	f7fd fb9c 	bl	8004d64 <_ZN8std_msgs5Empty6getMD5Ev>
 800762c:	4603      	mov	r3, r0
  }
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	3310      	adds	r3, #16
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f7fb faf4 	bl	8002c34 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	3210      	adds	r2, #16
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
  }
 8007658:	bf00      	nop
 800765a:	3708      	adds	r7, #8
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 800766c:	4618      	mov	r0, r3
 800766e:	370c      	adds	r7, #12
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3310      	adds	r3, #16
 8007684:	4618      	mov	r0, r3
 8007686:	f7fb fafb 	bl	8002c80 <_ZN13geometry_msgs5Twist7getTypeEv>
 800768a:	4603      	mov	r3, r0
  }
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	3310      	adds	r3, #16
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7fb fafb 	bl	8002c9c <_ZN13geometry_msgs5Twist6getMD5Ev>
 80076a6:	4603      	mov	r3, r0
  }
 80076a8:	4618      	mov	r0, r3
 80076aa:	3708      	adds	r7, #8
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
    return configured_;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 80076be:	4618      	mov	r0, r3
 80076c0:	370c      	adds	r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <_GLOBAL__sub_I_hi2c1>:
 80076ca:	b580      	push	{r7, lr}
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80076d2:	2001      	movs	r0, #1
 80076d4:	f7ff ff18 	bl	8007508 <_Z41__static_initialization_and_destruction_0ii>
 80076d8:	bd80      	pop	{r7, pc}
 80076da:	0000      	movs	r0, r0
 80076dc:	0000      	movs	r0, r0
	...

080076e0 <_Z12calculatePIDddP16PID_Data_Typedefd>:
#include "motor_pid.h"

double calculatePID(double _sp, double _pv, PID_Data_Typedef *_pid_data, double _dt) {
 80076e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80076e4:	b08a      	sub	sp, #40	; 0x28
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	ed87 0b06 	vstr	d0, [r7, #24]
 80076ec:	ed87 1b04 	vstr	d1, [r7, #16]
 80076f0:	60f8      	str	r0, [r7, #12]
 80076f2:	ed87 2b00 	vstr	d2, [r7]
	_pid_data->err = _sp - _pv;
 80076f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80076fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80076fe:	f7f8 fde3 	bl	80002c8 <__aeabi_dsub>
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	68f9      	ldr	r1, [r7, #12]
 8007708:	e9c1 2306 	strd	r2, r3, [r1, #24]

	if (_pid_data->err > 1000.0)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	4b54      	ldr	r3, [pc, #336]	; (8007868 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 8007718:	f7f9 fa1e 	bl	8000b58 <__aeabi_dcmpgt>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d005      	beq.n	800772e <_Z12calculatePIDddP16PID_Data_Typedefd+0x4e>
		_pid_data->err = 1000.0;
 8007722:	68f9      	ldr	r1, [r7, #12]
 8007724:	f04f 0200 	mov.w	r2, #0
 8007728:	4b4f      	ldr	r3, [pc, #316]	; (8007868 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 800772a:	e9c1 2306 	strd	r2, r3, [r1, #24]
	if (_pid_data->err < -1000.0)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8007734:	a34a      	add	r3, pc, #296	; (adr r3, 8007860 <_Z12calculatePIDddP16PID_Data_Typedefd+0x180>)
 8007736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800773a:	f7f9 f9ef 	bl	8000b1c <__aeabi_dcmplt>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <_Z12calculatePIDddP16PID_Data_Typedefd+0x70>
		_pid_data->err = -1000.0;
 8007744:	68f9      	ldr	r1, [r7, #12]
 8007746:	a346      	add	r3, pc, #280	; (adr r3, 8007860 <_Z12calculatePIDddP16PID_Data_Typedefd+0x180>)
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	e9c1 2306 	strd	r2, r3, [r1, #24]

	_pid_data->sum_err += _pid_data->err;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800775c:	f7f8 fdb6 	bl	80002cc <__adddf3>
 8007760:	4602      	mov	r2, r0
 8007762:	460b      	mov	r3, r1
 8007764:	68f9      	ldr	r1, [r7, #12]
 8007766:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28

	double ret = (_pid_data->kp * _pid_data->err) + (_pid_data->ki * _pid_data->sum_err * _dt)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007776:	f7f8 ff5f 	bl	8000638 <__aeabi_dmul>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4614      	mov	r4, r2
 8007780:	461d      	mov	r5, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800778e:	f7f8 ff53 	bl	8000638 <__aeabi_dmul>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	4610      	mov	r0, r2
 8007798:	4619      	mov	r1, r3
 800779a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800779e:	f7f8 ff4b 	bl	8000638 <__aeabi_dmul>
 80077a2:	4602      	mov	r2, r0
 80077a4:	460b      	mov	r3, r1
 80077a6:	4620      	mov	r0, r4
 80077a8:	4629      	mov	r1, r5
 80077aa:	f7f8 fd8f 	bl	80002cc <__adddf3>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4690      	mov	r8, r2
 80077b4:	4699      	mov	r9, r3
			+ (_pid_data->kd * ((_pid_data->err - _pid_data->err_l) / _dt));
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077c8:	f7f8 fd7e 	bl	80002c8 <__aeabi_dsub>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4610      	mov	r0, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077d8:	f7f9 f858 	bl	800088c <__aeabi_ddiv>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 ff28 	bl	8000638 <__aeabi_dmul>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
	double ret = (_pid_data->kp * _pid_data->err) + (_pid_data->ki * _pid_data->sum_err * _dt)
 80077ec:	4640      	mov	r0, r8
 80077ee:	4649      	mov	r1, r9
 80077f0:	f7f8 fd6c 	bl	80002cc <__adddf3>
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	e9c7 2308 	strd	r2, r3, [r7, #32]

	_pid_data->err_l = _pid_data->err;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007802:	68f9      	ldr	r1, [r7, #12]
 8007804:	e9c1 2308 	strd	r2, r3, [r1, #32]

	if (ret > 1000.0)
 8007808:	f04f 0200 	mov.w	r2, #0
 800780c:	4b16      	ldr	r3, [pc, #88]	; (8007868 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 800780e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007812:	f7f9 f9a1 	bl	8000b58 <__aeabi_dcmpgt>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <_Z12calculatePIDddP16PID_Data_Typedefd+0x146>
		ret = 1000.0;
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	4b11      	ldr	r3, [pc, #68]	; (8007868 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 8007822:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if (ret < -1000.0)
 8007826:	a30e      	add	r3, pc, #56	; (adr r3, 8007860 <_Z12calculatePIDddP16PID_Data_Typedefd+0x180>)
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007830:	f7f9 f974 	bl	8000b1c <__aeabi_dcmplt>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <_Z12calculatePIDddP16PID_Data_Typedefd+0x164>
		ret = 1000.0;
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	4b0a      	ldr	r3, [pc, #40]	; (8007868 <_Z12calculatePIDddP16PID_Data_Typedefd+0x188>)
 8007840:	e9c7 2308 	strd	r2, r3, [r7, #32]

	return ret;
 8007844:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007848:	ec43 2b17 	vmov	d7, r2, r3
}
 800784c:	eeb0 0a47 	vmov.f32	s0, s14
 8007850:	eef0 0a67 	vmov.f32	s1, s15
 8007854:	3728      	adds	r7, #40	; 0x28
 8007856:	46bd      	mov	sp, r7
 8007858:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800785c:	f3af 8000 	nop.w
 8007860:	00000000 	.word	0x00000000
 8007864:	c08f4000 	.word	0xc08f4000
 8007868:	408f4000 	.word	0x408f4000

0800786c <_Z12resetPIDDataP16PID_Data_Typedef>:

void resetPIDData(PID_Data_Typedef *_pid_data) {
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
	_pid_data->err = 0.0;
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	f04f 0200 	mov.w	r2, #0
 800787a:	f04f 0300 	mov.w	r3, #0
 800787e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	_pid_data->err_l = 0.0;
 8007882:	6879      	ldr	r1, [r7, #4]
 8007884:	f04f 0200 	mov.w	r2, #0
 8007888:	f04f 0300 	mov.w	r3, #0
 800788c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	_pid_data->sum_err = 0.0;
 8007890:	6879      	ldr	r1, [r7, #4]
 8007892:	f04f 0200 	mov.w	r2, #0
 8007896:	f04f 0300 	mov.w	r3, #0
 800789a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <_Z17setupPIDParameterP16PID_Data_Typedefddd>:

void setupPIDParameter(PID_Data_Typedef *_pid_data, double _kp, double _ki, double _kd) {
 80078aa:	b480      	push	{r7}
 80078ac:	b089      	sub	sp, #36	; 0x24
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	61f8      	str	r0, [r7, #28]
 80078b2:	ed87 0b04 	vstr	d0, [r7, #16]
 80078b6:	ed87 1b02 	vstr	d1, [r7, #8]
 80078ba:	ed87 2b00 	vstr	d2, [r7]
	_pid_data->kp = _kp;
 80078be:	69f9      	ldr	r1, [r7, #28]
 80078c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80078c4:	e9c1 2300 	strd	r2, r3, [r1]
	_pid_data->ki = _ki;
 80078c8:	69f9      	ldr	r1, [r7, #28]
 80078ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078ce:	e9c1 2302 	strd	r2, r3, [r1, #8]
	_pid_data->kd = _kd;
 80078d2:	69f9      	ldr	r1, [r7, #28]
 80078d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078d8:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80078dc:	bf00      	nop
 80078de:	3724      	adds	r7, #36	; 0x24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <_ZL4wrapdd>:
#include "mpu9250.h"

static double wrap(double angle, double limit) {
 80078e8:	b5b0      	push	{r4, r5, r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	ed87 0b02 	vstr	d0, [r7, #8]
 80078f2:	ed87 1b00 	vstr	d1, [r7]
	while (angle > limit)
 80078f6:	e00f      	b.n	8007918 <_ZL4wrapdd+0x30>
		angle -= 2 * limit;
 80078f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078fc:	4602      	mov	r2, r0
 80078fe:	460b      	mov	r3, r1
 8007900:	f7f8 fce4 	bl	80002cc <__adddf3>
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800790c:	f7f8 fcdc 	bl	80002c8 <__aeabi_dsub>
 8007910:	4602      	mov	r2, r0
 8007912:	460b      	mov	r3, r1
 8007914:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (angle > limit)
 8007918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800791c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007920:	f7f9 f91a 	bl	8000b58 <__aeabi_dcmpgt>
 8007924:	4603      	mov	r3, r0
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e6      	bne.n	80078f8 <_ZL4wrapdd+0x10>
	while (angle < -limit)
 800792a:	e00f      	b.n	800794c <_ZL4wrapdd+0x64>
		angle += 2 * limit;
 800792c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	f7f8 fcca 	bl	80002cc <__adddf3>
 8007938:	4602      	mov	r2, r0
 800793a:	460b      	mov	r3, r1
 800793c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007940:	f7f8 fcc4 	bl	80002cc <__adddf3>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	e9c7 2302 	strd	r2, r3, [r7, #8]
	while (angle < -limit)
 800794c:	683c      	ldr	r4, [r7, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007954:	4622      	mov	r2, r4
 8007956:	462b      	mov	r3, r5
 8007958:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800795c:	f7f9 f8de 	bl	8000b1c <__aeabi_dcmplt>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1e2      	bne.n	800792c <_ZL4wrapdd+0x44>
	return angle;
 8007966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800796a:	ec43 2b17 	vmov	d7, r2, r3
}
 800796e:	eeb0 0a47 	vmov.f32	s0, s14
 8007972:	eef0 0a67 	vmov.f32	s1, s15
 8007976:	3710      	adds	r7, #16
 8007978:	46bd      	mov	sp, r7
 800797a:	bdb0      	pop	{r4, r5, r7, pc}
 800797c:	0000      	movs	r0, r0
	...

08007980 <_ZN7MPU9250C1ER17I2C_HandleTypeDef>:

MPU9250::MPU9250(I2C_HandleTypeDef &w) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	701a      	strb	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	22d0      	movs	r2, #208	; 0xd0
 8007994:	721a      	strb	r2, [r3, #8]
	wire = &w;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	605a      	str	r2, [r3, #4]
	setFilterGyroCoef(DEFAULT_GYRO_COEFF);
 800799c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80079d8 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x58>
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 f989 	bl	8007cb8 <_ZN7MPU925017setFilterGyroCoefEd>
	setGyroOffsets(0, 0, 0);
 80079a6:	ed9f 2b0e 	vldr	d2, [pc, #56]	; 80079e0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 80079aa:	ed9f 1b0d 	vldr	d1, [pc, #52]	; 80079e0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 80079ae:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80079e0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f940 	bl	8007c38 <_ZN7MPU925014setGyroOffsetsEddd>
	setAccOffsets(0, 0, 0);
 80079b8:	ed9f 2b09 	vldr	d2, [pc, #36]	; 80079e0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 80079bc:	ed9f 1b08 	vldr	d1, [pc, #32]	; 80079e0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 80079c0:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80079e0 <_ZN7MPU9250C1ER17I2C_HandleTypeDef+0x60>
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f956 	bl	8007c76 <_ZN7MPU925013setAccOffsetsEddd>
}
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	f3af 8000 	nop.w
 80079d8:	f5c28f5c 	.word	0xf5c28f5c
 80079dc:	3fef5c28 	.word	0x3fef5c28
	...

080079e8 <_ZN7MPU92505beginEii>:

uint8_t MPU9250::begin(int gyro_config_num, int acc_config_num) {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b08a      	sub	sp, #40	; 0x28
 80079ec:	af04      	add	r7, sp, #16
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
	uint8_t check, status;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80079f4:	2201      	movs	r2, #1
 80079f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80079fa:	481d      	ldr	r0, [pc, #116]	; (8007a70 <_ZN7MPU92505beginEii+0x88>)
 80079fc:	f002 f8b8 	bl	8009b70 <HAL_GPIO_WritePin>
	status = HAL_I2C_Mem_Read(wire, address, MPU9250_ADDR_CHECK, 1, &check, 1, 1000);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6858      	ldr	r0, [r3, #4]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	7a1b      	ldrb	r3, [r3, #8]
 8007a08:	b299      	uxth	r1, r3
 8007a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a0e:	9302      	str	r3, [sp, #8]
 8007a10:	2301      	movs	r3, #1
 8007a12:	9301      	str	r3, [sp, #4]
 8007a14:	f107 0316 	add.w	r3, r7, #22
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	2275      	movs	r2, #117	; 0x75
 8007a1e:	f002 fb19 	bl	800a054 <HAL_I2C_Mem_Read>
 8007a22:	4603      	mov	r3, r0
 8007a24:	75fb      	strb	r3, [r7, #23]
	if (check == 113) {
 8007a26:	7dbb      	ldrb	r3, [r7, #22]
 8007a28:	2b71      	cmp	r3, #113	; 0x71
 8007a2a:	d11c      	bne.n	8007a66 <_ZN7MPU92505beginEii+0x7e>
		writeData(MPU9250_PWR_MGMT_1_REGISTER, 0x01);
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	216b      	movs	r1, #107	; 0x6b
 8007a30:	68f8      	ldr	r0, [r7, #12]
 8007a32:	f000 f81f 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
		writeData(MPU9250_SMPLRT_DIV_REGISTER, 0x00);
 8007a36:	2200      	movs	r2, #0
 8007a38:	2119      	movs	r1, #25
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f81a 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
		writeData(MPU9250_CONFIG_REGISTER, 0x00);
 8007a40:	2200      	movs	r2, #0
 8007a42:	211a      	movs	r1, #26
 8007a44:	68f8      	ldr	r0, [r7, #12]
 8007a46:	f000 f815 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
		setGyroConfig(gyro_config_num);
 8007a4a:	68b9      	ldr	r1, [r7, #8]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 f833 	bl	8007ab8 <_ZN7MPU925013setGyroConfigEi>
		setAccConfig(acc_config_num);
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f000 f893 	bl	8007b80 <_ZN7MPU925012setAccConfigEi>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a60:	4803      	ldr	r0, [pc, #12]	; (8007a70 <_ZN7MPU92505beginEii+0x88>)
 8007a62:	f002 f885 	bl	8009b70 <HAL_GPIO_WritePin>
	}
	return status;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3718      	adds	r7, #24
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	40020400 	.word	0x40020400

08007a74 <_ZN7MPU92509writeDataEhh>:

uint8_t MPU9250::writeData(uint8_t reg, uint8_t data) {
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b088      	sub	sp, #32
 8007a78:	af04      	add	r7, sp, #16
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
 8007a80:	4613      	mov	r3, r2
 8007a82:	70bb      	strb	r3, [r7, #2]
	uint8_t status = HAL_I2C_Mem_Write(wire, address, reg, 1, &data, 1, 1000);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6858      	ldr	r0, [r3, #4]
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	7a1b      	ldrb	r3, [r3, #8]
 8007a8c:	b299      	uxth	r1, r3
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007a96:	9302      	str	r3, [sp, #8]
 8007a98:	2301      	movs	r3, #1
 8007a9a:	9301      	str	r3, [sp, #4]
 8007a9c:	1cbb      	adds	r3, r7, #2
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	f002 f9dd 	bl	8009e60 <HAL_I2C_Mem_Write>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	73fb      	strb	r3, [r7, #15]
	return status;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	0000      	movs	r0, r0
	...

08007ab8 <_ZN7MPU925013setGyroConfigEi>:

uint8_t MPU9250::setGyroConfig(int config_num) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
	uint8_t status;
	switch (config_num) {
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d843      	bhi.n	8007b50 <_ZN7MPU925013setGyroConfigEi+0x98>
 8007ac8:	a201      	add	r2, pc, #4	; (adr r2, 8007ad0 <_ZN7MPU925013setGyroConfigEi+0x18>)
 8007aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ace:	bf00      	nop
 8007ad0:	08007ae1 	.word	0x08007ae1
 8007ad4:	08007afd 	.word	0x08007afd
 8007ad8:	08007b19 	.word	0x08007b19
 8007adc:	08007b35 	.word	0x08007b35
		case 0: // range = +- 250 deg/s
			gyro_lsb_to_degsec = 131.0;
 8007ae0:	6879      	ldr	r1, [r7, #4]
 8007ae2:	a31f      	add	r3, pc, #124	; (adr r3, 8007b60 <_ZN7MPU925013setGyroConfigEi+0xa8>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x00);
 8007aec:	2200      	movs	r2, #0
 8007aee:	211b      	movs	r1, #27
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff ffbf 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73fb      	strb	r3, [r7, #15]
			break;
 8007afa:	e02c      	b.n	8007b56 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 1: // range = +- 500 deg/s
			gyro_lsb_to_degsec = 65.5;
 8007afc:	6879      	ldr	r1, [r7, #4]
 8007afe:	a31a      	add	r3, pc, #104	; (adr r3, 8007b68 <_ZN7MPU925013setGyroConfigEi+0xb0>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x08);
 8007b08:	2208      	movs	r2, #8
 8007b0a:	211b      	movs	r1, #27
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7ff ffb1 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
 8007b12:	4603      	mov	r3, r0
 8007b14:	73fb      	strb	r3, [r7, #15]
			break;
 8007b16:	e01e      	b.n	8007b56 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 2: // range = +- 1000 deg/s
			gyro_lsb_to_degsec = 32.8;
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	a315      	add	r3, pc, #84	; (adr r3, 8007b70 <_ZN7MPU925013setGyroConfigEi+0xb8>)
 8007b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b20:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x10);
 8007b24:	2210      	movs	r2, #16
 8007b26:	211b      	movs	r1, #27
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f7ff ffa3 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	73fb      	strb	r3, [r7, #15]
			break;
 8007b32:	e010      	b.n	8007b56 <_ZN7MPU925013setGyroConfigEi+0x9e>
		case 3: // range = +- 2000 deg/s
			gyro_lsb_to_degsec = 16.4;
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	a310      	add	r3, pc, #64	; (adr r3, 8007b78 <_ZN7MPU925013setGyroConfigEi+0xc0>)
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			status = writeData(MPU9250_GYRO_CONFIG_REGISTER, 0x18);
 8007b40:	2218      	movs	r2, #24
 8007b42:	211b      	movs	r1, #27
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff ff95 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]
			break;
 8007b4e:	e002      	b.n	8007b56 <_ZN7MPU925013setGyroConfigEi+0x9e>
		default: // error
			status = 1;
 8007b50:	2301      	movs	r3, #1
 8007b52:	73fb      	strb	r3, [r7, #15]
			break;
 8007b54:	bf00      	nop
	}
	return status;
 8007b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	00000000 	.word	0x00000000
 8007b64:	40606000 	.word	0x40606000
 8007b68:	00000000 	.word	0x00000000
 8007b6c:	40506000 	.word	0x40506000
 8007b70:	66666666 	.word	0x66666666
 8007b74:	40406666 	.word	0x40406666
 8007b78:	66666666 	.word	0x66666666
 8007b7c:	40306666 	.word	0x40306666

08007b80 <_ZN7MPU925012setAccConfigEi>:

uint8_t MPU9250::setAccConfig(int config_num) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	uint8_t status;
	switch (config_num) {
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d843      	bhi.n	8007c18 <_ZN7MPU925012setAccConfigEi+0x98>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <_ZN7MPU925012setAccConfigEi+0x18>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007ba9 	.word	0x08007ba9
 8007b9c:	08007bc5 	.word	0x08007bc5
 8007ba0:	08007be1 	.word	0x08007be1
 8007ba4:	08007bfd 	.word	0x08007bfd
		case 0: // range = +- 2 g
			acc_lsb_to_g = 16384.0;
 8007ba8:	6879      	ldr	r1, [r7, #4]
 8007baa:	f04f 0200 	mov.w	r2, #0
 8007bae:	4b1e      	ldr	r3, [pc, #120]	; (8007c28 <_ZN7MPU925012setAccConfigEi+0xa8>)
 8007bb0:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x00);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	211c      	movs	r1, #28
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7ff ff5b 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]
			break;
 8007bc2:	e02c      	b.n	8007c1e <_ZN7MPU925012setAccConfigEi+0x9e>
		case 1: // range = +- 4 g
			acc_lsb_to_g = 8192.0;
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	f04f 0200 	mov.w	r2, #0
 8007bca:	4b18      	ldr	r3, [pc, #96]	; (8007c2c <_ZN7MPU925012setAccConfigEi+0xac>)
 8007bcc:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x08);
 8007bd0:	2208      	movs	r2, #8
 8007bd2:	211c      	movs	r1, #28
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff ff4d 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73fb      	strb	r3, [r7, #15]
			break;
 8007bde:	e01e      	b.n	8007c1e <_ZN7MPU925012setAccConfigEi+0x9e>
		case 2: // range = +- 8 g
			acc_lsb_to_g = 4096.0;
 8007be0:	6879      	ldr	r1, [r7, #4]
 8007be2:	f04f 0200 	mov.w	r2, #0
 8007be6:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <_ZN7MPU925012setAccConfigEi+0xb0>)
 8007be8:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x10);
 8007bec:	2210      	movs	r2, #16
 8007bee:	211c      	movs	r1, #28
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7ff ff3f 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	73fb      	strb	r3, [r7, #15]
			break;
 8007bfa:	e010      	b.n	8007c1e <_ZN7MPU925012setAccConfigEi+0x9e>
		case 3: // range = +- 16 g
			acc_lsb_to_g = 2048.0;
 8007bfc:	6879      	ldr	r1, [r7, #4]
 8007bfe:	f04f 0200 	mov.w	r2, #0
 8007c02:	4b0c      	ldr	r3, [pc, #48]	; (8007c34 <_ZN7MPU925012setAccConfigEi+0xb4>)
 8007c04:	e9c1 2306 	strd	r2, r3, [r1, #24]
			status = writeData(MPU9250_ACCEL_CONFIG_REGISTER, 0x18);
 8007c08:	2218      	movs	r2, #24
 8007c0a:	211c      	movs	r1, #28
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff ff31 	bl	8007a74 <_ZN7MPU92509writeDataEhh>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
			break;
 8007c16:	e002      	b.n	8007c1e <_ZN7MPU925012setAccConfigEi+0x9e>
		default: // error
			status = 1;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	73fb      	strb	r3, [r7, #15]
			break;
 8007c1c:	bf00      	nop
	}
	return status;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	40d00000 	.word	0x40d00000
 8007c2c:	40c00000 	.word	0x40c00000
 8007c30:	40b00000 	.word	0x40b00000
 8007c34:	40a00000 	.word	0x40a00000

08007c38 <_ZN7MPU925014setGyroOffsetsEddd>:

void MPU9250::setGyroOffsets(double x, double y, double z) {
 8007c38:	b480      	push	{r7}
 8007c3a:	b089      	sub	sp, #36	; 0x24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	61f8      	str	r0, [r7, #28]
 8007c40:	ed87 0b04 	vstr	d0, [r7, #16]
 8007c44:	ed87 1b02 	vstr	d1, [r7, #8]
 8007c48:	ed87 2b00 	vstr	d2, [r7]
	gyroXoffset = x;
 8007c4c:	69f9      	ldr	r1, [r7, #28]
 8007c4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c52:	e9c1 2308 	strd	r2, r3, [r1, #32]
	gyroYoffset = y;
 8007c56:	69f9      	ldr	r1, [r7, #28]
 8007c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c5c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	gyroZoffset = z;
 8007c60:	69f9      	ldr	r1, [r7, #28]
 8007c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c66:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
}
 8007c6a:	bf00      	nop
 8007c6c:	3724      	adds	r7, #36	; 0x24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr

08007c76 <_ZN7MPU925013setAccOffsetsEddd>:

void MPU9250::setAccOffsets(double x, double y, double z) {
 8007c76:	b480      	push	{r7}
 8007c78:	b089      	sub	sp, #36	; 0x24
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	61f8      	str	r0, [r7, #28]
 8007c7e:	ed87 0b04 	vstr	d0, [r7, #16]
 8007c82:	ed87 1b02 	vstr	d1, [r7, #8]
 8007c86:	ed87 2b00 	vstr	d2, [r7]
	accXoffset = x;
 8007c8a:	69f9      	ldr	r1, [r7, #28]
 8007c8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007c90:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	accYoffset = y;
 8007c94:	69f9      	ldr	r1, [r7, #28]
 8007c96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c9a:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	accZoffset = z;
 8007c9e:	69f9      	ldr	r1, [r7, #28]
 8007ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 8007ca8:	bf00      	nop
 8007caa:	3724      	adds	r7, #36	; 0x24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	0000      	movs	r0, r0
	...

08007cb8 <_ZN7MPU925017setFilterGyroCoefEd>:

void MPU9250::setFilterGyroCoef(double gyro_coeff) {
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	ed87 0b00 	vstr	d0, [r7]
	if ((gyro_coeff < 0) or (gyro_coeff > 1)) {
 8007cc4:	f04f 0200 	mov.w	r2, #0
 8007cc8:	f04f 0300 	mov.w	r3, #0
 8007ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cd0:	f7f8 ff24 	bl	8000b1c <__aeabi_dcmplt>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d109      	bne.n	8007cee <_ZN7MPU925017setFilterGyroCoefEd+0x36>
 8007cda:	f04f 0200 	mov.w	r2, #0
 8007cde:	4b0e      	ldr	r3, [pc, #56]	; (8007d18 <_ZN7MPU925017setFilterGyroCoefEd+0x60>)
 8007ce0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ce4:	f7f8 ff38 	bl	8000b58 <__aeabi_dcmpgt>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d004      	beq.n	8007cf8 <_ZN7MPU925017setFilterGyroCoefEd+0x40>
		gyro_coeff = DEFAULT_GYRO_COEFF;
 8007cee:	a308      	add	r3, pc, #32	; (adr r3, 8007d10 <_ZN7MPU925017setFilterGyroCoefEd+0x58>)
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	e9c7 2300 	strd	r2, r3, [r7]
	}
	filterGyroCoef = gyro_coeff;
 8007cf8:	68f9      	ldr	r1, [r7, #12]
 8007cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cfe:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
}
 8007d02:	bf00      	nop
 8007d04:	3710      	adds	r7, #16
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	f3af 8000 	nop.w
 8007d10:	f5c28f5c 	.word	0xf5c28f5c
 8007d14:	3fef5c28 	.word	0x3fef5c28
 8007d18:	3ff00000 	.word	0x3ff00000
 8007d1c:	00000000 	.word	0x00000000

08007d20 <_ZN7MPU925011calcOffsetsEbb>:

void MPU9250::setFilterAccCoef(double acc_coeff) {
	setFilterGyroCoef(1.0 - acc_coeff);
}

void MPU9250::calcOffsets(bool is_calc_gyro, bool is_calc_acc) {
 8007d20:	b5b0      	push	{r4, r5, r7, lr}
 8007d22:	b090      	sub	sp, #64	; 0x40
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	70bb      	strb	r3, [r7, #2]
	if (is_calc_gyro) {
 8007d30:	78fb      	ldrb	r3, [r7, #3]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d008      	beq.n	8007d48 <_ZN7MPU925011calcOffsetsEbb+0x28>
		setGyroOffsets(0, 0, 0);
 8007d36:	ed9f 2b64 	vldr	d2, [pc, #400]	; 8007ec8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007d3a:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8007ec8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007d3e:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8007ec8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff ff78 	bl	8007c38 <_ZN7MPU925014setGyroOffsetsEddd>
	}
	if (is_calc_acc) {
 8007d48:	78bb      	ldrb	r3, [r7, #2]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d008      	beq.n	8007d60 <_ZN7MPU925011calcOffsetsEbb+0x40>
		setAccOffsets(0, 0, 0);
 8007d4e:	ed9f 2b5e 	vldr	d2, [pc, #376]	; 8007ec8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007d52:	ed9f 1b5d 	vldr	d1, [pc, #372]	; 8007ec8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007d56:	ed9f 0b5c 	vldr	d0, [pc, #368]	; 8007ec8 <_ZN7MPU925011calcOffsetsEbb+0x1a8>
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff ff8b 	bl	8007c76 <_ZN7MPU925013setAccOffsetsEddd>
	}
	double ag[6] = { 0, 0, 0, 0, 0, 0 };
 8007d60:	f107 0308 	add.w	r3, r7, #8
 8007d64:	2230      	movs	r2, #48	; 0x30
 8007d66:	2100      	movs	r1, #0
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f007 fb82 	bl	800f472 <memset>

	for (int i = 0; i < CALIB_OFFSET_NB_MES; i++) {
 8007d6e:	2300      	movs	r3, #0
 8007d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d72:	e053      	b.n	8007e1c <_ZN7MPU925011calcOffsetsEbb+0xfc>
		this->fetchData();
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f8af 	bl	8007ed8 <_ZN7MPU92509fetchDataEv>
		ag[0] += accX;
 8007d7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8007d84:	f7f8 faa2 	bl	80002cc <__adddf3>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	e9c7 2302 	strd	r2, r3, [r7, #8]
		ag[1] += accY;
 8007d90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8007d9a:	f7f8 fa97 	bl	80002cc <__adddf3>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	460b      	mov	r3, r1
 8007da2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		ag[2] += (accZ - 1.0);
 8007da6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	4b46      	ldr	r3, [pc, #280]	; (8007ed0 <_ZN7MPU925011calcOffsetsEbb+0x1b0>)
 8007db6:	f7f8 fa87 	bl	80002c8 <__aeabi_dsub>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	4629      	mov	r1, r5
 8007dc2:	f7f8 fa83 	bl	80002cc <__adddf3>
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	e9c7 2306 	strd	r2, r3, [r7, #24]
		ag[3] += gyroX;
 8007dce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8007dd8:	f7f8 fa78 	bl	80002cc <__adddf3>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ag[4] += gyroY;
 8007de4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8007dee:	f7f8 fa6d 	bl	80002cc <__adddf3>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		ag[5] += gyroZ;
 8007dfa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8007e04:	f7f8 fa62 	bl	80002cc <__adddf3>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		HAL_Delay(1);
 8007e10:	2001      	movs	r0, #1
 8007e12:	f000 ffe1 	bl	8008dd8 <HAL_Delay>
	for (int i = 0; i < CALIB_OFFSET_NB_MES; i++) {
 8007e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e18:	3301      	adds	r3, #1
 8007e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007e22:	dba7      	blt.n	8007d74 <_ZN7MPU925011calcOffsetsEbb+0x54>
	}

	if (is_calc_acc) {
 8007e24:	78bb      	ldrb	r3, [r7, #2]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d023      	beq.n	8007e72 <_ZN7MPU925011calcOffsetsEbb+0x152>
		accXoffset = ag[0] / CALIB_OFFSET_NB_MES;
 8007e2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007e2e:	f04f 0200 	mov.w	r2, #0
 8007e32:	4b28      	ldr	r3, [pc, #160]	; (8007ed4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007e34:	f7f8 fd2a 	bl	800088c <__aeabi_ddiv>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	6879      	ldr	r1, [r7, #4]
 8007e3e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		accYoffset = ag[1] / CALIB_OFFSET_NB_MES;
 8007e42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007e46:	f04f 0200 	mov.w	r2, #0
 8007e4a:	4b22      	ldr	r3, [pc, #136]	; (8007ed4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007e4c:	f7f8 fd1e 	bl	800088c <__aeabi_ddiv>
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	6879      	ldr	r1, [r7, #4]
 8007e56:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
		accZoffset = ag[2] / CALIB_OFFSET_NB_MES;
 8007e5a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007e5e:	f04f 0200 	mov.w	r2, #0
 8007e62:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007e64:	f7f8 fd12 	bl	800088c <__aeabi_ddiv>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	6879      	ldr	r1, [r7, #4]
 8007e6e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	}

	if (is_calc_gyro) {
 8007e72:	78fb      	ldrb	r3, [r7, #3]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d023      	beq.n	8007ec0 <_ZN7MPU925011calcOffsetsEbb+0x1a0>
		gyroXoffset = ag[3] / CALIB_OFFSET_NB_MES;
 8007e78:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	4b14      	ldr	r3, [pc, #80]	; (8007ed4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007e82:	f7f8 fd03 	bl	800088c <__aeabi_ddiv>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	6879      	ldr	r1, [r7, #4]
 8007e8c:	e9c1 2308 	strd	r2, r3, [r1, #32]
		gyroYoffset = ag[4] / CALIB_OFFSET_NB_MES;
 8007e90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	4b0e      	ldr	r3, [pc, #56]	; (8007ed4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007e9a:	f7f8 fcf7 	bl	800088c <__aeabi_ddiv>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		gyroZoffset = ag[5] / CALIB_OFFSET_NB_MES;
 8007ea8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	4b08      	ldr	r3, [pc, #32]	; (8007ed4 <_ZN7MPU925011calcOffsetsEbb+0x1b4>)
 8007eb2:	f7f8 fceb 	bl	800088c <__aeabi_ddiv>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	}
}
 8007ec0:	bf00      	nop
 8007ec2:	3740      	adds	r7, #64	; 0x40
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bdb0      	pop	{r4, r5, r7, pc}
	...
 8007ed0:	3ff00000 	.word	0x3ff00000
 8007ed4:	407f4000 	.word	0x407f4000

08007ed8 <_ZN7MPU92509fetchDataEv>:

uint8_t MPU9250::fetchData() {
 8007ed8:	b5b0      	push	{r4, r5, r7, lr}
 8007eda:	b090      	sub	sp, #64	; 0x40
 8007edc:	af04      	add	r7, sp, #16
 8007ede:	6078      	str	r0, [r7, #4]
	uint8_t i2cData[14], status;
	status = HAL_I2C_Mem_Read(wire, address, MPU9250_ACCEL_OUT_REGISTER, 1, i2cData, 14, 1000);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6858      	ldr	r0, [r3, #4]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	7a1b      	ldrb	r3, [r3, #8]
 8007ee8:	b299      	uxth	r1, r3
 8007eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007eee:	9302      	str	r3, [sp, #8]
 8007ef0:	230e      	movs	r3, #14
 8007ef2:	9301      	str	r3, [sp, #4]
 8007ef4:	f107 0318 	add.w	r3, r7, #24
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	2301      	movs	r3, #1
 8007efc:	223b      	movs	r2, #59	; 0x3b
 8007efe:	f002 f8a9 	bl	800a054 <HAL_I2C_Mem_Read>
 8007f02:	4603      	mov	r3, r0
 8007f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	int16_t rawData[7];
	int j = 0;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (int i = 0; i < 14; i += 2) {
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f10:	e01a      	b.n	8007f48 <_ZN7MPU92509fetchDataEv+0x70>
		rawData[j++] = (int16_t) (i2cData[i] << 8 | i2cData[i + 1]);
 8007f12:	f107 0218 	add.w	r2, r7, #24
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	4413      	add	r3, r2
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	021b      	lsls	r3, r3, #8
 8007f1e:	b219      	sxth	r1, r3
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	3301      	adds	r3, #1
 8007f24:	3330      	adds	r3, #48	; 0x30
 8007f26:	443b      	add	r3, r7
 8007f28:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8007f2c:	b21a      	sxth	r2, r3
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	1c58      	adds	r0, r3, #1
 8007f32:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007f34:	430a      	orrs	r2, r1
 8007f36:	b212      	sxth	r2, r2
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	3330      	adds	r3, #48	; 0x30
 8007f3c:	443b      	add	r3, r7
 8007f3e:	f823 2c28 	strh.w	r2, [r3, #-40]
	for (int i = 0; i < 14; i += 2) {
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	3302      	adds	r3, #2
 8007f46:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f4a:	2b0d      	cmp	r3, #13
 8007f4c:	dde1      	ble.n	8007f12 <_ZN7MPU92509fetchDataEv+0x3a>
	}

	accX = ((double) rawData[0]) / acc_lsb_to_g - accXoffset;
 8007f4e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7f8 fb06 	bl	8000564 <__aeabi_i2d>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007f5e:	f7f8 fc95 	bl	800088c <__aeabi_ddiv>
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	4610      	mov	r0, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007f70:	f7f8 f9aa 	bl	80002c8 <__aeabi_dsub>
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	accY = ((double) rawData[1]) / acc_lsb_to_g - accYoffset;
 8007f7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7f8 faee 	bl	8000564 <__aeabi_i2d>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007f8e:	f7f8 fc7d 	bl	800088c <__aeabi_ddiv>
 8007f92:	4602      	mov	r2, r0
 8007f94:	460b      	mov	r3, r1
 8007f96:	4610      	mov	r0, r2
 8007f98:	4619      	mov	r1, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8007fa0:	f7f8 f992 	bl	80002c8 <__aeabi_dsub>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	460b      	mov	r3, r1
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	accZ = (!upsideDownMounting - upsideDownMounting) * ((double) rawData[2]) / acc_lsb_to_g - accZoffset;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	f083 0301 	eor.w	r3, r3, #1
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	461a      	mov	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	1ad3      	subs	r3, r2, r3
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7f8 facf 	bl	8000564 <__aeabi_i2d>
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	460d      	mov	r5, r1
 8007fca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f7f8 fac8 	bl	8000564 <__aeabi_i2d>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4620      	mov	r0, r4
 8007fda:	4629      	mov	r1, r5
 8007fdc:	f7f8 fb2c 	bl	8000638 <__aeabi_dmul>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	460b      	mov	r3, r1
 8007fe4:	4610      	mov	r0, r2
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007fee:	f7f8 fc4d 	bl	800088c <__aeabi_ddiv>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	4610      	mov	r0, r2
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8008000:	f7f8 f962 	bl	80002c8 <__aeabi_dsub>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	6879      	ldr	r1, [r7, #4]
 800800a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	temp = (rawData[3] + TEMP_LSB_OFFSET) / TEMP_LSB_2_DEGREE;
 800800e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008012:	4618      	mov	r0, r3
 8008014:	f7f8 faa6 	bl	8000564 <__aeabi_i2d>
 8008018:	a332      	add	r3, pc, #200	; (adr r3, 80080e4 <_ZN7MPU92509fetchDataEv+0x20c>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 f955 	bl	80002cc <__adddf3>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4610      	mov	r0, r2
 8008028:	4619      	mov	r1, r3
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	4b2c      	ldr	r3, [pc, #176]	; (80080e0 <_ZN7MPU92509fetchDataEv+0x208>)
 8008030:	f7f8 fc2c 	bl	800088c <__aeabi_ddiv>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	6879      	ldr	r1, [r7, #4]
 800803a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	gyroX = ((double) rawData[4]) / gyro_lsb_to_degsec - gyroXoffset;
 800803e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8008042:	4618      	mov	r0, r3
 8008044:	f7f8 fa8e 	bl	8000564 <__aeabi_i2d>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800804e:	f7f8 fc1d 	bl	800088c <__aeabi_ddiv>
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	4610      	mov	r0, r2
 8008058:	4619      	mov	r1, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008060:	f7f8 f932 	bl	80002c8 <__aeabi_dsub>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	6879      	ldr	r1, [r7, #4]
 800806a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	gyroY = ((double) rawData[5]) / gyro_lsb_to_degsec - gyroYoffset;
 800806e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008072:	4618      	mov	r0, r3
 8008074:	f7f8 fa76 	bl	8000564 <__aeabi_i2d>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800807e:	f7f8 fc05 	bl	800088c <__aeabi_ddiv>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4610      	mov	r0, r2
 8008088:	4619      	mov	r1, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008090:	f7f8 f91a 	bl	80002c8 <__aeabi_dsub>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	gyroZ = ((double) rawData[6]) / gyro_lsb_to_degsec - gyroZoffset;
 800809e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7f8 fa5e 	bl	8000564 <__aeabi_i2d>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80080ae:	f7f8 fbed 	bl	800088c <__aeabi_ddiv>
 80080b2:	4602      	mov	r2, r0
 80080b4:	460b      	mov	r3, r1
 80080b6:	4610      	mov	r0, r2
 80080b8:	4619      	mov	r1, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80080c0:	f7f8 f902 	bl	80002c8 <__aeabi_dsub>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	6879      	ldr	r1, [r7, #4]
 80080ca:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	return status;
 80080ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3730      	adds	r7, #48	; 0x30
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bdb0      	pop	{r4, r5, r7, pc}
 80080da:	bf00      	nop
 80080dc:	f3af 8000 	nop.w
 80080e0:	40754000 	.word	0x40754000
 80080e4:	00000000 	.word	0x00000000
 80080e8:	40c83e00 	.word	0x40c83e00
 80080ec:	00000000 	.word	0x00000000

080080f0 <_ZN7MPU92506updateEv>:

uint8_t MPU9250::update() {
 80080f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f4:	ed2d 8b02 	vpush	{d8}
 80080f8:	b08b      	sub	sp, #44	; 0x2c
 80080fa:	af00      	add	r7, sp, #0
 80080fc:	6078      	str	r0, [r7, #4]
	uint8_t status = this->fetchData();
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f7ff feea 	bl	8007ed8 <_ZN7MPU92509fetchDataEv>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	double sgZ = (accZ >= 0) - (accZ < 0);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8008110:	2301      	movs	r3, #1
 8008112:	461e      	mov	r6, r3
 8008114:	f04f 0200 	mov.w	r2, #0
 8008118:	f04f 0300 	mov.w	r3, #0
 800811c:	f7f8 fd12 	bl	8000b44 <__aeabi_dcmpge>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <_ZN7MPU92506updateEv+0x3a>
 8008126:	2300      	movs	r3, #0
 8008128:	461e      	mov	r6, r3
 800812a:	b2f3      	uxtb	r3, r6
 800812c:	461e      	mov	r6, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8008134:	2301      	movs	r3, #1
 8008136:	4698      	mov	r8, r3
 8008138:	f04f 0200 	mov.w	r2, #0
 800813c:	f04f 0300 	mov.w	r3, #0
 8008140:	f7f8 fcec 	bl	8000b1c <__aeabi_dcmplt>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d101      	bne.n	800814e <_ZN7MPU92506updateEv+0x5e>
 800814a:	2300      	movs	r3, #0
 800814c:	4698      	mov	r8, r3
 800814e:	fa5f f388 	uxtb.w	r3, r8
 8008152:	1af3      	subs	r3, r6, r3
 8008154:	4618      	mov	r0, r3
 8008156:	f7f8 fa05 	bl	8000564 <__aeabi_i2d>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	angleAccX = atan2(accY, sgZ * sqrt(accZ * accZ + accX * accX)) * RAD_2_DEG;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	ed93 8b18 	vldr	d8, [r3, #96]	; 0x60
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008174:	f7f8 fa60 	bl	8000638 <__aeabi_dmul>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4690      	mov	r8, r2
 800817e:	4699      	mov	r9, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800818c:	f7f8 fa54 	bl	8000638 <__aeabi_dmul>
 8008190:	4602      	mov	r2, r0
 8008192:	460b      	mov	r3, r1
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	f7f8 f898 	bl	80002cc <__adddf3>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	ec43 2b17 	vmov	d7, r2, r3
 80081a4:	eeb0 0a47 	vmov.f32	s0, s14
 80081a8:	eef0 0a67 	vmov.f32	s1, s15
 80081ac:	f005 fe16 	bl	800dddc <sqrt>
 80081b0:	ec51 0b10 	vmov	r0, r1, d0
 80081b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081b8:	f7f8 fa3e 	bl	8000638 <__aeabi_dmul>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	ec43 2b17 	vmov	d7, r2, r3
 80081c4:	eeb0 1a47 	vmov.f32	s2, s14
 80081c8:	eef0 1a67 	vmov.f32	s3, s15
 80081cc:	eeb0 0a48 	vmov.f32	s0, s16
 80081d0:	eef0 0a68 	vmov.f32	s1, s17
 80081d4:	f005 fe00 	bl	800ddd8 <atan2>
 80081d8:	ec51 0b10 	vmov	r0, r1, d0
 80081dc:	a3b1      	add	r3, pc, #708	; (adr r3, 80084a4 <_ZN7MPU92506updateEv+0x3b4>)
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	f7f8 fa29 	bl	8000638 <__aeabi_dmul>
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	angleAccY = -atan2(accX, sqrt(accZ * accZ + accY * accY)) * RAD_2_DEG;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	ed93 8b16 	vldr	d8, [r3, #88]	; 0x58
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008202:	f7f8 fa19 	bl	8000638 <__aeabi_dmul>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	4690      	mov	r8, r2
 800820c:	4699      	mov	r9, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800821a:	f7f8 fa0d 	bl	8000638 <__aeabi_dmul>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	f7f8 f851 	bl	80002cc <__adddf3>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	ec43 2b17 	vmov	d7, r2, r3
 8008232:	eeb0 0a47 	vmov.f32	s0, s14
 8008236:	eef0 0a67 	vmov.f32	s1, s15
 800823a:	f005 fdcf 	bl	800dddc <sqrt>
 800823e:	eeb0 7a40 	vmov.f32	s14, s0
 8008242:	eef0 7a60 	vmov.f32	s15, s1
 8008246:	eeb0 1a47 	vmov.f32	s2, s14
 800824a:	eef0 1a67 	vmov.f32	s3, s15
 800824e:	eeb0 0a48 	vmov.f32	s0, s16
 8008252:	eef0 0a68 	vmov.f32	s1, s17
 8008256:	f005 fdbf 	bl	800ddd8 <atan2>
 800825a:	ec53 2b10 	vmov	r2, r3, d0
 800825e:	4614      	mov	r4, r2
 8008260:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8008264:	a38f      	add	r3, pc, #572	; (adr r3, 80084a4 <_ZN7MPU92506updateEv+0x3b4>)
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	4620      	mov	r0, r4
 800826c:	4629      	mov	r1, r5
 800826e:	f7f8 f9e3 	bl	8000638 <__aeabi_dmul>
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90

	uint32_t Tnew = HAL_GetTick();
 800827c:	f000 fda0 	bl	8008dc0 <HAL_GetTick>
 8008280:	6178      	str	r0, [r7, #20]
	double dt = (Tnew - preInterval) * 1e-3;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	4618      	mov	r0, r3
 800828e:	f7f8 f959 	bl	8000544 <__aeabi_ui2d>
 8008292:	a386      	add	r3, pc, #536	; (adr r3, 80084ac <_ZN7MPU92506updateEv+0x3bc>)
 8008294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008298:	f7f8 f9ce 	bl	8000638 <__aeabi_dmul>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	preInterval = Tnew;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	angleX = wrap(
			filterGyroCoef * (angleAccX + wrap(angleX + gyroX * dt - angleAccX, 180)) + (1.0 - filterGyroCoef) * angleAccX,
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	e9d3 8922 	ldrd	r8, r9, [r3, #136]	; 0x88
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	e9d3 ab26 	ldrd	sl, fp, [r3, #152]	; 0x98
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80082c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082c8:	f7f8 f9b6 	bl	8000638 <__aeabi_dmul>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	4650      	mov	r0, sl
 80082d2:	4659      	mov	r1, fp
 80082d4:	f7f7 fffa 	bl	80002cc <__adddf3>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4610      	mov	r0, r2
 80082de:	4619      	mov	r1, r3
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80082e6:	f7f7 ffef 	bl	80002c8 <__aeabi_dsub>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	ec43 2b17 	vmov	d7, r2, r3
 80082f2:	ed9f 1b67 	vldr	d1, [pc, #412]	; 8008490 <_ZN7MPU92506updateEv+0x3a0>
 80082f6:	eeb0 0a47 	vmov.f32	s0, s14
 80082fa:	eef0 0a67 	vmov.f32	s1, s15
 80082fe:	f7ff faf3 	bl	80078e8 <_ZL4wrapdd>
 8008302:	ec53 2b10 	vmov	r2, r3, d0
 8008306:	4640      	mov	r0, r8
 8008308:	4649      	mov	r1, r9
 800830a:	f7f7 ffdf 	bl	80002cc <__adddf3>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	4620      	mov	r0, r4
 8008314:	4629      	mov	r1, r5
 8008316:	f7f8 f98f 	bl	8000638 <__aeabi_dmul>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4614      	mov	r4, r2
 8008320:	461d      	mov	r5, r3
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008328:	f04f 0000 	mov.w	r0, #0
 800832c:	495c      	ldr	r1, [pc, #368]	; (80084a0 <_ZN7MPU92506updateEv+0x3b0>)
 800832e:	f7f7 ffcb 	bl	80002c8 <__aeabi_dsub>
 8008332:	4602      	mov	r2, r0
 8008334:	460b      	mov	r3, r1
 8008336:	4610      	mov	r0, r2
 8008338:	4619      	mov	r1, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8008340:	f7f8 f97a 	bl	8000638 <__aeabi_dmul>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
	angleX = wrap(
 8008348:	4620      	mov	r0, r4
 800834a:	4629      	mov	r1, r5
 800834c:	f7f7 ffbe 	bl	80002cc <__adddf3>
 8008350:	4602      	mov	r2, r0
 8008352:	460b      	mov	r3, r1
 8008354:	ec43 2b17 	vmov	d7, r2, r3
 8008358:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8008490 <_ZN7MPU92506updateEv+0x3a0>
 800835c:	eeb0 0a47 	vmov.f32	s0, s14
 8008360:	eef0 0a67 	vmov.f32	s1, s15
 8008364:	f7ff fac0 	bl	80078e8 <_ZL4wrapdd>
 8008368:	eeb0 7a40 	vmov.f32	s14, s0
 800836c:	eef0 7a60 	vmov.f32	s15, s1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
			180);
	angleY = wrap(
			filterGyroCoef * (angleAccY + wrap(angleY + sgZ * gyroY * dt - angleAccY, 90))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	e9d3 452e 	ldrd	r4, r5, [r3, #184]	; 0xb8
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	e9d3 8924 	ldrd	r8, r9, [r3, #144]	; 0x90
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	e9d3 ab28 	ldrd	sl, fp, [r3, #160]	; 0xa0
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 800838e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008392:	f7f8 f951 	bl	8000638 <__aeabi_dmul>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4610      	mov	r0, r2
 800839c:	4619      	mov	r1, r3
 800839e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083a2:	f7f8 f949 	bl	8000638 <__aeabi_dmul>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4650      	mov	r0, sl
 80083ac:	4659      	mov	r1, fp
 80083ae:	f7f7 ff8d 	bl	80002cc <__adddf3>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4610      	mov	r0, r2
 80083b8:	4619      	mov	r1, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80083c0:	f7f7 ff82 	bl	80002c8 <__aeabi_dsub>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	ec43 2b17 	vmov	d7, r2, r3
 80083cc:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8008498 <_ZN7MPU92506updateEv+0x3a8>
 80083d0:	eeb0 0a47 	vmov.f32	s0, s14
 80083d4:	eef0 0a67 	vmov.f32	s1, s15
 80083d8:	f7ff fa86 	bl	80078e8 <_ZL4wrapdd>
 80083dc:	ec53 2b10 	vmov	r2, r3, d0
 80083e0:	4640      	mov	r0, r8
 80083e2:	4649      	mov	r1, r9
 80083e4:	f7f7 ff72 	bl	80002cc <__adddf3>
 80083e8:	4602      	mov	r2, r0
 80083ea:	460b      	mov	r3, r1
 80083ec:	4620      	mov	r0, r4
 80083ee:	4629      	mov	r1, r5
 80083f0:	f7f8 f922 	bl	8000638 <__aeabi_dmul>
 80083f4:	4602      	mov	r2, r0
 80083f6:	460b      	mov	r3, r1
 80083f8:	4614      	mov	r4, r2
 80083fa:	461d      	mov	r5, r3
					+ (1.0 - filterGyroCoef) * angleAccY, 90);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8008402:	f04f 0000 	mov.w	r0, #0
 8008406:	4926      	ldr	r1, [pc, #152]	; (80084a0 <_ZN7MPU92506updateEv+0x3b0>)
 8008408:	f7f7 ff5e 	bl	80002c8 <__aeabi_dsub>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	4610      	mov	r0, r2
 8008412:	4619      	mov	r1, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800841a:	f7f8 f90d 	bl	8000638 <__aeabi_dmul>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
	angleY = wrap(
 8008422:	4620      	mov	r0, r4
 8008424:	4629      	mov	r1, r5
 8008426:	f7f7 ff51 	bl	80002cc <__adddf3>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	ec43 2b17 	vmov	d7, r2, r3
 8008432:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8008498 <_ZN7MPU92506updateEv+0x3a8>
 8008436:	eeb0 0a47 	vmov.f32	s0, s14
 800843a:	eef0 0a67 	vmov.f32	s1, s15
 800843e:	f7ff fa53 	bl	80078e8 <_ZL4wrapdd>
 8008442:	eeb0 7a40 	vmov.f32	s14, s0
 8008446:	eef0 7a60 	vmov.f32	s15, s1
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
	angleZ += gyroZ * dt;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 800845c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008460:	f7f8 f8ea 	bl	8000638 <__aeabi_dmul>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4620      	mov	r0, r4
 800846a:	4629      	mov	r1, r5
 800846c:	f7f7 ff2e 	bl	80002cc <__adddf3>
 8008470:	4602      	mov	r2, r0
 8008472:	460b      	mov	r3, r1
 8008474:	6879      	ldr	r1, [r7, #4]
 8008476:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

	return status;
 800847a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800847e:	4618      	mov	r0, r3
 8008480:	372c      	adds	r7, #44	; 0x2c
 8008482:	46bd      	mov	sp, r7
 8008484:	ecbd 8b02 	vpop	{d8}
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	f3af 8000 	nop.w
 8008490:	00000000 	.word	0x00000000
 8008494:	40668000 	.word	0x40668000
 8008498:	00000000 	.word	0x00000000
 800849c:	40568000 	.word	0x40568000
 80084a0:	3ff00000 	.word	0x3ff00000
 80084a4:	1e7967cb 	.word	0x1e7967cb
 80084a8:	404ca5dc 	.word	0x404ca5dc
 80084ac:	d2f1a9fc 	.word	0xd2f1a9fc
 80084b0:	3f50624d 	.word	0x3f50624d

080084b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084ba:	2300      	movs	r3, #0
 80084bc:	607b      	str	r3, [r7, #4]
 80084be:	4b10      	ldr	r3, [pc, #64]	; (8008500 <HAL_MspInit+0x4c>)
 80084c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084c2:	4a0f      	ldr	r2, [pc, #60]	; (8008500 <HAL_MspInit+0x4c>)
 80084c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80084c8:	6453      	str	r3, [r2, #68]	; 0x44
 80084ca:	4b0d      	ldr	r3, [pc, #52]	; (8008500 <HAL_MspInit+0x4c>)
 80084cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084d2:	607b      	str	r3, [r7, #4]
 80084d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80084d6:	2300      	movs	r3, #0
 80084d8:	603b      	str	r3, [r7, #0]
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <HAL_MspInit+0x4c>)
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	4a08      	ldr	r2, [pc, #32]	; (8008500 <HAL_MspInit+0x4c>)
 80084e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e4:	6413      	str	r3, [r2, #64]	; 0x40
 80084e6:	4b06      	ldr	r3, [pc, #24]	; (8008500 <HAL_MspInit+0x4c>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084f2:	bf00      	nop
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40023800 	.word	0x40023800

08008504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08a      	sub	sp, #40	; 0x28
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	2200      	movs	r2, #0
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	609a      	str	r2, [r3, #8]
 8008518:	60da      	str	r2, [r3, #12]
 800851a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a19      	ldr	r2, [pc, #100]	; (8008588 <HAL_I2C_MspInit+0x84>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d12c      	bne.n	8008580 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]
 800852a:	4b18      	ldr	r3, [pc, #96]	; (800858c <HAL_I2C_MspInit+0x88>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	4a17      	ldr	r2, [pc, #92]	; (800858c <HAL_I2C_MspInit+0x88>)
 8008530:	f043 0302 	orr.w	r3, r3, #2
 8008534:	6313      	str	r3, [r2, #48]	; 0x30
 8008536:	4b15      	ldr	r3, [pc, #84]	; (800858c <HAL_I2C_MspInit+0x88>)
 8008538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	613b      	str	r3, [r7, #16]
 8008540:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = SDA_Pin|SCL_Pin;
 8008542:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8008546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008548:	2312      	movs	r3, #18
 800854a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854c:	2300      	movs	r3, #0
 800854e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008550:	2303      	movs	r3, #3
 8008552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008554:	2304      	movs	r3, #4
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008558:	f107 0314 	add.w	r3, r7, #20
 800855c:	4619      	mov	r1, r3
 800855e:	480c      	ldr	r0, [pc, #48]	; (8008590 <HAL_I2C_MspInit+0x8c>)
 8008560:	f001 f972 	bl	8009848 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	4b08      	ldr	r3, [pc, #32]	; (800858c <HAL_I2C_MspInit+0x88>)
 800856a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856c:	4a07      	ldr	r2, [pc, #28]	; (800858c <HAL_I2C_MspInit+0x88>)
 800856e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008572:	6413      	str	r3, [r2, #64]	; 0x40
 8008574:	4b05      	ldr	r3, [pc, #20]	; (800858c <HAL_I2C_MspInit+0x88>)
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008580:	bf00      	nop
 8008582:	3728      	adds	r7, #40	; 0x28
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	40005400 	.word	0x40005400
 800858c:	40023800 	.word	0x40023800
 8008590:	40020400 	.word	0x40020400

08008594 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b090      	sub	sp, #64	; 0x40
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800859c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80085a0:	2200      	movs	r2, #0
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	605a      	str	r2, [r3, #4]
 80085a6:	609a      	str	r2, [r3, #8]
 80085a8:	60da      	str	r2, [r3, #12]
 80085aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a64      	ldr	r2, [pc, #400]	; (8008744 <HAL_TIM_Encoder_MspInit+0x1b0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d12d      	bne.n	8008612 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80085b6:	2300      	movs	r3, #0
 80085b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80085ba:	4b63      	ldr	r3, [pc, #396]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80085bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085be:	4a62      	ldr	r2, [pc, #392]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	6453      	str	r3, [r2, #68]	; 0x44
 80085c6:	4b60      	ldr	r3, [pc, #384]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80085c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085ca:	f003 0301 	and.w	r3, r3, #1
 80085ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085d2:	2300      	movs	r3, #0
 80085d4:	627b      	str	r3, [r7, #36]	; 0x24
 80085d6:	4b5c      	ldr	r3, [pc, #368]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	4a5b      	ldr	r2, [pc, #364]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80085dc:	f043 0301 	orr.w	r3, r3, #1
 80085e0:	6313      	str	r3, [r2, #48]	; 0x30
 80085e2:	4b59      	ldr	r3, [pc, #356]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80085e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	627b      	str	r3, [r7, #36]	; 0x24
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = Encoder_M1_A_Pin|Encoder_M1_B_Pin;
 80085ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80085f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f4:	2302      	movs	r3, #2
 80085f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085fc:	2300      	movs	r3, #0
 80085fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008600:	2301      	movs	r3, #1
 8008602:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008608:	4619      	mov	r1, r3
 800860a:	4850      	ldr	r0, [pc, #320]	; (800874c <HAL_TIM_Encoder_MspInit+0x1b8>)
 800860c:	f001 f91c 	bl	8009848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8008610:	e094      	b.n	800873c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM3)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a4e      	ldr	r2, [pc, #312]	; (8008750 <HAL_TIM_Encoder_MspInit+0x1bc>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d12c      	bne.n	8008676 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800861c:	2300      	movs	r3, #0
 800861e:	623b      	str	r3, [r7, #32]
 8008620:	4b49      	ldr	r3, [pc, #292]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008624:	4a48      	ldr	r2, [pc, #288]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008626:	f043 0302 	orr.w	r3, r3, #2
 800862a:	6413      	str	r3, [r2, #64]	; 0x40
 800862c:	4b46      	ldr	r3, [pc, #280]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800862e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008630:	f003 0302 	and.w	r3, r3, #2
 8008634:	623b      	str	r3, [r7, #32]
 8008636:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008638:	2300      	movs	r3, #0
 800863a:	61fb      	str	r3, [r7, #28]
 800863c:	4b42      	ldr	r3, [pc, #264]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008640:	4a41      	ldr	r2, [pc, #260]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008642:	f043 0301 	orr.w	r3, r3, #1
 8008646:	6313      	str	r3, [r2, #48]	; 0x30
 8008648:	4b3f      	ldr	r3, [pc, #252]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800864a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864c:	f003 0301 	and.w	r3, r3, #1
 8008650:	61fb      	str	r3, [r7, #28]
 8008652:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = Encoder_M2_A_Pin|Encoder_M2_B_Pin;
 8008654:	23c0      	movs	r3, #192	; 0xc0
 8008656:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008658:	2302      	movs	r3, #2
 800865a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800865c:	2300      	movs	r3, #0
 800865e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008660:	2300      	movs	r3, #0
 8008662:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008664:	2302      	movs	r3, #2
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008668:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800866c:	4619      	mov	r1, r3
 800866e:	4837      	ldr	r0, [pc, #220]	; (800874c <HAL_TIM_Encoder_MspInit+0x1b8>)
 8008670:	f001 f8ea 	bl	8009848 <HAL_GPIO_Init>
}
 8008674:	e062      	b.n	800873c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM5)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a36      	ldr	r2, [pc, #216]	; (8008754 <HAL_TIM_Encoder_MspInit+0x1c0>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d12c      	bne.n	80086da <HAL_TIM_Encoder_MspInit+0x146>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008680:	2300      	movs	r3, #0
 8008682:	61bb      	str	r3, [r7, #24]
 8008684:	4b30      	ldr	r3, [pc, #192]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	4a2f      	ldr	r2, [pc, #188]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800868a:	f043 0308 	orr.w	r3, r3, #8
 800868e:	6413      	str	r3, [r2, #64]	; 0x40
 8008690:	4b2d      	ldr	r3, [pc, #180]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008694:	f003 0308 	and.w	r3, r3, #8
 8008698:	61bb      	str	r3, [r7, #24]
 800869a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	4b29      	ldr	r3, [pc, #164]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a4:	4a28      	ldr	r2, [pc, #160]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086a6:	f043 0301 	orr.w	r3, r3, #1
 80086aa:	6313      	str	r3, [r2, #48]	; 0x30
 80086ac:	4b26      	ldr	r3, [pc, #152]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b0:	f003 0301 	and.w	r3, r3, #1
 80086b4:	617b      	str	r3, [r7, #20]
 80086b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = Encoder_M3_A_Pin|Encoder_M3_B_Pin;
 80086b8:	2303      	movs	r3, #3
 80086ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086bc:	2302      	movs	r3, #2
 80086be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c0:	2300      	movs	r3, #0
 80086c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086c4:	2300      	movs	r3, #0
 80086c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80086c8:	2302      	movs	r3, #2
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80086d0:	4619      	mov	r1, r3
 80086d2:	481e      	ldr	r0, [pc, #120]	; (800874c <HAL_TIM_Encoder_MspInit+0x1b8>)
 80086d4:	f001 f8b8 	bl	8009848 <HAL_GPIO_Init>
}
 80086d8:	e030      	b.n	800873c <HAL_TIM_Encoder_MspInit+0x1a8>
  else if(htim_encoder->Instance==TIM8)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1e      	ldr	r2, [pc, #120]	; (8008758 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d12b      	bne.n	800873c <HAL_TIM_Encoder_MspInit+0x1a8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80086e4:	2300      	movs	r3, #0
 80086e6:	613b      	str	r3, [r7, #16]
 80086e8:	4b17      	ldr	r3, [pc, #92]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ec:	4a16      	ldr	r2, [pc, #88]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086ee:	f043 0302 	orr.w	r3, r3, #2
 80086f2:	6453      	str	r3, [r2, #68]	; 0x44
 80086f4:	4b14      	ldr	r3, [pc, #80]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 80086f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f8:	f003 0302 	and.w	r3, r3, #2
 80086fc:	613b      	str	r3, [r7, #16]
 80086fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008700:	2300      	movs	r3, #0
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	4b10      	ldr	r3, [pc, #64]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008708:	4a0f      	ldr	r2, [pc, #60]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 800870a:	f043 0304 	orr.w	r3, r3, #4
 800870e:	6313      	str	r3, [r2, #48]	; 0x30
 8008710:	4b0d      	ldr	r3, [pc, #52]	; (8008748 <HAL_TIM_Encoder_MspInit+0x1b4>)
 8008712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008714:	f003 0304 	and.w	r3, r3, #4
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Encoder_M4_A_Pin|Encoder_M4_B_Pin;
 800871c:	23c0      	movs	r3, #192	; 0xc0
 800871e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008720:	2302      	movs	r3, #2
 8008722:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008724:	2300      	movs	r3, #0
 8008726:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008728:	2300      	movs	r3, #0
 800872a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800872c:	2303      	movs	r3, #3
 800872e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008730:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008734:	4619      	mov	r1, r3
 8008736:	4809      	ldr	r0, [pc, #36]	; (800875c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8008738:	f001 f886 	bl	8009848 <HAL_GPIO_Init>
}
 800873c:	bf00      	nop
 800873e:	3740      	adds	r7, #64	; 0x40
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	40010000 	.word	0x40010000
 8008748:	40023800 	.word	0x40023800
 800874c:	40020000 	.word	0x40020000
 8008750:	40000400 	.word	0x40000400
 8008754:	40000c00 	.word	0x40000c00
 8008758:	40010400 	.word	0x40010400
 800875c:	40020800 	.word	0x40020800

08008760 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008770:	d10d      	bne.n	800878e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	4b09      	ldr	r3, [pc, #36]	; (800879c <HAL_TIM_PWM_MspInit+0x3c>)
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	4a08      	ldr	r2, [pc, #32]	; (800879c <HAL_TIM_PWM_MspInit+0x3c>)
 800877c:	f043 0301 	orr.w	r3, r3, #1
 8008780:	6413      	str	r3, [r2, #64]	; 0x40
 8008782:	4b06      	ldr	r3, [pc, #24]	; (800879c <HAL_TIM_PWM_MspInit+0x3c>)
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	f003 0301 	and.w	r3, r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40023800 	.word	0x40023800

080087a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a0e      	ldr	r2, [pc, #56]	; (80087e8 <HAL_TIM_Base_MspInit+0x48>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d115      	bne.n	80087de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	4b0d      	ldr	r3, [pc, #52]	; (80087ec <HAL_TIM_Base_MspInit+0x4c>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	4a0c      	ldr	r2, [pc, #48]	; (80087ec <HAL_TIM_Base_MspInit+0x4c>)
 80087bc:	f043 0304 	orr.w	r3, r3, #4
 80087c0:	6413      	str	r3, [r2, #64]	; 0x40
 80087c2:	4b0a      	ldr	r3, [pc, #40]	; (80087ec <HAL_TIM_Base_MspInit+0x4c>)
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	f003 0304 	and.w	r3, r3, #4
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	201e      	movs	r0, #30
 80087d4:	f000 fbff 	bl	8008fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80087d8:	201e      	movs	r0, #30
 80087da:	f000 fc18 	bl	800900e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80087de:	bf00      	nop
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40000800 	.word	0x40000800
 80087ec:	40023800 	.word	0x40023800

080087f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08a      	sub	sp, #40	; 0x28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f8:	f107 0314 	add.w	r3, r7, #20
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	605a      	str	r2, [r3, #4]
 8008802:	609a      	str	r2, [r3, #8]
 8008804:	60da      	str	r2, [r3, #12]
 8008806:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008810:	d13c      	bne.n	800888c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]
 8008816:	4b1f      	ldr	r3, [pc, #124]	; (8008894 <HAL_TIM_MspPostInit+0xa4>)
 8008818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800881a:	4a1e      	ldr	r2, [pc, #120]	; (8008894 <HAL_TIM_MspPostInit+0xa4>)
 800881c:	f043 0301 	orr.w	r3, r3, #1
 8008820:	6313      	str	r3, [r2, #48]	; 0x30
 8008822:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <HAL_TIM_MspPostInit+0xa4>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	613b      	str	r3, [r7, #16]
 800882c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800882e:	2300      	movs	r3, #0
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	4b18      	ldr	r3, [pc, #96]	; (8008894 <HAL_TIM_MspPostInit+0xa4>)
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	4a17      	ldr	r2, [pc, #92]	; (8008894 <HAL_TIM_MspPostInit+0xa4>)
 8008838:	f043 0302 	orr.w	r3, r3, #2
 800883c:	6313      	str	r3, [r2, #48]	; 0x30
 800883e:	4b15      	ldr	r3, [pc, #84]	; (8008894 <HAL_TIM_MspPostInit+0xa4>)
 8008840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = PWM_M3_Pin|PWM_M4_Pin|PWM_M1_Pin;
 800884a:	232c      	movs	r3, #44	; 0x2c
 800884c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800884e:	2302      	movs	r3, #2
 8008850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008852:	2300      	movs	r3, #0
 8008854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008856:	2300      	movs	r3, #0
 8008858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800885a:	2301      	movs	r3, #1
 800885c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800885e:	f107 0314 	add.w	r3, r7, #20
 8008862:	4619      	mov	r1, r3
 8008864:	480c      	ldr	r0, [pc, #48]	; (8008898 <HAL_TIM_MspPostInit+0xa8>)
 8008866:	f000 ffef 	bl	8009848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM_M2_Pin;
 800886a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800886e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008870:	2302      	movs	r3, #2
 8008872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008874:	2300      	movs	r3, #0
 8008876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008878:	2300      	movs	r3, #0
 800887a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800887c:	2301      	movs	r3, #1
 800887e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_M2_GPIO_Port, &GPIO_InitStruct);
 8008880:	f107 0314 	add.w	r3, r7, #20
 8008884:	4619      	mov	r1, r3
 8008886:	4805      	ldr	r0, [pc, #20]	; (800889c <HAL_TIM_MspPostInit+0xac>)
 8008888:	f000 ffde 	bl	8009848 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800888c:	bf00      	nop
 800888e:	3728      	adds	r7, #40	; 0x28
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40023800 	.word	0x40023800
 8008898:	40020000 	.word	0x40020000
 800889c:	40020400 	.word	0x40020400

080088a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08a      	sub	sp, #40	; 0x28
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a8:	f107 0314 	add.w	r3, r7, #20
 80088ac:	2200      	movs	r2, #0
 80088ae:	601a      	str	r2, [r3, #0]
 80088b0:	605a      	str	r2, [r3, #4]
 80088b2:	609a      	str	r2, [r3, #8]
 80088b4:	60da      	str	r2, [r3, #12]
 80088b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a5b      	ldr	r2, [pc, #364]	; (8008a2c <HAL_UART_MspInit+0x18c>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	f040 80af 	bne.w	8008a22 <HAL_UART_MspInit+0x182>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80088c4:	2300      	movs	r3, #0
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	4b59      	ldr	r3, [pc, #356]	; (8008a30 <HAL_UART_MspInit+0x190>)
 80088ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088cc:	4a58      	ldr	r2, [pc, #352]	; (8008a30 <HAL_UART_MspInit+0x190>)
 80088ce:	f043 0310 	orr.w	r3, r3, #16
 80088d2:	6453      	str	r3, [r2, #68]	; 0x44
 80088d4:	4b56      	ldr	r3, [pc, #344]	; (8008a30 <HAL_UART_MspInit+0x190>)
 80088d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d8:	f003 0310 	and.w	r3, r3, #16
 80088dc:	613b      	str	r3, [r7, #16]
 80088de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088e0:	2300      	movs	r3, #0
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	4b52      	ldr	r3, [pc, #328]	; (8008a30 <HAL_UART_MspInit+0x190>)
 80088e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e8:	4a51      	ldr	r2, [pc, #324]	; (8008a30 <HAL_UART_MspInit+0x190>)
 80088ea:	f043 0301 	orr.w	r3, r3, #1
 80088ee:	6313      	str	r3, [r2, #48]	; 0x30
 80088f0:	4b4f      	ldr	r3, [pc, #316]	; (8008a30 <HAL_UART_MspInit+0x190>)
 80088f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f4:	f003 0301 	and.w	r3, r3, #1
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80088fc:	2300      	movs	r3, #0
 80088fe:	60bb      	str	r3, [r7, #8]
 8008900:	4b4b      	ldr	r3, [pc, #300]	; (8008a30 <HAL_UART_MspInit+0x190>)
 8008902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008904:	4a4a      	ldr	r2, [pc, #296]	; (8008a30 <HAL_UART_MspInit+0x190>)
 8008906:	f043 0302 	orr.w	r3, r3, #2
 800890a:	6313      	str	r3, [r2, #48]	; 0x30
 800890c:	4b48      	ldr	r3, [pc, #288]	; (8008a30 <HAL_UART_MspInit+0x190>)
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	f003 0302 	and.w	r3, r3, #2
 8008914:	60bb      	str	r3, [r7, #8]
 8008916:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800891c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800891e:	2302      	movs	r3, #2
 8008920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008922:	2300      	movs	r3, #0
 8008924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008926:	2303      	movs	r3, #3
 8008928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800892a:	2307      	movs	r3, #7
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800892e:	f107 0314 	add.w	r3, r7, #20
 8008932:	4619      	mov	r1, r3
 8008934:	483f      	ldr	r0, [pc, #252]	; (8008a34 <HAL_UART_MspInit+0x194>)
 8008936:	f000 ff87 	bl	8009848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800893a:	2340      	movs	r3, #64	; 0x40
 800893c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800893e:	2302      	movs	r3, #2
 8008940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008946:	2303      	movs	r3, #3
 8008948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800894a:	2307      	movs	r3, #7
 800894c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800894e:	f107 0314 	add.w	r3, r7, #20
 8008952:	4619      	mov	r1, r3
 8008954:	4838      	ldr	r0, [pc, #224]	; (8008a38 <HAL_UART_MspInit+0x198>)
 8008956:	f000 ff77 	bl	8009848 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800895a:	4b38      	ldr	r3, [pc, #224]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 800895c:	4a38      	ldr	r2, [pc, #224]	; (8008a40 <HAL_UART_MspInit+0x1a0>)
 800895e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008960:	4b36      	ldr	r3, [pc, #216]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 8008962:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008966:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008968:	4b34      	ldr	r3, [pc, #208]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 800896a:	2200      	movs	r2, #0
 800896c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800896e:	4b33      	ldr	r3, [pc, #204]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 8008970:	2200      	movs	r2, #0
 8008972:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008974:	4b31      	ldr	r3, [pc, #196]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 8008976:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800897a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800897c:	4b2f      	ldr	r3, [pc, #188]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 800897e:	2200      	movs	r2, #0
 8008980:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008982:	4b2e      	ldr	r3, [pc, #184]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 8008984:	2200      	movs	r2, #0
 8008986:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008988:	4b2c      	ldr	r3, [pc, #176]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 800898a:	2200      	movs	r2, #0
 800898c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800898e:	4b2b      	ldr	r3, [pc, #172]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 8008990:	2200      	movs	r2, #0
 8008992:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008994:	4b29      	ldr	r3, [pc, #164]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 8008996:	2200      	movs	r2, #0
 8008998:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800899a:	4828      	ldr	r0, [pc, #160]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 800899c:	f000 fb52 	bl	8009044 <HAL_DMA_Init>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 80089a6:	f7fe f809 	bl	80069bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a23      	ldr	r2, [pc, #140]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 80089ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80089b0:	4a22      	ldr	r2, [pc, #136]	; (8008a3c <HAL_UART_MspInit+0x19c>)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80089b6:	4b23      	ldr	r3, [pc, #140]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089b8:	4a23      	ldr	r2, [pc, #140]	; (8008a48 <HAL_UART_MspInit+0x1a8>)
 80089ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80089bc:	4b21      	ldr	r3, [pc, #132]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80089c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80089c4:	4b1f      	ldr	r3, [pc, #124]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089c6:	2240      	movs	r2, #64	; 0x40
 80089c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80089ca:	4b1e      	ldr	r3, [pc, #120]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80089d0:	4b1c      	ldr	r3, [pc, #112]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80089d8:	4b1a      	ldr	r3, [pc, #104]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089da:	2200      	movs	r2, #0
 80089dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80089de:	4b19      	ldr	r3, [pc, #100]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80089e4:	4b17      	ldr	r3, [pc, #92]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80089ea:	4b16      	ldr	r3, [pc, #88]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089f0:	4b14      	ldr	r3, [pc, #80]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80089f6:	4813      	ldr	r0, [pc, #76]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 80089f8:	f000 fb24 	bl	8009044 <HAL_DMA_Init>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8008a02:	f7fd ffdb 	bl	80069bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4a0e      	ldr	r2, [pc, #56]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38
 8008a0c:	4a0d      	ldr	r2, [pc, #52]	; (8008a44 <HAL_UART_MspInit+0x1a4>)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008a12:	2200      	movs	r2, #0
 8008a14:	2100      	movs	r1, #0
 8008a16:	2025      	movs	r0, #37	; 0x25
 8008a18:	f000 fadd 	bl	8008fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008a1c:	2025      	movs	r0, #37	; 0x25
 8008a1e:	f000 faf6 	bl	800900e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008a22:	bf00      	nop
 8008a24:	3728      	adds	r7, #40	; 0x28
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40011000 	.word	0x40011000
 8008a30:	40023800 	.word	0x40023800
 8008a34:	40020000 	.word	0x40020000
 8008a38:	40020400 	.word	0x40020400
 8008a3c:	20000454 	.word	0x20000454
 8008a40:	40026440 	.word	0x40026440
 8008a44:	200004b4 	.word	0x200004b4
 8008a48:	400264b8 	.word	0x400264b8

08008a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008a50:	e7fe      	b.n	8008a50 <NMI_Handler+0x4>

08008a52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a52:	b480      	push	{r7}
 8008a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a56:	e7fe      	b.n	8008a56 <HardFault_Handler+0x4>

08008a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a5c:	e7fe      	b.n	8008a5c <MemManage_Handler+0x4>

08008a5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a62:	e7fe      	b.n	8008a62 <BusFault_Handler+0x4>

08008a64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a68:	e7fe      	b.n	8008a68 <UsageFault_Handler+0x4>

08008a6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a6e:	bf00      	nop
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a7c:	bf00      	nop
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a86:	b480      	push	{r7}
 8008a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a8a:	bf00      	nop
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a98:	f000 f97e 	bl	8008d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a9c:	bf00      	nop
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008aa4:	4802      	ldr	r0, [pc, #8]	; (8008ab0 <TIM4_IRQHandler+0x10>)
 8008aa6:	f003 f979 	bl	800bd9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008aaa:	bf00      	nop
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000334 	.word	0x20000334

08008ab4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008ab8:	4802      	ldr	r0, [pc, #8]	; (8008ac4 <USART1_IRQHandler+0x10>)
 8008aba:	f004 f8a3 	bl	800cc04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008abe:	bf00      	nop
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	2000040c 	.word	0x2000040c

08008ac8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008acc:	4802      	ldr	r0, [pc, #8]	; (8008ad8 <DMA2_Stream2_IRQHandler+0x10>)
 8008ace:	f000 fc51 	bl	8009374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008ad2:	bf00      	nop
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000454 	.word	0x20000454

08008adc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008ae0:	4802      	ldr	r0, [pc, #8]	; (8008aec <DMA2_Stream7_IRQHandler+0x10>)
 8008ae2:	f000 fc47 	bl	8009374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008ae6:	bf00      	nop
 8008ae8:	bd80      	pop	{r7, pc}
 8008aea:	bf00      	nop
 8008aec:	200004b4 	.word	0x200004b4

08008af0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	af00      	add	r7, sp, #0
  return 1;
 8008af4:	2301      	movs	r3, #1
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <_kill>:

int _kill(int pid, int sig)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008b0a:	f006 fd05 	bl	800f518 <__errno>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2216      	movs	r2, #22
 8008b12:	601a      	str	r2, [r3, #0]
  return -1;
 8008b14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <_exit>:

void _exit (int status)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008b28:	f04f 31ff 	mov.w	r1, #4294967295
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f7ff ffe7 	bl	8008b00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008b32:	e7fe      	b.n	8008b32 <_exit+0x12>

08008b34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
 8008b44:	e00a      	b.n	8008b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008b46:	f3af 8000 	nop.w
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	1c5a      	adds	r2, r3, #1
 8008b50:	60ba      	str	r2, [r7, #8]
 8008b52:	b2ca      	uxtb	r2, r1
 8008b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b56:	697b      	ldr	r3, [r7, #20]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	dbf0      	blt.n	8008b46 <_read+0x12>
  }

  return len;
 8008b64:	687b      	ldr	r3, [r7, #4]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3718      	adds	r7, #24
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b086      	sub	sp, #24
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	60f8      	str	r0, [r7, #12]
 8008b76:	60b9      	str	r1, [r7, #8]
 8008b78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	617b      	str	r3, [r7, #20]
 8008b7e:	e009      	b.n	8008b94 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	60ba      	str	r2, [r7, #8]
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	3301      	adds	r3, #1
 8008b92:	617b      	str	r3, [r7, #20]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	dbf1      	blt.n	8008b80 <_write+0x12>
  }
  return len;
 8008b9c:	687b      	ldr	r3, [r7, #4]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3718      	adds	r7, #24
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <_close>:

int _close(int file)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008bae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bce:	605a      	str	r2, [r3, #4]
  return 0;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <_isatty>:

int _isatty(int file)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008be6:	2301      	movs	r3, #1
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3714      	adds	r7, #20
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008c18:	4a14      	ldr	r2, [pc, #80]	; (8008c6c <_sbrk+0x5c>)
 8008c1a:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <_sbrk+0x60>)
 8008c1c:	1ad3      	subs	r3, r2, r3
 8008c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008c24:	4b13      	ldr	r3, [pc, #76]	; (8008c74 <_sbrk+0x64>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d102      	bne.n	8008c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008c2c:	4b11      	ldr	r3, [pc, #68]	; (8008c74 <_sbrk+0x64>)
 8008c2e:	4a12      	ldr	r2, [pc, #72]	; (8008c78 <_sbrk+0x68>)
 8008c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008c32:	4b10      	ldr	r3, [pc, #64]	; (8008c74 <_sbrk+0x64>)
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4413      	add	r3, r2
 8008c3a:	693a      	ldr	r2, [r7, #16]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d207      	bcs.n	8008c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008c40:	f006 fc6a 	bl	800f518 <__errno>
 8008c44:	4603      	mov	r3, r0
 8008c46:	220c      	movs	r2, #12
 8008c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4e:	e009      	b.n	8008c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008c50:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <_sbrk+0x64>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <_sbrk+0x64>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	4a05      	ldr	r2, [pc, #20]	; (8008c74 <_sbrk+0x64>)
 8008c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008c62:	68fb      	ldr	r3, [r7, #12]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3718      	adds	r7, #24
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	20020000 	.word	0x20020000
 8008c70:	00000400 	.word	0x00000400
 8008c74:	20001260 	.word	0x20001260
 8008c78:	200013b8 	.word	0x200013b8

08008c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008c80:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <SystemInit+0x20>)
 8008c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c86:	4a05      	ldr	r2, [pc, #20]	; (8008c9c <SystemInit+0x20>)
 8008c88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008c90:	bf00      	nop
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr
 8008c9a:	bf00      	nop
 8008c9c:	e000ed00 	.word	0xe000ed00

08008ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008ca4:	f7ff ffea 	bl	8008c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008ca8:	480c      	ldr	r0, [pc, #48]	; (8008cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008caa:	490d      	ldr	r1, [pc, #52]	; (8008ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008cac:	4a0d      	ldr	r2, [pc, #52]	; (8008ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008cb0:	e002      	b.n	8008cb8 <LoopCopyDataInit>

08008cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008cb6:	3304      	adds	r3, #4

08008cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008cbc:	d3f9      	bcc.n	8008cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008cbe:	4a0a      	ldr	r2, [pc, #40]	; (8008ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008cc0:	4c0a      	ldr	r4, [pc, #40]	; (8008cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8008cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008cc4:	e001      	b.n	8008cca <LoopFillZerobss>

08008cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008cc8:	3204      	adds	r2, #4

08008cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ccc:	d3fb      	bcc.n	8008cc6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8008cce:	f006 fc29 	bl	800f524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008cd2:	f7fc f8dd 	bl	8004e90 <main>
  bx  lr    
 8008cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ce0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8008ce4:	0801357c 	.word	0x0801357c
  ldr r2, =_sbss
 8008ce8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8008cec:	200013b4 	.word	0x200013b4

08008cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008cf0:	e7fe      	b.n	8008cf0 <ADC_IRQHandler>
	...

08008cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	; (8008d34 <HAL_Init+0x40>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a0d      	ldr	r2, [pc, #52]	; (8008d34 <HAL_Init+0x40>)
 8008cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d04:	4b0b      	ldr	r3, [pc, #44]	; (8008d34 <HAL_Init+0x40>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a0a      	ldr	r2, [pc, #40]	; (8008d34 <HAL_Init+0x40>)
 8008d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d10:	4b08      	ldr	r3, [pc, #32]	; (8008d34 <HAL_Init+0x40>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a07      	ldr	r2, [pc, #28]	; (8008d34 <HAL_Init+0x40>)
 8008d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d1c:	2003      	movs	r0, #3
 8008d1e:	f000 f94f 	bl	8008fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d22:	200f      	movs	r0, #15
 8008d24:	f000 f808 	bl	8008d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d28:	f7ff fbc4 	bl	80084b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	40023c00 	.word	0x40023c00

08008d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d40:	4b12      	ldr	r3, [pc, #72]	; (8008d8c <HAL_InitTick+0x54>)
 8008d42:	681a      	ldr	r2, [r3, #0]
 8008d44:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <HAL_InitTick+0x58>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d56:	4618      	mov	r0, r3
 8008d58:	f000 f967 	bl	800902a <HAL_SYSTICK_Config>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d001      	beq.n	8008d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e00e      	b.n	8008d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2b0f      	cmp	r3, #15
 8008d6a:	d80a      	bhi.n	8008d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	6879      	ldr	r1, [r7, #4]
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295
 8008d74:	f000 f92f 	bl	8008fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008d78:	4a06      	ldr	r2, [pc, #24]	; (8008d94 <HAL_InitTick+0x5c>)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	e000      	b.n	8008d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3708      	adds	r7, #8
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	20000000 	.word	0x20000000
 8008d90:	20000008 	.word	0x20000008
 8008d94:	20000004 	.word	0x20000004

08008d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <HAL_IncTick+0x20>)
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	461a      	mov	r2, r3
 8008da2:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <HAL_IncTick+0x24>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4413      	add	r3, r2
 8008da8:	4a04      	ldr	r2, [pc, #16]	; (8008dbc <HAL_IncTick+0x24>)
 8008daa:	6013      	str	r3, [r2, #0]
}
 8008dac:	bf00      	nop
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop
 8008db8:	20000008 	.word	0x20000008
 8008dbc:	20001264 	.word	0x20001264

08008dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8008dc4:	4b03      	ldr	r3, [pc, #12]	; (8008dd4 <HAL_GetTick+0x14>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20001264 	.word	0x20001264

08008dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008de0:	f7ff ffee 	bl	8008dc0 <HAL_GetTick>
 8008de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d005      	beq.n	8008dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008df2:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <HAL_Delay+0x44>)
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	461a      	mov	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008dfe:	bf00      	nop
 8008e00:	f7ff ffde 	bl	8008dc0 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d8f7      	bhi.n	8008e00 <HAL_Delay+0x28>
  {
  }
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000008 	.word	0x20000008

08008e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f003 0307 	and.w	r3, r3, #7
 8008e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e30:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <__NVIC_SetPriorityGrouping+0x44>)
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008e52:	4a04      	ldr	r2, [pc, #16]	; (8008e64 <__NVIC_SetPriorityGrouping+0x44>)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	60d3      	str	r3, [r2, #12]
}
 8008e58:	bf00      	nop
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	e000ed00 	.word	0xe000ed00

08008e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008e6c:	4b04      	ldr	r3, [pc, #16]	; (8008e80 <__NVIC_GetPriorityGrouping+0x18>)
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	0a1b      	lsrs	r3, r3, #8
 8008e72:	f003 0307 	and.w	r3, r3, #7
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	e000ed00 	.word	0xe000ed00

08008e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	db0b      	blt.n	8008eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008e96:	79fb      	ldrb	r3, [r7, #7]
 8008e98:	f003 021f 	and.w	r2, r3, #31
 8008e9c:	4907      	ldr	r1, [pc, #28]	; (8008ebc <__NVIC_EnableIRQ+0x38>)
 8008e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ea2:	095b      	lsrs	r3, r3, #5
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8008eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	e000e100 	.word	0xe000e100

08008ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	6039      	str	r1, [r7, #0]
 8008eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	db0a      	blt.n	8008eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	490c      	ldr	r1, [pc, #48]	; (8008f0c <__NVIC_SetPriority+0x4c>)
 8008eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ede:	0112      	lsls	r2, r2, #4
 8008ee0:	b2d2      	uxtb	r2, r2
 8008ee2:	440b      	add	r3, r1
 8008ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ee8:	e00a      	b.n	8008f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	4908      	ldr	r1, [pc, #32]	; (8008f10 <__NVIC_SetPriority+0x50>)
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	f003 030f 	and.w	r3, r3, #15
 8008ef6:	3b04      	subs	r3, #4
 8008ef8:	0112      	lsls	r2, r2, #4
 8008efa:	b2d2      	uxtb	r2, r2
 8008efc:	440b      	add	r3, r1
 8008efe:	761a      	strb	r2, [r3, #24]
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	e000e100 	.word	0xe000e100
 8008f10:	e000ed00 	.word	0xe000ed00

08008f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b089      	sub	sp, #36	; 0x24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f003 0307 	and.w	r3, r3, #7
 8008f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	f1c3 0307 	rsb	r3, r3, #7
 8008f2e:	2b04      	cmp	r3, #4
 8008f30:	bf28      	it	cs
 8008f32:	2304      	movcs	r3, #4
 8008f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	2b06      	cmp	r3, #6
 8008f3c:	d902      	bls.n	8008f44 <NVIC_EncodePriority+0x30>
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	3b03      	subs	r3, #3
 8008f42:	e000      	b.n	8008f46 <NVIC_EncodePriority+0x32>
 8008f44:	2300      	movs	r3, #0
 8008f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	43da      	mvns	r2, r3
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	401a      	ands	r2, r3
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	fa01 f303 	lsl.w	r3, r1, r3
 8008f66:	43d9      	mvns	r1, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008f6c:	4313      	orrs	r3, r2
         );
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3724      	adds	r7, #36	; 0x24
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
	...

08008f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	3b01      	subs	r3, #1
 8008f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f8c:	d301      	bcc.n	8008f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e00f      	b.n	8008fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008f92:	4a0a      	ldr	r2, [pc, #40]	; (8008fbc <SysTick_Config+0x40>)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008f9a:	210f      	movs	r1, #15
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008fa0:	f7ff ff8e 	bl	8008ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008fa4:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <SysTick_Config+0x40>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008faa:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <SysTick_Config+0x40>)
 8008fac:	2207      	movs	r2, #7
 8008fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3708      	adds	r7, #8
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	e000e010 	.word	0xe000e010

08008fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7ff ff29 	bl	8008e20 <__NVIC_SetPriorityGrouping>
}
 8008fce:	bf00      	nop
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b086      	sub	sp, #24
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	4603      	mov	r3, r0
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008fe8:	f7ff ff3e 	bl	8008e68 <__NVIC_GetPriorityGrouping>
 8008fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008fee:	687a      	ldr	r2, [r7, #4]
 8008ff0:	68b9      	ldr	r1, [r7, #8]
 8008ff2:	6978      	ldr	r0, [r7, #20]
 8008ff4:	f7ff ff8e 	bl	8008f14 <NVIC_EncodePriority>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ffe:	4611      	mov	r1, r2
 8009000:	4618      	mov	r0, r3
 8009002:	f7ff ff5d 	bl	8008ec0 <__NVIC_SetPriority>
}
 8009006:	bf00      	nop
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b082      	sub	sp, #8
 8009012:	af00      	add	r7, sp, #0
 8009014:	4603      	mov	r3, r0
 8009016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800901c:	4618      	mov	r0, r3
 800901e:	f7ff ff31 	bl	8008e84 <__NVIC_EnableIRQ>
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b082      	sub	sp, #8
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7ff ffa2 	bl	8008f7c <SysTick_Config>
 8009038:	4603      	mov	r3, r0
}
 800903a:	4618      	mov	r0, r3
 800903c:	3708      	adds	r7, #8
 800903e:	46bd      	mov	sp, r7
 8009040:	bd80      	pop	{r7, pc}
	...

08009044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b086      	sub	sp, #24
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009050:	f7ff feb6 	bl	8008dc0 <HAL_GetTick>
 8009054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	e099      	b.n	8009194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f022 0201 	bic.w	r2, r2, #1
 800907e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009080:	e00f      	b.n	80090a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009082:	f7ff fe9d 	bl	8008dc0 <HAL_GetTick>
 8009086:	4602      	mov	r2, r0
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	2b05      	cmp	r3, #5
 800908e:	d908      	bls.n	80090a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2220      	movs	r2, #32
 8009094:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2203      	movs	r2, #3
 800909a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e078      	b.n	8009194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e8      	bne.n	8009082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4b38      	ldr	r3, [pc, #224]	; (800919c <HAL_DMA_Init+0x158>)
 80090bc:	4013      	ands	r3, r2
 80090be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80090ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80090da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80090e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	2b04      	cmp	r3, #4
 80090fa:	d107      	bne.n	800910c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009104:	4313      	orrs	r3, r2
 8009106:	697a      	ldr	r2, [r7, #20]
 8009108:	4313      	orrs	r3, r2
 800910a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	697a      	ldr	r2, [r7, #20]
 8009112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f023 0307 	bic.w	r3, r3, #7
 8009122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	4313      	orrs	r3, r2
 800912c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b04      	cmp	r3, #4
 8009134:	d117      	bne.n	8009166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913a:	697a      	ldr	r2, [r7, #20]
 800913c:	4313      	orrs	r3, r2
 800913e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00e      	beq.n	8009166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fb01 	bl	8009750 <DMA_CheckFifoParam>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	d008      	beq.n	8009166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2240      	movs	r2, #64	; 0x40
 8009158:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009162:	2301      	movs	r3, #1
 8009164:	e016      	b.n	8009194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fab8 	bl	80096e4 <DMA_CalcBaseAndBitshift>
 8009174:	4603      	mov	r3, r0
 8009176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800917c:	223f      	movs	r2, #63	; 0x3f
 800917e:	409a      	lsls	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3718      	adds	r7, #24
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	f010803f 	.word	0xf010803f

080091a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b086      	sub	sp, #24
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	60f8      	str	r0, [r7, #12]
 80091a8:	60b9      	str	r1, [r7, #8]
 80091aa:	607a      	str	r2, [r7, #4]
 80091ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091ae:	2300      	movs	r3, #0
 80091b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d101      	bne.n	80091c6 <HAL_DMA_Start_IT+0x26>
 80091c2:	2302      	movs	r3, #2
 80091c4:	e040      	b.n	8009248 <HAL_DMA_Start_IT+0xa8>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2201      	movs	r2, #1
 80091ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d12f      	bne.n	800923a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2202      	movs	r2, #2
 80091de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2200      	movs	r2, #0
 80091e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	687a      	ldr	r2, [r7, #4]
 80091ec:	68b9      	ldr	r1, [r7, #8]
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 fa4a 	bl	8009688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f8:	223f      	movs	r2, #63	; 0x3f
 80091fa:	409a      	lsls	r2, r3
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681a      	ldr	r2, [r3, #0]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f042 0216 	orr.w	r2, r2, #22
 800920e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009214:	2b00      	cmp	r3, #0
 8009216:	d007      	beq.n	8009228 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0208 	orr.w	r2, r2, #8
 8009226:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0201 	orr.w	r2, r2, #1
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	e005      	b.n	8009246 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009242:	2302      	movs	r3, #2
 8009244:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3718      	adds	r7, #24
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800925c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800925e:	f7ff fdaf 	bl	8008dc0 <HAL_GetTick>
 8009262:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b02      	cmp	r3, #2
 800926e:	d008      	beq.n	8009282 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2280      	movs	r2, #128	; 0x80
 8009274:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e052      	b.n	8009328 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f022 0216 	bic.w	r2, r2, #22
 8009290:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	695a      	ldr	r2, [r3, #20]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092a0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d103      	bne.n	80092b2 <HAL_DMA_Abort+0x62>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d007      	beq.n	80092c2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 0208 	bic.w	r2, r2, #8
 80092c0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0201 	bic.w	r2, r2, #1
 80092d0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092d2:	e013      	b.n	80092fc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80092d4:	f7ff fd74 	bl	8008dc0 <HAL_GetTick>
 80092d8:	4602      	mov	r2, r0
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	1ad3      	subs	r3, r2, r3
 80092de:	2b05      	cmp	r3, #5
 80092e0:	d90c      	bls.n	80092fc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2220      	movs	r2, #32
 80092e6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2203      	movs	r2, #3
 80092ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e015      	b.n	8009328 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1e4      	bne.n	80092d4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800930e:	223f      	movs	r2, #63	; 0x3f
 8009310:	409a      	lsls	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b02      	cmp	r3, #2
 8009342:	d004      	beq.n	800934e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2280      	movs	r2, #128	; 0x80
 8009348:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e00c      	b.n	8009368 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2205      	movs	r2, #5
 8009352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f022 0201 	bic.w	r2, r2, #1
 8009364:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009366:	2300      	movs	r3, #0
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800937c:	2300      	movs	r3, #0
 800937e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009380:	4b8e      	ldr	r3, [pc, #568]	; (80095bc <HAL_DMA_IRQHandler+0x248>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a8e      	ldr	r2, [pc, #568]	; (80095c0 <HAL_DMA_IRQHandler+0x24c>)
 8009386:	fba2 2303 	umull	r2, r3, r2, r3
 800938a:	0a9b      	lsrs	r3, r3, #10
 800938c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800939e:	2208      	movs	r2, #8
 80093a0:	409a      	lsls	r2, r3
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	4013      	ands	r3, r2
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01a      	beq.n	80093e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d013      	beq.n	80093e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0204 	bic.w	r2, r2, #4
 80093c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093cc:	2208      	movs	r2, #8
 80093ce:	409a      	lsls	r2, r3
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d8:	f043 0201 	orr.w	r2, r3, #1
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093e4:	2201      	movs	r2, #1
 80093e6:	409a      	lsls	r2, r3
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4013      	ands	r3, r2
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d012      	beq.n	8009416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009402:	2201      	movs	r2, #1
 8009404:	409a      	lsls	r2, r3
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940e:	f043 0202 	orr.w	r2, r3, #2
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800941a:	2204      	movs	r2, #4
 800941c:	409a      	lsls	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4013      	ands	r3, r2
 8009422:	2b00      	cmp	r3, #0
 8009424:	d012      	beq.n	800944c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0302 	and.w	r3, r3, #2
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00b      	beq.n	800944c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009438:	2204      	movs	r2, #4
 800943a:	409a      	lsls	r2, r3
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009444:	f043 0204 	orr.w	r2, r3, #4
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009450:	2210      	movs	r2, #16
 8009452:	409a      	lsls	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	4013      	ands	r3, r2
 8009458:	2b00      	cmp	r3, #0
 800945a:	d043      	beq.n	80094e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b00      	cmp	r3, #0
 8009468:	d03c      	beq.n	80094e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800946e:	2210      	movs	r2, #16
 8009470:	409a      	lsls	r2, r3
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d018      	beq.n	80094b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800948e:	2b00      	cmp	r3, #0
 8009490:	d108      	bne.n	80094a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009496:	2b00      	cmp	r3, #0
 8009498:	d024      	beq.n	80094e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
 80094a2:	e01f      	b.n	80094e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d01b      	beq.n	80094e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	4798      	blx	r3
 80094b4:	e016      	b.n	80094e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d107      	bne.n	80094d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 0208 	bic.w	r2, r2, #8
 80094d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d003      	beq.n	80094e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094e8:	2220      	movs	r2, #32
 80094ea:	409a      	lsls	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4013      	ands	r3, r2
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 808f 	beq.w	8009614 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0310 	and.w	r3, r3, #16
 8009500:	2b00      	cmp	r3, #0
 8009502:	f000 8087 	beq.w	8009614 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800950a:	2220      	movs	r2, #32
 800950c:	409a      	lsls	r2, r3
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b05      	cmp	r3, #5
 800951c:	d136      	bne.n	800958c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0216 	bic.w	r2, r2, #22
 800952c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	695a      	ldr	r2, [r3, #20]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800953c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	d103      	bne.n	800954e <HAL_DMA_IRQHandler+0x1da>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800954a:	2b00      	cmp	r3, #0
 800954c:	d007      	beq.n	800955e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f022 0208 	bic.w	r2, r2, #8
 800955c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009562:	223f      	movs	r2, #63	; 0x3f
 8009564:	409a      	lsls	r2, r3
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800957e:	2b00      	cmp	r3, #0
 8009580:	d07e      	beq.n	8009680 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
        }
        return;
 800958a:	e079      	b.n	8009680 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009596:	2b00      	cmp	r3, #0
 8009598:	d01d      	beq.n	80095d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d10d      	bne.n	80095c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d031      	beq.n	8009614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	4798      	blx	r3
 80095b8:	e02c      	b.n	8009614 <HAL_DMA_IRQHandler+0x2a0>
 80095ba:	bf00      	nop
 80095bc:	20000000 	.word	0x20000000
 80095c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d023      	beq.n	8009614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3
 80095d4:	e01e      	b.n	8009614 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10f      	bne.n	8009604 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f022 0210 	bic.w	r2, r2, #16
 80095f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009608:	2b00      	cmp	r3, #0
 800960a:	d003      	beq.n	8009614 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009618:	2b00      	cmp	r3, #0
 800961a:	d032      	beq.n	8009682 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	d022      	beq.n	800966e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2205      	movs	r2, #5
 800962c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0201 	bic.w	r2, r2, #1
 800963e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	3301      	adds	r3, #1
 8009644:	60bb      	str	r3, [r7, #8]
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	429a      	cmp	r2, r3
 800964a:	d307      	bcc.n	800965c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f003 0301 	and.w	r3, r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1f2      	bne.n	8009640 <HAL_DMA_IRQHandler+0x2cc>
 800965a:	e000      	b.n	800965e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800965c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009672:	2b00      	cmp	r3, #0
 8009674:	d005      	beq.n	8009682 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	4798      	blx	r3
 800967e:	e000      	b.n	8009682 <HAL_DMA_IRQHandler+0x30e>
        return;
 8009680:	bf00      	nop
    }
  }
}
 8009682:	3718      	adds	r7, #24
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	60f8      	str	r0, [r7, #12]
 8009690:	60b9      	str	r1, [r7, #8]
 8009692:	607a      	str	r2, [r7, #4]
 8009694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80096a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	2b40      	cmp	r3, #64	; 0x40
 80096b4:	d108      	bne.n	80096c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80096c6:	e007      	b.n	80096d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	60da      	str	r2, [r3, #12]
}
 80096d8:	bf00      	nop
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	3b10      	subs	r3, #16
 80096f4:	4a14      	ldr	r2, [pc, #80]	; (8009748 <DMA_CalcBaseAndBitshift+0x64>)
 80096f6:	fba2 2303 	umull	r2, r3, r2, r3
 80096fa:	091b      	lsrs	r3, r3, #4
 80096fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80096fe:	4a13      	ldr	r2, [pc, #76]	; (800974c <DMA_CalcBaseAndBitshift+0x68>)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b03      	cmp	r3, #3
 8009710:	d909      	bls.n	8009726 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800971a:	f023 0303 	bic.w	r3, r3, #3
 800971e:	1d1a      	adds	r2, r3, #4
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	659a      	str	r2, [r3, #88]	; 0x58
 8009724:	e007      	b.n	8009736 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800972e:	f023 0303 	bic.w	r3, r3, #3
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800973a:	4618      	mov	r0, r3
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	aaaaaaab 	.word	0xaaaaaaab
 800974c:	080130c4 	.word	0x080130c4

08009750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d11f      	bne.n	80097aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b03      	cmp	r3, #3
 800976e:	d856      	bhi.n	800981e <DMA_CheckFifoParam+0xce>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <DMA_CheckFifoParam+0x28>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	08009789 	.word	0x08009789
 800977c:	0800979b 	.word	0x0800979b
 8009780:	08009789 	.word	0x08009789
 8009784:	0800981f 	.word	0x0800981f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800978c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d046      	beq.n	8009822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009798:	e043      	b.n	8009822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800979e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097a2:	d140      	bne.n	8009826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097a8:	e03d      	b.n	8009826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b2:	d121      	bne.n	80097f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d837      	bhi.n	800982a <DMA_CheckFifoParam+0xda>
 80097ba:	a201      	add	r2, pc, #4	; (adr r2, 80097c0 <DMA_CheckFifoParam+0x70>)
 80097bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c0:	080097d1 	.word	0x080097d1
 80097c4:	080097d7 	.word	0x080097d7
 80097c8:	080097d1 	.word	0x080097d1
 80097cc:	080097e9 	.word	0x080097e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	73fb      	strb	r3, [r7, #15]
      break;
 80097d4:	e030      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d025      	beq.n	800982e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80097e6:	e022      	b.n	800982e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80097f0:	d11f      	bne.n	8009832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80097f6:	e01c      	b.n	8009832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b02      	cmp	r3, #2
 80097fc:	d903      	bls.n	8009806 <DMA_CheckFifoParam+0xb6>
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2b03      	cmp	r3, #3
 8009802:	d003      	beq.n	800980c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009804:	e018      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	73fb      	strb	r3, [r7, #15]
      break;
 800980a:	e015      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00e      	beq.n	8009836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009818:	2301      	movs	r3, #1
 800981a:	73fb      	strb	r3, [r7, #15]
      break;
 800981c:	e00b      	b.n	8009836 <DMA_CheckFifoParam+0xe6>
      break;
 800981e:	bf00      	nop
 8009820:	e00a      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
      break;
 8009822:	bf00      	nop
 8009824:	e008      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
      break;
 8009826:	bf00      	nop
 8009828:	e006      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
      break;
 800982a:	bf00      	nop
 800982c:	e004      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
      break;
 800982e:	bf00      	nop
 8009830:	e002      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
      break;   
 8009832:	bf00      	nop
 8009834:	e000      	b.n	8009838 <DMA_CheckFifoParam+0xe8>
      break;
 8009836:	bf00      	nop
    }
  } 
  
  return status; 
 8009838:	7bfb      	ldrb	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop

08009848 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009848:	b480      	push	{r7}
 800984a:	b089      	sub	sp, #36	; 0x24
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009852:	2300      	movs	r3, #0
 8009854:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009856:	2300      	movs	r3, #0
 8009858:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800985a:	2300      	movs	r3, #0
 800985c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800985e:	2300      	movs	r3, #0
 8009860:	61fb      	str	r3, [r7, #28]
 8009862:	e165      	b.n	8009b30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009864:	2201      	movs	r2, #1
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	fa02 f303 	lsl.w	r3, r2, r3
 800986c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	4013      	ands	r3, r2
 8009876:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	429a      	cmp	r2, r3
 800987e:	f040 8154 	bne.w	8009b2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	2b01      	cmp	r3, #1
 800988c:	d005      	beq.n	800989a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009896:	2b02      	cmp	r3, #2
 8009898:	d130      	bne.n	80098fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	2203      	movs	r2, #3
 80098a6:	fa02 f303 	lsl.w	r3, r2, r3
 80098aa:	43db      	mvns	r3, r3
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	4013      	ands	r3, r2
 80098b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68da      	ldr	r2, [r3, #12]
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	005b      	lsls	r3, r3, #1
 80098ba:	fa02 f303 	lsl.w	r3, r2, r3
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80098d0:	2201      	movs	r2, #1
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	fa02 f303 	lsl.w	r3, r2, r3
 80098d8:	43db      	mvns	r3, r3
 80098da:	69ba      	ldr	r2, [r7, #24]
 80098dc:	4013      	ands	r3, r2
 80098de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	091b      	lsrs	r3, r3, #4
 80098e6:	f003 0201 	and.w	r2, r3, #1
 80098ea:	69fb      	ldr	r3, [r7, #28]
 80098ec:	fa02 f303 	lsl.w	r3, r2, r3
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	69ba      	ldr	r2, [r7, #24]
 80098fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	f003 0303 	and.w	r3, r3, #3
 8009904:	2b03      	cmp	r3, #3
 8009906:	d017      	beq.n	8009938 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	2203      	movs	r2, #3
 8009914:	fa02 f303 	lsl.w	r3, r2, r3
 8009918:	43db      	mvns	r3, r3
 800991a:	69ba      	ldr	r2, [r7, #24]
 800991c:	4013      	ands	r3, r2
 800991e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	689a      	ldr	r2, [r3, #8]
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	fa02 f303 	lsl.w	r3, r2, r3
 800992c:	69ba      	ldr	r2, [r7, #24]
 800992e:	4313      	orrs	r3, r2
 8009930:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	69ba      	ldr	r2, [r7, #24]
 8009936:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685b      	ldr	r3, [r3, #4]
 800993c:	f003 0303 	and.w	r3, r3, #3
 8009940:	2b02      	cmp	r3, #2
 8009942:	d123      	bne.n	800998c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	08da      	lsrs	r2, r3, #3
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	3208      	adds	r2, #8
 800994c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009950:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009952:	69fb      	ldr	r3, [r7, #28]
 8009954:	f003 0307 	and.w	r3, r3, #7
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	220f      	movs	r2, #15
 800995c:	fa02 f303 	lsl.w	r3, r2, r3
 8009960:	43db      	mvns	r3, r3
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	4013      	ands	r3, r2
 8009966:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	691a      	ldr	r2, [r3, #16]
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	f003 0307 	and.w	r3, r3, #7
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	fa02 f303 	lsl.w	r3, r2, r3
 8009978:	69ba      	ldr	r2, [r7, #24]
 800997a:	4313      	orrs	r3, r2
 800997c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	08da      	lsrs	r2, r3, #3
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3208      	adds	r2, #8
 8009986:	69b9      	ldr	r1, [r7, #24]
 8009988:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	2203      	movs	r2, #3
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
 800999c:	43db      	mvns	r3, r3
 800999e:	69ba      	ldr	r2, [r7, #24]
 80099a0:	4013      	ands	r3, r2
 80099a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f003 0203 	and.w	r2, r3, #3
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	005b      	lsls	r3, r3, #1
 80099b0:	fa02 f303 	lsl.w	r3, r2, r3
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	69ba      	ldr	r2, [r7, #24]
 80099be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 80ae 	beq.w	8009b2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099ce:	2300      	movs	r3, #0
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	4b5d      	ldr	r3, [pc, #372]	; (8009b48 <HAL_GPIO_Init+0x300>)
 80099d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d6:	4a5c      	ldr	r2, [pc, #368]	; (8009b48 <HAL_GPIO_Init+0x300>)
 80099d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099dc:	6453      	str	r3, [r2, #68]	; 0x44
 80099de:	4b5a      	ldr	r3, [pc, #360]	; (8009b48 <HAL_GPIO_Init+0x300>)
 80099e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80099ea:	4a58      	ldr	r2, [pc, #352]	; (8009b4c <HAL_GPIO_Init+0x304>)
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	089b      	lsrs	r3, r3, #2
 80099f0:	3302      	adds	r3, #2
 80099f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	f003 0303 	and.w	r3, r3, #3
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	220f      	movs	r2, #15
 8009a02:	fa02 f303 	lsl.w	r3, r2, r3
 8009a06:	43db      	mvns	r3, r3
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	4013      	ands	r3, r2
 8009a0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a4f      	ldr	r2, [pc, #316]	; (8009b50 <HAL_GPIO_Init+0x308>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d025      	beq.n	8009a62 <HAL_GPIO_Init+0x21a>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a4e      	ldr	r2, [pc, #312]	; (8009b54 <HAL_GPIO_Init+0x30c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d01f      	beq.n	8009a5e <HAL_GPIO_Init+0x216>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a4d      	ldr	r2, [pc, #308]	; (8009b58 <HAL_GPIO_Init+0x310>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d019      	beq.n	8009a5a <HAL_GPIO_Init+0x212>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	4a4c      	ldr	r2, [pc, #304]	; (8009b5c <HAL_GPIO_Init+0x314>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d013      	beq.n	8009a56 <HAL_GPIO_Init+0x20e>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a4b      	ldr	r2, [pc, #300]	; (8009b60 <HAL_GPIO_Init+0x318>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d00d      	beq.n	8009a52 <HAL_GPIO_Init+0x20a>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a4a      	ldr	r2, [pc, #296]	; (8009b64 <HAL_GPIO_Init+0x31c>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d007      	beq.n	8009a4e <HAL_GPIO_Init+0x206>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	4a49      	ldr	r2, [pc, #292]	; (8009b68 <HAL_GPIO_Init+0x320>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d101      	bne.n	8009a4a <HAL_GPIO_Init+0x202>
 8009a46:	2306      	movs	r3, #6
 8009a48:	e00c      	b.n	8009a64 <HAL_GPIO_Init+0x21c>
 8009a4a:	2307      	movs	r3, #7
 8009a4c:	e00a      	b.n	8009a64 <HAL_GPIO_Init+0x21c>
 8009a4e:	2305      	movs	r3, #5
 8009a50:	e008      	b.n	8009a64 <HAL_GPIO_Init+0x21c>
 8009a52:	2304      	movs	r3, #4
 8009a54:	e006      	b.n	8009a64 <HAL_GPIO_Init+0x21c>
 8009a56:	2303      	movs	r3, #3
 8009a58:	e004      	b.n	8009a64 <HAL_GPIO_Init+0x21c>
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e002      	b.n	8009a64 <HAL_GPIO_Init+0x21c>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <HAL_GPIO_Init+0x21c>
 8009a62:	2300      	movs	r3, #0
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	f002 0203 	and.w	r2, r2, #3
 8009a6a:	0092      	lsls	r2, r2, #2
 8009a6c:	4093      	lsls	r3, r2
 8009a6e:	69ba      	ldr	r2, [r7, #24]
 8009a70:	4313      	orrs	r3, r2
 8009a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009a74:	4935      	ldr	r1, [pc, #212]	; (8009b4c <HAL_GPIO_Init+0x304>)
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	089b      	lsrs	r3, r3, #2
 8009a7a:	3302      	adds	r3, #2
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009a82:	4b3a      	ldr	r3, [pc, #232]	; (8009b6c <HAL_GPIO_Init+0x324>)
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	43db      	mvns	r3, r3
 8009a8c:	69ba      	ldr	r2, [r7, #24]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009aa6:	4a31      	ldr	r2, [pc, #196]	; (8009b6c <HAL_GPIO_Init+0x324>)
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009aac:	4b2f      	ldr	r3, [pc, #188]	; (8009b6c <HAL_GPIO_Init+0x324>)
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	43db      	mvns	r3, r3
 8009ab6:	69ba      	ldr	r2, [r7, #24]
 8009ab8:	4013      	ands	r3, r2
 8009aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009ac8:	69ba      	ldr	r2, [r7, #24]
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009ad0:	4a26      	ldr	r2, [pc, #152]	; (8009b6c <HAL_GPIO_Init+0x324>)
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009ad6:	4b25      	ldr	r3, [pc, #148]	; (8009b6c <HAL_GPIO_Init+0x324>)
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	43db      	mvns	r3, r3
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d003      	beq.n	8009afa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009af2:	69ba      	ldr	r2, [r7, #24]
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009afa:	4a1c      	ldr	r2, [pc, #112]	; (8009b6c <HAL_GPIO_Init+0x324>)
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009b00:	4b1a      	ldr	r3, [pc, #104]	; (8009b6c <HAL_GPIO_Init+0x324>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	43db      	mvns	r3, r3
 8009b0a:	69ba      	ldr	r2, [r7, #24]
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d003      	beq.n	8009b24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009b24:	4a11      	ldr	r2, [pc, #68]	; (8009b6c <HAL_GPIO_Init+0x324>)
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	61fb      	str	r3, [r7, #28]
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	2b0f      	cmp	r3, #15
 8009b34:	f67f ae96 	bls.w	8009864 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009b38:	bf00      	nop
 8009b3a:	bf00      	nop
 8009b3c:	3724      	adds	r7, #36	; 0x24
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	40023800 	.word	0x40023800
 8009b4c:	40013800 	.word	0x40013800
 8009b50:	40020000 	.word	0x40020000
 8009b54:	40020400 	.word	0x40020400
 8009b58:	40020800 	.word	0x40020800
 8009b5c:	40020c00 	.word	0x40020c00
 8009b60:	40021000 	.word	0x40021000
 8009b64:	40021400 	.word	0x40021400
 8009b68:	40021800 	.word	0x40021800
 8009b6c:	40013c00 	.word	0x40013c00

08009b70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	460b      	mov	r3, r1
 8009b7a:	807b      	strh	r3, [r7, #2]
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009b80:	787b      	ldrb	r3, [r7, #1]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d003      	beq.n	8009b8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009b86:	887a      	ldrh	r2, [r7, #2]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009b8c:	e003      	b.n	8009b96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009b8e:	887b      	ldrh	r3, [r7, #2]
 8009b90:	041a      	lsls	r2, r3, #16
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	619a      	str	r2, [r3, #24]
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b085      	sub	sp, #20
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
 8009baa:	460b      	mov	r3, r1
 8009bac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	695b      	ldr	r3, [r3, #20]
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009bb4:	887a      	ldrh	r2, [r7, #2]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	4013      	ands	r3, r2
 8009bba:	041a      	lsls	r2, r3, #16
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	43d9      	mvns	r1, r3
 8009bc0:	887b      	ldrh	r3, [r7, #2]
 8009bc2:	400b      	ands	r3, r1
 8009bc4:	431a      	orrs	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	619a      	str	r2, [r3, #24]
}
 8009bca:	bf00      	nop
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
	...

08009bd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e12b      	b.n	8009e42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f7fe fc80 	bl	8008504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2224      	movs	r2, #36	; 0x24
 8009c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f022 0201 	bic.w	r2, r2, #1
 8009c1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009c3c:	f001 f932 	bl	800aea4 <HAL_RCC_GetPCLK1Freq>
 8009c40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	4a81      	ldr	r2, [pc, #516]	; (8009e4c <HAL_I2C_Init+0x274>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d807      	bhi.n	8009c5c <HAL_I2C_Init+0x84>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4a80      	ldr	r2, [pc, #512]	; (8009e50 <HAL_I2C_Init+0x278>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	bf94      	ite	ls
 8009c54:	2301      	movls	r3, #1
 8009c56:	2300      	movhi	r3, #0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	e006      	b.n	8009c6a <HAL_I2C_Init+0x92>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	4a7d      	ldr	r2, [pc, #500]	; (8009e54 <HAL_I2C_Init+0x27c>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	bf94      	ite	ls
 8009c64:	2301      	movls	r3, #1
 8009c66:	2300      	movhi	r3, #0
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e0e7      	b.n	8009e42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4a78      	ldr	r2, [pc, #480]	; (8009e58 <HAL_I2C_Init+0x280>)
 8009c76:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7a:	0c9b      	lsrs	r3, r3, #18
 8009c7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	68ba      	ldr	r2, [r7, #8]
 8009c8e:	430a      	orrs	r2, r1
 8009c90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	4a6a      	ldr	r2, [pc, #424]	; (8009e4c <HAL_I2C_Init+0x274>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d802      	bhi.n	8009cac <HAL_I2C_Init+0xd4>
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	3301      	adds	r3, #1
 8009caa:	e009      	b.n	8009cc0 <HAL_I2C_Init+0xe8>
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009cb2:	fb02 f303 	mul.w	r3, r2, r3
 8009cb6:	4a69      	ldr	r2, [pc, #420]	; (8009e5c <HAL_I2C_Init+0x284>)
 8009cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8009cbc:	099b      	lsrs	r3, r3, #6
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	6812      	ldr	r2, [r2, #0]
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	69db      	ldr	r3, [r3, #28]
 8009cce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009cd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	495c      	ldr	r1, [pc, #368]	; (8009e4c <HAL_I2C_Init+0x274>)
 8009cdc:	428b      	cmp	r3, r1
 8009cde:	d819      	bhi.n	8009d14 <HAL_I2C_Init+0x13c>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	1e59      	subs	r1, r3, #1
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8009cee:	1c59      	adds	r1, r3, #1
 8009cf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009cf4:	400b      	ands	r3, r1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d00a      	beq.n	8009d10 <HAL_I2C_Init+0x138>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	1e59      	subs	r1, r3, #1
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	685b      	ldr	r3, [r3, #4]
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d08:	3301      	adds	r3, #1
 8009d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d0e:	e051      	b.n	8009db4 <HAL_I2C_Init+0x1dc>
 8009d10:	2304      	movs	r3, #4
 8009d12:	e04f      	b.n	8009db4 <HAL_I2C_Init+0x1dc>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d111      	bne.n	8009d40 <HAL_I2C_Init+0x168>
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	1e58      	subs	r0, r3, #1
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6859      	ldr	r1, [r3, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	440b      	add	r3, r1
 8009d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d2e:	3301      	adds	r3, #1
 8009d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	bf0c      	ite	eq
 8009d38:	2301      	moveq	r3, #1
 8009d3a:	2300      	movne	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	e012      	b.n	8009d66 <HAL_I2C_Init+0x18e>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	1e58      	subs	r0, r3, #1
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6859      	ldr	r1, [r3, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	440b      	add	r3, r1
 8009d4e:	0099      	lsls	r1, r3, #2
 8009d50:	440b      	add	r3, r1
 8009d52:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d56:	3301      	adds	r3, #1
 8009d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	bf0c      	ite	eq
 8009d60:	2301      	moveq	r3, #1
 8009d62:	2300      	movne	r3, #0
 8009d64:	b2db      	uxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <HAL_I2C_Init+0x196>
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e022      	b.n	8009db4 <HAL_I2C_Init+0x1dc>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d10e      	bne.n	8009d94 <HAL_I2C_Init+0x1bc>
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	1e58      	subs	r0, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6859      	ldr	r1, [r3, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	005b      	lsls	r3, r3, #1
 8009d82:	440b      	add	r3, r1
 8009d84:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d88:	3301      	adds	r3, #1
 8009d8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d92:	e00f      	b.n	8009db4 <HAL_I2C_Init+0x1dc>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	1e58      	subs	r0, r3, #1
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6859      	ldr	r1, [r3, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	440b      	add	r3, r1
 8009da2:	0099      	lsls	r1, r3, #2
 8009da4:	440b      	add	r3, r1
 8009da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009daa:	3301      	adds	r3, #1
 8009dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009db4:	6879      	ldr	r1, [r7, #4]
 8009db6:	6809      	ldr	r1, [r1, #0]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	69da      	ldr	r2, [r3, #28]
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	431a      	orrs	r2, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	430a      	orrs	r2, r1
 8009dd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009de2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	6911      	ldr	r1, [r2, #16]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	68d2      	ldr	r2, [r2, #12]
 8009dee:	4311      	orrs	r1, r2
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	6812      	ldr	r2, [r2, #0]
 8009df4:	430b      	orrs	r3, r1
 8009df6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	68db      	ldr	r3, [r3, #12]
 8009dfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695a      	ldr	r2, [r3, #20]
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	430a      	orrs	r2, r1
 8009e12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f042 0201 	orr.w	r2, r2, #1
 8009e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2220      	movs	r2, #32
 8009e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009e40:	2300      	movs	r3, #0
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	000186a0 	.word	0x000186a0
 8009e50:	001e847f 	.word	0x001e847f
 8009e54:	003d08ff 	.word	0x003d08ff
 8009e58:	431bde83 	.word	0x431bde83
 8009e5c:	10624dd3 	.word	0x10624dd3

08009e60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b088      	sub	sp, #32
 8009e64:	af02      	add	r7, sp, #8
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	4608      	mov	r0, r1
 8009e6a:	4611      	mov	r1, r2
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	4603      	mov	r3, r0
 8009e70:	817b      	strh	r3, [r7, #10]
 8009e72:	460b      	mov	r3, r1
 8009e74:	813b      	strh	r3, [r7, #8]
 8009e76:	4613      	mov	r3, r2
 8009e78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e7a:	f7fe ffa1 	bl	8008dc0 <HAL_GetTick>
 8009e7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	f040 80d9 	bne.w	800a040 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	2319      	movs	r3, #25
 8009e94:	2201      	movs	r2, #1
 8009e96:	496d      	ldr	r1, [pc, #436]	; (800a04c <HAL_I2C_Mem_Write+0x1ec>)
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 fc8b 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	e0cc      	b.n	800a042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d101      	bne.n	8009eb6 <HAL_I2C_Mem_Write+0x56>
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	e0c5      	b.n	800a042 <HAL_I2C_Mem_Write+0x1e2>
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0301 	and.w	r3, r3, #1
 8009ec8:	2b01      	cmp	r3, #1
 8009eca:	d007      	beq.n	8009edc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f042 0201 	orr.w	r2, r2, #1
 8009eda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009eea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2221      	movs	r2, #33	; 0x21
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2240      	movs	r2, #64	; 0x40
 8009ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6a3a      	ldr	r2, [r7, #32]
 8009f06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4a4d      	ldr	r2, [pc, #308]	; (800a050 <HAL_I2C_Mem_Write+0x1f0>)
 8009f1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009f1e:	88f8      	ldrh	r0, [r7, #6]
 8009f20:	893a      	ldrh	r2, [r7, #8]
 8009f22:	8979      	ldrh	r1, [r7, #10]
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	9301      	str	r3, [sp, #4]
 8009f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	68f8      	ldr	r0, [r7, #12]
 8009f30:	f000 fac2 	bl	800a4b8 <I2C_RequestMemoryWrite>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d052      	beq.n	8009fe0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e081      	b.n	800a042 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fd50 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00d      	beq.n	8009f6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f52:	2b04      	cmp	r3, #4
 8009f54:	d107      	bne.n	8009f66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	681a      	ldr	r2, [r3, #0]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	e06b      	b.n	800a042 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6e:	781a      	ldrb	r2, [r3, #0]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f84:	3b01      	subs	r3, #1
 8009f86:	b29a      	uxth	r2, r3
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	3b01      	subs	r3, #1
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	695b      	ldr	r3, [r3, #20]
 8009fa0:	f003 0304 	and.w	r3, r3, #4
 8009fa4:	2b04      	cmp	r3, #4
 8009fa6:	d11b      	bne.n	8009fe0 <HAL_I2C_Mem_Write+0x180>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d017      	beq.n	8009fe0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb4:	781a      	ldrb	r2, [r3, #0]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc0:	1c5a      	adds	r2, r3, #1
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1aa      	bne.n	8009f3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009fec:	68f8      	ldr	r0, [r7, #12]
 8009fee:	f000 fd43 	bl	800aa78 <I2C_WaitOnBTFFlagUntilTimeout>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00d      	beq.n	800a014 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffc:	2b04      	cmp	r3, #4
 8009ffe:	d107      	bne.n	800a010 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a00e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	e016      	b.n	800a042 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a022:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	e000      	b.n	800a042 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a040:	2302      	movs	r3, #2
  }
}
 800a042:	4618      	mov	r0, r3
 800a044:	3718      	adds	r7, #24
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	00100002 	.word	0x00100002
 800a050:	ffff0000 	.word	0xffff0000

0800a054 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b08c      	sub	sp, #48	; 0x30
 800a058:	af02      	add	r7, sp, #8
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	4608      	mov	r0, r1
 800a05e:	4611      	mov	r1, r2
 800a060:	461a      	mov	r2, r3
 800a062:	4603      	mov	r3, r0
 800a064:	817b      	strh	r3, [r7, #10]
 800a066:	460b      	mov	r3, r1
 800a068:	813b      	strh	r3, [r7, #8]
 800a06a:	4613      	mov	r3, r2
 800a06c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a06e:	f7fe fea7 	bl	8008dc0 <HAL_GetTick>
 800a072:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	f040 8214 	bne.w	800a4aa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	9300      	str	r3, [sp, #0]
 800a086:	2319      	movs	r3, #25
 800a088:	2201      	movs	r2, #1
 800a08a:	497b      	ldr	r1, [pc, #492]	; (800a278 <HAL_I2C_Mem_Read+0x224>)
 800a08c:	68f8      	ldr	r0, [r7, #12]
 800a08e:	f000 fb91 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a098:	2302      	movs	r3, #2
 800a09a:	e207      	b.n	800a4ac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d101      	bne.n	800a0aa <HAL_I2C_Mem_Read+0x56>
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	e200      	b.n	800a4ac <HAL_I2C_Mem_Read+0x458>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d007      	beq.n	800a0d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f042 0201 	orr.w	r2, r2, #1
 800a0ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2222      	movs	r2, #34	; 0x22
 800a0e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2240      	movs	r2, #64	; 0x40
 800a0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a100:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a106:	b29a      	uxth	r2, r3
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	4a5b      	ldr	r2, [pc, #364]	; (800a27c <HAL_I2C_Mem_Read+0x228>)
 800a110:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a112:	88f8      	ldrh	r0, [r7, #6]
 800a114:	893a      	ldrh	r2, [r7, #8]
 800a116:	8979      	ldrh	r1, [r7, #10]
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	4603      	mov	r3, r0
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	f000 fa5e 	bl	800a5e4 <I2C_RequestMemoryRead>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d001      	beq.n	800a132 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e1bc      	b.n	800a4ac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a136:	2b00      	cmp	r3, #0
 800a138:	d113      	bne.n	800a162 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a13a:	2300      	movs	r3, #0
 800a13c:	623b      	str	r3, [r7, #32]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	623b      	str	r3, [r7, #32]
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	623b      	str	r3, [r7, #32]
 800a14e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a15e:	601a      	str	r2, [r3, #0]
 800a160:	e190      	b.n	800a484 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a166:	2b01      	cmp	r3, #1
 800a168:	d11b      	bne.n	800a1a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a178:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a17a:	2300      	movs	r3, #0
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	695b      	ldr	r3, [r3, #20]
 800a184:	61fb      	str	r3, [r7, #28]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	61fb      	str	r3, [r7, #28]
 800a18e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	681a      	ldr	r2, [r3, #0]
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a19e:	601a      	str	r2, [r3, #0]
 800a1a0:	e170      	b.n	800a484 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d11b      	bne.n	800a1e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61bb      	str	r3, [r7, #24]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	61bb      	str	r3, [r7, #24]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	61bb      	str	r3, [r7, #24]
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	e150      	b.n	800a484 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	617b      	str	r3, [r7, #20]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	617b      	str	r3, [r7, #20]
 800a1f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a1f8:	e144      	b.n	800a484 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	f200 80f1 	bhi.w	800a3e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d123      	bne.n	800a254 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a20c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f000 fc79 	bl	800ab08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e145      	b.n	800a4ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	691a      	ldr	r2, [r3, #16]
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22a:	b2d2      	uxtb	r2, r2
 800a22c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a23c:	3b01      	subs	r3, #1
 800a23e:	b29a      	uxth	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a248:	b29b      	uxth	r3, r3
 800a24a:	3b01      	subs	r3, #1
 800a24c:	b29a      	uxth	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a252:	e117      	b.n	800a484 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a258:	2b02      	cmp	r3, #2
 800a25a:	d14e      	bne.n	800a2fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a262:	2200      	movs	r2, #0
 800a264:	4906      	ldr	r1, [pc, #24]	; (800a280 <HAL_I2C_Mem_Read+0x22c>)
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 faa4 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d008      	beq.n	800a284 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e11a      	b.n	800a4ac <HAL_I2C_Mem_Read+0x458>
 800a276:	bf00      	nop
 800a278:	00100002 	.word	0x00100002
 800a27c:	ffff0000 	.word	0xffff0000
 800a280:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681a      	ldr	r2, [r3, #0]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a292:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	691a      	ldr	r2, [r3, #16]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29e:	b2d2      	uxtb	r2, r2
 800a2a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	b29a      	uxth	r2, r3
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	691a      	ldr	r2, [r3, #16]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d0:	b2d2      	uxtb	r2, r2
 800a2d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	3b01      	subs	r3, #1
 800a2f2:	b29a      	uxth	r2, r3
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a2f8:	e0c4      	b.n	800a484 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a300:	2200      	movs	r2, #0
 800a302:	496c      	ldr	r1, [pc, #432]	; (800a4b4 <HAL_I2C_Mem_Read+0x460>)
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	f000 fa55 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	e0cb      	b.n	800a4ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	691a      	ldr	r2, [r3, #16]
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	b2d2      	uxtb	r2, r2
 800a330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	1c5a      	adds	r2, r3, #1
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a340:	3b01      	subs	r3, #1
 800a342:	b29a      	uxth	r2, r3
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a34c:	b29b      	uxth	r3, r3
 800a34e:	3b01      	subs	r3, #1
 800a350:	b29a      	uxth	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a35c:	2200      	movs	r2, #0
 800a35e:	4955      	ldr	r1, [pc, #340]	; (800a4b4 <HAL_I2C_Mem_Read+0x460>)
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 fa27 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d001      	beq.n	800a370 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e09d      	b.n	800a4ac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a37e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	691a      	ldr	r2, [r3, #16]
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38a:	b2d2      	uxtb	r2, r2
 800a38c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a392:	1c5a      	adds	r2, r3, #1
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a39c:	3b01      	subs	r3, #1
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	691a      	ldr	r2, [r3, #16]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3bc:	b2d2      	uxtb	r2, r2
 800a3be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ce:	3b01      	subs	r3, #1
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3e4:	e04e      	b.n	800a484 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3ea:	68f8      	ldr	r0, [r7, #12]
 800a3ec:	f000 fb8c 	bl	800ab08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	e058      	b.n	800a4ac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	691a      	ldr	r2, [r3, #16]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a404:	b2d2      	uxtb	r2, r2
 800a406:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a416:	3b01      	subs	r3, #1
 800a418:	b29a      	uxth	r2, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a422:	b29b      	uxth	r3, r3
 800a424:	3b01      	subs	r3, #1
 800a426:	b29a      	uxth	r2, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	695b      	ldr	r3, [r3, #20]
 800a432:	f003 0304 	and.w	r3, r3, #4
 800a436:	2b04      	cmp	r3, #4
 800a438:	d124      	bne.n	800a484 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a43e:	2b03      	cmp	r3, #3
 800a440:	d107      	bne.n	800a452 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a450:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	b2d2      	uxtb	r2, r2
 800a45e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	1c5a      	adds	r2, r3, #1
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a46e:	3b01      	subs	r3, #1
 800a470:	b29a      	uxth	r2, r3
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a47a:	b29b      	uxth	r3, r3
 800a47c:	3b01      	subs	r3, #1
 800a47e:	b29a      	uxth	r2, r3
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f47f aeb6 	bne.w	800a1fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2220      	movs	r2, #32
 800a492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	e000      	b.n	800a4ac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800a4aa:	2302      	movs	r3, #2
  }
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3728      	adds	r7, #40	; 0x28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	00010004 	.word	0x00010004

0800a4b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b088      	sub	sp, #32
 800a4bc:	af02      	add	r7, sp, #8
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	817b      	strh	r3, [r7, #10]
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	813b      	strh	r3, [r7, #8]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	9300      	str	r3, [sp, #0]
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f000 f960 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d00d      	beq.n	800a516 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a508:	d103      	bne.n	800a512 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a510:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a512:	2303      	movs	r3, #3
 800a514:	e05f      	b.n	800a5d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a516:	897b      	ldrh	r3, [r7, #10]
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	461a      	mov	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a524:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a528:	6a3a      	ldr	r2, [r7, #32]
 800a52a:	492d      	ldr	r1, [pc, #180]	; (800a5e0 <I2C_RequestMemoryWrite+0x128>)
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f000 f9bb 	bl	800a8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d001      	beq.n	800a53c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e04c      	b.n	800a5d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a53c:	2300      	movs	r3, #0
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	695b      	ldr	r3, [r3, #20]
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	699b      	ldr	r3, [r3, #24]
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a554:	6a39      	ldr	r1, [r7, #32]
 800a556:	68f8      	ldr	r0, [r7, #12]
 800a558:	f000 fa46 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d00d      	beq.n	800a57e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a566:	2b04      	cmp	r3, #4
 800a568:	d107      	bne.n	800a57a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a578:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	e02b      	b.n	800a5d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a57e:	88fb      	ldrh	r3, [r7, #6]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d105      	bne.n	800a590 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a584:	893b      	ldrh	r3, [r7, #8]
 800a586:	b2da      	uxtb	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	611a      	str	r2, [r3, #16]
 800a58e:	e021      	b.n	800a5d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a590:	893b      	ldrh	r3, [r7, #8]
 800a592:	0a1b      	lsrs	r3, r3, #8
 800a594:	b29b      	uxth	r3, r3
 800a596:	b2da      	uxtb	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a59e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5a0:	6a39      	ldr	r1, [r7, #32]
 800a5a2:	68f8      	ldr	r0, [r7, #12]
 800a5a4:	f000 fa20 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00d      	beq.n	800a5ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d107      	bne.n	800a5c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e005      	b.n	800a5d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a5ca:	893b      	ldrh	r3, [r7, #8]
 800a5cc:	b2da      	uxtb	r2, r3
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a5d4:	2300      	movs	r3, #0
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	00010002 	.word	0x00010002

0800a5e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b088      	sub	sp, #32
 800a5e8:	af02      	add	r7, sp, #8
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	4608      	mov	r0, r1
 800a5ee:	4611      	mov	r1, r2
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	817b      	strh	r3, [r7, #10]
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	813b      	strh	r3, [r7, #8]
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a60c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a61c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	6a3b      	ldr	r3, [r7, #32]
 800a624:	2200      	movs	r2, #0
 800a626:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f000 f8c2 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00d      	beq.n	800a652 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a644:	d103      	bne.n	800a64e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a64c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a64e:	2303      	movs	r3, #3
 800a650:	e0aa      	b.n	800a7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a652:	897b      	ldrh	r3, [r7, #10]
 800a654:	b2db      	uxtb	r3, r3
 800a656:	461a      	mov	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a660:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a664:	6a3a      	ldr	r2, [r7, #32]
 800a666:	4952      	ldr	r1, [pc, #328]	; (800a7b0 <I2C_RequestMemoryRead+0x1cc>)
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f000 f91d 	bl	800a8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a66e:	4603      	mov	r3, r0
 800a670:	2b00      	cmp	r3, #0
 800a672:	d001      	beq.n	800a678 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a674:	2301      	movs	r3, #1
 800a676:	e097      	b.n	800a7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a678:	2300      	movs	r3, #0
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	695b      	ldr	r3, [r3, #20]
 800a682:	617b      	str	r3, [r7, #20]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699b      	ldr	r3, [r3, #24]
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a68e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a690:	6a39      	ldr	r1, [r7, #32]
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f000 f9a8 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d00d      	beq.n	800a6ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a2:	2b04      	cmp	r3, #4
 800a6a4:	d107      	bne.n	800a6b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a6b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a6b6:	2301      	movs	r3, #1
 800a6b8:	e076      	b.n	800a7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	2b01      	cmp	r3, #1
 800a6be:	d105      	bne.n	800a6cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a6c0:	893b      	ldrh	r3, [r7, #8]
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	611a      	str	r2, [r3, #16]
 800a6ca:	e021      	b.n	800a710 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a6cc:	893b      	ldrh	r3, [r7, #8]
 800a6ce:	0a1b      	lsrs	r3, r3, #8
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6dc:	6a39      	ldr	r1, [r7, #32]
 800a6de:	68f8      	ldr	r0, [r7, #12]
 800a6e0:	f000 f982 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d00d      	beq.n	800a706 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ee:	2b04      	cmp	r3, #4
 800a6f0:	d107      	bne.n	800a702 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a700:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e050      	b.n	800a7a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a706:	893b      	ldrh	r3, [r7, #8]
 800a708:	b2da      	uxtb	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a712:	6a39      	ldr	r1, [r7, #32]
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 f967 	bl	800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00d      	beq.n	800a73c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a724:	2b04      	cmp	r3, #4
 800a726:	d107      	bne.n	800a738 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a736:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a738:	2301      	movs	r3, #1
 800a73a:	e035      	b.n	800a7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681a      	ldr	r2, [r3, #0]
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a74a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	6a3b      	ldr	r3, [r7, #32]
 800a752:	2200      	movs	r2, #0
 800a754:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f000 f82b 	bl	800a7b4 <I2C_WaitOnFlagUntilTimeout>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d00d      	beq.n	800a780 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a76e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a772:	d103      	bne.n	800a77c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a77a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a77c:	2303      	movs	r3, #3
 800a77e:	e013      	b.n	800a7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a780:	897b      	ldrh	r3, [r7, #10]
 800a782:	b2db      	uxtb	r3, r3
 800a784:	f043 0301 	orr.w	r3, r3, #1
 800a788:	b2da      	uxtb	r2, r3
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	6a3a      	ldr	r2, [r7, #32]
 800a794:	4906      	ldr	r1, [pc, #24]	; (800a7b0 <I2C_RequestMemoryRead+0x1cc>)
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	f000 f886 	bl	800a8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3718      	adds	r7, #24
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	00010002 	.word	0x00010002

0800a7b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	603b      	str	r3, [r7, #0]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a7c4:	e048      	b.n	800a858 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7cc:	d044      	beq.n	800a858 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ce:	f7fe faf7 	bl	8008dc0 <HAL_GetTick>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	69bb      	ldr	r3, [r7, #24]
 800a7d6:	1ad3      	subs	r3, r2, r3
 800a7d8:	683a      	ldr	r2, [r7, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d302      	bcc.n	800a7e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d139      	bne.n	800a858 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	0c1b      	lsrs	r3, r3, #16
 800a7e8:	b2db      	uxtb	r3, r3
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d10d      	bne.n	800a80a <I2C_WaitOnFlagUntilTimeout+0x56>
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	43da      	mvns	r2, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	bf0c      	ite	eq
 800a800:	2301      	moveq	r3, #1
 800a802:	2300      	movne	r3, #0
 800a804:	b2db      	uxtb	r3, r3
 800a806:	461a      	mov	r2, r3
 800a808:	e00c      	b.n	800a824 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	699b      	ldr	r3, [r3, #24]
 800a810:	43da      	mvns	r2, r3
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	4013      	ands	r3, r2
 800a816:	b29b      	uxth	r3, r3
 800a818:	2b00      	cmp	r3, #0
 800a81a:	bf0c      	ite	eq
 800a81c:	2301      	moveq	r3, #1
 800a81e:	2300      	movne	r3, #0
 800a820:	b2db      	uxtb	r3, r3
 800a822:	461a      	mov	r2, r3
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	429a      	cmp	r2, r3
 800a828:	d116      	bne.n	800a858 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2220      	movs	r2, #32
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a844:	f043 0220 	orr.w	r2, r3, #32
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e023      	b.n	800a8a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	0c1b      	lsrs	r3, r3, #16
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d10d      	bne.n	800a87e <I2C_WaitOnFlagUntilTimeout+0xca>
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	695b      	ldr	r3, [r3, #20]
 800a868:	43da      	mvns	r2, r3
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	4013      	ands	r3, r2
 800a86e:	b29b      	uxth	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	bf0c      	ite	eq
 800a874:	2301      	moveq	r3, #1
 800a876:	2300      	movne	r3, #0
 800a878:	b2db      	uxtb	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	e00c      	b.n	800a898 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	43da      	mvns	r2, r3
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	4013      	ands	r3, r2
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	bf0c      	ite	eq
 800a890:	2301      	moveq	r3, #1
 800a892:	2300      	movne	r3, #0
 800a894:	b2db      	uxtb	r3, r3
 800a896:	461a      	mov	r2, r3
 800a898:	79fb      	ldrb	r3, [r7, #7]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d093      	beq.n	800a7c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a89e:	2300      	movs	r3, #0
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	60f8      	str	r0, [r7, #12]
 800a8b0:	60b9      	str	r1, [r7, #8]
 800a8b2:	607a      	str	r2, [r7, #4]
 800a8b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a8b6:	e071      	b.n	800a99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8c6:	d123      	bne.n	800a910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a8e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2220      	movs	r2, #32
 800a8ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8fc:	f043 0204 	orr.w	r2, r3, #4
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e067      	b.n	800a9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a916:	d041      	beq.n	800a99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a918:	f7fe fa52 	bl	8008dc0 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	429a      	cmp	r2, r3
 800a926:	d302      	bcc.n	800a92e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d136      	bne.n	800a99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	0c1b      	lsrs	r3, r3, #16
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b01      	cmp	r3, #1
 800a936:	d10c      	bne.n	800a952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	43da      	mvns	r2, r3
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	4013      	ands	r3, r2
 800a944:	b29b      	uxth	r3, r3
 800a946:	2b00      	cmp	r3, #0
 800a948:	bf14      	ite	ne
 800a94a:	2301      	movne	r3, #1
 800a94c:	2300      	moveq	r3, #0
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	e00b      	b.n	800a96a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	43da      	mvns	r2, r3
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	4013      	ands	r3, r2
 800a95e:	b29b      	uxth	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	bf14      	ite	ne
 800a964:	2301      	movne	r3, #1
 800a966:	2300      	moveq	r3, #0
 800a968:	b2db      	uxtb	r3, r3
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d016      	beq.n	800a99c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2200      	movs	r2, #0
 800a972:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2220      	movs	r2, #32
 800a978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	2200      	movs	r2, #0
 800a980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a988:	f043 0220 	orr.w	r2, r3, #32
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e021      	b.n	800a9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	0c1b      	lsrs	r3, r3, #16
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d10c      	bne.n	800a9c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	43da      	mvns	r2, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bf14      	ite	ne
 800a9b8:	2301      	movne	r3, #1
 800a9ba:	2300      	moveq	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	e00b      	b.n	800a9d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	699b      	ldr	r3, [r3, #24]
 800a9c6:	43da      	mvns	r2, r3
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	4013      	ands	r3, r2
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bf14      	ite	ne
 800a9d2:	2301      	movne	r3, #1
 800a9d4:	2300      	moveq	r3, #0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f47f af6d 	bne.w	800a8b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3710      	adds	r7, #16
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a9f4:	e034      	b.n	800aa60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 f8e3 	bl	800abc2 <I2C_IsAcknowledgeFailed>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e034      	b.n	800aa70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0c:	d028      	beq.n	800aa60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa0e:	f7fe f9d7 	bl	8008dc0 <HAL_GetTick>
 800aa12:	4602      	mov	r2, r0
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	1ad3      	subs	r3, r2, r3
 800aa18:	68ba      	ldr	r2, [r7, #8]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d302      	bcc.n	800aa24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d11d      	bne.n	800aa60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa2e:	2b80      	cmp	r3, #128	; 0x80
 800aa30:	d016      	beq.n	800aa60 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2200      	movs	r2, #0
 800aa36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	2220      	movs	r2, #32
 800aa3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4c:	f043 0220 	orr.w	r2, r3, #32
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e007      	b.n	800aa70 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6a:	2b80      	cmp	r3, #128	; 0x80
 800aa6c:	d1c3      	bne.n	800a9f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aa84:	e034      	b.n	800aaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 f89b 	bl	800abc2 <I2C_IsAcknowledgeFailed>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d001      	beq.n	800aa96 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e034      	b.n	800ab00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9c:	d028      	beq.n	800aaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa9e:	f7fe f98f 	bl	8008dc0 <HAL_GetTick>
 800aaa2:	4602      	mov	r2, r0
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	1ad3      	subs	r3, r2, r3
 800aaa8:	68ba      	ldr	r2, [r7, #8]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d302      	bcc.n	800aab4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d11d      	bne.n	800aaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	695b      	ldr	r3, [r3, #20]
 800aaba:	f003 0304 	and.w	r3, r3, #4
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d016      	beq.n	800aaf0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2200      	movs	r2, #0
 800aac6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2220      	movs	r2, #32
 800aacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2200      	movs	r2, #0
 800aad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aadc:	f043 0220 	orr.w	r2, r3, #32
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aaec:	2301      	movs	r3, #1
 800aaee:	e007      	b.n	800ab00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	f003 0304 	and.w	r3, r3, #4
 800aafa:	2b04      	cmp	r3, #4
 800aafc:	d1c3      	bne.n	800aa86 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3710      	adds	r7, #16
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	60b9      	str	r1, [r7, #8]
 800ab12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ab14:	e049      	b.n	800abaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	695b      	ldr	r3, [r3, #20]
 800ab1c:	f003 0310 	and.w	r3, r3, #16
 800ab20:	2b10      	cmp	r3, #16
 800ab22:	d119      	bne.n	800ab58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f06f 0210 	mvn.w	r2, #16
 800ab2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	2220      	movs	r2, #32
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e030      	b.n	800abba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab58:	f7fe f932 	bl	8008dc0 <HAL_GetTick>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	d302      	bcc.n	800ab6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d11d      	bne.n	800abaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	695b      	ldr	r3, [r3, #20]
 800ab74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab78:	2b40      	cmp	r3, #64	; 0x40
 800ab7a:	d016      	beq.n	800abaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2220      	movs	r2, #32
 800ab86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab96:	f043 0220 	orr.w	r2, r3, #32
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e007      	b.n	800abba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	695b      	ldr	r3, [r3, #20]
 800abb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abb4:	2b40      	cmp	r3, #64	; 0x40
 800abb6:	d1ae      	bne.n	800ab16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800abb8:	2300      	movs	r3, #0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800abd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abd8:	d11b      	bne.n	800ac12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800abe2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2200      	movs	r2, #0
 800abe8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2220      	movs	r2, #32
 800abee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfe:	f043 0204 	orr.w	r2, r3, #4
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ac0e:	2301      	movs	r3, #1
 800ac10:	e000      	b.n	800ac14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr

0800ac20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ac26:	2300      	movs	r3, #0
 800ac28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	603b      	str	r3, [r7, #0]
 800ac2e:	4b20      	ldr	r3, [pc, #128]	; (800acb0 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac32:	4a1f      	ldr	r2, [pc, #124]	; (800acb0 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac38:	6413      	str	r3, [r2, #64]	; 0x40
 800ac3a:	4b1d      	ldr	r3, [pc, #116]	; (800acb0 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac42:	603b      	str	r3, [r7, #0]
 800ac44:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ac46:	4b1b      	ldr	r3, [pc, #108]	; (800acb4 <HAL_PWREx_EnableOverDrive+0x94>)
 800ac48:	2201      	movs	r2, #1
 800ac4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac4c:	f7fe f8b8 	bl	8008dc0 <HAL_GetTick>
 800ac50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac52:	e009      	b.n	800ac68 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac54:	f7fe f8b4 	bl	8008dc0 <HAL_GetTick>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	1ad3      	subs	r3, r2, r3
 800ac5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac62:	d901      	bls.n	800ac68 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ac64:	2303      	movs	r3, #3
 800ac66:	e01f      	b.n	800aca8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac68:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac74:	d1ee      	bne.n	800ac54 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ac76:	4b11      	ldr	r3, [pc, #68]	; (800acbc <HAL_PWREx_EnableOverDrive+0x9c>)
 800ac78:	2201      	movs	r2, #1
 800ac7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac7c:	f7fe f8a0 	bl	8008dc0 <HAL_GetTick>
 800ac80:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac82:	e009      	b.n	800ac98 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac84:	f7fe f89c 	bl	8008dc0 <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac92:	d901      	bls.n	800ac98 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ac94:	2303      	movs	r3, #3
 800ac96:	e007      	b.n	800aca8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ac98:	4b07      	ldr	r3, [pc, #28]	; (800acb8 <HAL_PWREx_EnableOverDrive+0x98>)
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aca0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aca4:	d1ee      	bne.n	800ac84 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800aca6:	2300      	movs	r3, #0
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3708      	adds	r7, #8
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}
 800acb0:	40023800 	.word	0x40023800
 800acb4:	420e0040 	.word	0x420e0040
 800acb8:	40007000 	.word	0x40007000
 800acbc:	420e0044 	.word	0x420e0044

0800acc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d101      	bne.n	800acd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800acd0:	2301      	movs	r3, #1
 800acd2:	e0cc      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800acd4:	4b68      	ldr	r3, [pc, #416]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f003 030f 	and.w	r3, r3, #15
 800acdc:	683a      	ldr	r2, [r7, #0]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d90c      	bls.n	800acfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ace2:	4b65      	ldr	r3, [pc, #404]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	b2d2      	uxtb	r2, r2
 800ace8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800acea:	4b63      	ldr	r3, [pc, #396]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f003 030f 	and.w	r3, r3, #15
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d001      	beq.n	800acfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e0b8      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 0302 	and.w	r3, r3, #2
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d020      	beq.n	800ad4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f003 0304 	and.w	r3, r3, #4
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d005      	beq.n	800ad20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad14:	4b59      	ldr	r3, [pc, #356]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	4a58      	ldr	r2, [pc, #352]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f003 0308 	and.w	r3, r3, #8
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d005      	beq.n	800ad38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad2c:	4b53      	ldr	r3, [pc, #332]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	4a52      	ldr	r2, [pc, #328]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad38:	4b50      	ldr	r3, [pc, #320]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	494d      	ldr	r1, [pc, #308]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f003 0301 	and.w	r3, r3, #1
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d044      	beq.n	800ade0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d107      	bne.n	800ad6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad5e:	4b47      	ldr	r3, [pc, #284]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d119      	bne.n	800ad9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e07f      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	685b      	ldr	r3, [r3, #4]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d003      	beq.n	800ad7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d107      	bne.n	800ad8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ad7e:	4b3f      	ldr	r3, [pc, #252]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d109      	bne.n	800ad9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e06f      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ad8e:	4b3b      	ldr	r3, [pc, #236]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d101      	bne.n	800ad9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e067      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ad9e:	4b37      	ldr	r3, [pc, #220]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f023 0203 	bic.w	r2, r3, #3
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	4934      	ldr	r1, [pc, #208]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800adac:	4313      	orrs	r3, r2
 800adae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adb0:	f7fe f806 	bl	8008dc0 <HAL_GetTick>
 800adb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adb6:	e00a      	b.n	800adce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adb8:	f7fe f802 	bl	8008dc0 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d901      	bls.n	800adce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e04f      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adce:	4b2b      	ldr	r3, [pc, #172]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f003 020c 	and.w	r2, r3, #12
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	009b      	lsls	r3, r3, #2
 800addc:	429a      	cmp	r2, r3
 800adde:	d1eb      	bne.n	800adb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ade0:	4b25      	ldr	r3, [pc, #148]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 030f 	and.w	r3, r3, #15
 800ade8:	683a      	ldr	r2, [r7, #0]
 800adea:	429a      	cmp	r2, r3
 800adec:	d20c      	bcs.n	800ae08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adee:	4b22      	ldr	r3, [pc, #136]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800adf0:	683a      	ldr	r2, [r7, #0]
 800adf2:	b2d2      	uxtb	r2, r2
 800adf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adf6:	4b20      	ldr	r3, [pc, #128]	; (800ae78 <HAL_RCC_ClockConfig+0x1b8>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 030f 	and.w	r3, r3, #15
 800adfe:	683a      	ldr	r2, [r7, #0]
 800ae00:	429a      	cmp	r2, r3
 800ae02:	d001      	beq.n	800ae08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae04:	2301      	movs	r3, #1
 800ae06:	e032      	b.n	800ae6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0304 	and.w	r3, r3, #4
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d008      	beq.n	800ae26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae14:	4b19      	ldr	r3, [pc, #100]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	68db      	ldr	r3, [r3, #12]
 800ae20:	4916      	ldr	r1, [pc, #88]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae22:	4313      	orrs	r3, r2
 800ae24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 0308 	and.w	r3, r3, #8
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d009      	beq.n	800ae46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae32:	4b12      	ldr	r3, [pc, #72]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	00db      	lsls	r3, r3, #3
 800ae40:	490e      	ldr	r1, [pc, #56]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae42:	4313      	orrs	r3, r2
 800ae44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae46:	f000 f855 	bl	800aef4 <HAL_RCC_GetSysClockFreq>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <HAL_RCC_ClockConfig+0x1bc>)
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	091b      	lsrs	r3, r3, #4
 800ae52:	f003 030f 	and.w	r3, r3, #15
 800ae56:	490a      	ldr	r1, [pc, #40]	; (800ae80 <HAL_RCC_ClockConfig+0x1c0>)
 800ae58:	5ccb      	ldrb	r3, [r1, r3]
 800ae5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae5e:	4a09      	ldr	r2, [pc, #36]	; (800ae84 <HAL_RCC_ClockConfig+0x1c4>)
 800ae60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ae62:	4b09      	ldr	r3, [pc, #36]	; (800ae88 <HAL_RCC_ClockConfig+0x1c8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fd ff66 	bl	8008d38 <HAL_InitTick>

  return HAL_OK;
 800ae6c:	2300      	movs	r3, #0
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	40023c00 	.word	0x40023c00
 800ae7c:	40023800 	.word	0x40023800
 800ae80:	080130ac 	.word	0x080130ac
 800ae84:	20000000 	.word	0x20000000
 800ae88:	20000004 	.word	0x20000004

0800ae8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ae90:	4b03      	ldr	r3, [pc, #12]	; (800aea0 <HAL_RCC_GetHCLKFreq+0x14>)
 800ae92:	681b      	ldr	r3, [r3, #0]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	20000000 	.word	0x20000000

0800aea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aea8:	f7ff fff0 	bl	800ae8c <HAL_RCC_GetHCLKFreq>
 800aeac:	4602      	mov	r2, r0
 800aeae:	4b05      	ldr	r3, [pc, #20]	; (800aec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	0a9b      	lsrs	r3, r3, #10
 800aeb4:	f003 0307 	and.w	r3, r3, #7
 800aeb8:	4903      	ldr	r1, [pc, #12]	; (800aec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aeba:	5ccb      	ldrb	r3, [r1, r3]
 800aebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	40023800 	.word	0x40023800
 800aec8:	080130bc 	.word	0x080130bc

0800aecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aed0:	f7ff ffdc 	bl	800ae8c <HAL_RCC_GetHCLKFreq>
 800aed4:	4602      	mov	r2, r0
 800aed6:	4b05      	ldr	r3, [pc, #20]	; (800aeec <HAL_RCC_GetPCLK2Freq+0x20>)
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	0b5b      	lsrs	r3, r3, #13
 800aedc:	f003 0307 	and.w	r3, r3, #7
 800aee0:	4903      	ldr	r1, [pc, #12]	; (800aef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aee2:	5ccb      	ldrb	r3, [r1, r3]
 800aee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	40023800 	.word	0x40023800
 800aef0:	080130bc 	.word	0x080130bc

0800aef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aef8:	b0a6      	sub	sp, #152	; 0x98
 800aefa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800aefc:	2300      	movs	r3, #0
 800aefe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 800af08:	2300      	movs	r3, #0
 800af0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800af0e:	2300      	movs	r3, #0
 800af10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800af14:	2300      	movs	r3, #0
 800af16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af1a:	4bc8      	ldr	r3, [pc, #800]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	f003 030c 	and.w	r3, r3, #12
 800af22:	2b0c      	cmp	r3, #12
 800af24:	f200 817e 	bhi.w	800b224 <HAL_RCC_GetSysClockFreq+0x330>
 800af28:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <HAL_RCC_GetSysClockFreq+0x3c>)
 800af2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2e:	bf00      	nop
 800af30:	0800af65 	.word	0x0800af65
 800af34:	0800b225 	.word	0x0800b225
 800af38:	0800b225 	.word	0x0800b225
 800af3c:	0800b225 	.word	0x0800b225
 800af40:	0800af6d 	.word	0x0800af6d
 800af44:	0800b225 	.word	0x0800b225
 800af48:	0800b225 	.word	0x0800b225
 800af4c:	0800b225 	.word	0x0800b225
 800af50:	0800af75 	.word	0x0800af75
 800af54:	0800b225 	.word	0x0800b225
 800af58:	0800b225 	.word	0x0800b225
 800af5c:	0800b225 	.word	0x0800b225
 800af60:	0800b0df 	.word	0x0800b0df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800af64:	4bb6      	ldr	r3, [pc, #728]	; (800b240 <HAL_RCC_GetSysClockFreq+0x34c>)
 800af66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800af6a:	e15f      	b.n	800b22c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800af6c:	4bb5      	ldr	r3, [pc, #724]	; (800b244 <HAL_RCC_GetSysClockFreq+0x350>)
 800af6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800af72:	e15b      	b.n	800b22c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800af74:	4bb1      	ldr	r3, [pc, #708]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800af80:	4bae      	ldr	r3, [pc, #696]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800af82:	685b      	ldr	r3, [r3, #4]
 800af84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d031      	beq.n	800aff0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800af8c:	4bab      	ldr	r3, [pc, #684]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	099b      	lsrs	r3, r3, #6
 800af92:	2200      	movs	r2, #0
 800af94:	66bb      	str	r3, [r7, #104]	; 0x68
 800af96:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af9e:	663b      	str	r3, [r7, #96]	; 0x60
 800afa0:	2300      	movs	r3, #0
 800afa2:	667b      	str	r3, [r7, #100]	; 0x64
 800afa4:	4ba7      	ldr	r3, [pc, #668]	; (800b244 <HAL_RCC_GetSysClockFreq+0x350>)
 800afa6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800afaa:	462a      	mov	r2, r5
 800afac:	fb03 f202 	mul.w	r2, r3, r2
 800afb0:	2300      	movs	r3, #0
 800afb2:	4621      	mov	r1, r4
 800afb4:	fb01 f303 	mul.w	r3, r1, r3
 800afb8:	4413      	add	r3, r2
 800afba:	4aa2      	ldr	r2, [pc, #648]	; (800b244 <HAL_RCC_GetSysClockFreq+0x350>)
 800afbc:	4621      	mov	r1, r4
 800afbe:	fba1 1202 	umull	r1, r2, r1, r2
 800afc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800afc4:	460a      	mov	r2, r1
 800afc6:	67ba      	str	r2, [r7, #120]	; 0x78
 800afc8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800afca:	4413      	add	r3, r2
 800afcc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800afce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afd2:	2200      	movs	r2, #0
 800afd4:	65bb      	str	r3, [r7, #88]	; 0x58
 800afd6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800afd8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800afdc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800afe0:	f7f5 fe72 	bl	8000cc8 <__aeabi_uldivmod>
 800afe4:	4602      	mov	r2, r0
 800afe6:	460b      	mov	r3, r1
 800afe8:	4613      	mov	r3, r2
 800afea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800afee:	e064      	b.n	800b0ba <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aff0:	4b92      	ldr	r3, [pc, #584]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	099b      	lsrs	r3, r3, #6
 800aff6:	2200      	movs	r2, #0
 800aff8:	653b      	str	r3, [r7, #80]	; 0x50
 800affa:	657a      	str	r2, [r7, #84]	; 0x54
 800affc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800affe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b002:	64bb      	str	r3, [r7, #72]	; 0x48
 800b004:	2300      	movs	r3, #0
 800b006:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b008:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800b00c:	4622      	mov	r2, r4
 800b00e:	462b      	mov	r3, r5
 800b010:	f04f 0000 	mov.w	r0, #0
 800b014:	f04f 0100 	mov.w	r1, #0
 800b018:	0159      	lsls	r1, r3, #5
 800b01a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b01e:	0150      	lsls	r0, r2, #5
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	4621      	mov	r1, r4
 800b026:	1a51      	subs	r1, r2, r1
 800b028:	6139      	str	r1, [r7, #16]
 800b02a:	4629      	mov	r1, r5
 800b02c:	eb63 0301 	sbc.w	r3, r3, r1
 800b030:	617b      	str	r3, [r7, #20]
 800b032:	f04f 0200 	mov.w	r2, #0
 800b036:	f04f 0300 	mov.w	r3, #0
 800b03a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b03e:	4659      	mov	r1, fp
 800b040:	018b      	lsls	r3, r1, #6
 800b042:	4651      	mov	r1, sl
 800b044:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b048:	4651      	mov	r1, sl
 800b04a:	018a      	lsls	r2, r1, #6
 800b04c:	4651      	mov	r1, sl
 800b04e:	ebb2 0801 	subs.w	r8, r2, r1
 800b052:	4659      	mov	r1, fp
 800b054:	eb63 0901 	sbc.w	r9, r3, r1
 800b058:	f04f 0200 	mov.w	r2, #0
 800b05c:	f04f 0300 	mov.w	r3, #0
 800b060:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b064:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b068:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b06c:	4690      	mov	r8, r2
 800b06e:	4699      	mov	r9, r3
 800b070:	4623      	mov	r3, r4
 800b072:	eb18 0303 	adds.w	r3, r8, r3
 800b076:	60bb      	str	r3, [r7, #8]
 800b078:	462b      	mov	r3, r5
 800b07a:	eb49 0303 	adc.w	r3, r9, r3
 800b07e:	60fb      	str	r3, [r7, #12]
 800b080:	f04f 0200 	mov.w	r2, #0
 800b084:	f04f 0300 	mov.w	r3, #0
 800b088:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b08c:	4629      	mov	r1, r5
 800b08e:	028b      	lsls	r3, r1, #10
 800b090:	4621      	mov	r1, r4
 800b092:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b096:	4621      	mov	r1, r4
 800b098:	028a      	lsls	r2, r1, #10
 800b09a:	4610      	mov	r0, r2
 800b09c:	4619      	mov	r1, r3
 800b09e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b0a6:	647a      	str	r2, [r7, #68]	; 0x44
 800b0a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b0ac:	f7f5 fe0c 	bl	8000cc8 <__aeabi_uldivmod>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4613      	mov	r3, r2
 800b0b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b0ba:	4b60      	ldr	r3, [pc, #384]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	0c1b      	lsrs	r3, r3, #16
 800b0c0:	f003 0303 	and.w	r3, r3, #3
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	005b      	lsls	r3, r3, #1
 800b0c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 800b0cc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800b0dc:	e0a6      	b.n	800b22c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b0de:	4b57      	ldr	r3, [pc, #348]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b0ea:	4b54      	ldr	r3, [pc, #336]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d02a      	beq.n	800b14c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0f6:	4b51      	ldr	r3, [pc, #324]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	099b      	lsrs	r3, r3, #6
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800b100:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800b108:	2100      	movs	r1, #0
 800b10a:	4b4e      	ldr	r3, [pc, #312]	; (800b244 <HAL_RCC_GetSysClockFreq+0x350>)
 800b10c:	fb03 f201 	mul.w	r2, r3, r1
 800b110:	2300      	movs	r3, #0
 800b112:	fb00 f303 	mul.w	r3, r0, r3
 800b116:	4413      	add	r3, r2
 800b118:	4a4a      	ldr	r2, [pc, #296]	; (800b244 <HAL_RCC_GetSysClockFreq+0x350>)
 800b11a:	fba0 1202 	umull	r1, r2, r0, r2
 800b11e:	677a      	str	r2, [r7, #116]	; 0x74
 800b120:	460a      	mov	r2, r1
 800b122:	673a      	str	r2, [r7, #112]	; 0x70
 800b124:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b126:	4413      	add	r3, r2
 800b128:	677b      	str	r3, [r7, #116]	; 0x74
 800b12a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b12e:	2200      	movs	r2, #0
 800b130:	633b      	str	r3, [r7, #48]	; 0x30
 800b132:	637a      	str	r2, [r7, #52]	; 0x34
 800b134:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b138:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800b13c:	f7f5 fdc4 	bl	8000cc8 <__aeabi_uldivmod>
 800b140:	4602      	mov	r2, r0
 800b142:	460b      	mov	r3, r1
 800b144:	4613      	mov	r3, r2
 800b146:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b14a:	e05b      	b.n	800b204 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b14c:	4b3b      	ldr	r3, [pc, #236]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	099b      	lsrs	r3, r3, #6
 800b152:	2200      	movs	r2, #0
 800b154:	62bb      	str	r3, [r7, #40]	; 0x28
 800b156:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b15e:	623b      	str	r3, [r7, #32]
 800b160:	2300      	movs	r3, #0
 800b162:	627b      	str	r3, [r7, #36]	; 0x24
 800b164:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b168:	4642      	mov	r2, r8
 800b16a:	464b      	mov	r3, r9
 800b16c:	f04f 0000 	mov.w	r0, #0
 800b170:	f04f 0100 	mov.w	r1, #0
 800b174:	0159      	lsls	r1, r3, #5
 800b176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b17a:	0150      	lsls	r0, r2, #5
 800b17c:	4602      	mov	r2, r0
 800b17e:	460b      	mov	r3, r1
 800b180:	4641      	mov	r1, r8
 800b182:	ebb2 0a01 	subs.w	sl, r2, r1
 800b186:	4649      	mov	r1, r9
 800b188:	eb63 0b01 	sbc.w	fp, r3, r1
 800b18c:	f04f 0200 	mov.w	r2, #0
 800b190:	f04f 0300 	mov.w	r3, #0
 800b194:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b198:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b19c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b1a0:	ebb2 040a 	subs.w	r4, r2, sl
 800b1a4:	eb63 050b 	sbc.w	r5, r3, fp
 800b1a8:	f04f 0200 	mov.w	r2, #0
 800b1ac:	f04f 0300 	mov.w	r3, #0
 800b1b0:	00eb      	lsls	r3, r5, #3
 800b1b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b1b6:	00e2      	lsls	r2, r4, #3
 800b1b8:	4614      	mov	r4, r2
 800b1ba:	461d      	mov	r5, r3
 800b1bc:	4643      	mov	r3, r8
 800b1be:	18e3      	adds	r3, r4, r3
 800b1c0:	603b      	str	r3, [r7, #0]
 800b1c2:	464b      	mov	r3, r9
 800b1c4:	eb45 0303 	adc.w	r3, r5, r3
 800b1c8:	607b      	str	r3, [r7, #4]
 800b1ca:	f04f 0200 	mov.w	r2, #0
 800b1ce:	f04f 0300 	mov.w	r3, #0
 800b1d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	028b      	lsls	r3, r1, #10
 800b1da:	4621      	mov	r1, r4
 800b1dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b1e0:	4621      	mov	r1, r4
 800b1e2:	028a      	lsls	r2, r1, #10
 800b1e4:	4610      	mov	r0, r2
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	61bb      	str	r3, [r7, #24]
 800b1f0:	61fa      	str	r2, [r7, #28]
 800b1f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b1f6:	f7f5 fd67 	bl	8000cc8 <__aeabi_uldivmod>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4613      	mov	r3, r2
 800b200:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b204:	4b0d      	ldr	r3, [pc, #52]	; (800b23c <HAL_RCC_GetSysClockFreq+0x348>)
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	0f1b      	lsrs	r3, r3, #28
 800b20a:	f003 0307 	and.w	r3, r3, #7
 800b20e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800b212:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b21e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800b222:	e003      	b.n	800b22c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b224:	4b06      	ldr	r3, [pc, #24]	; (800b240 <HAL_RCC_GetSysClockFreq+0x34c>)
 800b226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800b22a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b22c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800b230:	4618      	mov	r0, r3
 800b232:	3798      	adds	r7, #152	; 0x98
 800b234:	46bd      	mov	sp, r7
 800b236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b23a:	bf00      	nop
 800b23c:	40023800 	.word	0x40023800
 800b240:	00f42400 	.word	0x00f42400
 800b244:	017d7840 	.word	0x017d7840

0800b248 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d101      	bne.n	800b25a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	e28d      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	f000 8083 	beq.w	800b36e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b268:	4b94      	ldr	r3, [pc, #592]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b26a:	689b      	ldr	r3, [r3, #8]
 800b26c:	f003 030c 	and.w	r3, r3, #12
 800b270:	2b04      	cmp	r3, #4
 800b272:	d019      	beq.n	800b2a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b274:	4b91      	ldr	r3, [pc, #580]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b27c:	2b08      	cmp	r3, #8
 800b27e:	d106      	bne.n	800b28e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b280:	4b8e      	ldr	r3, [pc, #568]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b28c:	d00c      	beq.n	800b2a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b28e:	4b8b      	ldr	r3, [pc, #556]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b296:	2b0c      	cmp	r3, #12
 800b298:	d112      	bne.n	800b2c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b29a:	4b88      	ldr	r3, [pc, #544]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2a6:	d10b      	bne.n	800b2c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2a8:	4b84      	ldr	r3, [pc, #528]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d05b      	beq.n	800b36c <HAL_RCC_OscConfig+0x124>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d157      	bne.n	800b36c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e25a      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c8:	d106      	bne.n	800b2d8 <HAL_RCC_OscConfig+0x90>
 800b2ca:	4b7c      	ldr	r3, [pc, #496]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a7b      	ldr	r2, [pc, #492]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b2d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2d4:	6013      	str	r3, [r2, #0]
 800b2d6:	e01d      	b.n	800b314 <HAL_RCC_OscConfig+0xcc>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2e0:	d10c      	bne.n	800b2fc <HAL_RCC_OscConfig+0xb4>
 800b2e2:	4b76      	ldr	r3, [pc, #472]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a75      	ldr	r2, [pc, #468]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b2e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b2ec:	6013      	str	r3, [r2, #0]
 800b2ee:	4b73      	ldr	r3, [pc, #460]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a72      	ldr	r2, [pc, #456]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b2f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2f8:	6013      	str	r3, [r2, #0]
 800b2fa:	e00b      	b.n	800b314 <HAL_RCC_OscConfig+0xcc>
 800b2fc:	4b6f      	ldr	r3, [pc, #444]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a6e      	ldr	r2, [pc, #440]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	4b6c      	ldr	r3, [pc, #432]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a6b      	ldr	r2, [pc, #428]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b30e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d013      	beq.n	800b344 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b31c:	f7fd fd50 	bl	8008dc0 <HAL_GetTick>
 800b320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b322:	e008      	b.n	800b336 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b324:	f7fd fd4c 	bl	8008dc0 <HAL_GetTick>
 800b328:	4602      	mov	r2, r0
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	2b64      	cmp	r3, #100	; 0x64
 800b330:	d901      	bls.n	800b336 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e21f      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b336:	4b61      	ldr	r3, [pc, #388]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0f0      	beq.n	800b324 <HAL_RCC_OscConfig+0xdc>
 800b342:	e014      	b.n	800b36e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b344:	f7fd fd3c 	bl	8008dc0 <HAL_GetTick>
 800b348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b34a:	e008      	b.n	800b35e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b34c:	f7fd fd38 	bl	8008dc0 <HAL_GetTick>
 800b350:	4602      	mov	r2, r0
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	2b64      	cmp	r3, #100	; 0x64
 800b358:	d901      	bls.n	800b35e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e20b      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b35e:	4b57      	ldr	r3, [pc, #348]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1f0      	bne.n	800b34c <HAL_RCC_OscConfig+0x104>
 800b36a:	e000      	b.n	800b36e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b36c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f003 0302 	and.w	r3, r3, #2
 800b376:	2b00      	cmp	r3, #0
 800b378:	d06f      	beq.n	800b45a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b37a:	4b50      	ldr	r3, [pc, #320]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	f003 030c 	and.w	r3, r3, #12
 800b382:	2b00      	cmp	r3, #0
 800b384:	d017      	beq.n	800b3b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b386:	4b4d      	ldr	r3, [pc, #308]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b38e:	2b08      	cmp	r3, #8
 800b390:	d105      	bne.n	800b39e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b392:	4b4a      	ldr	r3, [pc, #296]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d00b      	beq.n	800b3b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b39e:	4b47      	ldr	r3, [pc, #284]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b3a6:	2b0c      	cmp	r3, #12
 800b3a8:	d11c      	bne.n	800b3e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b3aa:	4b44      	ldr	r3, [pc, #272]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d116      	bne.n	800b3e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3b6:	4b41      	ldr	r3, [pc, #260]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	f003 0302 	and.w	r3, r3, #2
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d005      	beq.n	800b3ce <HAL_RCC_OscConfig+0x186>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	68db      	ldr	r3, [r3, #12]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d001      	beq.n	800b3ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e1d3      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b3ce:	4b3b      	ldr	r3, [pc, #236]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	691b      	ldr	r3, [r3, #16]
 800b3da:	00db      	lsls	r3, r3, #3
 800b3dc:	4937      	ldr	r1, [pc, #220]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b3e2:	e03a      	b.n	800b45a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	68db      	ldr	r3, [r3, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d020      	beq.n	800b42e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b3ec:	4b34      	ldr	r3, [pc, #208]	; (800b4c0 <HAL_RCC_OscConfig+0x278>)
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3f2:	f7fd fce5 	bl	8008dc0 <HAL_GetTick>
 800b3f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3f8:	e008      	b.n	800b40c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b3fa:	f7fd fce1 	bl	8008dc0 <HAL_GetTick>
 800b3fe:	4602      	mov	r2, r0
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	2b02      	cmp	r3, #2
 800b406:	d901      	bls.n	800b40c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e1b4      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b40c:	4b2b      	ldr	r3, [pc, #172]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 0302 	and.w	r3, r3, #2
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0f0      	beq.n	800b3fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b418:	4b28      	ldr	r3, [pc, #160]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	4925      	ldr	r1, [pc, #148]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b428:	4313      	orrs	r3, r2
 800b42a:	600b      	str	r3, [r1, #0]
 800b42c:	e015      	b.n	800b45a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b42e:	4b24      	ldr	r3, [pc, #144]	; (800b4c0 <HAL_RCC_OscConfig+0x278>)
 800b430:	2200      	movs	r2, #0
 800b432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b434:	f7fd fcc4 	bl	8008dc0 <HAL_GetTick>
 800b438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b43a:	e008      	b.n	800b44e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b43c:	f7fd fcc0 	bl	8008dc0 <HAL_GetTick>
 800b440:	4602      	mov	r2, r0
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	1ad3      	subs	r3, r2, r3
 800b446:	2b02      	cmp	r3, #2
 800b448:	d901      	bls.n	800b44e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800b44a:	2303      	movs	r3, #3
 800b44c:	e193      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b44e:	4b1b      	ldr	r3, [pc, #108]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 0302 	and.w	r3, r3, #2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d1f0      	bne.n	800b43c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 0308 	and.w	r3, r3, #8
 800b462:	2b00      	cmp	r3, #0
 800b464:	d036      	beq.n	800b4d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d016      	beq.n	800b49c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b46e:	4b15      	ldr	r3, [pc, #84]	; (800b4c4 <HAL_RCC_OscConfig+0x27c>)
 800b470:	2201      	movs	r2, #1
 800b472:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b474:	f7fd fca4 	bl	8008dc0 <HAL_GetTick>
 800b478:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b47a:	e008      	b.n	800b48e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b47c:	f7fd fca0 	bl	8008dc0 <HAL_GetTick>
 800b480:	4602      	mov	r2, r0
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	2b02      	cmp	r3, #2
 800b488:	d901      	bls.n	800b48e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800b48a:	2303      	movs	r3, #3
 800b48c:	e173      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b48e:	4b0b      	ldr	r3, [pc, #44]	; (800b4bc <HAL_RCC_OscConfig+0x274>)
 800b490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b492:	f003 0302 	and.w	r3, r3, #2
 800b496:	2b00      	cmp	r3, #0
 800b498:	d0f0      	beq.n	800b47c <HAL_RCC_OscConfig+0x234>
 800b49a:	e01b      	b.n	800b4d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b49c:	4b09      	ldr	r3, [pc, #36]	; (800b4c4 <HAL_RCC_OscConfig+0x27c>)
 800b49e:	2200      	movs	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4a2:	f7fd fc8d 	bl	8008dc0 <HAL_GetTick>
 800b4a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4a8:	e00e      	b.n	800b4c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b4aa:	f7fd fc89 	bl	8008dc0 <HAL_GetTick>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	2b02      	cmp	r3, #2
 800b4b6:	d907      	bls.n	800b4c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800b4b8:	2303      	movs	r3, #3
 800b4ba:	e15c      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
 800b4bc:	40023800 	.word	0x40023800
 800b4c0:	42470000 	.word	0x42470000
 800b4c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b4c8:	4b8a      	ldr	r3, [pc, #552]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b4ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4cc:	f003 0302 	and.w	r3, r3, #2
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d1ea      	bne.n	800b4aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f003 0304 	and.w	r3, r3, #4
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 8097 	beq.w	800b610 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b4e6:	4b83      	ldr	r3, [pc, #524]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10f      	bne.n	800b512 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60bb      	str	r3, [r7, #8]
 800b4f6:	4b7f      	ldr	r3, [pc, #508]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fa:	4a7e      	ldr	r2, [pc, #504]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b4fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b500:	6413      	str	r3, [r2, #64]	; 0x40
 800b502:	4b7c      	ldr	r3, [pc, #496]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b50a:	60bb      	str	r3, [r7, #8]
 800b50c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b50e:	2301      	movs	r3, #1
 800b510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b512:	4b79      	ldr	r3, [pc, #484]	; (800b6f8 <HAL_RCC_OscConfig+0x4b0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d118      	bne.n	800b550 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b51e:	4b76      	ldr	r3, [pc, #472]	; (800b6f8 <HAL_RCC_OscConfig+0x4b0>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a75      	ldr	r2, [pc, #468]	; (800b6f8 <HAL_RCC_OscConfig+0x4b0>)
 800b524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b52a:	f7fd fc49 	bl	8008dc0 <HAL_GetTick>
 800b52e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b530:	e008      	b.n	800b544 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b532:	f7fd fc45 	bl	8008dc0 <HAL_GetTick>
 800b536:	4602      	mov	r2, r0
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d901      	bls.n	800b544 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e118      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b544:	4b6c      	ldr	r3, [pc, #432]	; (800b6f8 <HAL_RCC_OscConfig+0x4b0>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d0f0      	beq.n	800b532 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d106      	bne.n	800b566 <HAL_RCC_OscConfig+0x31e>
 800b558:	4b66      	ldr	r3, [pc, #408]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b55a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55c:	4a65      	ldr	r2, [pc, #404]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b55e:	f043 0301 	orr.w	r3, r3, #1
 800b562:	6713      	str	r3, [r2, #112]	; 0x70
 800b564:	e01c      	b.n	800b5a0 <HAL_RCC_OscConfig+0x358>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	689b      	ldr	r3, [r3, #8]
 800b56a:	2b05      	cmp	r3, #5
 800b56c:	d10c      	bne.n	800b588 <HAL_RCC_OscConfig+0x340>
 800b56e:	4b61      	ldr	r3, [pc, #388]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b572:	4a60      	ldr	r2, [pc, #384]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b574:	f043 0304 	orr.w	r3, r3, #4
 800b578:	6713      	str	r3, [r2, #112]	; 0x70
 800b57a:	4b5e      	ldr	r3, [pc, #376]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b57c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b57e:	4a5d      	ldr	r2, [pc, #372]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b580:	f043 0301 	orr.w	r3, r3, #1
 800b584:	6713      	str	r3, [r2, #112]	; 0x70
 800b586:	e00b      	b.n	800b5a0 <HAL_RCC_OscConfig+0x358>
 800b588:	4b5a      	ldr	r3, [pc, #360]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b58a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b58c:	4a59      	ldr	r2, [pc, #356]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b58e:	f023 0301 	bic.w	r3, r3, #1
 800b592:	6713      	str	r3, [r2, #112]	; 0x70
 800b594:	4b57      	ldr	r3, [pc, #348]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b598:	4a56      	ldr	r2, [pc, #344]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b59a:	f023 0304 	bic.w	r3, r3, #4
 800b59e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d015      	beq.n	800b5d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5a8:	f7fd fc0a 	bl	8008dc0 <HAL_GetTick>
 800b5ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5ae:	e00a      	b.n	800b5c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b5b0:	f7fd fc06 	bl	8008dc0 <HAL_GetTick>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	1ad3      	subs	r3, r2, r3
 800b5ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d901      	bls.n	800b5c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800b5c2:	2303      	movs	r3, #3
 800b5c4:	e0d7      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b5c6:	4b4b      	ldr	r3, [pc, #300]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b5c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5ca:	f003 0302 	and.w	r3, r3, #2
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d0ee      	beq.n	800b5b0 <HAL_RCC_OscConfig+0x368>
 800b5d2:	e014      	b.n	800b5fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b5d4:	f7fd fbf4 	bl	8008dc0 <HAL_GetTick>
 800b5d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5da:	e00a      	b.n	800b5f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b5dc:	f7fd fbf0 	bl	8008dc0 <HAL_GetTick>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	1ad3      	subs	r3, r2, r3
 800b5e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5ea:	4293      	cmp	r3, r2
 800b5ec:	d901      	bls.n	800b5f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b5ee:	2303      	movs	r3, #3
 800b5f0:	e0c1      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b5f2:	4b40      	ldr	r3, [pc, #256]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b5f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d1ee      	bne.n	800b5dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d105      	bne.n	800b610 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b604:	4b3b      	ldr	r3, [pc, #236]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b608:	4a3a      	ldr	r2, [pc, #232]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b60a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b60e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	699b      	ldr	r3, [r3, #24]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 80ad 	beq.w	800b774 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b61a:	4b36      	ldr	r3, [pc, #216]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	f003 030c 	and.w	r3, r3, #12
 800b622:	2b08      	cmp	r3, #8
 800b624:	d060      	beq.n	800b6e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	2b02      	cmp	r3, #2
 800b62c:	d145      	bne.n	800b6ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b62e:	4b33      	ldr	r3, [pc, #204]	; (800b6fc <HAL_RCC_OscConfig+0x4b4>)
 800b630:	2200      	movs	r2, #0
 800b632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b634:	f7fd fbc4 	bl	8008dc0 <HAL_GetTick>
 800b638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b63a:	e008      	b.n	800b64e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b63c:	f7fd fbc0 	bl	8008dc0 <HAL_GetTick>
 800b640:	4602      	mov	r2, r0
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	2b02      	cmp	r3, #2
 800b648:	d901      	bls.n	800b64e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e093      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b64e:	4b29      	ldr	r3, [pc, #164]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1f0      	bne.n	800b63c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	69da      	ldr	r2, [r3, #28]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6a1b      	ldr	r3, [r3, #32]
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	019b      	lsls	r3, r3, #6
 800b66a:	431a      	orrs	r2, r3
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b670:	085b      	lsrs	r3, r3, #1
 800b672:	3b01      	subs	r3, #1
 800b674:	041b      	lsls	r3, r3, #16
 800b676:	431a      	orrs	r2, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67c:	061b      	lsls	r3, r3, #24
 800b67e:	431a      	orrs	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b684:	071b      	lsls	r3, r3, #28
 800b686:	491b      	ldr	r1, [pc, #108]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b688:	4313      	orrs	r3, r2
 800b68a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b68c:	4b1b      	ldr	r3, [pc, #108]	; (800b6fc <HAL_RCC_OscConfig+0x4b4>)
 800b68e:	2201      	movs	r2, #1
 800b690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b692:	f7fd fb95 	bl	8008dc0 <HAL_GetTick>
 800b696:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b698:	e008      	b.n	800b6ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b69a:	f7fd fb91 	bl	8008dc0 <HAL_GetTick>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	1ad3      	subs	r3, r2, r3
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d901      	bls.n	800b6ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	e064      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6ac:	4b11      	ldr	r3, [pc, #68]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d0f0      	beq.n	800b69a <HAL_RCC_OscConfig+0x452>
 800b6b8:	e05c      	b.n	800b774 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6ba:	4b10      	ldr	r3, [pc, #64]	; (800b6fc <HAL_RCC_OscConfig+0x4b4>)
 800b6bc:	2200      	movs	r2, #0
 800b6be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6c0:	f7fd fb7e 	bl	8008dc0 <HAL_GetTick>
 800b6c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6c6:	e008      	b.n	800b6da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b6c8:	f7fd fb7a 	bl	8008dc0 <HAL_GetTick>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	1ad3      	subs	r3, r2, r3
 800b6d2:	2b02      	cmp	r3, #2
 800b6d4:	d901      	bls.n	800b6da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e04d      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b6da:	4b06      	ldr	r3, [pc, #24]	; (800b6f4 <HAL_RCC_OscConfig+0x4ac>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1f0      	bne.n	800b6c8 <HAL_RCC_OscConfig+0x480>
 800b6e6:	e045      	b.n	800b774 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d107      	bne.n	800b700 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800b6f0:	2301      	movs	r3, #1
 800b6f2:	e040      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
 800b6f4:	40023800 	.word	0x40023800
 800b6f8:	40007000 	.word	0x40007000
 800b6fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b700:	4b1f      	ldr	r3, [pc, #124]	; (800b780 <HAL_RCC_OscConfig+0x538>)
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	699b      	ldr	r3, [r3, #24]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d030      	beq.n	800b770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b718:	429a      	cmp	r2, r3
 800b71a:	d129      	bne.n	800b770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b726:	429a      	cmp	r2, r3
 800b728:	d122      	bne.n	800b770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b72a:	68fa      	ldr	r2, [r7, #12]
 800b72c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b730:	4013      	ands	r3, r2
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b736:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b738:	4293      	cmp	r3, r2
 800b73a:	d119      	bne.n	800b770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b746:	085b      	lsrs	r3, r3, #1
 800b748:	3b01      	subs	r3, #1
 800b74a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b74c:	429a      	cmp	r2, r3
 800b74e:	d10f      	bne.n	800b770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b75a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d107      	bne.n	800b770 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d001      	beq.n	800b774 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e000      	b.n	800b776 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800b774:	2300      	movs	r3, #0
}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	40023800 	.word	0x40023800

0800b784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d101      	bne.n	800b796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	e041      	b.n	800b81a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d106      	bne.n	800b7b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f7fc fff8 	bl	80087a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	3304      	adds	r3, #4
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	4610      	mov	r0, r2
 800b7c4:	f000 fd8c 	bl	800c2e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
	...

0800b824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b01      	cmp	r3, #1
 800b836:	d001      	beq.n	800b83c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b838:	2301      	movs	r3, #1
 800b83a:	e04e      	b.n	800b8da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2202      	movs	r2, #2
 800b840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	68da      	ldr	r2, [r3, #12]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f042 0201 	orr.w	r2, r2, #1
 800b852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a23      	ldr	r2, [pc, #140]	; (800b8e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d022      	beq.n	800b8a4 <HAL_TIM_Base_Start_IT+0x80>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b866:	d01d      	beq.n	800b8a4 <HAL_TIM_Base_Start_IT+0x80>
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4a1f      	ldr	r2, [pc, #124]	; (800b8ec <HAL_TIM_Base_Start_IT+0xc8>)
 800b86e:	4293      	cmp	r3, r2
 800b870:	d018      	beq.n	800b8a4 <HAL_TIM_Base_Start_IT+0x80>
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a1e      	ldr	r2, [pc, #120]	; (800b8f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d013      	beq.n	800b8a4 <HAL_TIM_Base_Start_IT+0x80>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4a1c      	ldr	r2, [pc, #112]	; (800b8f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b882:	4293      	cmp	r3, r2
 800b884:	d00e      	beq.n	800b8a4 <HAL_TIM_Base_Start_IT+0x80>
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a1b      	ldr	r2, [pc, #108]	; (800b8f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d009      	beq.n	800b8a4 <HAL_TIM_Base_Start_IT+0x80>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	4a19      	ldr	r2, [pc, #100]	; (800b8fc <HAL_TIM_Base_Start_IT+0xd8>)
 800b896:	4293      	cmp	r3, r2
 800b898:	d004      	beq.n	800b8a4 <HAL_TIM_Base_Start_IT+0x80>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a18      	ldr	r2, [pc, #96]	; (800b900 <HAL_TIM_Base_Start_IT+0xdc>)
 800b8a0:	4293      	cmp	r3, r2
 800b8a2:	d111      	bne.n	800b8c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f003 0307 	and.w	r3, r3, #7
 800b8ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b06      	cmp	r3, #6
 800b8b4:	d010      	beq.n	800b8d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	681a      	ldr	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f042 0201 	orr.w	r2, r2, #1
 800b8c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8c6:	e007      	b.n	800b8d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f042 0201 	orr.w	r2, r2, #1
 800b8d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	40010000 	.word	0x40010000
 800b8ec:	40000400 	.word	0x40000400
 800b8f0:	40000800 	.word	0x40000800
 800b8f4:	40000c00 	.word	0x40000c00
 800b8f8:	40010400 	.word	0x40010400
 800b8fc:	40014000 	.word	0x40014000
 800b900:	40001800 	.word	0x40001800

0800b904 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e041      	b.n	800b99a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b91c:	b2db      	uxtb	r3, r3
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d106      	bne.n	800b930 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f7fc ff18 	bl	8008760 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2202      	movs	r2, #2
 800b934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3304      	adds	r3, #4
 800b940:	4619      	mov	r1, r3
 800b942:	4610      	mov	r0, r2
 800b944:	f000 fccc 	bl	800c2e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2201      	movs	r2, #1
 800b97c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b998:	2300      	movs	r3, #0
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3708      	adds	r7, #8
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
	...

0800b9a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
 800b9ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d109      	bne.n	800b9c8 <HAL_TIM_PWM_Start+0x24>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	bf14      	ite	ne
 800b9c0:	2301      	movne	r3, #1
 800b9c2:	2300      	moveq	r3, #0
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	e022      	b.n	800ba0e <HAL_TIM_PWM_Start+0x6a>
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2b04      	cmp	r3, #4
 800b9cc:	d109      	bne.n	800b9e2 <HAL_TIM_PWM_Start+0x3e>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	bf14      	ite	ne
 800b9da:	2301      	movne	r3, #1
 800b9dc:	2300      	moveq	r3, #0
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	e015      	b.n	800ba0e <HAL_TIM_PWM_Start+0x6a>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b08      	cmp	r3, #8
 800b9e6:	d109      	bne.n	800b9fc <HAL_TIM_PWM_Start+0x58>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b01      	cmp	r3, #1
 800b9f2:	bf14      	ite	ne
 800b9f4:	2301      	movne	r3, #1
 800b9f6:	2300      	moveq	r3, #0
 800b9f8:	b2db      	uxtb	r3, r3
 800b9fa:	e008      	b.n	800ba0e <HAL_TIM_PWM_Start+0x6a>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	2b01      	cmp	r3, #1
 800ba06:	bf14      	ite	ne
 800ba08:	2301      	movne	r3, #1
 800ba0a:	2300      	moveq	r3, #0
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d001      	beq.n	800ba16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e07c      	b.n	800bb10 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d104      	bne.n	800ba26 <HAL_TIM_PWM_Start+0x82>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2202      	movs	r2, #2
 800ba20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ba24:	e013      	b.n	800ba4e <HAL_TIM_PWM_Start+0xaa>
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	2b04      	cmp	r3, #4
 800ba2a:	d104      	bne.n	800ba36 <HAL_TIM_PWM_Start+0x92>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ba34:	e00b      	b.n	800ba4e <HAL_TIM_PWM_Start+0xaa>
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b08      	cmp	r3, #8
 800ba3a:	d104      	bne.n	800ba46 <HAL_TIM_PWM_Start+0xa2>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2202      	movs	r2, #2
 800ba40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba44:	e003      	b.n	800ba4e <HAL_TIM_PWM_Start+0xaa>
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2202      	movs	r2, #2
 800ba4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2201      	movs	r2, #1
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	4618      	mov	r0, r3
 800ba58:	f000 ff38 	bl	800c8cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a2d      	ldr	r2, [pc, #180]	; (800bb18 <HAL_TIM_PWM_Start+0x174>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d004      	beq.n	800ba70 <HAL_TIM_PWM_Start+0xcc>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a2c      	ldr	r2, [pc, #176]	; (800bb1c <HAL_TIM_PWM_Start+0x178>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d101      	bne.n	800ba74 <HAL_TIM_PWM_Start+0xd0>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e000      	b.n	800ba76 <HAL_TIM_PWM_Start+0xd2>
 800ba74:	2300      	movs	r3, #0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d007      	beq.n	800ba8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ba88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	4a22      	ldr	r2, [pc, #136]	; (800bb18 <HAL_TIM_PWM_Start+0x174>)
 800ba90:	4293      	cmp	r3, r2
 800ba92:	d022      	beq.n	800bada <HAL_TIM_PWM_Start+0x136>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba9c:	d01d      	beq.n	800bada <HAL_TIM_PWM_Start+0x136>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a1f      	ldr	r2, [pc, #124]	; (800bb20 <HAL_TIM_PWM_Start+0x17c>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d018      	beq.n	800bada <HAL_TIM_PWM_Start+0x136>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a1d      	ldr	r2, [pc, #116]	; (800bb24 <HAL_TIM_PWM_Start+0x180>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d013      	beq.n	800bada <HAL_TIM_PWM_Start+0x136>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a1c      	ldr	r2, [pc, #112]	; (800bb28 <HAL_TIM_PWM_Start+0x184>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d00e      	beq.n	800bada <HAL_TIM_PWM_Start+0x136>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a16      	ldr	r2, [pc, #88]	; (800bb1c <HAL_TIM_PWM_Start+0x178>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d009      	beq.n	800bada <HAL_TIM_PWM_Start+0x136>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a18      	ldr	r2, [pc, #96]	; (800bb2c <HAL_TIM_PWM_Start+0x188>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d004      	beq.n	800bada <HAL_TIM_PWM_Start+0x136>
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	4a16      	ldr	r2, [pc, #88]	; (800bb30 <HAL_TIM_PWM_Start+0x18c>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d111      	bne.n	800bafe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	689b      	ldr	r3, [r3, #8]
 800bae0:	f003 0307 	and.w	r3, r3, #7
 800bae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2b06      	cmp	r3, #6
 800baea:	d010      	beq.n	800bb0e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681a      	ldr	r2, [r3, #0]
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f042 0201 	orr.w	r2, r2, #1
 800bafa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bafc:	e007      	b.n	800bb0e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f042 0201 	orr.w	r2, r2, #1
 800bb0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bb0e:	2300      	movs	r3, #0
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}
 800bb18:	40010000 	.word	0x40010000
 800bb1c:	40010400 	.word	0x40010400
 800bb20:	40000400 	.word	0x40000400
 800bb24:	40000800 	.word	0x40000800
 800bb28:	40000c00 	.word	0x40000c00
 800bb2c:	40014000 	.word	0x40014000
 800bb30:	40001800 	.word	0x40001800

0800bb34 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	e097      	b.n	800bc78 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d106      	bne.n	800bb62 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7fc fd19 	bl	8008594 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2202      	movs	r2, #2
 800bb66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	6812      	ldr	r2, [r2, #0]
 800bb74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb78:	f023 0307 	bic.w	r3, r3, #7
 800bb7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681a      	ldr	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	3304      	adds	r3, #4
 800bb86:	4619      	mov	r1, r3
 800bb88:	4610      	mov	r0, r2
 800bb8a:	f000 fba9 	bl	800c2e0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	6a1b      	ldr	r3, [r3, #32]
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	697a      	ldr	r2, [r7, #20]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbb6:	f023 0303 	bic.w	r3, r3, #3
 800bbba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	689a      	ldr	r2, [r3, #8]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	699b      	ldr	r3, [r3, #24]
 800bbc4:	021b      	lsls	r3, r3, #8
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	693a      	ldr	r2, [r7, #16]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bbd4:	f023 030c 	bic.w	r3, r3, #12
 800bbd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bbe0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	68da      	ldr	r2, [r3, #12]
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	69db      	ldr	r3, [r3, #28]
 800bbee:	021b      	lsls	r3, r3, #8
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	693a      	ldr	r2, [r7, #16]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	691b      	ldr	r3, [r3, #16]
 800bbfc:	011a      	lsls	r2, r3, #4
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	6a1b      	ldr	r3, [r3, #32]
 800bc02:	031b      	lsls	r3, r3, #12
 800bc04:	4313      	orrs	r3, r2
 800bc06:	693a      	ldr	r2, [r7, #16]
 800bc08:	4313      	orrs	r3, r2
 800bc0a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bc12:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bc1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	695b      	ldr	r3, [r3, #20]
 800bc24:	011b      	lsls	r3, r3, #4
 800bc26:	4313      	orrs	r3, r2
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2201      	movs	r2, #1
 800bc52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2201      	movs	r2, #1
 800bc5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2201      	movs	r2, #1
 800bc6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2201      	movs	r2, #1
 800bc72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bca0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bca8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d110      	bne.n	800bcd2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcb0:	7bfb      	ldrb	r3, [r7, #15]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d102      	bne.n	800bcbc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bcb6:	7b7b      	ldrb	r3, [r7, #13]
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d001      	beq.n	800bcc0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e069      	b.n	800bd94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2202      	movs	r2, #2
 800bccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcd0:	e031      	b.n	800bd36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	2b04      	cmp	r3, #4
 800bcd6:	d110      	bne.n	800bcfa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcd8:	7bbb      	ldrb	r3, [r7, #14]
 800bcda:	2b01      	cmp	r3, #1
 800bcdc:	d102      	bne.n	800bce4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bcde:	7b3b      	ldrb	r3, [r7, #12]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d001      	beq.n	800bce8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e055      	b.n	800bd94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2202      	movs	r2, #2
 800bcec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bcf8:	e01d      	b.n	800bd36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d108      	bne.n	800bd12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd00:	7bbb      	ldrb	r3, [r7, #14]
 800bd02:	2b01      	cmp	r3, #1
 800bd04:	d105      	bne.n	800bd12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd06:	7b7b      	ldrb	r3, [r7, #13]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d102      	bne.n	800bd12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd0c:	7b3b      	ldrb	r3, [r7, #12]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d001      	beq.n	800bd16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e03e      	b.n	800bd94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	2202      	movs	r2, #2
 800bd22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2202      	movs	r2, #2
 800bd2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2202      	movs	r2, #2
 800bd32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <HAL_TIM_Encoder_Start+0xc4>
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	2b04      	cmp	r3, #4
 800bd40:	d008      	beq.n	800bd54 <HAL_TIM_Encoder_Start+0xd4>
 800bd42:	e00f      	b.n	800bd64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	2100      	movs	r1, #0
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 fdbd 	bl	800c8cc <TIM_CCxChannelCmd>
      break;
 800bd52:	e016      	b.n	800bd82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2201      	movs	r2, #1
 800bd5a:	2104      	movs	r1, #4
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 fdb5 	bl	800c8cc <TIM_CCxChannelCmd>
      break;
 800bd62:	e00e      	b.n	800bd82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f000 fdad 	bl	800c8cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2201      	movs	r2, #1
 800bd78:	2104      	movs	r1, #4
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f000 fda6 	bl	800c8cc <TIM_CCxChannelCmd>
      break;
 800bd80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f042 0201 	orr.w	r2, r2, #1
 800bd90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bd92:	2300      	movs	r3, #0
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b084      	sub	sp, #16
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	f003 0302 	and.w	r3, r3, #2
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d020      	beq.n	800be00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f003 0302 	and.w	r3, r3, #2
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d01b      	beq.n	800be00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f06f 0202 	mvn.w	r2, #2
 800bdd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	699b      	ldr	r3, [r3, #24]
 800bdde:	f003 0303 	and.w	r3, r3, #3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d003      	beq.n	800bdee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fa5b 	bl	800c2a2 <HAL_TIM_IC_CaptureCallback>
 800bdec:	e005      	b.n	800bdfa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fa4d 	bl	800c28e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f000 fa5e 	bl	800c2b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	f003 0304 	and.w	r3, r3, #4
 800be06:	2b00      	cmp	r3, #0
 800be08:	d020      	beq.n	800be4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f003 0304 	and.w	r3, r3, #4
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01b      	beq.n	800be4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f06f 0204 	mvn.w	r2, #4
 800be1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2202      	movs	r2, #2
 800be22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	699b      	ldr	r3, [r3, #24]
 800be2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d003      	beq.n	800be3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fa35 	bl	800c2a2 <HAL_TIM_IC_CaptureCallback>
 800be38:	e005      	b.n	800be46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fa27 	bl	800c28e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f000 fa38 	bl	800c2b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	2200      	movs	r2, #0
 800be4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	f003 0308 	and.w	r3, r3, #8
 800be52:	2b00      	cmp	r3, #0
 800be54:	d020      	beq.n	800be98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f003 0308 	and.w	r3, r3, #8
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01b      	beq.n	800be98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f06f 0208 	mvn.w	r2, #8
 800be68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2204      	movs	r2, #4
 800be6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	69db      	ldr	r3, [r3, #28]
 800be76:	f003 0303 	and.w	r3, r3, #3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fa0f 	bl	800c2a2 <HAL_TIM_IC_CaptureCallback>
 800be84:	e005      	b.n	800be92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fa01 	bl	800c28e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fa12 	bl	800c2b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	f003 0310 	and.w	r3, r3, #16
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d020      	beq.n	800bee4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	f003 0310 	and.w	r3, r3, #16
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d01b      	beq.n	800bee4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f06f 0210 	mvn.w	r2, #16
 800beb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2208      	movs	r2, #8
 800beba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	69db      	ldr	r3, [r3, #28]
 800bec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d003      	beq.n	800bed2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f9e9 	bl	800c2a2 <HAL_TIM_IC_CaptureCallback>
 800bed0:	e005      	b.n	800bede <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f9db 	bl	800c28e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 f9ec 	bl	800c2b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2200      	movs	r2, #0
 800bee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00c      	beq.n	800bf08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d007      	beq.n	800bf08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f06f 0201 	mvn.w	r2, #1
 800bf00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7f9 fea0 	bl	8005c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00c      	beq.n	800bf2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d007      	beq.n	800bf2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fd7c 	bl	800ca24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00c      	beq.n	800bf50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d007      	beq.n	800bf50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f000 f9bd 	bl	800c2ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	f003 0320 	and.w	r3, r3, #32
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d00c      	beq.n	800bf74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f003 0320 	and.w	r3, r3, #32
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d007      	beq.n	800bf74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f06f 0220 	mvn.w	r2, #32
 800bf6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fd4e 	bl	800ca10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf74:	bf00      	nop
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d101      	bne.n	800bf9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bf96:	2302      	movs	r3, #2
 800bf98:	e0ae      	b.n	800c0f8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2b0c      	cmp	r3, #12
 800bfa6:	f200 809f 	bhi.w	800c0e8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bfaa:	a201      	add	r2, pc, #4	; (adr r2, 800bfb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb0:	0800bfe5 	.word	0x0800bfe5
 800bfb4:	0800c0e9 	.word	0x0800c0e9
 800bfb8:	0800c0e9 	.word	0x0800c0e9
 800bfbc:	0800c0e9 	.word	0x0800c0e9
 800bfc0:	0800c025 	.word	0x0800c025
 800bfc4:	0800c0e9 	.word	0x0800c0e9
 800bfc8:	0800c0e9 	.word	0x0800c0e9
 800bfcc:	0800c0e9 	.word	0x0800c0e9
 800bfd0:	0800c067 	.word	0x0800c067
 800bfd4:	0800c0e9 	.word	0x0800c0e9
 800bfd8:	0800c0e9 	.word	0x0800c0e9
 800bfdc:	0800c0e9 	.word	0x0800c0e9
 800bfe0:	0800c0a7 	.word	0x0800c0a7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68b9      	ldr	r1, [r7, #8]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f000 fa24 	bl	800c438 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	699a      	ldr	r2, [r3, #24]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f042 0208 	orr.w	r2, r2, #8
 800bffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	699a      	ldr	r2, [r3, #24]
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f022 0204 	bic.w	r2, r2, #4
 800c00e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	6999      	ldr	r1, [r3, #24]
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	691a      	ldr	r2, [r3, #16]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	619a      	str	r2, [r3, #24]
      break;
 800c022:	e064      	b.n	800c0ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68b9      	ldr	r1, [r7, #8]
 800c02a:	4618      	mov	r0, r3
 800c02c:	f000 fa74 	bl	800c518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	699a      	ldr	r2, [r3, #24]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c03e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	699a      	ldr	r2, [r3, #24]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c04e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6999      	ldr	r1, [r3, #24]
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	691b      	ldr	r3, [r3, #16]
 800c05a:	021a      	lsls	r2, r3, #8
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	430a      	orrs	r2, r1
 800c062:	619a      	str	r2, [r3, #24]
      break;
 800c064:	e043      	b.n	800c0ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	68b9      	ldr	r1, [r7, #8]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f000 fac9 	bl	800c604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	69da      	ldr	r2, [r3, #28]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f042 0208 	orr.w	r2, r2, #8
 800c080:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	69da      	ldr	r2, [r3, #28]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f022 0204 	bic.w	r2, r2, #4
 800c090:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	69d9      	ldr	r1, [r3, #28]
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	691a      	ldr	r2, [r3, #16]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	430a      	orrs	r2, r1
 800c0a2:	61da      	str	r2, [r3, #28]
      break;
 800c0a4:	e023      	b.n	800c0ee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	68b9      	ldr	r1, [r7, #8]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f000 fb1d 	bl	800c6ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	69da      	ldr	r2, [r3, #28]
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	69da      	ldr	r2, [r3, #28]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c0d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	69d9      	ldr	r1, [r3, #28]
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	021a      	lsls	r2, r3, #8
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	430a      	orrs	r2, r1
 800c0e4:	61da      	str	r2, [r3, #28]
      break;
 800c0e6:	e002      	b.n	800c0ee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	3718      	adds	r7, #24
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bd80      	pop	{r7, pc}

0800c100 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c114:	2b01      	cmp	r3, #1
 800c116:	d101      	bne.n	800c11c <HAL_TIM_ConfigClockSource+0x1c>
 800c118:	2302      	movs	r3, #2
 800c11a:	e0b4      	b.n	800c286 <HAL_TIM_ConfigClockSource+0x186>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2202      	movs	r2, #2
 800c128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c13a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c142:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c154:	d03e      	beq.n	800c1d4 <HAL_TIM_ConfigClockSource+0xd4>
 800c156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c15a:	f200 8087 	bhi.w	800c26c <HAL_TIM_ConfigClockSource+0x16c>
 800c15e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c162:	f000 8086 	beq.w	800c272 <HAL_TIM_ConfigClockSource+0x172>
 800c166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c16a:	d87f      	bhi.n	800c26c <HAL_TIM_ConfigClockSource+0x16c>
 800c16c:	2b70      	cmp	r3, #112	; 0x70
 800c16e:	d01a      	beq.n	800c1a6 <HAL_TIM_ConfigClockSource+0xa6>
 800c170:	2b70      	cmp	r3, #112	; 0x70
 800c172:	d87b      	bhi.n	800c26c <HAL_TIM_ConfigClockSource+0x16c>
 800c174:	2b60      	cmp	r3, #96	; 0x60
 800c176:	d050      	beq.n	800c21a <HAL_TIM_ConfigClockSource+0x11a>
 800c178:	2b60      	cmp	r3, #96	; 0x60
 800c17a:	d877      	bhi.n	800c26c <HAL_TIM_ConfigClockSource+0x16c>
 800c17c:	2b50      	cmp	r3, #80	; 0x50
 800c17e:	d03c      	beq.n	800c1fa <HAL_TIM_ConfigClockSource+0xfa>
 800c180:	2b50      	cmp	r3, #80	; 0x50
 800c182:	d873      	bhi.n	800c26c <HAL_TIM_ConfigClockSource+0x16c>
 800c184:	2b40      	cmp	r3, #64	; 0x40
 800c186:	d058      	beq.n	800c23a <HAL_TIM_ConfigClockSource+0x13a>
 800c188:	2b40      	cmp	r3, #64	; 0x40
 800c18a:	d86f      	bhi.n	800c26c <HAL_TIM_ConfigClockSource+0x16c>
 800c18c:	2b30      	cmp	r3, #48	; 0x30
 800c18e:	d064      	beq.n	800c25a <HAL_TIM_ConfigClockSource+0x15a>
 800c190:	2b30      	cmp	r3, #48	; 0x30
 800c192:	d86b      	bhi.n	800c26c <HAL_TIM_ConfigClockSource+0x16c>
 800c194:	2b20      	cmp	r3, #32
 800c196:	d060      	beq.n	800c25a <HAL_TIM_ConfigClockSource+0x15a>
 800c198:	2b20      	cmp	r3, #32
 800c19a:	d867      	bhi.n	800c26c <HAL_TIM_ConfigClockSource+0x16c>
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d05c      	beq.n	800c25a <HAL_TIM_ConfigClockSource+0x15a>
 800c1a0:	2b10      	cmp	r3, #16
 800c1a2:	d05a      	beq.n	800c25a <HAL_TIM_ConfigClockSource+0x15a>
 800c1a4:	e062      	b.n	800c26c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c1b6:	f000 fb69 	bl	800c88c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	689b      	ldr	r3, [r3, #8]
 800c1c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c1c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68ba      	ldr	r2, [r7, #8]
 800c1d0:	609a      	str	r2, [r3, #8]
      break;
 800c1d2:	e04f      	b.n	800c274 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c1e4:	f000 fb52 	bl	800c88c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	689a      	ldr	r2, [r3, #8]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1f6:	609a      	str	r2, [r3, #8]
      break;
 800c1f8:	e03c      	b.n	800c274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c206:	461a      	mov	r2, r3
 800c208:	f000 fac6 	bl	800c798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	2150      	movs	r1, #80	; 0x50
 800c212:	4618      	mov	r0, r3
 800c214:	f000 fb1f 	bl	800c856 <TIM_ITRx_SetConfig>
      break;
 800c218:	e02c      	b.n	800c274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c226:	461a      	mov	r2, r3
 800c228:	f000 fae5 	bl	800c7f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2160      	movs	r1, #96	; 0x60
 800c232:	4618      	mov	r0, r3
 800c234:	f000 fb0f 	bl	800c856 <TIM_ITRx_SetConfig>
      break;
 800c238:	e01c      	b.n	800c274 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c246:	461a      	mov	r2, r3
 800c248:	f000 faa6 	bl	800c798 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2140      	movs	r1, #64	; 0x40
 800c252:	4618      	mov	r0, r3
 800c254:	f000 faff 	bl	800c856 <TIM_ITRx_SetConfig>
      break;
 800c258:	e00c      	b.n	800c274 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	4619      	mov	r1, r3
 800c264:	4610      	mov	r0, r2
 800c266:	f000 faf6 	bl	800c856 <TIM_ITRx_SetConfig>
      break;
 800c26a:	e003      	b.n	800c274 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	73fb      	strb	r3, [r7, #15]
      break;
 800c270:	e000      	b.n	800c274 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c272:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c284:	7bfb      	ldrb	r3, [r7, #15]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c28e:	b480      	push	{r7}
 800c290:	b083      	sub	sp, #12
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c296:	bf00      	nop
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b083      	sub	sp, #12
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c2aa:	bf00      	nop
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b083      	sub	sp, #12
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c2be:	bf00      	nop
 800c2c0:	370c      	adds	r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr

0800c2ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c2ca:	b480      	push	{r7}
 800c2cc:	b083      	sub	sp, #12
 800c2ce:	af00      	add	r7, sp, #0
 800c2d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c2d2:	bf00      	nop
 800c2d4:	370c      	adds	r7, #12
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
	...

0800c2e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4a46      	ldr	r2, [pc, #280]	; (800c40c <TIM_Base_SetConfig+0x12c>)
 800c2f4:	4293      	cmp	r3, r2
 800c2f6:	d013      	beq.n	800c320 <TIM_Base_SetConfig+0x40>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2fe:	d00f      	beq.n	800c320 <TIM_Base_SetConfig+0x40>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4a43      	ldr	r2, [pc, #268]	; (800c410 <TIM_Base_SetConfig+0x130>)
 800c304:	4293      	cmp	r3, r2
 800c306:	d00b      	beq.n	800c320 <TIM_Base_SetConfig+0x40>
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	4a42      	ldr	r2, [pc, #264]	; (800c414 <TIM_Base_SetConfig+0x134>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d007      	beq.n	800c320 <TIM_Base_SetConfig+0x40>
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4a41      	ldr	r2, [pc, #260]	; (800c418 <TIM_Base_SetConfig+0x138>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d003      	beq.n	800c320 <TIM_Base_SetConfig+0x40>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	4a40      	ldr	r2, [pc, #256]	; (800c41c <TIM_Base_SetConfig+0x13c>)
 800c31c:	4293      	cmp	r3, r2
 800c31e:	d108      	bne.n	800c332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4313      	orrs	r3, r2
 800c330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a35      	ldr	r2, [pc, #212]	; (800c40c <TIM_Base_SetConfig+0x12c>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d02b      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c340:	d027      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a32      	ldr	r2, [pc, #200]	; (800c410 <TIM_Base_SetConfig+0x130>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d023      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a31      	ldr	r2, [pc, #196]	; (800c414 <TIM_Base_SetConfig+0x134>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d01f      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4a30      	ldr	r2, [pc, #192]	; (800c418 <TIM_Base_SetConfig+0x138>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d01b      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4a2f      	ldr	r2, [pc, #188]	; (800c41c <TIM_Base_SetConfig+0x13c>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d017      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	4a2e      	ldr	r2, [pc, #184]	; (800c420 <TIM_Base_SetConfig+0x140>)
 800c366:	4293      	cmp	r3, r2
 800c368:	d013      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	4a2d      	ldr	r2, [pc, #180]	; (800c424 <TIM_Base_SetConfig+0x144>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d00f      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	4a2c      	ldr	r2, [pc, #176]	; (800c428 <TIM_Base_SetConfig+0x148>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d00b      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	4a2b      	ldr	r2, [pc, #172]	; (800c42c <TIM_Base_SetConfig+0x14c>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d007      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	4a2a      	ldr	r2, [pc, #168]	; (800c430 <TIM_Base_SetConfig+0x150>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d003      	beq.n	800c392 <TIM_Base_SetConfig+0xb2>
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	4a29      	ldr	r2, [pc, #164]	; (800c434 <TIM_Base_SetConfig+0x154>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d108      	bne.n	800c3a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	689a      	ldr	r2, [r3, #8]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a10      	ldr	r2, [pc, #64]	; (800c40c <TIM_Base_SetConfig+0x12c>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d003      	beq.n	800c3d8 <TIM_Base_SetConfig+0xf8>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a12      	ldr	r2, [pc, #72]	; (800c41c <TIM_Base_SetConfig+0x13c>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d103      	bne.n	800c3e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	691a      	ldr	r2, [r3, #16]
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	691b      	ldr	r3, [r3, #16]
 800c3ea:	f003 0301 	and.w	r3, r3, #1
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d105      	bne.n	800c3fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	691b      	ldr	r3, [r3, #16]
 800c3f6:	f023 0201 	bic.w	r2, r3, #1
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	611a      	str	r2, [r3, #16]
  }
}
 800c3fe:	bf00      	nop
 800c400:	3714      	adds	r7, #20
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	40010000 	.word	0x40010000
 800c410:	40000400 	.word	0x40000400
 800c414:	40000800 	.word	0x40000800
 800c418:	40000c00 	.word	0x40000c00
 800c41c:	40010400 	.word	0x40010400
 800c420:	40014000 	.word	0x40014000
 800c424:	40014400 	.word	0x40014400
 800c428:	40014800 	.word	0x40014800
 800c42c:	40001800 	.word	0x40001800
 800c430:	40001c00 	.word	0x40001c00
 800c434:	40002000 	.word	0x40002000

0800c438 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6a1b      	ldr	r3, [r3, #32]
 800c44c:	f023 0201 	bic.w	r2, r3, #1
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	699b      	ldr	r3, [r3, #24]
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f023 0303 	bic.w	r3, r3, #3
 800c46e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	4313      	orrs	r3, r2
 800c478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	f023 0302 	bic.w	r3, r3, #2
 800c480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	689b      	ldr	r3, [r3, #8]
 800c486:	697a      	ldr	r2, [r7, #20]
 800c488:	4313      	orrs	r3, r2
 800c48a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	4a20      	ldr	r2, [pc, #128]	; (800c510 <TIM_OC1_SetConfig+0xd8>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d003      	beq.n	800c49c <TIM_OC1_SetConfig+0x64>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a1f      	ldr	r2, [pc, #124]	; (800c514 <TIM_OC1_SetConfig+0xdc>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d10c      	bne.n	800c4b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	f023 0308 	bic.w	r3, r3, #8
 800c4a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	697a      	ldr	r2, [r7, #20]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f023 0304 	bic.w	r3, r3, #4
 800c4b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a15      	ldr	r2, [pc, #84]	; (800c510 <TIM_OC1_SetConfig+0xd8>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d003      	beq.n	800c4c6 <TIM_OC1_SetConfig+0x8e>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4a14      	ldr	r2, [pc, #80]	; (800c514 <TIM_OC1_SetConfig+0xdc>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d111      	bne.n	800c4ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c4ce:	693b      	ldr	r3, [r7, #16]
 800c4d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	695b      	ldr	r3, [r3, #20]
 800c4da:	693a      	ldr	r2, [r7, #16]
 800c4dc:	4313      	orrs	r3, r2
 800c4de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	621a      	str	r2, [r3, #32]
}
 800c504:	bf00      	nop
 800c506:	371c      	adds	r7, #28
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	40010000 	.word	0x40010000
 800c514:	40010400 	.word	0x40010400

0800c518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c518:	b480      	push	{r7}
 800c51a:	b087      	sub	sp, #28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6a1b      	ldr	r3, [r3, #32]
 800c52c:	f023 0210 	bic.w	r2, r3, #16
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	021b      	lsls	r3, r3, #8
 800c556:	68fa      	ldr	r2, [r7, #12]
 800c558:	4313      	orrs	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	f023 0320 	bic.w	r3, r3, #32
 800c562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	011b      	lsls	r3, r3, #4
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	4313      	orrs	r3, r2
 800c56e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4a22      	ldr	r2, [pc, #136]	; (800c5fc <TIM_OC2_SetConfig+0xe4>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d003      	beq.n	800c580 <TIM_OC2_SetConfig+0x68>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	4a21      	ldr	r2, [pc, #132]	; (800c600 <TIM_OC2_SetConfig+0xe8>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d10d      	bne.n	800c59c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	011b      	lsls	r3, r3, #4
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	4313      	orrs	r3, r2
 800c592:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c59a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a17      	ldr	r2, [pc, #92]	; (800c5fc <TIM_OC2_SetConfig+0xe4>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d003      	beq.n	800c5ac <TIM_OC2_SetConfig+0x94>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a16      	ldr	r2, [pc, #88]	; (800c600 <TIM_OC2_SetConfig+0xe8>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d113      	bne.n	800c5d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c5ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	695b      	ldr	r3, [r3, #20]
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	693a      	ldr	r2, [r7, #16]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	699b      	ldr	r3, [r3, #24]
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	693a      	ldr	r2, [r7, #16]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	693a      	ldr	r2, [r7, #16]
 800c5d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	685a      	ldr	r2, [r3, #4]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	697a      	ldr	r2, [r7, #20]
 800c5ec:	621a      	str	r2, [r3, #32]
}
 800c5ee:	bf00      	nop
 800c5f0:	371c      	adds	r7, #28
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f8:	4770      	bx	lr
 800c5fa:	bf00      	nop
 800c5fc:	40010000 	.word	0x40010000
 800c600:	40010400 	.word	0x40010400

0800c604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c604:	b480      	push	{r7}
 800c606:	b087      	sub	sp, #28
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6a1b      	ldr	r3, [r3, #32]
 800c618:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	69db      	ldr	r3, [r3, #28]
 800c62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	f023 0303 	bic.w	r3, r3, #3
 800c63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	4313      	orrs	r3, r2
 800c644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	689b      	ldr	r3, [r3, #8]
 800c652:	021b      	lsls	r3, r3, #8
 800c654:	697a      	ldr	r2, [r7, #20]
 800c656:	4313      	orrs	r3, r2
 800c658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a21      	ldr	r2, [pc, #132]	; (800c6e4 <TIM_OC3_SetConfig+0xe0>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d003      	beq.n	800c66a <TIM_OC3_SetConfig+0x66>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a20      	ldr	r2, [pc, #128]	; (800c6e8 <TIM_OC3_SetConfig+0xe4>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d10d      	bne.n	800c686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	021b      	lsls	r3, r3, #8
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a16      	ldr	r2, [pc, #88]	; (800c6e4 <TIM_OC3_SetConfig+0xe0>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d003      	beq.n	800c696 <TIM_OC3_SetConfig+0x92>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a15      	ldr	r2, [pc, #84]	; (800c6e8 <TIM_OC3_SetConfig+0xe4>)
 800c692:	4293      	cmp	r3, r2
 800c694:	d113      	bne.n	800c6be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c69c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c6a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	695b      	ldr	r3, [r3, #20]
 800c6aa:	011b      	lsls	r3, r3, #4
 800c6ac:	693a      	ldr	r2, [r7, #16]
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	68fa      	ldr	r2, [r7, #12]
 800c6c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	697a      	ldr	r2, [r7, #20]
 800c6d6:	621a      	str	r2, [r3, #32]
}
 800c6d8:	bf00      	nop
 800c6da:	371c      	adds	r7, #28
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	40010000 	.word	0x40010000
 800c6e8:	40010400 	.word	0x40010400

0800c6ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b087      	sub	sp, #28
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6a1b      	ldr	r3, [r3, #32]
 800c700:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	69db      	ldr	r3, [r3, #28]
 800c712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c71a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	021b      	lsls	r3, r3, #8
 800c72a:	68fa      	ldr	r2, [r7, #12]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	031b      	lsls	r3, r3, #12
 800c73e:	693a      	ldr	r2, [r7, #16]
 800c740:	4313      	orrs	r3, r2
 800c742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	4a12      	ldr	r2, [pc, #72]	; (800c790 <TIM_OC4_SetConfig+0xa4>)
 800c748:	4293      	cmp	r3, r2
 800c74a:	d003      	beq.n	800c754 <TIM_OC4_SetConfig+0x68>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4a11      	ldr	r2, [pc, #68]	; (800c794 <TIM_OC4_SetConfig+0xa8>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d109      	bne.n	800c768 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c75a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	695b      	ldr	r3, [r3, #20]
 800c760:	019b      	lsls	r3, r3, #6
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	4313      	orrs	r3, r2
 800c766:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	685a      	ldr	r2, [r3, #4]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	693a      	ldr	r2, [r7, #16]
 800c780:	621a      	str	r2, [r3, #32]
}
 800c782:	bf00      	nop
 800c784:	371c      	adds	r7, #28
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	40010000 	.word	0x40010000
 800c794:	40010400 	.word	0x40010400

0800c798 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c798:	b480      	push	{r7}
 800c79a:	b087      	sub	sp, #28
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6a1b      	ldr	r3, [r3, #32]
 800c7a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6a1b      	ldr	r3, [r3, #32]
 800c7ae:	f023 0201 	bic.w	r2, r3, #1
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	699b      	ldr	r3, [r3, #24]
 800c7ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	011b      	lsls	r3, r3, #4
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	4313      	orrs	r3, r2
 800c7cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f023 030a 	bic.w	r3, r3, #10
 800c7d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	621a      	str	r2, [r3, #32]
}
 800c7ea:	bf00      	nop
 800c7ec:	371c      	adds	r7, #28
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f4:	4770      	bx	lr

0800c7f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7f6:	b480      	push	{r7}
 800c7f8:	b087      	sub	sp, #28
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	60b9      	str	r1, [r7, #8]
 800c800:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	6a1b      	ldr	r3, [r3, #32]
 800c806:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	6a1b      	ldr	r3, [r3, #32]
 800c80c:	f023 0210 	bic.w	r2, r3, #16
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	699b      	ldr	r3, [r3, #24]
 800c818:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	031b      	lsls	r3, r3, #12
 800c826:	693a      	ldr	r2, [r7, #16]
 800c828:	4313      	orrs	r3, r2
 800c82a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c832:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	011b      	lsls	r3, r3, #4
 800c838:	697a      	ldr	r2, [r7, #20]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	693a      	ldr	r2, [r7, #16]
 800c842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	621a      	str	r2, [r3, #32]
}
 800c84a:	bf00      	nop
 800c84c:	371c      	adds	r7, #28
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr

0800c856 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c856:	b480      	push	{r7}
 800c858:	b085      	sub	sp, #20
 800c85a:	af00      	add	r7, sp, #0
 800c85c:	6078      	str	r0, [r7, #4]
 800c85e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c86c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c86e:	683a      	ldr	r2, [r7, #0]
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	4313      	orrs	r3, r2
 800c874:	f043 0307 	orr.w	r3, r3, #7
 800c878:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	609a      	str	r2, [r3, #8]
}
 800c880:	bf00      	nop
 800c882:	3714      	adds	r7, #20
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b087      	sub	sp, #28
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	021a      	lsls	r2, r3, #8
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	431a      	orrs	r2, r3
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	697a      	ldr	r2, [r7, #20]
 800c8be:	609a      	str	r2, [r3, #8]
}
 800c8c0:	bf00      	nop
 800c8c2:	371c      	adds	r7, #28
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	f003 031f 	and.w	r3, r3, #31
 800c8de:	2201      	movs	r2, #1
 800c8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6a1a      	ldr	r2, [r3, #32]
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	43db      	mvns	r3, r3
 800c8ee:	401a      	ands	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6a1a      	ldr	r2, [r3, #32]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	f003 031f 	and.w	r3, r3, #31
 800c8fe:	6879      	ldr	r1, [r7, #4]
 800c900:	fa01 f303 	lsl.w	r3, r1, r3
 800c904:	431a      	orrs	r2, r3
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	621a      	str	r2, [r3, #32]
}
 800c90a:	bf00      	nop
 800c90c:	371c      	adds	r7, #28
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
	...

0800c918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d101      	bne.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c92c:	2302      	movs	r3, #2
 800c92e:	e05a      	b.n	800c9e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2202      	movs	r2, #2
 800c93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c956:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	4313      	orrs	r3, r2
 800c960:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68fa      	ldr	r2, [r7, #12]
 800c968:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a21      	ldr	r2, [pc, #132]	; (800c9f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d022      	beq.n	800c9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c97c:	d01d      	beq.n	800c9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a1d      	ldr	r2, [pc, #116]	; (800c9f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c984:	4293      	cmp	r3, r2
 800c986:	d018      	beq.n	800c9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	4a1b      	ldr	r2, [pc, #108]	; (800c9fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d013      	beq.n	800c9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4a1a      	ldr	r2, [pc, #104]	; (800ca00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d00e      	beq.n	800c9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a18      	ldr	r2, [pc, #96]	; (800ca04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c9a2:	4293      	cmp	r3, r2
 800c9a4:	d009      	beq.n	800c9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a17      	ldr	r2, [pc, #92]	; (800ca08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d004      	beq.n	800c9ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	4a15      	ldr	r2, [pc, #84]	; (800ca0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d10c      	bne.n	800c9d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c9c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2200      	movs	r2, #0
 800c9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3714      	adds	r7, #20
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	40010000 	.word	0x40010000
 800c9f8:	40000400 	.word	0x40000400
 800c9fc:	40000800 	.word	0x40000800
 800ca00:	40000c00 	.word	0x40000c00
 800ca04:	40010400 	.word	0x40010400
 800ca08:	40014000 	.word	0x40014000
 800ca0c:	40001800 	.word	0x40001800

0800ca10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b083      	sub	sp, #12
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca18:	bf00      	nop
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d101      	bne.n	800ca4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca46:	2301      	movs	r3, #1
 800ca48:	e042      	b.n	800cad0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d106      	bne.n	800ca64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7fb ff1e 	bl	80088a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2224      	movs	r2, #36	; 0x24
 800ca68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	68da      	ldr	r2, [r3, #12]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 ff37 	bl	800d8f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	691a      	ldr	r2, [r3, #16]
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ca90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	695a      	ldr	r2, [r3, #20]
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800caa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	68da      	ldr	r2, [r3, #12]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2200      	movs	r2, #0
 800cab6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	2220      	movs	r2, #32
 800cabc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2220      	movs	r2, #32
 800cac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b08c      	sub	sp, #48	; 0x30
 800cadc:	af00      	add	r7, sp, #0
 800cade:	60f8      	str	r0, [r7, #12]
 800cae0:	60b9      	str	r1, [r7, #8]
 800cae2:	4613      	mov	r3, r2
 800cae4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caec:	b2db      	uxtb	r3, r3
 800caee:	2b20      	cmp	r3, #32
 800caf0:	d156      	bne.n	800cba0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <HAL_UART_Transmit_DMA+0x26>
 800caf8:	88fb      	ldrh	r3, [r7, #6]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d101      	bne.n	800cb02 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	e04f      	b.n	800cba2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	88fa      	ldrh	r2, [r7, #6]
 800cb0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	88fa      	ldrh	r2, [r7, #6]
 800cb12:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	2200      	movs	r2, #0
 800cb18:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2221      	movs	r2, #33	; 0x21
 800cb1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb26:	4a21      	ldr	r2, [pc, #132]	; (800cbac <HAL_UART_Transmit_DMA+0xd4>)
 800cb28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2e:	4a20      	ldr	r2, [pc, #128]	; (800cbb0 <HAL_UART_Transmit_DMA+0xd8>)
 800cb30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb36:	4a1f      	ldr	r2, [pc, #124]	; (800cbb4 <HAL_UART_Transmit_DMA+0xdc>)
 800cb38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb3e:	2200      	movs	r2, #0
 800cb40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800cb42:	f107 0308 	add.w	r3, r7, #8
 800cb46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	6819      	ldr	r1, [r3, #0]
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	3304      	adds	r3, #4
 800cb56:	461a      	mov	r2, r3
 800cb58:	88fb      	ldrh	r3, [r7, #6]
 800cb5a:	f7fc fb21 	bl	80091a0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb66:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	3314      	adds	r3, #20
 800cb6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	e853 3f00 	ldrex	r3, [r3]
 800cb76:	617b      	str	r3, [r7, #20]
   return(result);
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3314      	adds	r3, #20
 800cb86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb88:	627a      	str	r2, [r7, #36]	; 0x24
 800cb8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8c:	6a39      	ldr	r1, [r7, #32]
 800cb8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb90:	e841 2300 	strex	r3, r2, [r1]
 800cb94:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e5      	bne.n	800cb68 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	e000      	b.n	800cba2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800cba0:	2302      	movs	r3, #2
  }
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3730      	adds	r7, #48	; 0x30
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	0800d17d 	.word	0x0800d17d
 800cbb0:	0800d217 	.word	0x0800d217
 800cbb4:	0800d39b 	.word	0x0800d39b

0800cbb8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbcc:	b2db      	uxtb	r3, r3
 800cbce:	2b20      	cmp	r3, #32
 800cbd0:	d112      	bne.n	800cbf8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d002      	beq.n	800cbde <HAL_UART_Receive_DMA+0x26>
 800cbd8:	88fb      	ldrh	r3, [r7, #6]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d101      	bne.n	800cbe2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e00b      	b.n	800cbfa <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cbe8:	88fb      	ldrh	r3, [r7, #6]
 800cbea:	461a      	mov	r2, r3
 800cbec:	68b9      	ldr	r1, [r7, #8]
 800cbee:	68f8      	ldr	r0, [r7, #12]
 800cbf0:	f000 fc1e 	bl	800d430 <UART_Start_Receive_DMA>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	e000      	b.n	800cbfa <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cbf8:	2302      	movs	r3, #2
  }
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
	...

0800cc04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b0ba      	sub	sp, #232	; 0xe8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68db      	ldr	r3, [r3, #12]
 800cc1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800cc30:	2300      	movs	r3, #0
 800cc32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cc36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc3a:	f003 030f 	and.w	r3, r3, #15
 800cc3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800cc42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d10f      	bne.n	800cc6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc4e:	f003 0320 	and.w	r3, r3, #32
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d009      	beq.n	800cc6a <HAL_UART_IRQHandler+0x66>
 800cc56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc5a:	f003 0320 	and.w	r3, r3, #32
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fd85 	bl	800d772 <UART_Receive_IT>
      return;
 800cc68:	e25b      	b.n	800d122 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cc6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	f000 80de 	beq.w	800ce30 <HAL_UART_IRQHandler+0x22c>
 800cc74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d106      	bne.n	800cc8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800cc80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f000 80d1 	beq.w	800ce30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800cc8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc92:	f003 0301 	and.w	r3, r3, #1
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00b      	beq.n	800ccb2 <HAL_UART_IRQHandler+0xae>
 800cc9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d005      	beq.n	800ccb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccaa:	f043 0201 	orr.w	r2, r3, #1
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccb6:	f003 0304 	and.w	r3, r3, #4
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d00b      	beq.n	800ccd6 <HAL_UART_IRQHandler+0xd2>
 800ccbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d005      	beq.n	800ccd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccce:	f043 0202 	orr.w	r2, r3, #2
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccda:	f003 0302 	and.w	r3, r3, #2
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00b      	beq.n	800ccfa <HAL_UART_IRQHandler+0xf6>
 800cce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cce6:	f003 0301 	and.w	r3, r3, #1
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d005      	beq.n	800ccfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccf2:	f043 0204 	orr.w	r2, r3, #4
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ccfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ccfe:	f003 0308 	and.w	r3, r3, #8
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d011      	beq.n	800cd2a <HAL_UART_IRQHandler+0x126>
 800cd06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd0a:	f003 0320 	and.w	r3, r3, #32
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d105      	bne.n	800cd1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cd12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d005      	beq.n	800cd2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd22:	f043 0208 	orr.w	r2, r3, #8
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	f000 81f2 	beq.w	800d118 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd38:	f003 0320 	and.w	r3, r3, #32
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d008      	beq.n	800cd52 <HAL_UART_IRQHandler+0x14e>
 800cd40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd44:	f003 0320 	and.w	r3, r3, #32
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d002      	beq.n	800cd52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 fd10 	bl	800d772 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	695b      	ldr	r3, [r3, #20]
 800cd58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd5c:	2b40      	cmp	r3, #64	; 0x40
 800cd5e:	bf0c      	ite	eq
 800cd60:	2301      	moveq	r3, #1
 800cd62:	2300      	movne	r3, #0
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd6e:	f003 0308 	and.w	r3, r3, #8
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d103      	bne.n	800cd7e <HAL_UART_IRQHandler+0x17a>
 800cd76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d04f      	beq.n	800ce1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fc18 	bl	800d5b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	695b      	ldr	r3, [r3, #20]
 800cd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd8e:	2b40      	cmp	r3, #64	; 0x40
 800cd90:	d141      	bne.n	800ce16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	3314      	adds	r3, #20
 800cd98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cda0:	e853 3f00 	ldrex	r3, [r3]
 800cda4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cda8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cdac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	3314      	adds	r3, #20
 800cdba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cdbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cdc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cdca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cdce:	e841 2300 	strex	r3, r2, [r1]
 800cdd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cdd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d1d9      	bne.n	800cd92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d013      	beq.n	800ce0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdea:	4a7e      	ldr	r2, [pc, #504]	; (800cfe4 <HAL_UART_IRQHandler+0x3e0>)
 800cdec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7fc fa9c 	bl	8009330 <HAL_DMA_Abort_IT>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d016      	beq.n	800ce2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ce08:	4610      	mov	r0, r2
 800ce0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce0c:	e00e      	b.n	800ce2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f99e 	bl	800d150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce14:	e00a      	b.n	800ce2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f000 f99a 	bl	800d150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce1c:	e006      	b.n	800ce2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 f996 	bl	800d150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800ce2a:	e175      	b.n	800d118 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce2c:	bf00      	nop
    return;
 800ce2e:	e173      	b.n	800d118 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce34:	2b01      	cmp	r3, #1
 800ce36:	f040 814f 	bne.w	800d0d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ce3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce3e:	f003 0310 	and.w	r3, r3, #16
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	f000 8148 	beq.w	800d0d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ce48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce4c:	f003 0310 	and.w	r3, r3, #16
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 8141 	beq.w	800d0d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce56:	2300      	movs	r3, #0
 800ce58:	60bb      	str	r3, [r7, #8]
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	60bb      	str	r3, [r7, #8]
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	685b      	ldr	r3, [r3, #4]
 800ce68:	60bb      	str	r3, [r7, #8]
 800ce6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce76:	2b40      	cmp	r3, #64	; 0x40
 800ce78:	f040 80b6 	bne.w	800cfe8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ce88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 8145 	beq.w	800d11c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ce96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	f080 813e 	bcs.w	800d11c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cea6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ceac:	69db      	ldr	r3, [r3, #28]
 800ceae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceb2:	f000 8088 	beq.w	800cfc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	330c      	adds	r3, #12
 800cebc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cec4:	e853 3f00 	ldrex	r3, [r3]
 800cec8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cecc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ced0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ced4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	330c      	adds	r3, #12
 800cede:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ceee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cef2:	e841 2300 	strex	r3, r2, [r1]
 800cef6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cefa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1d9      	bne.n	800ceb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	3314      	adds	r3, #20
 800cf08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf0c:	e853 3f00 	ldrex	r3, [r3]
 800cf10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cf12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf14:	f023 0301 	bic.w	r3, r3, #1
 800cf18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	3314      	adds	r3, #20
 800cf22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cf26:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cf2a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cf32:	e841 2300 	strex	r3, r2, [r1]
 800cf36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cf38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d1e1      	bne.n	800cf02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	3314      	adds	r3, #20
 800cf44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf48:	e853 3f00 	ldrex	r3, [r3]
 800cf4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cf4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	3314      	adds	r3, #20
 800cf5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cf62:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cf64:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf66:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf68:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf6a:	e841 2300 	strex	r3, r2, [r1]
 800cf6e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cf70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1e3      	bne.n	800cf3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2220      	movs	r2, #32
 800cf7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	330c      	adds	r3, #12
 800cf8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf8e:	e853 3f00 	ldrex	r3, [r3]
 800cf92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cf94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cf96:	f023 0310 	bic.w	r3, r3, #16
 800cf9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	330c      	adds	r3, #12
 800cfa4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800cfa8:	65ba      	str	r2, [r7, #88]	; 0x58
 800cfaa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cfae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfb0:	e841 2300 	strex	r3, r2, [r1]
 800cfb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cfb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d1e3      	bne.n	800cf84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fc f945 	bl	8009250 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2202      	movs	r2, #2
 800cfca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	1ad3      	subs	r3, r2, r3
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	4619      	mov	r1, r3
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f8c1 	bl	800d164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cfe2:	e09b      	b.n	800d11c <HAL_UART_IRQHandler+0x518>
 800cfe4:	0800d67b 	.word	0x0800d67b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cffc:	b29b      	uxth	r3, r3
 800cffe:	2b00      	cmp	r3, #0
 800d000:	f000 808e 	beq.w	800d120 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d008:	2b00      	cmp	r3, #0
 800d00a:	f000 8089 	beq.w	800d120 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	330c      	adds	r3, #12
 800d014:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d018:	e853 3f00 	ldrex	r3, [r3]
 800d01c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d020:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d024:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	330c      	adds	r3, #12
 800d02e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d032:	647a      	str	r2, [r7, #68]	; 0x44
 800d034:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d03a:	e841 2300 	strex	r3, r2, [r1]
 800d03e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1e3      	bne.n	800d00e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	3314      	adds	r3, #20
 800d04c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d050:	e853 3f00 	ldrex	r3, [r3]
 800d054:	623b      	str	r3, [r7, #32]
   return(result);
 800d056:	6a3b      	ldr	r3, [r7, #32]
 800d058:	f023 0301 	bic.w	r3, r3, #1
 800d05c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	3314      	adds	r3, #20
 800d066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d06a:	633a      	str	r2, [r7, #48]	; 0x30
 800d06c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d06e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d072:	e841 2300 	strex	r3, r2, [r1]
 800d076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d1e3      	bne.n	800d046 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2220      	movs	r2, #32
 800d082:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	330c      	adds	r3, #12
 800d092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	e853 3f00 	ldrex	r3, [r3]
 800d09a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	f023 0310 	bic.w	r3, r3, #16
 800d0a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	330c      	adds	r3, #12
 800d0ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d0b0:	61fa      	str	r2, [r7, #28]
 800d0b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b4:	69b9      	ldr	r1, [r7, #24]
 800d0b6:	69fa      	ldr	r2, [r7, #28]
 800d0b8:	e841 2300 	strex	r3, r2, [r1]
 800d0bc:	617b      	str	r3, [r7, #20]
   return(result);
 800d0be:	697b      	ldr	r3, [r7, #20]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d1e3      	bne.n	800d08c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2202      	movs	r2, #2
 800d0c8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d0ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 f847 	bl	800d164 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d0d6:	e023      	b.n	800d120 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d0d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d009      	beq.n	800d0f8 <HAL_UART_IRQHandler+0x4f4>
 800d0e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d003      	beq.n	800d0f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f000 fad6 	bl	800d6a2 <UART_Transmit_IT>
    return;
 800d0f6:	e014      	b.n	800d122 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00e      	beq.n	800d122 <HAL_UART_IRQHandler+0x51e>
 800d104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d008      	beq.n	800d122 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f000 fb16 	bl	800d742 <UART_EndTransmit_IT>
    return;
 800d116:	e004      	b.n	800d122 <HAL_UART_IRQHandler+0x51e>
    return;
 800d118:	bf00      	nop
 800d11a:	e002      	b.n	800d122 <HAL_UART_IRQHandler+0x51e>
      return;
 800d11c:	bf00      	nop
 800d11e:	e000      	b.n	800d122 <HAL_UART_IRQHandler+0x51e>
      return;
 800d120:	bf00      	nop
  }
}
 800d122:	37e8      	adds	r7, #232	; 0xe8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d128:	b480      	push	{r7}
 800d12a:	b083      	sub	sp, #12
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d130:	bf00      	nop
 800d132:	370c      	adds	r7, #12
 800d134:	46bd      	mov	sp, r7
 800d136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13a:	4770      	bx	lr

0800d13c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d13c:	b480      	push	{r7}
 800d13e:	b083      	sub	sp, #12
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d144:	bf00      	nop
 800d146:	370c      	adds	r7, #12
 800d148:	46bd      	mov	sp, r7
 800d14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14e:	4770      	bx	lr

0800d150 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d158:	bf00      	nop
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	460b      	mov	r3, r1
 800d16e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d170:	bf00      	nop
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b090      	sub	sp, #64	; 0x40
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d188:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d194:	2b00      	cmp	r3, #0
 800d196:	d137      	bne.n	800d208 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19a:	2200      	movs	r2, #0
 800d19c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	3314      	adds	r3, #20
 800d1a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	e853 3f00 	ldrex	r3, [r3]
 800d1ac:	623b      	str	r3, [r7, #32]
   return(result);
 800d1ae:	6a3b      	ldr	r3, [r7, #32]
 800d1b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d1b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3314      	adds	r3, #20
 800d1bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1be:	633a      	str	r2, [r7, #48]	; 0x30
 800d1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1c6:	e841 2300 	strex	r3, r2, [r1]
 800d1ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1e5      	bne.n	800d19e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	330c      	adds	r3, #12
 800d1d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	e853 3f00 	ldrex	r3, [r3]
 800d1e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1e8:	637b      	str	r3, [r7, #52]	; 0x34
 800d1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	330c      	adds	r3, #12
 800d1f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1f2:	61fa      	str	r2, [r7, #28]
 800d1f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f6:	69b9      	ldr	r1, [r7, #24]
 800d1f8:	69fa      	ldr	r2, [r7, #28]
 800d1fa:	e841 2300 	strex	r3, r2, [r1]
 800d1fe:	617b      	str	r3, [r7, #20]
   return(result);
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1e5      	bne.n	800d1d2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d206:	e002      	b.n	800d20e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d208:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d20a:	f7f9 fb21 	bl	8006850 <HAL_UART_TxCpltCallback>
}
 800d20e:	bf00      	nop
 800d210:	3740      	adds	r7, #64	; 0x40
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d222:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f7ff ff7f 	bl	800d128 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d22a:	bf00      	nop
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b09c      	sub	sp, #112	; 0x70
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d172      	bne.n	800d334 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d24e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d250:	2200      	movs	r2, #0
 800d252:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	330c      	adds	r3, #12
 800d25a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d25c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d25e:	e853 3f00 	ldrex	r3, [r3]
 800d262:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d26a:	66bb      	str	r3, [r7, #104]	; 0x68
 800d26c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	330c      	adds	r3, #12
 800d272:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d274:	65ba      	str	r2, [r7, #88]	; 0x58
 800d276:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d278:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d27a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d27c:	e841 2300 	strex	r3, r2, [r1]
 800d280:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d282:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1e5      	bne.n	800d254 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	3314      	adds	r3, #20
 800d28e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d292:	e853 3f00 	ldrex	r3, [r3]
 800d296:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29a:	f023 0301 	bic.w	r3, r3, #1
 800d29e:	667b      	str	r3, [r7, #100]	; 0x64
 800d2a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	3314      	adds	r3, #20
 800d2a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d2a8:	647a      	str	r2, [r7, #68]	; 0x44
 800d2aa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d2ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2b0:	e841 2300 	strex	r3, r2, [r1]
 800d2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d2b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1e5      	bne.n	800d288 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	3314      	adds	r3, #20
 800d2c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c6:	e853 3f00 	ldrex	r3, [r3]
 800d2ca:	623b      	str	r3, [r7, #32]
   return(result);
 800d2cc:	6a3b      	ldr	r3, [r7, #32]
 800d2ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2d2:	663b      	str	r3, [r7, #96]	; 0x60
 800d2d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	3314      	adds	r3, #20
 800d2da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d2dc:	633a      	str	r2, [r7, #48]	; 0x30
 800d2de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d2e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e4:	e841 2300 	strex	r3, r2, [r1]
 800d2e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1e5      	bne.n	800d2bc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d2f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2f2:	2220      	movs	r2, #32
 800d2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d119      	bne.n	800d334 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	330c      	adds	r3, #12
 800d306:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	e853 3f00 	ldrex	r3, [r3]
 800d30e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f023 0310 	bic.w	r3, r3, #16
 800d316:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	330c      	adds	r3, #12
 800d31e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d320:	61fa      	str	r2, [r7, #28]
 800d322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d324:	69b9      	ldr	r1, [r7, #24]
 800d326:	69fa      	ldr	r2, [r7, #28]
 800d328:	e841 2300 	strex	r3, r2, [r1]
 800d32c:	617b      	str	r3, [r7, #20]
   return(result);
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1e5      	bne.n	800d300 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d336:	2200      	movs	r2, #0
 800d338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d33a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d33c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d106      	bne.n	800d350 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d342:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d344:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d346:	4619      	mov	r1, r3
 800d348:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d34a:	f7ff ff0b 	bl	800d164 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d34e:	e002      	b.n	800d356 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d350:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d352:	f7f9 fa8f 	bl	8006874 <HAL_UART_RxCpltCallback>
}
 800d356:	bf00      	nop
 800d358:	3770      	adds	r7, #112	; 0x70
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b084      	sub	sp, #16
 800d362:	af00      	add	r7, sp, #0
 800d364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2201      	movs	r2, #1
 800d370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d376:	2b01      	cmp	r3, #1
 800d378:	d108      	bne.n	800d38c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d37e:	085b      	lsrs	r3, r3, #1
 800d380:	b29b      	uxth	r3, r3
 800d382:	4619      	mov	r1, r3
 800d384:	68f8      	ldr	r0, [r7, #12]
 800d386:	f7ff feed 	bl	800d164 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d38a:	e002      	b.n	800d392 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f7ff fed5 	bl	800d13c <HAL_UART_RxHalfCpltCallback>
}
 800d392:	bf00      	nop
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d39a:	b580      	push	{r7, lr}
 800d39c:	b084      	sub	sp, #16
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	695b      	ldr	r3, [r3, #20]
 800d3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3b6:	2b80      	cmp	r3, #128	; 0x80
 800d3b8:	bf0c      	ite	eq
 800d3ba:	2301      	moveq	r3, #1
 800d3bc:	2300      	movne	r3, #0
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	2b21      	cmp	r3, #33	; 0x21
 800d3cc:	d108      	bne.n	800d3e0 <UART_DMAError+0x46>
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d005      	beq.n	800d3e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800d3da:	68b8      	ldr	r0, [r7, #8]
 800d3dc:	f000 f8c2 	bl	800d564 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	695b      	ldr	r3, [r3, #20]
 800d3e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ea:	2b40      	cmp	r3, #64	; 0x40
 800d3ec:	bf0c      	ite	eq
 800d3ee:	2301      	moveq	r3, #1
 800d3f0:	2300      	movne	r3, #0
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d3fc:	b2db      	uxtb	r3, r3
 800d3fe:	2b22      	cmp	r3, #34	; 0x22
 800d400:	d108      	bne.n	800d414 <UART_DMAError+0x7a>
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d005      	beq.n	800d414 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	2200      	movs	r2, #0
 800d40c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800d40e:	68b8      	ldr	r0, [r7, #8]
 800d410:	f000 f8d0 	bl	800d5b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d418:	f043 0210 	orr.w	r2, r3, #16
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d420:	68b8      	ldr	r0, [r7, #8]
 800d422:	f7ff fe95 	bl	800d150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d426:	bf00      	nop
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
	...

0800d430 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b098      	sub	sp, #96	; 0x60
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	4613      	mov	r3, r2
 800d43c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d43e:	68ba      	ldr	r2, [r7, #8]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	88fa      	ldrh	r2, [r7, #6]
 800d448:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2200      	movs	r2, #0
 800d44e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2222      	movs	r2, #34	; 0x22
 800d454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d45c:	4a3e      	ldr	r2, [pc, #248]	; (800d558 <UART_Start_Receive_DMA+0x128>)
 800d45e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d464:	4a3d      	ldr	r2, [pc, #244]	; (800d55c <UART_Start_Receive_DMA+0x12c>)
 800d466:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46c:	4a3c      	ldr	r2, [pc, #240]	; (800d560 <UART_Start_Receive_DMA+0x130>)
 800d46e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d474:	2200      	movs	r2, #0
 800d476:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d478:	f107 0308 	add.w	r3, r7, #8
 800d47c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	3304      	adds	r3, #4
 800d488:	4619      	mov	r1, r3
 800d48a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	88fb      	ldrh	r3, [r7, #6]
 800d490:	f7fb fe86 	bl	80091a0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d494:	2300      	movs	r3, #0
 800d496:	613b      	str	r3, [r7, #16]
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	613b      	str	r3, [r7, #16]
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	613b      	str	r3, [r7, #16]
 800d4a8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	691b      	ldr	r3, [r3, #16]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d019      	beq.n	800d4e6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	330c      	adds	r3, #12
 800d4b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4bc:	e853 3f00 	ldrex	r3, [r3]
 800d4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d4c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	330c      	adds	r3, #12
 800d4d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d4d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d4d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d4d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d4da:	e841 2300 	strex	r3, r2, [r1]
 800d4de:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d1e5      	bne.n	800d4b2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	3314      	adds	r3, #20
 800d4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f0:	e853 3f00 	ldrex	r3, [r3]
 800d4f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f8:	f043 0301 	orr.w	r3, r3, #1
 800d4fc:	657b      	str	r3, [r7, #84]	; 0x54
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	3314      	adds	r3, #20
 800d504:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d506:	63ba      	str	r2, [r7, #56]	; 0x38
 800d508:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d50c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d50e:	e841 2300 	strex	r3, r2, [r1]
 800d512:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1e5      	bne.n	800d4e6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	3314      	adds	r3, #20
 800d520:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d522:	69bb      	ldr	r3, [r7, #24]
 800d524:	e853 3f00 	ldrex	r3, [r3]
 800d528:	617b      	str	r3, [r7, #20]
   return(result);
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d530:	653b      	str	r3, [r7, #80]	; 0x50
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	3314      	adds	r3, #20
 800d538:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d53a:	627a      	str	r2, [r7, #36]	; 0x24
 800d53c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53e:	6a39      	ldr	r1, [r7, #32]
 800d540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d542:	e841 2300 	strex	r3, r2, [r1]
 800d546:	61fb      	str	r3, [r7, #28]
   return(result);
 800d548:	69fb      	ldr	r3, [r7, #28]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1e5      	bne.n	800d51a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	3760      	adds	r7, #96	; 0x60
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}
 800d558:	0800d233 	.word	0x0800d233
 800d55c:	0800d35f 	.word	0x0800d35f
 800d560:	0800d39b 	.word	0x0800d39b

0800d564 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d564:	b480      	push	{r7}
 800d566:	b089      	sub	sp, #36	; 0x24
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	330c      	adds	r3, #12
 800d572:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	e853 3f00 	ldrex	r3, [r3]
 800d57a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	330c      	adds	r3, #12
 800d58a:	69fa      	ldr	r2, [r7, #28]
 800d58c:	61ba      	str	r2, [r7, #24]
 800d58e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d590:	6979      	ldr	r1, [r7, #20]
 800d592:	69ba      	ldr	r2, [r7, #24]
 800d594:	e841 2300 	strex	r3, r2, [r1]
 800d598:	613b      	str	r3, [r7, #16]
   return(result);
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1e5      	bne.n	800d56c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2220      	movs	r2, #32
 800d5a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800d5a8:	bf00      	nop
 800d5aa:	3724      	adds	r7, #36	; 0x24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b095      	sub	sp, #84	; 0x54
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	330c      	adds	r3, #12
 800d5c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5c6:	e853 3f00 	ldrex	r3, [r3]
 800d5ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d5d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	330c      	adds	r3, #12
 800d5da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d5dc:	643a      	str	r2, [r7, #64]	; 0x40
 800d5de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d5e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5e4:	e841 2300 	strex	r3, r2, [r1]
 800d5e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d1e5      	bne.n	800d5bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3314      	adds	r3, #20
 800d5f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f8:	6a3b      	ldr	r3, [r7, #32]
 800d5fa:	e853 3f00 	ldrex	r3, [r3]
 800d5fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800d600:	69fb      	ldr	r3, [r7, #28]
 800d602:	f023 0301 	bic.w	r3, r3, #1
 800d606:	64bb      	str	r3, [r7, #72]	; 0x48
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	3314      	adds	r3, #20
 800d60e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d610:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d614:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d618:	e841 2300 	strex	r3, r2, [r1]
 800d61c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	2b00      	cmp	r3, #0
 800d622:	d1e5      	bne.n	800d5f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d119      	bne.n	800d660 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	330c      	adds	r3, #12
 800d632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	e853 3f00 	ldrex	r3, [r3]
 800d63a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	f023 0310 	bic.w	r3, r3, #16
 800d642:	647b      	str	r3, [r7, #68]	; 0x44
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	330c      	adds	r3, #12
 800d64a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d64c:	61ba      	str	r2, [r7, #24]
 800d64e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d650:	6979      	ldr	r1, [r7, #20]
 800d652:	69ba      	ldr	r2, [r7, #24]
 800d654:	e841 2300 	strex	r3, r2, [r1]
 800d658:	613b      	str	r3, [r7, #16]
   return(result);
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1e5      	bne.n	800d62c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2220      	movs	r2, #32
 800d664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d66e:	bf00      	nop
 800d670:	3754      	adds	r7, #84	; 0x54
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr

0800d67a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d686:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f7ff fd5b 	bl	800d150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d69a:	bf00      	nop
 800d69c:	3710      	adds	r7, #16
 800d69e:	46bd      	mov	sp, r7
 800d6a0:	bd80      	pop	{r7, pc}

0800d6a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d6a2:	b480      	push	{r7}
 800d6a4:	b085      	sub	sp, #20
 800d6a6:	af00      	add	r7, sp, #0
 800d6a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b21      	cmp	r3, #33	; 0x21
 800d6b4:	d13e      	bne.n	800d734 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	689b      	ldr	r3, [r3, #8]
 800d6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6be:	d114      	bne.n	800d6ea <UART_Transmit_IT+0x48>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	691b      	ldr	r3, [r3, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d110      	bne.n	800d6ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	6a1b      	ldr	r3, [r3, #32]
 800d6cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	461a      	mov	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d6dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6a1b      	ldr	r3, [r3, #32]
 800d6e2:	1c9a      	adds	r2, r3, #2
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	621a      	str	r2, [r3, #32]
 800d6e8:	e008      	b.n	800d6fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6a1b      	ldr	r3, [r3, #32]
 800d6ee:	1c59      	adds	r1, r3, #1
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	6211      	str	r1, [r2, #32]
 800d6f4:	781a      	ldrb	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d700:	b29b      	uxth	r3, r3
 800d702:	3b01      	subs	r3, #1
 800d704:	b29b      	uxth	r3, r3
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	4619      	mov	r1, r3
 800d70a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d10f      	bne.n	800d730 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	68da      	ldr	r2, [r3, #12]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d71e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	68da      	ldr	r2, [r3, #12]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d72e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d730:	2300      	movs	r3, #0
 800d732:	e000      	b.n	800d736 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d734:	2302      	movs	r3, #2
  }
}
 800d736:	4618      	mov	r0, r3
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b082      	sub	sp, #8
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	68da      	ldr	r2, [r3, #12]
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d758:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2220      	movs	r2, #32
 800d75e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f7f9 f874 	bl	8006850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d768:	2300      	movs	r3, #0
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b08c      	sub	sp, #48	; 0x30
 800d776:	af00      	add	r7, sp, #0
 800d778:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d780:	b2db      	uxtb	r3, r3
 800d782:	2b22      	cmp	r3, #34	; 0x22
 800d784:	f040 80ae 	bne.w	800d8e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d790:	d117      	bne.n	800d7c2 <UART_Receive_IT+0x50>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d113      	bne.n	800d7c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ba:	1c9a      	adds	r2, r3, #2
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	629a      	str	r2, [r3, #40]	; 0x28
 800d7c0:	e026      	b.n	800d810 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7d4:	d007      	beq.n	800d7e6 <UART_Receive_IT+0x74>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <UART_Receive_IT+0x82>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d106      	bne.n	800d7f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	b2da      	uxtb	r2, r3
 800d7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f0:	701a      	strb	r2, [r3, #0]
 800d7f2:	e008      	b.n	800d806 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d800:	b2da      	uxtb	r2, r3
 800d802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d804:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d80a:	1c5a      	adds	r2, r3, #1
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d814:	b29b      	uxth	r3, r3
 800d816:	3b01      	subs	r3, #1
 800d818:	b29b      	uxth	r3, r3
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	4619      	mov	r1, r3
 800d81e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d820:	2b00      	cmp	r3, #0
 800d822:	d15d      	bne.n	800d8e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68da      	ldr	r2, [r3, #12]
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f022 0220 	bic.w	r2, r2, #32
 800d832:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68da      	ldr	r2, [r3, #12]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	695a      	ldr	r2, [r3, #20]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	f022 0201 	bic.w	r2, r2, #1
 800d852:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2220      	movs	r2, #32
 800d858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d866:	2b01      	cmp	r3, #1
 800d868:	d135      	bne.n	800d8d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	330c      	adds	r3, #12
 800d876:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	e853 3f00 	ldrex	r3, [r3]
 800d87e:	613b      	str	r3, [r7, #16]
   return(result);
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	f023 0310 	bic.w	r3, r3, #16
 800d886:	627b      	str	r3, [r7, #36]	; 0x24
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	330c      	adds	r3, #12
 800d88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d890:	623a      	str	r2, [r7, #32]
 800d892:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d894:	69f9      	ldr	r1, [r7, #28]
 800d896:	6a3a      	ldr	r2, [r7, #32]
 800d898:	e841 2300 	strex	r3, r2, [r1]
 800d89c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1e5      	bne.n	800d870 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f003 0310 	and.w	r3, r3, #16
 800d8ae:	2b10      	cmp	r3, #16
 800d8b0:	d10a      	bne.n	800d8c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	60fb      	str	r3, [r7, #12]
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	60fb      	str	r3, [r7, #12]
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	60fb      	str	r3, [r7, #12]
 800d8c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f7ff fc48 	bl	800d164 <HAL_UARTEx_RxEventCallback>
 800d8d4:	e002      	b.n	800d8dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f7f8 ffcc 	bl	8006874 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	e002      	b.n	800d8e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	e000      	b.n	800d8e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d8e4:	2302      	movs	r3, #2
  }
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3730      	adds	r7, #48	; 0x30
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
	...

0800d8f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8f4:	b0c0      	sub	sp, #256	; 0x100
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d8fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800d908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d90c:	68d9      	ldr	r1, [r3, #12]
 800d90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	ea40 0301 	orr.w	r3, r0, r1
 800d918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d91e:	689a      	ldr	r2, [r3, #8]
 800d920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d924:	691b      	ldr	r3, [r3, #16]
 800d926:	431a      	orrs	r2, r3
 800d928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d92c:	695b      	ldr	r3, [r3, #20]
 800d92e:	431a      	orrs	r2, r3
 800d930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d934:	69db      	ldr	r3, [r3, #28]
 800d936:	4313      	orrs	r3, r2
 800d938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800d93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800d948:	f021 010c 	bic.w	r1, r1, #12
 800d94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d950:	681a      	ldr	r2, [r3, #0]
 800d952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800d956:	430b      	orrs	r3, r1
 800d958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d95a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	695b      	ldr	r3, [r3, #20]
 800d962:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800d966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d96a:	6999      	ldr	r1, [r3, #24]
 800d96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d970:	681a      	ldr	r2, [r3, #0]
 800d972:	ea40 0301 	orr.w	r3, r0, r1
 800d976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	4b8f      	ldr	r3, [pc, #572]	; (800dbbc <UART_SetConfig+0x2cc>)
 800d980:	429a      	cmp	r2, r3
 800d982:	d005      	beq.n	800d990 <UART_SetConfig+0xa0>
 800d984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d988:	681a      	ldr	r2, [r3, #0]
 800d98a:	4b8d      	ldr	r3, [pc, #564]	; (800dbc0 <UART_SetConfig+0x2d0>)
 800d98c:	429a      	cmp	r2, r3
 800d98e:	d104      	bne.n	800d99a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800d990:	f7fd fa9c 	bl	800aecc <HAL_RCC_GetPCLK2Freq>
 800d994:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800d998:	e003      	b.n	800d9a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800d99a:	f7fd fa83 	bl	800aea4 <HAL_RCC_GetPCLK1Freq>
 800d99e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d9a6:	69db      	ldr	r3, [r3, #28]
 800d9a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d9ac:	f040 810c 	bne.w	800dbc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800d9b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d9ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d9be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800d9c2:	4622      	mov	r2, r4
 800d9c4:	462b      	mov	r3, r5
 800d9c6:	1891      	adds	r1, r2, r2
 800d9c8:	65b9      	str	r1, [r7, #88]	; 0x58
 800d9ca:	415b      	adcs	r3, r3
 800d9cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800d9d2:	4621      	mov	r1, r4
 800d9d4:	eb12 0801 	adds.w	r8, r2, r1
 800d9d8:	4629      	mov	r1, r5
 800d9da:	eb43 0901 	adc.w	r9, r3, r1
 800d9de:	f04f 0200 	mov.w	r2, #0
 800d9e2:	f04f 0300 	mov.w	r3, #0
 800d9e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d9ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d9ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d9f2:	4690      	mov	r8, r2
 800d9f4:	4699      	mov	r9, r3
 800d9f6:	4623      	mov	r3, r4
 800d9f8:	eb18 0303 	adds.w	r3, r8, r3
 800d9fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800da00:	462b      	mov	r3, r5
 800da02:	eb49 0303 	adc.w	r3, r9, r3
 800da06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800da0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	2200      	movs	r2, #0
 800da12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800da16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800da1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800da1e:	460b      	mov	r3, r1
 800da20:	18db      	adds	r3, r3, r3
 800da22:	653b      	str	r3, [r7, #80]	; 0x50
 800da24:	4613      	mov	r3, r2
 800da26:	eb42 0303 	adc.w	r3, r2, r3
 800da2a:	657b      	str	r3, [r7, #84]	; 0x54
 800da2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800da30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800da34:	f7f3 f948 	bl	8000cc8 <__aeabi_uldivmod>
 800da38:	4602      	mov	r2, r0
 800da3a:	460b      	mov	r3, r1
 800da3c:	4b61      	ldr	r3, [pc, #388]	; (800dbc4 <UART_SetConfig+0x2d4>)
 800da3e:	fba3 2302 	umull	r2, r3, r3, r2
 800da42:	095b      	lsrs	r3, r3, #5
 800da44:	011c      	lsls	r4, r3, #4
 800da46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800da4a:	2200      	movs	r2, #0
 800da4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800da50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800da54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800da58:	4642      	mov	r2, r8
 800da5a:	464b      	mov	r3, r9
 800da5c:	1891      	adds	r1, r2, r2
 800da5e:	64b9      	str	r1, [r7, #72]	; 0x48
 800da60:	415b      	adcs	r3, r3
 800da62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800da68:	4641      	mov	r1, r8
 800da6a:	eb12 0a01 	adds.w	sl, r2, r1
 800da6e:	4649      	mov	r1, r9
 800da70:	eb43 0b01 	adc.w	fp, r3, r1
 800da74:	f04f 0200 	mov.w	r2, #0
 800da78:	f04f 0300 	mov.w	r3, #0
 800da7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800da80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800da84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800da88:	4692      	mov	sl, r2
 800da8a:	469b      	mov	fp, r3
 800da8c:	4643      	mov	r3, r8
 800da8e:	eb1a 0303 	adds.w	r3, sl, r3
 800da92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800da96:	464b      	mov	r3, r9
 800da98:	eb4b 0303 	adc.w	r3, fp, r3
 800da9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800daa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800daac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800dab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800dab4:	460b      	mov	r3, r1
 800dab6:	18db      	adds	r3, r3, r3
 800dab8:	643b      	str	r3, [r7, #64]	; 0x40
 800daba:	4613      	mov	r3, r2
 800dabc:	eb42 0303 	adc.w	r3, r2, r3
 800dac0:	647b      	str	r3, [r7, #68]	; 0x44
 800dac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800daca:	f7f3 f8fd 	bl	8000cc8 <__aeabi_uldivmod>
 800dace:	4602      	mov	r2, r0
 800dad0:	460b      	mov	r3, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	4b3b      	ldr	r3, [pc, #236]	; (800dbc4 <UART_SetConfig+0x2d4>)
 800dad6:	fba3 2301 	umull	r2, r3, r3, r1
 800dada:	095b      	lsrs	r3, r3, #5
 800dadc:	2264      	movs	r2, #100	; 0x64
 800dade:	fb02 f303 	mul.w	r3, r2, r3
 800dae2:	1acb      	subs	r3, r1, r3
 800dae4:	00db      	lsls	r3, r3, #3
 800dae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800daea:	4b36      	ldr	r3, [pc, #216]	; (800dbc4 <UART_SetConfig+0x2d4>)
 800daec:	fba3 2302 	umull	r2, r3, r3, r2
 800daf0:	095b      	lsrs	r3, r3, #5
 800daf2:	005b      	lsls	r3, r3, #1
 800daf4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800daf8:	441c      	add	r4, r3
 800dafa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dafe:	2200      	movs	r2, #0
 800db00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800db04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800db08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800db0c:	4642      	mov	r2, r8
 800db0e:	464b      	mov	r3, r9
 800db10:	1891      	adds	r1, r2, r2
 800db12:	63b9      	str	r1, [r7, #56]	; 0x38
 800db14:	415b      	adcs	r3, r3
 800db16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800db18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800db1c:	4641      	mov	r1, r8
 800db1e:	1851      	adds	r1, r2, r1
 800db20:	6339      	str	r1, [r7, #48]	; 0x30
 800db22:	4649      	mov	r1, r9
 800db24:	414b      	adcs	r3, r1
 800db26:	637b      	str	r3, [r7, #52]	; 0x34
 800db28:	f04f 0200 	mov.w	r2, #0
 800db2c:	f04f 0300 	mov.w	r3, #0
 800db30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800db34:	4659      	mov	r1, fp
 800db36:	00cb      	lsls	r3, r1, #3
 800db38:	4651      	mov	r1, sl
 800db3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800db3e:	4651      	mov	r1, sl
 800db40:	00ca      	lsls	r2, r1, #3
 800db42:	4610      	mov	r0, r2
 800db44:	4619      	mov	r1, r3
 800db46:	4603      	mov	r3, r0
 800db48:	4642      	mov	r2, r8
 800db4a:	189b      	adds	r3, r3, r2
 800db4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db50:	464b      	mov	r3, r9
 800db52:	460a      	mov	r2, r1
 800db54:	eb42 0303 	adc.w	r3, r2, r3
 800db58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800db68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800db6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800db70:	460b      	mov	r3, r1
 800db72:	18db      	adds	r3, r3, r3
 800db74:	62bb      	str	r3, [r7, #40]	; 0x28
 800db76:	4613      	mov	r3, r2
 800db78:	eb42 0303 	adc.w	r3, r2, r3
 800db7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800db82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800db86:	f7f3 f89f 	bl	8000cc8 <__aeabi_uldivmod>
 800db8a:	4602      	mov	r2, r0
 800db8c:	460b      	mov	r3, r1
 800db8e:	4b0d      	ldr	r3, [pc, #52]	; (800dbc4 <UART_SetConfig+0x2d4>)
 800db90:	fba3 1302 	umull	r1, r3, r3, r2
 800db94:	095b      	lsrs	r3, r3, #5
 800db96:	2164      	movs	r1, #100	; 0x64
 800db98:	fb01 f303 	mul.w	r3, r1, r3
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	00db      	lsls	r3, r3, #3
 800dba0:	3332      	adds	r3, #50	; 0x32
 800dba2:	4a08      	ldr	r2, [pc, #32]	; (800dbc4 <UART_SetConfig+0x2d4>)
 800dba4:	fba2 2303 	umull	r2, r3, r2, r3
 800dba8:	095b      	lsrs	r3, r3, #5
 800dbaa:	f003 0207 	and.w	r2, r3, #7
 800dbae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	4422      	add	r2, r4
 800dbb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800dbb8:	e106      	b.n	800ddc8 <UART_SetConfig+0x4d8>
 800dbba:	bf00      	nop
 800dbbc:	40011000 	.word	0x40011000
 800dbc0:	40011400 	.word	0x40011400
 800dbc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dbc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dbcc:	2200      	movs	r2, #0
 800dbce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dbd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dbd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800dbda:	4642      	mov	r2, r8
 800dbdc:	464b      	mov	r3, r9
 800dbde:	1891      	adds	r1, r2, r2
 800dbe0:	6239      	str	r1, [r7, #32]
 800dbe2:	415b      	adcs	r3, r3
 800dbe4:	627b      	str	r3, [r7, #36]	; 0x24
 800dbe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dbea:	4641      	mov	r1, r8
 800dbec:	1854      	adds	r4, r2, r1
 800dbee:	4649      	mov	r1, r9
 800dbf0:	eb43 0501 	adc.w	r5, r3, r1
 800dbf4:	f04f 0200 	mov.w	r2, #0
 800dbf8:	f04f 0300 	mov.w	r3, #0
 800dbfc:	00eb      	lsls	r3, r5, #3
 800dbfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dc02:	00e2      	lsls	r2, r4, #3
 800dc04:	4614      	mov	r4, r2
 800dc06:	461d      	mov	r5, r3
 800dc08:	4643      	mov	r3, r8
 800dc0a:	18e3      	adds	r3, r4, r3
 800dc0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dc10:	464b      	mov	r3, r9
 800dc12:	eb45 0303 	adc.w	r3, r5, r3
 800dc16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dc1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dc26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800dc2a:	f04f 0200 	mov.w	r2, #0
 800dc2e:	f04f 0300 	mov.w	r3, #0
 800dc32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800dc36:	4629      	mov	r1, r5
 800dc38:	008b      	lsls	r3, r1, #2
 800dc3a:	4621      	mov	r1, r4
 800dc3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dc40:	4621      	mov	r1, r4
 800dc42:	008a      	lsls	r2, r1, #2
 800dc44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800dc48:	f7f3 f83e 	bl	8000cc8 <__aeabi_uldivmod>
 800dc4c:	4602      	mov	r2, r0
 800dc4e:	460b      	mov	r3, r1
 800dc50:	4b60      	ldr	r3, [pc, #384]	; (800ddd4 <UART_SetConfig+0x4e4>)
 800dc52:	fba3 2302 	umull	r2, r3, r3, r2
 800dc56:	095b      	lsrs	r3, r3, #5
 800dc58:	011c      	lsls	r4, r3, #4
 800dc5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dc5e:	2200      	movs	r2, #0
 800dc60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dc64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800dc68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800dc6c:	4642      	mov	r2, r8
 800dc6e:	464b      	mov	r3, r9
 800dc70:	1891      	adds	r1, r2, r2
 800dc72:	61b9      	str	r1, [r7, #24]
 800dc74:	415b      	adcs	r3, r3
 800dc76:	61fb      	str	r3, [r7, #28]
 800dc78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dc7c:	4641      	mov	r1, r8
 800dc7e:	1851      	adds	r1, r2, r1
 800dc80:	6139      	str	r1, [r7, #16]
 800dc82:	4649      	mov	r1, r9
 800dc84:	414b      	adcs	r3, r1
 800dc86:	617b      	str	r3, [r7, #20]
 800dc88:	f04f 0200 	mov.w	r2, #0
 800dc8c:	f04f 0300 	mov.w	r3, #0
 800dc90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dc94:	4659      	mov	r1, fp
 800dc96:	00cb      	lsls	r3, r1, #3
 800dc98:	4651      	mov	r1, sl
 800dc9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dc9e:	4651      	mov	r1, sl
 800dca0:	00ca      	lsls	r2, r1, #3
 800dca2:	4610      	mov	r0, r2
 800dca4:	4619      	mov	r1, r3
 800dca6:	4603      	mov	r3, r0
 800dca8:	4642      	mov	r2, r8
 800dcaa:	189b      	adds	r3, r3, r2
 800dcac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800dcb0:	464b      	mov	r3, r9
 800dcb2:	460a      	mov	r2, r1
 800dcb4:	eb42 0303 	adc.w	r3, r2, r3
 800dcb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dcbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcc0:	685b      	ldr	r3, [r3, #4]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	67bb      	str	r3, [r7, #120]	; 0x78
 800dcc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800dcc8:	f04f 0200 	mov.w	r2, #0
 800dccc:	f04f 0300 	mov.w	r3, #0
 800dcd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800dcd4:	4649      	mov	r1, r9
 800dcd6:	008b      	lsls	r3, r1, #2
 800dcd8:	4641      	mov	r1, r8
 800dcda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dcde:	4641      	mov	r1, r8
 800dce0:	008a      	lsls	r2, r1, #2
 800dce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800dce6:	f7f2 ffef 	bl	8000cc8 <__aeabi_uldivmod>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	4611      	mov	r1, r2
 800dcf0:	4b38      	ldr	r3, [pc, #224]	; (800ddd4 <UART_SetConfig+0x4e4>)
 800dcf2:	fba3 2301 	umull	r2, r3, r3, r1
 800dcf6:	095b      	lsrs	r3, r3, #5
 800dcf8:	2264      	movs	r2, #100	; 0x64
 800dcfa:	fb02 f303 	mul.w	r3, r2, r3
 800dcfe:	1acb      	subs	r3, r1, r3
 800dd00:	011b      	lsls	r3, r3, #4
 800dd02:	3332      	adds	r3, #50	; 0x32
 800dd04:	4a33      	ldr	r2, [pc, #204]	; (800ddd4 <UART_SetConfig+0x4e4>)
 800dd06:	fba2 2303 	umull	r2, r3, r2, r3
 800dd0a:	095b      	lsrs	r3, r3, #5
 800dd0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd10:	441c      	add	r4, r3
 800dd12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd16:	2200      	movs	r2, #0
 800dd18:	673b      	str	r3, [r7, #112]	; 0x70
 800dd1a:	677a      	str	r2, [r7, #116]	; 0x74
 800dd1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800dd20:	4642      	mov	r2, r8
 800dd22:	464b      	mov	r3, r9
 800dd24:	1891      	adds	r1, r2, r2
 800dd26:	60b9      	str	r1, [r7, #8]
 800dd28:	415b      	adcs	r3, r3
 800dd2a:	60fb      	str	r3, [r7, #12]
 800dd2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dd30:	4641      	mov	r1, r8
 800dd32:	1851      	adds	r1, r2, r1
 800dd34:	6039      	str	r1, [r7, #0]
 800dd36:	4649      	mov	r1, r9
 800dd38:	414b      	adcs	r3, r1
 800dd3a:	607b      	str	r3, [r7, #4]
 800dd3c:	f04f 0200 	mov.w	r2, #0
 800dd40:	f04f 0300 	mov.w	r3, #0
 800dd44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800dd48:	4659      	mov	r1, fp
 800dd4a:	00cb      	lsls	r3, r1, #3
 800dd4c:	4651      	mov	r1, sl
 800dd4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800dd52:	4651      	mov	r1, sl
 800dd54:	00ca      	lsls	r2, r1, #3
 800dd56:	4610      	mov	r0, r2
 800dd58:	4619      	mov	r1, r3
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	4642      	mov	r2, r8
 800dd5e:	189b      	adds	r3, r3, r2
 800dd60:	66bb      	str	r3, [r7, #104]	; 0x68
 800dd62:	464b      	mov	r3, r9
 800dd64:	460a      	mov	r2, r1
 800dd66:	eb42 0303 	adc.w	r3, r2, r3
 800dd6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800dd6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	663b      	str	r3, [r7, #96]	; 0x60
 800dd76:	667a      	str	r2, [r7, #100]	; 0x64
 800dd78:	f04f 0200 	mov.w	r2, #0
 800dd7c:	f04f 0300 	mov.w	r3, #0
 800dd80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800dd84:	4649      	mov	r1, r9
 800dd86:	008b      	lsls	r3, r1, #2
 800dd88:	4641      	mov	r1, r8
 800dd8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800dd8e:	4641      	mov	r1, r8
 800dd90:	008a      	lsls	r2, r1, #2
 800dd92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800dd96:	f7f2 ff97 	bl	8000cc8 <__aeabi_uldivmod>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	4b0d      	ldr	r3, [pc, #52]	; (800ddd4 <UART_SetConfig+0x4e4>)
 800dda0:	fba3 1302 	umull	r1, r3, r3, r2
 800dda4:	095b      	lsrs	r3, r3, #5
 800dda6:	2164      	movs	r1, #100	; 0x64
 800dda8:	fb01 f303 	mul.w	r3, r1, r3
 800ddac:	1ad3      	subs	r3, r2, r3
 800ddae:	011b      	lsls	r3, r3, #4
 800ddb0:	3332      	adds	r3, #50	; 0x32
 800ddb2:	4a08      	ldr	r2, [pc, #32]	; (800ddd4 <UART_SetConfig+0x4e4>)
 800ddb4:	fba2 2303 	umull	r2, r3, r2, r3
 800ddb8:	095b      	lsrs	r3, r3, #5
 800ddba:	f003 020f 	and.w	r2, r3, #15
 800ddbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	4422      	add	r2, r4
 800ddc6:	609a      	str	r2, [r3, #8]
}
 800ddc8:	bf00      	nop
 800ddca:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ddd4:	51eb851f 	.word	0x51eb851f

0800ddd8 <atan2>:
 800ddd8:	f000 b906 	b.w	800dfe8 <__ieee754_atan2>

0800dddc <sqrt>:
 800dddc:	b538      	push	{r3, r4, r5, lr}
 800ddde:	ed2d 8b02 	vpush	{d8}
 800dde2:	ec55 4b10 	vmov	r4, r5, d0
 800dde6:	f000 f825 	bl	800de34 <__ieee754_sqrt>
 800ddea:	4622      	mov	r2, r4
 800ddec:	462b      	mov	r3, r5
 800ddee:	4620      	mov	r0, r4
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	eeb0 8a40 	vmov.f32	s16, s0
 800ddf6:	eef0 8a60 	vmov.f32	s17, s1
 800ddfa:	f7f2 feb7 	bl	8000b6c <__aeabi_dcmpun>
 800ddfe:	b990      	cbnz	r0, 800de26 <sqrt+0x4a>
 800de00:	2200      	movs	r2, #0
 800de02:	2300      	movs	r3, #0
 800de04:	4620      	mov	r0, r4
 800de06:	4629      	mov	r1, r5
 800de08:	f7f2 fe88 	bl	8000b1c <__aeabi_dcmplt>
 800de0c:	b158      	cbz	r0, 800de26 <sqrt+0x4a>
 800de0e:	f001 fb83 	bl	800f518 <__errno>
 800de12:	2321      	movs	r3, #33	; 0x21
 800de14:	6003      	str	r3, [r0, #0]
 800de16:	2200      	movs	r2, #0
 800de18:	2300      	movs	r3, #0
 800de1a:	4610      	mov	r0, r2
 800de1c:	4619      	mov	r1, r3
 800de1e:	f7f2 fd35 	bl	800088c <__aeabi_ddiv>
 800de22:	ec41 0b18 	vmov	d8, r0, r1
 800de26:	eeb0 0a48 	vmov.f32	s0, s16
 800de2a:	eef0 0a68 	vmov.f32	s1, s17
 800de2e:	ecbd 8b02 	vpop	{d8}
 800de32:	bd38      	pop	{r3, r4, r5, pc}

0800de34 <__ieee754_sqrt>:
 800de34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de38:	ec55 4b10 	vmov	r4, r5, d0
 800de3c:	4e67      	ldr	r6, [pc, #412]	; (800dfdc <__ieee754_sqrt+0x1a8>)
 800de3e:	43ae      	bics	r6, r5
 800de40:	ee10 0a10 	vmov	r0, s0
 800de44:	ee10 2a10 	vmov	r2, s0
 800de48:	4629      	mov	r1, r5
 800de4a:	462b      	mov	r3, r5
 800de4c:	d10d      	bne.n	800de6a <__ieee754_sqrt+0x36>
 800de4e:	f7f2 fbf3 	bl	8000638 <__aeabi_dmul>
 800de52:	4602      	mov	r2, r0
 800de54:	460b      	mov	r3, r1
 800de56:	4620      	mov	r0, r4
 800de58:	4629      	mov	r1, r5
 800de5a:	f7f2 fa37 	bl	80002cc <__adddf3>
 800de5e:	4604      	mov	r4, r0
 800de60:	460d      	mov	r5, r1
 800de62:	ec45 4b10 	vmov	d0, r4, r5
 800de66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de6a:	2d00      	cmp	r5, #0
 800de6c:	dc0b      	bgt.n	800de86 <__ieee754_sqrt+0x52>
 800de6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800de72:	4326      	orrs	r6, r4
 800de74:	d0f5      	beq.n	800de62 <__ieee754_sqrt+0x2e>
 800de76:	b135      	cbz	r5, 800de86 <__ieee754_sqrt+0x52>
 800de78:	f7f2 fa26 	bl	80002c8 <__aeabi_dsub>
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	f7f2 fd04 	bl	800088c <__aeabi_ddiv>
 800de84:	e7eb      	b.n	800de5e <__ieee754_sqrt+0x2a>
 800de86:	1509      	asrs	r1, r1, #20
 800de88:	f000 808d 	beq.w	800dfa6 <__ieee754_sqrt+0x172>
 800de8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de90:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800de94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800de98:	07c9      	lsls	r1, r1, #31
 800de9a:	bf5c      	itt	pl
 800de9c:	005b      	lslpl	r3, r3, #1
 800de9e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800dea2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dea6:	bf58      	it	pl
 800dea8:	0052      	lslpl	r2, r2, #1
 800deaa:	2500      	movs	r5, #0
 800deac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800deb0:	1076      	asrs	r6, r6, #1
 800deb2:	0052      	lsls	r2, r2, #1
 800deb4:	f04f 0e16 	mov.w	lr, #22
 800deb8:	46ac      	mov	ip, r5
 800deba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800debe:	eb0c 0001 	add.w	r0, ip, r1
 800dec2:	4298      	cmp	r0, r3
 800dec4:	bfde      	ittt	le
 800dec6:	1a1b      	suble	r3, r3, r0
 800dec8:	eb00 0c01 	addle.w	ip, r0, r1
 800decc:	186d      	addle	r5, r5, r1
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	f1be 0e01 	subs.w	lr, lr, #1
 800ded4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ded8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800dedc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800dee0:	d1ed      	bne.n	800debe <__ieee754_sqrt+0x8a>
 800dee2:	4674      	mov	r4, lr
 800dee4:	2720      	movs	r7, #32
 800dee6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800deea:	4563      	cmp	r3, ip
 800deec:	eb01 000e 	add.w	r0, r1, lr
 800def0:	dc02      	bgt.n	800def8 <__ieee754_sqrt+0xc4>
 800def2:	d113      	bne.n	800df1c <__ieee754_sqrt+0xe8>
 800def4:	4290      	cmp	r0, r2
 800def6:	d811      	bhi.n	800df1c <__ieee754_sqrt+0xe8>
 800def8:	2800      	cmp	r0, #0
 800defa:	eb00 0e01 	add.w	lr, r0, r1
 800defe:	da57      	bge.n	800dfb0 <__ieee754_sqrt+0x17c>
 800df00:	f1be 0f00 	cmp.w	lr, #0
 800df04:	db54      	blt.n	800dfb0 <__ieee754_sqrt+0x17c>
 800df06:	f10c 0801 	add.w	r8, ip, #1
 800df0a:	eba3 030c 	sub.w	r3, r3, ip
 800df0e:	4290      	cmp	r0, r2
 800df10:	bf88      	it	hi
 800df12:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800df16:	1a12      	subs	r2, r2, r0
 800df18:	440c      	add	r4, r1
 800df1a:	46c4      	mov	ip, r8
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	3f01      	subs	r7, #1
 800df20:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800df24:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800df28:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800df2c:	d1dd      	bne.n	800deea <__ieee754_sqrt+0xb6>
 800df2e:	4313      	orrs	r3, r2
 800df30:	d01b      	beq.n	800df6a <__ieee754_sqrt+0x136>
 800df32:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800dfe0 <__ieee754_sqrt+0x1ac>
 800df36:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800dfe4 <__ieee754_sqrt+0x1b0>
 800df3a:	e9da 0100 	ldrd	r0, r1, [sl]
 800df3e:	e9db 2300 	ldrd	r2, r3, [fp]
 800df42:	f7f2 f9c1 	bl	80002c8 <__aeabi_dsub>
 800df46:	e9da 8900 	ldrd	r8, r9, [sl]
 800df4a:	4602      	mov	r2, r0
 800df4c:	460b      	mov	r3, r1
 800df4e:	4640      	mov	r0, r8
 800df50:	4649      	mov	r1, r9
 800df52:	f7f2 fded 	bl	8000b30 <__aeabi_dcmple>
 800df56:	b140      	cbz	r0, 800df6a <__ieee754_sqrt+0x136>
 800df58:	f1b4 3fff 	cmp.w	r4, #4294967295
 800df5c:	e9da 0100 	ldrd	r0, r1, [sl]
 800df60:	e9db 2300 	ldrd	r2, r3, [fp]
 800df64:	d126      	bne.n	800dfb4 <__ieee754_sqrt+0x180>
 800df66:	3501      	adds	r5, #1
 800df68:	463c      	mov	r4, r7
 800df6a:	106a      	asrs	r2, r5, #1
 800df6c:	0863      	lsrs	r3, r4, #1
 800df6e:	07e9      	lsls	r1, r5, #31
 800df70:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800df74:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800df78:	bf48      	it	mi
 800df7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800df7e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800df82:	461c      	mov	r4, r3
 800df84:	e76d      	b.n	800de62 <__ieee754_sqrt+0x2e>
 800df86:	0ad3      	lsrs	r3, r2, #11
 800df88:	3815      	subs	r0, #21
 800df8a:	0552      	lsls	r2, r2, #21
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d0fa      	beq.n	800df86 <__ieee754_sqrt+0x152>
 800df90:	02dc      	lsls	r4, r3, #11
 800df92:	d50a      	bpl.n	800dfaa <__ieee754_sqrt+0x176>
 800df94:	f1c1 0420 	rsb	r4, r1, #32
 800df98:	fa22 f404 	lsr.w	r4, r2, r4
 800df9c:	1e4d      	subs	r5, r1, #1
 800df9e:	408a      	lsls	r2, r1
 800dfa0:	4323      	orrs	r3, r4
 800dfa2:	1b41      	subs	r1, r0, r5
 800dfa4:	e772      	b.n	800de8c <__ieee754_sqrt+0x58>
 800dfa6:	4608      	mov	r0, r1
 800dfa8:	e7f0      	b.n	800df8c <__ieee754_sqrt+0x158>
 800dfaa:	005b      	lsls	r3, r3, #1
 800dfac:	3101      	adds	r1, #1
 800dfae:	e7ef      	b.n	800df90 <__ieee754_sqrt+0x15c>
 800dfb0:	46e0      	mov	r8, ip
 800dfb2:	e7aa      	b.n	800df0a <__ieee754_sqrt+0xd6>
 800dfb4:	f7f2 f98a 	bl	80002cc <__adddf3>
 800dfb8:	e9da 8900 	ldrd	r8, r9, [sl]
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	460b      	mov	r3, r1
 800dfc0:	4640      	mov	r0, r8
 800dfc2:	4649      	mov	r1, r9
 800dfc4:	f7f2 fdaa 	bl	8000b1c <__aeabi_dcmplt>
 800dfc8:	b120      	cbz	r0, 800dfd4 <__ieee754_sqrt+0x1a0>
 800dfca:	1ca0      	adds	r0, r4, #2
 800dfcc:	bf08      	it	eq
 800dfce:	3501      	addeq	r5, #1
 800dfd0:	3402      	adds	r4, #2
 800dfd2:	e7ca      	b.n	800df6a <__ieee754_sqrt+0x136>
 800dfd4:	3401      	adds	r4, #1
 800dfd6:	f024 0401 	bic.w	r4, r4, #1
 800dfda:	e7c6      	b.n	800df6a <__ieee754_sqrt+0x136>
 800dfdc:	7ff00000 	.word	0x7ff00000
 800dfe0:	20000010 	.word	0x20000010
 800dfe4:	20000018 	.word	0x20000018

0800dfe8 <__ieee754_atan2>:
 800dfe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfec:	ec57 6b11 	vmov	r6, r7, d1
 800dff0:	4273      	negs	r3, r6
 800dff2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800e170 <__ieee754_atan2+0x188>
 800dff6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800dffa:	4333      	orrs	r3, r6
 800dffc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e000:	4543      	cmp	r3, r8
 800e002:	ec51 0b10 	vmov	r0, r1, d0
 800e006:	ee11 5a10 	vmov	r5, s2
 800e00a:	d80a      	bhi.n	800e022 <__ieee754_atan2+0x3a>
 800e00c:	4244      	negs	r4, r0
 800e00e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e012:	4304      	orrs	r4, r0
 800e014:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e018:	4544      	cmp	r4, r8
 800e01a:	ee10 9a10 	vmov	r9, s0
 800e01e:	468e      	mov	lr, r1
 800e020:	d907      	bls.n	800e032 <__ieee754_atan2+0x4a>
 800e022:	4632      	mov	r2, r6
 800e024:	463b      	mov	r3, r7
 800e026:	f7f2 f951 	bl	80002cc <__adddf3>
 800e02a:	ec41 0b10 	vmov	d0, r0, r1
 800e02e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e032:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e036:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e03a:	4334      	orrs	r4, r6
 800e03c:	d103      	bne.n	800e046 <__ieee754_atan2+0x5e>
 800e03e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e042:	f000 b899 	b.w	800e178 <atan>
 800e046:	17bc      	asrs	r4, r7, #30
 800e048:	f004 0402 	and.w	r4, r4, #2
 800e04c:	ea53 0909 	orrs.w	r9, r3, r9
 800e050:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e054:	d107      	bne.n	800e066 <__ieee754_atan2+0x7e>
 800e056:	2c02      	cmp	r4, #2
 800e058:	d05f      	beq.n	800e11a <__ieee754_atan2+0x132>
 800e05a:	2c03      	cmp	r4, #3
 800e05c:	d1e5      	bne.n	800e02a <__ieee754_atan2+0x42>
 800e05e:	a140      	add	r1, pc, #256	; (adr r1, 800e160 <__ieee754_atan2+0x178>)
 800e060:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e064:	e7e1      	b.n	800e02a <__ieee754_atan2+0x42>
 800e066:	4315      	orrs	r5, r2
 800e068:	d106      	bne.n	800e078 <__ieee754_atan2+0x90>
 800e06a:	f1be 0f00 	cmp.w	lr, #0
 800e06e:	da5f      	bge.n	800e130 <__ieee754_atan2+0x148>
 800e070:	a13d      	add	r1, pc, #244	; (adr r1, 800e168 <__ieee754_atan2+0x180>)
 800e072:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e076:	e7d8      	b.n	800e02a <__ieee754_atan2+0x42>
 800e078:	4542      	cmp	r2, r8
 800e07a:	d10f      	bne.n	800e09c <__ieee754_atan2+0xb4>
 800e07c:	4293      	cmp	r3, r2
 800e07e:	f104 34ff 	add.w	r4, r4, #4294967295
 800e082:	d107      	bne.n	800e094 <__ieee754_atan2+0xac>
 800e084:	2c02      	cmp	r4, #2
 800e086:	d84c      	bhi.n	800e122 <__ieee754_atan2+0x13a>
 800e088:	4b33      	ldr	r3, [pc, #204]	; (800e158 <__ieee754_atan2+0x170>)
 800e08a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e08e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e092:	e7ca      	b.n	800e02a <__ieee754_atan2+0x42>
 800e094:	2c02      	cmp	r4, #2
 800e096:	d848      	bhi.n	800e12a <__ieee754_atan2+0x142>
 800e098:	4b30      	ldr	r3, [pc, #192]	; (800e15c <__ieee754_atan2+0x174>)
 800e09a:	e7f6      	b.n	800e08a <__ieee754_atan2+0xa2>
 800e09c:	4543      	cmp	r3, r8
 800e09e:	d0e4      	beq.n	800e06a <__ieee754_atan2+0x82>
 800e0a0:	1a9b      	subs	r3, r3, r2
 800e0a2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e0a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e0aa:	da1e      	bge.n	800e0ea <__ieee754_atan2+0x102>
 800e0ac:	2f00      	cmp	r7, #0
 800e0ae:	da01      	bge.n	800e0b4 <__ieee754_atan2+0xcc>
 800e0b0:	323c      	adds	r2, #60	; 0x3c
 800e0b2:	db1e      	blt.n	800e0f2 <__ieee754_atan2+0x10a>
 800e0b4:	4632      	mov	r2, r6
 800e0b6:	463b      	mov	r3, r7
 800e0b8:	f7f2 fbe8 	bl	800088c <__aeabi_ddiv>
 800e0bc:	ec41 0b10 	vmov	d0, r0, r1
 800e0c0:	f000 f9fa 	bl	800e4b8 <fabs>
 800e0c4:	f000 f858 	bl	800e178 <atan>
 800e0c8:	ec51 0b10 	vmov	r0, r1, d0
 800e0cc:	2c01      	cmp	r4, #1
 800e0ce:	d013      	beq.n	800e0f8 <__ieee754_atan2+0x110>
 800e0d0:	2c02      	cmp	r4, #2
 800e0d2:	d015      	beq.n	800e100 <__ieee754_atan2+0x118>
 800e0d4:	2c00      	cmp	r4, #0
 800e0d6:	d0a8      	beq.n	800e02a <__ieee754_atan2+0x42>
 800e0d8:	a317      	add	r3, pc, #92	; (adr r3, 800e138 <__ieee754_atan2+0x150>)
 800e0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0de:	f7f2 f8f3 	bl	80002c8 <__aeabi_dsub>
 800e0e2:	a317      	add	r3, pc, #92	; (adr r3, 800e140 <__ieee754_atan2+0x158>)
 800e0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e8:	e014      	b.n	800e114 <__ieee754_atan2+0x12c>
 800e0ea:	a117      	add	r1, pc, #92	; (adr r1, 800e148 <__ieee754_atan2+0x160>)
 800e0ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0f0:	e7ec      	b.n	800e0cc <__ieee754_atan2+0xe4>
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	2100      	movs	r1, #0
 800e0f6:	e7e9      	b.n	800e0cc <__ieee754_atan2+0xe4>
 800e0f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	e794      	b.n	800e02a <__ieee754_atan2+0x42>
 800e100:	a30d      	add	r3, pc, #52	; (adr r3, 800e138 <__ieee754_atan2+0x150>)
 800e102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e106:	f7f2 f8df 	bl	80002c8 <__aeabi_dsub>
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	a10c      	add	r1, pc, #48	; (adr r1, 800e140 <__ieee754_atan2+0x158>)
 800e110:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e114:	f7f2 f8d8 	bl	80002c8 <__aeabi_dsub>
 800e118:	e787      	b.n	800e02a <__ieee754_atan2+0x42>
 800e11a:	a109      	add	r1, pc, #36	; (adr r1, 800e140 <__ieee754_atan2+0x158>)
 800e11c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e120:	e783      	b.n	800e02a <__ieee754_atan2+0x42>
 800e122:	a10b      	add	r1, pc, #44	; (adr r1, 800e150 <__ieee754_atan2+0x168>)
 800e124:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e128:	e77f      	b.n	800e02a <__ieee754_atan2+0x42>
 800e12a:	2000      	movs	r0, #0
 800e12c:	2100      	movs	r1, #0
 800e12e:	e77c      	b.n	800e02a <__ieee754_atan2+0x42>
 800e130:	a105      	add	r1, pc, #20	; (adr r1, 800e148 <__ieee754_atan2+0x160>)
 800e132:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e136:	e778      	b.n	800e02a <__ieee754_atan2+0x42>
 800e138:	33145c07 	.word	0x33145c07
 800e13c:	3ca1a626 	.word	0x3ca1a626
 800e140:	54442d18 	.word	0x54442d18
 800e144:	400921fb 	.word	0x400921fb
 800e148:	54442d18 	.word	0x54442d18
 800e14c:	3ff921fb 	.word	0x3ff921fb
 800e150:	54442d18 	.word	0x54442d18
 800e154:	3fe921fb 	.word	0x3fe921fb
 800e158:	080130d0 	.word	0x080130d0
 800e15c:	080130e8 	.word	0x080130e8
 800e160:	54442d18 	.word	0x54442d18
 800e164:	c00921fb 	.word	0xc00921fb
 800e168:	54442d18 	.word	0x54442d18
 800e16c:	bff921fb 	.word	0xbff921fb
 800e170:	7ff00000 	.word	0x7ff00000
 800e174:	00000000 	.word	0x00000000

0800e178 <atan>:
 800e178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e17c:	ec55 4b10 	vmov	r4, r5, d0
 800e180:	4bc3      	ldr	r3, [pc, #780]	; (800e490 <atan+0x318>)
 800e182:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e186:	429e      	cmp	r6, r3
 800e188:	46ab      	mov	fp, r5
 800e18a:	dd18      	ble.n	800e1be <atan+0x46>
 800e18c:	4bc1      	ldr	r3, [pc, #772]	; (800e494 <atan+0x31c>)
 800e18e:	429e      	cmp	r6, r3
 800e190:	dc01      	bgt.n	800e196 <atan+0x1e>
 800e192:	d109      	bne.n	800e1a8 <atan+0x30>
 800e194:	b144      	cbz	r4, 800e1a8 <atan+0x30>
 800e196:	4622      	mov	r2, r4
 800e198:	462b      	mov	r3, r5
 800e19a:	4620      	mov	r0, r4
 800e19c:	4629      	mov	r1, r5
 800e19e:	f7f2 f895 	bl	80002cc <__adddf3>
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	460d      	mov	r5, r1
 800e1a6:	e006      	b.n	800e1b6 <atan+0x3e>
 800e1a8:	f1bb 0f00 	cmp.w	fp, #0
 800e1ac:	f300 8131 	bgt.w	800e412 <atan+0x29a>
 800e1b0:	a59b      	add	r5, pc, #620	; (adr r5, 800e420 <atan+0x2a8>)
 800e1b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e1b6:	ec45 4b10 	vmov	d0, r4, r5
 800e1ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1be:	4bb6      	ldr	r3, [pc, #728]	; (800e498 <atan+0x320>)
 800e1c0:	429e      	cmp	r6, r3
 800e1c2:	dc14      	bgt.n	800e1ee <atan+0x76>
 800e1c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e1c8:	429e      	cmp	r6, r3
 800e1ca:	dc0d      	bgt.n	800e1e8 <atan+0x70>
 800e1cc:	a396      	add	r3, pc, #600	; (adr r3, 800e428 <atan+0x2b0>)
 800e1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d2:	ee10 0a10 	vmov	r0, s0
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	f7f2 f878 	bl	80002cc <__adddf3>
 800e1dc:	4baf      	ldr	r3, [pc, #700]	; (800e49c <atan+0x324>)
 800e1de:	2200      	movs	r2, #0
 800e1e0:	f7f2 fcba 	bl	8000b58 <__aeabi_dcmpgt>
 800e1e4:	2800      	cmp	r0, #0
 800e1e6:	d1e6      	bne.n	800e1b6 <atan+0x3e>
 800e1e8:	f04f 3aff 	mov.w	sl, #4294967295
 800e1ec:	e02b      	b.n	800e246 <atan+0xce>
 800e1ee:	f000 f963 	bl	800e4b8 <fabs>
 800e1f2:	4bab      	ldr	r3, [pc, #684]	; (800e4a0 <atan+0x328>)
 800e1f4:	429e      	cmp	r6, r3
 800e1f6:	ec55 4b10 	vmov	r4, r5, d0
 800e1fa:	f300 80bf 	bgt.w	800e37c <atan+0x204>
 800e1fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e202:	429e      	cmp	r6, r3
 800e204:	f300 80a0 	bgt.w	800e348 <atan+0x1d0>
 800e208:	ee10 2a10 	vmov	r2, s0
 800e20c:	ee10 0a10 	vmov	r0, s0
 800e210:	462b      	mov	r3, r5
 800e212:	4629      	mov	r1, r5
 800e214:	f7f2 f85a 	bl	80002cc <__adddf3>
 800e218:	4ba0      	ldr	r3, [pc, #640]	; (800e49c <atan+0x324>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	f7f2 f854 	bl	80002c8 <__aeabi_dsub>
 800e220:	2200      	movs	r2, #0
 800e222:	4606      	mov	r6, r0
 800e224:	460f      	mov	r7, r1
 800e226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e22a:	4620      	mov	r0, r4
 800e22c:	4629      	mov	r1, r5
 800e22e:	f7f2 f84d 	bl	80002cc <__adddf3>
 800e232:	4602      	mov	r2, r0
 800e234:	460b      	mov	r3, r1
 800e236:	4630      	mov	r0, r6
 800e238:	4639      	mov	r1, r7
 800e23a:	f7f2 fb27 	bl	800088c <__aeabi_ddiv>
 800e23e:	f04f 0a00 	mov.w	sl, #0
 800e242:	4604      	mov	r4, r0
 800e244:	460d      	mov	r5, r1
 800e246:	4622      	mov	r2, r4
 800e248:	462b      	mov	r3, r5
 800e24a:	4620      	mov	r0, r4
 800e24c:	4629      	mov	r1, r5
 800e24e:	f7f2 f9f3 	bl	8000638 <__aeabi_dmul>
 800e252:	4602      	mov	r2, r0
 800e254:	460b      	mov	r3, r1
 800e256:	4680      	mov	r8, r0
 800e258:	4689      	mov	r9, r1
 800e25a:	f7f2 f9ed 	bl	8000638 <__aeabi_dmul>
 800e25e:	a374      	add	r3, pc, #464	; (adr r3, 800e430 <atan+0x2b8>)
 800e260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e264:	4606      	mov	r6, r0
 800e266:	460f      	mov	r7, r1
 800e268:	f7f2 f9e6 	bl	8000638 <__aeabi_dmul>
 800e26c:	a372      	add	r3, pc, #456	; (adr r3, 800e438 <atan+0x2c0>)
 800e26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e272:	f7f2 f82b 	bl	80002cc <__adddf3>
 800e276:	4632      	mov	r2, r6
 800e278:	463b      	mov	r3, r7
 800e27a:	f7f2 f9dd 	bl	8000638 <__aeabi_dmul>
 800e27e:	a370      	add	r3, pc, #448	; (adr r3, 800e440 <atan+0x2c8>)
 800e280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e284:	f7f2 f822 	bl	80002cc <__adddf3>
 800e288:	4632      	mov	r2, r6
 800e28a:	463b      	mov	r3, r7
 800e28c:	f7f2 f9d4 	bl	8000638 <__aeabi_dmul>
 800e290:	a36d      	add	r3, pc, #436	; (adr r3, 800e448 <atan+0x2d0>)
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	f7f2 f819 	bl	80002cc <__adddf3>
 800e29a:	4632      	mov	r2, r6
 800e29c:	463b      	mov	r3, r7
 800e29e:	f7f2 f9cb 	bl	8000638 <__aeabi_dmul>
 800e2a2:	a36b      	add	r3, pc, #428	; (adr r3, 800e450 <atan+0x2d8>)
 800e2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a8:	f7f2 f810 	bl	80002cc <__adddf3>
 800e2ac:	4632      	mov	r2, r6
 800e2ae:	463b      	mov	r3, r7
 800e2b0:	f7f2 f9c2 	bl	8000638 <__aeabi_dmul>
 800e2b4:	a368      	add	r3, pc, #416	; (adr r3, 800e458 <atan+0x2e0>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	f7f2 f807 	bl	80002cc <__adddf3>
 800e2be:	4642      	mov	r2, r8
 800e2c0:	464b      	mov	r3, r9
 800e2c2:	f7f2 f9b9 	bl	8000638 <__aeabi_dmul>
 800e2c6:	a366      	add	r3, pc, #408	; (adr r3, 800e460 <atan+0x2e8>)
 800e2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2cc:	4680      	mov	r8, r0
 800e2ce:	4689      	mov	r9, r1
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	4639      	mov	r1, r7
 800e2d4:	f7f2 f9b0 	bl	8000638 <__aeabi_dmul>
 800e2d8:	a363      	add	r3, pc, #396	; (adr r3, 800e468 <atan+0x2f0>)
 800e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2de:	f7f1 fff3 	bl	80002c8 <__aeabi_dsub>
 800e2e2:	4632      	mov	r2, r6
 800e2e4:	463b      	mov	r3, r7
 800e2e6:	f7f2 f9a7 	bl	8000638 <__aeabi_dmul>
 800e2ea:	a361      	add	r3, pc, #388	; (adr r3, 800e470 <atan+0x2f8>)
 800e2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f0:	f7f1 ffea 	bl	80002c8 <__aeabi_dsub>
 800e2f4:	4632      	mov	r2, r6
 800e2f6:	463b      	mov	r3, r7
 800e2f8:	f7f2 f99e 	bl	8000638 <__aeabi_dmul>
 800e2fc:	a35e      	add	r3, pc, #376	; (adr r3, 800e478 <atan+0x300>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	f7f1 ffe1 	bl	80002c8 <__aeabi_dsub>
 800e306:	4632      	mov	r2, r6
 800e308:	463b      	mov	r3, r7
 800e30a:	f7f2 f995 	bl	8000638 <__aeabi_dmul>
 800e30e:	a35c      	add	r3, pc, #368	; (adr r3, 800e480 <atan+0x308>)
 800e310:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e314:	f7f1 ffd8 	bl	80002c8 <__aeabi_dsub>
 800e318:	4632      	mov	r2, r6
 800e31a:	463b      	mov	r3, r7
 800e31c:	f7f2 f98c 	bl	8000638 <__aeabi_dmul>
 800e320:	4602      	mov	r2, r0
 800e322:	460b      	mov	r3, r1
 800e324:	4640      	mov	r0, r8
 800e326:	4649      	mov	r1, r9
 800e328:	f7f1 ffd0 	bl	80002cc <__adddf3>
 800e32c:	4622      	mov	r2, r4
 800e32e:	462b      	mov	r3, r5
 800e330:	f7f2 f982 	bl	8000638 <__aeabi_dmul>
 800e334:	f1ba 3fff 	cmp.w	sl, #4294967295
 800e338:	4602      	mov	r2, r0
 800e33a:	460b      	mov	r3, r1
 800e33c:	d14b      	bne.n	800e3d6 <atan+0x25e>
 800e33e:	4620      	mov	r0, r4
 800e340:	4629      	mov	r1, r5
 800e342:	f7f1 ffc1 	bl	80002c8 <__aeabi_dsub>
 800e346:	e72c      	b.n	800e1a2 <atan+0x2a>
 800e348:	ee10 0a10 	vmov	r0, s0
 800e34c:	4b53      	ldr	r3, [pc, #332]	; (800e49c <atan+0x324>)
 800e34e:	2200      	movs	r2, #0
 800e350:	4629      	mov	r1, r5
 800e352:	f7f1 ffb9 	bl	80002c8 <__aeabi_dsub>
 800e356:	4b51      	ldr	r3, [pc, #324]	; (800e49c <atan+0x324>)
 800e358:	4606      	mov	r6, r0
 800e35a:	460f      	mov	r7, r1
 800e35c:	2200      	movs	r2, #0
 800e35e:	4620      	mov	r0, r4
 800e360:	4629      	mov	r1, r5
 800e362:	f7f1 ffb3 	bl	80002cc <__adddf3>
 800e366:	4602      	mov	r2, r0
 800e368:	460b      	mov	r3, r1
 800e36a:	4630      	mov	r0, r6
 800e36c:	4639      	mov	r1, r7
 800e36e:	f7f2 fa8d 	bl	800088c <__aeabi_ddiv>
 800e372:	f04f 0a01 	mov.w	sl, #1
 800e376:	4604      	mov	r4, r0
 800e378:	460d      	mov	r5, r1
 800e37a:	e764      	b.n	800e246 <atan+0xce>
 800e37c:	4b49      	ldr	r3, [pc, #292]	; (800e4a4 <atan+0x32c>)
 800e37e:	429e      	cmp	r6, r3
 800e380:	da1d      	bge.n	800e3be <atan+0x246>
 800e382:	ee10 0a10 	vmov	r0, s0
 800e386:	4b48      	ldr	r3, [pc, #288]	; (800e4a8 <atan+0x330>)
 800e388:	2200      	movs	r2, #0
 800e38a:	4629      	mov	r1, r5
 800e38c:	f7f1 ff9c 	bl	80002c8 <__aeabi_dsub>
 800e390:	4b45      	ldr	r3, [pc, #276]	; (800e4a8 <atan+0x330>)
 800e392:	4606      	mov	r6, r0
 800e394:	460f      	mov	r7, r1
 800e396:	2200      	movs	r2, #0
 800e398:	4620      	mov	r0, r4
 800e39a:	4629      	mov	r1, r5
 800e39c:	f7f2 f94c 	bl	8000638 <__aeabi_dmul>
 800e3a0:	4b3e      	ldr	r3, [pc, #248]	; (800e49c <atan+0x324>)
 800e3a2:	2200      	movs	r2, #0
 800e3a4:	f7f1 ff92 	bl	80002cc <__adddf3>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	4639      	mov	r1, r7
 800e3b0:	f7f2 fa6c 	bl	800088c <__aeabi_ddiv>
 800e3b4:	f04f 0a02 	mov.w	sl, #2
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	460d      	mov	r5, r1
 800e3bc:	e743      	b.n	800e246 <atan+0xce>
 800e3be:	462b      	mov	r3, r5
 800e3c0:	ee10 2a10 	vmov	r2, s0
 800e3c4:	4939      	ldr	r1, [pc, #228]	; (800e4ac <atan+0x334>)
 800e3c6:	2000      	movs	r0, #0
 800e3c8:	f7f2 fa60 	bl	800088c <__aeabi_ddiv>
 800e3cc:	f04f 0a03 	mov.w	sl, #3
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	460d      	mov	r5, r1
 800e3d4:	e737      	b.n	800e246 <atan+0xce>
 800e3d6:	4b36      	ldr	r3, [pc, #216]	; (800e4b0 <atan+0x338>)
 800e3d8:	4e36      	ldr	r6, [pc, #216]	; (800e4b4 <atan+0x33c>)
 800e3da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e2:	f7f1 ff71 	bl	80002c8 <__aeabi_dsub>
 800e3e6:	4622      	mov	r2, r4
 800e3e8:	462b      	mov	r3, r5
 800e3ea:	f7f1 ff6d 	bl	80002c8 <__aeabi_dsub>
 800e3ee:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800e3fa:	f7f1 ff65 	bl	80002c8 <__aeabi_dsub>
 800e3fe:	f1bb 0f00 	cmp.w	fp, #0
 800e402:	4604      	mov	r4, r0
 800e404:	460d      	mov	r5, r1
 800e406:	f6bf aed6 	bge.w	800e1b6 <atan+0x3e>
 800e40a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e40e:	461d      	mov	r5, r3
 800e410:	e6d1      	b.n	800e1b6 <atan+0x3e>
 800e412:	a51d      	add	r5, pc, #116	; (adr r5, 800e488 <atan+0x310>)
 800e414:	e9d5 4500 	ldrd	r4, r5, [r5]
 800e418:	e6cd      	b.n	800e1b6 <atan+0x3e>
 800e41a:	bf00      	nop
 800e41c:	f3af 8000 	nop.w
 800e420:	54442d18 	.word	0x54442d18
 800e424:	bff921fb 	.word	0xbff921fb
 800e428:	8800759c 	.word	0x8800759c
 800e42c:	7e37e43c 	.word	0x7e37e43c
 800e430:	e322da11 	.word	0xe322da11
 800e434:	3f90ad3a 	.word	0x3f90ad3a
 800e438:	24760deb 	.word	0x24760deb
 800e43c:	3fa97b4b 	.word	0x3fa97b4b
 800e440:	a0d03d51 	.word	0xa0d03d51
 800e444:	3fb10d66 	.word	0x3fb10d66
 800e448:	c54c206e 	.word	0xc54c206e
 800e44c:	3fb745cd 	.word	0x3fb745cd
 800e450:	920083ff 	.word	0x920083ff
 800e454:	3fc24924 	.word	0x3fc24924
 800e458:	5555550d 	.word	0x5555550d
 800e45c:	3fd55555 	.word	0x3fd55555
 800e460:	2c6a6c2f 	.word	0x2c6a6c2f
 800e464:	bfa2b444 	.word	0xbfa2b444
 800e468:	52defd9a 	.word	0x52defd9a
 800e46c:	3fadde2d 	.word	0x3fadde2d
 800e470:	af749a6d 	.word	0xaf749a6d
 800e474:	3fb3b0f2 	.word	0x3fb3b0f2
 800e478:	fe231671 	.word	0xfe231671
 800e47c:	3fbc71c6 	.word	0x3fbc71c6
 800e480:	9998ebc4 	.word	0x9998ebc4
 800e484:	3fc99999 	.word	0x3fc99999
 800e488:	54442d18 	.word	0x54442d18
 800e48c:	3ff921fb 	.word	0x3ff921fb
 800e490:	440fffff 	.word	0x440fffff
 800e494:	7ff00000 	.word	0x7ff00000
 800e498:	3fdbffff 	.word	0x3fdbffff
 800e49c:	3ff00000 	.word	0x3ff00000
 800e4a0:	3ff2ffff 	.word	0x3ff2ffff
 800e4a4:	40038000 	.word	0x40038000
 800e4a8:	3ff80000 	.word	0x3ff80000
 800e4ac:	bff00000 	.word	0xbff00000
 800e4b0:	08013120 	.word	0x08013120
 800e4b4:	08013100 	.word	0x08013100

0800e4b8 <fabs>:
 800e4b8:	ec51 0b10 	vmov	r0, r1, d0
 800e4bc:	ee10 2a10 	vmov	r2, s0
 800e4c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e4c4:	ec43 2b10 	vmov	d0, r2, r3
 800e4c8:	4770      	bx	lr
	...

0800e4cc <realloc>:
 800e4cc:	4b02      	ldr	r3, [pc, #8]	; (800e4d8 <realloc+0xc>)
 800e4ce:	460a      	mov	r2, r1
 800e4d0:	4601      	mov	r1, r0
 800e4d2:	6818      	ldr	r0, [r3, #0]
 800e4d4:	f000 b802 	b.w	800e4dc <_realloc_r>
 800e4d8:	20000078 	.word	0x20000078

0800e4dc <_realloc_r>:
 800e4dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	4614      	mov	r4, r2
 800e4e4:	460e      	mov	r6, r1
 800e4e6:	b921      	cbnz	r1, 800e4f2 <_realloc_r+0x16>
 800e4e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4ec:	4611      	mov	r1, r2
 800e4ee:	f001 bf45 	b.w	801037c <_malloc_r>
 800e4f2:	b92a      	cbnz	r2, 800e500 <_realloc_r+0x24>
 800e4f4:	f001 fece 	bl	8010294 <_free_r>
 800e4f8:	4625      	mov	r5, r4
 800e4fa:	4628      	mov	r0, r5
 800e4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e500:	f002 fc75 	bl	8010dee <_malloc_usable_size_r>
 800e504:	4284      	cmp	r4, r0
 800e506:	4607      	mov	r7, r0
 800e508:	d802      	bhi.n	800e510 <_realloc_r+0x34>
 800e50a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e50e:	d812      	bhi.n	800e536 <_realloc_r+0x5a>
 800e510:	4621      	mov	r1, r4
 800e512:	4640      	mov	r0, r8
 800e514:	f001 ff32 	bl	801037c <_malloc_r>
 800e518:	4605      	mov	r5, r0
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d0ed      	beq.n	800e4fa <_realloc_r+0x1e>
 800e51e:	42bc      	cmp	r4, r7
 800e520:	4622      	mov	r2, r4
 800e522:	4631      	mov	r1, r6
 800e524:	bf28      	it	cs
 800e526:	463a      	movcs	r2, r7
 800e528:	f001 f823 	bl	800f572 <memcpy>
 800e52c:	4631      	mov	r1, r6
 800e52e:	4640      	mov	r0, r8
 800e530:	f001 feb0 	bl	8010294 <_free_r>
 800e534:	e7e1      	b.n	800e4fa <_realloc_r+0x1e>
 800e536:	4635      	mov	r5, r6
 800e538:	e7df      	b.n	800e4fa <_realloc_r+0x1e>

0800e53a <__cvt>:
 800e53a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e53e:	ec55 4b10 	vmov	r4, r5, d0
 800e542:	2d00      	cmp	r5, #0
 800e544:	460e      	mov	r6, r1
 800e546:	4619      	mov	r1, r3
 800e548:	462b      	mov	r3, r5
 800e54a:	bfbb      	ittet	lt
 800e54c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e550:	461d      	movlt	r5, r3
 800e552:	2300      	movge	r3, #0
 800e554:	232d      	movlt	r3, #45	; 0x2d
 800e556:	700b      	strb	r3, [r1, #0]
 800e558:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e55a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e55e:	4691      	mov	r9, r2
 800e560:	f023 0820 	bic.w	r8, r3, #32
 800e564:	bfbc      	itt	lt
 800e566:	4622      	movlt	r2, r4
 800e568:	4614      	movlt	r4, r2
 800e56a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e56e:	d005      	beq.n	800e57c <__cvt+0x42>
 800e570:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e574:	d100      	bne.n	800e578 <__cvt+0x3e>
 800e576:	3601      	adds	r6, #1
 800e578:	2102      	movs	r1, #2
 800e57a:	e000      	b.n	800e57e <__cvt+0x44>
 800e57c:	2103      	movs	r1, #3
 800e57e:	ab03      	add	r3, sp, #12
 800e580:	9301      	str	r3, [sp, #4]
 800e582:	ab02      	add	r3, sp, #8
 800e584:	9300      	str	r3, [sp, #0]
 800e586:	ec45 4b10 	vmov	d0, r4, r5
 800e58a:	4653      	mov	r3, sl
 800e58c:	4632      	mov	r2, r6
 800e58e:	f001 f88f 	bl	800f6b0 <_dtoa_r>
 800e592:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e596:	4607      	mov	r7, r0
 800e598:	d102      	bne.n	800e5a0 <__cvt+0x66>
 800e59a:	f019 0f01 	tst.w	r9, #1
 800e59e:	d022      	beq.n	800e5e6 <__cvt+0xac>
 800e5a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e5a4:	eb07 0906 	add.w	r9, r7, r6
 800e5a8:	d110      	bne.n	800e5cc <__cvt+0x92>
 800e5aa:	783b      	ldrb	r3, [r7, #0]
 800e5ac:	2b30      	cmp	r3, #48	; 0x30
 800e5ae:	d10a      	bne.n	800e5c6 <__cvt+0x8c>
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	f7f2 faa6 	bl	8000b08 <__aeabi_dcmpeq>
 800e5bc:	b918      	cbnz	r0, 800e5c6 <__cvt+0x8c>
 800e5be:	f1c6 0601 	rsb	r6, r6, #1
 800e5c2:	f8ca 6000 	str.w	r6, [sl]
 800e5c6:	f8da 3000 	ldr.w	r3, [sl]
 800e5ca:	4499      	add	r9, r3
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	4620      	mov	r0, r4
 800e5d2:	4629      	mov	r1, r5
 800e5d4:	f7f2 fa98 	bl	8000b08 <__aeabi_dcmpeq>
 800e5d8:	b108      	cbz	r0, 800e5de <__cvt+0xa4>
 800e5da:	f8cd 900c 	str.w	r9, [sp, #12]
 800e5de:	2230      	movs	r2, #48	; 0x30
 800e5e0:	9b03      	ldr	r3, [sp, #12]
 800e5e2:	454b      	cmp	r3, r9
 800e5e4:	d307      	bcc.n	800e5f6 <__cvt+0xbc>
 800e5e6:	9b03      	ldr	r3, [sp, #12]
 800e5e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5ea:	1bdb      	subs	r3, r3, r7
 800e5ec:	4638      	mov	r0, r7
 800e5ee:	6013      	str	r3, [r2, #0]
 800e5f0:	b004      	add	sp, #16
 800e5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5f6:	1c59      	adds	r1, r3, #1
 800e5f8:	9103      	str	r1, [sp, #12]
 800e5fa:	701a      	strb	r2, [r3, #0]
 800e5fc:	e7f0      	b.n	800e5e0 <__cvt+0xa6>

0800e5fe <__exponent>:
 800e5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e600:	4603      	mov	r3, r0
 800e602:	2900      	cmp	r1, #0
 800e604:	bfb8      	it	lt
 800e606:	4249      	neglt	r1, r1
 800e608:	f803 2b02 	strb.w	r2, [r3], #2
 800e60c:	bfb4      	ite	lt
 800e60e:	222d      	movlt	r2, #45	; 0x2d
 800e610:	222b      	movge	r2, #43	; 0x2b
 800e612:	2909      	cmp	r1, #9
 800e614:	7042      	strb	r2, [r0, #1]
 800e616:	dd2a      	ble.n	800e66e <__exponent+0x70>
 800e618:	f10d 0207 	add.w	r2, sp, #7
 800e61c:	4617      	mov	r7, r2
 800e61e:	260a      	movs	r6, #10
 800e620:	4694      	mov	ip, r2
 800e622:	fb91 f5f6 	sdiv	r5, r1, r6
 800e626:	fb06 1415 	mls	r4, r6, r5, r1
 800e62a:	3430      	adds	r4, #48	; 0x30
 800e62c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e630:	460c      	mov	r4, r1
 800e632:	2c63      	cmp	r4, #99	; 0x63
 800e634:	f102 32ff 	add.w	r2, r2, #4294967295
 800e638:	4629      	mov	r1, r5
 800e63a:	dcf1      	bgt.n	800e620 <__exponent+0x22>
 800e63c:	3130      	adds	r1, #48	; 0x30
 800e63e:	f1ac 0402 	sub.w	r4, ip, #2
 800e642:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e646:	1c41      	adds	r1, r0, #1
 800e648:	4622      	mov	r2, r4
 800e64a:	42ba      	cmp	r2, r7
 800e64c:	d30a      	bcc.n	800e664 <__exponent+0x66>
 800e64e:	f10d 0209 	add.w	r2, sp, #9
 800e652:	eba2 020c 	sub.w	r2, r2, ip
 800e656:	42bc      	cmp	r4, r7
 800e658:	bf88      	it	hi
 800e65a:	2200      	movhi	r2, #0
 800e65c:	4413      	add	r3, r2
 800e65e:	1a18      	subs	r0, r3, r0
 800e660:	b003      	add	sp, #12
 800e662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e664:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e668:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e66c:	e7ed      	b.n	800e64a <__exponent+0x4c>
 800e66e:	2330      	movs	r3, #48	; 0x30
 800e670:	3130      	adds	r1, #48	; 0x30
 800e672:	7083      	strb	r3, [r0, #2]
 800e674:	70c1      	strb	r1, [r0, #3]
 800e676:	1d03      	adds	r3, r0, #4
 800e678:	e7f1      	b.n	800e65e <__exponent+0x60>
	...

0800e67c <_printf_float>:
 800e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e680:	ed2d 8b02 	vpush	{d8}
 800e684:	b08d      	sub	sp, #52	; 0x34
 800e686:	460c      	mov	r4, r1
 800e688:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e68c:	4616      	mov	r6, r2
 800e68e:	461f      	mov	r7, r3
 800e690:	4605      	mov	r5, r0
 800e692:	f000 fef7 	bl	800f484 <_localeconv_r>
 800e696:	f8d0 a000 	ldr.w	sl, [r0]
 800e69a:	4650      	mov	r0, sl
 800e69c:	f7f1 fe08 	bl	80002b0 <strlen>
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e6a4:	6823      	ldr	r3, [r4, #0]
 800e6a6:	9305      	str	r3, [sp, #20]
 800e6a8:	f8d8 3000 	ldr.w	r3, [r8]
 800e6ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e6b0:	3307      	adds	r3, #7
 800e6b2:	f023 0307 	bic.w	r3, r3, #7
 800e6b6:	f103 0208 	add.w	r2, r3, #8
 800e6ba:	f8c8 2000 	str.w	r2, [r8]
 800e6be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e6c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e6c6:	9307      	str	r3, [sp, #28]
 800e6c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e6cc:	ee08 0a10 	vmov	s16, r0
 800e6d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e6d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6d8:	4b9e      	ldr	r3, [pc, #632]	; (800e954 <_printf_float+0x2d8>)
 800e6da:	f04f 32ff 	mov.w	r2, #4294967295
 800e6de:	f7f2 fa45 	bl	8000b6c <__aeabi_dcmpun>
 800e6e2:	bb88      	cbnz	r0, 800e748 <_printf_float+0xcc>
 800e6e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6e8:	4b9a      	ldr	r3, [pc, #616]	; (800e954 <_printf_float+0x2d8>)
 800e6ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e6ee:	f7f2 fa1f 	bl	8000b30 <__aeabi_dcmple>
 800e6f2:	bb48      	cbnz	r0, 800e748 <_printf_float+0xcc>
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	4640      	mov	r0, r8
 800e6fa:	4649      	mov	r1, r9
 800e6fc:	f7f2 fa0e 	bl	8000b1c <__aeabi_dcmplt>
 800e700:	b110      	cbz	r0, 800e708 <_printf_float+0x8c>
 800e702:	232d      	movs	r3, #45	; 0x2d
 800e704:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e708:	4a93      	ldr	r2, [pc, #588]	; (800e958 <_printf_float+0x2dc>)
 800e70a:	4b94      	ldr	r3, [pc, #592]	; (800e95c <_printf_float+0x2e0>)
 800e70c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e710:	bf94      	ite	ls
 800e712:	4690      	movls	r8, r2
 800e714:	4698      	movhi	r8, r3
 800e716:	2303      	movs	r3, #3
 800e718:	6123      	str	r3, [r4, #16]
 800e71a:	9b05      	ldr	r3, [sp, #20]
 800e71c:	f023 0304 	bic.w	r3, r3, #4
 800e720:	6023      	str	r3, [r4, #0]
 800e722:	f04f 0900 	mov.w	r9, #0
 800e726:	9700      	str	r7, [sp, #0]
 800e728:	4633      	mov	r3, r6
 800e72a:	aa0b      	add	r2, sp, #44	; 0x2c
 800e72c:	4621      	mov	r1, r4
 800e72e:	4628      	mov	r0, r5
 800e730:	f000 f9da 	bl	800eae8 <_printf_common>
 800e734:	3001      	adds	r0, #1
 800e736:	f040 8090 	bne.w	800e85a <_printf_float+0x1de>
 800e73a:	f04f 30ff 	mov.w	r0, #4294967295
 800e73e:	b00d      	add	sp, #52	; 0x34
 800e740:	ecbd 8b02 	vpop	{d8}
 800e744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e748:	4642      	mov	r2, r8
 800e74a:	464b      	mov	r3, r9
 800e74c:	4640      	mov	r0, r8
 800e74e:	4649      	mov	r1, r9
 800e750:	f7f2 fa0c 	bl	8000b6c <__aeabi_dcmpun>
 800e754:	b140      	cbz	r0, 800e768 <_printf_float+0xec>
 800e756:	464b      	mov	r3, r9
 800e758:	2b00      	cmp	r3, #0
 800e75a:	bfbc      	itt	lt
 800e75c:	232d      	movlt	r3, #45	; 0x2d
 800e75e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e762:	4a7f      	ldr	r2, [pc, #508]	; (800e960 <_printf_float+0x2e4>)
 800e764:	4b7f      	ldr	r3, [pc, #508]	; (800e964 <_printf_float+0x2e8>)
 800e766:	e7d1      	b.n	800e70c <_printf_float+0x90>
 800e768:	6863      	ldr	r3, [r4, #4]
 800e76a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e76e:	9206      	str	r2, [sp, #24]
 800e770:	1c5a      	adds	r2, r3, #1
 800e772:	d13f      	bne.n	800e7f4 <_printf_float+0x178>
 800e774:	2306      	movs	r3, #6
 800e776:	6063      	str	r3, [r4, #4]
 800e778:	9b05      	ldr	r3, [sp, #20]
 800e77a:	6861      	ldr	r1, [r4, #4]
 800e77c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e780:	2300      	movs	r3, #0
 800e782:	9303      	str	r3, [sp, #12]
 800e784:	ab0a      	add	r3, sp, #40	; 0x28
 800e786:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e78a:	ab09      	add	r3, sp, #36	; 0x24
 800e78c:	ec49 8b10 	vmov	d0, r8, r9
 800e790:	9300      	str	r3, [sp, #0]
 800e792:	6022      	str	r2, [r4, #0]
 800e794:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e798:	4628      	mov	r0, r5
 800e79a:	f7ff fece 	bl	800e53a <__cvt>
 800e79e:	9b06      	ldr	r3, [sp, #24]
 800e7a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7a2:	2b47      	cmp	r3, #71	; 0x47
 800e7a4:	4680      	mov	r8, r0
 800e7a6:	d108      	bne.n	800e7ba <_printf_float+0x13e>
 800e7a8:	1cc8      	adds	r0, r1, #3
 800e7aa:	db02      	blt.n	800e7b2 <_printf_float+0x136>
 800e7ac:	6863      	ldr	r3, [r4, #4]
 800e7ae:	4299      	cmp	r1, r3
 800e7b0:	dd41      	ble.n	800e836 <_printf_float+0x1ba>
 800e7b2:	f1ab 0302 	sub.w	r3, fp, #2
 800e7b6:	fa5f fb83 	uxtb.w	fp, r3
 800e7ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e7be:	d820      	bhi.n	800e802 <_printf_float+0x186>
 800e7c0:	3901      	subs	r1, #1
 800e7c2:	465a      	mov	r2, fp
 800e7c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e7c8:	9109      	str	r1, [sp, #36]	; 0x24
 800e7ca:	f7ff ff18 	bl	800e5fe <__exponent>
 800e7ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7d0:	1813      	adds	r3, r2, r0
 800e7d2:	2a01      	cmp	r2, #1
 800e7d4:	4681      	mov	r9, r0
 800e7d6:	6123      	str	r3, [r4, #16]
 800e7d8:	dc02      	bgt.n	800e7e0 <_printf_float+0x164>
 800e7da:	6822      	ldr	r2, [r4, #0]
 800e7dc:	07d2      	lsls	r2, r2, #31
 800e7de:	d501      	bpl.n	800e7e4 <_printf_float+0x168>
 800e7e0:	3301      	adds	r3, #1
 800e7e2:	6123      	str	r3, [r4, #16]
 800e7e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d09c      	beq.n	800e726 <_printf_float+0xaa>
 800e7ec:	232d      	movs	r3, #45	; 0x2d
 800e7ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7f2:	e798      	b.n	800e726 <_printf_float+0xaa>
 800e7f4:	9a06      	ldr	r2, [sp, #24]
 800e7f6:	2a47      	cmp	r2, #71	; 0x47
 800e7f8:	d1be      	bne.n	800e778 <_printf_float+0xfc>
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1bc      	bne.n	800e778 <_printf_float+0xfc>
 800e7fe:	2301      	movs	r3, #1
 800e800:	e7b9      	b.n	800e776 <_printf_float+0xfa>
 800e802:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e806:	d118      	bne.n	800e83a <_printf_float+0x1be>
 800e808:	2900      	cmp	r1, #0
 800e80a:	6863      	ldr	r3, [r4, #4]
 800e80c:	dd0b      	ble.n	800e826 <_printf_float+0x1aa>
 800e80e:	6121      	str	r1, [r4, #16]
 800e810:	b913      	cbnz	r3, 800e818 <_printf_float+0x19c>
 800e812:	6822      	ldr	r2, [r4, #0]
 800e814:	07d0      	lsls	r0, r2, #31
 800e816:	d502      	bpl.n	800e81e <_printf_float+0x1a2>
 800e818:	3301      	adds	r3, #1
 800e81a:	440b      	add	r3, r1
 800e81c:	6123      	str	r3, [r4, #16]
 800e81e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e820:	f04f 0900 	mov.w	r9, #0
 800e824:	e7de      	b.n	800e7e4 <_printf_float+0x168>
 800e826:	b913      	cbnz	r3, 800e82e <_printf_float+0x1b2>
 800e828:	6822      	ldr	r2, [r4, #0]
 800e82a:	07d2      	lsls	r2, r2, #31
 800e82c:	d501      	bpl.n	800e832 <_printf_float+0x1b6>
 800e82e:	3302      	adds	r3, #2
 800e830:	e7f4      	b.n	800e81c <_printf_float+0x1a0>
 800e832:	2301      	movs	r3, #1
 800e834:	e7f2      	b.n	800e81c <_printf_float+0x1a0>
 800e836:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e83a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e83c:	4299      	cmp	r1, r3
 800e83e:	db05      	blt.n	800e84c <_printf_float+0x1d0>
 800e840:	6823      	ldr	r3, [r4, #0]
 800e842:	6121      	str	r1, [r4, #16]
 800e844:	07d8      	lsls	r0, r3, #31
 800e846:	d5ea      	bpl.n	800e81e <_printf_float+0x1a2>
 800e848:	1c4b      	adds	r3, r1, #1
 800e84a:	e7e7      	b.n	800e81c <_printf_float+0x1a0>
 800e84c:	2900      	cmp	r1, #0
 800e84e:	bfd4      	ite	le
 800e850:	f1c1 0202 	rsble	r2, r1, #2
 800e854:	2201      	movgt	r2, #1
 800e856:	4413      	add	r3, r2
 800e858:	e7e0      	b.n	800e81c <_printf_float+0x1a0>
 800e85a:	6823      	ldr	r3, [r4, #0]
 800e85c:	055a      	lsls	r2, r3, #21
 800e85e:	d407      	bmi.n	800e870 <_printf_float+0x1f4>
 800e860:	6923      	ldr	r3, [r4, #16]
 800e862:	4642      	mov	r2, r8
 800e864:	4631      	mov	r1, r6
 800e866:	4628      	mov	r0, r5
 800e868:	47b8      	blx	r7
 800e86a:	3001      	adds	r0, #1
 800e86c:	d12c      	bne.n	800e8c8 <_printf_float+0x24c>
 800e86e:	e764      	b.n	800e73a <_printf_float+0xbe>
 800e870:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e874:	f240 80e0 	bls.w	800ea38 <_printf_float+0x3bc>
 800e878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e87c:	2200      	movs	r2, #0
 800e87e:	2300      	movs	r3, #0
 800e880:	f7f2 f942 	bl	8000b08 <__aeabi_dcmpeq>
 800e884:	2800      	cmp	r0, #0
 800e886:	d034      	beq.n	800e8f2 <_printf_float+0x276>
 800e888:	4a37      	ldr	r2, [pc, #220]	; (800e968 <_printf_float+0x2ec>)
 800e88a:	2301      	movs	r3, #1
 800e88c:	4631      	mov	r1, r6
 800e88e:	4628      	mov	r0, r5
 800e890:	47b8      	blx	r7
 800e892:	3001      	adds	r0, #1
 800e894:	f43f af51 	beq.w	800e73a <_printf_float+0xbe>
 800e898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e89c:	429a      	cmp	r2, r3
 800e89e:	db02      	blt.n	800e8a6 <_printf_float+0x22a>
 800e8a0:	6823      	ldr	r3, [r4, #0]
 800e8a2:	07d8      	lsls	r0, r3, #31
 800e8a4:	d510      	bpl.n	800e8c8 <_printf_float+0x24c>
 800e8a6:	ee18 3a10 	vmov	r3, s16
 800e8aa:	4652      	mov	r2, sl
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	47b8      	blx	r7
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	f43f af41 	beq.w	800e73a <_printf_float+0xbe>
 800e8b8:	f04f 0800 	mov.w	r8, #0
 800e8bc:	f104 091a 	add.w	r9, r4, #26
 800e8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8c2:	3b01      	subs	r3, #1
 800e8c4:	4543      	cmp	r3, r8
 800e8c6:	dc09      	bgt.n	800e8dc <_printf_float+0x260>
 800e8c8:	6823      	ldr	r3, [r4, #0]
 800e8ca:	079b      	lsls	r3, r3, #30
 800e8cc:	f100 8107 	bmi.w	800eade <_printf_float+0x462>
 800e8d0:	68e0      	ldr	r0, [r4, #12]
 800e8d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8d4:	4298      	cmp	r0, r3
 800e8d6:	bfb8      	it	lt
 800e8d8:	4618      	movlt	r0, r3
 800e8da:	e730      	b.n	800e73e <_printf_float+0xc2>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	464a      	mov	r2, r9
 800e8e0:	4631      	mov	r1, r6
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	47b8      	blx	r7
 800e8e6:	3001      	adds	r0, #1
 800e8e8:	f43f af27 	beq.w	800e73a <_printf_float+0xbe>
 800e8ec:	f108 0801 	add.w	r8, r8, #1
 800e8f0:	e7e6      	b.n	800e8c0 <_printf_float+0x244>
 800e8f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	dc39      	bgt.n	800e96c <_printf_float+0x2f0>
 800e8f8:	4a1b      	ldr	r2, [pc, #108]	; (800e968 <_printf_float+0x2ec>)
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	4631      	mov	r1, r6
 800e8fe:	4628      	mov	r0, r5
 800e900:	47b8      	blx	r7
 800e902:	3001      	adds	r0, #1
 800e904:	f43f af19 	beq.w	800e73a <_printf_float+0xbe>
 800e908:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e90c:	4313      	orrs	r3, r2
 800e90e:	d102      	bne.n	800e916 <_printf_float+0x29a>
 800e910:	6823      	ldr	r3, [r4, #0]
 800e912:	07d9      	lsls	r1, r3, #31
 800e914:	d5d8      	bpl.n	800e8c8 <_printf_float+0x24c>
 800e916:	ee18 3a10 	vmov	r3, s16
 800e91a:	4652      	mov	r2, sl
 800e91c:	4631      	mov	r1, r6
 800e91e:	4628      	mov	r0, r5
 800e920:	47b8      	blx	r7
 800e922:	3001      	adds	r0, #1
 800e924:	f43f af09 	beq.w	800e73a <_printf_float+0xbe>
 800e928:	f04f 0900 	mov.w	r9, #0
 800e92c:	f104 0a1a 	add.w	sl, r4, #26
 800e930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e932:	425b      	negs	r3, r3
 800e934:	454b      	cmp	r3, r9
 800e936:	dc01      	bgt.n	800e93c <_printf_float+0x2c0>
 800e938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e93a:	e792      	b.n	800e862 <_printf_float+0x1e6>
 800e93c:	2301      	movs	r3, #1
 800e93e:	4652      	mov	r2, sl
 800e940:	4631      	mov	r1, r6
 800e942:	4628      	mov	r0, r5
 800e944:	47b8      	blx	r7
 800e946:	3001      	adds	r0, #1
 800e948:	f43f aef7 	beq.w	800e73a <_printf_float+0xbe>
 800e94c:	f109 0901 	add.w	r9, r9, #1
 800e950:	e7ee      	b.n	800e930 <_printf_float+0x2b4>
 800e952:	bf00      	nop
 800e954:	7fefffff 	.word	0x7fefffff
 800e958:	08013140 	.word	0x08013140
 800e95c:	08013144 	.word	0x08013144
 800e960:	08013148 	.word	0x08013148
 800e964:	0801314c 	.word	0x0801314c
 800e968:	08013150 	.word	0x08013150
 800e96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e96e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e970:	429a      	cmp	r2, r3
 800e972:	bfa8      	it	ge
 800e974:	461a      	movge	r2, r3
 800e976:	2a00      	cmp	r2, #0
 800e978:	4691      	mov	r9, r2
 800e97a:	dc37      	bgt.n	800e9ec <_printf_float+0x370>
 800e97c:	f04f 0b00 	mov.w	fp, #0
 800e980:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e984:	f104 021a 	add.w	r2, r4, #26
 800e988:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e98a:	9305      	str	r3, [sp, #20]
 800e98c:	eba3 0309 	sub.w	r3, r3, r9
 800e990:	455b      	cmp	r3, fp
 800e992:	dc33      	bgt.n	800e9fc <_printf_float+0x380>
 800e994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e998:	429a      	cmp	r2, r3
 800e99a:	db3b      	blt.n	800ea14 <_printf_float+0x398>
 800e99c:	6823      	ldr	r3, [r4, #0]
 800e99e:	07da      	lsls	r2, r3, #31
 800e9a0:	d438      	bmi.n	800ea14 <_printf_float+0x398>
 800e9a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e9a6:	eba2 0903 	sub.w	r9, r2, r3
 800e9aa:	9b05      	ldr	r3, [sp, #20]
 800e9ac:	1ad2      	subs	r2, r2, r3
 800e9ae:	4591      	cmp	r9, r2
 800e9b0:	bfa8      	it	ge
 800e9b2:	4691      	movge	r9, r2
 800e9b4:	f1b9 0f00 	cmp.w	r9, #0
 800e9b8:	dc35      	bgt.n	800ea26 <_printf_float+0x3aa>
 800e9ba:	f04f 0800 	mov.w	r8, #0
 800e9be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e9c2:	f104 0a1a 	add.w	sl, r4, #26
 800e9c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9ca:	1a9b      	subs	r3, r3, r2
 800e9cc:	eba3 0309 	sub.w	r3, r3, r9
 800e9d0:	4543      	cmp	r3, r8
 800e9d2:	f77f af79 	ble.w	800e8c8 <_printf_float+0x24c>
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	4652      	mov	r2, sl
 800e9da:	4631      	mov	r1, r6
 800e9dc:	4628      	mov	r0, r5
 800e9de:	47b8      	blx	r7
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	f43f aeaa 	beq.w	800e73a <_printf_float+0xbe>
 800e9e6:	f108 0801 	add.w	r8, r8, #1
 800e9ea:	e7ec      	b.n	800e9c6 <_printf_float+0x34a>
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	4631      	mov	r1, r6
 800e9f0:	4642      	mov	r2, r8
 800e9f2:	4628      	mov	r0, r5
 800e9f4:	47b8      	blx	r7
 800e9f6:	3001      	adds	r0, #1
 800e9f8:	d1c0      	bne.n	800e97c <_printf_float+0x300>
 800e9fa:	e69e      	b.n	800e73a <_printf_float+0xbe>
 800e9fc:	2301      	movs	r3, #1
 800e9fe:	4631      	mov	r1, r6
 800ea00:	4628      	mov	r0, r5
 800ea02:	9205      	str	r2, [sp, #20]
 800ea04:	47b8      	blx	r7
 800ea06:	3001      	adds	r0, #1
 800ea08:	f43f ae97 	beq.w	800e73a <_printf_float+0xbe>
 800ea0c:	9a05      	ldr	r2, [sp, #20]
 800ea0e:	f10b 0b01 	add.w	fp, fp, #1
 800ea12:	e7b9      	b.n	800e988 <_printf_float+0x30c>
 800ea14:	ee18 3a10 	vmov	r3, s16
 800ea18:	4652      	mov	r2, sl
 800ea1a:	4631      	mov	r1, r6
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	47b8      	blx	r7
 800ea20:	3001      	adds	r0, #1
 800ea22:	d1be      	bne.n	800e9a2 <_printf_float+0x326>
 800ea24:	e689      	b.n	800e73a <_printf_float+0xbe>
 800ea26:	9a05      	ldr	r2, [sp, #20]
 800ea28:	464b      	mov	r3, r9
 800ea2a:	4442      	add	r2, r8
 800ea2c:	4631      	mov	r1, r6
 800ea2e:	4628      	mov	r0, r5
 800ea30:	47b8      	blx	r7
 800ea32:	3001      	adds	r0, #1
 800ea34:	d1c1      	bne.n	800e9ba <_printf_float+0x33e>
 800ea36:	e680      	b.n	800e73a <_printf_float+0xbe>
 800ea38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea3a:	2a01      	cmp	r2, #1
 800ea3c:	dc01      	bgt.n	800ea42 <_printf_float+0x3c6>
 800ea3e:	07db      	lsls	r3, r3, #31
 800ea40:	d53a      	bpl.n	800eab8 <_printf_float+0x43c>
 800ea42:	2301      	movs	r3, #1
 800ea44:	4642      	mov	r2, r8
 800ea46:	4631      	mov	r1, r6
 800ea48:	4628      	mov	r0, r5
 800ea4a:	47b8      	blx	r7
 800ea4c:	3001      	adds	r0, #1
 800ea4e:	f43f ae74 	beq.w	800e73a <_printf_float+0xbe>
 800ea52:	ee18 3a10 	vmov	r3, s16
 800ea56:	4652      	mov	r2, sl
 800ea58:	4631      	mov	r1, r6
 800ea5a:	4628      	mov	r0, r5
 800ea5c:	47b8      	blx	r7
 800ea5e:	3001      	adds	r0, #1
 800ea60:	f43f ae6b 	beq.w	800e73a <_printf_float+0xbe>
 800ea64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea68:	2200      	movs	r2, #0
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ea70:	f7f2 f84a 	bl	8000b08 <__aeabi_dcmpeq>
 800ea74:	b9d8      	cbnz	r0, 800eaae <_printf_float+0x432>
 800ea76:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ea7a:	f108 0201 	add.w	r2, r8, #1
 800ea7e:	4631      	mov	r1, r6
 800ea80:	4628      	mov	r0, r5
 800ea82:	47b8      	blx	r7
 800ea84:	3001      	adds	r0, #1
 800ea86:	d10e      	bne.n	800eaa6 <_printf_float+0x42a>
 800ea88:	e657      	b.n	800e73a <_printf_float+0xbe>
 800ea8a:	2301      	movs	r3, #1
 800ea8c:	4652      	mov	r2, sl
 800ea8e:	4631      	mov	r1, r6
 800ea90:	4628      	mov	r0, r5
 800ea92:	47b8      	blx	r7
 800ea94:	3001      	adds	r0, #1
 800ea96:	f43f ae50 	beq.w	800e73a <_printf_float+0xbe>
 800ea9a:	f108 0801 	add.w	r8, r8, #1
 800ea9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaa0:	3b01      	subs	r3, #1
 800eaa2:	4543      	cmp	r3, r8
 800eaa4:	dcf1      	bgt.n	800ea8a <_printf_float+0x40e>
 800eaa6:	464b      	mov	r3, r9
 800eaa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eaac:	e6da      	b.n	800e864 <_printf_float+0x1e8>
 800eaae:	f04f 0800 	mov.w	r8, #0
 800eab2:	f104 0a1a 	add.w	sl, r4, #26
 800eab6:	e7f2      	b.n	800ea9e <_printf_float+0x422>
 800eab8:	2301      	movs	r3, #1
 800eaba:	4642      	mov	r2, r8
 800eabc:	e7df      	b.n	800ea7e <_printf_float+0x402>
 800eabe:	2301      	movs	r3, #1
 800eac0:	464a      	mov	r2, r9
 800eac2:	4631      	mov	r1, r6
 800eac4:	4628      	mov	r0, r5
 800eac6:	47b8      	blx	r7
 800eac8:	3001      	adds	r0, #1
 800eaca:	f43f ae36 	beq.w	800e73a <_printf_float+0xbe>
 800eace:	f108 0801 	add.w	r8, r8, #1
 800ead2:	68e3      	ldr	r3, [r4, #12]
 800ead4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ead6:	1a5b      	subs	r3, r3, r1
 800ead8:	4543      	cmp	r3, r8
 800eada:	dcf0      	bgt.n	800eabe <_printf_float+0x442>
 800eadc:	e6f8      	b.n	800e8d0 <_printf_float+0x254>
 800eade:	f04f 0800 	mov.w	r8, #0
 800eae2:	f104 0919 	add.w	r9, r4, #25
 800eae6:	e7f4      	b.n	800ead2 <_printf_float+0x456>

0800eae8 <_printf_common>:
 800eae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eaec:	4616      	mov	r6, r2
 800eaee:	4699      	mov	r9, r3
 800eaf0:	688a      	ldr	r2, [r1, #8]
 800eaf2:	690b      	ldr	r3, [r1, #16]
 800eaf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eaf8:	4293      	cmp	r3, r2
 800eafa:	bfb8      	it	lt
 800eafc:	4613      	movlt	r3, r2
 800eafe:	6033      	str	r3, [r6, #0]
 800eb00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb04:	4607      	mov	r7, r0
 800eb06:	460c      	mov	r4, r1
 800eb08:	b10a      	cbz	r2, 800eb0e <_printf_common+0x26>
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	6033      	str	r3, [r6, #0]
 800eb0e:	6823      	ldr	r3, [r4, #0]
 800eb10:	0699      	lsls	r1, r3, #26
 800eb12:	bf42      	ittt	mi
 800eb14:	6833      	ldrmi	r3, [r6, #0]
 800eb16:	3302      	addmi	r3, #2
 800eb18:	6033      	strmi	r3, [r6, #0]
 800eb1a:	6825      	ldr	r5, [r4, #0]
 800eb1c:	f015 0506 	ands.w	r5, r5, #6
 800eb20:	d106      	bne.n	800eb30 <_printf_common+0x48>
 800eb22:	f104 0a19 	add.w	sl, r4, #25
 800eb26:	68e3      	ldr	r3, [r4, #12]
 800eb28:	6832      	ldr	r2, [r6, #0]
 800eb2a:	1a9b      	subs	r3, r3, r2
 800eb2c:	42ab      	cmp	r3, r5
 800eb2e:	dc26      	bgt.n	800eb7e <_printf_common+0x96>
 800eb30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800eb34:	1e13      	subs	r3, r2, #0
 800eb36:	6822      	ldr	r2, [r4, #0]
 800eb38:	bf18      	it	ne
 800eb3a:	2301      	movne	r3, #1
 800eb3c:	0692      	lsls	r2, r2, #26
 800eb3e:	d42b      	bmi.n	800eb98 <_printf_common+0xb0>
 800eb40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb44:	4649      	mov	r1, r9
 800eb46:	4638      	mov	r0, r7
 800eb48:	47c0      	blx	r8
 800eb4a:	3001      	adds	r0, #1
 800eb4c:	d01e      	beq.n	800eb8c <_printf_common+0xa4>
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	6922      	ldr	r2, [r4, #16]
 800eb52:	f003 0306 	and.w	r3, r3, #6
 800eb56:	2b04      	cmp	r3, #4
 800eb58:	bf02      	ittt	eq
 800eb5a:	68e5      	ldreq	r5, [r4, #12]
 800eb5c:	6833      	ldreq	r3, [r6, #0]
 800eb5e:	1aed      	subeq	r5, r5, r3
 800eb60:	68a3      	ldr	r3, [r4, #8]
 800eb62:	bf0c      	ite	eq
 800eb64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eb68:	2500      	movne	r5, #0
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	bfc4      	itt	gt
 800eb6e:	1a9b      	subgt	r3, r3, r2
 800eb70:	18ed      	addgt	r5, r5, r3
 800eb72:	2600      	movs	r6, #0
 800eb74:	341a      	adds	r4, #26
 800eb76:	42b5      	cmp	r5, r6
 800eb78:	d11a      	bne.n	800ebb0 <_printf_common+0xc8>
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	e008      	b.n	800eb90 <_printf_common+0xa8>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	4652      	mov	r2, sl
 800eb82:	4649      	mov	r1, r9
 800eb84:	4638      	mov	r0, r7
 800eb86:	47c0      	blx	r8
 800eb88:	3001      	adds	r0, #1
 800eb8a:	d103      	bne.n	800eb94 <_printf_common+0xac>
 800eb8c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb94:	3501      	adds	r5, #1
 800eb96:	e7c6      	b.n	800eb26 <_printf_common+0x3e>
 800eb98:	18e1      	adds	r1, r4, r3
 800eb9a:	1c5a      	adds	r2, r3, #1
 800eb9c:	2030      	movs	r0, #48	; 0x30
 800eb9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eba2:	4422      	add	r2, r4
 800eba4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eba8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebac:	3302      	adds	r3, #2
 800ebae:	e7c7      	b.n	800eb40 <_printf_common+0x58>
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	4622      	mov	r2, r4
 800ebb4:	4649      	mov	r1, r9
 800ebb6:	4638      	mov	r0, r7
 800ebb8:	47c0      	blx	r8
 800ebba:	3001      	adds	r0, #1
 800ebbc:	d0e6      	beq.n	800eb8c <_printf_common+0xa4>
 800ebbe:	3601      	adds	r6, #1
 800ebc0:	e7d9      	b.n	800eb76 <_printf_common+0x8e>
	...

0800ebc4 <_printf_i>:
 800ebc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ebc8:	7e0f      	ldrb	r7, [r1, #24]
 800ebca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ebcc:	2f78      	cmp	r7, #120	; 0x78
 800ebce:	4691      	mov	r9, r2
 800ebd0:	4680      	mov	r8, r0
 800ebd2:	460c      	mov	r4, r1
 800ebd4:	469a      	mov	sl, r3
 800ebd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ebda:	d807      	bhi.n	800ebec <_printf_i+0x28>
 800ebdc:	2f62      	cmp	r7, #98	; 0x62
 800ebde:	d80a      	bhi.n	800ebf6 <_printf_i+0x32>
 800ebe0:	2f00      	cmp	r7, #0
 800ebe2:	f000 80d4 	beq.w	800ed8e <_printf_i+0x1ca>
 800ebe6:	2f58      	cmp	r7, #88	; 0x58
 800ebe8:	f000 80c0 	beq.w	800ed6c <_printf_i+0x1a8>
 800ebec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ebf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ebf4:	e03a      	b.n	800ec6c <_printf_i+0xa8>
 800ebf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ebfa:	2b15      	cmp	r3, #21
 800ebfc:	d8f6      	bhi.n	800ebec <_printf_i+0x28>
 800ebfe:	a101      	add	r1, pc, #4	; (adr r1, 800ec04 <_printf_i+0x40>)
 800ec00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ec04:	0800ec5d 	.word	0x0800ec5d
 800ec08:	0800ec71 	.word	0x0800ec71
 800ec0c:	0800ebed 	.word	0x0800ebed
 800ec10:	0800ebed 	.word	0x0800ebed
 800ec14:	0800ebed 	.word	0x0800ebed
 800ec18:	0800ebed 	.word	0x0800ebed
 800ec1c:	0800ec71 	.word	0x0800ec71
 800ec20:	0800ebed 	.word	0x0800ebed
 800ec24:	0800ebed 	.word	0x0800ebed
 800ec28:	0800ebed 	.word	0x0800ebed
 800ec2c:	0800ebed 	.word	0x0800ebed
 800ec30:	0800ed75 	.word	0x0800ed75
 800ec34:	0800ec9d 	.word	0x0800ec9d
 800ec38:	0800ed2f 	.word	0x0800ed2f
 800ec3c:	0800ebed 	.word	0x0800ebed
 800ec40:	0800ebed 	.word	0x0800ebed
 800ec44:	0800ed97 	.word	0x0800ed97
 800ec48:	0800ebed 	.word	0x0800ebed
 800ec4c:	0800ec9d 	.word	0x0800ec9d
 800ec50:	0800ebed 	.word	0x0800ebed
 800ec54:	0800ebed 	.word	0x0800ebed
 800ec58:	0800ed37 	.word	0x0800ed37
 800ec5c:	682b      	ldr	r3, [r5, #0]
 800ec5e:	1d1a      	adds	r2, r3, #4
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	602a      	str	r2, [r5, #0]
 800ec64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	e09f      	b.n	800edb0 <_printf_i+0x1ec>
 800ec70:	6820      	ldr	r0, [r4, #0]
 800ec72:	682b      	ldr	r3, [r5, #0]
 800ec74:	0607      	lsls	r7, r0, #24
 800ec76:	f103 0104 	add.w	r1, r3, #4
 800ec7a:	6029      	str	r1, [r5, #0]
 800ec7c:	d501      	bpl.n	800ec82 <_printf_i+0xbe>
 800ec7e:	681e      	ldr	r6, [r3, #0]
 800ec80:	e003      	b.n	800ec8a <_printf_i+0xc6>
 800ec82:	0646      	lsls	r6, r0, #25
 800ec84:	d5fb      	bpl.n	800ec7e <_printf_i+0xba>
 800ec86:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ec8a:	2e00      	cmp	r6, #0
 800ec8c:	da03      	bge.n	800ec96 <_printf_i+0xd2>
 800ec8e:	232d      	movs	r3, #45	; 0x2d
 800ec90:	4276      	negs	r6, r6
 800ec92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec96:	485a      	ldr	r0, [pc, #360]	; (800ee00 <_printf_i+0x23c>)
 800ec98:	230a      	movs	r3, #10
 800ec9a:	e012      	b.n	800ecc2 <_printf_i+0xfe>
 800ec9c:	682b      	ldr	r3, [r5, #0]
 800ec9e:	6820      	ldr	r0, [r4, #0]
 800eca0:	1d19      	adds	r1, r3, #4
 800eca2:	6029      	str	r1, [r5, #0]
 800eca4:	0605      	lsls	r5, r0, #24
 800eca6:	d501      	bpl.n	800ecac <_printf_i+0xe8>
 800eca8:	681e      	ldr	r6, [r3, #0]
 800ecaa:	e002      	b.n	800ecb2 <_printf_i+0xee>
 800ecac:	0641      	lsls	r1, r0, #25
 800ecae:	d5fb      	bpl.n	800eca8 <_printf_i+0xe4>
 800ecb0:	881e      	ldrh	r6, [r3, #0]
 800ecb2:	4853      	ldr	r0, [pc, #332]	; (800ee00 <_printf_i+0x23c>)
 800ecb4:	2f6f      	cmp	r7, #111	; 0x6f
 800ecb6:	bf0c      	ite	eq
 800ecb8:	2308      	moveq	r3, #8
 800ecba:	230a      	movne	r3, #10
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ecc2:	6865      	ldr	r5, [r4, #4]
 800ecc4:	60a5      	str	r5, [r4, #8]
 800ecc6:	2d00      	cmp	r5, #0
 800ecc8:	bfa2      	ittt	ge
 800ecca:	6821      	ldrge	r1, [r4, #0]
 800eccc:	f021 0104 	bicge.w	r1, r1, #4
 800ecd0:	6021      	strge	r1, [r4, #0]
 800ecd2:	b90e      	cbnz	r6, 800ecd8 <_printf_i+0x114>
 800ecd4:	2d00      	cmp	r5, #0
 800ecd6:	d04b      	beq.n	800ed70 <_printf_i+0x1ac>
 800ecd8:	4615      	mov	r5, r2
 800ecda:	fbb6 f1f3 	udiv	r1, r6, r3
 800ecde:	fb03 6711 	mls	r7, r3, r1, r6
 800ece2:	5dc7      	ldrb	r7, [r0, r7]
 800ece4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ece8:	4637      	mov	r7, r6
 800ecea:	42bb      	cmp	r3, r7
 800ecec:	460e      	mov	r6, r1
 800ecee:	d9f4      	bls.n	800ecda <_printf_i+0x116>
 800ecf0:	2b08      	cmp	r3, #8
 800ecf2:	d10b      	bne.n	800ed0c <_printf_i+0x148>
 800ecf4:	6823      	ldr	r3, [r4, #0]
 800ecf6:	07de      	lsls	r6, r3, #31
 800ecf8:	d508      	bpl.n	800ed0c <_printf_i+0x148>
 800ecfa:	6923      	ldr	r3, [r4, #16]
 800ecfc:	6861      	ldr	r1, [r4, #4]
 800ecfe:	4299      	cmp	r1, r3
 800ed00:	bfde      	ittt	le
 800ed02:	2330      	movle	r3, #48	; 0x30
 800ed04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed08:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed0c:	1b52      	subs	r2, r2, r5
 800ed0e:	6122      	str	r2, [r4, #16]
 800ed10:	f8cd a000 	str.w	sl, [sp]
 800ed14:	464b      	mov	r3, r9
 800ed16:	aa03      	add	r2, sp, #12
 800ed18:	4621      	mov	r1, r4
 800ed1a:	4640      	mov	r0, r8
 800ed1c:	f7ff fee4 	bl	800eae8 <_printf_common>
 800ed20:	3001      	adds	r0, #1
 800ed22:	d14a      	bne.n	800edba <_printf_i+0x1f6>
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295
 800ed28:	b004      	add	sp, #16
 800ed2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed2e:	6823      	ldr	r3, [r4, #0]
 800ed30:	f043 0320 	orr.w	r3, r3, #32
 800ed34:	6023      	str	r3, [r4, #0]
 800ed36:	4833      	ldr	r0, [pc, #204]	; (800ee04 <_printf_i+0x240>)
 800ed38:	2778      	movs	r7, #120	; 0x78
 800ed3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ed3e:	6823      	ldr	r3, [r4, #0]
 800ed40:	6829      	ldr	r1, [r5, #0]
 800ed42:	061f      	lsls	r7, r3, #24
 800ed44:	f851 6b04 	ldr.w	r6, [r1], #4
 800ed48:	d402      	bmi.n	800ed50 <_printf_i+0x18c>
 800ed4a:	065f      	lsls	r7, r3, #25
 800ed4c:	bf48      	it	mi
 800ed4e:	b2b6      	uxthmi	r6, r6
 800ed50:	07df      	lsls	r7, r3, #31
 800ed52:	bf48      	it	mi
 800ed54:	f043 0320 	orrmi.w	r3, r3, #32
 800ed58:	6029      	str	r1, [r5, #0]
 800ed5a:	bf48      	it	mi
 800ed5c:	6023      	strmi	r3, [r4, #0]
 800ed5e:	b91e      	cbnz	r6, 800ed68 <_printf_i+0x1a4>
 800ed60:	6823      	ldr	r3, [r4, #0]
 800ed62:	f023 0320 	bic.w	r3, r3, #32
 800ed66:	6023      	str	r3, [r4, #0]
 800ed68:	2310      	movs	r3, #16
 800ed6a:	e7a7      	b.n	800ecbc <_printf_i+0xf8>
 800ed6c:	4824      	ldr	r0, [pc, #144]	; (800ee00 <_printf_i+0x23c>)
 800ed6e:	e7e4      	b.n	800ed3a <_printf_i+0x176>
 800ed70:	4615      	mov	r5, r2
 800ed72:	e7bd      	b.n	800ecf0 <_printf_i+0x12c>
 800ed74:	682b      	ldr	r3, [r5, #0]
 800ed76:	6826      	ldr	r6, [r4, #0]
 800ed78:	6961      	ldr	r1, [r4, #20]
 800ed7a:	1d18      	adds	r0, r3, #4
 800ed7c:	6028      	str	r0, [r5, #0]
 800ed7e:	0635      	lsls	r5, r6, #24
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	d501      	bpl.n	800ed88 <_printf_i+0x1c4>
 800ed84:	6019      	str	r1, [r3, #0]
 800ed86:	e002      	b.n	800ed8e <_printf_i+0x1ca>
 800ed88:	0670      	lsls	r0, r6, #25
 800ed8a:	d5fb      	bpl.n	800ed84 <_printf_i+0x1c0>
 800ed8c:	8019      	strh	r1, [r3, #0]
 800ed8e:	2300      	movs	r3, #0
 800ed90:	6123      	str	r3, [r4, #16]
 800ed92:	4615      	mov	r5, r2
 800ed94:	e7bc      	b.n	800ed10 <_printf_i+0x14c>
 800ed96:	682b      	ldr	r3, [r5, #0]
 800ed98:	1d1a      	adds	r2, r3, #4
 800ed9a:	602a      	str	r2, [r5, #0]
 800ed9c:	681d      	ldr	r5, [r3, #0]
 800ed9e:	6862      	ldr	r2, [r4, #4]
 800eda0:	2100      	movs	r1, #0
 800eda2:	4628      	mov	r0, r5
 800eda4:	f7f1 fa34 	bl	8000210 <memchr>
 800eda8:	b108      	cbz	r0, 800edae <_printf_i+0x1ea>
 800edaa:	1b40      	subs	r0, r0, r5
 800edac:	6060      	str	r0, [r4, #4]
 800edae:	6863      	ldr	r3, [r4, #4]
 800edb0:	6123      	str	r3, [r4, #16]
 800edb2:	2300      	movs	r3, #0
 800edb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edb8:	e7aa      	b.n	800ed10 <_printf_i+0x14c>
 800edba:	6923      	ldr	r3, [r4, #16]
 800edbc:	462a      	mov	r2, r5
 800edbe:	4649      	mov	r1, r9
 800edc0:	4640      	mov	r0, r8
 800edc2:	47d0      	blx	sl
 800edc4:	3001      	adds	r0, #1
 800edc6:	d0ad      	beq.n	800ed24 <_printf_i+0x160>
 800edc8:	6823      	ldr	r3, [r4, #0]
 800edca:	079b      	lsls	r3, r3, #30
 800edcc:	d413      	bmi.n	800edf6 <_printf_i+0x232>
 800edce:	68e0      	ldr	r0, [r4, #12]
 800edd0:	9b03      	ldr	r3, [sp, #12]
 800edd2:	4298      	cmp	r0, r3
 800edd4:	bfb8      	it	lt
 800edd6:	4618      	movlt	r0, r3
 800edd8:	e7a6      	b.n	800ed28 <_printf_i+0x164>
 800edda:	2301      	movs	r3, #1
 800eddc:	4632      	mov	r2, r6
 800edde:	4649      	mov	r1, r9
 800ede0:	4640      	mov	r0, r8
 800ede2:	47d0      	blx	sl
 800ede4:	3001      	adds	r0, #1
 800ede6:	d09d      	beq.n	800ed24 <_printf_i+0x160>
 800ede8:	3501      	adds	r5, #1
 800edea:	68e3      	ldr	r3, [r4, #12]
 800edec:	9903      	ldr	r1, [sp, #12]
 800edee:	1a5b      	subs	r3, r3, r1
 800edf0:	42ab      	cmp	r3, r5
 800edf2:	dcf2      	bgt.n	800edda <_printf_i+0x216>
 800edf4:	e7eb      	b.n	800edce <_printf_i+0x20a>
 800edf6:	2500      	movs	r5, #0
 800edf8:	f104 0619 	add.w	r6, r4, #25
 800edfc:	e7f5      	b.n	800edea <_printf_i+0x226>
 800edfe:	bf00      	nop
 800ee00:	08013152 	.word	0x08013152
 800ee04:	08013163 	.word	0x08013163

0800ee08 <_scanf_float>:
 800ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	b087      	sub	sp, #28
 800ee0e:	4617      	mov	r7, r2
 800ee10:	9303      	str	r3, [sp, #12]
 800ee12:	688b      	ldr	r3, [r1, #8]
 800ee14:	1e5a      	subs	r2, r3, #1
 800ee16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ee1a:	bf83      	ittte	hi
 800ee1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ee20:	195b      	addhi	r3, r3, r5
 800ee22:	9302      	strhi	r3, [sp, #8]
 800ee24:	2300      	movls	r3, #0
 800ee26:	bf86      	itte	hi
 800ee28:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ee2c:	608b      	strhi	r3, [r1, #8]
 800ee2e:	9302      	strls	r3, [sp, #8]
 800ee30:	680b      	ldr	r3, [r1, #0]
 800ee32:	468b      	mov	fp, r1
 800ee34:	2500      	movs	r5, #0
 800ee36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ee3a:	f84b 3b1c 	str.w	r3, [fp], #28
 800ee3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ee42:	4680      	mov	r8, r0
 800ee44:	460c      	mov	r4, r1
 800ee46:	465e      	mov	r6, fp
 800ee48:	46aa      	mov	sl, r5
 800ee4a:	46a9      	mov	r9, r5
 800ee4c:	9501      	str	r5, [sp, #4]
 800ee4e:	68a2      	ldr	r2, [r4, #8]
 800ee50:	b152      	cbz	r2, 800ee68 <_scanf_float+0x60>
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	2b4e      	cmp	r3, #78	; 0x4e
 800ee58:	d864      	bhi.n	800ef24 <_scanf_float+0x11c>
 800ee5a:	2b40      	cmp	r3, #64	; 0x40
 800ee5c:	d83c      	bhi.n	800eed8 <_scanf_float+0xd0>
 800ee5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ee62:	b2c8      	uxtb	r0, r1
 800ee64:	280e      	cmp	r0, #14
 800ee66:	d93a      	bls.n	800eede <_scanf_float+0xd6>
 800ee68:	f1b9 0f00 	cmp.w	r9, #0
 800ee6c:	d003      	beq.n	800ee76 <_scanf_float+0x6e>
 800ee6e:	6823      	ldr	r3, [r4, #0]
 800ee70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee74:	6023      	str	r3, [r4, #0]
 800ee76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ee7a:	f1ba 0f01 	cmp.w	sl, #1
 800ee7e:	f200 8113 	bhi.w	800f0a8 <_scanf_float+0x2a0>
 800ee82:	455e      	cmp	r6, fp
 800ee84:	f200 8105 	bhi.w	800f092 <_scanf_float+0x28a>
 800ee88:	2501      	movs	r5, #1
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	b007      	add	sp, #28
 800ee8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ee96:	2a0d      	cmp	r2, #13
 800ee98:	d8e6      	bhi.n	800ee68 <_scanf_float+0x60>
 800ee9a:	a101      	add	r1, pc, #4	; (adr r1, 800eea0 <_scanf_float+0x98>)
 800ee9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800eea0:	0800efdf 	.word	0x0800efdf
 800eea4:	0800ee69 	.word	0x0800ee69
 800eea8:	0800ee69 	.word	0x0800ee69
 800eeac:	0800ee69 	.word	0x0800ee69
 800eeb0:	0800f03f 	.word	0x0800f03f
 800eeb4:	0800f017 	.word	0x0800f017
 800eeb8:	0800ee69 	.word	0x0800ee69
 800eebc:	0800ee69 	.word	0x0800ee69
 800eec0:	0800efed 	.word	0x0800efed
 800eec4:	0800ee69 	.word	0x0800ee69
 800eec8:	0800ee69 	.word	0x0800ee69
 800eecc:	0800ee69 	.word	0x0800ee69
 800eed0:	0800ee69 	.word	0x0800ee69
 800eed4:	0800efa5 	.word	0x0800efa5
 800eed8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800eedc:	e7db      	b.n	800ee96 <_scanf_float+0x8e>
 800eede:	290e      	cmp	r1, #14
 800eee0:	d8c2      	bhi.n	800ee68 <_scanf_float+0x60>
 800eee2:	a001      	add	r0, pc, #4	; (adr r0, 800eee8 <_scanf_float+0xe0>)
 800eee4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800eee8:	0800ef97 	.word	0x0800ef97
 800eeec:	0800ee69 	.word	0x0800ee69
 800eef0:	0800ef97 	.word	0x0800ef97
 800eef4:	0800f02b 	.word	0x0800f02b
 800eef8:	0800ee69 	.word	0x0800ee69
 800eefc:	0800ef45 	.word	0x0800ef45
 800ef00:	0800ef81 	.word	0x0800ef81
 800ef04:	0800ef81 	.word	0x0800ef81
 800ef08:	0800ef81 	.word	0x0800ef81
 800ef0c:	0800ef81 	.word	0x0800ef81
 800ef10:	0800ef81 	.word	0x0800ef81
 800ef14:	0800ef81 	.word	0x0800ef81
 800ef18:	0800ef81 	.word	0x0800ef81
 800ef1c:	0800ef81 	.word	0x0800ef81
 800ef20:	0800ef81 	.word	0x0800ef81
 800ef24:	2b6e      	cmp	r3, #110	; 0x6e
 800ef26:	d809      	bhi.n	800ef3c <_scanf_float+0x134>
 800ef28:	2b60      	cmp	r3, #96	; 0x60
 800ef2a:	d8b2      	bhi.n	800ee92 <_scanf_float+0x8a>
 800ef2c:	2b54      	cmp	r3, #84	; 0x54
 800ef2e:	d077      	beq.n	800f020 <_scanf_float+0x218>
 800ef30:	2b59      	cmp	r3, #89	; 0x59
 800ef32:	d199      	bne.n	800ee68 <_scanf_float+0x60>
 800ef34:	2d07      	cmp	r5, #7
 800ef36:	d197      	bne.n	800ee68 <_scanf_float+0x60>
 800ef38:	2508      	movs	r5, #8
 800ef3a:	e029      	b.n	800ef90 <_scanf_float+0x188>
 800ef3c:	2b74      	cmp	r3, #116	; 0x74
 800ef3e:	d06f      	beq.n	800f020 <_scanf_float+0x218>
 800ef40:	2b79      	cmp	r3, #121	; 0x79
 800ef42:	e7f6      	b.n	800ef32 <_scanf_float+0x12a>
 800ef44:	6821      	ldr	r1, [r4, #0]
 800ef46:	05c8      	lsls	r0, r1, #23
 800ef48:	d51a      	bpl.n	800ef80 <_scanf_float+0x178>
 800ef4a:	9b02      	ldr	r3, [sp, #8]
 800ef4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ef50:	6021      	str	r1, [r4, #0]
 800ef52:	f109 0901 	add.w	r9, r9, #1
 800ef56:	b11b      	cbz	r3, 800ef60 <_scanf_float+0x158>
 800ef58:	3b01      	subs	r3, #1
 800ef5a:	3201      	adds	r2, #1
 800ef5c:	9302      	str	r3, [sp, #8]
 800ef5e:	60a2      	str	r2, [r4, #8]
 800ef60:	68a3      	ldr	r3, [r4, #8]
 800ef62:	3b01      	subs	r3, #1
 800ef64:	60a3      	str	r3, [r4, #8]
 800ef66:	6923      	ldr	r3, [r4, #16]
 800ef68:	3301      	adds	r3, #1
 800ef6a:	6123      	str	r3, [r4, #16]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	3b01      	subs	r3, #1
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	607b      	str	r3, [r7, #4]
 800ef74:	f340 8084 	ble.w	800f080 <_scanf_float+0x278>
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	603b      	str	r3, [r7, #0]
 800ef7e:	e766      	b.n	800ee4e <_scanf_float+0x46>
 800ef80:	eb1a 0f05 	cmn.w	sl, r5
 800ef84:	f47f af70 	bne.w	800ee68 <_scanf_float+0x60>
 800ef88:	6822      	ldr	r2, [r4, #0]
 800ef8a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ef8e:	6022      	str	r2, [r4, #0]
 800ef90:	f806 3b01 	strb.w	r3, [r6], #1
 800ef94:	e7e4      	b.n	800ef60 <_scanf_float+0x158>
 800ef96:	6822      	ldr	r2, [r4, #0]
 800ef98:	0610      	lsls	r0, r2, #24
 800ef9a:	f57f af65 	bpl.w	800ee68 <_scanf_float+0x60>
 800ef9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800efa2:	e7f4      	b.n	800ef8e <_scanf_float+0x186>
 800efa4:	f1ba 0f00 	cmp.w	sl, #0
 800efa8:	d10e      	bne.n	800efc8 <_scanf_float+0x1c0>
 800efaa:	f1b9 0f00 	cmp.w	r9, #0
 800efae:	d10e      	bne.n	800efce <_scanf_float+0x1c6>
 800efb0:	6822      	ldr	r2, [r4, #0]
 800efb2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800efb6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800efba:	d108      	bne.n	800efce <_scanf_float+0x1c6>
 800efbc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800efc0:	6022      	str	r2, [r4, #0]
 800efc2:	f04f 0a01 	mov.w	sl, #1
 800efc6:	e7e3      	b.n	800ef90 <_scanf_float+0x188>
 800efc8:	f1ba 0f02 	cmp.w	sl, #2
 800efcc:	d055      	beq.n	800f07a <_scanf_float+0x272>
 800efce:	2d01      	cmp	r5, #1
 800efd0:	d002      	beq.n	800efd8 <_scanf_float+0x1d0>
 800efd2:	2d04      	cmp	r5, #4
 800efd4:	f47f af48 	bne.w	800ee68 <_scanf_float+0x60>
 800efd8:	3501      	adds	r5, #1
 800efda:	b2ed      	uxtb	r5, r5
 800efdc:	e7d8      	b.n	800ef90 <_scanf_float+0x188>
 800efde:	f1ba 0f01 	cmp.w	sl, #1
 800efe2:	f47f af41 	bne.w	800ee68 <_scanf_float+0x60>
 800efe6:	f04f 0a02 	mov.w	sl, #2
 800efea:	e7d1      	b.n	800ef90 <_scanf_float+0x188>
 800efec:	b97d      	cbnz	r5, 800f00e <_scanf_float+0x206>
 800efee:	f1b9 0f00 	cmp.w	r9, #0
 800eff2:	f47f af3c 	bne.w	800ee6e <_scanf_float+0x66>
 800eff6:	6822      	ldr	r2, [r4, #0]
 800eff8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800effc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800f000:	f47f af39 	bne.w	800ee76 <_scanf_float+0x6e>
 800f004:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f008:	6022      	str	r2, [r4, #0]
 800f00a:	2501      	movs	r5, #1
 800f00c:	e7c0      	b.n	800ef90 <_scanf_float+0x188>
 800f00e:	2d03      	cmp	r5, #3
 800f010:	d0e2      	beq.n	800efd8 <_scanf_float+0x1d0>
 800f012:	2d05      	cmp	r5, #5
 800f014:	e7de      	b.n	800efd4 <_scanf_float+0x1cc>
 800f016:	2d02      	cmp	r5, #2
 800f018:	f47f af26 	bne.w	800ee68 <_scanf_float+0x60>
 800f01c:	2503      	movs	r5, #3
 800f01e:	e7b7      	b.n	800ef90 <_scanf_float+0x188>
 800f020:	2d06      	cmp	r5, #6
 800f022:	f47f af21 	bne.w	800ee68 <_scanf_float+0x60>
 800f026:	2507      	movs	r5, #7
 800f028:	e7b2      	b.n	800ef90 <_scanf_float+0x188>
 800f02a:	6822      	ldr	r2, [r4, #0]
 800f02c:	0591      	lsls	r1, r2, #22
 800f02e:	f57f af1b 	bpl.w	800ee68 <_scanf_float+0x60>
 800f032:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800f036:	6022      	str	r2, [r4, #0]
 800f038:	f8cd 9004 	str.w	r9, [sp, #4]
 800f03c:	e7a8      	b.n	800ef90 <_scanf_float+0x188>
 800f03e:	6822      	ldr	r2, [r4, #0]
 800f040:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800f044:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800f048:	d006      	beq.n	800f058 <_scanf_float+0x250>
 800f04a:	0550      	lsls	r0, r2, #21
 800f04c:	f57f af0c 	bpl.w	800ee68 <_scanf_float+0x60>
 800f050:	f1b9 0f00 	cmp.w	r9, #0
 800f054:	f43f af0f 	beq.w	800ee76 <_scanf_float+0x6e>
 800f058:	0591      	lsls	r1, r2, #22
 800f05a:	bf58      	it	pl
 800f05c:	9901      	ldrpl	r1, [sp, #4]
 800f05e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800f062:	bf58      	it	pl
 800f064:	eba9 0101 	subpl.w	r1, r9, r1
 800f068:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800f06c:	bf58      	it	pl
 800f06e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800f072:	6022      	str	r2, [r4, #0]
 800f074:	f04f 0900 	mov.w	r9, #0
 800f078:	e78a      	b.n	800ef90 <_scanf_float+0x188>
 800f07a:	f04f 0a03 	mov.w	sl, #3
 800f07e:	e787      	b.n	800ef90 <_scanf_float+0x188>
 800f080:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f084:	4639      	mov	r1, r7
 800f086:	4640      	mov	r0, r8
 800f088:	4798      	blx	r3
 800f08a:	2800      	cmp	r0, #0
 800f08c:	f43f aedf 	beq.w	800ee4e <_scanf_float+0x46>
 800f090:	e6ea      	b.n	800ee68 <_scanf_float+0x60>
 800f092:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f096:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f09a:	463a      	mov	r2, r7
 800f09c:	4640      	mov	r0, r8
 800f09e:	4798      	blx	r3
 800f0a0:	6923      	ldr	r3, [r4, #16]
 800f0a2:	3b01      	subs	r3, #1
 800f0a4:	6123      	str	r3, [r4, #16]
 800f0a6:	e6ec      	b.n	800ee82 <_scanf_float+0x7a>
 800f0a8:	1e6b      	subs	r3, r5, #1
 800f0aa:	2b06      	cmp	r3, #6
 800f0ac:	d825      	bhi.n	800f0fa <_scanf_float+0x2f2>
 800f0ae:	2d02      	cmp	r5, #2
 800f0b0:	d836      	bhi.n	800f120 <_scanf_float+0x318>
 800f0b2:	455e      	cmp	r6, fp
 800f0b4:	f67f aee8 	bls.w	800ee88 <_scanf_float+0x80>
 800f0b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f0c0:	463a      	mov	r2, r7
 800f0c2:	4640      	mov	r0, r8
 800f0c4:	4798      	blx	r3
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	3b01      	subs	r3, #1
 800f0ca:	6123      	str	r3, [r4, #16]
 800f0cc:	e7f1      	b.n	800f0b2 <_scanf_float+0x2aa>
 800f0ce:	9802      	ldr	r0, [sp, #8]
 800f0d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f0d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800f0d8:	9002      	str	r0, [sp, #8]
 800f0da:	463a      	mov	r2, r7
 800f0dc:	4640      	mov	r0, r8
 800f0de:	4798      	blx	r3
 800f0e0:	6923      	ldr	r3, [r4, #16]
 800f0e2:	3b01      	subs	r3, #1
 800f0e4:	6123      	str	r3, [r4, #16]
 800f0e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0ea:	fa5f fa8a 	uxtb.w	sl, sl
 800f0ee:	f1ba 0f02 	cmp.w	sl, #2
 800f0f2:	d1ec      	bne.n	800f0ce <_scanf_float+0x2c6>
 800f0f4:	3d03      	subs	r5, #3
 800f0f6:	b2ed      	uxtb	r5, r5
 800f0f8:	1b76      	subs	r6, r6, r5
 800f0fa:	6823      	ldr	r3, [r4, #0]
 800f0fc:	05da      	lsls	r2, r3, #23
 800f0fe:	d52f      	bpl.n	800f160 <_scanf_float+0x358>
 800f100:	055b      	lsls	r3, r3, #21
 800f102:	d510      	bpl.n	800f126 <_scanf_float+0x31e>
 800f104:	455e      	cmp	r6, fp
 800f106:	f67f aebf 	bls.w	800ee88 <_scanf_float+0x80>
 800f10a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f10e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800f112:	463a      	mov	r2, r7
 800f114:	4640      	mov	r0, r8
 800f116:	4798      	blx	r3
 800f118:	6923      	ldr	r3, [r4, #16]
 800f11a:	3b01      	subs	r3, #1
 800f11c:	6123      	str	r3, [r4, #16]
 800f11e:	e7f1      	b.n	800f104 <_scanf_float+0x2fc>
 800f120:	46aa      	mov	sl, r5
 800f122:	9602      	str	r6, [sp, #8]
 800f124:	e7df      	b.n	800f0e6 <_scanf_float+0x2de>
 800f126:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800f12a:	6923      	ldr	r3, [r4, #16]
 800f12c:	2965      	cmp	r1, #101	; 0x65
 800f12e:	f103 33ff 	add.w	r3, r3, #4294967295
 800f132:	f106 35ff 	add.w	r5, r6, #4294967295
 800f136:	6123      	str	r3, [r4, #16]
 800f138:	d00c      	beq.n	800f154 <_scanf_float+0x34c>
 800f13a:	2945      	cmp	r1, #69	; 0x45
 800f13c:	d00a      	beq.n	800f154 <_scanf_float+0x34c>
 800f13e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f142:	463a      	mov	r2, r7
 800f144:	4640      	mov	r0, r8
 800f146:	4798      	blx	r3
 800f148:	6923      	ldr	r3, [r4, #16]
 800f14a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800f14e:	3b01      	subs	r3, #1
 800f150:	1eb5      	subs	r5, r6, #2
 800f152:	6123      	str	r3, [r4, #16]
 800f154:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f158:	463a      	mov	r2, r7
 800f15a:	4640      	mov	r0, r8
 800f15c:	4798      	blx	r3
 800f15e:	462e      	mov	r6, r5
 800f160:	6825      	ldr	r5, [r4, #0]
 800f162:	f015 0510 	ands.w	r5, r5, #16
 800f166:	d158      	bne.n	800f21a <_scanf_float+0x412>
 800f168:	7035      	strb	r5, [r6, #0]
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f174:	d11c      	bne.n	800f1b0 <_scanf_float+0x3a8>
 800f176:	9b01      	ldr	r3, [sp, #4]
 800f178:	454b      	cmp	r3, r9
 800f17a:	eba3 0209 	sub.w	r2, r3, r9
 800f17e:	d124      	bne.n	800f1ca <_scanf_float+0x3c2>
 800f180:	2200      	movs	r2, #0
 800f182:	4659      	mov	r1, fp
 800f184:	4640      	mov	r0, r8
 800f186:	f002 fc47 	bl	8011a18 <_strtod_r>
 800f18a:	9b03      	ldr	r3, [sp, #12]
 800f18c:	6821      	ldr	r1, [r4, #0]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f011 0f02 	tst.w	r1, #2
 800f194:	ec57 6b10 	vmov	r6, r7, d0
 800f198:	f103 0204 	add.w	r2, r3, #4
 800f19c:	d020      	beq.n	800f1e0 <_scanf_float+0x3d8>
 800f19e:	9903      	ldr	r1, [sp, #12]
 800f1a0:	600a      	str	r2, [r1, #0]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	e9c3 6700 	strd	r6, r7, [r3]
 800f1a8:	68e3      	ldr	r3, [r4, #12]
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	60e3      	str	r3, [r4, #12]
 800f1ae:	e66c      	b.n	800ee8a <_scanf_float+0x82>
 800f1b0:	9b04      	ldr	r3, [sp, #16]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d0e4      	beq.n	800f180 <_scanf_float+0x378>
 800f1b6:	9905      	ldr	r1, [sp, #20]
 800f1b8:	230a      	movs	r3, #10
 800f1ba:	462a      	mov	r2, r5
 800f1bc:	3101      	adds	r1, #1
 800f1be:	4640      	mov	r0, r8
 800f1c0:	f002 fcb2 	bl	8011b28 <_strtol_r>
 800f1c4:	9b04      	ldr	r3, [sp, #16]
 800f1c6:	9e05      	ldr	r6, [sp, #20]
 800f1c8:	1ac2      	subs	r2, r0, r3
 800f1ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f1ce:	429e      	cmp	r6, r3
 800f1d0:	bf28      	it	cs
 800f1d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800f1d6:	4912      	ldr	r1, [pc, #72]	; (800f220 <_scanf_float+0x418>)
 800f1d8:	4630      	mov	r0, r6
 800f1da:	f000 f8e7 	bl	800f3ac <siprintf>
 800f1de:	e7cf      	b.n	800f180 <_scanf_float+0x378>
 800f1e0:	f011 0f04 	tst.w	r1, #4
 800f1e4:	9903      	ldr	r1, [sp, #12]
 800f1e6:	600a      	str	r2, [r1, #0]
 800f1e8:	d1db      	bne.n	800f1a2 <_scanf_float+0x39a>
 800f1ea:	f8d3 8000 	ldr.w	r8, [r3]
 800f1ee:	ee10 2a10 	vmov	r2, s0
 800f1f2:	ee10 0a10 	vmov	r0, s0
 800f1f6:	463b      	mov	r3, r7
 800f1f8:	4639      	mov	r1, r7
 800f1fa:	f7f1 fcb7 	bl	8000b6c <__aeabi_dcmpun>
 800f1fe:	b128      	cbz	r0, 800f20c <_scanf_float+0x404>
 800f200:	4808      	ldr	r0, [pc, #32]	; (800f224 <_scanf_float+0x41c>)
 800f202:	f000 f9c5 	bl	800f590 <nanf>
 800f206:	ed88 0a00 	vstr	s0, [r8]
 800f20a:	e7cd      	b.n	800f1a8 <_scanf_float+0x3a0>
 800f20c:	4630      	mov	r0, r6
 800f20e:	4639      	mov	r1, r7
 800f210:	f7f1 fd0a 	bl	8000c28 <__aeabi_d2f>
 800f214:	f8c8 0000 	str.w	r0, [r8]
 800f218:	e7c6      	b.n	800f1a8 <_scanf_float+0x3a0>
 800f21a:	2500      	movs	r5, #0
 800f21c:	e635      	b.n	800ee8a <_scanf_float+0x82>
 800f21e:	bf00      	nop
 800f220:	08013174 	.word	0x08013174
 800f224:	08013505 	.word	0x08013505

0800f228 <std>:
 800f228:	2300      	movs	r3, #0
 800f22a:	b510      	push	{r4, lr}
 800f22c:	4604      	mov	r4, r0
 800f22e:	e9c0 3300 	strd	r3, r3, [r0]
 800f232:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f236:	6083      	str	r3, [r0, #8]
 800f238:	8181      	strh	r1, [r0, #12]
 800f23a:	6643      	str	r3, [r0, #100]	; 0x64
 800f23c:	81c2      	strh	r2, [r0, #14]
 800f23e:	6183      	str	r3, [r0, #24]
 800f240:	4619      	mov	r1, r3
 800f242:	2208      	movs	r2, #8
 800f244:	305c      	adds	r0, #92	; 0x5c
 800f246:	f000 f914 	bl	800f472 <memset>
 800f24a:	4b0d      	ldr	r3, [pc, #52]	; (800f280 <std+0x58>)
 800f24c:	6263      	str	r3, [r4, #36]	; 0x24
 800f24e:	4b0d      	ldr	r3, [pc, #52]	; (800f284 <std+0x5c>)
 800f250:	62a3      	str	r3, [r4, #40]	; 0x28
 800f252:	4b0d      	ldr	r3, [pc, #52]	; (800f288 <std+0x60>)
 800f254:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f256:	4b0d      	ldr	r3, [pc, #52]	; (800f28c <std+0x64>)
 800f258:	6323      	str	r3, [r4, #48]	; 0x30
 800f25a:	4b0d      	ldr	r3, [pc, #52]	; (800f290 <std+0x68>)
 800f25c:	6224      	str	r4, [r4, #32]
 800f25e:	429c      	cmp	r4, r3
 800f260:	d006      	beq.n	800f270 <std+0x48>
 800f262:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f266:	4294      	cmp	r4, r2
 800f268:	d002      	beq.n	800f270 <std+0x48>
 800f26a:	33d0      	adds	r3, #208	; 0xd0
 800f26c:	429c      	cmp	r4, r3
 800f26e:	d105      	bne.n	800f27c <std+0x54>
 800f270:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f278:	f000 b978 	b.w	800f56c <__retarget_lock_init_recursive>
 800f27c:	bd10      	pop	{r4, pc}
 800f27e:	bf00      	nop
 800f280:	0800f3ed 	.word	0x0800f3ed
 800f284:	0800f40f 	.word	0x0800f40f
 800f288:	0800f447 	.word	0x0800f447
 800f28c:	0800f46b 	.word	0x0800f46b
 800f290:	20001268 	.word	0x20001268

0800f294 <stdio_exit_handler>:
 800f294:	4a02      	ldr	r2, [pc, #8]	; (800f2a0 <stdio_exit_handler+0xc>)
 800f296:	4903      	ldr	r1, [pc, #12]	; (800f2a4 <stdio_exit_handler+0x10>)
 800f298:	4803      	ldr	r0, [pc, #12]	; (800f2a8 <stdio_exit_handler+0x14>)
 800f29a:	f000 b869 	b.w	800f370 <_fwalk_sglue>
 800f29e:	bf00      	nop
 800f2a0:	20000020 	.word	0x20000020
 800f2a4:	08011ee9 	.word	0x08011ee9
 800f2a8:	2000002c 	.word	0x2000002c

0800f2ac <cleanup_stdio>:
 800f2ac:	6841      	ldr	r1, [r0, #4]
 800f2ae:	4b0c      	ldr	r3, [pc, #48]	; (800f2e0 <cleanup_stdio+0x34>)
 800f2b0:	4299      	cmp	r1, r3
 800f2b2:	b510      	push	{r4, lr}
 800f2b4:	4604      	mov	r4, r0
 800f2b6:	d001      	beq.n	800f2bc <cleanup_stdio+0x10>
 800f2b8:	f002 fe16 	bl	8011ee8 <_fflush_r>
 800f2bc:	68a1      	ldr	r1, [r4, #8]
 800f2be:	4b09      	ldr	r3, [pc, #36]	; (800f2e4 <cleanup_stdio+0x38>)
 800f2c0:	4299      	cmp	r1, r3
 800f2c2:	d002      	beq.n	800f2ca <cleanup_stdio+0x1e>
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	f002 fe0f 	bl	8011ee8 <_fflush_r>
 800f2ca:	68e1      	ldr	r1, [r4, #12]
 800f2cc:	4b06      	ldr	r3, [pc, #24]	; (800f2e8 <cleanup_stdio+0x3c>)
 800f2ce:	4299      	cmp	r1, r3
 800f2d0:	d004      	beq.n	800f2dc <cleanup_stdio+0x30>
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2d8:	f002 be06 	b.w	8011ee8 <_fflush_r>
 800f2dc:	bd10      	pop	{r4, pc}
 800f2de:	bf00      	nop
 800f2e0:	20001268 	.word	0x20001268
 800f2e4:	200012d0 	.word	0x200012d0
 800f2e8:	20001338 	.word	0x20001338

0800f2ec <global_stdio_init.part.0>:
 800f2ec:	b510      	push	{r4, lr}
 800f2ee:	4b0b      	ldr	r3, [pc, #44]	; (800f31c <global_stdio_init.part.0+0x30>)
 800f2f0:	4c0b      	ldr	r4, [pc, #44]	; (800f320 <global_stdio_init.part.0+0x34>)
 800f2f2:	4a0c      	ldr	r2, [pc, #48]	; (800f324 <global_stdio_init.part.0+0x38>)
 800f2f4:	601a      	str	r2, [r3, #0]
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	2104      	movs	r1, #4
 800f2fc:	f7ff ff94 	bl	800f228 <std>
 800f300:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f304:	2201      	movs	r2, #1
 800f306:	2109      	movs	r1, #9
 800f308:	f7ff ff8e 	bl	800f228 <std>
 800f30c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f310:	2202      	movs	r2, #2
 800f312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f316:	2112      	movs	r1, #18
 800f318:	f7ff bf86 	b.w	800f228 <std>
 800f31c:	200013a0 	.word	0x200013a0
 800f320:	20001268 	.word	0x20001268
 800f324:	0800f295 	.word	0x0800f295

0800f328 <__sfp_lock_acquire>:
 800f328:	4801      	ldr	r0, [pc, #4]	; (800f330 <__sfp_lock_acquire+0x8>)
 800f32a:	f000 b920 	b.w	800f56e <__retarget_lock_acquire_recursive>
 800f32e:	bf00      	nop
 800f330:	200013a9 	.word	0x200013a9

0800f334 <__sfp_lock_release>:
 800f334:	4801      	ldr	r0, [pc, #4]	; (800f33c <__sfp_lock_release+0x8>)
 800f336:	f000 b91b 	b.w	800f570 <__retarget_lock_release_recursive>
 800f33a:	bf00      	nop
 800f33c:	200013a9 	.word	0x200013a9

0800f340 <__sinit>:
 800f340:	b510      	push	{r4, lr}
 800f342:	4604      	mov	r4, r0
 800f344:	f7ff fff0 	bl	800f328 <__sfp_lock_acquire>
 800f348:	6a23      	ldr	r3, [r4, #32]
 800f34a:	b11b      	cbz	r3, 800f354 <__sinit+0x14>
 800f34c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f350:	f7ff bff0 	b.w	800f334 <__sfp_lock_release>
 800f354:	4b04      	ldr	r3, [pc, #16]	; (800f368 <__sinit+0x28>)
 800f356:	6223      	str	r3, [r4, #32]
 800f358:	4b04      	ldr	r3, [pc, #16]	; (800f36c <__sinit+0x2c>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d1f5      	bne.n	800f34c <__sinit+0xc>
 800f360:	f7ff ffc4 	bl	800f2ec <global_stdio_init.part.0>
 800f364:	e7f2      	b.n	800f34c <__sinit+0xc>
 800f366:	bf00      	nop
 800f368:	0800f2ad 	.word	0x0800f2ad
 800f36c:	200013a0 	.word	0x200013a0

0800f370 <_fwalk_sglue>:
 800f370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f374:	4607      	mov	r7, r0
 800f376:	4688      	mov	r8, r1
 800f378:	4614      	mov	r4, r2
 800f37a:	2600      	movs	r6, #0
 800f37c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f380:	f1b9 0901 	subs.w	r9, r9, #1
 800f384:	d505      	bpl.n	800f392 <_fwalk_sglue+0x22>
 800f386:	6824      	ldr	r4, [r4, #0]
 800f388:	2c00      	cmp	r4, #0
 800f38a:	d1f7      	bne.n	800f37c <_fwalk_sglue+0xc>
 800f38c:	4630      	mov	r0, r6
 800f38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f392:	89ab      	ldrh	r3, [r5, #12]
 800f394:	2b01      	cmp	r3, #1
 800f396:	d907      	bls.n	800f3a8 <_fwalk_sglue+0x38>
 800f398:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f39c:	3301      	adds	r3, #1
 800f39e:	d003      	beq.n	800f3a8 <_fwalk_sglue+0x38>
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	4638      	mov	r0, r7
 800f3a4:	47c0      	blx	r8
 800f3a6:	4306      	orrs	r6, r0
 800f3a8:	3568      	adds	r5, #104	; 0x68
 800f3aa:	e7e9      	b.n	800f380 <_fwalk_sglue+0x10>

0800f3ac <siprintf>:
 800f3ac:	b40e      	push	{r1, r2, r3}
 800f3ae:	b500      	push	{lr}
 800f3b0:	b09c      	sub	sp, #112	; 0x70
 800f3b2:	ab1d      	add	r3, sp, #116	; 0x74
 800f3b4:	9002      	str	r0, [sp, #8]
 800f3b6:	9006      	str	r0, [sp, #24]
 800f3b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3bc:	4809      	ldr	r0, [pc, #36]	; (800f3e4 <siprintf+0x38>)
 800f3be:	9107      	str	r1, [sp, #28]
 800f3c0:	9104      	str	r1, [sp, #16]
 800f3c2:	4909      	ldr	r1, [pc, #36]	; (800f3e8 <siprintf+0x3c>)
 800f3c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3c8:	9105      	str	r1, [sp, #20]
 800f3ca:	6800      	ldr	r0, [r0, #0]
 800f3cc:	9301      	str	r3, [sp, #4]
 800f3ce:	a902      	add	r1, sp, #8
 800f3d0:	f002 fc06 	bl	8011be0 <_svfiprintf_r>
 800f3d4:	9b02      	ldr	r3, [sp, #8]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	701a      	strb	r2, [r3, #0]
 800f3da:	b01c      	add	sp, #112	; 0x70
 800f3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3e0:	b003      	add	sp, #12
 800f3e2:	4770      	bx	lr
 800f3e4:	20000078 	.word	0x20000078
 800f3e8:	ffff0208 	.word	0xffff0208

0800f3ec <__sread>:
 800f3ec:	b510      	push	{r4, lr}
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3f4:	f000 f86c 	bl	800f4d0 <_read_r>
 800f3f8:	2800      	cmp	r0, #0
 800f3fa:	bfab      	itete	ge
 800f3fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3fe:	89a3      	ldrhlt	r3, [r4, #12]
 800f400:	181b      	addge	r3, r3, r0
 800f402:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f406:	bfac      	ite	ge
 800f408:	6563      	strge	r3, [r4, #84]	; 0x54
 800f40a:	81a3      	strhlt	r3, [r4, #12]
 800f40c:	bd10      	pop	{r4, pc}

0800f40e <__swrite>:
 800f40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f412:	461f      	mov	r7, r3
 800f414:	898b      	ldrh	r3, [r1, #12]
 800f416:	05db      	lsls	r3, r3, #23
 800f418:	4605      	mov	r5, r0
 800f41a:	460c      	mov	r4, r1
 800f41c:	4616      	mov	r6, r2
 800f41e:	d505      	bpl.n	800f42c <__swrite+0x1e>
 800f420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f424:	2302      	movs	r3, #2
 800f426:	2200      	movs	r2, #0
 800f428:	f000 f840 	bl	800f4ac <_lseek_r>
 800f42c:	89a3      	ldrh	r3, [r4, #12]
 800f42e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f432:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f436:	81a3      	strh	r3, [r4, #12]
 800f438:	4632      	mov	r2, r6
 800f43a:	463b      	mov	r3, r7
 800f43c:	4628      	mov	r0, r5
 800f43e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f442:	f000 b857 	b.w	800f4f4 <_write_r>

0800f446 <__sseek>:
 800f446:	b510      	push	{r4, lr}
 800f448:	460c      	mov	r4, r1
 800f44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f44e:	f000 f82d 	bl	800f4ac <_lseek_r>
 800f452:	1c43      	adds	r3, r0, #1
 800f454:	89a3      	ldrh	r3, [r4, #12]
 800f456:	bf15      	itete	ne
 800f458:	6560      	strne	r0, [r4, #84]	; 0x54
 800f45a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f45e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f462:	81a3      	strheq	r3, [r4, #12]
 800f464:	bf18      	it	ne
 800f466:	81a3      	strhne	r3, [r4, #12]
 800f468:	bd10      	pop	{r4, pc}

0800f46a <__sclose>:
 800f46a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f46e:	f000 b80d 	b.w	800f48c <_close_r>

0800f472 <memset>:
 800f472:	4402      	add	r2, r0
 800f474:	4603      	mov	r3, r0
 800f476:	4293      	cmp	r3, r2
 800f478:	d100      	bne.n	800f47c <memset+0xa>
 800f47a:	4770      	bx	lr
 800f47c:	f803 1b01 	strb.w	r1, [r3], #1
 800f480:	e7f9      	b.n	800f476 <memset+0x4>
	...

0800f484 <_localeconv_r>:
 800f484:	4800      	ldr	r0, [pc, #0]	; (800f488 <_localeconv_r+0x4>)
 800f486:	4770      	bx	lr
 800f488:	2000016c 	.word	0x2000016c

0800f48c <_close_r>:
 800f48c:	b538      	push	{r3, r4, r5, lr}
 800f48e:	4d06      	ldr	r5, [pc, #24]	; (800f4a8 <_close_r+0x1c>)
 800f490:	2300      	movs	r3, #0
 800f492:	4604      	mov	r4, r0
 800f494:	4608      	mov	r0, r1
 800f496:	602b      	str	r3, [r5, #0]
 800f498:	f7f9 fb85 	bl	8008ba6 <_close>
 800f49c:	1c43      	adds	r3, r0, #1
 800f49e:	d102      	bne.n	800f4a6 <_close_r+0x1a>
 800f4a0:	682b      	ldr	r3, [r5, #0]
 800f4a2:	b103      	cbz	r3, 800f4a6 <_close_r+0x1a>
 800f4a4:	6023      	str	r3, [r4, #0]
 800f4a6:	bd38      	pop	{r3, r4, r5, pc}
 800f4a8:	200013a4 	.word	0x200013a4

0800f4ac <_lseek_r>:
 800f4ac:	b538      	push	{r3, r4, r5, lr}
 800f4ae:	4d07      	ldr	r5, [pc, #28]	; (800f4cc <_lseek_r+0x20>)
 800f4b0:	4604      	mov	r4, r0
 800f4b2:	4608      	mov	r0, r1
 800f4b4:	4611      	mov	r1, r2
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	602a      	str	r2, [r5, #0]
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	f7f9 fb9a 	bl	8008bf4 <_lseek>
 800f4c0:	1c43      	adds	r3, r0, #1
 800f4c2:	d102      	bne.n	800f4ca <_lseek_r+0x1e>
 800f4c4:	682b      	ldr	r3, [r5, #0]
 800f4c6:	b103      	cbz	r3, 800f4ca <_lseek_r+0x1e>
 800f4c8:	6023      	str	r3, [r4, #0]
 800f4ca:	bd38      	pop	{r3, r4, r5, pc}
 800f4cc:	200013a4 	.word	0x200013a4

0800f4d0 <_read_r>:
 800f4d0:	b538      	push	{r3, r4, r5, lr}
 800f4d2:	4d07      	ldr	r5, [pc, #28]	; (800f4f0 <_read_r+0x20>)
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	4608      	mov	r0, r1
 800f4d8:	4611      	mov	r1, r2
 800f4da:	2200      	movs	r2, #0
 800f4dc:	602a      	str	r2, [r5, #0]
 800f4de:	461a      	mov	r2, r3
 800f4e0:	f7f9 fb28 	bl	8008b34 <_read>
 800f4e4:	1c43      	adds	r3, r0, #1
 800f4e6:	d102      	bne.n	800f4ee <_read_r+0x1e>
 800f4e8:	682b      	ldr	r3, [r5, #0]
 800f4ea:	b103      	cbz	r3, 800f4ee <_read_r+0x1e>
 800f4ec:	6023      	str	r3, [r4, #0]
 800f4ee:	bd38      	pop	{r3, r4, r5, pc}
 800f4f0:	200013a4 	.word	0x200013a4

0800f4f4 <_write_r>:
 800f4f4:	b538      	push	{r3, r4, r5, lr}
 800f4f6:	4d07      	ldr	r5, [pc, #28]	; (800f514 <_write_r+0x20>)
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	4608      	mov	r0, r1
 800f4fc:	4611      	mov	r1, r2
 800f4fe:	2200      	movs	r2, #0
 800f500:	602a      	str	r2, [r5, #0]
 800f502:	461a      	mov	r2, r3
 800f504:	f7f9 fb33 	bl	8008b6e <_write>
 800f508:	1c43      	adds	r3, r0, #1
 800f50a:	d102      	bne.n	800f512 <_write_r+0x1e>
 800f50c:	682b      	ldr	r3, [r5, #0]
 800f50e:	b103      	cbz	r3, 800f512 <_write_r+0x1e>
 800f510:	6023      	str	r3, [r4, #0]
 800f512:	bd38      	pop	{r3, r4, r5, pc}
 800f514:	200013a4 	.word	0x200013a4

0800f518 <__errno>:
 800f518:	4b01      	ldr	r3, [pc, #4]	; (800f520 <__errno+0x8>)
 800f51a:	6818      	ldr	r0, [r3, #0]
 800f51c:	4770      	bx	lr
 800f51e:	bf00      	nop
 800f520:	20000078 	.word	0x20000078

0800f524 <__libc_init_array>:
 800f524:	b570      	push	{r4, r5, r6, lr}
 800f526:	4d0d      	ldr	r5, [pc, #52]	; (800f55c <__libc_init_array+0x38>)
 800f528:	4c0d      	ldr	r4, [pc, #52]	; (800f560 <__libc_init_array+0x3c>)
 800f52a:	1b64      	subs	r4, r4, r5
 800f52c:	10a4      	asrs	r4, r4, #2
 800f52e:	2600      	movs	r6, #0
 800f530:	42a6      	cmp	r6, r4
 800f532:	d109      	bne.n	800f548 <__libc_init_array+0x24>
 800f534:	4d0b      	ldr	r5, [pc, #44]	; (800f564 <__libc_init_array+0x40>)
 800f536:	4c0c      	ldr	r4, [pc, #48]	; (800f568 <__libc_init_array+0x44>)
 800f538:	f003 fba6 	bl	8012c88 <_init>
 800f53c:	1b64      	subs	r4, r4, r5
 800f53e:	10a4      	asrs	r4, r4, #2
 800f540:	2600      	movs	r6, #0
 800f542:	42a6      	cmp	r6, r4
 800f544:	d105      	bne.n	800f552 <__libc_init_array+0x2e>
 800f546:	bd70      	pop	{r4, r5, r6, pc}
 800f548:	f855 3b04 	ldr.w	r3, [r5], #4
 800f54c:	4798      	blx	r3
 800f54e:	3601      	adds	r6, #1
 800f550:	e7ee      	b.n	800f530 <__libc_init_array+0xc>
 800f552:	f855 3b04 	ldr.w	r3, [r5], #4
 800f556:	4798      	blx	r3
 800f558:	3601      	adds	r6, #1
 800f55a:	e7f2      	b.n	800f542 <__libc_init_array+0x1e>
 800f55c:	08013570 	.word	0x08013570
 800f560:	08013570 	.word	0x08013570
 800f564:	08013570 	.word	0x08013570
 800f568:	08013578 	.word	0x08013578

0800f56c <__retarget_lock_init_recursive>:
 800f56c:	4770      	bx	lr

0800f56e <__retarget_lock_acquire_recursive>:
 800f56e:	4770      	bx	lr

0800f570 <__retarget_lock_release_recursive>:
 800f570:	4770      	bx	lr

0800f572 <memcpy>:
 800f572:	440a      	add	r2, r1
 800f574:	4291      	cmp	r1, r2
 800f576:	f100 33ff 	add.w	r3, r0, #4294967295
 800f57a:	d100      	bne.n	800f57e <memcpy+0xc>
 800f57c:	4770      	bx	lr
 800f57e:	b510      	push	{r4, lr}
 800f580:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f584:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f588:	4291      	cmp	r1, r2
 800f58a:	d1f9      	bne.n	800f580 <memcpy+0xe>
 800f58c:	bd10      	pop	{r4, pc}
	...

0800f590 <nanf>:
 800f590:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f598 <nanf+0x8>
 800f594:	4770      	bx	lr
 800f596:	bf00      	nop
 800f598:	7fc00000 	.word	0x7fc00000

0800f59c <quorem>:
 800f59c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5a0:	6903      	ldr	r3, [r0, #16]
 800f5a2:	690c      	ldr	r4, [r1, #16]
 800f5a4:	42a3      	cmp	r3, r4
 800f5a6:	4607      	mov	r7, r0
 800f5a8:	db7e      	blt.n	800f6a8 <quorem+0x10c>
 800f5aa:	3c01      	subs	r4, #1
 800f5ac:	f101 0814 	add.w	r8, r1, #20
 800f5b0:	f100 0514 	add.w	r5, r0, #20
 800f5b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f5b8:	9301      	str	r3, [sp, #4]
 800f5ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f5be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f5ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f5ce:	fbb2 f6f3 	udiv	r6, r2, r3
 800f5d2:	d331      	bcc.n	800f638 <quorem+0x9c>
 800f5d4:	f04f 0e00 	mov.w	lr, #0
 800f5d8:	4640      	mov	r0, r8
 800f5da:	46ac      	mov	ip, r5
 800f5dc:	46f2      	mov	sl, lr
 800f5de:	f850 2b04 	ldr.w	r2, [r0], #4
 800f5e2:	b293      	uxth	r3, r2
 800f5e4:	fb06 e303 	mla	r3, r6, r3, lr
 800f5e8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f5ec:	0c1a      	lsrs	r2, r3, #16
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	ebaa 0303 	sub.w	r3, sl, r3
 800f5f4:	f8dc a000 	ldr.w	sl, [ip]
 800f5f8:	fa13 f38a 	uxtah	r3, r3, sl
 800f5fc:	fb06 220e 	mla	r2, r6, lr, r2
 800f600:	9300      	str	r3, [sp, #0]
 800f602:	9b00      	ldr	r3, [sp, #0]
 800f604:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f608:	b292      	uxth	r2, r2
 800f60a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f60e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f612:	f8bd 3000 	ldrh.w	r3, [sp]
 800f616:	4581      	cmp	r9, r0
 800f618:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f61c:	f84c 3b04 	str.w	r3, [ip], #4
 800f620:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f624:	d2db      	bcs.n	800f5de <quorem+0x42>
 800f626:	f855 300b 	ldr.w	r3, [r5, fp]
 800f62a:	b92b      	cbnz	r3, 800f638 <quorem+0x9c>
 800f62c:	9b01      	ldr	r3, [sp, #4]
 800f62e:	3b04      	subs	r3, #4
 800f630:	429d      	cmp	r5, r3
 800f632:	461a      	mov	r2, r3
 800f634:	d32c      	bcc.n	800f690 <quorem+0xf4>
 800f636:	613c      	str	r4, [r7, #16]
 800f638:	4638      	mov	r0, r7
 800f63a:	f001 f9f1 	bl	8010a20 <__mcmp>
 800f63e:	2800      	cmp	r0, #0
 800f640:	db22      	blt.n	800f688 <quorem+0xec>
 800f642:	3601      	adds	r6, #1
 800f644:	4629      	mov	r1, r5
 800f646:	2000      	movs	r0, #0
 800f648:	f858 2b04 	ldr.w	r2, [r8], #4
 800f64c:	f8d1 c000 	ldr.w	ip, [r1]
 800f650:	b293      	uxth	r3, r2
 800f652:	1ac3      	subs	r3, r0, r3
 800f654:	0c12      	lsrs	r2, r2, #16
 800f656:	fa13 f38c 	uxtah	r3, r3, ip
 800f65a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f65e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f662:	b29b      	uxth	r3, r3
 800f664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f668:	45c1      	cmp	r9, r8
 800f66a:	f841 3b04 	str.w	r3, [r1], #4
 800f66e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f672:	d2e9      	bcs.n	800f648 <quorem+0xac>
 800f674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f678:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f67c:	b922      	cbnz	r2, 800f688 <quorem+0xec>
 800f67e:	3b04      	subs	r3, #4
 800f680:	429d      	cmp	r5, r3
 800f682:	461a      	mov	r2, r3
 800f684:	d30a      	bcc.n	800f69c <quorem+0x100>
 800f686:	613c      	str	r4, [r7, #16]
 800f688:	4630      	mov	r0, r6
 800f68a:	b003      	add	sp, #12
 800f68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f690:	6812      	ldr	r2, [r2, #0]
 800f692:	3b04      	subs	r3, #4
 800f694:	2a00      	cmp	r2, #0
 800f696:	d1ce      	bne.n	800f636 <quorem+0x9a>
 800f698:	3c01      	subs	r4, #1
 800f69a:	e7c9      	b.n	800f630 <quorem+0x94>
 800f69c:	6812      	ldr	r2, [r2, #0]
 800f69e:	3b04      	subs	r3, #4
 800f6a0:	2a00      	cmp	r2, #0
 800f6a2:	d1f0      	bne.n	800f686 <quorem+0xea>
 800f6a4:	3c01      	subs	r4, #1
 800f6a6:	e7eb      	b.n	800f680 <quorem+0xe4>
 800f6a8:	2000      	movs	r0, #0
 800f6aa:	e7ee      	b.n	800f68a <quorem+0xee>
 800f6ac:	0000      	movs	r0, r0
	...

0800f6b0 <_dtoa_r>:
 800f6b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b4:	ed2d 8b04 	vpush	{d8-d9}
 800f6b8:	69c5      	ldr	r5, [r0, #28]
 800f6ba:	b093      	sub	sp, #76	; 0x4c
 800f6bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f6c0:	ec57 6b10 	vmov	r6, r7, d0
 800f6c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f6c8:	9107      	str	r1, [sp, #28]
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	920a      	str	r2, [sp, #40]	; 0x28
 800f6ce:	930d      	str	r3, [sp, #52]	; 0x34
 800f6d0:	b975      	cbnz	r5, 800f6f0 <_dtoa_r+0x40>
 800f6d2:	2010      	movs	r0, #16
 800f6d4:	f000 fe2a 	bl	801032c <malloc>
 800f6d8:	4602      	mov	r2, r0
 800f6da:	61e0      	str	r0, [r4, #28]
 800f6dc:	b920      	cbnz	r0, 800f6e8 <_dtoa_r+0x38>
 800f6de:	4bae      	ldr	r3, [pc, #696]	; (800f998 <_dtoa_r+0x2e8>)
 800f6e0:	21ef      	movs	r1, #239	; 0xef
 800f6e2:	48ae      	ldr	r0, [pc, #696]	; (800f99c <_dtoa_r+0x2ec>)
 800f6e4:	f002 fc6c 	bl	8011fc0 <__assert_func>
 800f6e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f6ec:	6005      	str	r5, [r0, #0]
 800f6ee:	60c5      	str	r5, [r0, #12]
 800f6f0:	69e3      	ldr	r3, [r4, #28]
 800f6f2:	6819      	ldr	r1, [r3, #0]
 800f6f4:	b151      	cbz	r1, 800f70c <_dtoa_r+0x5c>
 800f6f6:	685a      	ldr	r2, [r3, #4]
 800f6f8:	604a      	str	r2, [r1, #4]
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	4093      	lsls	r3, r2
 800f6fe:	608b      	str	r3, [r1, #8]
 800f700:	4620      	mov	r0, r4
 800f702:	f000 ff07 	bl	8010514 <_Bfree>
 800f706:	69e3      	ldr	r3, [r4, #28]
 800f708:	2200      	movs	r2, #0
 800f70a:	601a      	str	r2, [r3, #0]
 800f70c:	1e3b      	subs	r3, r7, #0
 800f70e:	bfbb      	ittet	lt
 800f710:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f714:	9303      	strlt	r3, [sp, #12]
 800f716:	2300      	movge	r3, #0
 800f718:	2201      	movlt	r2, #1
 800f71a:	bfac      	ite	ge
 800f71c:	f8c8 3000 	strge.w	r3, [r8]
 800f720:	f8c8 2000 	strlt.w	r2, [r8]
 800f724:	4b9e      	ldr	r3, [pc, #632]	; (800f9a0 <_dtoa_r+0x2f0>)
 800f726:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f72a:	ea33 0308 	bics.w	r3, r3, r8
 800f72e:	d11b      	bne.n	800f768 <_dtoa_r+0xb8>
 800f730:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f732:	f242 730f 	movw	r3, #9999	; 0x270f
 800f736:	6013      	str	r3, [r2, #0]
 800f738:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f73c:	4333      	orrs	r3, r6
 800f73e:	f000 8593 	beq.w	8010268 <_dtoa_r+0xbb8>
 800f742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f744:	b963      	cbnz	r3, 800f760 <_dtoa_r+0xb0>
 800f746:	4b97      	ldr	r3, [pc, #604]	; (800f9a4 <_dtoa_r+0x2f4>)
 800f748:	e027      	b.n	800f79a <_dtoa_r+0xea>
 800f74a:	4b97      	ldr	r3, [pc, #604]	; (800f9a8 <_dtoa_r+0x2f8>)
 800f74c:	9300      	str	r3, [sp, #0]
 800f74e:	3308      	adds	r3, #8
 800f750:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f752:	6013      	str	r3, [r2, #0]
 800f754:	9800      	ldr	r0, [sp, #0]
 800f756:	b013      	add	sp, #76	; 0x4c
 800f758:	ecbd 8b04 	vpop	{d8-d9}
 800f75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f760:	4b90      	ldr	r3, [pc, #576]	; (800f9a4 <_dtoa_r+0x2f4>)
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	3303      	adds	r3, #3
 800f766:	e7f3      	b.n	800f750 <_dtoa_r+0xa0>
 800f768:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f76c:	2200      	movs	r2, #0
 800f76e:	ec51 0b17 	vmov	r0, r1, d7
 800f772:	eeb0 8a47 	vmov.f32	s16, s14
 800f776:	eef0 8a67 	vmov.f32	s17, s15
 800f77a:	2300      	movs	r3, #0
 800f77c:	f7f1 f9c4 	bl	8000b08 <__aeabi_dcmpeq>
 800f780:	4681      	mov	r9, r0
 800f782:	b160      	cbz	r0, 800f79e <_dtoa_r+0xee>
 800f784:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f786:	2301      	movs	r3, #1
 800f788:	6013      	str	r3, [r2, #0]
 800f78a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 8568 	beq.w	8010262 <_dtoa_r+0xbb2>
 800f792:	4b86      	ldr	r3, [pc, #536]	; (800f9ac <_dtoa_r+0x2fc>)
 800f794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f796:	6013      	str	r3, [r2, #0]
 800f798:	3b01      	subs	r3, #1
 800f79a:	9300      	str	r3, [sp, #0]
 800f79c:	e7da      	b.n	800f754 <_dtoa_r+0xa4>
 800f79e:	aa10      	add	r2, sp, #64	; 0x40
 800f7a0:	a911      	add	r1, sp, #68	; 0x44
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	eeb0 0a48 	vmov.f32	s0, s16
 800f7a8:	eef0 0a68 	vmov.f32	s1, s17
 800f7ac:	f001 fa4e 	bl	8010c4c <__d2b>
 800f7b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f7b4:	4682      	mov	sl, r0
 800f7b6:	2d00      	cmp	r5, #0
 800f7b8:	d07f      	beq.n	800f8ba <_dtoa_r+0x20a>
 800f7ba:	ee18 3a90 	vmov	r3, s17
 800f7be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f7c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f7c6:	ec51 0b18 	vmov	r0, r1, d8
 800f7ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f7ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f7d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	2200      	movs	r2, #0
 800f7da:	4b75      	ldr	r3, [pc, #468]	; (800f9b0 <_dtoa_r+0x300>)
 800f7dc:	f7f0 fd74 	bl	80002c8 <__aeabi_dsub>
 800f7e0:	a367      	add	r3, pc, #412	; (adr r3, 800f980 <_dtoa_r+0x2d0>)
 800f7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e6:	f7f0 ff27 	bl	8000638 <__aeabi_dmul>
 800f7ea:	a367      	add	r3, pc, #412	; (adr r3, 800f988 <_dtoa_r+0x2d8>)
 800f7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7f0:	f7f0 fd6c 	bl	80002cc <__adddf3>
 800f7f4:	4606      	mov	r6, r0
 800f7f6:	4628      	mov	r0, r5
 800f7f8:	460f      	mov	r7, r1
 800f7fa:	f7f0 feb3 	bl	8000564 <__aeabi_i2d>
 800f7fe:	a364      	add	r3, pc, #400	; (adr r3, 800f990 <_dtoa_r+0x2e0>)
 800f800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f804:	f7f0 ff18 	bl	8000638 <__aeabi_dmul>
 800f808:	4602      	mov	r2, r0
 800f80a:	460b      	mov	r3, r1
 800f80c:	4630      	mov	r0, r6
 800f80e:	4639      	mov	r1, r7
 800f810:	f7f0 fd5c 	bl	80002cc <__adddf3>
 800f814:	4606      	mov	r6, r0
 800f816:	460f      	mov	r7, r1
 800f818:	f7f1 f9be 	bl	8000b98 <__aeabi_d2iz>
 800f81c:	2200      	movs	r2, #0
 800f81e:	4683      	mov	fp, r0
 800f820:	2300      	movs	r3, #0
 800f822:	4630      	mov	r0, r6
 800f824:	4639      	mov	r1, r7
 800f826:	f7f1 f979 	bl	8000b1c <__aeabi_dcmplt>
 800f82a:	b148      	cbz	r0, 800f840 <_dtoa_r+0x190>
 800f82c:	4658      	mov	r0, fp
 800f82e:	f7f0 fe99 	bl	8000564 <__aeabi_i2d>
 800f832:	4632      	mov	r2, r6
 800f834:	463b      	mov	r3, r7
 800f836:	f7f1 f967 	bl	8000b08 <__aeabi_dcmpeq>
 800f83a:	b908      	cbnz	r0, 800f840 <_dtoa_r+0x190>
 800f83c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f840:	f1bb 0f16 	cmp.w	fp, #22
 800f844:	d857      	bhi.n	800f8f6 <_dtoa_r+0x246>
 800f846:	4b5b      	ldr	r3, [pc, #364]	; (800f9b4 <_dtoa_r+0x304>)
 800f848:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f850:	ec51 0b18 	vmov	r0, r1, d8
 800f854:	f7f1 f962 	bl	8000b1c <__aeabi_dcmplt>
 800f858:	2800      	cmp	r0, #0
 800f85a:	d04e      	beq.n	800f8fa <_dtoa_r+0x24a>
 800f85c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f860:	2300      	movs	r3, #0
 800f862:	930c      	str	r3, [sp, #48]	; 0x30
 800f864:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f866:	1b5b      	subs	r3, r3, r5
 800f868:	1e5a      	subs	r2, r3, #1
 800f86a:	bf45      	ittet	mi
 800f86c:	f1c3 0301 	rsbmi	r3, r3, #1
 800f870:	9305      	strmi	r3, [sp, #20]
 800f872:	2300      	movpl	r3, #0
 800f874:	2300      	movmi	r3, #0
 800f876:	9206      	str	r2, [sp, #24]
 800f878:	bf54      	ite	pl
 800f87a:	9305      	strpl	r3, [sp, #20]
 800f87c:	9306      	strmi	r3, [sp, #24]
 800f87e:	f1bb 0f00 	cmp.w	fp, #0
 800f882:	db3c      	blt.n	800f8fe <_dtoa_r+0x24e>
 800f884:	9b06      	ldr	r3, [sp, #24]
 800f886:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f88a:	445b      	add	r3, fp
 800f88c:	9306      	str	r3, [sp, #24]
 800f88e:	2300      	movs	r3, #0
 800f890:	9308      	str	r3, [sp, #32]
 800f892:	9b07      	ldr	r3, [sp, #28]
 800f894:	2b09      	cmp	r3, #9
 800f896:	d868      	bhi.n	800f96a <_dtoa_r+0x2ba>
 800f898:	2b05      	cmp	r3, #5
 800f89a:	bfc4      	itt	gt
 800f89c:	3b04      	subgt	r3, #4
 800f89e:	9307      	strgt	r3, [sp, #28]
 800f8a0:	9b07      	ldr	r3, [sp, #28]
 800f8a2:	f1a3 0302 	sub.w	r3, r3, #2
 800f8a6:	bfcc      	ite	gt
 800f8a8:	2500      	movgt	r5, #0
 800f8aa:	2501      	movle	r5, #1
 800f8ac:	2b03      	cmp	r3, #3
 800f8ae:	f200 8085 	bhi.w	800f9bc <_dtoa_r+0x30c>
 800f8b2:	e8df f003 	tbb	[pc, r3]
 800f8b6:	3b2e      	.short	0x3b2e
 800f8b8:	5839      	.short	0x5839
 800f8ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f8be:	441d      	add	r5, r3
 800f8c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f8c4:	2b20      	cmp	r3, #32
 800f8c6:	bfc1      	itttt	gt
 800f8c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f8cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800f8d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f8d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f8d8:	bfd6      	itet	le
 800f8da:	f1c3 0320 	rsble	r3, r3, #32
 800f8de:	ea48 0003 	orrgt.w	r0, r8, r3
 800f8e2:	fa06 f003 	lslle.w	r0, r6, r3
 800f8e6:	f7f0 fe2d 	bl	8000544 <__aeabi_ui2d>
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f8f0:	3d01      	subs	r5, #1
 800f8f2:	920e      	str	r2, [sp, #56]	; 0x38
 800f8f4:	e76f      	b.n	800f7d6 <_dtoa_r+0x126>
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	e7b3      	b.n	800f862 <_dtoa_r+0x1b2>
 800f8fa:	900c      	str	r0, [sp, #48]	; 0x30
 800f8fc:	e7b2      	b.n	800f864 <_dtoa_r+0x1b4>
 800f8fe:	9b05      	ldr	r3, [sp, #20]
 800f900:	eba3 030b 	sub.w	r3, r3, fp
 800f904:	9305      	str	r3, [sp, #20]
 800f906:	f1cb 0300 	rsb	r3, fp, #0
 800f90a:	9308      	str	r3, [sp, #32]
 800f90c:	2300      	movs	r3, #0
 800f90e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f910:	e7bf      	b.n	800f892 <_dtoa_r+0x1e2>
 800f912:	2300      	movs	r3, #0
 800f914:	9309      	str	r3, [sp, #36]	; 0x24
 800f916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f918:	2b00      	cmp	r3, #0
 800f91a:	dc52      	bgt.n	800f9c2 <_dtoa_r+0x312>
 800f91c:	2301      	movs	r3, #1
 800f91e:	9301      	str	r3, [sp, #4]
 800f920:	9304      	str	r3, [sp, #16]
 800f922:	461a      	mov	r2, r3
 800f924:	920a      	str	r2, [sp, #40]	; 0x28
 800f926:	e00b      	b.n	800f940 <_dtoa_r+0x290>
 800f928:	2301      	movs	r3, #1
 800f92a:	e7f3      	b.n	800f914 <_dtoa_r+0x264>
 800f92c:	2300      	movs	r3, #0
 800f92e:	9309      	str	r3, [sp, #36]	; 0x24
 800f930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f932:	445b      	add	r3, fp
 800f934:	9301      	str	r3, [sp, #4]
 800f936:	3301      	adds	r3, #1
 800f938:	2b01      	cmp	r3, #1
 800f93a:	9304      	str	r3, [sp, #16]
 800f93c:	bfb8      	it	lt
 800f93e:	2301      	movlt	r3, #1
 800f940:	69e0      	ldr	r0, [r4, #28]
 800f942:	2100      	movs	r1, #0
 800f944:	2204      	movs	r2, #4
 800f946:	f102 0614 	add.w	r6, r2, #20
 800f94a:	429e      	cmp	r6, r3
 800f94c:	d93d      	bls.n	800f9ca <_dtoa_r+0x31a>
 800f94e:	6041      	str	r1, [r0, #4]
 800f950:	4620      	mov	r0, r4
 800f952:	f000 fd9f 	bl	8010494 <_Balloc>
 800f956:	9000      	str	r0, [sp, #0]
 800f958:	2800      	cmp	r0, #0
 800f95a:	d139      	bne.n	800f9d0 <_dtoa_r+0x320>
 800f95c:	4b16      	ldr	r3, [pc, #88]	; (800f9b8 <_dtoa_r+0x308>)
 800f95e:	4602      	mov	r2, r0
 800f960:	f240 11af 	movw	r1, #431	; 0x1af
 800f964:	e6bd      	b.n	800f6e2 <_dtoa_r+0x32>
 800f966:	2301      	movs	r3, #1
 800f968:	e7e1      	b.n	800f92e <_dtoa_r+0x27e>
 800f96a:	2501      	movs	r5, #1
 800f96c:	2300      	movs	r3, #0
 800f96e:	9307      	str	r3, [sp, #28]
 800f970:	9509      	str	r5, [sp, #36]	; 0x24
 800f972:	f04f 33ff 	mov.w	r3, #4294967295
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	9304      	str	r3, [sp, #16]
 800f97a:	2200      	movs	r2, #0
 800f97c:	2312      	movs	r3, #18
 800f97e:	e7d1      	b.n	800f924 <_dtoa_r+0x274>
 800f980:	636f4361 	.word	0x636f4361
 800f984:	3fd287a7 	.word	0x3fd287a7
 800f988:	8b60c8b3 	.word	0x8b60c8b3
 800f98c:	3fc68a28 	.word	0x3fc68a28
 800f990:	509f79fb 	.word	0x509f79fb
 800f994:	3fd34413 	.word	0x3fd34413
 800f998:	08013186 	.word	0x08013186
 800f99c:	0801319d 	.word	0x0801319d
 800f9a0:	7ff00000 	.word	0x7ff00000
 800f9a4:	08013182 	.word	0x08013182
 800f9a8:	08013179 	.word	0x08013179
 800f9ac:	08013151 	.word	0x08013151
 800f9b0:	3ff80000 	.word	0x3ff80000
 800f9b4:	08013288 	.word	0x08013288
 800f9b8:	080131f5 	.word	0x080131f5
 800f9bc:	2301      	movs	r3, #1
 800f9be:	9309      	str	r3, [sp, #36]	; 0x24
 800f9c0:	e7d7      	b.n	800f972 <_dtoa_r+0x2c2>
 800f9c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9c4:	9301      	str	r3, [sp, #4]
 800f9c6:	9304      	str	r3, [sp, #16]
 800f9c8:	e7ba      	b.n	800f940 <_dtoa_r+0x290>
 800f9ca:	3101      	adds	r1, #1
 800f9cc:	0052      	lsls	r2, r2, #1
 800f9ce:	e7ba      	b.n	800f946 <_dtoa_r+0x296>
 800f9d0:	69e3      	ldr	r3, [r4, #28]
 800f9d2:	9a00      	ldr	r2, [sp, #0]
 800f9d4:	601a      	str	r2, [r3, #0]
 800f9d6:	9b04      	ldr	r3, [sp, #16]
 800f9d8:	2b0e      	cmp	r3, #14
 800f9da:	f200 80a8 	bhi.w	800fb2e <_dtoa_r+0x47e>
 800f9de:	2d00      	cmp	r5, #0
 800f9e0:	f000 80a5 	beq.w	800fb2e <_dtoa_r+0x47e>
 800f9e4:	f1bb 0f00 	cmp.w	fp, #0
 800f9e8:	dd38      	ble.n	800fa5c <_dtoa_r+0x3ac>
 800f9ea:	4bc0      	ldr	r3, [pc, #768]	; (800fcec <_dtoa_r+0x63c>)
 800f9ec:	f00b 020f 	and.w	r2, fp, #15
 800f9f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f9f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f9f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f9fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800fa00:	d019      	beq.n	800fa36 <_dtoa_r+0x386>
 800fa02:	4bbb      	ldr	r3, [pc, #748]	; (800fcf0 <_dtoa_r+0x640>)
 800fa04:	ec51 0b18 	vmov	r0, r1, d8
 800fa08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fa0c:	f7f0 ff3e 	bl	800088c <__aeabi_ddiv>
 800fa10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa14:	f008 080f 	and.w	r8, r8, #15
 800fa18:	2503      	movs	r5, #3
 800fa1a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800fcf0 <_dtoa_r+0x640>
 800fa1e:	f1b8 0f00 	cmp.w	r8, #0
 800fa22:	d10a      	bne.n	800fa3a <_dtoa_r+0x38a>
 800fa24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa28:	4632      	mov	r2, r6
 800fa2a:	463b      	mov	r3, r7
 800fa2c:	f7f0 ff2e 	bl	800088c <__aeabi_ddiv>
 800fa30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa34:	e02b      	b.n	800fa8e <_dtoa_r+0x3de>
 800fa36:	2502      	movs	r5, #2
 800fa38:	e7ef      	b.n	800fa1a <_dtoa_r+0x36a>
 800fa3a:	f018 0f01 	tst.w	r8, #1
 800fa3e:	d008      	beq.n	800fa52 <_dtoa_r+0x3a2>
 800fa40:	4630      	mov	r0, r6
 800fa42:	4639      	mov	r1, r7
 800fa44:	e9d9 2300 	ldrd	r2, r3, [r9]
 800fa48:	f7f0 fdf6 	bl	8000638 <__aeabi_dmul>
 800fa4c:	3501      	adds	r5, #1
 800fa4e:	4606      	mov	r6, r0
 800fa50:	460f      	mov	r7, r1
 800fa52:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fa56:	f109 0908 	add.w	r9, r9, #8
 800fa5a:	e7e0      	b.n	800fa1e <_dtoa_r+0x36e>
 800fa5c:	f000 809f 	beq.w	800fb9e <_dtoa_r+0x4ee>
 800fa60:	f1cb 0600 	rsb	r6, fp, #0
 800fa64:	4ba1      	ldr	r3, [pc, #644]	; (800fcec <_dtoa_r+0x63c>)
 800fa66:	4fa2      	ldr	r7, [pc, #648]	; (800fcf0 <_dtoa_r+0x640>)
 800fa68:	f006 020f 	and.w	r2, r6, #15
 800fa6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa74:	ec51 0b18 	vmov	r0, r1, d8
 800fa78:	f7f0 fdde 	bl	8000638 <__aeabi_dmul>
 800fa7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fa80:	1136      	asrs	r6, r6, #4
 800fa82:	2300      	movs	r3, #0
 800fa84:	2502      	movs	r5, #2
 800fa86:	2e00      	cmp	r6, #0
 800fa88:	d17e      	bne.n	800fb88 <_dtoa_r+0x4d8>
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d1d0      	bne.n	800fa30 <_dtoa_r+0x380>
 800fa8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa90:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	f000 8084 	beq.w	800fba2 <_dtoa_r+0x4f2>
 800fa9a:	4b96      	ldr	r3, [pc, #600]	; (800fcf4 <_dtoa_r+0x644>)
 800fa9c:	2200      	movs	r2, #0
 800fa9e:	4640      	mov	r0, r8
 800faa0:	4649      	mov	r1, r9
 800faa2:	f7f1 f83b 	bl	8000b1c <__aeabi_dcmplt>
 800faa6:	2800      	cmp	r0, #0
 800faa8:	d07b      	beq.n	800fba2 <_dtoa_r+0x4f2>
 800faaa:	9b04      	ldr	r3, [sp, #16]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d078      	beq.n	800fba2 <_dtoa_r+0x4f2>
 800fab0:	9b01      	ldr	r3, [sp, #4]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	dd39      	ble.n	800fb2a <_dtoa_r+0x47a>
 800fab6:	4b90      	ldr	r3, [pc, #576]	; (800fcf8 <_dtoa_r+0x648>)
 800fab8:	2200      	movs	r2, #0
 800faba:	4640      	mov	r0, r8
 800fabc:	4649      	mov	r1, r9
 800fabe:	f7f0 fdbb 	bl	8000638 <__aeabi_dmul>
 800fac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fac6:	9e01      	ldr	r6, [sp, #4]
 800fac8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800facc:	3501      	adds	r5, #1
 800face:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fad2:	4628      	mov	r0, r5
 800fad4:	f7f0 fd46 	bl	8000564 <__aeabi_i2d>
 800fad8:	4642      	mov	r2, r8
 800fada:	464b      	mov	r3, r9
 800fadc:	f7f0 fdac 	bl	8000638 <__aeabi_dmul>
 800fae0:	4b86      	ldr	r3, [pc, #536]	; (800fcfc <_dtoa_r+0x64c>)
 800fae2:	2200      	movs	r2, #0
 800fae4:	f7f0 fbf2 	bl	80002cc <__adddf3>
 800fae8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800faec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800faf0:	9303      	str	r3, [sp, #12]
 800faf2:	2e00      	cmp	r6, #0
 800faf4:	d158      	bne.n	800fba8 <_dtoa_r+0x4f8>
 800faf6:	4b82      	ldr	r3, [pc, #520]	; (800fd00 <_dtoa_r+0x650>)
 800faf8:	2200      	movs	r2, #0
 800fafa:	4640      	mov	r0, r8
 800fafc:	4649      	mov	r1, r9
 800fafe:	f7f0 fbe3 	bl	80002c8 <__aeabi_dsub>
 800fb02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb06:	4680      	mov	r8, r0
 800fb08:	4689      	mov	r9, r1
 800fb0a:	f7f1 f825 	bl	8000b58 <__aeabi_dcmpgt>
 800fb0e:	2800      	cmp	r0, #0
 800fb10:	f040 8296 	bne.w	8010040 <_dtoa_r+0x990>
 800fb14:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fb18:	4640      	mov	r0, r8
 800fb1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb1e:	4649      	mov	r1, r9
 800fb20:	f7f0 fffc 	bl	8000b1c <__aeabi_dcmplt>
 800fb24:	2800      	cmp	r0, #0
 800fb26:	f040 8289 	bne.w	801003c <_dtoa_r+0x98c>
 800fb2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fb2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	f2c0 814e 	blt.w	800fdd2 <_dtoa_r+0x722>
 800fb36:	f1bb 0f0e 	cmp.w	fp, #14
 800fb3a:	f300 814a 	bgt.w	800fdd2 <_dtoa_r+0x722>
 800fb3e:	4b6b      	ldr	r3, [pc, #428]	; (800fcec <_dtoa_r+0x63c>)
 800fb40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fb44:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fb48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	f280 80dc 	bge.w	800fd08 <_dtoa_r+0x658>
 800fb50:	9b04      	ldr	r3, [sp, #16]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f300 80d8 	bgt.w	800fd08 <_dtoa_r+0x658>
 800fb58:	f040 826f 	bne.w	801003a <_dtoa_r+0x98a>
 800fb5c:	4b68      	ldr	r3, [pc, #416]	; (800fd00 <_dtoa_r+0x650>)
 800fb5e:	2200      	movs	r2, #0
 800fb60:	4640      	mov	r0, r8
 800fb62:	4649      	mov	r1, r9
 800fb64:	f7f0 fd68 	bl	8000638 <__aeabi_dmul>
 800fb68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb6c:	f7f0 ffea 	bl	8000b44 <__aeabi_dcmpge>
 800fb70:	9e04      	ldr	r6, [sp, #16]
 800fb72:	4637      	mov	r7, r6
 800fb74:	2800      	cmp	r0, #0
 800fb76:	f040 8245 	bne.w	8010004 <_dtoa_r+0x954>
 800fb7a:	9d00      	ldr	r5, [sp, #0]
 800fb7c:	2331      	movs	r3, #49	; 0x31
 800fb7e:	f805 3b01 	strb.w	r3, [r5], #1
 800fb82:	f10b 0b01 	add.w	fp, fp, #1
 800fb86:	e241      	b.n	801000c <_dtoa_r+0x95c>
 800fb88:	07f2      	lsls	r2, r6, #31
 800fb8a:	d505      	bpl.n	800fb98 <_dtoa_r+0x4e8>
 800fb8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb90:	f7f0 fd52 	bl	8000638 <__aeabi_dmul>
 800fb94:	3501      	adds	r5, #1
 800fb96:	2301      	movs	r3, #1
 800fb98:	1076      	asrs	r6, r6, #1
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	e773      	b.n	800fa86 <_dtoa_r+0x3d6>
 800fb9e:	2502      	movs	r5, #2
 800fba0:	e775      	b.n	800fa8e <_dtoa_r+0x3de>
 800fba2:	9e04      	ldr	r6, [sp, #16]
 800fba4:	465f      	mov	r7, fp
 800fba6:	e792      	b.n	800face <_dtoa_r+0x41e>
 800fba8:	9900      	ldr	r1, [sp, #0]
 800fbaa:	4b50      	ldr	r3, [pc, #320]	; (800fcec <_dtoa_r+0x63c>)
 800fbac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fbb0:	4431      	add	r1, r6
 800fbb2:	9102      	str	r1, [sp, #8]
 800fbb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fbb6:	eeb0 9a47 	vmov.f32	s18, s14
 800fbba:	eef0 9a67 	vmov.f32	s19, s15
 800fbbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800fbc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fbc6:	2900      	cmp	r1, #0
 800fbc8:	d044      	beq.n	800fc54 <_dtoa_r+0x5a4>
 800fbca:	494e      	ldr	r1, [pc, #312]	; (800fd04 <_dtoa_r+0x654>)
 800fbcc:	2000      	movs	r0, #0
 800fbce:	f7f0 fe5d 	bl	800088c <__aeabi_ddiv>
 800fbd2:	ec53 2b19 	vmov	r2, r3, d9
 800fbd6:	f7f0 fb77 	bl	80002c8 <__aeabi_dsub>
 800fbda:	9d00      	ldr	r5, [sp, #0]
 800fbdc:	ec41 0b19 	vmov	d9, r0, r1
 800fbe0:	4649      	mov	r1, r9
 800fbe2:	4640      	mov	r0, r8
 800fbe4:	f7f0 ffd8 	bl	8000b98 <__aeabi_d2iz>
 800fbe8:	4606      	mov	r6, r0
 800fbea:	f7f0 fcbb 	bl	8000564 <__aeabi_i2d>
 800fbee:	4602      	mov	r2, r0
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	4640      	mov	r0, r8
 800fbf4:	4649      	mov	r1, r9
 800fbf6:	f7f0 fb67 	bl	80002c8 <__aeabi_dsub>
 800fbfa:	3630      	adds	r6, #48	; 0x30
 800fbfc:	f805 6b01 	strb.w	r6, [r5], #1
 800fc00:	ec53 2b19 	vmov	r2, r3, d9
 800fc04:	4680      	mov	r8, r0
 800fc06:	4689      	mov	r9, r1
 800fc08:	f7f0 ff88 	bl	8000b1c <__aeabi_dcmplt>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	d164      	bne.n	800fcda <_dtoa_r+0x62a>
 800fc10:	4642      	mov	r2, r8
 800fc12:	464b      	mov	r3, r9
 800fc14:	4937      	ldr	r1, [pc, #220]	; (800fcf4 <_dtoa_r+0x644>)
 800fc16:	2000      	movs	r0, #0
 800fc18:	f7f0 fb56 	bl	80002c8 <__aeabi_dsub>
 800fc1c:	ec53 2b19 	vmov	r2, r3, d9
 800fc20:	f7f0 ff7c 	bl	8000b1c <__aeabi_dcmplt>
 800fc24:	2800      	cmp	r0, #0
 800fc26:	f040 80b6 	bne.w	800fd96 <_dtoa_r+0x6e6>
 800fc2a:	9b02      	ldr	r3, [sp, #8]
 800fc2c:	429d      	cmp	r5, r3
 800fc2e:	f43f af7c 	beq.w	800fb2a <_dtoa_r+0x47a>
 800fc32:	4b31      	ldr	r3, [pc, #196]	; (800fcf8 <_dtoa_r+0x648>)
 800fc34:	ec51 0b19 	vmov	r0, r1, d9
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f7f0 fcfd 	bl	8000638 <__aeabi_dmul>
 800fc3e:	4b2e      	ldr	r3, [pc, #184]	; (800fcf8 <_dtoa_r+0x648>)
 800fc40:	ec41 0b19 	vmov	d9, r0, r1
 800fc44:	2200      	movs	r2, #0
 800fc46:	4640      	mov	r0, r8
 800fc48:	4649      	mov	r1, r9
 800fc4a:	f7f0 fcf5 	bl	8000638 <__aeabi_dmul>
 800fc4e:	4680      	mov	r8, r0
 800fc50:	4689      	mov	r9, r1
 800fc52:	e7c5      	b.n	800fbe0 <_dtoa_r+0x530>
 800fc54:	ec51 0b17 	vmov	r0, r1, d7
 800fc58:	f7f0 fcee 	bl	8000638 <__aeabi_dmul>
 800fc5c:	9b02      	ldr	r3, [sp, #8]
 800fc5e:	9d00      	ldr	r5, [sp, #0]
 800fc60:	930f      	str	r3, [sp, #60]	; 0x3c
 800fc62:	ec41 0b19 	vmov	d9, r0, r1
 800fc66:	4649      	mov	r1, r9
 800fc68:	4640      	mov	r0, r8
 800fc6a:	f7f0 ff95 	bl	8000b98 <__aeabi_d2iz>
 800fc6e:	4606      	mov	r6, r0
 800fc70:	f7f0 fc78 	bl	8000564 <__aeabi_i2d>
 800fc74:	3630      	adds	r6, #48	; 0x30
 800fc76:	4602      	mov	r2, r0
 800fc78:	460b      	mov	r3, r1
 800fc7a:	4640      	mov	r0, r8
 800fc7c:	4649      	mov	r1, r9
 800fc7e:	f7f0 fb23 	bl	80002c8 <__aeabi_dsub>
 800fc82:	f805 6b01 	strb.w	r6, [r5], #1
 800fc86:	9b02      	ldr	r3, [sp, #8]
 800fc88:	429d      	cmp	r5, r3
 800fc8a:	4680      	mov	r8, r0
 800fc8c:	4689      	mov	r9, r1
 800fc8e:	f04f 0200 	mov.w	r2, #0
 800fc92:	d124      	bne.n	800fcde <_dtoa_r+0x62e>
 800fc94:	4b1b      	ldr	r3, [pc, #108]	; (800fd04 <_dtoa_r+0x654>)
 800fc96:	ec51 0b19 	vmov	r0, r1, d9
 800fc9a:	f7f0 fb17 	bl	80002cc <__adddf3>
 800fc9e:	4602      	mov	r2, r0
 800fca0:	460b      	mov	r3, r1
 800fca2:	4640      	mov	r0, r8
 800fca4:	4649      	mov	r1, r9
 800fca6:	f7f0 ff57 	bl	8000b58 <__aeabi_dcmpgt>
 800fcaa:	2800      	cmp	r0, #0
 800fcac:	d173      	bne.n	800fd96 <_dtoa_r+0x6e6>
 800fcae:	ec53 2b19 	vmov	r2, r3, d9
 800fcb2:	4914      	ldr	r1, [pc, #80]	; (800fd04 <_dtoa_r+0x654>)
 800fcb4:	2000      	movs	r0, #0
 800fcb6:	f7f0 fb07 	bl	80002c8 <__aeabi_dsub>
 800fcba:	4602      	mov	r2, r0
 800fcbc:	460b      	mov	r3, r1
 800fcbe:	4640      	mov	r0, r8
 800fcc0:	4649      	mov	r1, r9
 800fcc2:	f7f0 ff2b 	bl	8000b1c <__aeabi_dcmplt>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	f43f af2f 	beq.w	800fb2a <_dtoa_r+0x47a>
 800fccc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800fcce:	1e6b      	subs	r3, r5, #1
 800fcd0:	930f      	str	r3, [sp, #60]	; 0x3c
 800fcd2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fcd6:	2b30      	cmp	r3, #48	; 0x30
 800fcd8:	d0f8      	beq.n	800fccc <_dtoa_r+0x61c>
 800fcda:	46bb      	mov	fp, r7
 800fcdc:	e04a      	b.n	800fd74 <_dtoa_r+0x6c4>
 800fcde:	4b06      	ldr	r3, [pc, #24]	; (800fcf8 <_dtoa_r+0x648>)
 800fce0:	f7f0 fcaa 	bl	8000638 <__aeabi_dmul>
 800fce4:	4680      	mov	r8, r0
 800fce6:	4689      	mov	r9, r1
 800fce8:	e7bd      	b.n	800fc66 <_dtoa_r+0x5b6>
 800fcea:	bf00      	nop
 800fcec:	08013288 	.word	0x08013288
 800fcf0:	08013260 	.word	0x08013260
 800fcf4:	3ff00000 	.word	0x3ff00000
 800fcf8:	40240000 	.word	0x40240000
 800fcfc:	401c0000 	.word	0x401c0000
 800fd00:	40140000 	.word	0x40140000
 800fd04:	3fe00000 	.word	0x3fe00000
 800fd08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fd0c:	9d00      	ldr	r5, [sp, #0]
 800fd0e:	4642      	mov	r2, r8
 800fd10:	464b      	mov	r3, r9
 800fd12:	4630      	mov	r0, r6
 800fd14:	4639      	mov	r1, r7
 800fd16:	f7f0 fdb9 	bl	800088c <__aeabi_ddiv>
 800fd1a:	f7f0 ff3d 	bl	8000b98 <__aeabi_d2iz>
 800fd1e:	9001      	str	r0, [sp, #4]
 800fd20:	f7f0 fc20 	bl	8000564 <__aeabi_i2d>
 800fd24:	4642      	mov	r2, r8
 800fd26:	464b      	mov	r3, r9
 800fd28:	f7f0 fc86 	bl	8000638 <__aeabi_dmul>
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	460b      	mov	r3, r1
 800fd30:	4630      	mov	r0, r6
 800fd32:	4639      	mov	r1, r7
 800fd34:	f7f0 fac8 	bl	80002c8 <__aeabi_dsub>
 800fd38:	9e01      	ldr	r6, [sp, #4]
 800fd3a:	9f04      	ldr	r7, [sp, #16]
 800fd3c:	3630      	adds	r6, #48	; 0x30
 800fd3e:	f805 6b01 	strb.w	r6, [r5], #1
 800fd42:	9e00      	ldr	r6, [sp, #0]
 800fd44:	1bae      	subs	r6, r5, r6
 800fd46:	42b7      	cmp	r7, r6
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	d134      	bne.n	800fdb8 <_dtoa_r+0x708>
 800fd4e:	f7f0 fabd 	bl	80002cc <__adddf3>
 800fd52:	4642      	mov	r2, r8
 800fd54:	464b      	mov	r3, r9
 800fd56:	4606      	mov	r6, r0
 800fd58:	460f      	mov	r7, r1
 800fd5a:	f7f0 fefd 	bl	8000b58 <__aeabi_dcmpgt>
 800fd5e:	b9c8      	cbnz	r0, 800fd94 <_dtoa_r+0x6e4>
 800fd60:	4642      	mov	r2, r8
 800fd62:	464b      	mov	r3, r9
 800fd64:	4630      	mov	r0, r6
 800fd66:	4639      	mov	r1, r7
 800fd68:	f7f0 fece 	bl	8000b08 <__aeabi_dcmpeq>
 800fd6c:	b110      	cbz	r0, 800fd74 <_dtoa_r+0x6c4>
 800fd6e:	9b01      	ldr	r3, [sp, #4]
 800fd70:	07db      	lsls	r3, r3, #31
 800fd72:	d40f      	bmi.n	800fd94 <_dtoa_r+0x6e4>
 800fd74:	4651      	mov	r1, sl
 800fd76:	4620      	mov	r0, r4
 800fd78:	f000 fbcc 	bl	8010514 <_Bfree>
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd80:	702b      	strb	r3, [r5, #0]
 800fd82:	f10b 0301 	add.w	r3, fp, #1
 800fd86:	6013      	str	r3, [r2, #0]
 800fd88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f43f ace2 	beq.w	800f754 <_dtoa_r+0xa4>
 800fd90:	601d      	str	r5, [r3, #0]
 800fd92:	e4df      	b.n	800f754 <_dtoa_r+0xa4>
 800fd94:	465f      	mov	r7, fp
 800fd96:	462b      	mov	r3, r5
 800fd98:	461d      	mov	r5, r3
 800fd9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fd9e:	2a39      	cmp	r2, #57	; 0x39
 800fda0:	d106      	bne.n	800fdb0 <_dtoa_r+0x700>
 800fda2:	9a00      	ldr	r2, [sp, #0]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d1f7      	bne.n	800fd98 <_dtoa_r+0x6e8>
 800fda8:	9900      	ldr	r1, [sp, #0]
 800fdaa:	2230      	movs	r2, #48	; 0x30
 800fdac:	3701      	adds	r7, #1
 800fdae:	700a      	strb	r2, [r1, #0]
 800fdb0:	781a      	ldrb	r2, [r3, #0]
 800fdb2:	3201      	adds	r2, #1
 800fdb4:	701a      	strb	r2, [r3, #0]
 800fdb6:	e790      	b.n	800fcda <_dtoa_r+0x62a>
 800fdb8:	4ba3      	ldr	r3, [pc, #652]	; (8010048 <_dtoa_r+0x998>)
 800fdba:	2200      	movs	r2, #0
 800fdbc:	f7f0 fc3c 	bl	8000638 <__aeabi_dmul>
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	4606      	mov	r6, r0
 800fdc6:	460f      	mov	r7, r1
 800fdc8:	f7f0 fe9e 	bl	8000b08 <__aeabi_dcmpeq>
 800fdcc:	2800      	cmp	r0, #0
 800fdce:	d09e      	beq.n	800fd0e <_dtoa_r+0x65e>
 800fdd0:	e7d0      	b.n	800fd74 <_dtoa_r+0x6c4>
 800fdd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdd4:	2a00      	cmp	r2, #0
 800fdd6:	f000 80ca 	beq.w	800ff6e <_dtoa_r+0x8be>
 800fdda:	9a07      	ldr	r2, [sp, #28]
 800fddc:	2a01      	cmp	r2, #1
 800fdde:	f300 80ad 	bgt.w	800ff3c <_dtoa_r+0x88c>
 800fde2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fde4:	2a00      	cmp	r2, #0
 800fde6:	f000 80a5 	beq.w	800ff34 <_dtoa_r+0x884>
 800fdea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fdee:	9e08      	ldr	r6, [sp, #32]
 800fdf0:	9d05      	ldr	r5, [sp, #20]
 800fdf2:	9a05      	ldr	r2, [sp, #20]
 800fdf4:	441a      	add	r2, r3
 800fdf6:	9205      	str	r2, [sp, #20]
 800fdf8:	9a06      	ldr	r2, [sp, #24]
 800fdfa:	2101      	movs	r1, #1
 800fdfc:	441a      	add	r2, r3
 800fdfe:	4620      	mov	r0, r4
 800fe00:	9206      	str	r2, [sp, #24]
 800fe02:	f000 fc87 	bl	8010714 <__i2b>
 800fe06:	4607      	mov	r7, r0
 800fe08:	b165      	cbz	r5, 800fe24 <_dtoa_r+0x774>
 800fe0a:	9b06      	ldr	r3, [sp, #24]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	dd09      	ble.n	800fe24 <_dtoa_r+0x774>
 800fe10:	42ab      	cmp	r3, r5
 800fe12:	9a05      	ldr	r2, [sp, #20]
 800fe14:	bfa8      	it	ge
 800fe16:	462b      	movge	r3, r5
 800fe18:	1ad2      	subs	r2, r2, r3
 800fe1a:	9205      	str	r2, [sp, #20]
 800fe1c:	9a06      	ldr	r2, [sp, #24]
 800fe1e:	1aed      	subs	r5, r5, r3
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	9306      	str	r3, [sp, #24]
 800fe24:	9b08      	ldr	r3, [sp, #32]
 800fe26:	b1f3      	cbz	r3, 800fe66 <_dtoa_r+0x7b6>
 800fe28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	f000 80a3 	beq.w	800ff76 <_dtoa_r+0x8c6>
 800fe30:	2e00      	cmp	r6, #0
 800fe32:	dd10      	ble.n	800fe56 <_dtoa_r+0x7a6>
 800fe34:	4639      	mov	r1, r7
 800fe36:	4632      	mov	r2, r6
 800fe38:	4620      	mov	r0, r4
 800fe3a:	f000 fd2b 	bl	8010894 <__pow5mult>
 800fe3e:	4652      	mov	r2, sl
 800fe40:	4601      	mov	r1, r0
 800fe42:	4607      	mov	r7, r0
 800fe44:	4620      	mov	r0, r4
 800fe46:	f000 fc7b 	bl	8010740 <__multiply>
 800fe4a:	4651      	mov	r1, sl
 800fe4c:	4680      	mov	r8, r0
 800fe4e:	4620      	mov	r0, r4
 800fe50:	f000 fb60 	bl	8010514 <_Bfree>
 800fe54:	46c2      	mov	sl, r8
 800fe56:	9b08      	ldr	r3, [sp, #32]
 800fe58:	1b9a      	subs	r2, r3, r6
 800fe5a:	d004      	beq.n	800fe66 <_dtoa_r+0x7b6>
 800fe5c:	4651      	mov	r1, sl
 800fe5e:	4620      	mov	r0, r4
 800fe60:	f000 fd18 	bl	8010894 <__pow5mult>
 800fe64:	4682      	mov	sl, r0
 800fe66:	2101      	movs	r1, #1
 800fe68:	4620      	mov	r0, r4
 800fe6a:	f000 fc53 	bl	8010714 <__i2b>
 800fe6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	4606      	mov	r6, r0
 800fe74:	f340 8081 	ble.w	800ff7a <_dtoa_r+0x8ca>
 800fe78:	461a      	mov	r2, r3
 800fe7a:	4601      	mov	r1, r0
 800fe7c:	4620      	mov	r0, r4
 800fe7e:	f000 fd09 	bl	8010894 <__pow5mult>
 800fe82:	9b07      	ldr	r3, [sp, #28]
 800fe84:	2b01      	cmp	r3, #1
 800fe86:	4606      	mov	r6, r0
 800fe88:	dd7a      	ble.n	800ff80 <_dtoa_r+0x8d0>
 800fe8a:	f04f 0800 	mov.w	r8, #0
 800fe8e:	6933      	ldr	r3, [r6, #16]
 800fe90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fe94:	6918      	ldr	r0, [r3, #16]
 800fe96:	f000 fbef 	bl	8010678 <__hi0bits>
 800fe9a:	f1c0 0020 	rsb	r0, r0, #32
 800fe9e:	9b06      	ldr	r3, [sp, #24]
 800fea0:	4418      	add	r0, r3
 800fea2:	f010 001f 	ands.w	r0, r0, #31
 800fea6:	f000 8094 	beq.w	800ffd2 <_dtoa_r+0x922>
 800feaa:	f1c0 0320 	rsb	r3, r0, #32
 800feae:	2b04      	cmp	r3, #4
 800feb0:	f340 8085 	ble.w	800ffbe <_dtoa_r+0x90e>
 800feb4:	9b05      	ldr	r3, [sp, #20]
 800feb6:	f1c0 001c 	rsb	r0, r0, #28
 800feba:	4403      	add	r3, r0
 800febc:	9305      	str	r3, [sp, #20]
 800febe:	9b06      	ldr	r3, [sp, #24]
 800fec0:	4403      	add	r3, r0
 800fec2:	4405      	add	r5, r0
 800fec4:	9306      	str	r3, [sp, #24]
 800fec6:	9b05      	ldr	r3, [sp, #20]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	dd05      	ble.n	800fed8 <_dtoa_r+0x828>
 800fecc:	4651      	mov	r1, sl
 800fece:	461a      	mov	r2, r3
 800fed0:	4620      	mov	r0, r4
 800fed2:	f000 fd39 	bl	8010948 <__lshift>
 800fed6:	4682      	mov	sl, r0
 800fed8:	9b06      	ldr	r3, [sp, #24]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	dd05      	ble.n	800feea <_dtoa_r+0x83a>
 800fede:	4631      	mov	r1, r6
 800fee0:	461a      	mov	r2, r3
 800fee2:	4620      	mov	r0, r4
 800fee4:	f000 fd30 	bl	8010948 <__lshift>
 800fee8:	4606      	mov	r6, r0
 800feea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800feec:	2b00      	cmp	r3, #0
 800feee:	d072      	beq.n	800ffd6 <_dtoa_r+0x926>
 800fef0:	4631      	mov	r1, r6
 800fef2:	4650      	mov	r0, sl
 800fef4:	f000 fd94 	bl	8010a20 <__mcmp>
 800fef8:	2800      	cmp	r0, #0
 800fefa:	da6c      	bge.n	800ffd6 <_dtoa_r+0x926>
 800fefc:	2300      	movs	r3, #0
 800fefe:	4651      	mov	r1, sl
 800ff00:	220a      	movs	r2, #10
 800ff02:	4620      	mov	r0, r4
 800ff04:	f000 fb28 	bl	8010558 <__multadd>
 800ff08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff0e:	4682      	mov	sl, r0
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	f000 81b0 	beq.w	8010276 <_dtoa_r+0xbc6>
 800ff16:	2300      	movs	r3, #0
 800ff18:	4639      	mov	r1, r7
 800ff1a:	220a      	movs	r2, #10
 800ff1c:	4620      	mov	r0, r4
 800ff1e:	f000 fb1b 	bl	8010558 <__multadd>
 800ff22:	9b01      	ldr	r3, [sp, #4]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	4607      	mov	r7, r0
 800ff28:	f300 8096 	bgt.w	8010058 <_dtoa_r+0x9a8>
 800ff2c:	9b07      	ldr	r3, [sp, #28]
 800ff2e:	2b02      	cmp	r3, #2
 800ff30:	dc59      	bgt.n	800ffe6 <_dtoa_r+0x936>
 800ff32:	e091      	b.n	8010058 <_dtoa_r+0x9a8>
 800ff34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ff36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ff3a:	e758      	b.n	800fdee <_dtoa_r+0x73e>
 800ff3c:	9b04      	ldr	r3, [sp, #16]
 800ff3e:	1e5e      	subs	r6, r3, #1
 800ff40:	9b08      	ldr	r3, [sp, #32]
 800ff42:	42b3      	cmp	r3, r6
 800ff44:	bfbf      	itttt	lt
 800ff46:	9b08      	ldrlt	r3, [sp, #32]
 800ff48:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ff4a:	9608      	strlt	r6, [sp, #32]
 800ff4c:	1af3      	sublt	r3, r6, r3
 800ff4e:	bfb4      	ite	lt
 800ff50:	18d2      	addlt	r2, r2, r3
 800ff52:	1b9e      	subge	r6, r3, r6
 800ff54:	9b04      	ldr	r3, [sp, #16]
 800ff56:	bfbc      	itt	lt
 800ff58:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ff5a:	2600      	movlt	r6, #0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	bfb7      	itett	lt
 800ff60:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ff64:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ff68:	1a9d      	sublt	r5, r3, r2
 800ff6a:	2300      	movlt	r3, #0
 800ff6c:	e741      	b.n	800fdf2 <_dtoa_r+0x742>
 800ff6e:	9e08      	ldr	r6, [sp, #32]
 800ff70:	9d05      	ldr	r5, [sp, #20]
 800ff72:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ff74:	e748      	b.n	800fe08 <_dtoa_r+0x758>
 800ff76:	9a08      	ldr	r2, [sp, #32]
 800ff78:	e770      	b.n	800fe5c <_dtoa_r+0x7ac>
 800ff7a:	9b07      	ldr	r3, [sp, #28]
 800ff7c:	2b01      	cmp	r3, #1
 800ff7e:	dc19      	bgt.n	800ffb4 <_dtoa_r+0x904>
 800ff80:	9b02      	ldr	r3, [sp, #8]
 800ff82:	b9bb      	cbnz	r3, 800ffb4 <_dtoa_r+0x904>
 800ff84:	9b03      	ldr	r3, [sp, #12]
 800ff86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff8a:	b99b      	cbnz	r3, 800ffb4 <_dtoa_r+0x904>
 800ff8c:	9b03      	ldr	r3, [sp, #12]
 800ff8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ff92:	0d1b      	lsrs	r3, r3, #20
 800ff94:	051b      	lsls	r3, r3, #20
 800ff96:	b183      	cbz	r3, 800ffba <_dtoa_r+0x90a>
 800ff98:	9b05      	ldr	r3, [sp, #20]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	9305      	str	r3, [sp, #20]
 800ff9e:	9b06      	ldr	r3, [sp, #24]
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	9306      	str	r3, [sp, #24]
 800ffa4:	f04f 0801 	mov.w	r8, #1
 800ffa8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	f47f af6f 	bne.w	800fe8e <_dtoa_r+0x7de>
 800ffb0:	2001      	movs	r0, #1
 800ffb2:	e774      	b.n	800fe9e <_dtoa_r+0x7ee>
 800ffb4:	f04f 0800 	mov.w	r8, #0
 800ffb8:	e7f6      	b.n	800ffa8 <_dtoa_r+0x8f8>
 800ffba:	4698      	mov	r8, r3
 800ffbc:	e7f4      	b.n	800ffa8 <_dtoa_r+0x8f8>
 800ffbe:	d082      	beq.n	800fec6 <_dtoa_r+0x816>
 800ffc0:	9a05      	ldr	r2, [sp, #20]
 800ffc2:	331c      	adds	r3, #28
 800ffc4:	441a      	add	r2, r3
 800ffc6:	9205      	str	r2, [sp, #20]
 800ffc8:	9a06      	ldr	r2, [sp, #24]
 800ffca:	441a      	add	r2, r3
 800ffcc:	441d      	add	r5, r3
 800ffce:	9206      	str	r2, [sp, #24]
 800ffd0:	e779      	b.n	800fec6 <_dtoa_r+0x816>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	e7f4      	b.n	800ffc0 <_dtoa_r+0x910>
 800ffd6:	9b04      	ldr	r3, [sp, #16]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	dc37      	bgt.n	801004c <_dtoa_r+0x99c>
 800ffdc:	9b07      	ldr	r3, [sp, #28]
 800ffde:	2b02      	cmp	r3, #2
 800ffe0:	dd34      	ble.n	801004c <_dtoa_r+0x99c>
 800ffe2:	9b04      	ldr	r3, [sp, #16]
 800ffe4:	9301      	str	r3, [sp, #4]
 800ffe6:	9b01      	ldr	r3, [sp, #4]
 800ffe8:	b963      	cbnz	r3, 8010004 <_dtoa_r+0x954>
 800ffea:	4631      	mov	r1, r6
 800ffec:	2205      	movs	r2, #5
 800ffee:	4620      	mov	r0, r4
 800fff0:	f000 fab2 	bl	8010558 <__multadd>
 800fff4:	4601      	mov	r1, r0
 800fff6:	4606      	mov	r6, r0
 800fff8:	4650      	mov	r0, sl
 800fffa:	f000 fd11 	bl	8010a20 <__mcmp>
 800fffe:	2800      	cmp	r0, #0
 8010000:	f73f adbb 	bgt.w	800fb7a <_dtoa_r+0x4ca>
 8010004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010006:	9d00      	ldr	r5, [sp, #0]
 8010008:	ea6f 0b03 	mvn.w	fp, r3
 801000c:	f04f 0800 	mov.w	r8, #0
 8010010:	4631      	mov	r1, r6
 8010012:	4620      	mov	r0, r4
 8010014:	f000 fa7e 	bl	8010514 <_Bfree>
 8010018:	2f00      	cmp	r7, #0
 801001a:	f43f aeab 	beq.w	800fd74 <_dtoa_r+0x6c4>
 801001e:	f1b8 0f00 	cmp.w	r8, #0
 8010022:	d005      	beq.n	8010030 <_dtoa_r+0x980>
 8010024:	45b8      	cmp	r8, r7
 8010026:	d003      	beq.n	8010030 <_dtoa_r+0x980>
 8010028:	4641      	mov	r1, r8
 801002a:	4620      	mov	r0, r4
 801002c:	f000 fa72 	bl	8010514 <_Bfree>
 8010030:	4639      	mov	r1, r7
 8010032:	4620      	mov	r0, r4
 8010034:	f000 fa6e 	bl	8010514 <_Bfree>
 8010038:	e69c      	b.n	800fd74 <_dtoa_r+0x6c4>
 801003a:	2600      	movs	r6, #0
 801003c:	4637      	mov	r7, r6
 801003e:	e7e1      	b.n	8010004 <_dtoa_r+0x954>
 8010040:	46bb      	mov	fp, r7
 8010042:	4637      	mov	r7, r6
 8010044:	e599      	b.n	800fb7a <_dtoa_r+0x4ca>
 8010046:	bf00      	nop
 8010048:	40240000 	.word	0x40240000
 801004c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801004e:	2b00      	cmp	r3, #0
 8010050:	f000 80c8 	beq.w	80101e4 <_dtoa_r+0xb34>
 8010054:	9b04      	ldr	r3, [sp, #16]
 8010056:	9301      	str	r3, [sp, #4]
 8010058:	2d00      	cmp	r5, #0
 801005a:	dd05      	ble.n	8010068 <_dtoa_r+0x9b8>
 801005c:	4639      	mov	r1, r7
 801005e:	462a      	mov	r2, r5
 8010060:	4620      	mov	r0, r4
 8010062:	f000 fc71 	bl	8010948 <__lshift>
 8010066:	4607      	mov	r7, r0
 8010068:	f1b8 0f00 	cmp.w	r8, #0
 801006c:	d05b      	beq.n	8010126 <_dtoa_r+0xa76>
 801006e:	6879      	ldr	r1, [r7, #4]
 8010070:	4620      	mov	r0, r4
 8010072:	f000 fa0f 	bl	8010494 <_Balloc>
 8010076:	4605      	mov	r5, r0
 8010078:	b928      	cbnz	r0, 8010086 <_dtoa_r+0x9d6>
 801007a:	4b83      	ldr	r3, [pc, #524]	; (8010288 <_dtoa_r+0xbd8>)
 801007c:	4602      	mov	r2, r0
 801007e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010082:	f7ff bb2e 	b.w	800f6e2 <_dtoa_r+0x32>
 8010086:	693a      	ldr	r2, [r7, #16]
 8010088:	3202      	adds	r2, #2
 801008a:	0092      	lsls	r2, r2, #2
 801008c:	f107 010c 	add.w	r1, r7, #12
 8010090:	300c      	adds	r0, #12
 8010092:	f7ff fa6e 	bl	800f572 <memcpy>
 8010096:	2201      	movs	r2, #1
 8010098:	4629      	mov	r1, r5
 801009a:	4620      	mov	r0, r4
 801009c:	f000 fc54 	bl	8010948 <__lshift>
 80100a0:	9b00      	ldr	r3, [sp, #0]
 80100a2:	3301      	adds	r3, #1
 80100a4:	9304      	str	r3, [sp, #16]
 80100a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100aa:	4413      	add	r3, r2
 80100ac:	9308      	str	r3, [sp, #32]
 80100ae:	9b02      	ldr	r3, [sp, #8]
 80100b0:	f003 0301 	and.w	r3, r3, #1
 80100b4:	46b8      	mov	r8, r7
 80100b6:	9306      	str	r3, [sp, #24]
 80100b8:	4607      	mov	r7, r0
 80100ba:	9b04      	ldr	r3, [sp, #16]
 80100bc:	4631      	mov	r1, r6
 80100be:	3b01      	subs	r3, #1
 80100c0:	4650      	mov	r0, sl
 80100c2:	9301      	str	r3, [sp, #4]
 80100c4:	f7ff fa6a 	bl	800f59c <quorem>
 80100c8:	4641      	mov	r1, r8
 80100ca:	9002      	str	r0, [sp, #8]
 80100cc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80100d0:	4650      	mov	r0, sl
 80100d2:	f000 fca5 	bl	8010a20 <__mcmp>
 80100d6:	463a      	mov	r2, r7
 80100d8:	9005      	str	r0, [sp, #20]
 80100da:	4631      	mov	r1, r6
 80100dc:	4620      	mov	r0, r4
 80100de:	f000 fcbb 	bl	8010a58 <__mdiff>
 80100e2:	68c2      	ldr	r2, [r0, #12]
 80100e4:	4605      	mov	r5, r0
 80100e6:	bb02      	cbnz	r2, 801012a <_dtoa_r+0xa7a>
 80100e8:	4601      	mov	r1, r0
 80100ea:	4650      	mov	r0, sl
 80100ec:	f000 fc98 	bl	8010a20 <__mcmp>
 80100f0:	4602      	mov	r2, r0
 80100f2:	4629      	mov	r1, r5
 80100f4:	4620      	mov	r0, r4
 80100f6:	9209      	str	r2, [sp, #36]	; 0x24
 80100f8:	f000 fa0c 	bl	8010514 <_Bfree>
 80100fc:	9b07      	ldr	r3, [sp, #28]
 80100fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010100:	9d04      	ldr	r5, [sp, #16]
 8010102:	ea43 0102 	orr.w	r1, r3, r2
 8010106:	9b06      	ldr	r3, [sp, #24]
 8010108:	4319      	orrs	r1, r3
 801010a:	d110      	bne.n	801012e <_dtoa_r+0xa7e>
 801010c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010110:	d029      	beq.n	8010166 <_dtoa_r+0xab6>
 8010112:	9b05      	ldr	r3, [sp, #20]
 8010114:	2b00      	cmp	r3, #0
 8010116:	dd02      	ble.n	801011e <_dtoa_r+0xa6e>
 8010118:	9b02      	ldr	r3, [sp, #8]
 801011a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801011e:	9b01      	ldr	r3, [sp, #4]
 8010120:	f883 9000 	strb.w	r9, [r3]
 8010124:	e774      	b.n	8010010 <_dtoa_r+0x960>
 8010126:	4638      	mov	r0, r7
 8010128:	e7ba      	b.n	80100a0 <_dtoa_r+0x9f0>
 801012a:	2201      	movs	r2, #1
 801012c:	e7e1      	b.n	80100f2 <_dtoa_r+0xa42>
 801012e:	9b05      	ldr	r3, [sp, #20]
 8010130:	2b00      	cmp	r3, #0
 8010132:	db04      	blt.n	801013e <_dtoa_r+0xa8e>
 8010134:	9907      	ldr	r1, [sp, #28]
 8010136:	430b      	orrs	r3, r1
 8010138:	9906      	ldr	r1, [sp, #24]
 801013a:	430b      	orrs	r3, r1
 801013c:	d120      	bne.n	8010180 <_dtoa_r+0xad0>
 801013e:	2a00      	cmp	r2, #0
 8010140:	dded      	ble.n	801011e <_dtoa_r+0xa6e>
 8010142:	4651      	mov	r1, sl
 8010144:	2201      	movs	r2, #1
 8010146:	4620      	mov	r0, r4
 8010148:	f000 fbfe 	bl	8010948 <__lshift>
 801014c:	4631      	mov	r1, r6
 801014e:	4682      	mov	sl, r0
 8010150:	f000 fc66 	bl	8010a20 <__mcmp>
 8010154:	2800      	cmp	r0, #0
 8010156:	dc03      	bgt.n	8010160 <_dtoa_r+0xab0>
 8010158:	d1e1      	bne.n	801011e <_dtoa_r+0xa6e>
 801015a:	f019 0f01 	tst.w	r9, #1
 801015e:	d0de      	beq.n	801011e <_dtoa_r+0xa6e>
 8010160:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010164:	d1d8      	bne.n	8010118 <_dtoa_r+0xa68>
 8010166:	9a01      	ldr	r2, [sp, #4]
 8010168:	2339      	movs	r3, #57	; 0x39
 801016a:	7013      	strb	r3, [r2, #0]
 801016c:	462b      	mov	r3, r5
 801016e:	461d      	mov	r5, r3
 8010170:	3b01      	subs	r3, #1
 8010172:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010176:	2a39      	cmp	r2, #57	; 0x39
 8010178:	d06c      	beq.n	8010254 <_dtoa_r+0xba4>
 801017a:	3201      	adds	r2, #1
 801017c:	701a      	strb	r2, [r3, #0]
 801017e:	e747      	b.n	8010010 <_dtoa_r+0x960>
 8010180:	2a00      	cmp	r2, #0
 8010182:	dd07      	ble.n	8010194 <_dtoa_r+0xae4>
 8010184:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010188:	d0ed      	beq.n	8010166 <_dtoa_r+0xab6>
 801018a:	9a01      	ldr	r2, [sp, #4]
 801018c:	f109 0301 	add.w	r3, r9, #1
 8010190:	7013      	strb	r3, [r2, #0]
 8010192:	e73d      	b.n	8010010 <_dtoa_r+0x960>
 8010194:	9b04      	ldr	r3, [sp, #16]
 8010196:	9a08      	ldr	r2, [sp, #32]
 8010198:	f803 9c01 	strb.w	r9, [r3, #-1]
 801019c:	4293      	cmp	r3, r2
 801019e:	d043      	beq.n	8010228 <_dtoa_r+0xb78>
 80101a0:	4651      	mov	r1, sl
 80101a2:	2300      	movs	r3, #0
 80101a4:	220a      	movs	r2, #10
 80101a6:	4620      	mov	r0, r4
 80101a8:	f000 f9d6 	bl	8010558 <__multadd>
 80101ac:	45b8      	cmp	r8, r7
 80101ae:	4682      	mov	sl, r0
 80101b0:	f04f 0300 	mov.w	r3, #0
 80101b4:	f04f 020a 	mov.w	r2, #10
 80101b8:	4641      	mov	r1, r8
 80101ba:	4620      	mov	r0, r4
 80101bc:	d107      	bne.n	80101ce <_dtoa_r+0xb1e>
 80101be:	f000 f9cb 	bl	8010558 <__multadd>
 80101c2:	4680      	mov	r8, r0
 80101c4:	4607      	mov	r7, r0
 80101c6:	9b04      	ldr	r3, [sp, #16]
 80101c8:	3301      	adds	r3, #1
 80101ca:	9304      	str	r3, [sp, #16]
 80101cc:	e775      	b.n	80100ba <_dtoa_r+0xa0a>
 80101ce:	f000 f9c3 	bl	8010558 <__multadd>
 80101d2:	4639      	mov	r1, r7
 80101d4:	4680      	mov	r8, r0
 80101d6:	2300      	movs	r3, #0
 80101d8:	220a      	movs	r2, #10
 80101da:	4620      	mov	r0, r4
 80101dc:	f000 f9bc 	bl	8010558 <__multadd>
 80101e0:	4607      	mov	r7, r0
 80101e2:	e7f0      	b.n	80101c6 <_dtoa_r+0xb16>
 80101e4:	9b04      	ldr	r3, [sp, #16]
 80101e6:	9301      	str	r3, [sp, #4]
 80101e8:	9d00      	ldr	r5, [sp, #0]
 80101ea:	4631      	mov	r1, r6
 80101ec:	4650      	mov	r0, sl
 80101ee:	f7ff f9d5 	bl	800f59c <quorem>
 80101f2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80101f6:	9b00      	ldr	r3, [sp, #0]
 80101f8:	f805 9b01 	strb.w	r9, [r5], #1
 80101fc:	1aea      	subs	r2, r5, r3
 80101fe:	9b01      	ldr	r3, [sp, #4]
 8010200:	4293      	cmp	r3, r2
 8010202:	dd07      	ble.n	8010214 <_dtoa_r+0xb64>
 8010204:	4651      	mov	r1, sl
 8010206:	2300      	movs	r3, #0
 8010208:	220a      	movs	r2, #10
 801020a:	4620      	mov	r0, r4
 801020c:	f000 f9a4 	bl	8010558 <__multadd>
 8010210:	4682      	mov	sl, r0
 8010212:	e7ea      	b.n	80101ea <_dtoa_r+0xb3a>
 8010214:	9b01      	ldr	r3, [sp, #4]
 8010216:	2b00      	cmp	r3, #0
 8010218:	bfc8      	it	gt
 801021a:	461d      	movgt	r5, r3
 801021c:	9b00      	ldr	r3, [sp, #0]
 801021e:	bfd8      	it	le
 8010220:	2501      	movle	r5, #1
 8010222:	441d      	add	r5, r3
 8010224:	f04f 0800 	mov.w	r8, #0
 8010228:	4651      	mov	r1, sl
 801022a:	2201      	movs	r2, #1
 801022c:	4620      	mov	r0, r4
 801022e:	f000 fb8b 	bl	8010948 <__lshift>
 8010232:	4631      	mov	r1, r6
 8010234:	4682      	mov	sl, r0
 8010236:	f000 fbf3 	bl	8010a20 <__mcmp>
 801023a:	2800      	cmp	r0, #0
 801023c:	dc96      	bgt.n	801016c <_dtoa_r+0xabc>
 801023e:	d102      	bne.n	8010246 <_dtoa_r+0xb96>
 8010240:	f019 0f01 	tst.w	r9, #1
 8010244:	d192      	bne.n	801016c <_dtoa_r+0xabc>
 8010246:	462b      	mov	r3, r5
 8010248:	461d      	mov	r5, r3
 801024a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801024e:	2a30      	cmp	r2, #48	; 0x30
 8010250:	d0fa      	beq.n	8010248 <_dtoa_r+0xb98>
 8010252:	e6dd      	b.n	8010010 <_dtoa_r+0x960>
 8010254:	9a00      	ldr	r2, [sp, #0]
 8010256:	429a      	cmp	r2, r3
 8010258:	d189      	bne.n	801016e <_dtoa_r+0xabe>
 801025a:	f10b 0b01 	add.w	fp, fp, #1
 801025e:	2331      	movs	r3, #49	; 0x31
 8010260:	e796      	b.n	8010190 <_dtoa_r+0xae0>
 8010262:	4b0a      	ldr	r3, [pc, #40]	; (801028c <_dtoa_r+0xbdc>)
 8010264:	f7ff ba99 	b.w	800f79a <_dtoa_r+0xea>
 8010268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801026a:	2b00      	cmp	r3, #0
 801026c:	f47f aa6d 	bne.w	800f74a <_dtoa_r+0x9a>
 8010270:	4b07      	ldr	r3, [pc, #28]	; (8010290 <_dtoa_r+0xbe0>)
 8010272:	f7ff ba92 	b.w	800f79a <_dtoa_r+0xea>
 8010276:	9b01      	ldr	r3, [sp, #4]
 8010278:	2b00      	cmp	r3, #0
 801027a:	dcb5      	bgt.n	80101e8 <_dtoa_r+0xb38>
 801027c:	9b07      	ldr	r3, [sp, #28]
 801027e:	2b02      	cmp	r3, #2
 8010280:	f73f aeb1 	bgt.w	800ffe6 <_dtoa_r+0x936>
 8010284:	e7b0      	b.n	80101e8 <_dtoa_r+0xb38>
 8010286:	bf00      	nop
 8010288:	080131f5 	.word	0x080131f5
 801028c:	08013150 	.word	0x08013150
 8010290:	08013179 	.word	0x08013179

08010294 <_free_r>:
 8010294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010296:	2900      	cmp	r1, #0
 8010298:	d044      	beq.n	8010324 <_free_r+0x90>
 801029a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801029e:	9001      	str	r0, [sp, #4]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f1a1 0404 	sub.w	r4, r1, #4
 80102a6:	bfb8      	it	lt
 80102a8:	18e4      	addlt	r4, r4, r3
 80102aa:	f000 f8e7 	bl	801047c <__malloc_lock>
 80102ae:	4a1e      	ldr	r2, [pc, #120]	; (8010328 <_free_r+0x94>)
 80102b0:	9801      	ldr	r0, [sp, #4]
 80102b2:	6813      	ldr	r3, [r2, #0]
 80102b4:	b933      	cbnz	r3, 80102c4 <_free_r+0x30>
 80102b6:	6063      	str	r3, [r4, #4]
 80102b8:	6014      	str	r4, [r2, #0]
 80102ba:	b003      	add	sp, #12
 80102bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102c0:	f000 b8e2 	b.w	8010488 <__malloc_unlock>
 80102c4:	42a3      	cmp	r3, r4
 80102c6:	d908      	bls.n	80102da <_free_r+0x46>
 80102c8:	6825      	ldr	r5, [r4, #0]
 80102ca:	1961      	adds	r1, r4, r5
 80102cc:	428b      	cmp	r3, r1
 80102ce:	bf01      	itttt	eq
 80102d0:	6819      	ldreq	r1, [r3, #0]
 80102d2:	685b      	ldreq	r3, [r3, #4]
 80102d4:	1949      	addeq	r1, r1, r5
 80102d6:	6021      	streq	r1, [r4, #0]
 80102d8:	e7ed      	b.n	80102b6 <_free_r+0x22>
 80102da:	461a      	mov	r2, r3
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	b10b      	cbz	r3, 80102e4 <_free_r+0x50>
 80102e0:	42a3      	cmp	r3, r4
 80102e2:	d9fa      	bls.n	80102da <_free_r+0x46>
 80102e4:	6811      	ldr	r1, [r2, #0]
 80102e6:	1855      	adds	r5, r2, r1
 80102e8:	42a5      	cmp	r5, r4
 80102ea:	d10b      	bne.n	8010304 <_free_r+0x70>
 80102ec:	6824      	ldr	r4, [r4, #0]
 80102ee:	4421      	add	r1, r4
 80102f0:	1854      	adds	r4, r2, r1
 80102f2:	42a3      	cmp	r3, r4
 80102f4:	6011      	str	r1, [r2, #0]
 80102f6:	d1e0      	bne.n	80102ba <_free_r+0x26>
 80102f8:	681c      	ldr	r4, [r3, #0]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	6053      	str	r3, [r2, #4]
 80102fe:	440c      	add	r4, r1
 8010300:	6014      	str	r4, [r2, #0]
 8010302:	e7da      	b.n	80102ba <_free_r+0x26>
 8010304:	d902      	bls.n	801030c <_free_r+0x78>
 8010306:	230c      	movs	r3, #12
 8010308:	6003      	str	r3, [r0, #0]
 801030a:	e7d6      	b.n	80102ba <_free_r+0x26>
 801030c:	6825      	ldr	r5, [r4, #0]
 801030e:	1961      	adds	r1, r4, r5
 8010310:	428b      	cmp	r3, r1
 8010312:	bf04      	itt	eq
 8010314:	6819      	ldreq	r1, [r3, #0]
 8010316:	685b      	ldreq	r3, [r3, #4]
 8010318:	6063      	str	r3, [r4, #4]
 801031a:	bf04      	itt	eq
 801031c:	1949      	addeq	r1, r1, r5
 801031e:	6021      	streq	r1, [r4, #0]
 8010320:	6054      	str	r4, [r2, #4]
 8010322:	e7ca      	b.n	80102ba <_free_r+0x26>
 8010324:	b003      	add	sp, #12
 8010326:	bd30      	pop	{r4, r5, pc}
 8010328:	200013ac 	.word	0x200013ac

0801032c <malloc>:
 801032c:	4b02      	ldr	r3, [pc, #8]	; (8010338 <malloc+0xc>)
 801032e:	4601      	mov	r1, r0
 8010330:	6818      	ldr	r0, [r3, #0]
 8010332:	f000 b823 	b.w	801037c <_malloc_r>
 8010336:	bf00      	nop
 8010338:	20000078 	.word	0x20000078

0801033c <sbrk_aligned>:
 801033c:	b570      	push	{r4, r5, r6, lr}
 801033e:	4e0e      	ldr	r6, [pc, #56]	; (8010378 <sbrk_aligned+0x3c>)
 8010340:	460c      	mov	r4, r1
 8010342:	6831      	ldr	r1, [r6, #0]
 8010344:	4605      	mov	r5, r0
 8010346:	b911      	cbnz	r1, 801034e <sbrk_aligned+0x12>
 8010348:	f001 fe22 	bl	8011f90 <_sbrk_r>
 801034c:	6030      	str	r0, [r6, #0]
 801034e:	4621      	mov	r1, r4
 8010350:	4628      	mov	r0, r5
 8010352:	f001 fe1d 	bl	8011f90 <_sbrk_r>
 8010356:	1c43      	adds	r3, r0, #1
 8010358:	d00a      	beq.n	8010370 <sbrk_aligned+0x34>
 801035a:	1cc4      	adds	r4, r0, #3
 801035c:	f024 0403 	bic.w	r4, r4, #3
 8010360:	42a0      	cmp	r0, r4
 8010362:	d007      	beq.n	8010374 <sbrk_aligned+0x38>
 8010364:	1a21      	subs	r1, r4, r0
 8010366:	4628      	mov	r0, r5
 8010368:	f001 fe12 	bl	8011f90 <_sbrk_r>
 801036c:	3001      	adds	r0, #1
 801036e:	d101      	bne.n	8010374 <sbrk_aligned+0x38>
 8010370:	f04f 34ff 	mov.w	r4, #4294967295
 8010374:	4620      	mov	r0, r4
 8010376:	bd70      	pop	{r4, r5, r6, pc}
 8010378:	200013b0 	.word	0x200013b0

0801037c <_malloc_r>:
 801037c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010380:	1ccd      	adds	r5, r1, #3
 8010382:	f025 0503 	bic.w	r5, r5, #3
 8010386:	3508      	adds	r5, #8
 8010388:	2d0c      	cmp	r5, #12
 801038a:	bf38      	it	cc
 801038c:	250c      	movcc	r5, #12
 801038e:	2d00      	cmp	r5, #0
 8010390:	4607      	mov	r7, r0
 8010392:	db01      	blt.n	8010398 <_malloc_r+0x1c>
 8010394:	42a9      	cmp	r1, r5
 8010396:	d905      	bls.n	80103a4 <_malloc_r+0x28>
 8010398:	230c      	movs	r3, #12
 801039a:	603b      	str	r3, [r7, #0]
 801039c:	2600      	movs	r6, #0
 801039e:	4630      	mov	r0, r6
 80103a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010478 <_malloc_r+0xfc>
 80103a8:	f000 f868 	bl	801047c <__malloc_lock>
 80103ac:	f8d8 3000 	ldr.w	r3, [r8]
 80103b0:	461c      	mov	r4, r3
 80103b2:	bb5c      	cbnz	r4, 801040c <_malloc_r+0x90>
 80103b4:	4629      	mov	r1, r5
 80103b6:	4638      	mov	r0, r7
 80103b8:	f7ff ffc0 	bl	801033c <sbrk_aligned>
 80103bc:	1c43      	adds	r3, r0, #1
 80103be:	4604      	mov	r4, r0
 80103c0:	d155      	bne.n	801046e <_malloc_r+0xf2>
 80103c2:	f8d8 4000 	ldr.w	r4, [r8]
 80103c6:	4626      	mov	r6, r4
 80103c8:	2e00      	cmp	r6, #0
 80103ca:	d145      	bne.n	8010458 <_malloc_r+0xdc>
 80103cc:	2c00      	cmp	r4, #0
 80103ce:	d048      	beq.n	8010462 <_malloc_r+0xe6>
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	4631      	mov	r1, r6
 80103d4:	4638      	mov	r0, r7
 80103d6:	eb04 0903 	add.w	r9, r4, r3
 80103da:	f001 fdd9 	bl	8011f90 <_sbrk_r>
 80103de:	4581      	cmp	r9, r0
 80103e0:	d13f      	bne.n	8010462 <_malloc_r+0xe6>
 80103e2:	6821      	ldr	r1, [r4, #0]
 80103e4:	1a6d      	subs	r5, r5, r1
 80103e6:	4629      	mov	r1, r5
 80103e8:	4638      	mov	r0, r7
 80103ea:	f7ff ffa7 	bl	801033c <sbrk_aligned>
 80103ee:	3001      	adds	r0, #1
 80103f0:	d037      	beq.n	8010462 <_malloc_r+0xe6>
 80103f2:	6823      	ldr	r3, [r4, #0]
 80103f4:	442b      	add	r3, r5
 80103f6:	6023      	str	r3, [r4, #0]
 80103f8:	f8d8 3000 	ldr.w	r3, [r8]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d038      	beq.n	8010472 <_malloc_r+0xf6>
 8010400:	685a      	ldr	r2, [r3, #4]
 8010402:	42a2      	cmp	r2, r4
 8010404:	d12b      	bne.n	801045e <_malloc_r+0xe2>
 8010406:	2200      	movs	r2, #0
 8010408:	605a      	str	r2, [r3, #4]
 801040a:	e00f      	b.n	801042c <_malloc_r+0xb0>
 801040c:	6822      	ldr	r2, [r4, #0]
 801040e:	1b52      	subs	r2, r2, r5
 8010410:	d41f      	bmi.n	8010452 <_malloc_r+0xd6>
 8010412:	2a0b      	cmp	r2, #11
 8010414:	d917      	bls.n	8010446 <_malloc_r+0xca>
 8010416:	1961      	adds	r1, r4, r5
 8010418:	42a3      	cmp	r3, r4
 801041a:	6025      	str	r5, [r4, #0]
 801041c:	bf18      	it	ne
 801041e:	6059      	strne	r1, [r3, #4]
 8010420:	6863      	ldr	r3, [r4, #4]
 8010422:	bf08      	it	eq
 8010424:	f8c8 1000 	streq.w	r1, [r8]
 8010428:	5162      	str	r2, [r4, r5]
 801042a:	604b      	str	r3, [r1, #4]
 801042c:	4638      	mov	r0, r7
 801042e:	f104 060b 	add.w	r6, r4, #11
 8010432:	f000 f829 	bl	8010488 <__malloc_unlock>
 8010436:	f026 0607 	bic.w	r6, r6, #7
 801043a:	1d23      	adds	r3, r4, #4
 801043c:	1af2      	subs	r2, r6, r3
 801043e:	d0ae      	beq.n	801039e <_malloc_r+0x22>
 8010440:	1b9b      	subs	r3, r3, r6
 8010442:	50a3      	str	r3, [r4, r2]
 8010444:	e7ab      	b.n	801039e <_malloc_r+0x22>
 8010446:	42a3      	cmp	r3, r4
 8010448:	6862      	ldr	r2, [r4, #4]
 801044a:	d1dd      	bne.n	8010408 <_malloc_r+0x8c>
 801044c:	f8c8 2000 	str.w	r2, [r8]
 8010450:	e7ec      	b.n	801042c <_malloc_r+0xb0>
 8010452:	4623      	mov	r3, r4
 8010454:	6864      	ldr	r4, [r4, #4]
 8010456:	e7ac      	b.n	80103b2 <_malloc_r+0x36>
 8010458:	4634      	mov	r4, r6
 801045a:	6876      	ldr	r6, [r6, #4]
 801045c:	e7b4      	b.n	80103c8 <_malloc_r+0x4c>
 801045e:	4613      	mov	r3, r2
 8010460:	e7cc      	b.n	80103fc <_malloc_r+0x80>
 8010462:	230c      	movs	r3, #12
 8010464:	603b      	str	r3, [r7, #0]
 8010466:	4638      	mov	r0, r7
 8010468:	f000 f80e 	bl	8010488 <__malloc_unlock>
 801046c:	e797      	b.n	801039e <_malloc_r+0x22>
 801046e:	6025      	str	r5, [r4, #0]
 8010470:	e7dc      	b.n	801042c <_malloc_r+0xb0>
 8010472:	605b      	str	r3, [r3, #4]
 8010474:	deff      	udf	#255	; 0xff
 8010476:	bf00      	nop
 8010478:	200013ac 	.word	0x200013ac

0801047c <__malloc_lock>:
 801047c:	4801      	ldr	r0, [pc, #4]	; (8010484 <__malloc_lock+0x8>)
 801047e:	f7ff b876 	b.w	800f56e <__retarget_lock_acquire_recursive>
 8010482:	bf00      	nop
 8010484:	200013a8 	.word	0x200013a8

08010488 <__malloc_unlock>:
 8010488:	4801      	ldr	r0, [pc, #4]	; (8010490 <__malloc_unlock+0x8>)
 801048a:	f7ff b871 	b.w	800f570 <__retarget_lock_release_recursive>
 801048e:	bf00      	nop
 8010490:	200013a8 	.word	0x200013a8

08010494 <_Balloc>:
 8010494:	b570      	push	{r4, r5, r6, lr}
 8010496:	69c6      	ldr	r6, [r0, #28]
 8010498:	4604      	mov	r4, r0
 801049a:	460d      	mov	r5, r1
 801049c:	b976      	cbnz	r6, 80104bc <_Balloc+0x28>
 801049e:	2010      	movs	r0, #16
 80104a0:	f7ff ff44 	bl	801032c <malloc>
 80104a4:	4602      	mov	r2, r0
 80104a6:	61e0      	str	r0, [r4, #28]
 80104a8:	b920      	cbnz	r0, 80104b4 <_Balloc+0x20>
 80104aa:	4b18      	ldr	r3, [pc, #96]	; (801050c <_Balloc+0x78>)
 80104ac:	4818      	ldr	r0, [pc, #96]	; (8010510 <_Balloc+0x7c>)
 80104ae:	216b      	movs	r1, #107	; 0x6b
 80104b0:	f001 fd86 	bl	8011fc0 <__assert_func>
 80104b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80104b8:	6006      	str	r6, [r0, #0]
 80104ba:	60c6      	str	r6, [r0, #12]
 80104bc:	69e6      	ldr	r6, [r4, #28]
 80104be:	68f3      	ldr	r3, [r6, #12]
 80104c0:	b183      	cbz	r3, 80104e4 <_Balloc+0x50>
 80104c2:	69e3      	ldr	r3, [r4, #28]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80104ca:	b9b8      	cbnz	r0, 80104fc <_Balloc+0x68>
 80104cc:	2101      	movs	r1, #1
 80104ce:	fa01 f605 	lsl.w	r6, r1, r5
 80104d2:	1d72      	adds	r2, r6, #5
 80104d4:	0092      	lsls	r2, r2, #2
 80104d6:	4620      	mov	r0, r4
 80104d8:	f001 fd90 	bl	8011ffc <_calloc_r>
 80104dc:	b160      	cbz	r0, 80104f8 <_Balloc+0x64>
 80104de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80104e2:	e00e      	b.n	8010502 <_Balloc+0x6e>
 80104e4:	2221      	movs	r2, #33	; 0x21
 80104e6:	2104      	movs	r1, #4
 80104e8:	4620      	mov	r0, r4
 80104ea:	f001 fd87 	bl	8011ffc <_calloc_r>
 80104ee:	69e3      	ldr	r3, [r4, #28]
 80104f0:	60f0      	str	r0, [r6, #12]
 80104f2:	68db      	ldr	r3, [r3, #12]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d1e4      	bne.n	80104c2 <_Balloc+0x2e>
 80104f8:	2000      	movs	r0, #0
 80104fa:	bd70      	pop	{r4, r5, r6, pc}
 80104fc:	6802      	ldr	r2, [r0, #0]
 80104fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010502:	2300      	movs	r3, #0
 8010504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010508:	e7f7      	b.n	80104fa <_Balloc+0x66>
 801050a:	bf00      	nop
 801050c:	08013186 	.word	0x08013186
 8010510:	08013206 	.word	0x08013206

08010514 <_Bfree>:
 8010514:	b570      	push	{r4, r5, r6, lr}
 8010516:	69c6      	ldr	r6, [r0, #28]
 8010518:	4605      	mov	r5, r0
 801051a:	460c      	mov	r4, r1
 801051c:	b976      	cbnz	r6, 801053c <_Bfree+0x28>
 801051e:	2010      	movs	r0, #16
 8010520:	f7ff ff04 	bl	801032c <malloc>
 8010524:	4602      	mov	r2, r0
 8010526:	61e8      	str	r0, [r5, #28]
 8010528:	b920      	cbnz	r0, 8010534 <_Bfree+0x20>
 801052a:	4b09      	ldr	r3, [pc, #36]	; (8010550 <_Bfree+0x3c>)
 801052c:	4809      	ldr	r0, [pc, #36]	; (8010554 <_Bfree+0x40>)
 801052e:	218f      	movs	r1, #143	; 0x8f
 8010530:	f001 fd46 	bl	8011fc0 <__assert_func>
 8010534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010538:	6006      	str	r6, [r0, #0]
 801053a:	60c6      	str	r6, [r0, #12]
 801053c:	b13c      	cbz	r4, 801054e <_Bfree+0x3a>
 801053e:	69eb      	ldr	r3, [r5, #28]
 8010540:	6862      	ldr	r2, [r4, #4]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010548:	6021      	str	r1, [r4, #0]
 801054a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801054e:	bd70      	pop	{r4, r5, r6, pc}
 8010550:	08013186 	.word	0x08013186
 8010554:	08013206 	.word	0x08013206

08010558 <__multadd>:
 8010558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801055c:	690d      	ldr	r5, [r1, #16]
 801055e:	4607      	mov	r7, r0
 8010560:	460c      	mov	r4, r1
 8010562:	461e      	mov	r6, r3
 8010564:	f101 0c14 	add.w	ip, r1, #20
 8010568:	2000      	movs	r0, #0
 801056a:	f8dc 3000 	ldr.w	r3, [ip]
 801056e:	b299      	uxth	r1, r3
 8010570:	fb02 6101 	mla	r1, r2, r1, r6
 8010574:	0c1e      	lsrs	r6, r3, #16
 8010576:	0c0b      	lsrs	r3, r1, #16
 8010578:	fb02 3306 	mla	r3, r2, r6, r3
 801057c:	b289      	uxth	r1, r1
 801057e:	3001      	adds	r0, #1
 8010580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010584:	4285      	cmp	r5, r0
 8010586:	f84c 1b04 	str.w	r1, [ip], #4
 801058a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801058e:	dcec      	bgt.n	801056a <__multadd+0x12>
 8010590:	b30e      	cbz	r6, 80105d6 <__multadd+0x7e>
 8010592:	68a3      	ldr	r3, [r4, #8]
 8010594:	42ab      	cmp	r3, r5
 8010596:	dc19      	bgt.n	80105cc <__multadd+0x74>
 8010598:	6861      	ldr	r1, [r4, #4]
 801059a:	4638      	mov	r0, r7
 801059c:	3101      	adds	r1, #1
 801059e:	f7ff ff79 	bl	8010494 <_Balloc>
 80105a2:	4680      	mov	r8, r0
 80105a4:	b928      	cbnz	r0, 80105b2 <__multadd+0x5a>
 80105a6:	4602      	mov	r2, r0
 80105a8:	4b0c      	ldr	r3, [pc, #48]	; (80105dc <__multadd+0x84>)
 80105aa:	480d      	ldr	r0, [pc, #52]	; (80105e0 <__multadd+0x88>)
 80105ac:	21ba      	movs	r1, #186	; 0xba
 80105ae:	f001 fd07 	bl	8011fc0 <__assert_func>
 80105b2:	6922      	ldr	r2, [r4, #16]
 80105b4:	3202      	adds	r2, #2
 80105b6:	f104 010c 	add.w	r1, r4, #12
 80105ba:	0092      	lsls	r2, r2, #2
 80105bc:	300c      	adds	r0, #12
 80105be:	f7fe ffd8 	bl	800f572 <memcpy>
 80105c2:	4621      	mov	r1, r4
 80105c4:	4638      	mov	r0, r7
 80105c6:	f7ff ffa5 	bl	8010514 <_Bfree>
 80105ca:	4644      	mov	r4, r8
 80105cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80105d0:	3501      	adds	r5, #1
 80105d2:	615e      	str	r6, [r3, #20]
 80105d4:	6125      	str	r5, [r4, #16]
 80105d6:	4620      	mov	r0, r4
 80105d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105dc:	080131f5 	.word	0x080131f5
 80105e0:	08013206 	.word	0x08013206

080105e4 <__s2b>:
 80105e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105e8:	460c      	mov	r4, r1
 80105ea:	4615      	mov	r5, r2
 80105ec:	461f      	mov	r7, r3
 80105ee:	2209      	movs	r2, #9
 80105f0:	3308      	adds	r3, #8
 80105f2:	4606      	mov	r6, r0
 80105f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80105f8:	2100      	movs	r1, #0
 80105fa:	2201      	movs	r2, #1
 80105fc:	429a      	cmp	r2, r3
 80105fe:	db09      	blt.n	8010614 <__s2b+0x30>
 8010600:	4630      	mov	r0, r6
 8010602:	f7ff ff47 	bl	8010494 <_Balloc>
 8010606:	b940      	cbnz	r0, 801061a <__s2b+0x36>
 8010608:	4602      	mov	r2, r0
 801060a:	4b19      	ldr	r3, [pc, #100]	; (8010670 <__s2b+0x8c>)
 801060c:	4819      	ldr	r0, [pc, #100]	; (8010674 <__s2b+0x90>)
 801060e:	21d3      	movs	r1, #211	; 0xd3
 8010610:	f001 fcd6 	bl	8011fc0 <__assert_func>
 8010614:	0052      	lsls	r2, r2, #1
 8010616:	3101      	adds	r1, #1
 8010618:	e7f0      	b.n	80105fc <__s2b+0x18>
 801061a:	9b08      	ldr	r3, [sp, #32]
 801061c:	6143      	str	r3, [r0, #20]
 801061e:	2d09      	cmp	r5, #9
 8010620:	f04f 0301 	mov.w	r3, #1
 8010624:	6103      	str	r3, [r0, #16]
 8010626:	dd16      	ble.n	8010656 <__s2b+0x72>
 8010628:	f104 0909 	add.w	r9, r4, #9
 801062c:	46c8      	mov	r8, r9
 801062e:	442c      	add	r4, r5
 8010630:	f818 3b01 	ldrb.w	r3, [r8], #1
 8010634:	4601      	mov	r1, r0
 8010636:	3b30      	subs	r3, #48	; 0x30
 8010638:	220a      	movs	r2, #10
 801063a:	4630      	mov	r0, r6
 801063c:	f7ff ff8c 	bl	8010558 <__multadd>
 8010640:	45a0      	cmp	r8, r4
 8010642:	d1f5      	bne.n	8010630 <__s2b+0x4c>
 8010644:	f1a5 0408 	sub.w	r4, r5, #8
 8010648:	444c      	add	r4, r9
 801064a:	1b2d      	subs	r5, r5, r4
 801064c:	1963      	adds	r3, r4, r5
 801064e:	42bb      	cmp	r3, r7
 8010650:	db04      	blt.n	801065c <__s2b+0x78>
 8010652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010656:	340a      	adds	r4, #10
 8010658:	2509      	movs	r5, #9
 801065a:	e7f6      	b.n	801064a <__s2b+0x66>
 801065c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010660:	4601      	mov	r1, r0
 8010662:	3b30      	subs	r3, #48	; 0x30
 8010664:	220a      	movs	r2, #10
 8010666:	4630      	mov	r0, r6
 8010668:	f7ff ff76 	bl	8010558 <__multadd>
 801066c:	e7ee      	b.n	801064c <__s2b+0x68>
 801066e:	bf00      	nop
 8010670:	080131f5 	.word	0x080131f5
 8010674:	08013206 	.word	0x08013206

08010678 <__hi0bits>:
 8010678:	0c03      	lsrs	r3, r0, #16
 801067a:	041b      	lsls	r3, r3, #16
 801067c:	b9d3      	cbnz	r3, 80106b4 <__hi0bits+0x3c>
 801067e:	0400      	lsls	r0, r0, #16
 8010680:	2310      	movs	r3, #16
 8010682:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010686:	bf04      	itt	eq
 8010688:	0200      	lsleq	r0, r0, #8
 801068a:	3308      	addeq	r3, #8
 801068c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010690:	bf04      	itt	eq
 8010692:	0100      	lsleq	r0, r0, #4
 8010694:	3304      	addeq	r3, #4
 8010696:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801069a:	bf04      	itt	eq
 801069c:	0080      	lsleq	r0, r0, #2
 801069e:	3302      	addeq	r3, #2
 80106a0:	2800      	cmp	r0, #0
 80106a2:	db05      	blt.n	80106b0 <__hi0bits+0x38>
 80106a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80106a8:	f103 0301 	add.w	r3, r3, #1
 80106ac:	bf08      	it	eq
 80106ae:	2320      	moveq	r3, #32
 80106b0:	4618      	mov	r0, r3
 80106b2:	4770      	bx	lr
 80106b4:	2300      	movs	r3, #0
 80106b6:	e7e4      	b.n	8010682 <__hi0bits+0xa>

080106b8 <__lo0bits>:
 80106b8:	6803      	ldr	r3, [r0, #0]
 80106ba:	f013 0207 	ands.w	r2, r3, #7
 80106be:	d00c      	beq.n	80106da <__lo0bits+0x22>
 80106c0:	07d9      	lsls	r1, r3, #31
 80106c2:	d422      	bmi.n	801070a <__lo0bits+0x52>
 80106c4:	079a      	lsls	r2, r3, #30
 80106c6:	bf49      	itett	mi
 80106c8:	085b      	lsrmi	r3, r3, #1
 80106ca:	089b      	lsrpl	r3, r3, #2
 80106cc:	6003      	strmi	r3, [r0, #0]
 80106ce:	2201      	movmi	r2, #1
 80106d0:	bf5c      	itt	pl
 80106d2:	6003      	strpl	r3, [r0, #0]
 80106d4:	2202      	movpl	r2, #2
 80106d6:	4610      	mov	r0, r2
 80106d8:	4770      	bx	lr
 80106da:	b299      	uxth	r1, r3
 80106dc:	b909      	cbnz	r1, 80106e2 <__lo0bits+0x2a>
 80106de:	0c1b      	lsrs	r3, r3, #16
 80106e0:	2210      	movs	r2, #16
 80106e2:	b2d9      	uxtb	r1, r3
 80106e4:	b909      	cbnz	r1, 80106ea <__lo0bits+0x32>
 80106e6:	3208      	adds	r2, #8
 80106e8:	0a1b      	lsrs	r3, r3, #8
 80106ea:	0719      	lsls	r1, r3, #28
 80106ec:	bf04      	itt	eq
 80106ee:	091b      	lsreq	r3, r3, #4
 80106f0:	3204      	addeq	r2, #4
 80106f2:	0799      	lsls	r1, r3, #30
 80106f4:	bf04      	itt	eq
 80106f6:	089b      	lsreq	r3, r3, #2
 80106f8:	3202      	addeq	r2, #2
 80106fa:	07d9      	lsls	r1, r3, #31
 80106fc:	d403      	bmi.n	8010706 <__lo0bits+0x4e>
 80106fe:	085b      	lsrs	r3, r3, #1
 8010700:	f102 0201 	add.w	r2, r2, #1
 8010704:	d003      	beq.n	801070e <__lo0bits+0x56>
 8010706:	6003      	str	r3, [r0, #0]
 8010708:	e7e5      	b.n	80106d6 <__lo0bits+0x1e>
 801070a:	2200      	movs	r2, #0
 801070c:	e7e3      	b.n	80106d6 <__lo0bits+0x1e>
 801070e:	2220      	movs	r2, #32
 8010710:	e7e1      	b.n	80106d6 <__lo0bits+0x1e>
	...

08010714 <__i2b>:
 8010714:	b510      	push	{r4, lr}
 8010716:	460c      	mov	r4, r1
 8010718:	2101      	movs	r1, #1
 801071a:	f7ff febb 	bl	8010494 <_Balloc>
 801071e:	4602      	mov	r2, r0
 8010720:	b928      	cbnz	r0, 801072e <__i2b+0x1a>
 8010722:	4b05      	ldr	r3, [pc, #20]	; (8010738 <__i2b+0x24>)
 8010724:	4805      	ldr	r0, [pc, #20]	; (801073c <__i2b+0x28>)
 8010726:	f240 1145 	movw	r1, #325	; 0x145
 801072a:	f001 fc49 	bl	8011fc0 <__assert_func>
 801072e:	2301      	movs	r3, #1
 8010730:	6144      	str	r4, [r0, #20]
 8010732:	6103      	str	r3, [r0, #16]
 8010734:	bd10      	pop	{r4, pc}
 8010736:	bf00      	nop
 8010738:	080131f5 	.word	0x080131f5
 801073c:	08013206 	.word	0x08013206

08010740 <__multiply>:
 8010740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010744:	4691      	mov	r9, r2
 8010746:	690a      	ldr	r2, [r1, #16]
 8010748:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801074c:	429a      	cmp	r2, r3
 801074e:	bfb8      	it	lt
 8010750:	460b      	movlt	r3, r1
 8010752:	460c      	mov	r4, r1
 8010754:	bfbc      	itt	lt
 8010756:	464c      	movlt	r4, r9
 8010758:	4699      	movlt	r9, r3
 801075a:	6927      	ldr	r7, [r4, #16]
 801075c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010760:	68a3      	ldr	r3, [r4, #8]
 8010762:	6861      	ldr	r1, [r4, #4]
 8010764:	eb07 060a 	add.w	r6, r7, sl
 8010768:	42b3      	cmp	r3, r6
 801076a:	b085      	sub	sp, #20
 801076c:	bfb8      	it	lt
 801076e:	3101      	addlt	r1, #1
 8010770:	f7ff fe90 	bl	8010494 <_Balloc>
 8010774:	b930      	cbnz	r0, 8010784 <__multiply+0x44>
 8010776:	4602      	mov	r2, r0
 8010778:	4b44      	ldr	r3, [pc, #272]	; (801088c <__multiply+0x14c>)
 801077a:	4845      	ldr	r0, [pc, #276]	; (8010890 <__multiply+0x150>)
 801077c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010780:	f001 fc1e 	bl	8011fc0 <__assert_func>
 8010784:	f100 0514 	add.w	r5, r0, #20
 8010788:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801078c:	462b      	mov	r3, r5
 801078e:	2200      	movs	r2, #0
 8010790:	4543      	cmp	r3, r8
 8010792:	d321      	bcc.n	80107d8 <__multiply+0x98>
 8010794:	f104 0314 	add.w	r3, r4, #20
 8010798:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801079c:	f109 0314 	add.w	r3, r9, #20
 80107a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80107a4:	9202      	str	r2, [sp, #8]
 80107a6:	1b3a      	subs	r2, r7, r4
 80107a8:	3a15      	subs	r2, #21
 80107aa:	f022 0203 	bic.w	r2, r2, #3
 80107ae:	3204      	adds	r2, #4
 80107b0:	f104 0115 	add.w	r1, r4, #21
 80107b4:	428f      	cmp	r7, r1
 80107b6:	bf38      	it	cc
 80107b8:	2204      	movcc	r2, #4
 80107ba:	9201      	str	r2, [sp, #4]
 80107bc:	9a02      	ldr	r2, [sp, #8]
 80107be:	9303      	str	r3, [sp, #12]
 80107c0:	429a      	cmp	r2, r3
 80107c2:	d80c      	bhi.n	80107de <__multiply+0x9e>
 80107c4:	2e00      	cmp	r6, #0
 80107c6:	dd03      	ble.n	80107d0 <__multiply+0x90>
 80107c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d05b      	beq.n	8010888 <__multiply+0x148>
 80107d0:	6106      	str	r6, [r0, #16]
 80107d2:	b005      	add	sp, #20
 80107d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d8:	f843 2b04 	str.w	r2, [r3], #4
 80107dc:	e7d8      	b.n	8010790 <__multiply+0x50>
 80107de:	f8b3 a000 	ldrh.w	sl, [r3]
 80107e2:	f1ba 0f00 	cmp.w	sl, #0
 80107e6:	d024      	beq.n	8010832 <__multiply+0xf2>
 80107e8:	f104 0e14 	add.w	lr, r4, #20
 80107ec:	46a9      	mov	r9, r5
 80107ee:	f04f 0c00 	mov.w	ip, #0
 80107f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80107f6:	f8d9 1000 	ldr.w	r1, [r9]
 80107fa:	fa1f fb82 	uxth.w	fp, r2
 80107fe:	b289      	uxth	r1, r1
 8010800:	fb0a 110b 	mla	r1, sl, fp, r1
 8010804:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010808:	f8d9 2000 	ldr.w	r2, [r9]
 801080c:	4461      	add	r1, ip
 801080e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010812:	fb0a c20b 	mla	r2, sl, fp, ip
 8010816:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801081a:	b289      	uxth	r1, r1
 801081c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010820:	4577      	cmp	r7, lr
 8010822:	f849 1b04 	str.w	r1, [r9], #4
 8010826:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801082a:	d8e2      	bhi.n	80107f2 <__multiply+0xb2>
 801082c:	9a01      	ldr	r2, [sp, #4]
 801082e:	f845 c002 	str.w	ip, [r5, r2]
 8010832:	9a03      	ldr	r2, [sp, #12]
 8010834:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010838:	3304      	adds	r3, #4
 801083a:	f1b9 0f00 	cmp.w	r9, #0
 801083e:	d021      	beq.n	8010884 <__multiply+0x144>
 8010840:	6829      	ldr	r1, [r5, #0]
 8010842:	f104 0c14 	add.w	ip, r4, #20
 8010846:	46ae      	mov	lr, r5
 8010848:	f04f 0a00 	mov.w	sl, #0
 801084c:	f8bc b000 	ldrh.w	fp, [ip]
 8010850:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010854:	fb09 220b 	mla	r2, r9, fp, r2
 8010858:	4452      	add	r2, sl
 801085a:	b289      	uxth	r1, r1
 801085c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010860:	f84e 1b04 	str.w	r1, [lr], #4
 8010864:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010868:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801086c:	f8be 1000 	ldrh.w	r1, [lr]
 8010870:	fb09 110a 	mla	r1, r9, sl, r1
 8010874:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010878:	4567      	cmp	r7, ip
 801087a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801087e:	d8e5      	bhi.n	801084c <__multiply+0x10c>
 8010880:	9a01      	ldr	r2, [sp, #4]
 8010882:	50a9      	str	r1, [r5, r2]
 8010884:	3504      	adds	r5, #4
 8010886:	e799      	b.n	80107bc <__multiply+0x7c>
 8010888:	3e01      	subs	r6, #1
 801088a:	e79b      	b.n	80107c4 <__multiply+0x84>
 801088c:	080131f5 	.word	0x080131f5
 8010890:	08013206 	.word	0x08013206

08010894 <__pow5mult>:
 8010894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010898:	4615      	mov	r5, r2
 801089a:	f012 0203 	ands.w	r2, r2, #3
 801089e:	4606      	mov	r6, r0
 80108a0:	460f      	mov	r7, r1
 80108a2:	d007      	beq.n	80108b4 <__pow5mult+0x20>
 80108a4:	4c25      	ldr	r4, [pc, #148]	; (801093c <__pow5mult+0xa8>)
 80108a6:	3a01      	subs	r2, #1
 80108a8:	2300      	movs	r3, #0
 80108aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108ae:	f7ff fe53 	bl	8010558 <__multadd>
 80108b2:	4607      	mov	r7, r0
 80108b4:	10ad      	asrs	r5, r5, #2
 80108b6:	d03d      	beq.n	8010934 <__pow5mult+0xa0>
 80108b8:	69f4      	ldr	r4, [r6, #28]
 80108ba:	b97c      	cbnz	r4, 80108dc <__pow5mult+0x48>
 80108bc:	2010      	movs	r0, #16
 80108be:	f7ff fd35 	bl	801032c <malloc>
 80108c2:	4602      	mov	r2, r0
 80108c4:	61f0      	str	r0, [r6, #28]
 80108c6:	b928      	cbnz	r0, 80108d4 <__pow5mult+0x40>
 80108c8:	4b1d      	ldr	r3, [pc, #116]	; (8010940 <__pow5mult+0xac>)
 80108ca:	481e      	ldr	r0, [pc, #120]	; (8010944 <__pow5mult+0xb0>)
 80108cc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80108d0:	f001 fb76 	bl	8011fc0 <__assert_func>
 80108d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108d8:	6004      	str	r4, [r0, #0]
 80108da:	60c4      	str	r4, [r0, #12]
 80108dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80108e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80108e4:	b94c      	cbnz	r4, 80108fa <__pow5mult+0x66>
 80108e6:	f240 2171 	movw	r1, #625	; 0x271
 80108ea:	4630      	mov	r0, r6
 80108ec:	f7ff ff12 	bl	8010714 <__i2b>
 80108f0:	2300      	movs	r3, #0
 80108f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80108f6:	4604      	mov	r4, r0
 80108f8:	6003      	str	r3, [r0, #0]
 80108fa:	f04f 0900 	mov.w	r9, #0
 80108fe:	07eb      	lsls	r3, r5, #31
 8010900:	d50a      	bpl.n	8010918 <__pow5mult+0x84>
 8010902:	4639      	mov	r1, r7
 8010904:	4622      	mov	r2, r4
 8010906:	4630      	mov	r0, r6
 8010908:	f7ff ff1a 	bl	8010740 <__multiply>
 801090c:	4639      	mov	r1, r7
 801090e:	4680      	mov	r8, r0
 8010910:	4630      	mov	r0, r6
 8010912:	f7ff fdff 	bl	8010514 <_Bfree>
 8010916:	4647      	mov	r7, r8
 8010918:	106d      	asrs	r5, r5, #1
 801091a:	d00b      	beq.n	8010934 <__pow5mult+0xa0>
 801091c:	6820      	ldr	r0, [r4, #0]
 801091e:	b938      	cbnz	r0, 8010930 <__pow5mult+0x9c>
 8010920:	4622      	mov	r2, r4
 8010922:	4621      	mov	r1, r4
 8010924:	4630      	mov	r0, r6
 8010926:	f7ff ff0b 	bl	8010740 <__multiply>
 801092a:	6020      	str	r0, [r4, #0]
 801092c:	f8c0 9000 	str.w	r9, [r0]
 8010930:	4604      	mov	r4, r0
 8010932:	e7e4      	b.n	80108fe <__pow5mult+0x6a>
 8010934:	4638      	mov	r0, r7
 8010936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801093a:	bf00      	nop
 801093c:	08013350 	.word	0x08013350
 8010940:	08013186 	.word	0x08013186
 8010944:	08013206 	.word	0x08013206

08010948 <__lshift>:
 8010948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801094c:	460c      	mov	r4, r1
 801094e:	6849      	ldr	r1, [r1, #4]
 8010950:	6923      	ldr	r3, [r4, #16]
 8010952:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010956:	68a3      	ldr	r3, [r4, #8]
 8010958:	4607      	mov	r7, r0
 801095a:	4691      	mov	r9, r2
 801095c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010960:	f108 0601 	add.w	r6, r8, #1
 8010964:	42b3      	cmp	r3, r6
 8010966:	db0b      	blt.n	8010980 <__lshift+0x38>
 8010968:	4638      	mov	r0, r7
 801096a:	f7ff fd93 	bl	8010494 <_Balloc>
 801096e:	4605      	mov	r5, r0
 8010970:	b948      	cbnz	r0, 8010986 <__lshift+0x3e>
 8010972:	4602      	mov	r2, r0
 8010974:	4b28      	ldr	r3, [pc, #160]	; (8010a18 <__lshift+0xd0>)
 8010976:	4829      	ldr	r0, [pc, #164]	; (8010a1c <__lshift+0xd4>)
 8010978:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801097c:	f001 fb20 	bl	8011fc0 <__assert_func>
 8010980:	3101      	adds	r1, #1
 8010982:	005b      	lsls	r3, r3, #1
 8010984:	e7ee      	b.n	8010964 <__lshift+0x1c>
 8010986:	2300      	movs	r3, #0
 8010988:	f100 0114 	add.w	r1, r0, #20
 801098c:	f100 0210 	add.w	r2, r0, #16
 8010990:	4618      	mov	r0, r3
 8010992:	4553      	cmp	r3, sl
 8010994:	db33      	blt.n	80109fe <__lshift+0xb6>
 8010996:	6920      	ldr	r0, [r4, #16]
 8010998:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801099c:	f104 0314 	add.w	r3, r4, #20
 80109a0:	f019 091f 	ands.w	r9, r9, #31
 80109a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80109a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80109ac:	d02b      	beq.n	8010a06 <__lshift+0xbe>
 80109ae:	f1c9 0e20 	rsb	lr, r9, #32
 80109b2:	468a      	mov	sl, r1
 80109b4:	2200      	movs	r2, #0
 80109b6:	6818      	ldr	r0, [r3, #0]
 80109b8:	fa00 f009 	lsl.w	r0, r0, r9
 80109bc:	4310      	orrs	r0, r2
 80109be:	f84a 0b04 	str.w	r0, [sl], #4
 80109c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80109c6:	459c      	cmp	ip, r3
 80109c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80109cc:	d8f3      	bhi.n	80109b6 <__lshift+0x6e>
 80109ce:	ebac 0304 	sub.w	r3, ip, r4
 80109d2:	3b15      	subs	r3, #21
 80109d4:	f023 0303 	bic.w	r3, r3, #3
 80109d8:	3304      	adds	r3, #4
 80109da:	f104 0015 	add.w	r0, r4, #21
 80109de:	4584      	cmp	ip, r0
 80109e0:	bf38      	it	cc
 80109e2:	2304      	movcc	r3, #4
 80109e4:	50ca      	str	r2, [r1, r3]
 80109e6:	b10a      	cbz	r2, 80109ec <__lshift+0xa4>
 80109e8:	f108 0602 	add.w	r6, r8, #2
 80109ec:	3e01      	subs	r6, #1
 80109ee:	4638      	mov	r0, r7
 80109f0:	612e      	str	r6, [r5, #16]
 80109f2:	4621      	mov	r1, r4
 80109f4:	f7ff fd8e 	bl	8010514 <_Bfree>
 80109f8:	4628      	mov	r0, r5
 80109fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8010a02:	3301      	adds	r3, #1
 8010a04:	e7c5      	b.n	8010992 <__lshift+0x4a>
 8010a06:	3904      	subs	r1, #4
 8010a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8010a10:	459c      	cmp	ip, r3
 8010a12:	d8f9      	bhi.n	8010a08 <__lshift+0xc0>
 8010a14:	e7ea      	b.n	80109ec <__lshift+0xa4>
 8010a16:	bf00      	nop
 8010a18:	080131f5 	.word	0x080131f5
 8010a1c:	08013206 	.word	0x08013206

08010a20 <__mcmp>:
 8010a20:	b530      	push	{r4, r5, lr}
 8010a22:	6902      	ldr	r2, [r0, #16]
 8010a24:	690c      	ldr	r4, [r1, #16]
 8010a26:	1b12      	subs	r2, r2, r4
 8010a28:	d10e      	bne.n	8010a48 <__mcmp+0x28>
 8010a2a:	f100 0314 	add.w	r3, r0, #20
 8010a2e:	3114      	adds	r1, #20
 8010a30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a40:	42a5      	cmp	r5, r4
 8010a42:	d003      	beq.n	8010a4c <__mcmp+0x2c>
 8010a44:	d305      	bcc.n	8010a52 <__mcmp+0x32>
 8010a46:	2201      	movs	r2, #1
 8010a48:	4610      	mov	r0, r2
 8010a4a:	bd30      	pop	{r4, r5, pc}
 8010a4c:	4283      	cmp	r3, r0
 8010a4e:	d3f3      	bcc.n	8010a38 <__mcmp+0x18>
 8010a50:	e7fa      	b.n	8010a48 <__mcmp+0x28>
 8010a52:	f04f 32ff 	mov.w	r2, #4294967295
 8010a56:	e7f7      	b.n	8010a48 <__mcmp+0x28>

08010a58 <__mdiff>:
 8010a58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a5c:	460c      	mov	r4, r1
 8010a5e:	4606      	mov	r6, r0
 8010a60:	4611      	mov	r1, r2
 8010a62:	4620      	mov	r0, r4
 8010a64:	4690      	mov	r8, r2
 8010a66:	f7ff ffdb 	bl	8010a20 <__mcmp>
 8010a6a:	1e05      	subs	r5, r0, #0
 8010a6c:	d110      	bne.n	8010a90 <__mdiff+0x38>
 8010a6e:	4629      	mov	r1, r5
 8010a70:	4630      	mov	r0, r6
 8010a72:	f7ff fd0f 	bl	8010494 <_Balloc>
 8010a76:	b930      	cbnz	r0, 8010a86 <__mdiff+0x2e>
 8010a78:	4b3a      	ldr	r3, [pc, #232]	; (8010b64 <__mdiff+0x10c>)
 8010a7a:	4602      	mov	r2, r0
 8010a7c:	f240 2137 	movw	r1, #567	; 0x237
 8010a80:	4839      	ldr	r0, [pc, #228]	; (8010b68 <__mdiff+0x110>)
 8010a82:	f001 fa9d 	bl	8011fc0 <__assert_func>
 8010a86:	2301      	movs	r3, #1
 8010a88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a90:	bfa4      	itt	ge
 8010a92:	4643      	movge	r3, r8
 8010a94:	46a0      	movge	r8, r4
 8010a96:	4630      	mov	r0, r6
 8010a98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a9c:	bfa6      	itte	ge
 8010a9e:	461c      	movge	r4, r3
 8010aa0:	2500      	movge	r5, #0
 8010aa2:	2501      	movlt	r5, #1
 8010aa4:	f7ff fcf6 	bl	8010494 <_Balloc>
 8010aa8:	b920      	cbnz	r0, 8010ab4 <__mdiff+0x5c>
 8010aaa:	4b2e      	ldr	r3, [pc, #184]	; (8010b64 <__mdiff+0x10c>)
 8010aac:	4602      	mov	r2, r0
 8010aae:	f240 2145 	movw	r1, #581	; 0x245
 8010ab2:	e7e5      	b.n	8010a80 <__mdiff+0x28>
 8010ab4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010ab8:	6926      	ldr	r6, [r4, #16]
 8010aba:	60c5      	str	r5, [r0, #12]
 8010abc:	f104 0914 	add.w	r9, r4, #20
 8010ac0:	f108 0514 	add.w	r5, r8, #20
 8010ac4:	f100 0e14 	add.w	lr, r0, #20
 8010ac8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010acc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010ad0:	f108 0210 	add.w	r2, r8, #16
 8010ad4:	46f2      	mov	sl, lr
 8010ad6:	2100      	movs	r1, #0
 8010ad8:	f859 3b04 	ldr.w	r3, [r9], #4
 8010adc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010ae0:	fa11 f88b 	uxtah	r8, r1, fp
 8010ae4:	b299      	uxth	r1, r3
 8010ae6:	0c1b      	lsrs	r3, r3, #16
 8010ae8:	eba8 0801 	sub.w	r8, r8, r1
 8010aec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010af0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010af4:	fa1f f888 	uxth.w	r8, r8
 8010af8:	1419      	asrs	r1, r3, #16
 8010afa:	454e      	cmp	r6, r9
 8010afc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010b00:	f84a 3b04 	str.w	r3, [sl], #4
 8010b04:	d8e8      	bhi.n	8010ad8 <__mdiff+0x80>
 8010b06:	1b33      	subs	r3, r6, r4
 8010b08:	3b15      	subs	r3, #21
 8010b0a:	f023 0303 	bic.w	r3, r3, #3
 8010b0e:	3304      	adds	r3, #4
 8010b10:	3415      	adds	r4, #21
 8010b12:	42a6      	cmp	r6, r4
 8010b14:	bf38      	it	cc
 8010b16:	2304      	movcc	r3, #4
 8010b18:	441d      	add	r5, r3
 8010b1a:	4473      	add	r3, lr
 8010b1c:	469e      	mov	lr, r3
 8010b1e:	462e      	mov	r6, r5
 8010b20:	4566      	cmp	r6, ip
 8010b22:	d30e      	bcc.n	8010b42 <__mdiff+0xea>
 8010b24:	f10c 0203 	add.w	r2, ip, #3
 8010b28:	1b52      	subs	r2, r2, r5
 8010b2a:	f022 0203 	bic.w	r2, r2, #3
 8010b2e:	3d03      	subs	r5, #3
 8010b30:	45ac      	cmp	ip, r5
 8010b32:	bf38      	it	cc
 8010b34:	2200      	movcc	r2, #0
 8010b36:	4413      	add	r3, r2
 8010b38:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010b3c:	b17a      	cbz	r2, 8010b5e <__mdiff+0x106>
 8010b3e:	6107      	str	r7, [r0, #16]
 8010b40:	e7a4      	b.n	8010a8c <__mdiff+0x34>
 8010b42:	f856 8b04 	ldr.w	r8, [r6], #4
 8010b46:	fa11 f288 	uxtah	r2, r1, r8
 8010b4a:	1414      	asrs	r4, r2, #16
 8010b4c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b50:	b292      	uxth	r2, r2
 8010b52:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010b56:	f84e 2b04 	str.w	r2, [lr], #4
 8010b5a:	1421      	asrs	r1, r4, #16
 8010b5c:	e7e0      	b.n	8010b20 <__mdiff+0xc8>
 8010b5e:	3f01      	subs	r7, #1
 8010b60:	e7ea      	b.n	8010b38 <__mdiff+0xe0>
 8010b62:	bf00      	nop
 8010b64:	080131f5 	.word	0x080131f5
 8010b68:	08013206 	.word	0x08013206

08010b6c <__ulp>:
 8010b6c:	b082      	sub	sp, #8
 8010b6e:	ed8d 0b00 	vstr	d0, [sp]
 8010b72:	9a01      	ldr	r2, [sp, #4]
 8010b74:	4b0f      	ldr	r3, [pc, #60]	; (8010bb4 <__ulp+0x48>)
 8010b76:	4013      	ands	r3, r2
 8010b78:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	dc08      	bgt.n	8010b92 <__ulp+0x26>
 8010b80:	425b      	negs	r3, r3
 8010b82:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8010b86:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010b8a:	da04      	bge.n	8010b96 <__ulp+0x2a>
 8010b8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010b90:	4113      	asrs	r3, r2
 8010b92:	2200      	movs	r2, #0
 8010b94:	e008      	b.n	8010ba8 <__ulp+0x3c>
 8010b96:	f1a2 0314 	sub.w	r3, r2, #20
 8010b9a:	2b1e      	cmp	r3, #30
 8010b9c:	bfda      	itte	le
 8010b9e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8010ba2:	40da      	lsrle	r2, r3
 8010ba4:	2201      	movgt	r2, #1
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	4619      	mov	r1, r3
 8010baa:	4610      	mov	r0, r2
 8010bac:	ec41 0b10 	vmov	d0, r0, r1
 8010bb0:	b002      	add	sp, #8
 8010bb2:	4770      	bx	lr
 8010bb4:	7ff00000 	.word	0x7ff00000

08010bb8 <__b2d>:
 8010bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bbc:	6906      	ldr	r6, [r0, #16]
 8010bbe:	f100 0814 	add.w	r8, r0, #20
 8010bc2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010bc6:	1f37      	subs	r7, r6, #4
 8010bc8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010bcc:	4610      	mov	r0, r2
 8010bce:	f7ff fd53 	bl	8010678 <__hi0bits>
 8010bd2:	f1c0 0320 	rsb	r3, r0, #32
 8010bd6:	280a      	cmp	r0, #10
 8010bd8:	600b      	str	r3, [r1, #0]
 8010bda:	491b      	ldr	r1, [pc, #108]	; (8010c48 <__b2d+0x90>)
 8010bdc:	dc15      	bgt.n	8010c0a <__b2d+0x52>
 8010bde:	f1c0 0c0b 	rsb	ip, r0, #11
 8010be2:	fa22 f30c 	lsr.w	r3, r2, ip
 8010be6:	45b8      	cmp	r8, r7
 8010be8:	ea43 0501 	orr.w	r5, r3, r1
 8010bec:	bf34      	ite	cc
 8010bee:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010bf2:	2300      	movcs	r3, #0
 8010bf4:	3015      	adds	r0, #21
 8010bf6:	fa02 f000 	lsl.w	r0, r2, r0
 8010bfa:	fa23 f30c 	lsr.w	r3, r3, ip
 8010bfe:	4303      	orrs	r3, r0
 8010c00:	461c      	mov	r4, r3
 8010c02:	ec45 4b10 	vmov	d0, r4, r5
 8010c06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c0a:	45b8      	cmp	r8, r7
 8010c0c:	bf3a      	itte	cc
 8010c0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8010c12:	f1a6 0708 	subcc.w	r7, r6, #8
 8010c16:	2300      	movcs	r3, #0
 8010c18:	380b      	subs	r0, #11
 8010c1a:	d012      	beq.n	8010c42 <__b2d+0x8a>
 8010c1c:	f1c0 0120 	rsb	r1, r0, #32
 8010c20:	fa23 f401 	lsr.w	r4, r3, r1
 8010c24:	4082      	lsls	r2, r0
 8010c26:	4322      	orrs	r2, r4
 8010c28:	4547      	cmp	r7, r8
 8010c2a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8010c2e:	bf8c      	ite	hi
 8010c30:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010c34:	2200      	movls	r2, #0
 8010c36:	4083      	lsls	r3, r0
 8010c38:	40ca      	lsrs	r2, r1
 8010c3a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010c3e:	4313      	orrs	r3, r2
 8010c40:	e7de      	b.n	8010c00 <__b2d+0x48>
 8010c42:	ea42 0501 	orr.w	r5, r2, r1
 8010c46:	e7db      	b.n	8010c00 <__b2d+0x48>
 8010c48:	3ff00000 	.word	0x3ff00000

08010c4c <__d2b>:
 8010c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010c50:	460f      	mov	r7, r1
 8010c52:	2101      	movs	r1, #1
 8010c54:	ec59 8b10 	vmov	r8, r9, d0
 8010c58:	4616      	mov	r6, r2
 8010c5a:	f7ff fc1b 	bl	8010494 <_Balloc>
 8010c5e:	4604      	mov	r4, r0
 8010c60:	b930      	cbnz	r0, 8010c70 <__d2b+0x24>
 8010c62:	4602      	mov	r2, r0
 8010c64:	4b24      	ldr	r3, [pc, #144]	; (8010cf8 <__d2b+0xac>)
 8010c66:	4825      	ldr	r0, [pc, #148]	; (8010cfc <__d2b+0xb0>)
 8010c68:	f240 310f 	movw	r1, #783	; 0x30f
 8010c6c:	f001 f9a8 	bl	8011fc0 <__assert_func>
 8010c70:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010c74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010c78:	bb2d      	cbnz	r5, 8010cc6 <__d2b+0x7a>
 8010c7a:	9301      	str	r3, [sp, #4]
 8010c7c:	f1b8 0300 	subs.w	r3, r8, #0
 8010c80:	d026      	beq.n	8010cd0 <__d2b+0x84>
 8010c82:	4668      	mov	r0, sp
 8010c84:	9300      	str	r3, [sp, #0]
 8010c86:	f7ff fd17 	bl	80106b8 <__lo0bits>
 8010c8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010c8e:	b1e8      	cbz	r0, 8010ccc <__d2b+0x80>
 8010c90:	f1c0 0320 	rsb	r3, r0, #32
 8010c94:	fa02 f303 	lsl.w	r3, r2, r3
 8010c98:	430b      	orrs	r3, r1
 8010c9a:	40c2      	lsrs	r2, r0
 8010c9c:	6163      	str	r3, [r4, #20]
 8010c9e:	9201      	str	r2, [sp, #4]
 8010ca0:	9b01      	ldr	r3, [sp, #4]
 8010ca2:	61a3      	str	r3, [r4, #24]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	bf14      	ite	ne
 8010ca8:	2202      	movne	r2, #2
 8010caa:	2201      	moveq	r2, #1
 8010cac:	6122      	str	r2, [r4, #16]
 8010cae:	b1bd      	cbz	r5, 8010ce0 <__d2b+0x94>
 8010cb0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010cb4:	4405      	add	r5, r0
 8010cb6:	603d      	str	r5, [r7, #0]
 8010cb8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010cbc:	6030      	str	r0, [r6, #0]
 8010cbe:	4620      	mov	r0, r4
 8010cc0:	b003      	add	sp, #12
 8010cc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010cca:	e7d6      	b.n	8010c7a <__d2b+0x2e>
 8010ccc:	6161      	str	r1, [r4, #20]
 8010cce:	e7e7      	b.n	8010ca0 <__d2b+0x54>
 8010cd0:	a801      	add	r0, sp, #4
 8010cd2:	f7ff fcf1 	bl	80106b8 <__lo0bits>
 8010cd6:	9b01      	ldr	r3, [sp, #4]
 8010cd8:	6163      	str	r3, [r4, #20]
 8010cda:	3020      	adds	r0, #32
 8010cdc:	2201      	movs	r2, #1
 8010cde:	e7e5      	b.n	8010cac <__d2b+0x60>
 8010ce0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010ce4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010ce8:	6038      	str	r0, [r7, #0]
 8010cea:	6918      	ldr	r0, [r3, #16]
 8010cec:	f7ff fcc4 	bl	8010678 <__hi0bits>
 8010cf0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010cf4:	e7e2      	b.n	8010cbc <__d2b+0x70>
 8010cf6:	bf00      	nop
 8010cf8:	080131f5 	.word	0x080131f5
 8010cfc:	08013206 	.word	0x08013206

08010d00 <__ratio>:
 8010d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d04:	4688      	mov	r8, r1
 8010d06:	4669      	mov	r1, sp
 8010d08:	4681      	mov	r9, r0
 8010d0a:	f7ff ff55 	bl	8010bb8 <__b2d>
 8010d0e:	a901      	add	r1, sp, #4
 8010d10:	4640      	mov	r0, r8
 8010d12:	ec55 4b10 	vmov	r4, r5, d0
 8010d16:	f7ff ff4f 	bl	8010bb8 <__b2d>
 8010d1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010d22:	eba3 0c02 	sub.w	ip, r3, r2
 8010d26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010d2a:	1a9b      	subs	r3, r3, r2
 8010d2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010d30:	ec51 0b10 	vmov	r0, r1, d0
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	bfd6      	itet	le
 8010d38:	460a      	movle	r2, r1
 8010d3a:	462a      	movgt	r2, r5
 8010d3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010d40:	468b      	mov	fp, r1
 8010d42:	462f      	mov	r7, r5
 8010d44:	bfd4      	ite	le
 8010d46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8010d4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010d4e:	4620      	mov	r0, r4
 8010d50:	ee10 2a10 	vmov	r2, s0
 8010d54:	465b      	mov	r3, fp
 8010d56:	4639      	mov	r1, r7
 8010d58:	f7ef fd98 	bl	800088c <__aeabi_ddiv>
 8010d5c:	ec41 0b10 	vmov	d0, r0, r1
 8010d60:	b003      	add	sp, #12
 8010d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010d66 <__copybits>:
 8010d66:	3901      	subs	r1, #1
 8010d68:	b570      	push	{r4, r5, r6, lr}
 8010d6a:	1149      	asrs	r1, r1, #5
 8010d6c:	6914      	ldr	r4, [r2, #16]
 8010d6e:	3101      	adds	r1, #1
 8010d70:	f102 0314 	add.w	r3, r2, #20
 8010d74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010d78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010d7c:	1f05      	subs	r5, r0, #4
 8010d7e:	42a3      	cmp	r3, r4
 8010d80:	d30c      	bcc.n	8010d9c <__copybits+0x36>
 8010d82:	1aa3      	subs	r3, r4, r2
 8010d84:	3b11      	subs	r3, #17
 8010d86:	f023 0303 	bic.w	r3, r3, #3
 8010d8a:	3211      	adds	r2, #17
 8010d8c:	42a2      	cmp	r2, r4
 8010d8e:	bf88      	it	hi
 8010d90:	2300      	movhi	r3, #0
 8010d92:	4418      	add	r0, r3
 8010d94:	2300      	movs	r3, #0
 8010d96:	4288      	cmp	r0, r1
 8010d98:	d305      	bcc.n	8010da6 <__copybits+0x40>
 8010d9a:	bd70      	pop	{r4, r5, r6, pc}
 8010d9c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010da0:	f845 6f04 	str.w	r6, [r5, #4]!
 8010da4:	e7eb      	b.n	8010d7e <__copybits+0x18>
 8010da6:	f840 3b04 	str.w	r3, [r0], #4
 8010daa:	e7f4      	b.n	8010d96 <__copybits+0x30>

08010dac <__any_on>:
 8010dac:	f100 0214 	add.w	r2, r0, #20
 8010db0:	6900      	ldr	r0, [r0, #16]
 8010db2:	114b      	asrs	r3, r1, #5
 8010db4:	4298      	cmp	r0, r3
 8010db6:	b510      	push	{r4, lr}
 8010db8:	db11      	blt.n	8010dde <__any_on+0x32>
 8010dba:	dd0a      	ble.n	8010dd2 <__any_on+0x26>
 8010dbc:	f011 011f 	ands.w	r1, r1, #31
 8010dc0:	d007      	beq.n	8010dd2 <__any_on+0x26>
 8010dc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010dc6:	fa24 f001 	lsr.w	r0, r4, r1
 8010dca:	fa00 f101 	lsl.w	r1, r0, r1
 8010dce:	428c      	cmp	r4, r1
 8010dd0:	d10b      	bne.n	8010dea <__any_on+0x3e>
 8010dd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010dd6:	4293      	cmp	r3, r2
 8010dd8:	d803      	bhi.n	8010de2 <__any_on+0x36>
 8010dda:	2000      	movs	r0, #0
 8010ddc:	bd10      	pop	{r4, pc}
 8010dde:	4603      	mov	r3, r0
 8010de0:	e7f7      	b.n	8010dd2 <__any_on+0x26>
 8010de2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010de6:	2900      	cmp	r1, #0
 8010de8:	d0f5      	beq.n	8010dd6 <__any_on+0x2a>
 8010dea:	2001      	movs	r0, #1
 8010dec:	e7f6      	b.n	8010ddc <__any_on+0x30>

08010dee <_malloc_usable_size_r>:
 8010dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010df2:	1f18      	subs	r0, r3, #4
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	bfbc      	itt	lt
 8010df8:	580b      	ldrlt	r3, [r1, r0]
 8010dfa:	18c0      	addlt	r0, r0, r3
 8010dfc:	4770      	bx	lr

08010dfe <sulp>:
 8010dfe:	b570      	push	{r4, r5, r6, lr}
 8010e00:	4604      	mov	r4, r0
 8010e02:	460d      	mov	r5, r1
 8010e04:	ec45 4b10 	vmov	d0, r4, r5
 8010e08:	4616      	mov	r6, r2
 8010e0a:	f7ff feaf 	bl	8010b6c <__ulp>
 8010e0e:	ec51 0b10 	vmov	r0, r1, d0
 8010e12:	b17e      	cbz	r6, 8010e34 <sulp+0x36>
 8010e14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010e18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	dd09      	ble.n	8010e34 <sulp+0x36>
 8010e20:	051b      	lsls	r3, r3, #20
 8010e22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010e26:	2400      	movs	r4, #0
 8010e28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010e2c:	4622      	mov	r2, r4
 8010e2e:	462b      	mov	r3, r5
 8010e30:	f7ef fc02 	bl	8000638 <__aeabi_dmul>
 8010e34:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e38 <_strtod_l>:
 8010e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e3c:	ed2d 8b02 	vpush	{d8}
 8010e40:	b09b      	sub	sp, #108	; 0x6c
 8010e42:	4604      	mov	r4, r0
 8010e44:	9213      	str	r2, [sp, #76]	; 0x4c
 8010e46:	2200      	movs	r2, #0
 8010e48:	9216      	str	r2, [sp, #88]	; 0x58
 8010e4a:	460d      	mov	r5, r1
 8010e4c:	f04f 0800 	mov.w	r8, #0
 8010e50:	f04f 0900 	mov.w	r9, #0
 8010e54:	460a      	mov	r2, r1
 8010e56:	9215      	str	r2, [sp, #84]	; 0x54
 8010e58:	7811      	ldrb	r1, [r2, #0]
 8010e5a:	292b      	cmp	r1, #43	; 0x2b
 8010e5c:	d04c      	beq.n	8010ef8 <_strtod_l+0xc0>
 8010e5e:	d83a      	bhi.n	8010ed6 <_strtod_l+0x9e>
 8010e60:	290d      	cmp	r1, #13
 8010e62:	d834      	bhi.n	8010ece <_strtod_l+0x96>
 8010e64:	2908      	cmp	r1, #8
 8010e66:	d834      	bhi.n	8010ed2 <_strtod_l+0x9a>
 8010e68:	2900      	cmp	r1, #0
 8010e6a:	d03d      	beq.n	8010ee8 <_strtod_l+0xb0>
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	920a      	str	r2, [sp, #40]	; 0x28
 8010e70:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8010e72:	7832      	ldrb	r2, [r6, #0]
 8010e74:	2a30      	cmp	r2, #48	; 0x30
 8010e76:	f040 80b4 	bne.w	8010fe2 <_strtod_l+0x1aa>
 8010e7a:	7872      	ldrb	r2, [r6, #1]
 8010e7c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8010e80:	2a58      	cmp	r2, #88	; 0x58
 8010e82:	d170      	bne.n	8010f66 <_strtod_l+0x12e>
 8010e84:	9302      	str	r3, [sp, #8]
 8010e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e88:	9301      	str	r3, [sp, #4]
 8010e8a:	ab16      	add	r3, sp, #88	; 0x58
 8010e8c:	9300      	str	r3, [sp, #0]
 8010e8e:	4a8e      	ldr	r2, [pc, #568]	; (80110c8 <_strtod_l+0x290>)
 8010e90:	ab17      	add	r3, sp, #92	; 0x5c
 8010e92:	a915      	add	r1, sp, #84	; 0x54
 8010e94:	4620      	mov	r0, r4
 8010e96:	f001 f92f 	bl	80120f8 <__gethex>
 8010e9a:	f010 070f 	ands.w	r7, r0, #15
 8010e9e:	4605      	mov	r5, r0
 8010ea0:	d005      	beq.n	8010eae <_strtod_l+0x76>
 8010ea2:	2f06      	cmp	r7, #6
 8010ea4:	d12a      	bne.n	8010efc <_strtod_l+0xc4>
 8010ea6:	3601      	adds	r6, #1
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	9615      	str	r6, [sp, #84]	; 0x54
 8010eac:	930a      	str	r3, [sp, #40]	; 0x28
 8010eae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	f040 857f 	bne.w	80119b4 <_strtod_l+0xb7c>
 8010eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010eb8:	b1db      	cbz	r3, 8010ef2 <_strtod_l+0xba>
 8010eba:	4642      	mov	r2, r8
 8010ebc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010ec0:	ec43 2b10 	vmov	d0, r2, r3
 8010ec4:	b01b      	add	sp, #108	; 0x6c
 8010ec6:	ecbd 8b02 	vpop	{d8}
 8010eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ece:	2920      	cmp	r1, #32
 8010ed0:	d1cc      	bne.n	8010e6c <_strtod_l+0x34>
 8010ed2:	3201      	adds	r2, #1
 8010ed4:	e7bf      	b.n	8010e56 <_strtod_l+0x1e>
 8010ed6:	292d      	cmp	r1, #45	; 0x2d
 8010ed8:	d1c8      	bne.n	8010e6c <_strtod_l+0x34>
 8010eda:	2101      	movs	r1, #1
 8010edc:	910a      	str	r1, [sp, #40]	; 0x28
 8010ede:	1c51      	adds	r1, r2, #1
 8010ee0:	9115      	str	r1, [sp, #84]	; 0x54
 8010ee2:	7852      	ldrb	r2, [r2, #1]
 8010ee4:	2a00      	cmp	r2, #0
 8010ee6:	d1c3      	bne.n	8010e70 <_strtod_l+0x38>
 8010ee8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010eea:	9515      	str	r5, [sp, #84]	; 0x54
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	f040 855f 	bne.w	80119b0 <_strtod_l+0xb78>
 8010ef2:	4642      	mov	r2, r8
 8010ef4:	464b      	mov	r3, r9
 8010ef6:	e7e3      	b.n	8010ec0 <_strtod_l+0x88>
 8010ef8:	2100      	movs	r1, #0
 8010efa:	e7ef      	b.n	8010edc <_strtod_l+0xa4>
 8010efc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010efe:	b13a      	cbz	r2, 8010f10 <_strtod_l+0xd8>
 8010f00:	2135      	movs	r1, #53	; 0x35
 8010f02:	a818      	add	r0, sp, #96	; 0x60
 8010f04:	f7ff ff2f 	bl	8010d66 <__copybits>
 8010f08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8010f0a:	4620      	mov	r0, r4
 8010f0c:	f7ff fb02 	bl	8010514 <_Bfree>
 8010f10:	3f01      	subs	r7, #1
 8010f12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010f14:	2f04      	cmp	r7, #4
 8010f16:	d806      	bhi.n	8010f26 <_strtod_l+0xee>
 8010f18:	e8df f007 	tbb	[pc, r7]
 8010f1c:	201d0314 	.word	0x201d0314
 8010f20:	14          	.byte	0x14
 8010f21:	00          	.byte	0x00
 8010f22:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8010f26:	05e9      	lsls	r1, r5, #23
 8010f28:	bf48      	it	mi
 8010f2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8010f2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010f32:	0d1b      	lsrs	r3, r3, #20
 8010f34:	051b      	lsls	r3, r3, #20
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1b9      	bne.n	8010eae <_strtod_l+0x76>
 8010f3a:	f7fe faed 	bl	800f518 <__errno>
 8010f3e:	2322      	movs	r3, #34	; 0x22
 8010f40:	6003      	str	r3, [r0, #0]
 8010f42:	e7b4      	b.n	8010eae <_strtod_l+0x76>
 8010f44:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8010f48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010f4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010f50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8010f54:	e7e7      	b.n	8010f26 <_strtod_l+0xee>
 8010f56:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80110d0 <_strtod_l+0x298>
 8010f5a:	e7e4      	b.n	8010f26 <_strtod_l+0xee>
 8010f5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8010f60:	f04f 38ff 	mov.w	r8, #4294967295
 8010f64:	e7df      	b.n	8010f26 <_strtod_l+0xee>
 8010f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f68:	1c5a      	adds	r2, r3, #1
 8010f6a:	9215      	str	r2, [sp, #84]	; 0x54
 8010f6c:	785b      	ldrb	r3, [r3, #1]
 8010f6e:	2b30      	cmp	r3, #48	; 0x30
 8010f70:	d0f9      	beq.n	8010f66 <_strtod_l+0x12e>
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d09b      	beq.n	8010eae <_strtod_l+0x76>
 8010f76:	2301      	movs	r3, #1
 8010f78:	f04f 0a00 	mov.w	sl, #0
 8010f7c:	9304      	str	r3, [sp, #16]
 8010f7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010f80:	930b      	str	r3, [sp, #44]	; 0x2c
 8010f82:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010f86:	46d3      	mov	fp, sl
 8010f88:	220a      	movs	r2, #10
 8010f8a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8010f8c:	7806      	ldrb	r6, [r0, #0]
 8010f8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010f92:	b2d9      	uxtb	r1, r3
 8010f94:	2909      	cmp	r1, #9
 8010f96:	d926      	bls.n	8010fe6 <_strtod_l+0x1ae>
 8010f98:	494c      	ldr	r1, [pc, #304]	; (80110cc <_strtod_l+0x294>)
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f000 ffe6 	bl	8011f6c <strncmp>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	d030      	beq.n	8011006 <_strtod_l+0x1ce>
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	4632      	mov	r2, r6
 8010fa8:	9005      	str	r0, [sp, #20]
 8010faa:	465e      	mov	r6, fp
 8010fac:	4603      	mov	r3, r0
 8010fae:	2a65      	cmp	r2, #101	; 0x65
 8010fb0:	d001      	beq.n	8010fb6 <_strtod_l+0x17e>
 8010fb2:	2a45      	cmp	r2, #69	; 0x45
 8010fb4:	d113      	bne.n	8010fde <_strtod_l+0x1a6>
 8010fb6:	b91e      	cbnz	r6, 8010fc0 <_strtod_l+0x188>
 8010fb8:	9a04      	ldr	r2, [sp, #16]
 8010fba:	4302      	orrs	r2, r0
 8010fbc:	d094      	beq.n	8010ee8 <_strtod_l+0xb0>
 8010fbe:	2600      	movs	r6, #0
 8010fc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8010fc2:	1c6a      	adds	r2, r5, #1
 8010fc4:	9215      	str	r2, [sp, #84]	; 0x54
 8010fc6:	786a      	ldrb	r2, [r5, #1]
 8010fc8:	2a2b      	cmp	r2, #43	; 0x2b
 8010fca:	d074      	beq.n	80110b6 <_strtod_l+0x27e>
 8010fcc:	2a2d      	cmp	r2, #45	; 0x2d
 8010fce:	d078      	beq.n	80110c2 <_strtod_l+0x28a>
 8010fd0:	f04f 0c00 	mov.w	ip, #0
 8010fd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8010fd8:	2909      	cmp	r1, #9
 8010fda:	d97f      	bls.n	80110dc <_strtod_l+0x2a4>
 8010fdc:	9515      	str	r5, [sp, #84]	; 0x54
 8010fde:	2700      	movs	r7, #0
 8010fe0:	e09e      	b.n	8011120 <_strtod_l+0x2e8>
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	e7c8      	b.n	8010f78 <_strtod_l+0x140>
 8010fe6:	f1bb 0f08 	cmp.w	fp, #8
 8010fea:	bfd8      	it	le
 8010fec:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8010fee:	f100 0001 	add.w	r0, r0, #1
 8010ff2:	bfda      	itte	le
 8010ff4:	fb02 3301 	mlale	r3, r2, r1, r3
 8010ff8:	9309      	strle	r3, [sp, #36]	; 0x24
 8010ffa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8010ffe:	f10b 0b01 	add.w	fp, fp, #1
 8011002:	9015      	str	r0, [sp, #84]	; 0x54
 8011004:	e7c1      	b.n	8010f8a <_strtod_l+0x152>
 8011006:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011008:	1c5a      	adds	r2, r3, #1
 801100a:	9215      	str	r2, [sp, #84]	; 0x54
 801100c:	785a      	ldrb	r2, [r3, #1]
 801100e:	f1bb 0f00 	cmp.w	fp, #0
 8011012:	d037      	beq.n	8011084 <_strtod_l+0x24c>
 8011014:	9005      	str	r0, [sp, #20]
 8011016:	465e      	mov	r6, fp
 8011018:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801101c:	2b09      	cmp	r3, #9
 801101e:	d912      	bls.n	8011046 <_strtod_l+0x20e>
 8011020:	2301      	movs	r3, #1
 8011022:	e7c4      	b.n	8010fae <_strtod_l+0x176>
 8011024:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011026:	1c5a      	adds	r2, r3, #1
 8011028:	9215      	str	r2, [sp, #84]	; 0x54
 801102a:	785a      	ldrb	r2, [r3, #1]
 801102c:	3001      	adds	r0, #1
 801102e:	2a30      	cmp	r2, #48	; 0x30
 8011030:	d0f8      	beq.n	8011024 <_strtod_l+0x1ec>
 8011032:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8011036:	2b08      	cmp	r3, #8
 8011038:	f200 84c1 	bhi.w	80119be <_strtod_l+0xb86>
 801103c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801103e:	9005      	str	r0, [sp, #20]
 8011040:	2000      	movs	r0, #0
 8011042:	930b      	str	r3, [sp, #44]	; 0x2c
 8011044:	4606      	mov	r6, r0
 8011046:	3a30      	subs	r2, #48	; 0x30
 8011048:	f100 0301 	add.w	r3, r0, #1
 801104c:	d014      	beq.n	8011078 <_strtod_l+0x240>
 801104e:	9905      	ldr	r1, [sp, #20]
 8011050:	4419      	add	r1, r3
 8011052:	9105      	str	r1, [sp, #20]
 8011054:	4633      	mov	r3, r6
 8011056:	eb00 0c06 	add.w	ip, r0, r6
 801105a:	210a      	movs	r1, #10
 801105c:	4563      	cmp	r3, ip
 801105e:	d113      	bne.n	8011088 <_strtod_l+0x250>
 8011060:	1833      	adds	r3, r6, r0
 8011062:	2b08      	cmp	r3, #8
 8011064:	f106 0601 	add.w	r6, r6, #1
 8011068:	4406      	add	r6, r0
 801106a:	dc1a      	bgt.n	80110a2 <_strtod_l+0x26a>
 801106c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801106e:	230a      	movs	r3, #10
 8011070:	fb03 2301 	mla	r3, r3, r1, r2
 8011074:	9309      	str	r3, [sp, #36]	; 0x24
 8011076:	2300      	movs	r3, #0
 8011078:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801107a:	1c51      	adds	r1, r2, #1
 801107c:	9115      	str	r1, [sp, #84]	; 0x54
 801107e:	7852      	ldrb	r2, [r2, #1]
 8011080:	4618      	mov	r0, r3
 8011082:	e7c9      	b.n	8011018 <_strtod_l+0x1e0>
 8011084:	4658      	mov	r0, fp
 8011086:	e7d2      	b.n	801102e <_strtod_l+0x1f6>
 8011088:	2b08      	cmp	r3, #8
 801108a:	f103 0301 	add.w	r3, r3, #1
 801108e:	dc03      	bgt.n	8011098 <_strtod_l+0x260>
 8011090:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8011092:	434f      	muls	r7, r1
 8011094:	9709      	str	r7, [sp, #36]	; 0x24
 8011096:	e7e1      	b.n	801105c <_strtod_l+0x224>
 8011098:	2b10      	cmp	r3, #16
 801109a:	bfd8      	it	le
 801109c:	fb01 fa0a 	mulle.w	sl, r1, sl
 80110a0:	e7dc      	b.n	801105c <_strtod_l+0x224>
 80110a2:	2e10      	cmp	r6, #16
 80110a4:	bfdc      	itt	le
 80110a6:	230a      	movle	r3, #10
 80110a8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80110ac:	e7e3      	b.n	8011076 <_strtod_l+0x23e>
 80110ae:	2300      	movs	r3, #0
 80110b0:	9305      	str	r3, [sp, #20]
 80110b2:	2301      	movs	r3, #1
 80110b4:	e780      	b.n	8010fb8 <_strtod_l+0x180>
 80110b6:	f04f 0c00 	mov.w	ip, #0
 80110ba:	1caa      	adds	r2, r5, #2
 80110bc:	9215      	str	r2, [sp, #84]	; 0x54
 80110be:	78aa      	ldrb	r2, [r5, #2]
 80110c0:	e788      	b.n	8010fd4 <_strtod_l+0x19c>
 80110c2:	f04f 0c01 	mov.w	ip, #1
 80110c6:	e7f8      	b.n	80110ba <_strtod_l+0x282>
 80110c8:	08013360 	.word	0x08013360
 80110cc:	0801335c 	.word	0x0801335c
 80110d0:	7ff00000 	.word	0x7ff00000
 80110d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80110d6:	1c51      	adds	r1, r2, #1
 80110d8:	9115      	str	r1, [sp, #84]	; 0x54
 80110da:	7852      	ldrb	r2, [r2, #1]
 80110dc:	2a30      	cmp	r2, #48	; 0x30
 80110de:	d0f9      	beq.n	80110d4 <_strtod_l+0x29c>
 80110e0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80110e4:	2908      	cmp	r1, #8
 80110e6:	f63f af7a 	bhi.w	8010fde <_strtod_l+0x1a6>
 80110ea:	3a30      	subs	r2, #48	; 0x30
 80110ec:	9208      	str	r2, [sp, #32]
 80110ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80110f0:	920c      	str	r2, [sp, #48]	; 0x30
 80110f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80110f4:	1c57      	adds	r7, r2, #1
 80110f6:	9715      	str	r7, [sp, #84]	; 0x54
 80110f8:	7852      	ldrb	r2, [r2, #1]
 80110fa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80110fe:	f1be 0f09 	cmp.w	lr, #9
 8011102:	d938      	bls.n	8011176 <_strtod_l+0x33e>
 8011104:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011106:	1a7f      	subs	r7, r7, r1
 8011108:	2f08      	cmp	r7, #8
 801110a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801110e:	dc03      	bgt.n	8011118 <_strtod_l+0x2e0>
 8011110:	9908      	ldr	r1, [sp, #32]
 8011112:	428f      	cmp	r7, r1
 8011114:	bfa8      	it	ge
 8011116:	460f      	movge	r7, r1
 8011118:	f1bc 0f00 	cmp.w	ip, #0
 801111c:	d000      	beq.n	8011120 <_strtod_l+0x2e8>
 801111e:	427f      	negs	r7, r7
 8011120:	2e00      	cmp	r6, #0
 8011122:	d14f      	bne.n	80111c4 <_strtod_l+0x38c>
 8011124:	9904      	ldr	r1, [sp, #16]
 8011126:	4301      	orrs	r1, r0
 8011128:	f47f aec1 	bne.w	8010eae <_strtod_l+0x76>
 801112c:	2b00      	cmp	r3, #0
 801112e:	f47f aedb 	bne.w	8010ee8 <_strtod_l+0xb0>
 8011132:	2a69      	cmp	r2, #105	; 0x69
 8011134:	d029      	beq.n	801118a <_strtod_l+0x352>
 8011136:	dc26      	bgt.n	8011186 <_strtod_l+0x34e>
 8011138:	2a49      	cmp	r2, #73	; 0x49
 801113a:	d026      	beq.n	801118a <_strtod_l+0x352>
 801113c:	2a4e      	cmp	r2, #78	; 0x4e
 801113e:	f47f aed3 	bne.w	8010ee8 <_strtod_l+0xb0>
 8011142:	499b      	ldr	r1, [pc, #620]	; (80113b0 <_strtod_l+0x578>)
 8011144:	a815      	add	r0, sp, #84	; 0x54
 8011146:	f001 fa17 	bl	8012578 <__match>
 801114a:	2800      	cmp	r0, #0
 801114c:	f43f aecc 	beq.w	8010ee8 <_strtod_l+0xb0>
 8011150:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011152:	781b      	ldrb	r3, [r3, #0]
 8011154:	2b28      	cmp	r3, #40	; 0x28
 8011156:	d12f      	bne.n	80111b8 <_strtod_l+0x380>
 8011158:	4996      	ldr	r1, [pc, #600]	; (80113b4 <_strtod_l+0x57c>)
 801115a:	aa18      	add	r2, sp, #96	; 0x60
 801115c:	a815      	add	r0, sp, #84	; 0x54
 801115e:	f001 fa1f 	bl	80125a0 <__hexnan>
 8011162:	2805      	cmp	r0, #5
 8011164:	d128      	bne.n	80111b8 <_strtod_l+0x380>
 8011166:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011168:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801116c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8011170:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8011174:	e69b      	b.n	8010eae <_strtod_l+0x76>
 8011176:	9f08      	ldr	r7, [sp, #32]
 8011178:	210a      	movs	r1, #10
 801117a:	fb01 2107 	mla	r1, r1, r7, r2
 801117e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8011182:	9208      	str	r2, [sp, #32]
 8011184:	e7b5      	b.n	80110f2 <_strtod_l+0x2ba>
 8011186:	2a6e      	cmp	r2, #110	; 0x6e
 8011188:	e7d9      	b.n	801113e <_strtod_l+0x306>
 801118a:	498b      	ldr	r1, [pc, #556]	; (80113b8 <_strtod_l+0x580>)
 801118c:	a815      	add	r0, sp, #84	; 0x54
 801118e:	f001 f9f3 	bl	8012578 <__match>
 8011192:	2800      	cmp	r0, #0
 8011194:	f43f aea8 	beq.w	8010ee8 <_strtod_l+0xb0>
 8011198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801119a:	4988      	ldr	r1, [pc, #544]	; (80113bc <_strtod_l+0x584>)
 801119c:	3b01      	subs	r3, #1
 801119e:	a815      	add	r0, sp, #84	; 0x54
 80111a0:	9315      	str	r3, [sp, #84]	; 0x54
 80111a2:	f001 f9e9 	bl	8012578 <__match>
 80111a6:	b910      	cbnz	r0, 80111ae <_strtod_l+0x376>
 80111a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80111aa:	3301      	adds	r3, #1
 80111ac:	9315      	str	r3, [sp, #84]	; 0x54
 80111ae:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80113cc <_strtod_l+0x594>
 80111b2:	f04f 0800 	mov.w	r8, #0
 80111b6:	e67a      	b.n	8010eae <_strtod_l+0x76>
 80111b8:	4881      	ldr	r0, [pc, #516]	; (80113c0 <_strtod_l+0x588>)
 80111ba:	f000 fef9 	bl	8011fb0 <nan>
 80111be:	ec59 8b10 	vmov	r8, r9, d0
 80111c2:	e674      	b.n	8010eae <_strtod_l+0x76>
 80111c4:	9b05      	ldr	r3, [sp, #20]
 80111c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111c8:	1afb      	subs	r3, r7, r3
 80111ca:	f1bb 0f00 	cmp.w	fp, #0
 80111ce:	bf08      	it	eq
 80111d0:	46b3      	moveq	fp, r6
 80111d2:	2e10      	cmp	r6, #16
 80111d4:	9308      	str	r3, [sp, #32]
 80111d6:	4635      	mov	r5, r6
 80111d8:	bfa8      	it	ge
 80111da:	2510      	movge	r5, #16
 80111dc:	f7ef f9b2 	bl	8000544 <__aeabi_ui2d>
 80111e0:	2e09      	cmp	r6, #9
 80111e2:	4680      	mov	r8, r0
 80111e4:	4689      	mov	r9, r1
 80111e6:	dd13      	ble.n	8011210 <_strtod_l+0x3d8>
 80111e8:	4b76      	ldr	r3, [pc, #472]	; (80113c4 <_strtod_l+0x58c>)
 80111ea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80111ee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80111f2:	f7ef fa21 	bl	8000638 <__aeabi_dmul>
 80111f6:	4680      	mov	r8, r0
 80111f8:	4650      	mov	r0, sl
 80111fa:	4689      	mov	r9, r1
 80111fc:	f7ef f9a2 	bl	8000544 <__aeabi_ui2d>
 8011200:	4602      	mov	r2, r0
 8011202:	460b      	mov	r3, r1
 8011204:	4640      	mov	r0, r8
 8011206:	4649      	mov	r1, r9
 8011208:	f7ef f860 	bl	80002cc <__adddf3>
 801120c:	4680      	mov	r8, r0
 801120e:	4689      	mov	r9, r1
 8011210:	2e0f      	cmp	r6, #15
 8011212:	dc38      	bgt.n	8011286 <_strtod_l+0x44e>
 8011214:	9b08      	ldr	r3, [sp, #32]
 8011216:	2b00      	cmp	r3, #0
 8011218:	f43f ae49 	beq.w	8010eae <_strtod_l+0x76>
 801121c:	dd24      	ble.n	8011268 <_strtod_l+0x430>
 801121e:	2b16      	cmp	r3, #22
 8011220:	dc0b      	bgt.n	801123a <_strtod_l+0x402>
 8011222:	4968      	ldr	r1, [pc, #416]	; (80113c4 <_strtod_l+0x58c>)
 8011224:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011228:	e9d1 0100 	ldrd	r0, r1, [r1]
 801122c:	4642      	mov	r2, r8
 801122e:	464b      	mov	r3, r9
 8011230:	f7ef fa02 	bl	8000638 <__aeabi_dmul>
 8011234:	4680      	mov	r8, r0
 8011236:	4689      	mov	r9, r1
 8011238:	e639      	b.n	8010eae <_strtod_l+0x76>
 801123a:	9a08      	ldr	r2, [sp, #32]
 801123c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8011240:	4293      	cmp	r3, r2
 8011242:	db20      	blt.n	8011286 <_strtod_l+0x44e>
 8011244:	4c5f      	ldr	r4, [pc, #380]	; (80113c4 <_strtod_l+0x58c>)
 8011246:	f1c6 060f 	rsb	r6, r6, #15
 801124a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801124e:	4642      	mov	r2, r8
 8011250:	464b      	mov	r3, r9
 8011252:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011256:	f7ef f9ef 	bl	8000638 <__aeabi_dmul>
 801125a:	9b08      	ldr	r3, [sp, #32]
 801125c:	1b9e      	subs	r6, r3, r6
 801125e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8011262:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011266:	e7e3      	b.n	8011230 <_strtod_l+0x3f8>
 8011268:	9b08      	ldr	r3, [sp, #32]
 801126a:	3316      	adds	r3, #22
 801126c:	db0b      	blt.n	8011286 <_strtod_l+0x44e>
 801126e:	9b05      	ldr	r3, [sp, #20]
 8011270:	1bdf      	subs	r7, r3, r7
 8011272:	4b54      	ldr	r3, [pc, #336]	; (80113c4 <_strtod_l+0x58c>)
 8011274:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011278:	e9d7 2300 	ldrd	r2, r3, [r7]
 801127c:	4640      	mov	r0, r8
 801127e:	4649      	mov	r1, r9
 8011280:	f7ef fb04 	bl	800088c <__aeabi_ddiv>
 8011284:	e7d6      	b.n	8011234 <_strtod_l+0x3fc>
 8011286:	9b08      	ldr	r3, [sp, #32]
 8011288:	1b75      	subs	r5, r6, r5
 801128a:	441d      	add	r5, r3
 801128c:	2d00      	cmp	r5, #0
 801128e:	dd70      	ble.n	8011372 <_strtod_l+0x53a>
 8011290:	f015 030f 	ands.w	r3, r5, #15
 8011294:	d00a      	beq.n	80112ac <_strtod_l+0x474>
 8011296:	494b      	ldr	r1, [pc, #300]	; (80113c4 <_strtod_l+0x58c>)
 8011298:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801129c:	4642      	mov	r2, r8
 801129e:	464b      	mov	r3, r9
 80112a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112a4:	f7ef f9c8 	bl	8000638 <__aeabi_dmul>
 80112a8:	4680      	mov	r8, r0
 80112aa:	4689      	mov	r9, r1
 80112ac:	f035 050f 	bics.w	r5, r5, #15
 80112b0:	d04d      	beq.n	801134e <_strtod_l+0x516>
 80112b2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80112b6:	dd22      	ble.n	80112fe <_strtod_l+0x4c6>
 80112b8:	2500      	movs	r5, #0
 80112ba:	46ab      	mov	fp, r5
 80112bc:	9509      	str	r5, [sp, #36]	; 0x24
 80112be:	9505      	str	r5, [sp, #20]
 80112c0:	2322      	movs	r3, #34	; 0x22
 80112c2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80113cc <_strtod_l+0x594>
 80112c6:	6023      	str	r3, [r4, #0]
 80112c8:	f04f 0800 	mov.w	r8, #0
 80112cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	f43f aded 	beq.w	8010eae <_strtod_l+0x76>
 80112d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80112d6:	4620      	mov	r0, r4
 80112d8:	f7ff f91c 	bl	8010514 <_Bfree>
 80112dc:	9905      	ldr	r1, [sp, #20]
 80112de:	4620      	mov	r0, r4
 80112e0:	f7ff f918 	bl	8010514 <_Bfree>
 80112e4:	4659      	mov	r1, fp
 80112e6:	4620      	mov	r0, r4
 80112e8:	f7ff f914 	bl	8010514 <_Bfree>
 80112ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80112ee:	4620      	mov	r0, r4
 80112f0:	f7ff f910 	bl	8010514 <_Bfree>
 80112f4:	4629      	mov	r1, r5
 80112f6:	4620      	mov	r0, r4
 80112f8:	f7ff f90c 	bl	8010514 <_Bfree>
 80112fc:	e5d7      	b.n	8010eae <_strtod_l+0x76>
 80112fe:	4b32      	ldr	r3, [pc, #200]	; (80113c8 <_strtod_l+0x590>)
 8011300:	9304      	str	r3, [sp, #16]
 8011302:	2300      	movs	r3, #0
 8011304:	112d      	asrs	r5, r5, #4
 8011306:	4640      	mov	r0, r8
 8011308:	4649      	mov	r1, r9
 801130a:	469a      	mov	sl, r3
 801130c:	2d01      	cmp	r5, #1
 801130e:	dc21      	bgt.n	8011354 <_strtod_l+0x51c>
 8011310:	b10b      	cbz	r3, 8011316 <_strtod_l+0x4de>
 8011312:	4680      	mov	r8, r0
 8011314:	4689      	mov	r9, r1
 8011316:	492c      	ldr	r1, [pc, #176]	; (80113c8 <_strtod_l+0x590>)
 8011318:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801131c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8011320:	4642      	mov	r2, r8
 8011322:	464b      	mov	r3, r9
 8011324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011328:	f7ef f986 	bl	8000638 <__aeabi_dmul>
 801132c:	4b27      	ldr	r3, [pc, #156]	; (80113cc <_strtod_l+0x594>)
 801132e:	460a      	mov	r2, r1
 8011330:	400b      	ands	r3, r1
 8011332:	4927      	ldr	r1, [pc, #156]	; (80113d0 <_strtod_l+0x598>)
 8011334:	428b      	cmp	r3, r1
 8011336:	4680      	mov	r8, r0
 8011338:	d8be      	bhi.n	80112b8 <_strtod_l+0x480>
 801133a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801133e:	428b      	cmp	r3, r1
 8011340:	bf86      	itte	hi
 8011342:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80113d4 <_strtod_l+0x59c>
 8011346:	f04f 38ff 	movhi.w	r8, #4294967295
 801134a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801134e:	2300      	movs	r3, #0
 8011350:	9304      	str	r3, [sp, #16]
 8011352:	e07b      	b.n	801144c <_strtod_l+0x614>
 8011354:	07ea      	lsls	r2, r5, #31
 8011356:	d505      	bpl.n	8011364 <_strtod_l+0x52c>
 8011358:	9b04      	ldr	r3, [sp, #16]
 801135a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801135e:	f7ef f96b 	bl	8000638 <__aeabi_dmul>
 8011362:	2301      	movs	r3, #1
 8011364:	9a04      	ldr	r2, [sp, #16]
 8011366:	3208      	adds	r2, #8
 8011368:	f10a 0a01 	add.w	sl, sl, #1
 801136c:	106d      	asrs	r5, r5, #1
 801136e:	9204      	str	r2, [sp, #16]
 8011370:	e7cc      	b.n	801130c <_strtod_l+0x4d4>
 8011372:	d0ec      	beq.n	801134e <_strtod_l+0x516>
 8011374:	426d      	negs	r5, r5
 8011376:	f015 020f 	ands.w	r2, r5, #15
 801137a:	d00a      	beq.n	8011392 <_strtod_l+0x55a>
 801137c:	4b11      	ldr	r3, [pc, #68]	; (80113c4 <_strtod_l+0x58c>)
 801137e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011382:	4640      	mov	r0, r8
 8011384:	4649      	mov	r1, r9
 8011386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138a:	f7ef fa7f 	bl	800088c <__aeabi_ddiv>
 801138e:	4680      	mov	r8, r0
 8011390:	4689      	mov	r9, r1
 8011392:	112d      	asrs	r5, r5, #4
 8011394:	d0db      	beq.n	801134e <_strtod_l+0x516>
 8011396:	2d1f      	cmp	r5, #31
 8011398:	dd1e      	ble.n	80113d8 <_strtod_l+0x5a0>
 801139a:	2500      	movs	r5, #0
 801139c:	46ab      	mov	fp, r5
 801139e:	9509      	str	r5, [sp, #36]	; 0x24
 80113a0:	9505      	str	r5, [sp, #20]
 80113a2:	2322      	movs	r3, #34	; 0x22
 80113a4:	f04f 0800 	mov.w	r8, #0
 80113a8:	f04f 0900 	mov.w	r9, #0
 80113ac:	6023      	str	r3, [r4, #0]
 80113ae:	e78d      	b.n	80112cc <_strtod_l+0x494>
 80113b0:	0801314d 	.word	0x0801314d
 80113b4:	08013374 	.word	0x08013374
 80113b8:	08013145 	.word	0x08013145
 80113bc:	0801317c 	.word	0x0801317c
 80113c0:	08013505 	.word	0x08013505
 80113c4:	08013288 	.word	0x08013288
 80113c8:	08013260 	.word	0x08013260
 80113cc:	7ff00000 	.word	0x7ff00000
 80113d0:	7ca00000 	.word	0x7ca00000
 80113d4:	7fefffff 	.word	0x7fefffff
 80113d8:	f015 0310 	ands.w	r3, r5, #16
 80113dc:	bf18      	it	ne
 80113de:	236a      	movne	r3, #106	; 0x6a
 80113e0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8011784 <_strtod_l+0x94c>
 80113e4:	9304      	str	r3, [sp, #16]
 80113e6:	4640      	mov	r0, r8
 80113e8:	4649      	mov	r1, r9
 80113ea:	2300      	movs	r3, #0
 80113ec:	07ea      	lsls	r2, r5, #31
 80113ee:	d504      	bpl.n	80113fa <_strtod_l+0x5c2>
 80113f0:	e9da 2300 	ldrd	r2, r3, [sl]
 80113f4:	f7ef f920 	bl	8000638 <__aeabi_dmul>
 80113f8:	2301      	movs	r3, #1
 80113fa:	106d      	asrs	r5, r5, #1
 80113fc:	f10a 0a08 	add.w	sl, sl, #8
 8011400:	d1f4      	bne.n	80113ec <_strtod_l+0x5b4>
 8011402:	b10b      	cbz	r3, 8011408 <_strtod_l+0x5d0>
 8011404:	4680      	mov	r8, r0
 8011406:	4689      	mov	r9, r1
 8011408:	9b04      	ldr	r3, [sp, #16]
 801140a:	b1bb      	cbz	r3, 801143c <_strtod_l+0x604>
 801140c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8011410:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011414:	2b00      	cmp	r3, #0
 8011416:	4649      	mov	r1, r9
 8011418:	dd10      	ble.n	801143c <_strtod_l+0x604>
 801141a:	2b1f      	cmp	r3, #31
 801141c:	f340 811e 	ble.w	801165c <_strtod_l+0x824>
 8011420:	2b34      	cmp	r3, #52	; 0x34
 8011422:	bfde      	ittt	le
 8011424:	f04f 33ff 	movle.w	r3, #4294967295
 8011428:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801142c:	4093      	lslle	r3, r2
 801142e:	f04f 0800 	mov.w	r8, #0
 8011432:	bfcc      	ite	gt
 8011434:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8011438:	ea03 0901 	andle.w	r9, r3, r1
 801143c:	2200      	movs	r2, #0
 801143e:	2300      	movs	r3, #0
 8011440:	4640      	mov	r0, r8
 8011442:	4649      	mov	r1, r9
 8011444:	f7ef fb60 	bl	8000b08 <__aeabi_dcmpeq>
 8011448:	2800      	cmp	r0, #0
 801144a:	d1a6      	bne.n	801139a <_strtod_l+0x562>
 801144c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801144e:	9300      	str	r3, [sp, #0]
 8011450:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011452:	4633      	mov	r3, r6
 8011454:	465a      	mov	r2, fp
 8011456:	4620      	mov	r0, r4
 8011458:	f7ff f8c4 	bl	80105e4 <__s2b>
 801145c:	9009      	str	r0, [sp, #36]	; 0x24
 801145e:	2800      	cmp	r0, #0
 8011460:	f43f af2a 	beq.w	80112b8 <_strtod_l+0x480>
 8011464:	9a08      	ldr	r2, [sp, #32]
 8011466:	9b05      	ldr	r3, [sp, #20]
 8011468:	2a00      	cmp	r2, #0
 801146a:	eba3 0307 	sub.w	r3, r3, r7
 801146e:	bfa8      	it	ge
 8011470:	2300      	movge	r3, #0
 8011472:	930c      	str	r3, [sp, #48]	; 0x30
 8011474:	2500      	movs	r5, #0
 8011476:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801147a:	9312      	str	r3, [sp, #72]	; 0x48
 801147c:	46ab      	mov	fp, r5
 801147e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011480:	4620      	mov	r0, r4
 8011482:	6859      	ldr	r1, [r3, #4]
 8011484:	f7ff f806 	bl	8010494 <_Balloc>
 8011488:	9005      	str	r0, [sp, #20]
 801148a:	2800      	cmp	r0, #0
 801148c:	f43f af18 	beq.w	80112c0 <_strtod_l+0x488>
 8011490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011492:	691a      	ldr	r2, [r3, #16]
 8011494:	3202      	adds	r2, #2
 8011496:	f103 010c 	add.w	r1, r3, #12
 801149a:	0092      	lsls	r2, r2, #2
 801149c:	300c      	adds	r0, #12
 801149e:	f7fe f868 	bl	800f572 <memcpy>
 80114a2:	ec49 8b10 	vmov	d0, r8, r9
 80114a6:	aa18      	add	r2, sp, #96	; 0x60
 80114a8:	a917      	add	r1, sp, #92	; 0x5c
 80114aa:	4620      	mov	r0, r4
 80114ac:	f7ff fbce 	bl	8010c4c <__d2b>
 80114b0:	ec49 8b18 	vmov	d8, r8, r9
 80114b4:	9016      	str	r0, [sp, #88]	; 0x58
 80114b6:	2800      	cmp	r0, #0
 80114b8:	f43f af02 	beq.w	80112c0 <_strtod_l+0x488>
 80114bc:	2101      	movs	r1, #1
 80114be:	4620      	mov	r0, r4
 80114c0:	f7ff f928 	bl	8010714 <__i2b>
 80114c4:	4683      	mov	fp, r0
 80114c6:	2800      	cmp	r0, #0
 80114c8:	f43f aefa 	beq.w	80112c0 <_strtod_l+0x488>
 80114cc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80114ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80114d0:	2e00      	cmp	r6, #0
 80114d2:	bfab      	itete	ge
 80114d4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80114d6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80114d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80114da:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80114de:	bfac      	ite	ge
 80114e0:	eb06 0a03 	addge.w	sl, r6, r3
 80114e4:	1b9f      	sublt	r7, r3, r6
 80114e6:	9b04      	ldr	r3, [sp, #16]
 80114e8:	1af6      	subs	r6, r6, r3
 80114ea:	4416      	add	r6, r2
 80114ec:	4ba0      	ldr	r3, [pc, #640]	; (8011770 <_strtod_l+0x938>)
 80114ee:	3e01      	subs	r6, #1
 80114f0:	429e      	cmp	r6, r3
 80114f2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80114f6:	f280 80c4 	bge.w	8011682 <_strtod_l+0x84a>
 80114fa:	1b9b      	subs	r3, r3, r6
 80114fc:	2b1f      	cmp	r3, #31
 80114fe:	eba2 0203 	sub.w	r2, r2, r3
 8011502:	f04f 0101 	mov.w	r1, #1
 8011506:	f300 80b0 	bgt.w	801166a <_strtod_l+0x832>
 801150a:	fa01 f303 	lsl.w	r3, r1, r3
 801150e:	930e      	str	r3, [sp, #56]	; 0x38
 8011510:	2300      	movs	r3, #0
 8011512:	930d      	str	r3, [sp, #52]	; 0x34
 8011514:	eb0a 0602 	add.w	r6, sl, r2
 8011518:	9b04      	ldr	r3, [sp, #16]
 801151a:	45b2      	cmp	sl, r6
 801151c:	4417      	add	r7, r2
 801151e:	441f      	add	r7, r3
 8011520:	4653      	mov	r3, sl
 8011522:	bfa8      	it	ge
 8011524:	4633      	movge	r3, r6
 8011526:	42bb      	cmp	r3, r7
 8011528:	bfa8      	it	ge
 801152a:	463b      	movge	r3, r7
 801152c:	2b00      	cmp	r3, #0
 801152e:	bfc2      	ittt	gt
 8011530:	1af6      	subgt	r6, r6, r3
 8011532:	1aff      	subgt	r7, r7, r3
 8011534:	ebaa 0a03 	subgt.w	sl, sl, r3
 8011538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801153a:	2b00      	cmp	r3, #0
 801153c:	dd17      	ble.n	801156e <_strtod_l+0x736>
 801153e:	4659      	mov	r1, fp
 8011540:	461a      	mov	r2, r3
 8011542:	4620      	mov	r0, r4
 8011544:	f7ff f9a6 	bl	8010894 <__pow5mult>
 8011548:	4683      	mov	fp, r0
 801154a:	2800      	cmp	r0, #0
 801154c:	f43f aeb8 	beq.w	80112c0 <_strtod_l+0x488>
 8011550:	4601      	mov	r1, r0
 8011552:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011554:	4620      	mov	r0, r4
 8011556:	f7ff f8f3 	bl	8010740 <__multiply>
 801155a:	900b      	str	r0, [sp, #44]	; 0x2c
 801155c:	2800      	cmp	r0, #0
 801155e:	f43f aeaf 	beq.w	80112c0 <_strtod_l+0x488>
 8011562:	9916      	ldr	r1, [sp, #88]	; 0x58
 8011564:	4620      	mov	r0, r4
 8011566:	f7fe ffd5 	bl	8010514 <_Bfree>
 801156a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801156c:	9316      	str	r3, [sp, #88]	; 0x58
 801156e:	2e00      	cmp	r6, #0
 8011570:	f300 808c 	bgt.w	801168c <_strtod_l+0x854>
 8011574:	9b08      	ldr	r3, [sp, #32]
 8011576:	2b00      	cmp	r3, #0
 8011578:	dd08      	ble.n	801158c <_strtod_l+0x754>
 801157a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801157c:	9905      	ldr	r1, [sp, #20]
 801157e:	4620      	mov	r0, r4
 8011580:	f7ff f988 	bl	8010894 <__pow5mult>
 8011584:	9005      	str	r0, [sp, #20]
 8011586:	2800      	cmp	r0, #0
 8011588:	f43f ae9a 	beq.w	80112c0 <_strtod_l+0x488>
 801158c:	2f00      	cmp	r7, #0
 801158e:	dd08      	ble.n	80115a2 <_strtod_l+0x76a>
 8011590:	9905      	ldr	r1, [sp, #20]
 8011592:	463a      	mov	r2, r7
 8011594:	4620      	mov	r0, r4
 8011596:	f7ff f9d7 	bl	8010948 <__lshift>
 801159a:	9005      	str	r0, [sp, #20]
 801159c:	2800      	cmp	r0, #0
 801159e:	f43f ae8f 	beq.w	80112c0 <_strtod_l+0x488>
 80115a2:	f1ba 0f00 	cmp.w	sl, #0
 80115a6:	dd08      	ble.n	80115ba <_strtod_l+0x782>
 80115a8:	4659      	mov	r1, fp
 80115aa:	4652      	mov	r2, sl
 80115ac:	4620      	mov	r0, r4
 80115ae:	f7ff f9cb 	bl	8010948 <__lshift>
 80115b2:	4683      	mov	fp, r0
 80115b4:	2800      	cmp	r0, #0
 80115b6:	f43f ae83 	beq.w	80112c0 <_strtod_l+0x488>
 80115ba:	9a05      	ldr	r2, [sp, #20]
 80115bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80115be:	4620      	mov	r0, r4
 80115c0:	f7ff fa4a 	bl	8010a58 <__mdiff>
 80115c4:	4605      	mov	r5, r0
 80115c6:	2800      	cmp	r0, #0
 80115c8:	f43f ae7a 	beq.w	80112c0 <_strtod_l+0x488>
 80115cc:	68c3      	ldr	r3, [r0, #12]
 80115ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80115d0:	2300      	movs	r3, #0
 80115d2:	60c3      	str	r3, [r0, #12]
 80115d4:	4659      	mov	r1, fp
 80115d6:	f7ff fa23 	bl	8010a20 <__mcmp>
 80115da:	2800      	cmp	r0, #0
 80115dc:	da60      	bge.n	80116a0 <_strtod_l+0x868>
 80115de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115e0:	ea53 0308 	orrs.w	r3, r3, r8
 80115e4:	f040 8084 	bne.w	80116f0 <_strtod_l+0x8b8>
 80115e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	d17f      	bne.n	80116f0 <_strtod_l+0x8b8>
 80115f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80115f4:	0d1b      	lsrs	r3, r3, #20
 80115f6:	051b      	lsls	r3, r3, #20
 80115f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80115fc:	d978      	bls.n	80116f0 <_strtod_l+0x8b8>
 80115fe:	696b      	ldr	r3, [r5, #20]
 8011600:	b913      	cbnz	r3, 8011608 <_strtod_l+0x7d0>
 8011602:	692b      	ldr	r3, [r5, #16]
 8011604:	2b01      	cmp	r3, #1
 8011606:	dd73      	ble.n	80116f0 <_strtod_l+0x8b8>
 8011608:	4629      	mov	r1, r5
 801160a:	2201      	movs	r2, #1
 801160c:	4620      	mov	r0, r4
 801160e:	f7ff f99b 	bl	8010948 <__lshift>
 8011612:	4659      	mov	r1, fp
 8011614:	4605      	mov	r5, r0
 8011616:	f7ff fa03 	bl	8010a20 <__mcmp>
 801161a:	2800      	cmp	r0, #0
 801161c:	dd68      	ble.n	80116f0 <_strtod_l+0x8b8>
 801161e:	9904      	ldr	r1, [sp, #16]
 8011620:	4a54      	ldr	r2, [pc, #336]	; (8011774 <_strtod_l+0x93c>)
 8011622:	464b      	mov	r3, r9
 8011624:	2900      	cmp	r1, #0
 8011626:	f000 8084 	beq.w	8011732 <_strtod_l+0x8fa>
 801162a:	ea02 0109 	and.w	r1, r2, r9
 801162e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011632:	dc7e      	bgt.n	8011732 <_strtod_l+0x8fa>
 8011634:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011638:	f77f aeb3 	ble.w	80113a2 <_strtod_l+0x56a>
 801163c:	4b4e      	ldr	r3, [pc, #312]	; (8011778 <_strtod_l+0x940>)
 801163e:	4640      	mov	r0, r8
 8011640:	4649      	mov	r1, r9
 8011642:	2200      	movs	r2, #0
 8011644:	f7ee fff8 	bl	8000638 <__aeabi_dmul>
 8011648:	4b4a      	ldr	r3, [pc, #296]	; (8011774 <_strtod_l+0x93c>)
 801164a:	400b      	ands	r3, r1
 801164c:	4680      	mov	r8, r0
 801164e:	4689      	mov	r9, r1
 8011650:	2b00      	cmp	r3, #0
 8011652:	f47f ae3f 	bne.w	80112d4 <_strtod_l+0x49c>
 8011656:	2322      	movs	r3, #34	; 0x22
 8011658:	6023      	str	r3, [r4, #0]
 801165a:	e63b      	b.n	80112d4 <_strtod_l+0x49c>
 801165c:	f04f 32ff 	mov.w	r2, #4294967295
 8011660:	fa02 f303 	lsl.w	r3, r2, r3
 8011664:	ea03 0808 	and.w	r8, r3, r8
 8011668:	e6e8      	b.n	801143c <_strtod_l+0x604>
 801166a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 801166e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011672:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011676:	36e2      	adds	r6, #226	; 0xe2
 8011678:	fa01 f306 	lsl.w	r3, r1, r6
 801167c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8011680:	e748      	b.n	8011514 <_strtod_l+0x6dc>
 8011682:	2100      	movs	r1, #0
 8011684:	2301      	movs	r3, #1
 8011686:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 801168a:	e743      	b.n	8011514 <_strtod_l+0x6dc>
 801168c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801168e:	4632      	mov	r2, r6
 8011690:	4620      	mov	r0, r4
 8011692:	f7ff f959 	bl	8010948 <__lshift>
 8011696:	9016      	str	r0, [sp, #88]	; 0x58
 8011698:	2800      	cmp	r0, #0
 801169a:	f47f af6b 	bne.w	8011574 <_strtod_l+0x73c>
 801169e:	e60f      	b.n	80112c0 <_strtod_l+0x488>
 80116a0:	46ca      	mov	sl, r9
 80116a2:	d171      	bne.n	8011788 <_strtod_l+0x950>
 80116a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80116a6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80116aa:	b352      	cbz	r2, 8011702 <_strtod_l+0x8ca>
 80116ac:	4a33      	ldr	r2, [pc, #204]	; (801177c <_strtod_l+0x944>)
 80116ae:	4293      	cmp	r3, r2
 80116b0:	d12a      	bne.n	8011708 <_strtod_l+0x8d0>
 80116b2:	9b04      	ldr	r3, [sp, #16]
 80116b4:	4641      	mov	r1, r8
 80116b6:	b1fb      	cbz	r3, 80116f8 <_strtod_l+0x8c0>
 80116b8:	4b2e      	ldr	r3, [pc, #184]	; (8011774 <_strtod_l+0x93c>)
 80116ba:	ea09 0303 	and.w	r3, r9, r3
 80116be:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80116c2:	f04f 32ff 	mov.w	r2, #4294967295
 80116c6:	d81a      	bhi.n	80116fe <_strtod_l+0x8c6>
 80116c8:	0d1b      	lsrs	r3, r3, #20
 80116ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80116ce:	fa02 f303 	lsl.w	r3, r2, r3
 80116d2:	4299      	cmp	r1, r3
 80116d4:	d118      	bne.n	8011708 <_strtod_l+0x8d0>
 80116d6:	4b2a      	ldr	r3, [pc, #168]	; (8011780 <_strtod_l+0x948>)
 80116d8:	459a      	cmp	sl, r3
 80116da:	d102      	bne.n	80116e2 <_strtod_l+0x8aa>
 80116dc:	3101      	adds	r1, #1
 80116de:	f43f adef 	beq.w	80112c0 <_strtod_l+0x488>
 80116e2:	4b24      	ldr	r3, [pc, #144]	; (8011774 <_strtod_l+0x93c>)
 80116e4:	ea0a 0303 	and.w	r3, sl, r3
 80116e8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80116ec:	f04f 0800 	mov.w	r8, #0
 80116f0:	9b04      	ldr	r3, [sp, #16]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d1a2      	bne.n	801163c <_strtod_l+0x804>
 80116f6:	e5ed      	b.n	80112d4 <_strtod_l+0x49c>
 80116f8:	f04f 33ff 	mov.w	r3, #4294967295
 80116fc:	e7e9      	b.n	80116d2 <_strtod_l+0x89a>
 80116fe:	4613      	mov	r3, r2
 8011700:	e7e7      	b.n	80116d2 <_strtod_l+0x89a>
 8011702:	ea53 0308 	orrs.w	r3, r3, r8
 8011706:	d08a      	beq.n	801161e <_strtod_l+0x7e6>
 8011708:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801170a:	b1e3      	cbz	r3, 8011746 <_strtod_l+0x90e>
 801170c:	ea13 0f0a 	tst.w	r3, sl
 8011710:	d0ee      	beq.n	80116f0 <_strtod_l+0x8b8>
 8011712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011714:	9a04      	ldr	r2, [sp, #16]
 8011716:	4640      	mov	r0, r8
 8011718:	4649      	mov	r1, r9
 801171a:	b1c3      	cbz	r3, 801174e <_strtod_l+0x916>
 801171c:	f7ff fb6f 	bl	8010dfe <sulp>
 8011720:	4602      	mov	r2, r0
 8011722:	460b      	mov	r3, r1
 8011724:	ec51 0b18 	vmov	r0, r1, d8
 8011728:	f7ee fdd0 	bl	80002cc <__adddf3>
 801172c:	4680      	mov	r8, r0
 801172e:	4689      	mov	r9, r1
 8011730:	e7de      	b.n	80116f0 <_strtod_l+0x8b8>
 8011732:	4013      	ands	r3, r2
 8011734:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011738:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801173c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8011740:	f04f 38ff 	mov.w	r8, #4294967295
 8011744:	e7d4      	b.n	80116f0 <_strtod_l+0x8b8>
 8011746:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011748:	ea13 0f08 	tst.w	r3, r8
 801174c:	e7e0      	b.n	8011710 <_strtod_l+0x8d8>
 801174e:	f7ff fb56 	bl	8010dfe <sulp>
 8011752:	4602      	mov	r2, r0
 8011754:	460b      	mov	r3, r1
 8011756:	ec51 0b18 	vmov	r0, r1, d8
 801175a:	f7ee fdb5 	bl	80002c8 <__aeabi_dsub>
 801175e:	2200      	movs	r2, #0
 8011760:	2300      	movs	r3, #0
 8011762:	4680      	mov	r8, r0
 8011764:	4689      	mov	r9, r1
 8011766:	f7ef f9cf 	bl	8000b08 <__aeabi_dcmpeq>
 801176a:	2800      	cmp	r0, #0
 801176c:	d0c0      	beq.n	80116f0 <_strtod_l+0x8b8>
 801176e:	e618      	b.n	80113a2 <_strtod_l+0x56a>
 8011770:	fffffc02 	.word	0xfffffc02
 8011774:	7ff00000 	.word	0x7ff00000
 8011778:	39500000 	.word	0x39500000
 801177c:	000fffff 	.word	0x000fffff
 8011780:	7fefffff 	.word	0x7fefffff
 8011784:	08013388 	.word	0x08013388
 8011788:	4659      	mov	r1, fp
 801178a:	4628      	mov	r0, r5
 801178c:	f7ff fab8 	bl	8010d00 <__ratio>
 8011790:	ec57 6b10 	vmov	r6, r7, d0
 8011794:	ee10 0a10 	vmov	r0, s0
 8011798:	2200      	movs	r2, #0
 801179a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801179e:	4639      	mov	r1, r7
 80117a0:	f7ef f9c6 	bl	8000b30 <__aeabi_dcmple>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	d071      	beq.n	801188c <_strtod_l+0xa54>
 80117a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d17c      	bne.n	80118a8 <_strtod_l+0xa70>
 80117ae:	f1b8 0f00 	cmp.w	r8, #0
 80117b2:	d15a      	bne.n	801186a <_strtod_l+0xa32>
 80117b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d15d      	bne.n	8011878 <_strtod_l+0xa40>
 80117bc:	4b90      	ldr	r3, [pc, #576]	; (8011a00 <_strtod_l+0xbc8>)
 80117be:	2200      	movs	r2, #0
 80117c0:	4630      	mov	r0, r6
 80117c2:	4639      	mov	r1, r7
 80117c4:	f7ef f9aa 	bl	8000b1c <__aeabi_dcmplt>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	d15c      	bne.n	8011886 <_strtod_l+0xa4e>
 80117cc:	4630      	mov	r0, r6
 80117ce:	4639      	mov	r1, r7
 80117d0:	4b8c      	ldr	r3, [pc, #560]	; (8011a04 <_strtod_l+0xbcc>)
 80117d2:	2200      	movs	r2, #0
 80117d4:	f7ee ff30 	bl	8000638 <__aeabi_dmul>
 80117d8:	4606      	mov	r6, r0
 80117da:	460f      	mov	r7, r1
 80117dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80117e0:	9606      	str	r6, [sp, #24]
 80117e2:	9307      	str	r3, [sp, #28]
 80117e4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80117e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80117ec:	4b86      	ldr	r3, [pc, #536]	; (8011a08 <_strtod_l+0xbd0>)
 80117ee:	ea0a 0303 	and.w	r3, sl, r3
 80117f2:	930d      	str	r3, [sp, #52]	; 0x34
 80117f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80117f6:	4b85      	ldr	r3, [pc, #532]	; (8011a0c <_strtod_l+0xbd4>)
 80117f8:	429a      	cmp	r2, r3
 80117fa:	f040 8090 	bne.w	801191e <_strtod_l+0xae6>
 80117fe:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8011802:	ec49 8b10 	vmov	d0, r8, r9
 8011806:	f7ff f9b1 	bl	8010b6c <__ulp>
 801180a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801180e:	ec51 0b10 	vmov	r0, r1, d0
 8011812:	f7ee ff11 	bl	8000638 <__aeabi_dmul>
 8011816:	4642      	mov	r2, r8
 8011818:	464b      	mov	r3, r9
 801181a:	f7ee fd57 	bl	80002cc <__adddf3>
 801181e:	460b      	mov	r3, r1
 8011820:	4979      	ldr	r1, [pc, #484]	; (8011a08 <_strtod_l+0xbd0>)
 8011822:	4a7b      	ldr	r2, [pc, #492]	; (8011a10 <_strtod_l+0xbd8>)
 8011824:	4019      	ands	r1, r3
 8011826:	4291      	cmp	r1, r2
 8011828:	4680      	mov	r8, r0
 801182a:	d944      	bls.n	80118b6 <_strtod_l+0xa7e>
 801182c:	ee18 2a90 	vmov	r2, s17
 8011830:	4b78      	ldr	r3, [pc, #480]	; (8011a14 <_strtod_l+0xbdc>)
 8011832:	429a      	cmp	r2, r3
 8011834:	d104      	bne.n	8011840 <_strtod_l+0xa08>
 8011836:	ee18 3a10 	vmov	r3, s16
 801183a:	3301      	adds	r3, #1
 801183c:	f43f ad40 	beq.w	80112c0 <_strtod_l+0x488>
 8011840:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8011a14 <_strtod_l+0xbdc>
 8011844:	f04f 38ff 	mov.w	r8, #4294967295
 8011848:	9916      	ldr	r1, [sp, #88]	; 0x58
 801184a:	4620      	mov	r0, r4
 801184c:	f7fe fe62 	bl	8010514 <_Bfree>
 8011850:	9905      	ldr	r1, [sp, #20]
 8011852:	4620      	mov	r0, r4
 8011854:	f7fe fe5e 	bl	8010514 <_Bfree>
 8011858:	4659      	mov	r1, fp
 801185a:	4620      	mov	r0, r4
 801185c:	f7fe fe5a 	bl	8010514 <_Bfree>
 8011860:	4629      	mov	r1, r5
 8011862:	4620      	mov	r0, r4
 8011864:	f7fe fe56 	bl	8010514 <_Bfree>
 8011868:	e609      	b.n	801147e <_strtod_l+0x646>
 801186a:	f1b8 0f01 	cmp.w	r8, #1
 801186e:	d103      	bne.n	8011878 <_strtod_l+0xa40>
 8011870:	f1b9 0f00 	cmp.w	r9, #0
 8011874:	f43f ad95 	beq.w	80113a2 <_strtod_l+0x56a>
 8011878:	ed9f 7b55 	vldr	d7, [pc, #340]	; 80119d0 <_strtod_l+0xb98>
 801187c:	4f60      	ldr	r7, [pc, #384]	; (8011a00 <_strtod_l+0xbc8>)
 801187e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011882:	2600      	movs	r6, #0
 8011884:	e7ae      	b.n	80117e4 <_strtod_l+0x9ac>
 8011886:	4f5f      	ldr	r7, [pc, #380]	; (8011a04 <_strtod_l+0xbcc>)
 8011888:	2600      	movs	r6, #0
 801188a:	e7a7      	b.n	80117dc <_strtod_l+0x9a4>
 801188c:	4b5d      	ldr	r3, [pc, #372]	; (8011a04 <_strtod_l+0xbcc>)
 801188e:	4630      	mov	r0, r6
 8011890:	4639      	mov	r1, r7
 8011892:	2200      	movs	r2, #0
 8011894:	f7ee fed0 	bl	8000638 <__aeabi_dmul>
 8011898:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801189a:	4606      	mov	r6, r0
 801189c:	460f      	mov	r7, r1
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d09c      	beq.n	80117dc <_strtod_l+0x9a4>
 80118a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80118a6:	e79d      	b.n	80117e4 <_strtod_l+0x9ac>
 80118a8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80119d8 <_strtod_l+0xba0>
 80118ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80118b0:	ec57 6b17 	vmov	r6, r7, d7
 80118b4:	e796      	b.n	80117e4 <_strtod_l+0x9ac>
 80118b6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80118ba:	9b04      	ldr	r3, [sp, #16]
 80118bc:	46ca      	mov	sl, r9
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d1c2      	bne.n	8011848 <_strtod_l+0xa10>
 80118c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80118c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80118c8:	0d1b      	lsrs	r3, r3, #20
 80118ca:	051b      	lsls	r3, r3, #20
 80118cc:	429a      	cmp	r2, r3
 80118ce:	d1bb      	bne.n	8011848 <_strtod_l+0xa10>
 80118d0:	4630      	mov	r0, r6
 80118d2:	4639      	mov	r1, r7
 80118d4:	f7ef fa10 	bl	8000cf8 <__aeabi_d2lz>
 80118d8:	f7ee fe80 	bl	80005dc <__aeabi_l2d>
 80118dc:	4602      	mov	r2, r0
 80118de:	460b      	mov	r3, r1
 80118e0:	4630      	mov	r0, r6
 80118e2:	4639      	mov	r1, r7
 80118e4:	f7ee fcf0 	bl	80002c8 <__aeabi_dsub>
 80118e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80118ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80118ee:	ea43 0308 	orr.w	r3, r3, r8
 80118f2:	4313      	orrs	r3, r2
 80118f4:	4606      	mov	r6, r0
 80118f6:	460f      	mov	r7, r1
 80118f8:	d054      	beq.n	80119a4 <_strtod_l+0xb6c>
 80118fa:	a339      	add	r3, pc, #228	; (adr r3, 80119e0 <_strtod_l+0xba8>)
 80118fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011900:	f7ef f90c 	bl	8000b1c <__aeabi_dcmplt>
 8011904:	2800      	cmp	r0, #0
 8011906:	f47f ace5 	bne.w	80112d4 <_strtod_l+0x49c>
 801190a:	a337      	add	r3, pc, #220	; (adr r3, 80119e8 <_strtod_l+0xbb0>)
 801190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011910:	4630      	mov	r0, r6
 8011912:	4639      	mov	r1, r7
 8011914:	f7ef f920 	bl	8000b58 <__aeabi_dcmpgt>
 8011918:	2800      	cmp	r0, #0
 801191a:	d095      	beq.n	8011848 <_strtod_l+0xa10>
 801191c:	e4da      	b.n	80112d4 <_strtod_l+0x49c>
 801191e:	9b04      	ldr	r3, [sp, #16]
 8011920:	b333      	cbz	r3, 8011970 <_strtod_l+0xb38>
 8011922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011924:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011928:	d822      	bhi.n	8011970 <_strtod_l+0xb38>
 801192a:	a331      	add	r3, pc, #196	; (adr r3, 80119f0 <_strtod_l+0xbb8>)
 801192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011930:	4630      	mov	r0, r6
 8011932:	4639      	mov	r1, r7
 8011934:	f7ef f8fc 	bl	8000b30 <__aeabi_dcmple>
 8011938:	b1a0      	cbz	r0, 8011964 <_strtod_l+0xb2c>
 801193a:	4639      	mov	r1, r7
 801193c:	4630      	mov	r0, r6
 801193e:	f7ef f953 	bl	8000be8 <__aeabi_d2uiz>
 8011942:	2801      	cmp	r0, #1
 8011944:	bf38      	it	cc
 8011946:	2001      	movcc	r0, #1
 8011948:	f7ee fdfc 	bl	8000544 <__aeabi_ui2d>
 801194c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801194e:	4606      	mov	r6, r0
 8011950:	460f      	mov	r7, r1
 8011952:	bb23      	cbnz	r3, 801199e <_strtod_l+0xb66>
 8011954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011958:	9010      	str	r0, [sp, #64]	; 0x40
 801195a:	9311      	str	r3, [sp, #68]	; 0x44
 801195c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011960:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8011964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011966:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011968:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801196c:	1a9b      	subs	r3, r3, r2
 801196e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011970:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011974:	eeb0 0a48 	vmov.f32	s0, s16
 8011978:	eef0 0a68 	vmov.f32	s1, s17
 801197c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011980:	f7ff f8f4 	bl	8010b6c <__ulp>
 8011984:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011988:	ec53 2b10 	vmov	r2, r3, d0
 801198c:	f7ee fe54 	bl	8000638 <__aeabi_dmul>
 8011990:	ec53 2b18 	vmov	r2, r3, d8
 8011994:	f7ee fc9a 	bl	80002cc <__adddf3>
 8011998:	4680      	mov	r8, r0
 801199a:	4689      	mov	r9, r1
 801199c:	e78d      	b.n	80118ba <_strtod_l+0xa82>
 801199e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80119a2:	e7db      	b.n	801195c <_strtod_l+0xb24>
 80119a4:	a314      	add	r3, pc, #80	; (adr r3, 80119f8 <_strtod_l+0xbc0>)
 80119a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119aa:	f7ef f8b7 	bl	8000b1c <__aeabi_dcmplt>
 80119ae:	e7b3      	b.n	8011918 <_strtod_l+0xae0>
 80119b0:	2300      	movs	r3, #0
 80119b2:	930a      	str	r3, [sp, #40]	; 0x28
 80119b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80119b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80119b8:	6013      	str	r3, [r2, #0]
 80119ba:	f7ff ba7c 	b.w	8010eb6 <_strtod_l+0x7e>
 80119be:	2a65      	cmp	r2, #101	; 0x65
 80119c0:	f43f ab75 	beq.w	80110ae <_strtod_l+0x276>
 80119c4:	2a45      	cmp	r2, #69	; 0x45
 80119c6:	f43f ab72 	beq.w	80110ae <_strtod_l+0x276>
 80119ca:	2301      	movs	r3, #1
 80119cc:	f7ff bbaa 	b.w	8011124 <_strtod_l+0x2ec>
 80119d0:	00000000 	.word	0x00000000
 80119d4:	bff00000 	.word	0xbff00000
 80119d8:	00000000 	.word	0x00000000
 80119dc:	3ff00000 	.word	0x3ff00000
 80119e0:	94a03595 	.word	0x94a03595
 80119e4:	3fdfffff 	.word	0x3fdfffff
 80119e8:	35afe535 	.word	0x35afe535
 80119ec:	3fe00000 	.word	0x3fe00000
 80119f0:	ffc00000 	.word	0xffc00000
 80119f4:	41dfffff 	.word	0x41dfffff
 80119f8:	94a03595 	.word	0x94a03595
 80119fc:	3fcfffff 	.word	0x3fcfffff
 8011a00:	3ff00000 	.word	0x3ff00000
 8011a04:	3fe00000 	.word	0x3fe00000
 8011a08:	7ff00000 	.word	0x7ff00000
 8011a0c:	7fe00000 	.word	0x7fe00000
 8011a10:	7c9fffff 	.word	0x7c9fffff
 8011a14:	7fefffff 	.word	0x7fefffff

08011a18 <_strtod_r>:
 8011a18:	4b01      	ldr	r3, [pc, #4]	; (8011a20 <_strtod_r+0x8>)
 8011a1a:	f7ff ba0d 	b.w	8010e38 <_strtod_l>
 8011a1e:	bf00      	nop
 8011a20:	2000007c 	.word	0x2000007c

08011a24 <_strtol_l.constprop.0>:
 8011a24:	2b01      	cmp	r3, #1
 8011a26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011a2a:	d001      	beq.n	8011a30 <_strtol_l.constprop.0+0xc>
 8011a2c:	2b24      	cmp	r3, #36	; 0x24
 8011a2e:	d906      	bls.n	8011a3e <_strtol_l.constprop.0+0x1a>
 8011a30:	f7fd fd72 	bl	800f518 <__errno>
 8011a34:	2316      	movs	r3, #22
 8011a36:	6003      	str	r3, [r0, #0]
 8011a38:	2000      	movs	r0, #0
 8011a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011b24 <_strtol_l.constprop.0+0x100>
 8011a42:	460d      	mov	r5, r1
 8011a44:	462e      	mov	r6, r5
 8011a46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011a4a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8011a4e:	f017 0708 	ands.w	r7, r7, #8
 8011a52:	d1f7      	bne.n	8011a44 <_strtol_l.constprop.0+0x20>
 8011a54:	2c2d      	cmp	r4, #45	; 0x2d
 8011a56:	d132      	bne.n	8011abe <_strtol_l.constprop.0+0x9a>
 8011a58:	782c      	ldrb	r4, [r5, #0]
 8011a5a:	2701      	movs	r7, #1
 8011a5c:	1cb5      	adds	r5, r6, #2
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d05b      	beq.n	8011b1a <_strtol_l.constprop.0+0xf6>
 8011a62:	2b10      	cmp	r3, #16
 8011a64:	d109      	bne.n	8011a7a <_strtol_l.constprop.0+0x56>
 8011a66:	2c30      	cmp	r4, #48	; 0x30
 8011a68:	d107      	bne.n	8011a7a <_strtol_l.constprop.0+0x56>
 8011a6a:	782c      	ldrb	r4, [r5, #0]
 8011a6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011a70:	2c58      	cmp	r4, #88	; 0x58
 8011a72:	d14d      	bne.n	8011b10 <_strtol_l.constprop.0+0xec>
 8011a74:	786c      	ldrb	r4, [r5, #1]
 8011a76:	2310      	movs	r3, #16
 8011a78:	3502      	adds	r5, #2
 8011a7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011a7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8011a82:	f04f 0e00 	mov.w	lr, #0
 8011a86:	fbb8 f9f3 	udiv	r9, r8, r3
 8011a8a:	4676      	mov	r6, lr
 8011a8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8011a90:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8011a94:	f1bc 0f09 	cmp.w	ip, #9
 8011a98:	d816      	bhi.n	8011ac8 <_strtol_l.constprop.0+0xa4>
 8011a9a:	4664      	mov	r4, ip
 8011a9c:	42a3      	cmp	r3, r4
 8011a9e:	dd24      	ble.n	8011aea <_strtol_l.constprop.0+0xc6>
 8011aa0:	f1be 3fff 	cmp.w	lr, #4294967295
 8011aa4:	d008      	beq.n	8011ab8 <_strtol_l.constprop.0+0x94>
 8011aa6:	45b1      	cmp	r9, r6
 8011aa8:	d31c      	bcc.n	8011ae4 <_strtol_l.constprop.0+0xc0>
 8011aaa:	d101      	bne.n	8011ab0 <_strtol_l.constprop.0+0x8c>
 8011aac:	45a2      	cmp	sl, r4
 8011aae:	db19      	blt.n	8011ae4 <_strtol_l.constprop.0+0xc0>
 8011ab0:	fb06 4603 	mla	r6, r6, r3, r4
 8011ab4:	f04f 0e01 	mov.w	lr, #1
 8011ab8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011abc:	e7e8      	b.n	8011a90 <_strtol_l.constprop.0+0x6c>
 8011abe:	2c2b      	cmp	r4, #43	; 0x2b
 8011ac0:	bf04      	itt	eq
 8011ac2:	782c      	ldrbeq	r4, [r5, #0]
 8011ac4:	1cb5      	addeq	r5, r6, #2
 8011ac6:	e7ca      	b.n	8011a5e <_strtol_l.constprop.0+0x3a>
 8011ac8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8011acc:	f1bc 0f19 	cmp.w	ip, #25
 8011ad0:	d801      	bhi.n	8011ad6 <_strtol_l.constprop.0+0xb2>
 8011ad2:	3c37      	subs	r4, #55	; 0x37
 8011ad4:	e7e2      	b.n	8011a9c <_strtol_l.constprop.0+0x78>
 8011ad6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8011ada:	f1bc 0f19 	cmp.w	ip, #25
 8011ade:	d804      	bhi.n	8011aea <_strtol_l.constprop.0+0xc6>
 8011ae0:	3c57      	subs	r4, #87	; 0x57
 8011ae2:	e7db      	b.n	8011a9c <_strtol_l.constprop.0+0x78>
 8011ae4:	f04f 3eff 	mov.w	lr, #4294967295
 8011ae8:	e7e6      	b.n	8011ab8 <_strtol_l.constprop.0+0x94>
 8011aea:	f1be 3fff 	cmp.w	lr, #4294967295
 8011aee:	d105      	bne.n	8011afc <_strtol_l.constprop.0+0xd8>
 8011af0:	2322      	movs	r3, #34	; 0x22
 8011af2:	6003      	str	r3, [r0, #0]
 8011af4:	4646      	mov	r6, r8
 8011af6:	b942      	cbnz	r2, 8011b0a <_strtol_l.constprop.0+0xe6>
 8011af8:	4630      	mov	r0, r6
 8011afa:	e79e      	b.n	8011a3a <_strtol_l.constprop.0+0x16>
 8011afc:	b107      	cbz	r7, 8011b00 <_strtol_l.constprop.0+0xdc>
 8011afe:	4276      	negs	r6, r6
 8011b00:	2a00      	cmp	r2, #0
 8011b02:	d0f9      	beq.n	8011af8 <_strtol_l.constprop.0+0xd4>
 8011b04:	f1be 0f00 	cmp.w	lr, #0
 8011b08:	d000      	beq.n	8011b0c <_strtol_l.constprop.0+0xe8>
 8011b0a:	1e69      	subs	r1, r5, #1
 8011b0c:	6011      	str	r1, [r2, #0]
 8011b0e:	e7f3      	b.n	8011af8 <_strtol_l.constprop.0+0xd4>
 8011b10:	2430      	movs	r4, #48	; 0x30
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d1b1      	bne.n	8011a7a <_strtol_l.constprop.0+0x56>
 8011b16:	2308      	movs	r3, #8
 8011b18:	e7af      	b.n	8011a7a <_strtol_l.constprop.0+0x56>
 8011b1a:	2c30      	cmp	r4, #48	; 0x30
 8011b1c:	d0a5      	beq.n	8011a6a <_strtol_l.constprop.0+0x46>
 8011b1e:	230a      	movs	r3, #10
 8011b20:	e7ab      	b.n	8011a7a <_strtol_l.constprop.0+0x56>
 8011b22:	bf00      	nop
 8011b24:	080133b1 	.word	0x080133b1

08011b28 <_strtol_r>:
 8011b28:	f7ff bf7c 	b.w	8011a24 <_strtol_l.constprop.0>

08011b2c <__ssputs_r>:
 8011b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b30:	688e      	ldr	r6, [r1, #8]
 8011b32:	461f      	mov	r7, r3
 8011b34:	42be      	cmp	r6, r7
 8011b36:	680b      	ldr	r3, [r1, #0]
 8011b38:	4682      	mov	sl, r0
 8011b3a:	460c      	mov	r4, r1
 8011b3c:	4690      	mov	r8, r2
 8011b3e:	d82c      	bhi.n	8011b9a <__ssputs_r+0x6e>
 8011b40:	898a      	ldrh	r2, [r1, #12]
 8011b42:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b46:	d026      	beq.n	8011b96 <__ssputs_r+0x6a>
 8011b48:	6965      	ldr	r5, [r4, #20]
 8011b4a:	6909      	ldr	r1, [r1, #16]
 8011b4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b50:	eba3 0901 	sub.w	r9, r3, r1
 8011b54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b58:	1c7b      	adds	r3, r7, #1
 8011b5a:	444b      	add	r3, r9
 8011b5c:	106d      	asrs	r5, r5, #1
 8011b5e:	429d      	cmp	r5, r3
 8011b60:	bf38      	it	cc
 8011b62:	461d      	movcc	r5, r3
 8011b64:	0553      	lsls	r3, r2, #21
 8011b66:	d527      	bpl.n	8011bb8 <__ssputs_r+0x8c>
 8011b68:	4629      	mov	r1, r5
 8011b6a:	f7fe fc07 	bl	801037c <_malloc_r>
 8011b6e:	4606      	mov	r6, r0
 8011b70:	b360      	cbz	r0, 8011bcc <__ssputs_r+0xa0>
 8011b72:	6921      	ldr	r1, [r4, #16]
 8011b74:	464a      	mov	r2, r9
 8011b76:	f7fd fcfc 	bl	800f572 <memcpy>
 8011b7a:	89a3      	ldrh	r3, [r4, #12]
 8011b7c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b84:	81a3      	strh	r3, [r4, #12]
 8011b86:	6126      	str	r6, [r4, #16]
 8011b88:	6165      	str	r5, [r4, #20]
 8011b8a:	444e      	add	r6, r9
 8011b8c:	eba5 0509 	sub.w	r5, r5, r9
 8011b90:	6026      	str	r6, [r4, #0]
 8011b92:	60a5      	str	r5, [r4, #8]
 8011b94:	463e      	mov	r6, r7
 8011b96:	42be      	cmp	r6, r7
 8011b98:	d900      	bls.n	8011b9c <__ssputs_r+0x70>
 8011b9a:	463e      	mov	r6, r7
 8011b9c:	6820      	ldr	r0, [r4, #0]
 8011b9e:	4632      	mov	r2, r6
 8011ba0:	4641      	mov	r1, r8
 8011ba2:	f000 f9c9 	bl	8011f38 <memmove>
 8011ba6:	68a3      	ldr	r3, [r4, #8]
 8011ba8:	1b9b      	subs	r3, r3, r6
 8011baa:	60a3      	str	r3, [r4, #8]
 8011bac:	6823      	ldr	r3, [r4, #0]
 8011bae:	4433      	add	r3, r6
 8011bb0:	6023      	str	r3, [r4, #0]
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bb8:	462a      	mov	r2, r5
 8011bba:	f7fc fc8f 	bl	800e4dc <_realloc_r>
 8011bbe:	4606      	mov	r6, r0
 8011bc0:	2800      	cmp	r0, #0
 8011bc2:	d1e0      	bne.n	8011b86 <__ssputs_r+0x5a>
 8011bc4:	6921      	ldr	r1, [r4, #16]
 8011bc6:	4650      	mov	r0, sl
 8011bc8:	f7fe fb64 	bl	8010294 <_free_r>
 8011bcc:	230c      	movs	r3, #12
 8011bce:	f8ca 3000 	str.w	r3, [sl]
 8011bd2:	89a3      	ldrh	r3, [r4, #12]
 8011bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011bd8:	81a3      	strh	r3, [r4, #12]
 8011bda:	f04f 30ff 	mov.w	r0, #4294967295
 8011bde:	e7e9      	b.n	8011bb4 <__ssputs_r+0x88>

08011be0 <_svfiprintf_r>:
 8011be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011be4:	4698      	mov	r8, r3
 8011be6:	898b      	ldrh	r3, [r1, #12]
 8011be8:	061b      	lsls	r3, r3, #24
 8011bea:	b09d      	sub	sp, #116	; 0x74
 8011bec:	4607      	mov	r7, r0
 8011bee:	460d      	mov	r5, r1
 8011bf0:	4614      	mov	r4, r2
 8011bf2:	d50e      	bpl.n	8011c12 <_svfiprintf_r+0x32>
 8011bf4:	690b      	ldr	r3, [r1, #16]
 8011bf6:	b963      	cbnz	r3, 8011c12 <_svfiprintf_r+0x32>
 8011bf8:	2140      	movs	r1, #64	; 0x40
 8011bfa:	f7fe fbbf 	bl	801037c <_malloc_r>
 8011bfe:	6028      	str	r0, [r5, #0]
 8011c00:	6128      	str	r0, [r5, #16]
 8011c02:	b920      	cbnz	r0, 8011c0e <_svfiprintf_r+0x2e>
 8011c04:	230c      	movs	r3, #12
 8011c06:	603b      	str	r3, [r7, #0]
 8011c08:	f04f 30ff 	mov.w	r0, #4294967295
 8011c0c:	e0d0      	b.n	8011db0 <_svfiprintf_r+0x1d0>
 8011c0e:	2340      	movs	r3, #64	; 0x40
 8011c10:	616b      	str	r3, [r5, #20]
 8011c12:	2300      	movs	r3, #0
 8011c14:	9309      	str	r3, [sp, #36]	; 0x24
 8011c16:	2320      	movs	r3, #32
 8011c18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c20:	2330      	movs	r3, #48	; 0x30
 8011c22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8011dc8 <_svfiprintf_r+0x1e8>
 8011c26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c2a:	f04f 0901 	mov.w	r9, #1
 8011c2e:	4623      	mov	r3, r4
 8011c30:	469a      	mov	sl, r3
 8011c32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c36:	b10a      	cbz	r2, 8011c3c <_svfiprintf_r+0x5c>
 8011c38:	2a25      	cmp	r2, #37	; 0x25
 8011c3a:	d1f9      	bne.n	8011c30 <_svfiprintf_r+0x50>
 8011c3c:	ebba 0b04 	subs.w	fp, sl, r4
 8011c40:	d00b      	beq.n	8011c5a <_svfiprintf_r+0x7a>
 8011c42:	465b      	mov	r3, fp
 8011c44:	4622      	mov	r2, r4
 8011c46:	4629      	mov	r1, r5
 8011c48:	4638      	mov	r0, r7
 8011c4a:	f7ff ff6f 	bl	8011b2c <__ssputs_r>
 8011c4e:	3001      	adds	r0, #1
 8011c50:	f000 80a9 	beq.w	8011da6 <_svfiprintf_r+0x1c6>
 8011c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c56:	445a      	add	r2, fp
 8011c58:	9209      	str	r2, [sp, #36]	; 0x24
 8011c5a:	f89a 3000 	ldrb.w	r3, [sl]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	f000 80a1 	beq.w	8011da6 <_svfiprintf_r+0x1c6>
 8011c64:	2300      	movs	r3, #0
 8011c66:	f04f 32ff 	mov.w	r2, #4294967295
 8011c6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c6e:	f10a 0a01 	add.w	sl, sl, #1
 8011c72:	9304      	str	r3, [sp, #16]
 8011c74:	9307      	str	r3, [sp, #28]
 8011c76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c7a:	931a      	str	r3, [sp, #104]	; 0x68
 8011c7c:	4654      	mov	r4, sl
 8011c7e:	2205      	movs	r2, #5
 8011c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c84:	4850      	ldr	r0, [pc, #320]	; (8011dc8 <_svfiprintf_r+0x1e8>)
 8011c86:	f7ee fac3 	bl	8000210 <memchr>
 8011c8a:	9a04      	ldr	r2, [sp, #16]
 8011c8c:	b9d8      	cbnz	r0, 8011cc6 <_svfiprintf_r+0xe6>
 8011c8e:	06d0      	lsls	r0, r2, #27
 8011c90:	bf44      	itt	mi
 8011c92:	2320      	movmi	r3, #32
 8011c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c98:	0711      	lsls	r1, r2, #28
 8011c9a:	bf44      	itt	mi
 8011c9c:	232b      	movmi	r3, #43	; 0x2b
 8011c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ca2:	f89a 3000 	ldrb.w	r3, [sl]
 8011ca6:	2b2a      	cmp	r3, #42	; 0x2a
 8011ca8:	d015      	beq.n	8011cd6 <_svfiprintf_r+0xf6>
 8011caa:	9a07      	ldr	r2, [sp, #28]
 8011cac:	4654      	mov	r4, sl
 8011cae:	2000      	movs	r0, #0
 8011cb0:	f04f 0c0a 	mov.w	ip, #10
 8011cb4:	4621      	mov	r1, r4
 8011cb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cba:	3b30      	subs	r3, #48	; 0x30
 8011cbc:	2b09      	cmp	r3, #9
 8011cbe:	d94d      	bls.n	8011d5c <_svfiprintf_r+0x17c>
 8011cc0:	b1b0      	cbz	r0, 8011cf0 <_svfiprintf_r+0x110>
 8011cc2:	9207      	str	r2, [sp, #28]
 8011cc4:	e014      	b.n	8011cf0 <_svfiprintf_r+0x110>
 8011cc6:	eba0 0308 	sub.w	r3, r0, r8
 8011cca:	fa09 f303 	lsl.w	r3, r9, r3
 8011cce:	4313      	orrs	r3, r2
 8011cd0:	9304      	str	r3, [sp, #16]
 8011cd2:	46a2      	mov	sl, r4
 8011cd4:	e7d2      	b.n	8011c7c <_svfiprintf_r+0x9c>
 8011cd6:	9b03      	ldr	r3, [sp, #12]
 8011cd8:	1d19      	adds	r1, r3, #4
 8011cda:	681b      	ldr	r3, [r3, #0]
 8011cdc:	9103      	str	r1, [sp, #12]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	bfbb      	ittet	lt
 8011ce2:	425b      	neglt	r3, r3
 8011ce4:	f042 0202 	orrlt.w	r2, r2, #2
 8011ce8:	9307      	strge	r3, [sp, #28]
 8011cea:	9307      	strlt	r3, [sp, #28]
 8011cec:	bfb8      	it	lt
 8011cee:	9204      	strlt	r2, [sp, #16]
 8011cf0:	7823      	ldrb	r3, [r4, #0]
 8011cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8011cf4:	d10c      	bne.n	8011d10 <_svfiprintf_r+0x130>
 8011cf6:	7863      	ldrb	r3, [r4, #1]
 8011cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8011cfa:	d134      	bne.n	8011d66 <_svfiprintf_r+0x186>
 8011cfc:	9b03      	ldr	r3, [sp, #12]
 8011cfe:	1d1a      	adds	r2, r3, #4
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	9203      	str	r2, [sp, #12]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	bfb8      	it	lt
 8011d08:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d0c:	3402      	adds	r4, #2
 8011d0e:	9305      	str	r3, [sp, #20]
 8011d10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8011dd8 <_svfiprintf_r+0x1f8>
 8011d14:	7821      	ldrb	r1, [r4, #0]
 8011d16:	2203      	movs	r2, #3
 8011d18:	4650      	mov	r0, sl
 8011d1a:	f7ee fa79 	bl	8000210 <memchr>
 8011d1e:	b138      	cbz	r0, 8011d30 <_svfiprintf_r+0x150>
 8011d20:	9b04      	ldr	r3, [sp, #16]
 8011d22:	eba0 000a 	sub.w	r0, r0, sl
 8011d26:	2240      	movs	r2, #64	; 0x40
 8011d28:	4082      	lsls	r2, r0
 8011d2a:	4313      	orrs	r3, r2
 8011d2c:	3401      	adds	r4, #1
 8011d2e:	9304      	str	r3, [sp, #16]
 8011d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d34:	4825      	ldr	r0, [pc, #148]	; (8011dcc <_svfiprintf_r+0x1ec>)
 8011d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d3a:	2206      	movs	r2, #6
 8011d3c:	f7ee fa68 	bl	8000210 <memchr>
 8011d40:	2800      	cmp	r0, #0
 8011d42:	d038      	beq.n	8011db6 <_svfiprintf_r+0x1d6>
 8011d44:	4b22      	ldr	r3, [pc, #136]	; (8011dd0 <_svfiprintf_r+0x1f0>)
 8011d46:	bb1b      	cbnz	r3, 8011d90 <_svfiprintf_r+0x1b0>
 8011d48:	9b03      	ldr	r3, [sp, #12]
 8011d4a:	3307      	adds	r3, #7
 8011d4c:	f023 0307 	bic.w	r3, r3, #7
 8011d50:	3308      	adds	r3, #8
 8011d52:	9303      	str	r3, [sp, #12]
 8011d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d56:	4433      	add	r3, r6
 8011d58:	9309      	str	r3, [sp, #36]	; 0x24
 8011d5a:	e768      	b.n	8011c2e <_svfiprintf_r+0x4e>
 8011d5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d60:	460c      	mov	r4, r1
 8011d62:	2001      	movs	r0, #1
 8011d64:	e7a6      	b.n	8011cb4 <_svfiprintf_r+0xd4>
 8011d66:	2300      	movs	r3, #0
 8011d68:	3401      	adds	r4, #1
 8011d6a:	9305      	str	r3, [sp, #20]
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	f04f 0c0a 	mov.w	ip, #10
 8011d72:	4620      	mov	r0, r4
 8011d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d78:	3a30      	subs	r2, #48	; 0x30
 8011d7a:	2a09      	cmp	r2, #9
 8011d7c:	d903      	bls.n	8011d86 <_svfiprintf_r+0x1a6>
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d0c6      	beq.n	8011d10 <_svfiprintf_r+0x130>
 8011d82:	9105      	str	r1, [sp, #20]
 8011d84:	e7c4      	b.n	8011d10 <_svfiprintf_r+0x130>
 8011d86:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d8a:	4604      	mov	r4, r0
 8011d8c:	2301      	movs	r3, #1
 8011d8e:	e7f0      	b.n	8011d72 <_svfiprintf_r+0x192>
 8011d90:	ab03      	add	r3, sp, #12
 8011d92:	9300      	str	r3, [sp, #0]
 8011d94:	462a      	mov	r2, r5
 8011d96:	4b0f      	ldr	r3, [pc, #60]	; (8011dd4 <_svfiprintf_r+0x1f4>)
 8011d98:	a904      	add	r1, sp, #16
 8011d9a:	4638      	mov	r0, r7
 8011d9c:	f7fc fc6e 	bl	800e67c <_printf_float>
 8011da0:	1c42      	adds	r2, r0, #1
 8011da2:	4606      	mov	r6, r0
 8011da4:	d1d6      	bne.n	8011d54 <_svfiprintf_r+0x174>
 8011da6:	89ab      	ldrh	r3, [r5, #12]
 8011da8:	065b      	lsls	r3, r3, #25
 8011daa:	f53f af2d 	bmi.w	8011c08 <_svfiprintf_r+0x28>
 8011dae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011db0:	b01d      	add	sp, #116	; 0x74
 8011db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011db6:	ab03      	add	r3, sp, #12
 8011db8:	9300      	str	r3, [sp, #0]
 8011dba:	462a      	mov	r2, r5
 8011dbc:	4b05      	ldr	r3, [pc, #20]	; (8011dd4 <_svfiprintf_r+0x1f4>)
 8011dbe:	a904      	add	r1, sp, #16
 8011dc0:	4638      	mov	r0, r7
 8011dc2:	f7fc feff 	bl	800ebc4 <_printf_i>
 8011dc6:	e7eb      	b.n	8011da0 <_svfiprintf_r+0x1c0>
 8011dc8:	080134b1 	.word	0x080134b1
 8011dcc:	080134bb 	.word	0x080134bb
 8011dd0:	0800e67d 	.word	0x0800e67d
 8011dd4:	08011b2d 	.word	0x08011b2d
 8011dd8:	080134b7 	.word	0x080134b7

08011ddc <__sflush_r>:
 8011ddc:	898a      	ldrh	r2, [r1, #12]
 8011dde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de2:	4605      	mov	r5, r0
 8011de4:	0710      	lsls	r0, r2, #28
 8011de6:	460c      	mov	r4, r1
 8011de8:	d458      	bmi.n	8011e9c <__sflush_r+0xc0>
 8011dea:	684b      	ldr	r3, [r1, #4]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	dc05      	bgt.n	8011dfc <__sflush_r+0x20>
 8011df0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	dc02      	bgt.n	8011dfc <__sflush_r+0x20>
 8011df6:	2000      	movs	r0, #0
 8011df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dfe:	2e00      	cmp	r6, #0
 8011e00:	d0f9      	beq.n	8011df6 <__sflush_r+0x1a>
 8011e02:	2300      	movs	r3, #0
 8011e04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e08:	682f      	ldr	r7, [r5, #0]
 8011e0a:	6a21      	ldr	r1, [r4, #32]
 8011e0c:	602b      	str	r3, [r5, #0]
 8011e0e:	d032      	beq.n	8011e76 <__sflush_r+0x9a>
 8011e10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e12:	89a3      	ldrh	r3, [r4, #12]
 8011e14:	075a      	lsls	r2, r3, #29
 8011e16:	d505      	bpl.n	8011e24 <__sflush_r+0x48>
 8011e18:	6863      	ldr	r3, [r4, #4]
 8011e1a:	1ac0      	subs	r0, r0, r3
 8011e1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e1e:	b10b      	cbz	r3, 8011e24 <__sflush_r+0x48>
 8011e20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e22:	1ac0      	subs	r0, r0, r3
 8011e24:	2300      	movs	r3, #0
 8011e26:	4602      	mov	r2, r0
 8011e28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e2a:	6a21      	ldr	r1, [r4, #32]
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	47b0      	blx	r6
 8011e30:	1c43      	adds	r3, r0, #1
 8011e32:	89a3      	ldrh	r3, [r4, #12]
 8011e34:	d106      	bne.n	8011e44 <__sflush_r+0x68>
 8011e36:	6829      	ldr	r1, [r5, #0]
 8011e38:	291d      	cmp	r1, #29
 8011e3a:	d82b      	bhi.n	8011e94 <__sflush_r+0xb8>
 8011e3c:	4a29      	ldr	r2, [pc, #164]	; (8011ee4 <__sflush_r+0x108>)
 8011e3e:	410a      	asrs	r2, r1
 8011e40:	07d6      	lsls	r6, r2, #31
 8011e42:	d427      	bmi.n	8011e94 <__sflush_r+0xb8>
 8011e44:	2200      	movs	r2, #0
 8011e46:	6062      	str	r2, [r4, #4]
 8011e48:	04d9      	lsls	r1, r3, #19
 8011e4a:	6922      	ldr	r2, [r4, #16]
 8011e4c:	6022      	str	r2, [r4, #0]
 8011e4e:	d504      	bpl.n	8011e5a <__sflush_r+0x7e>
 8011e50:	1c42      	adds	r2, r0, #1
 8011e52:	d101      	bne.n	8011e58 <__sflush_r+0x7c>
 8011e54:	682b      	ldr	r3, [r5, #0]
 8011e56:	b903      	cbnz	r3, 8011e5a <__sflush_r+0x7e>
 8011e58:	6560      	str	r0, [r4, #84]	; 0x54
 8011e5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e5c:	602f      	str	r7, [r5, #0]
 8011e5e:	2900      	cmp	r1, #0
 8011e60:	d0c9      	beq.n	8011df6 <__sflush_r+0x1a>
 8011e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e66:	4299      	cmp	r1, r3
 8011e68:	d002      	beq.n	8011e70 <__sflush_r+0x94>
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	f7fe fa12 	bl	8010294 <_free_r>
 8011e70:	2000      	movs	r0, #0
 8011e72:	6360      	str	r0, [r4, #52]	; 0x34
 8011e74:	e7c0      	b.n	8011df8 <__sflush_r+0x1c>
 8011e76:	2301      	movs	r3, #1
 8011e78:	4628      	mov	r0, r5
 8011e7a:	47b0      	blx	r6
 8011e7c:	1c41      	adds	r1, r0, #1
 8011e7e:	d1c8      	bne.n	8011e12 <__sflush_r+0x36>
 8011e80:	682b      	ldr	r3, [r5, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d0c5      	beq.n	8011e12 <__sflush_r+0x36>
 8011e86:	2b1d      	cmp	r3, #29
 8011e88:	d001      	beq.n	8011e8e <__sflush_r+0xb2>
 8011e8a:	2b16      	cmp	r3, #22
 8011e8c:	d101      	bne.n	8011e92 <__sflush_r+0xb6>
 8011e8e:	602f      	str	r7, [r5, #0]
 8011e90:	e7b1      	b.n	8011df6 <__sflush_r+0x1a>
 8011e92:	89a3      	ldrh	r3, [r4, #12]
 8011e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e98:	81a3      	strh	r3, [r4, #12]
 8011e9a:	e7ad      	b.n	8011df8 <__sflush_r+0x1c>
 8011e9c:	690f      	ldr	r7, [r1, #16]
 8011e9e:	2f00      	cmp	r7, #0
 8011ea0:	d0a9      	beq.n	8011df6 <__sflush_r+0x1a>
 8011ea2:	0793      	lsls	r3, r2, #30
 8011ea4:	680e      	ldr	r6, [r1, #0]
 8011ea6:	bf08      	it	eq
 8011ea8:	694b      	ldreq	r3, [r1, #20]
 8011eaa:	600f      	str	r7, [r1, #0]
 8011eac:	bf18      	it	ne
 8011eae:	2300      	movne	r3, #0
 8011eb0:	eba6 0807 	sub.w	r8, r6, r7
 8011eb4:	608b      	str	r3, [r1, #8]
 8011eb6:	f1b8 0f00 	cmp.w	r8, #0
 8011eba:	dd9c      	ble.n	8011df6 <__sflush_r+0x1a>
 8011ebc:	6a21      	ldr	r1, [r4, #32]
 8011ebe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ec0:	4643      	mov	r3, r8
 8011ec2:	463a      	mov	r2, r7
 8011ec4:	4628      	mov	r0, r5
 8011ec6:	47b0      	blx	r6
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	dc06      	bgt.n	8011eda <__sflush_r+0xfe>
 8011ecc:	89a3      	ldrh	r3, [r4, #12]
 8011ece:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ed2:	81a3      	strh	r3, [r4, #12]
 8011ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed8:	e78e      	b.n	8011df8 <__sflush_r+0x1c>
 8011eda:	4407      	add	r7, r0
 8011edc:	eba8 0800 	sub.w	r8, r8, r0
 8011ee0:	e7e9      	b.n	8011eb6 <__sflush_r+0xda>
 8011ee2:	bf00      	nop
 8011ee4:	dfbffffe 	.word	0xdfbffffe

08011ee8 <_fflush_r>:
 8011ee8:	b538      	push	{r3, r4, r5, lr}
 8011eea:	690b      	ldr	r3, [r1, #16]
 8011eec:	4605      	mov	r5, r0
 8011eee:	460c      	mov	r4, r1
 8011ef0:	b913      	cbnz	r3, 8011ef8 <_fflush_r+0x10>
 8011ef2:	2500      	movs	r5, #0
 8011ef4:	4628      	mov	r0, r5
 8011ef6:	bd38      	pop	{r3, r4, r5, pc}
 8011ef8:	b118      	cbz	r0, 8011f02 <_fflush_r+0x1a>
 8011efa:	6a03      	ldr	r3, [r0, #32]
 8011efc:	b90b      	cbnz	r3, 8011f02 <_fflush_r+0x1a>
 8011efe:	f7fd fa1f 	bl	800f340 <__sinit>
 8011f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d0f3      	beq.n	8011ef2 <_fflush_r+0xa>
 8011f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011f0c:	07d0      	lsls	r0, r2, #31
 8011f0e:	d404      	bmi.n	8011f1a <_fflush_r+0x32>
 8011f10:	0599      	lsls	r1, r3, #22
 8011f12:	d402      	bmi.n	8011f1a <_fflush_r+0x32>
 8011f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f16:	f7fd fb2a 	bl	800f56e <__retarget_lock_acquire_recursive>
 8011f1a:	4628      	mov	r0, r5
 8011f1c:	4621      	mov	r1, r4
 8011f1e:	f7ff ff5d 	bl	8011ddc <__sflush_r>
 8011f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f24:	07da      	lsls	r2, r3, #31
 8011f26:	4605      	mov	r5, r0
 8011f28:	d4e4      	bmi.n	8011ef4 <_fflush_r+0xc>
 8011f2a:	89a3      	ldrh	r3, [r4, #12]
 8011f2c:	059b      	lsls	r3, r3, #22
 8011f2e:	d4e1      	bmi.n	8011ef4 <_fflush_r+0xc>
 8011f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f32:	f7fd fb1d 	bl	800f570 <__retarget_lock_release_recursive>
 8011f36:	e7dd      	b.n	8011ef4 <_fflush_r+0xc>

08011f38 <memmove>:
 8011f38:	4288      	cmp	r0, r1
 8011f3a:	b510      	push	{r4, lr}
 8011f3c:	eb01 0402 	add.w	r4, r1, r2
 8011f40:	d902      	bls.n	8011f48 <memmove+0x10>
 8011f42:	4284      	cmp	r4, r0
 8011f44:	4623      	mov	r3, r4
 8011f46:	d807      	bhi.n	8011f58 <memmove+0x20>
 8011f48:	1e43      	subs	r3, r0, #1
 8011f4a:	42a1      	cmp	r1, r4
 8011f4c:	d008      	beq.n	8011f60 <memmove+0x28>
 8011f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f56:	e7f8      	b.n	8011f4a <memmove+0x12>
 8011f58:	4402      	add	r2, r0
 8011f5a:	4601      	mov	r1, r0
 8011f5c:	428a      	cmp	r2, r1
 8011f5e:	d100      	bne.n	8011f62 <memmove+0x2a>
 8011f60:	bd10      	pop	{r4, pc}
 8011f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011f66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011f6a:	e7f7      	b.n	8011f5c <memmove+0x24>

08011f6c <strncmp>:
 8011f6c:	b510      	push	{r4, lr}
 8011f6e:	b16a      	cbz	r2, 8011f8c <strncmp+0x20>
 8011f70:	3901      	subs	r1, #1
 8011f72:	1884      	adds	r4, r0, r2
 8011f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f78:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d103      	bne.n	8011f88 <strncmp+0x1c>
 8011f80:	42a0      	cmp	r0, r4
 8011f82:	d001      	beq.n	8011f88 <strncmp+0x1c>
 8011f84:	2a00      	cmp	r2, #0
 8011f86:	d1f5      	bne.n	8011f74 <strncmp+0x8>
 8011f88:	1ad0      	subs	r0, r2, r3
 8011f8a:	bd10      	pop	{r4, pc}
 8011f8c:	4610      	mov	r0, r2
 8011f8e:	e7fc      	b.n	8011f8a <strncmp+0x1e>

08011f90 <_sbrk_r>:
 8011f90:	b538      	push	{r3, r4, r5, lr}
 8011f92:	4d06      	ldr	r5, [pc, #24]	; (8011fac <_sbrk_r+0x1c>)
 8011f94:	2300      	movs	r3, #0
 8011f96:	4604      	mov	r4, r0
 8011f98:	4608      	mov	r0, r1
 8011f9a:	602b      	str	r3, [r5, #0]
 8011f9c:	f7f6 fe38 	bl	8008c10 <_sbrk>
 8011fa0:	1c43      	adds	r3, r0, #1
 8011fa2:	d102      	bne.n	8011faa <_sbrk_r+0x1a>
 8011fa4:	682b      	ldr	r3, [r5, #0]
 8011fa6:	b103      	cbz	r3, 8011faa <_sbrk_r+0x1a>
 8011fa8:	6023      	str	r3, [r4, #0]
 8011faa:	bd38      	pop	{r3, r4, r5, pc}
 8011fac:	200013a4 	.word	0x200013a4

08011fb0 <nan>:
 8011fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011fb8 <nan+0x8>
 8011fb4:	4770      	bx	lr
 8011fb6:	bf00      	nop
 8011fb8:	00000000 	.word	0x00000000
 8011fbc:	7ff80000 	.word	0x7ff80000

08011fc0 <__assert_func>:
 8011fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011fc2:	4614      	mov	r4, r2
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	4b09      	ldr	r3, [pc, #36]	; (8011fec <__assert_func+0x2c>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	4605      	mov	r5, r0
 8011fcc:	68d8      	ldr	r0, [r3, #12]
 8011fce:	b14c      	cbz	r4, 8011fe4 <__assert_func+0x24>
 8011fd0:	4b07      	ldr	r3, [pc, #28]	; (8011ff0 <__assert_func+0x30>)
 8011fd2:	9100      	str	r1, [sp, #0]
 8011fd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011fd8:	4906      	ldr	r1, [pc, #24]	; (8011ff4 <__assert_func+0x34>)
 8011fda:	462b      	mov	r3, r5
 8011fdc:	f000 fb9a 	bl	8012714 <fiprintf>
 8011fe0:	f000 fbaa 	bl	8012738 <abort>
 8011fe4:	4b04      	ldr	r3, [pc, #16]	; (8011ff8 <__assert_func+0x38>)
 8011fe6:	461c      	mov	r4, r3
 8011fe8:	e7f3      	b.n	8011fd2 <__assert_func+0x12>
 8011fea:	bf00      	nop
 8011fec:	20000078 	.word	0x20000078
 8011ff0:	080134ca 	.word	0x080134ca
 8011ff4:	080134d7 	.word	0x080134d7
 8011ff8:	08013505 	.word	0x08013505

08011ffc <_calloc_r>:
 8011ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011ffe:	fba1 2402 	umull	r2, r4, r1, r2
 8012002:	b94c      	cbnz	r4, 8012018 <_calloc_r+0x1c>
 8012004:	4611      	mov	r1, r2
 8012006:	9201      	str	r2, [sp, #4]
 8012008:	f7fe f9b8 	bl	801037c <_malloc_r>
 801200c:	9a01      	ldr	r2, [sp, #4]
 801200e:	4605      	mov	r5, r0
 8012010:	b930      	cbnz	r0, 8012020 <_calloc_r+0x24>
 8012012:	4628      	mov	r0, r5
 8012014:	b003      	add	sp, #12
 8012016:	bd30      	pop	{r4, r5, pc}
 8012018:	220c      	movs	r2, #12
 801201a:	6002      	str	r2, [r0, #0]
 801201c:	2500      	movs	r5, #0
 801201e:	e7f8      	b.n	8012012 <_calloc_r+0x16>
 8012020:	4621      	mov	r1, r4
 8012022:	f7fd fa26 	bl	800f472 <memset>
 8012026:	e7f4      	b.n	8012012 <_calloc_r+0x16>

08012028 <rshift>:
 8012028:	6903      	ldr	r3, [r0, #16]
 801202a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801202e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012032:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012036:	f100 0414 	add.w	r4, r0, #20
 801203a:	dd45      	ble.n	80120c8 <rshift+0xa0>
 801203c:	f011 011f 	ands.w	r1, r1, #31
 8012040:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012044:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012048:	d10c      	bne.n	8012064 <rshift+0x3c>
 801204a:	f100 0710 	add.w	r7, r0, #16
 801204e:	4629      	mov	r1, r5
 8012050:	42b1      	cmp	r1, r6
 8012052:	d334      	bcc.n	80120be <rshift+0x96>
 8012054:	1a9b      	subs	r3, r3, r2
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	1eea      	subs	r2, r5, #3
 801205a:	4296      	cmp	r6, r2
 801205c:	bf38      	it	cc
 801205e:	2300      	movcc	r3, #0
 8012060:	4423      	add	r3, r4
 8012062:	e015      	b.n	8012090 <rshift+0x68>
 8012064:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012068:	f1c1 0820 	rsb	r8, r1, #32
 801206c:	40cf      	lsrs	r7, r1
 801206e:	f105 0e04 	add.w	lr, r5, #4
 8012072:	46a1      	mov	r9, r4
 8012074:	4576      	cmp	r6, lr
 8012076:	46f4      	mov	ip, lr
 8012078:	d815      	bhi.n	80120a6 <rshift+0x7e>
 801207a:	1a9a      	subs	r2, r3, r2
 801207c:	0092      	lsls	r2, r2, #2
 801207e:	3a04      	subs	r2, #4
 8012080:	3501      	adds	r5, #1
 8012082:	42ae      	cmp	r6, r5
 8012084:	bf38      	it	cc
 8012086:	2200      	movcc	r2, #0
 8012088:	18a3      	adds	r3, r4, r2
 801208a:	50a7      	str	r7, [r4, r2]
 801208c:	b107      	cbz	r7, 8012090 <rshift+0x68>
 801208e:	3304      	adds	r3, #4
 8012090:	1b1a      	subs	r2, r3, r4
 8012092:	42a3      	cmp	r3, r4
 8012094:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012098:	bf08      	it	eq
 801209a:	2300      	moveq	r3, #0
 801209c:	6102      	str	r2, [r0, #16]
 801209e:	bf08      	it	eq
 80120a0:	6143      	streq	r3, [r0, #20]
 80120a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120a6:	f8dc c000 	ldr.w	ip, [ip]
 80120aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80120ae:	ea4c 0707 	orr.w	r7, ip, r7
 80120b2:	f849 7b04 	str.w	r7, [r9], #4
 80120b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80120ba:	40cf      	lsrs	r7, r1
 80120bc:	e7da      	b.n	8012074 <rshift+0x4c>
 80120be:	f851 cb04 	ldr.w	ip, [r1], #4
 80120c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80120c6:	e7c3      	b.n	8012050 <rshift+0x28>
 80120c8:	4623      	mov	r3, r4
 80120ca:	e7e1      	b.n	8012090 <rshift+0x68>

080120cc <__hexdig_fun>:
 80120cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80120d0:	2b09      	cmp	r3, #9
 80120d2:	d802      	bhi.n	80120da <__hexdig_fun+0xe>
 80120d4:	3820      	subs	r0, #32
 80120d6:	b2c0      	uxtb	r0, r0
 80120d8:	4770      	bx	lr
 80120da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80120de:	2b05      	cmp	r3, #5
 80120e0:	d801      	bhi.n	80120e6 <__hexdig_fun+0x1a>
 80120e2:	3847      	subs	r0, #71	; 0x47
 80120e4:	e7f7      	b.n	80120d6 <__hexdig_fun+0xa>
 80120e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80120ea:	2b05      	cmp	r3, #5
 80120ec:	d801      	bhi.n	80120f2 <__hexdig_fun+0x26>
 80120ee:	3827      	subs	r0, #39	; 0x27
 80120f0:	e7f1      	b.n	80120d6 <__hexdig_fun+0xa>
 80120f2:	2000      	movs	r0, #0
 80120f4:	4770      	bx	lr
	...

080120f8 <__gethex>:
 80120f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120fc:	4617      	mov	r7, r2
 80120fe:	680a      	ldr	r2, [r1, #0]
 8012100:	b085      	sub	sp, #20
 8012102:	f102 0b02 	add.w	fp, r2, #2
 8012106:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801210a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801210e:	4681      	mov	r9, r0
 8012110:	468a      	mov	sl, r1
 8012112:	9302      	str	r3, [sp, #8]
 8012114:	32fe      	adds	r2, #254	; 0xfe
 8012116:	eb02 030b 	add.w	r3, r2, fp
 801211a:	46d8      	mov	r8, fp
 801211c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8012120:	9301      	str	r3, [sp, #4]
 8012122:	2830      	cmp	r0, #48	; 0x30
 8012124:	d0f7      	beq.n	8012116 <__gethex+0x1e>
 8012126:	f7ff ffd1 	bl	80120cc <__hexdig_fun>
 801212a:	4604      	mov	r4, r0
 801212c:	2800      	cmp	r0, #0
 801212e:	d138      	bne.n	80121a2 <__gethex+0xaa>
 8012130:	49a7      	ldr	r1, [pc, #668]	; (80123d0 <__gethex+0x2d8>)
 8012132:	2201      	movs	r2, #1
 8012134:	4640      	mov	r0, r8
 8012136:	f7ff ff19 	bl	8011f6c <strncmp>
 801213a:	4606      	mov	r6, r0
 801213c:	2800      	cmp	r0, #0
 801213e:	d169      	bne.n	8012214 <__gethex+0x11c>
 8012140:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012144:	465d      	mov	r5, fp
 8012146:	f7ff ffc1 	bl	80120cc <__hexdig_fun>
 801214a:	2800      	cmp	r0, #0
 801214c:	d064      	beq.n	8012218 <__gethex+0x120>
 801214e:	465a      	mov	r2, fp
 8012150:	7810      	ldrb	r0, [r2, #0]
 8012152:	2830      	cmp	r0, #48	; 0x30
 8012154:	4690      	mov	r8, r2
 8012156:	f102 0201 	add.w	r2, r2, #1
 801215a:	d0f9      	beq.n	8012150 <__gethex+0x58>
 801215c:	f7ff ffb6 	bl	80120cc <__hexdig_fun>
 8012160:	2301      	movs	r3, #1
 8012162:	fab0 f480 	clz	r4, r0
 8012166:	0964      	lsrs	r4, r4, #5
 8012168:	465e      	mov	r6, fp
 801216a:	9301      	str	r3, [sp, #4]
 801216c:	4642      	mov	r2, r8
 801216e:	4615      	mov	r5, r2
 8012170:	3201      	adds	r2, #1
 8012172:	7828      	ldrb	r0, [r5, #0]
 8012174:	f7ff ffaa 	bl	80120cc <__hexdig_fun>
 8012178:	2800      	cmp	r0, #0
 801217a:	d1f8      	bne.n	801216e <__gethex+0x76>
 801217c:	4994      	ldr	r1, [pc, #592]	; (80123d0 <__gethex+0x2d8>)
 801217e:	2201      	movs	r2, #1
 8012180:	4628      	mov	r0, r5
 8012182:	f7ff fef3 	bl	8011f6c <strncmp>
 8012186:	b978      	cbnz	r0, 80121a8 <__gethex+0xb0>
 8012188:	b946      	cbnz	r6, 801219c <__gethex+0xa4>
 801218a:	1c6e      	adds	r6, r5, #1
 801218c:	4632      	mov	r2, r6
 801218e:	4615      	mov	r5, r2
 8012190:	3201      	adds	r2, #1
 8012192:	7828      	ldrb	r0, [r5, #0]
 8012194:	f7ff ff9a 	bl	80120cc <__hexdig_fun>
 8012198:	2800      	cmp	r0, #0
 801219a:	d1f8      	bne.n	801218e <__gethex+0x96>
 801219c:	1b73      	subs	r3, r6, r5
 801219e:	009e      	lsls	r6, r3, #2
 80121a0:	e004      	b.n	80121ac <__gethex+0xb4>
 80121a2:	2400      	movs	r4, #0
 80121a4:	4626      	mov	r6, r4
 80121a6:	e7e1      	b.n	801216c <__gethex+0x74>
 80121a8:	2e00      	cmp	r6, #0
 80121aa:	d1f7      	bne.n	801219c <__gethex+0xa4>
 80121ac:	782b      	ldrb	r3, [r5, #0]
 80121ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80121b2:	2b50      	cmp	r3, #80	; 0x50
 80121b4:	d13d      	bne.n	8012232 <__gethex+0x13a>
 80121b6:	786b      	ldrb	r3, [r5, #1]
 80121b8:	2b2b      	cmp	r3, #43	; 0x2b
 80121ba:	d02f      	beq.n	801221c <__gethex+0x124>
 80121bc:	2b2d      	cmp	r3, #45	; 0x2d
 80121be:	d031      	beq.n	8012224 <__gethex+0x12c>
 80121c0:	1c69      	adds	r1, r5, #1
 80121c2:	f04f 0b00 	mov.w	fp, #0
 80121c6:	7808      	ldrb	r0, [r1, #0]
 80121c8:	f7ff ff80 	bl	80120cc <__hexdig_fun>
 80121cc:	1e42      	subs	r2, r0, #1
 80121ce:	b2d2      	uxtb	r2, r2
 80121d0:	2a18      	cmp	r2, #24
 80121d2:	d82e      	bhi.n	8012232 <__gethex+0x13a>
 80121d4:	f1a0 0210 	sub.w	r2, r0, #16
 80121d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80121dc:	f7ff ff76 	bl	80120cc <__hexdig_fun>
 80121e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80121e4:	fa5f fc8c 	uxtb.w	ip, ip
 80121e8:	f1bc 0f18 	cmp.w	ip, #24
 80121ec:	d91d      	bls.n	801222a <__gethex+0x132>
 80121ee:	f1bb 0f00 	cmp.w	fp, #0
 80121f2:	d000      	beq.n	80121f6 <__gethex+0xfe>
 80121f4:	4252      	negs	r2, r2
 80121f6:	4416      	add	r6, r2
 80121f8:	f8ca 1000 	str.w	r1, [sl]
 80121fc:	b1dc      	cbz	r4, 8012236 <__gethex+0x13e>
 80121fe:	9b01      	ldr	r3, [sp, #4]
 8012200:	2b00      	cmp	r3, #0
 8012202:	bf14      	ite	ne
 8012204:	f04f 0800 	movne.w	r8, #0
 8012208:	f04f 0806 	moveq.w	r8, #6
 801220c:	4640      	mov	r0, r8
 801220e:	b005      	add	sp, #20
 8012210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012214:	4645      	mov	r5, r8
 8012216:	4626      	mov	r6, r4
 8012218:	2401      	movs	r4, #1
 801221a:	e7c7      	b.n	80121ac <__gethex+0xb4>
 801221c:	f04f 0b00 	mov.w	fp, #0
 8012220:	1ca9      	adds	r1, r5, #2
 8012222:	e7d0      	b.n	80121c6 <__gethex+0xce>
 8012224:	f04f 0b01 	mov.w	fp, #1
 8012228:	e7fa      	b.n	8012220 <__gethex+0x128>
 801222a:	230a      	movs	r3, #10
 801222c:	fb03 0002 	mla	r0, r3, r2, r0
 8012230:	e7d0      	b.n	80121d4 <__gethex+0xdc>
 8012232:	4629      	mov	r1, r5
 8012234:	e7e0      	b.n	80121f8 <__gethex+0x100>
 8012236:	eba5 0308 	sub.w	r3, r5, r8
 801223a:	3b01      	subs	r3, #1
 801223c:	4621      	mov	r1, r4
 801223e:	2b07      	cmp	r3, #7
 8012240:	dc0a      	bgt.n	8012258 <__gethex+0x160>
 8012242:	4648      	mov	r0, r9
 8012244:	f7fe f926 	bl	8010494 <_Balloc>
 8012248:	4604      	mov	r4, r0
 801224a:	b940      	cbnz	r0, 801225e <__gethex+0x166>
 801224c:	4b61      	ldr	r3, [pc, #388]	; (80123d4 <__gethex+0x2dc>)
 801224e:	4602      	mov	r2, r0
 8012250:	21e4      	movs	r1, #228	; 0xe4
 8012252:	4861      	ldr	r0, [pc, #388]	; (80123d8 <__gethex+0x2e0>)
 8012254:	f7ff feb4 	bl	8011fc0 <__assert_func>
 8012258:	3101      	adds	r1, #1
 801225a:	105b      	asrs	r3, r3, #1
 801225c:	e7ef      	b.n	801223e <__gethex+0x146>
 801225e:	f100 0a14 	add.w	sl, r0, #20
 8012262:	2300      	movs	r3, #0
 8012264:	495a      	ldr	r1, [pc, #360]	; (80123d0 <__gethex+0x2d8>)
 8012266:	f8cd a004 	str.w	sl, [sp, #4]
 801226a:	469b      	mov	fp, r3
 801226c:	45a8      	cmp	r8, r5
 801226e:	d342      	bcc.n	80122f6 <__gethex+0x1fe>
 8012270:	9801      	ldr	r0, [sp, #4]
 8012272:	f840 bb04 	str.w	fp, [r0], #4
 8012276:	eba0 000a 	sub.w	r0, r0, sl
 801227a:	1080      	asrs	r0, r0, #2
 801227c:	6120      	str	r0, [r4, #16]
 801227e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8012282:	4658      	mov	r0, fp
 8012284:	f7fe f9f8 	bl	8010678 <__hi0bits>
 8012288:	683d      	ldr	r5, [r7, #0]
 801228a:	eba8 0000 	sub.w	r0, r8, r0
 801228e:	42a8      	cmp	r0, r5
 8012290:	dd59      	ble.n	8012346 <__gethex+0x24e>
 8012292:	eba0 0805 	sub.w	r8, r0, r5
 8012296:	4641      	mov	r1, r8
 8012298:	4620      	mov	r0, r4
 801229a:	f7fe fd87 	bl	8010dac <__any_on>
 801229e:	4683      	mov	fp, r0
 80122a0:	b1b8      	cbz	r0, 80122d2 <__gethex+0x1da>
 80122a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80122a6:	1159      	asrs	r1, r3, #5
 80122a8:	f003 021f 	and.w	r2, r3, #31
 80122ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80122b0:	f04f 0b01 	mov.w	fp, #1
 80122b4:	fa0b f202 	lsl.w	r2, fp, r2
 80122b8:	420a      	tst	r2, r1
 80122ba:	d00a      	beq.n	80122d2 <__gethex+0x1da>
 80122bc:	455b      	cmp	r3, fp
 80122be:	dd06      	ble.n	80122ce <__gethex+0x1d6>
 80122c0:	f1a8 0102 	sub.w	r1, r8, #2
 80122c4:	4620      	mov	r0, r4
 80122c6:	f7fe fd71 	bl	8010dac <__any_on>
 80122ca:	2800      	cmp	r0, #0
 80122cc:	d138      	bne.n	8012340 <__gethex+0x248>
 80122ce:	f04f 0b02 	mov.w	fp, #2
 80122d2:	4641      	mov	r1, r8
 80122d4:	4620      	mov	r0, r4
 80122d6:	f7ff fea7 	bl	8012028 <rshift>
 80122da:	4446      	add	r6, r8
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	42b3      	cmp	r3, r6
 80122e0:	da41      	bge.n	8012366 <__gethex+0x26e>
 80122e2:	4621      	mov	r1, r4
 80122e4:	4648      	mov	r0, r9
 80122e6:	f7fe f915 	bl	8010514 <_Bfree>
 80122ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80122ec:	2300      	movs	r3, #0
 80122ee:	6013      	str	r3, [r2, #0]
 80122f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80122f4:	e78a      	b.n	801220c <__gethex+0x114>
 80122f6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80122fa:	2a2e      	cmp	r2, #46	; 0x2e
 80122fc:	d014      	beq.n	8012328 <__gethex+0x230>
 80122fe:	2b20      	cmp	r3, #32
 8012300:	d106      	bne.n	8012310 <__gethex+0x218>
 8012302:	9b01      	ldr	r3, [sp, #4]
 8012304:	f843 bb04 	str.w	fp, [r3], #4
 8012308:	f04f 0b00 	mov.w	fp, #0
 801230c:	9301      	str	r3, [sp, #4]
 801230e:	465b      	mov	r3, fp
 8012310:	7828      	ldrb	r0, [r5, #0]
 8012312:	9303      	str	r3, [sp, #12]
 8012314:	f7ff feda 	bl	80120cc <__hexdig_fun>
 8012318:	9b03      	ldr	r3, [sp, #12]
 801231a:	f000 000f 	and.w	r0, r0, #15
 801231e:	4098      	lsls	r0, r3
 8012320:	ea4b 0b00 	orr.w	fp, fp, r0
 8012324:	3304      	adds	r3, #4
 8012326:	e7a1      	b.n	801226c <__gethex+0x174>
 8012328:	45a8      	cmp	r8, r5
 801232a:	d8e8      	bhi.n	80122fe <__gethex+0x206>
 801232c:	2201      	movs	r2, #1
 801232e:	4628      	mov	r0, r5
 8012330:	9303      	str	r3, [sp, #12]
 8012332:	f7ff fe1b 	bl	8011f6c <strncmp>
 8012336:	4926      	ldr	r1, [pc, #152]	; (80123d0 <__gethex+0x2d8>)
 8012338:	9b03      	ldr	r3, [sp, #12]
 801233a:	2800      	cmp	r0, #0
 801233c:	d1df      	bne.n	80122fe <__gethex+0x206>
 801233e:	e795      	b.n	801226c <__gethex+0x174>
 8012340:	f04f 0b03 	mov.w	fp, #3
 8012344:	e7c5      	b.n	80122d2 <__gethex+0x1da>
 8012346:	da0b      	bge.n	8012360 <__gethex+0x268>
 8012348:	eba5 0800 	sub.w	r8, r5, r0
 801234c:	4621      	mov	r1, r4
 801234e:	4642      	mov	r2, r8
 8012350:	4648      	mov	r0, r9
 8012352:	f7fe faf9 	bl	8010948 <__lshift>
 8012356:	eba6 0608 	sub.w	r6, r6, r8
 801235a:	4604      	mov	r4, r0
 801235c:	f100 0a14 	add.w	sl, r0, #20
 8012360:	f04f 0b00 	mov.w	fp, #0
 8012364:	e7ba      	b.n	80122dc <__gethex+0x1e4>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	42b3      	cmp	r3, r6
 801236a:	dd73      	ble.n	8012454 <__gethex+0x35c>
 801236c:	1b9e      	subs	r6, r3, r6
 801236e:	42b5      	cmp	r5, r6
 8012370:	dc34      	bgt.n	80123dc <__gethex+0x2e4>
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	2b02      	cmp	r3, #2
 8012376:	d023      	beq.n	80123c0 <__gethex+0x2c8>
 8012378:	2b03      	cmp	r3, #3
 801237a:	d025      	beq.n	80123c8 <__gethex+0x2d0>
 801237c:	2b01      	cmp	r3, #1
 801237e:	d115      	bne.n	80123ac <__gethex+0x2b4>
 8012380:	42b5      	cmp	r5, r6
 8012382:	d113      	bne.n	80123ac <__gethex+0x2b4>
 8012384:	2d01      	cmp	r5, #1
 8012386:	d10b      	bne.n	80123a0 <__gethex+0x2a8>
 8012388:	9a02      	ldr	r2, [sp, #8]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6013      	str	r3, [r2, #0]
 801238e:	2301      	movs	r3, #1
 8012390:	6123      	str	r3, [r4, #16]
 8012392:	f8ca 3000 	str.w	r3, [sl]
 8012396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012398:	f04f 0862 	mov.w	r8, #98	; 0x62
 801239c:	601c      	str	r4, [r3, #0]
 801239e:	e735      	b.n	801220c <__gethex+0x114>
 80123a0:	1e69      	subs	r1, r5, #1
 80123a2:	4620      	mov	r0, r4
 80123a4:	f7fe fd02 	bl	8010dac <__any_on>
 80123a8:	2800      	cmp	r0, #0
 80123aa:	d1ed      	bne.n	8012388 <__gethex+0x290>
 80123ac:	4621      	mov	r1, r4
 80123ae:	4648      	mov	r0, r9
 80123b0:	f7fe f8b0 	bl	8010514 <_Bfree>
 80123b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80123b6:	2300      	movs	r3, #0
 80123b8:	6013      	str	r3, [r2, #0]
 80123ba:	f04f 0850 	mov.w	r8, #80	; 0x50
 80123be:	e725      	b.n	801220c <__gethex+0x114>
 80123c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d1f2      	bne.n	80123ac <__gethex+0x2b4>
 80123c6:	e7df      	b.n	8012388 <__gethex+0x290>
 80123c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d1dc      	bne.n	8012388 <__gethex+0x290>
 80123ce:	e7ed      	b.n	80123ac <__gethex+0x2b4>
 80123d0:	0801335c 	.word	0x0801335c
 80123d4:	080131f5 	.word	0x080131f5
 80123d8:	08013506 	.word	0x08013506
 80123dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80123e0:	f1bb 0f00 	cmp.w	fp, #0
 80123e4:	d133      	bne.n	801244e <__gethex+0x356>
 80123e6:	f1b8 0f00 	cmp.w	r8, #0
 80123ea:	d004      	beq.n	80123f6 <__gethex+0x2fe>
 80123ec:	4641      	mov	r1, r8
 80123ee:	4620      	mov	r0, r4
 80123f0:	f7fe fcdc 	bl	8010dac <__any_on>
 80123f4:	4683      	mov	fp, r0
 80123f6:	ea4f 1268 	mov.w	r2, r8, asr #5
 80123fa:	2301      	movs	r3, #1
 80123fc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8012400:	f008 081f 	and.w	r8, r8, #31
 8012404:	fa03 f308 	lsl.w	r3, r3, r8
 8012408:	4213      	tst	r3, r2
 801240a:	4631      	mov	r1, r6
 801240c:	4620      	mov	r0, r4
 801240e:	bf18      	it	ne
 8012410:	f04b 0b02 	orrne.w	fp, fp, #2
 8012414:	1bad      	subs	r5, r5, r6
 8012416:	f7ff fe07 	bl	8012028 <rshift>
 801241a:	687e      	ldr	r6, [r7, #4]
 801241c:	f04f 0802 	mov.w	r8, #2
 8012420:	f1bb 0f00 	cmp.w	fp, #0
 8012424:	d04a      	beq.n	80124bc <__gethex+0x3c4>
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	2b02      	cmp	r3, #2
 801242a:	d016      	beq.n	801245a <__gethex+0x362>
 801242c:	2b03      	cmp	r3, #3
 801242e:	d018      	beq.n	8012462 <__gethex+0x36a>
 8012430:	2b01      	cmp	r3, #1
 8012432:	d109      	bne.n	8012448 <__gethex+0x350>
 8012434:	f01b 0f02 	tst.w	fp, #2
 8012438:	d006      	beq.n	8012448 <__gethex+0x350>
 801243a:	f8da 3000 	ldr.w	r3, [sl]
 801243e:	ea4b 0b03 	orr.w	fp, fp, r3
 8012442:	f01b 0f01 	tst.w	fp, #1
 8012446:	d10f      	bne.n	8012468 <__gethex+0x370>
 8012448:	f048 0810 	orr.w	r8, r8, #16
 801244c:	e036      	b.n	80124bc <__gethex+0x3c4>
 801244e:	f04f 0b01 	mov.w	fp, #1
 8012452:	e7d0      	b.n	80123f6 <__gethex+0x2fe>
 8012454:	f04f 0801 	mov.w	r8, #1
 8012458:	e7e2      	b.n	8012420 <__gethex+0x328>
 801245a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801245c:	f1c3 0301 	rsb	r3, r3, #1
 8012460:	930f      	str	r3, [sp, #60]	; 0x3c
 8012462:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012464:	2b00      	cmp	r3, #0
 8012466:	d0ef      	beq.n	8012448 <__gethex+0x350>
 8012468:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801246c:	f104 0214 	add.w	r2, r4, #20
 8012470:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8012474:	9301      	str	r3, [sp, #4]
 8012476:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801247a:	2300      	movs	r3, #0
 801247c:	4694      	mov	ip, r2
 801247e:	f852 1b04 	ldr.w	r1, [r2], #4
 8012482:	f1b1 3fff 	cmp.w	r1, #4294967295
 8012486:	d01e      	beq.n	80124c6 <__gethex+0x3ce>
 8012488:	3101      	adds	r1, #1
 801248a:	f8cc 1000 	str.w	r1, [ip]
 801248e:	f1b8 0f02 	cmp.w	r8, #2
 8012492:	f104 0214 	add.w	r2, r4, #20
 8012496:	d13d      	bne.n	8012514 <__gethex+0x41c>
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	3b01      	subs	r3, #1
 801249c:	42ab      	cmp	r3, r5
 801249e:	d10b      	bne.n	80124b8 <__gethex+0x3c0>
 80124a0:	1169      	asrs	r1, r5, #5
 80124a2:	2301      	movs	r3, #1
 80124a4:	f005 051f 	and.w	r5, r5, #31
 80124a8:	fa03 f505 	lsl.w	r5, r3, r5
 80124ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124b0:	421d      	tst	r5, r3
 80124b2:	bf18      	it	ne
 80124b4:	f04f 0801 	movne.w	r8, #1
 80124b8:	f048 0820 	orr.w	r8, r8, #32
 80124bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124be:	601c      	str	r4, [r3, #0]
 80124c0:	9b02      	ldr	r3, [sp, #8]
 80124c2:	601e      	str	r6, [r3, #0]
 80124c4:	e6a2      	b.n	801220c <__gethex+0x114>
 80124c6:	4290      	cmp	r0, r2
 80124c8:	f842 3c04 	str.w	r3, [r2, #-4]
 80124cc:	d8d6      	bhi.n	801247c <__gethex+0x384>
 80124ce:	68a2      	ldr	r2, [r4, #8]
 80124d0:	4593      	cmp	fp, r2
 80124d2:	db17      	blt.n	8012504 <__gethex+0x40c>
 80124d4:	6861      	ldr	r1, [r4, #4]
 80124d6:	4648      	mov	r0, r9
 80124d8:	3101      	adds	r1, #1
 80124da:	f7fd ffdb 	bl	8010494 <_Balloc>
 80124de:	4682      	mov	sl, r0
 80124e0:	b918      	cbnz	r0, 80124ea <__gethex+0x3f2>
 80124e2:	4b1b      	ldr	r3, [pc, #108]	; (8012550 <__gethex+0x458>)
 80124e4:	4602      	mov	r2, r0
 80124e6:	2184      	movs	r1, #132	; 0x84
 80124e8:	e6b3      	b.n	8012252 <__gethex+0x15a>
 80124ea:	6922      	ldr	r2, [r4, #16]
 80124ec:	3202      	adds	r2, #2
 80124ee:	f104 010c 	add.w	r1, r4, #12
 80124f2:	0092      	lsls	r2, r2, #2
 80124f4:	300c      	adds	r0, #12
 80124f6:	f7fd f83c 	bl	800f572 <memcpy>
 80124fa:	4621      	mov	r1, r4
 80124fc:	4648      	mov	r0, r9
 80124fe:	f7fe f809 	bl	8010514 <_Bfree>
 8012502:	4654      	mov	r4, sl
 8012504:	6922      	ldr	r2, [r4, #16]
 8012506:	1c51      	adds	r1, r2, #1
 8012508:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801250c:	6121      	str	r1, [r4, #16]
 801250e:	2101      	movs	r1, #1
 8012510:	6151      	str	r1, [r2, #20]
 8012512:	e7bc      	b.n	801248e <__gethex+0x396>
 8012514:	6921      	ldr	r1, [r4, #16]
 8012516:	4559      	cmp	r1, fp
 8012518:	dd0b      	ble.n	8012532 <__gethex+0x43a>
 801251a:	2101      	movs	r1, #1
 801251c:	4620      	mov	r0, r4
 801251e:	f7ff fd83 	bl	8012028 <rshift>
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	3601      	adds	r6, #1
 8012526:	42b3      	cmp	r3, r6
 8012528:	f6ff aedb 	blt.w	80122e2 <__gethex+0x1ea>
 801252c:	f04f 0801 	mov.w	r8, #1
 8012530:	e7c2      	b.n	80124b8 <__gethex+0x3c0>
 8012532:	f015 051f 	ands.w	r5, r5, #31
 8012536:	d0f9      	beq.n	801252c <__gethex+0x434>
 8012538:	9b01      	ldr	r3, [sp, #4]
 801253a:	441a      	add	r2, r3
 801253c:	f1c5 0520 	rsb	r5, r5, #32
 8012540:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8012544:	f7fe f898 	bl	8010678 <__hi0bits>
 8012548:	42a8      	cmp	r0, r5
 801254a:	dbe6      	blt.n	801251a <__gethex+0x422>
 801254c:	e7ee      	b.n	801252c <__gethex+0x434>
 801254e:	bf00      	nop
 8012550:	080131f5 	.word	0x080131f5

08012554 <L_shift>:
 8012554:	f1c2 0208 	rsb	r2, r2, #8
 8012558:	0092      	lsls	r2, r2, #2
 801255a:	b570      	push	{r4, r5, r6, lr}
 801255c:	f1c2 0620 	rsb	r6, r2, #32
 8012560:	6843      	ldr	r3, [r0, #4]
 8012562:	6804      	ldr	r4, [r0, #0]
 8012564:	fa03 f506 	lsl.w	r5, r3, r6
 8012568:	432c      	orrs	r4, r5
 801256a:	40d3      	lsrs	r3, r2
 801256c:	6004      	str	r4, [r0, #0]
 801256e:	f840 3f04 	str.w	r3, [r0, #4]!
 8012572:	4288      	cmp	r0, r1
 8012574:	d3f4      	bcc.n	8012560 <L_shift+0xc>
 8012576:	bd70      	pop	{r4, r5, r6, pc}

08012578 <__match>:
 8012578:	b530      	push	{r4, r5, lr}
 801257a:	6803      	ldr	r3, [r0, #0]
 801257c:	3301      	adds	r3, #1
 801257e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012582:	b914      	cbnz	r4, 801258a <__match+0x12>
 8012584:	6003      	str	r3, [r0, #0]
 8012586:	2001      	movs	r0, #1
 8012588:	bd30      	pop	{r4, r5, pc}
 801258a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801258e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012592:	2d19      	cmp	r5, #25
 8012594:	bf98      	it	ls
 8012596:	3220      	addls	r2, #32
 8012598:	42a2      	cmp	r2, r4
 801259a:	d0f0      	beq.n	801257e <__match+0x6>
 801259c:	2000      	movs	r0, #0
 801259e:	e7f3      	b.n	8012588 <__match+0x10>

080125a0 <__hexnan>:
 80125a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a4:	680b      	ldr	r3, [r1, #0]
 80125a6:	6801      	ldr	r1, [r0, #0]
 80125a8:	115e      	asrs	r6, r3, #5
 80125aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80125ae:	f013 031f 	ands.w	r3, r3, #31
 80125b2:	b087      	sub	sp, #28
 80125b4:	bf18      	it	ne
 80125b6:	3604      	addne	r6, #4
 80125b8:	2500      	movs	r5, #0
 80125ba:	1f37      	subs	r7, r6, #4
 80125bc:	4682      	mov	sl, r0
 80125be:	4690      	mov	r8, r2
 80125c0:	9301      	str	r3, [sp, #4]
 80125c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80125c6:	46b9      	mov	r9, r7
 80125c8:	463c      	mov	r4, r7
 80125ca:	9502      	str	r5, [sp, #8]
 80125cc:	46ab      	mov	fp, r5
 80125ce:	784a      	ldrb	r2, [r1, #1]
 80125d0:	1c4b      	adds	r3, r1, #1
 80125d2:	9303      	str	r3, [sp, #12]
 80125d4:	b342      	cbz	r2, 8012628 <__hexnan+0x88>
 80125d6:	4610      	mov	r0, r2
 80125d8:	9105      	str	r1, [sp, #20]
 80125da:	9204      	str	r2, [sp, #16]
 80125dc:	f7ff fd76 	bl	80120cc <__hexdig_fun>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d14f      	bne.n	8012684 <__hexnan+0xe4>
 80125e4:	9a04      	ldr	r2, [sp, #16]
 80125e6:	9905      	ldr	r1, [sp, #20]
 80125e8:	2a20      	cmp	r2, #32
 80125ea:	d818      	bhi.n	801261e <__hexnan+0x7e>
 80125ec:	9b02      	ldr	r3, [sp, #8]
 80125ee:	459b      	cmp	fp, r3
 80125f0:	dd13      	ble.n	801261a <__hexnan+0x7a>
 80125f2:	454c      	cmp	r4, r9
 80125f4:	d206      	bcs.n	8012604 <__hexnan+0x64>
 80125f6:	2d07      	cmp	r5, #7
 80125f8:	dc04      	bgt.n	8012604 <__hexnan+0x64>
 80125fa:	462a      	mov	r2, r5
 80125fc:	4649      	mov	r1, r9
 80125fe:	4620      	mov	r0, r4
 8012600:	f7ff ffa8 	bl	8012554 <L_shift>
 8012604:	4544      	cmp	r4, r8
 8012606:	d950      	bls.n	80126aa <__hexnan+0x10a>
 8012608:	2300      	movs	r3, #0
 801260a:	f1a4 0904 	sub.w	r9, r4, #4
 801260e:	f844 3c04 	str.w	r3, [r4, #-4]
 8012612:	f8cd b008 	str.w	fp, [sp, #8]
 8012616:	464c      	mov	r4, r9
 8012618:	461d      	mov	r5, r3
 801261a:	9903      	ldr	r1, [sp, #12]
 801261c:	e7d7      	b.n	80125ce <__hexnan+0x2e>
 801261e:	2a29      	cmp	r2, #41	; 0x29
 8012620:	d155      	bne.n	80126ce <__hexnan+0x12e>
 8012622:	3102      	adds	r1, #2
 8012624:	f8ca 1000 	str.w	r1, [sl]
 8012628:	f1bb 0f00 	cmp.w	fp, #0
 801262c:	d04f      	beq.n	80126ce <__hexnan+0x12e>
 801262e:	454c      	cmp	r4, r9
 8012630:	d206      	bcs.n	8012640 <__hexnan+0xa0>
 8012632:	2d07      	cmp	r5, #7
 8012634:	dc04      	bgt.n	8012640 <__hexnan+0xa0>
 8012636:	462a      	mov	r2, r5
 8012638:	4649      	mov	r1, r9
 801263a:	4620      	mov	r0, r4
 801263c:	f7ff ff8a 	bl	8012554 <L_shift>
 8012640:	4544      	cmp	r4, r8
 8012642:	d934      	bls.n	80126ae <__hexnan+0x10e>
 8012644:	f1a8 0204 	sub.w	r2, r8, #4
 8012648:	4623      	mov	r3, r4
 801264a:	f853 1b04 	ldr.w	r1, [r3], #4
 801264e:	f842 1f04 	str.w	r1, [r2, #4]!
 8012652:	429f      	cmp	r7, r3
 8012654:	d2f9      	bcs.n	801264a <__hexnan+0xaa>
 8012656:	1b3b      	subs	r3, r7, r4
 8012658:	f023 0303 	bic.w	r3, r3, #3
 801265c:	3304      	adds	r3, #4
 801265e:	3e03      	subs	r6, #3
 8012660:	3401      	adds	r4, #1
 8012662:	42a6      	cmp	r6, r4
 8012664:	bf38      	it	cc
 8012666:	2304      	movcc	r3, #4
 8012668:	4443      	add	r3, r8
 801266a:	2200      	movs	r2, #0
 801266c:	f843 2b04 	str.w	r2, [r3], #4
 8012670:	429f      	cmp	r7, r3
 8012672:	d2fb      	bcs.n	801266c <__hexnan+0xcc>
 8012674:	683b      	ldr	r3, [r7, #0]
 8012676:	b91b      	cbnz	r3, 8012680 <__hexnan+0xe0>
 8012678:	4547      	cmp	r7, r8
 801267a:	d126      	bne.n	80126ca <__hexnan+0x12a>
 801267c:	2301      	movs	r3, #1
 801267e:	603b      	str	r3, [r7, #0]
 8012680:	2005      	movs	r0, #5
 8012682:	e025      	b.n	80126d0 <__hexnan+0x130>
 8012684:	3501      	adds	r5, #1
 8012686:	2d08      	cmp	r5, #8
 8012688:	f10b 0b01 	add.w	fp, fp, #1
 801268c:	dd06      	ble.n	801269c <__hexnan+0xfc>
 801268e:	4544      	cmp	r4, r8
 8012690:	d9c3      	bls.n	801261a <__hexnan+0x7a>
 8012692:	2300      	movs	r3, #0
 8012694:	f844 3c04 	str.w	r3, [r4, #-4]
 8012698:	2501      	movs	r5, #1
 801269a:	3c04      	subs	r4, #4
 801269c:	6822      	ldr	r2, [r4, #0]
 801269e:	f000 000f 	and.w	r0, r0, #15
 80126a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80126a6:	6020      	str	r0, [r4, #0]
 80126a8:	e7b7      	b.n	801261a <__hexnan+0x7a>
 80126aa:	2508      	movs	r5, #8
 80126ac:	e7b5      	b.n	801261a <__hexnan+0x7a>
 80126ae:	9b01      	ldr	r3, [sp, #4]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d0df      	beq.n	8012674 <__hexnan+0xd4>
 80126b4:	f1c3 0320 	rsb	r3, r3, #32
 80126b8:	f04f 32ff 	mov.w	r2, #4294967295
 80126bc:	40da      	lsrs	r2, r3
 80126be:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80126c2:	4013      	ands	r3, r2
 80126c4:	f846 3c04 	str.w	r3, [r6, #-4]
 80126c8:	e7d4      	b.n	8012674 <__hexnan+0xd4>
 80126ca:	3f04      	subs	r7, #4
 80126cc:	e7d2      	b.n	8012674 <__hexnan+0xd4>
 80126ce:	2004      	movs	r0, #4
 80126d0:	b007      	add	sp, #28
 80126d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080126d6 <__ascii_mbtowc>:
 80126d6:	b082      	sub	sp, #8
 80126d8:	b901      	cbnz	r1, 80126dc <__ascii_mbtowc+0x6>
 80126da:	a901      	add	r1, sp, #4
 80126dc:	b142      	cbz	r2, 80126f0 <__ascii_mbtowc+0x1a>
 80126de:	b14b      	cbz	r3, 80126f4 <__ascii_mbtowc+0x1e>
 80126e0:	7813      	ldrb	r3, [r2, #0]
 80126e2:	600b      	str	r3, [r1, #0]
 80126e4:	7812      	ldrb	r2, [r2, #0]
 80126e6:	1e10      	subs	r0, r2, #0
 80126e8:	bf18      	it	ne
 80126ea:	2001      	movne	r0, #1
 80126ec:	b002      	add	sp, #8
 80126ee:	4770      	bx	lr
 80126f0:	4610      	mov	r0, r2
 80126f2:	e7fb      	b.n	80126ec <__ascii_mbtowc+0x16>
 80126f4:	f06f 0001 	mvn.w	r0, #1
 80126f8:	e7f8      	b.n	80126ec <__ascii_mbtowc+0x16>

080126fa <__ascii_wctomb>:
 80126fa:	b149      	cbz	r1, 8012710 <__ascii_wctomb+0x16>
 80126fc:	2aff      	cmp	r2, #255	; 0xff
 80126fe:	bf85      	ittet	hi
 8012700:	238a      	movhi	r3, #138	; 0x8a
 8012702:	6003      	strhi	r3, [r0, #0]
 8012704:	700a      	strbls	r2, [r1, #0]
 8012706:	f04f 30ff 	movhi.w	r0, #4294967295
 801270a:	bf98      	it	ls
 801270c:	2001      	movls	r0, #1
 801270e:	4770      	bx	lr
 8012710:	4608      	mov	r0, r1
 8012712:	4770      	bx	lr

08012714 <fiprintf>:
 8012714:	b40e      	push	{r1, r2, r3}
 8012716:	b503      	push	{r0, r1, lr}
 8012718:	4601      	mov	r1, r0
 801271a:	ab03      	add	r3, sp, #12
 801271c:	4805      	ldr	r0, [pc, #20]	; (8012734 <fiprintf+0x20>)
 801271e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012722:	6800      	ldr	r0, [r0, #0]
 8012724:	9301      	str	r3, [sp, #4]
 8012726:	f000 f837 	bl	8012798 <_vfiprintf_r>
 801272a:	b002      	add	sp, #8
 801272c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012730:	b003      	add	sp, #12
 8012732:	4770      	bx	lr
 8012734:	20000078 	.word	0x20000078

08012738 <abort>:
 8012738:	b508      	push	{r3, lr}
 801273a:	2006      	movs	r0, #6
 801273c:	f000 fa04 	bl	8012b48 <raise>
 8012740:	2001      	movs	r0, #1
 8012742:	f7f6 f9ed 	bl	8008b20 <_exit>

08012746 <__sfputc_r>:
 8012746:	6893      	ldr	r3, [r2, #8]
 8012748:	3b01      	subs	r3, #1
 801274a:	2b00      	cmp	r3, #0
 801274c:	b410      	push	{r4}
 801274e:	6093      	str	r3, [r2, #8]
 8012750:	da08      	bge.n	8012764 <__sfputc_r+0x1e>
 8012752:	6994      	ldr	r4, [r2, #24]
 8012754:	42a3      	cmp	r3, r4
 8012756:	db01      	blt.n	801275c <__sfputc_r+0x16>
 8012758:	290a      	cmp	r1, #10
 801275a:	d103      	bne.n	8012764 <__sfputc_r+0x1e>
 801275c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012760:	f000 b934 	b.w	80129cc <__swbuf_r>
 8012764:	6813      	ldr	r3, [r2, #0]
 8012766:	1c58      	adds	r0, r3, #1
 8012768:	6010      	str	r0, [r2, #0]
 801276a:	7019      	strb	r1, [r3, #0]
 801276c:	4608      	mov	r0, r1
 801276e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012772:	4770      	bx	lr

08012774 <__sfputs_r>:
 8012774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012776:	4606      	mov	r6, r0
 8012778:	460f      	mov	r7, r1
 801277a:	4614      	mov	r4, r2
 801277c:	18d5      	adds	r5, r2, r3
 801277e:	42ac      	cmp	r4, r5
 8012780:	d101      	bne.n	8012786 <__sfputs_r+0x12>
 8012782:	2000      	movs	r0, #0
 8012784:	e007      	b.n	8012796 <__sfputs_r+0x22>
 8012786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801278a:	463a      	mov	r2, r7
 801278c:	4630      	mov	r0, r6
 801278e:	f7ff ffda 	bl	8012746 <__sfputc_r>
 8012792:	1c43      	adds	r3, r0, #1
 8012794:	d1f3      	bne.n	801277e <__sfputs_r+0xa>
 8012796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012798 <_vfiprintf_r>:
 8012798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801279c:	460d      	mov	r5, r1
 801279e:	b09d      	sub	sp, #116	; 0x74
 80127a0:	4614      	mov	r4, r2
 80127a2:	4698      	mov	r8, r3
 80127a4:	4606      	mov	r6, r0
 80127a6:	b118      	cbz	r0, 80127b0 <_vfiprintf_r+0x18>
 80127a8:	6a03      	ldr	r3, [r0, #32]
 80127aa:	b90b      	cbnz	r3, 80127b0 <_vfiprintf_r+0x18>
 80127ac:	f7fc fdc8 	bl	800f340 <__sinit>
 80127b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127b2:	07d9      	lsls	r1, r3, #31
 80127b4:	d405      	bmi.n	80127c2 <_vfiprintf_r+0x2a>
 80127b6:	89ab      	ldrh	r3, [r5, #12]
 80127b8:	059a      	lsls	r2, r3, #22
 80127ba:	d402      	bmi.n	80127c2 <_vfiprintf_r+0x2a>
 80127bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127be:	f7fc fed6 	bl	800f56e <__retarget_lock_acquire_recursive>
 80127c2:	89ab      	ldrh	r3, [r5, #12]
 80127c4:	071b      	lsls	r3, r3, #28
 80127c6:	d501      	bpl.n	80127cc <_vfiprintf_r+0x34>
 80127c8:	692b      	ldr	r3, [r5, #16]
 80127ca:	b99b      	cbnz	r3, 80127f4 <_vfiprintf_r+0x5c>
 80127cc:	4629      	mov	r1, r5
 80127ce:	4630      	mov	r0, r6
 80127d0:	f000 f93a 	bl	8012a48 <__swsetup_r>
 80127d4:	b170      	cbz	r0, 80127f4 <_vfiprintf_r+0x5c>
 80127d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80127d8:	07dc      	lsls	r4, r3, #31
 80127da:	d504      	bpl.n	80127e6 <_vfiprintf_r+0x4e>
 80127dc:	f04f 30ff 	mov.w	r0, #4294967295
 80127e0:	b01d      	add	sp, #116	; 0x74
 80127e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e6:	89ab      	ldrh	r3, [r5, #12]
 80127e8:	0598      	lsls	r0, r3, #22
 80127ea:	d4f7      	bmi.n	80127dc <_vfiprintf_r+0x44>
 80127ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80127ee:	f7fc febf 	bl	800f570 <__retarget_lock_release_recursive>
 80127f2:	e7f3      	b.n	80127dc <_vfiprintf_r+0x44>
 80127f4:	2300      	movs	r3, #0
 80127f6:	9309      	str	r3, [sp, #36]	; 0x24
 80127f8:	2320      	movs	r3, #32
 80127fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80127fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8012802:	2330      	movs	r3, #48	; 0x30
 8012804:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80129b8 <_vfiprintf_r+0x220>
 8012808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801280c:	f04f 0901 	mov.w	r9, #1
 8012810:	4623      	mov	r3, r4
 8012812:	469a      	mov	sl, r3
 8012814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012818:	b10a      	cbz	r2, 801281e <_vfiprintf_r+0x86>
 801281a:	2a25      	cmp	r2, #37	; 0x25
 801281c:	d1f9      	bne.n	8012812 <_vfiprintf_r+0x7a>
 801281e:	ebba 0b04 	subs.w	fp, sl, r4
 8012822:	d00b      	beq.n	801283c <_vfiprintf_r+0xa4>
 8012824:	465b      	mov	r3, fp
 8012826:	4622      	mov	r2, r4
 8012828:	4629      	mov	r1, r5
 801282a:	4630      	mov	r0, r6
 801282c:	f7ff ffa2 	bl	8012774 <__sfputs_r>
 8012830:	3001      	adds	r0, #1
 8012832:	f000 80a9 	beq.w	8012988 <_vfiprintf_r+0x1f0>
 8012836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012838:	445a      	add	r2, fp
 801283a:	9209      	str	r2, [sp, #36]	; 0x24
 801283c:	f89a 3000 	ldrb.w	r3, [sl]
 8012840:	2b00      	cmp	r3, #0
 8012842:	f000 80a1 	beq.w	8012988 <_vfiprintf_r+0x1f0>
 8012846:	2300      	movs	r3, #0
 8012848:	f04f 32ff 	mov.w	r2, #4294967295
 801284c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012850:	f10a 0a01 	add.w	sl, sl, #1
 8012854:	9304      	str	r3, [sp, #16]
 8012856:	9307      	str	r3, [sp, #28]
 8012858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801285c:	931a      	str	r3, [sp, #104]	; 0x68
 801285e:	4654      	mov	r4, sl
 8012860:	2205      	movs	r2, #5
 8012862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012866:	4854      	ldr	r0, [pc, #336]	; (80129b8 <_vfiprintf_r+0x220>)
 8012868:	f7ed fcd2 	bl	8000210 <memchr>
 801286c:	9a04      	ldr	r2, [sp, #16]
 801286e:	b9d8      	cbnz	r0, 80128a8 <_vfiprintf_r+0x110>
 8012870:	06d1      	lsls	r1, r2, #27
 8012872:	bf44      	itt	mi
 8012874:	2320      	movmi	r3, #32
 8012876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801287a:	0713      	lsls	r3, r2, #28
 801287c:	bf44      	itt	mi
 801287e:	232b      	movmi	r3, #43	; 0x2b
 8012880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012884:	f89a 3000 	ldrb.w	r3, [sl]
 8012888:	2b2a      	cmp	r3, #42	; 0x2a
 801288a:	d015      	beq.n	80128b8 <_vfiprintf_r+0x120>
 801288c:	9a07      	ldr	r2, [sp, #28]
 801288e:	4654      	mov	r4, sl
 8012890:	2000      	movs	r0, #0
 8012892:	f04f 0c0a 	mov.w	ip, #10
 8012896:	4621      	mov	r1, r4
 8012898:	f811 3b01 	ldrb.w	r3, [r1], #1
 801289c:	3b30      	subs	r3, #48	; 0x30
 801289e:	2b09      	cmp	r3, #9
 80128a0:	d94d      	bls.n	801293e <_vfiprintf_r+0x1a6>
 80128a2:	b1b0      	cbz	r0, 80128d2 <_vfiprintf_r+0x13a>
 80128a4:	9207      	str	r2, [sp, #28]
 80128a6:	e014      	b.n	80128d2 <_vfiprintf_r+0x13a>
 80128a8:	eba0 0308 	sub.w	r3, r0, r8
 80128ac:	fa09 f303 	lsl.w	r3, r9, r3
 80128b0:	4313      	orrs	r3, r2
 80128b2:	9304      	str	r3, [sp, #16]
 80128b4:	46a2      	mov	sl, r4
 80128b6:	e7d2      	b.n	801285e <_vfiprintf_r+0xc6>
 80128b8:	9b03      	ldr	r3, [sp, #12]
 80128ba:	1d19      	adds	r1, r3, #4
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	9103      	str	r1, [sp, #12]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	bfbb      	ittet	lt
 80128c4:	425b      	neglt	r3, r3
 80128c6:	f042 0202 	orrlt.w	r2, r2, #2
 80128ca:	9307      	strge	r3, [sp, #28]
 80128cc:	9307      	strlt	r3, [sp, #28]
 80128ce:	bfb8      	it	lt
 80128d0:	9204      	strlt	r2, [sp, #16]
 80128d2:	7823      	ldrb	r3, [r4, #0]
 80128d4:	2b2e      	cmp	r3, #46	; 0x2e
 80128d6:	d10c      	bne.n	80128f2 <_vfiprintf_r+0x15a>
 80128d8:	7863      	ldrb	r3, [r4, #1]
 80128da:	2b2a      	cmp	r3, #42	; 0x2a
 80128dc:	d134      	bne.n	8012948 <_vfiprintf_r+0x1b0>
 80128de:	9b03      	ldr	r3, [sp, #12]
 80128e0:	1d1a      	adds	r2, r3, #4
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	9203      	str	r2, [sp, #12]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	bfb8      	it	lt
 80128ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80128ee:	3402      	adds	r4, #2
 80128f0:	9305      	str	r3, [sp, #20]
 80128f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80129c8 <_vfiprintf_r+0x230>
 80128f6:	7821      	ldrb	r1, [r4, #0]
 80128f8:	2203      	movs	r2, #3
 80128fa:	4650      	mov	r0, sl
 80128fc:	f7ed fc88 	bl	8000210 <memchr>
 8012900:	b138      	cbz	r0, 8012912 <_vfiprintf_r+0x17a>
 8012902:	9b04      	ldr	r3, [sp, #16]
 8012904:	eba0 000a 	sub.w	r0, r0, sl
 8012908:	2240      	movs	r2, #64	; 0x40
 801290a:	4082      	lsls	r2, r0
 801290c:	4313      	orrs	r3, r2
 801290e:	3401      	adds	r4, #1
 8012910:	9304      	str	r3, [sp, #16]
 8012912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012916:	4829      	ldr	r0, [pc, #164]	; (80129bc <_vfiprintf_r+0x224>)
 8012918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801291c:	2206      	movs	r2, #6
 801291e:	f7ed fc77 	bl	8000210 <memchr>
 8012922:	2800      	cmp	r0, #0
 8012924:	d03f      	beq.n	80129a6 <_vfiprintf_r+0x20e>
 8012926:	4b26      	ldr	r3, [pc, #152]	; (80129c0 <_vfiprintf_r+0x228>)
 8012928:	bb1b      	cbnz	r3, 8012972 <_vfiprintf_r+0x1da>
 801292a:	9b03      	ldr	r3, [sp, #12]
 801292c:	3307      	adds	r3, #7
 801292e:	f023 0307 	bic.w	r3, r3, #7
 8012932:	3308      	adds	r3, #8
 8012934:	9303      	str	r3, [sp, #12]
 8012936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012938:	443b      	add	r3, r7
 801293a:	9309      	str	r3, [sp, #36]	; 0x24
 801293c:	e768      	b.n	8012810 <_vfiprintf_r+0x78>
 801293e:	fb0c 3202 	mla	r2, ip, r2, r3
 8012942:	460c      	mov	r4, r1
 8012944:	2001      	movs	r0, #1
 8012946:	e7a6      	b.n	8012896 <_vfiprintf_r+0xfe>
 8012948:	2300      	movs	r3, #0
 801294a:	3401      	adds	r4, #1
 801294c:	9305      	str	r3, [sp, #20]
 801294e:	4619      	mov	r1, r3
 8012950:	f04f 0c0a 	mov.w	ip, #10
 8012954:	4620      	mov	r0, r4
 8012956:	f810 2b01 	ldrb.w	r2, [r0], #1
 801295a:	3a30      	subs	r2, #48	; 0x30
 801295c:	2a09      	cmp	r2, #9
 801295e:	d903      	bls.n	8012968 <_vfiprintf_r+0x1d0>
 8012960:	2b00      	cmp	r3, #0
 8012962:	d0c6      	beq.n	80128f2 <_vfiprintf_r+0x15a>
 8012964:	9105      	str	r1, [sp, #20]
 8012966:	e7c4      	b.n	80128f2 <_vfiprintf_r+0x15a>
 8012968:	fb0c 2101 	mla	r1, ip, r1, r2
 801296c:	4604      	mov	r4, r0
 801296e:	2301      	movs	r3, #1
 8012970:	e7f0      	b.n	8012954 <_vfiprintf_r+0x1bc>
 8012972:	ab03      	add	r3, sp, #12
 8012974:	9300      	str	r3, [sp, #0]
 8012976:	462a      	mov	r2, r5
 8012978:	4b12      	ldr	r3, [pc, #72]	; (80129c4 <_vfiprintf_r+0x22c>)
 801297a:	a904      	add	r1, sp, #16
 801297c:	4630      	mov	r0, r6
 801297e:	f7fb fe7d 	bl	800e67c <_printf_float>
 8012982:	4607      	mov	r7, r0
 8012984:	1c78      	adds	r0, r7, #1
 8012986:	d1d6      	bne.n	8012936 <_vfiprintf_r+0x19e>
 8012988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801298a:	07d9      	lsls	r1, r3, #31
 801298c:	d405      	bmi.n	801299a <_vfiprintf_r+0x202>
 801298e:	89ab      	ldrh	r3, [r5, #12]
 8012990:	059a      	lsls	r2, r3, #22
 8012992:	d402      	bmi.n	801299a <_vfiprintf_r+0x202>
 8012994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012996:	f7fc fdeb 	bl	800f570 <__retarget_lock_release_recursive>
 801299a:	89ab      	ldrh	r3, [r5, #12]
 801299c:	065b      	lsls	r3, r3, #25
 801299e:	f53f af1d 	bmi.w	80127dc <_vfiprintf_r+0x44>
 80129a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129a4:	e71c      	b.n	80127e0 <_vfiprintf_r+0x48>
 80129a6:	ab03      	add	r3, sp, #12
 80129a8:	9300      	str	r3, [sp, #0]
 80129aa:	462a      	mov	r2, r5
 80129ac:	4b05      	ldr	r3, [pc, #20]	; (80129c4 <_vfiprintf_r+0x22c>)
 80129ae:	a904      	add	r1, sp, #16
 80129b0:	4630      	mov	r0, r6
 80129b2:	f7fc f907 	bl	800ebc4 <_printf_i>
 80129b6:	e7e4      	b.n	8012982 <_vfiprintf_r+0x1ea>
 80129b8:	080134b1 	.word	0x080134b1
 80129bc:	080134bb 	.word	0x080134bb
 80129c0:	0800e67d 	.word	0x0800e67d
 80129c4:	08012775 	.word	0x08012775
 80129c8:	080134b7 	.word	0x080134b7

080129cc <__swbuf_r>:
 80129cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ce:	460e      	mov	r6, r1
 80129d0:	4614      	mov	r4, r2
 80129d2:	4605      	mov	r5, r0
 80129d4:	b118      	cbz	r0, 80129de <__swbuf_r+0x12>
 80129d6:	6a03      	ldr	r3, [r0, #32]
 80129d8:	b90b      	cbnz	r3, 80129de <__swbuf_r+0x12>
 80129da:	f7fc fcb1 	bl	800f340 <__sinit>
 80129de:	69a3      	ldr	r3, [r4, #24]
 80129e0:	60a3      	str	r3, [r4, #8]
 80129e2:	89a3      	ldrh	r3, [r4, #12]
 80129e4:	071a      	lsls	r2, r3, #28
 80129e6:	d525      	bpl.n	8012a34 <__swbuf_r+0x68>
 80129e8:	6923      	ldr	r3, [r4, #16]
 80129ea:	b31b      	cbz	r3, 8012a34 <__swbuf_r+0x68>
 80129ec:	6823      	ldr	r3, [r4, #0]
 80129ee:	6922      	ldr	r2, [r4, #16]
 80129f0:	1a98      	subs	r0, r3, r2
 80129f2:	6963      	ldr	r3, [r4, #20]
 80129f4:	b2f6      	uxtb	r6, r6
 80129f6:	4283      	cmp	r3, r0
 80129f8:	4637      	mov	r7, r6
 80129fa:	dc04      	bgt.n	8012a06 <__swbuf_r+0x3a>
 80129fc:	4621      	mov	r1, r4
 80129fe:	4628      	mov	r0, r5
 8012a00:	f7ff fa72 	bl	8011ee8 <_fflush_r>
 8012a04:	b9e0      	cbnz	r0, 8012a40 <__swbuf_r+0x74>
 8012a06:	68a3      	ldr	r3, [r4, #8]
 8012a08:	3b01      	subs	r3, #1
 8012a0a:	60a3      	str	r3, [r4, #8]
 8012a0c:	6823      	ldr	r3, [r4, #0]
 8012a0e:	1c5a      	adds	r2, r3, #1
 8012a10:	6022      	str	r2, [r4, #0]
 8012a12:	701e      	strb	r6, [r3, #0]
 8012a14:	6962      	ldr	r2, [r4, #20]
 8012a16:	1c43      	adds	r3, r0, #1
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d004      	beq.n	8012a26 <__swbuf_r+0x5a>
 8012a1c:	89a3      	ldrh	r3, [r4, #12]
 8012a1e:	07db      	lsls	r3, r3, #31
 8012a20:	d506      	bpl.n	8012a30 <__swbuf_r+0x64>
 8012a22:	2e0a      	cmp	r6, #10
 8012a24:	d104      	bne.n	8012a30 <__swbuf_r+0x64>
 8012a26:	4621      	mov	r1, r4
 8012a28:	4628      	mov	r0, r5
 8012a2a:	f7ff fa5d 	bl	8011ee8 <_fflush_r>
 8012a2e:	b938      	cbnz	r0, 8012a40 <__swbuf_r+0x74>
 8012a30:	4638      	mov	r0, r7
 8012a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a34:	4621      	mov	r1, r4
 8012a36:	4628      	mov	r0, r5
 8012a38:	f000 f806 	bl	8012a48 <__swsetup_r>
 8012a3c:	2800      	cmp	r0, #0
 8012a3e:	d0d5      	beq.n	80129ec <__swbuf_r+0x20>
 8012a40:	f04f 37ff 	mov.w	r7, #4294967295
 8012a44:	e7f4      	b.n	8012a30 <__swbuf_r+0x64>
	...

08012a48 <__swsetup_r>:
 8012a48:	b538      	push	{r3, r4, r5, lr}
 8012a4a:	4b2a      	ldr	r3, [pc, #168]	; (8012af4 <__swsetup_r+0xac>)
 8012a4c:	4605      	mov	r5, r0
 8012a4e:	6818      	ldr	r0, [r3, #0]
 8012a50:	460c      	mov	r4, r1
 8012a52:	b118      	cbz	r0, 8012a5c <__swsetup_r+0x14>
 8012a54:	6a03      	ldr	r3, [r0, #32]
 8012a56:	b90b      	cbnz	r3, 8012a5c <__swsetup_r+0x14>
 8012a58:	f7fc fc72 	bl	800f340 <__sinit>
 8012a5c:	89a3      	ldrh	r3, [r4, #12]
 8012a5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012a62:	0718      	lsls	r0, r3, #28
 8012a64:	d422      	bmi.n	8012aac <__swsetup_r+0x64>
 8012a66:	06d9      	lsls	r1, r3, #27
 8012a68:	d407      	bmi.n	8012a7a <__swsetup_r+0x32>
 8012a6a:	2309      	movs	r3, #9
 8012a6c:	602b      	str	r3, [r5, #0]
 8012a6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012a72:	81a3      	strh	r3, [r4, #12]
 8012a74:	f04f 30ff 	mov.w	r0, #4294967295
 8012a78:	e034      	b.n	8012ae4 <__swsetup_r+0x9c>
 8012a7a:	0758      	lsls	r0, r3, #29
 8012a7c:	d512      	bpl.n	8012aa4 <__swsetup_r+0x5c>
 8012a7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012a80:	b141      	cbz	r1, 8012a94 <__swsetup_r+0x4c>
 8012a82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012a86:	4299      	cmp	r1, r3
 8012a88:	d002      	beq.n	8012a90 <__swsetup_r+0x48>
 8012a8a:	4628      	mov	r0, r5
 8012a8c:	f7fd fc02 	bl	8010294 <_free_r>
 8012a90:	2300      	movs	r3, #0
 8012a92:	6363      	str	r3, [r4, #52]	; 0x34
 8012a94:	89a3      	ldrh	r3, [r4, #12]
 8012a96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012a9a:	81a3      	strh	r3, [r4, #12]
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	6063      	str	r3, [r4, #4]
 8012aa0:	6923      	ldr	r3, [r4, #16]
 8012aa2:	6023      	str	r3, [r4, #0]
 8012aa4:	89a3      	ldrh	r3, [r4, #12]
 8012aa6:	f043 0308 	orr.w	r3, r3, #8
 8012aaa:	81a3      	strh	r3, [r4, #12]
 8012aac:	6923      	ldr	r3, [r4, #16]
 8012aae:	b94b      	cbnz	r3, 8012ac4 <__swsetup_r+0x7c>
 8012ab0:	89a3      	ldrh	r3, [r4, #12]
 8012ab2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012ab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012aba:	d003      	beq.n	8012ac4 <__swsetup_r+0x7c>
 8012abc:	4621      	mov	r1, r4
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f000 f884 	bl	8012bcc <__smakebuf_r>
 8012ac4:	89a0      	ldrh	r0, [r4, #12]
 8012ac6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012aca:	f010 0301 	ands.w	r3, r0, #1
 8012ace:	d00a      	beq.n	8012ae6 <__swsetup_r+0x9e>
 8012ad0:	2300      	movs	r3, #0
 8012ad2:	60a3      	str	r3, [r4, #8]
 8012ad4:	6963      	ldr	r3, [r4, #20]
 8012ad6:	425b      	negs	r3, r3
 8012ad8:	61a3      	str	r3, [r4, #24]
 8012ada:	6923      	ldr	r3, [r4, #16]
 8012adc:	b943      	cbnz	r3, 8012af0 <__swsetup_r+0xa8>
 8012ade:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012ae2:	d1c4      	bne.n	8012a6e <__swsetup_r+0x26>
 8012ae4:	bd38      	pop	{r3, r4, r5, pc}
 8012ae6:	0781      	lsls	r1, r0, #30
 8012ae8:	bf58      	it	pl
 8012aea:	6963      	ldrpl	r3, [r4, #20]
 8012aec:	60a3      	str	r3, [r4, #8]
 8012aee:	e7f4      	b.n	8012ada <__swsetup_r+0x92>
 8012af0:	2000      	movs	r0, #0
 8012af2:	e7f7      	b.n	8012ae4 <__swsetup_r+0x9c>
 8012af4:	20000078 	.word	0x20000078

08012af8 <_raise_r>:
 8012af8:	291f      	cmp	r1, #31
 8012afa:	b538      	push	{r3, r4, r5, lr}
 8012afc:	4604      	mov	r4, r0
 8012afe:	460d      	mov	r5, r1
 8012b00:	d904      	bls.n	8012b0c <_raise_r+0x14>
 8012b02:	2316      	movs	r3, #22
 8012b04:	6003      	str	r3, [r0, #0]
 8012b06:	f04f 30ff 	mov.w	r0, #4294967295
 8012b0a:	bd38      	pop	{r3, r4, r5, pc}
 8012b0c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8012b0e:	b112      	cbz	r2, 8012b16 <_raise_r+0x1e>
 8012b10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012b14:	b94b      	cbnz	r3, 8012b2a <_raise_r+0x32>
 8012b16:	4620      	mov	r0, r4
 8012b18:	f000 f830 	bl	8012b7c <_getpid_r>
 8012b1c:	462a      	mov	r2, r5
 8012b1e:	4601      	mov	r1, r0
 8012b20:	4620      	mov	r0, r4
 8012b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b26:	f000 b817 	b.w	8012b58 <_kill_r>
 8012b2a:	2b01      	cmp	r3, #1
 8012b2c:	d00a      	beq.n	8012b44 <_raise_r+0x4c>
 8012b2e:	1c59      	adds	r1, r3, #1
 8012b30:	d103      	bne.n	8012b3a <_raise_r+0x42>
 8012b32:	2316      	movs	r3, #22
 8012b34:	6003      	str	r3, [r0, #0]
 8012b36:	2001      	movs	r0, #1
 8012b38:	e7e7      	b.n	8012b0a <_raise_r+0x12>
 8012b3a:	2400      	movs	r4, #0
 8012b3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012b40:	4628      	mov	r0, r5
 8012b42:	4798      	blx	r3
 8012b44:	2000      	movs	r0, #0
 8012b46:	e7e0      	b.n	8012b0a <_raise_r+0x12>

08012b48 <raise>:
 8012b48:	4b02      	ldr	r3, [pc, #8]	; (8012b54 <raise+0xc>)
 8012b4a:	4601      	mov	r1, r0
 8012b4c:	6818      	ldr	r0, [r3, #0]
 8012b4e:	f7ff bfd3 	b.w	8012af8 <_raise_r>
 8012b52:	bf00      	nop
 8012b54:	20000078 	.word	0x20000078

08012b58 <_kill_r>:
 8012b58:	b538      	push	{r3, r4, r5, lr}
 8012b5a:	4d07      	ldr	r5, [pc, #28]	; (8012b78 <_kill_r+0x20>)
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	4604      	mov	r4, r0
 8012b60:	4608      	mov	r0, r1
 8012b62:	4611      	mov	r1, r2
 8012b64:	602b      	str	r3, [r5, #0]
 8012b66:	f7f5 ffcb 	bl	8008b00 <_kill>
 8012b6a:	1c43      	adds	r3, r0, #1
 8012b6c:	d102      	bne.n	8012b74 <_kill_r+0x1c>
 8012b6e:	682b      	ldr	r3, [r5, #0]
 8012b70:	b103      	cbz	r3, 8012b74 <_kill_r+0x1c>
 8012b72:	6023      	str	r3, [r4, #0]
 8012b74:	bd38      	pop	{r3, r4, r5, pc}
 8012b76:	bf00      	nop
 8012b78:	200013a4 	.word	0x200013a4

08012b7c <_getpid_r>:
 8012b7c:	f7f5 bfb8 	b.w	8008af0 <_getpid>

08012b80 <__swhatbuf_r>:
 8012b80:	b570      	push	{r4, r5, r6, lr}
 8012b82:	460c      	mov	r4, r1
 8012b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012b88:	2900      	cmp	r1, #0
 8012b8a:	b096      	sub	sp, #88	; 0x58
 8012b8c:	4615      	mov	r5, r2
 8012b8e:	461e      	mov	r6, r3
 8012b90:	da0d      	bge.n	8012bae <__swhatbuf_r+0x2e>
 8012b92:	89a3      	ldrh	r3, [r4, #12]
 8012b94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012b98:	f04f 0100 	mov.w	r1, #0
 8012b9c:	bf0c      	ite	eq
 8012b9e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8012ba2:	2340      	movne	r3, #64	; 0x40
 8012ba4:	2000      	movs	r0, #0
 8012ba6:	6031      	str	r1, [r6, #0]
 8012ba8:	602b      	str	r3, [r5, #0]
 8012baa:	b016      	add	sp, #88	; 0x58
 8012bac:	bd70      	pop	{r4, r5, r6, pc}
 8012bae:	466a      	mov	r2, sp
 8012bb0:	f000 f848 	bl	8012c44 <_fstat_r>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	dbec      	blt.n	8012b92 <__swhatbuf_r+0x12>
 8012bb8:	9901      	ldr	r1, [sp, #4]
 8012bba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8012bbe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8012bc2:	4259      	negs	r1, r3
 8012bc4:	4159      	adcs	r1, r3
 8012bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012bca:	e7eb      	b.n	8012ba4 <__swhatbuf_r+0x24>

08012bcc <__smakebuf_r>:
 8012bcc:	898b      	ldrh	r3, [r1, #12]
 8012bce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012bd0:	079d      	lsls	r5, r3, #30
 8012bd2:	4606      	mov	r6, r0
 8012bd4:	460c      	mov	r4, r1
 8012bd6:	d507      	bpl.n	8012be8 <__smakebuf_r+0x1c>
 8012bd8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012bdc:	6023      	str	r3, [r4, #0]
 8012bde:	6123      	str	r3, [r4, #16]
 8012be0:	2301      	movs	r3, #1
 8012be2:	6163      	str	r3, [r4, #20]
 8012be4:	b002      	add	sp, #8
 8012be6:	bd70      	pop	{r4, r5, r6, pc}
 8012be8:	ab01      	add	r3, sp, #4
 8012bea:	466a      	mov	r2, sp
 8012bec:	f7ff ffc8 	bl	8012b80 <__swhatbuf_r>
 8012bf0:	9900      	ldr	r1, [sp, #0]
 8012bf2:	4605      	mov	r5, r0
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	f7fd fbc1 	bl	801037c <_malloc_r>
 8012bfa:	b948      	cbnz	r0, 8012c10 <__smakebuf_r+0x44>
 8012bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c00:	059a      	lsls	r2, r3, #22
 8012c02:	d4ef      	bmi.n	8012be4 <__smakebuf_r+0x18>
 8012c04:	f023 0303 	bic.w	r3, r3, #3
 8012c08:	f043 0302 	orr.w	r3, r3, #2
 8012c0c:	81a3      	strh	r3, [r4, #12]
 8012c0e:	e7e3      	b.n	8012bd8 <__smakebuf_r+0xc>
 8012c10:	89a3      	ldrh	r3, [r4, #12]
 8012c12:	6020      	str	r0, [r4, #0]
 8012c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c18:	81a3      	strh	r3, [r4, #12]
 8012c1a:	9b00      	ldr	r3, [sp, #0]
 8012c1c:	6163      	str	r3, [r4, #20]
 8012c1e:	9b01      	ldr	r3, [sp, #4]
 8012c20:	6120      	str	r0, [r4, #16]
 8012c22:	b15b      	cbz	r3, 8012c3c <__smakebuf_r+0x70>
 8012c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012c28:	4630      	mov	r0, r6
 8012c2a:	f000 f81d 	bl	8012c68 <_isatty_r>
 8012c2e:	b128      	cbz	r0, 8012c3c <__smakebuf_r+0x70>
 8012c30:	89a3      	ldrh	r3, [r4, #12]
 8012c32:	f023 0303 	bic.w	r3, r3, #3
 8012c36:	f043 0301 	orr.w	r3, r3, #1
 8012c3a:	81a3      	strh	r3, [r4, #12]
 8012c3c:	89a3      	ldrh	r3, [r4, #12]
 8012c3e:	431d      	orrs	r5, r3
 8012c40:	81a5      	strh	r5, [r4, #12]
 8012c42:	e7cf      	b.n	8012be4 <__smakebuf_r+0x18>

08012c44 <_fstat_r>:
 8012c44:	b538      	push	{r3, r4, r5, lr}
 8012c46:	4d07      	ldr	r5, [pc, #28]	; (8012c64 <_fstat_r+0x20>)
 8012c48:	2300      	movs	r3, #0
 8012c4a:	4604      	mov	r4, r0
 8012c4c:	4608      	mov	r0, r1
 8012c4e:	4611      	mov	r1, r2
 8012c50:	602b      	str	r3, [r5, #0]
 8012c52:	f7f5 ffb4 	bl	8008bbe <_fstat>
 8012c56:	1c43      	adds	r3, r0, #1
 8012c58:	d102      	bne.n	8012c60 <_fstat_r+0x1c>
 8012c5a:	682b      	ldr	r3, [r5, #0]
 8012c5c:	b103      	cbz	r3, 8012c60 <_fstat_r+0x1c>
 8012c5e:	6023      	str	r3, [r4, #0]
 8012c60:	bd38      	pop	{r3, r4, r5, pc}
 8012c62:	bf00      	nop
 8012c64:	200013a4 	.word	0x200013a4

08012c68 <_isatty_r>:
 8012c68:	b538      	push	{r3, r4, r5, lr}
 8012c6a:	4d06      	ldr	r5, [pc, #24]	; (8012c84 <_isatty_r+0x1c>)
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	4604      	mov	r4, r0
 8012c70:	4608      	mov	r0, r1
 8012c72:	602b      	str	r3, [r5, #0]
 8012c74:	f7f5 ffb3 	bl	8008bde <_isatty>
 8012c78:	1c43      	adds	r3, r0, #1
 8012c7a:	d102      	bne.n	8012c82 <_isatty_r+0x1a>
 8012c7c:	682b      	ldr	r3, [r5, #0]
 8012c7e:	b103      	cbz	r3, 8012c82 <_isatty_r+0x1a>
 8012c80:	6023      	str	r3, [r4, #0]
 8012c82:	bd38      	pop	{r3, r4, r5, pc}
 8012c84:	200013a4 	.word	0x200013a4

08012c88 <_init>:
 8012c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c8a:	bf00      	nop
 8012c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c8e:	bc08      	pop	{r3}
 8012c90:	469e      	mov	lr, r3
 8012c92:	4770      	bx	lr

08012c94 <_fini>:
 8012c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c96:	bf00      	nop
 8012c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c9a:	bc08      	pop	{r3}
 8012c9c:	469e      	mov	lr, r3
 8012c9e:	4770      	bx	lr
